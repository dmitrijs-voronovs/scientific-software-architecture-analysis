quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Energy Efficiency,"/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:104:65: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)13, (pybind11::detail::op_type)2, pybind11::detail::self_t, pybind11::detail::undefined_t> pybind11::detail::operator+(const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_u, self_t, undefined_t> op(const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:140:1: note: in expansion of macro ‘PYBIND11_UNARY_OPERATOR’; PYBIND11_UNARY_OPERATOR(pos, operator+, +l); ^~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; /home/work/psi4/psi4/psi4/src/core.cc:998:16: error: expected const",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1256:2630,Watt,Wattributes,2630,https://psicode.org,https://github.com/psi4/psi4/issues/1256,1,['Watt'],['Wattributes']
Energy Efficiency,"/introduction.html#citing-psifour. -----------------------------------------------------------------------. Psi4 started on: Monday, 16 September 2024 10:19PM. Process ID: 23934; Host: agincourt.lan; PSIDATADIR: /Users/cwagen/.../.pixi/envs/dev/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; C -3.385689447328 -1.019909032022 -1.749453831407 ; H -4.303799447328 -1.298729032022 -2.222123831407; C -2.336629447328 -0.701769032022 -1.209473831407 ; C -1.177199447328 -0.351139032022 -0.612463831407 ; C -0.119169447328 -0.031909032022 -0.066563831407 ; C 1.038150552672 0.314670967978 0.533526168593 ; C 2.088230552672 0.627260967978 1.081186168593; C 3.329350552672 0.995630967978 1.729406168593 ; H 3.940040552672 1.640920967978 1.078936168593 ; H 3.139820552672 1.543830967978 2.665426168593 ; H 3.926960552672 0.104360967978 1.976426168593 ; }. energy(""wb97x-3c""); --------------------------------------------------------------------------. Scratch directory: /tmp/; => Libint2 <=. Primary basis highest AM E, G, H: 6, 6, 3; Auxiliary basis highest AM E, G, H: 7, 7, 4; Onebody basis highest AM E, G, H: -, -, -; Solid Harmonics ordering: Gaussian. *** tstart() called on agincourt.lan; *** at Mon Sep 16 22:19:36 2024. => Loading Basis Set <=. Name: VDZP; Role: ORBITAL; Keyword: BASIS; atoms 1, 3-8 entry C line 117 (ECP: line 2345) file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/vdzp.gbs ; atoms 2, 9-11 entry H line 22 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/vdzp.gbs . !!! WARNING: ECP capability is in beta. Please check occupations closely. !!!. => WB97X3C: Empirical Dispersion <=. Grimme's -D4 (BJ-damping) Dispersion Correction with ATM; Caldeweyher, E.; Ehlert, S.; Hansen, A.; Neugebauer, H.; Spicher, S.; Bannwarth, C.; Grimmme, S., J. Chem. Phys. 150, 154122 (2019). a1 = 0.246400; a2 = 4.737000; alp = 16.000000; s6 = 1.000000; s8 = 0.000000; s9 = 1.0000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:17511,energy,energy,17511,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['energy'],['energy']
Energy Efficiency,"/master, but it completed okay with psi4/v1.3.2. This is due to the default integral screening threshold (`INTS_TOLERANCE`) changing from 0.0 to 1e-12 for the SCF module. The calculation converges fine when `INTS_TOLERANCE` is reset to 0.0:. ```; memory 64 GB. molecule mol {; 0 1 ; O -1.43902644 2.20001916 0.52666667; C -0.23262529 0.21202727 0.63286928; N -1.24873102 -2.11271381 0.47828968; C -3.7777515 -2.85877768 0.08730535; C -4.46145441 -5.34849185 0.74152853; C -2.56341349 -7.19739989 1.87800982; C -6.94682221 -6.16901094 0.3643392; C -8.75094374 -4.55140537 -0.66556154; C -8.08273658 -2.09627319 -1.33509151; C -5.61324248 -1.25402226 -0.96753978; C 2.6282311 0.28062433 1.05654588; C 3.98467651 2.83553405 0.63381414; N 6.54374363 2.70155247 -0.40515728; C 8.61979675 2.25141971 0.96961847; O 8.56480572 1.89615119 3.26884825; H -0.04232987 -3.54814977 0.82014114; H -3.42815216 -8.99585225 2.39447197; H -1.03934937 -7.57742382 0.54424112; H -1.71851694 -6.40333698 3.5817869; H -7.49559868 -8.07309898 0.86738429; H -10.66693706 -5.20506164 -0.95166608; H -9.47697652 -0.84262888 -2.14880758; H -5.16216486 0.65044373 -1.5435283; H 3.24390387 -0.55898099 2.83213254; H 3.51375676 -1.09698602 -0.19445282; H 3.04888413 3.57366108 -1.05446718; H 3.38827894 4.41440023 1.82490852; H 6.75331425 3.01713673 -2.28241121; H 10.34700643 2.24329388 -0.20333453; symmetry c1; no_com; no_reorient; units bohr; }. # set ints_tolerance 0.0 # uncomment to fix. energy('pbe0/aug-cc-pv_tpd_z'); ```; ~~[screen_zero.out.txt](https://github.com/psi4/psi4/files/5984125/screen_zero.out.txt)~~; ~~[screen_default.out.txt](https://github.com/psi4/psi4/files/5984126/screen_default.out.txt)~~; [failed_jobs.zip](https://github.com/psi4/psi4/files/5985739/failed_jobs.zip). I can post additional similar systems that fail at the same level of theory. Does this warrant changing the `INTS_TOLERANCE` default to a more conservative value? Or is this something that would be fixed by a more robust SCF solver?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114:1530,energy,energy,1530,https://psicode.org,https://github.com/psi4/psi4/issues/2114,1,['energy'],['energy']
Energy Efficiency,"/psi/4/master/share/psi4/basis/heavy-aug-cc-pvdz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; ROHF-MBPT(2) Wavefunction, 4 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 144; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 2 9 7 37 37 0; BETA 2 7 5 39 39 0; --------------------------------------------------------. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -149.6217688382015183 [Eh]; Singles Energy = -0.0130981432734322 [Eh]; Same-Spin Energy = -0.1180463523157988 [Eh]; Opposite-Spin Energy = -0.2655370704826780 [Eh]; Correlation Energy = -0.3966815660719090 [Eh]; Total Energy = -150.0184504042734375 [Eh]; -----------------------------------------------------------; ================> DF-SCS-MP2 Energies <==================; -----------------------------------------------------------; SCS Same-Spin Scale = 0.3333333333333333 [-]; SCS Opposite-Spin Scale = 1.2000000000000000 [-]; SCS Same-Spin Energy = -0.0393487841052663 [Eh]; SCS Opposite-Spin Energy = -0.3186444845792136 [Eh]; SCS Correlation Energy = -0.3710914119579120 [Eh]; SCS Total Energy = -149.9928602501594241 [Eh]; -----------------------------------------------------------; ```. I haven't run any other CBS hessians to see if the issue appears where psi4 might have analytic gradients or something.; I also have not tired passing `mp2_type df` into the Delta wfn explicitly. I assume that would perform the desired calculation but I believe the calculation requested in the input should perform conventional mp2 without needing to use the explicit cbs syntax.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:7498,Energy,Energy,7498,https://psicode.org,https://github.com/psi4/psi4/issues/1897,5,['Energy'],['Energy']
Energy Efficiency,"/psi4-09-26-22/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/util.py"", line 72, in oeprop; free_atom_volumes(wfn); File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/prop_util.py"", line 121, in free_atom_volumes; psi4.oeprop(at_wfn, 'MBIS_CHARGES', title=a_sym + "" "" + method, free_atom=True); File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/util.py"", line 74, in oeprop; oe.compute(). RuntimeError: ; Fatal Error: Atomic Number 53 unsupported by MBIS; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1657298395608/work/psi4/src/psi4/libmints/oeprop.cc on line: 1871; The most recent 5 function calls were:. psi::OEProp::compute_mbis_multipoles(bool); psi::OEProp::compute(). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""SCF_TYPE"", ""df""); core.set_global_option(""BASIS"", ""DZVP""); core.set_global_option(""E_CONVERGENCE"", 8); core.set_global_option(""D_CONVERGENCE"", 8); e, wfn = energy('scf', return_wfn=True); --> oeprop(wfn, ""MBIS_VOLUME_RATIOS"", 'MBIS_CHARGES', title='CH3I-dzvp'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Atomic Number 53 unsupported by MBIS !; ! Error occurred in file: /scratch/psilocaluser/conda- !; ! builds/psi4-multiout_1657298395608/work/psi4/src/psi4/libmints/oeprop.cc on !; ! line: 1871 !; ! The most recent 5 function calls were: !; ! psi::OEProp::compute_mbis_multipoles(bool) !; ! psi::OEProp::compute() !; ! !; !----------------------------------------------------------------------------------!; ```. It works fine with `def2-svp`, I doubt whether this is related to an earlier fix for auxiliary basis set for DZVP (https://github.com/psi4/psi4/pull/2134). . Best,; Pavan. Edit: Old PR updated to 2134",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2728:1764,energy,energy,1764,https://psicode.org,https://github.com/psi4/psi4/issues/2728,1,['energy'],['energy']
Energy Efficiency,"/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 225, in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 411, in compute_nbody_components; current_mol = molecule.extract_subsets(list(pair[0]), ghost). RuntimeError: ; Fatal Error: Coordinates have been set in the wrong order; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 239 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Molecule::operator=(psi::Molecule const&); psi::Molecule::Molecule(psi::Molecule const&); ```. Given that the user's problem is failure for the SCF to converge, I can only assume some change since the 1.2.1 release is at fault. I've been able to get the crash with the following simplified input file:; ```; molecule dimer {; 1 1; C1 0.000000 0.513942 0.000000; N2 0.628754 1.703580 0.000000; H3 0.109407 2.571793 0.000000; H4 1.638743 1.762759 0.000000; N5 -1.342220 0.473050 0.000000; H6 -1.890262 1.323784 0.000000; H7 -1.839824 -0.407373 0.000000; N8 0.700723 -0.623756 0.000000; H9 1.712010 -0.555355 0.000000; C10 0.085273 -1.957243 0.000000; H11 0.892679 -2.697454 0.000000; H12 -0.522596 -2.104233 0.905528; H13 -0.522596 -2.104233 -0.905528; --; -1 1; I N8 3.6 H9 90.0 C1 90.0; }. basis {. assign H def2-tzvpd; assign C def2-tzvpd; assign N def2-tzvpd. assign I def2-tzvpd; }. set guess sad; set scf_type df; set maxiter 500; set soscf true; set soscf_max_iter 15; set soscf_conv 1.e-4; set freeze_core false ## false for ions. energy(""mp2"", bsse_type = ""cp""); ```; This can probably be simplified further. It would be worth investigating whether this is a consequence of mixing Cartesian and ZMAT coordinates.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1325:2569,energy,energy,2569,https://psicode.org,https://github.com/psi4/psi4/issues/1325,1,['energy'],['energy']
Energy Efficiency,"/psi4/basis/sto-3g.gbs; atoms 2-3 entry H line 19 file /opt/conda/share/psi4/basis/sto-3g.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.065775570547 15.994914619570; H 0.000000000000 -0.759061990794 0.521953018286 1.007825032230; H 0.000000000000 0.759061990794 0.521953018286 1.007825032230. Running in c2v symmetry. Rotational constants: A = 27.26297 B = 14.51533 C = 9.47217 [cm^-1]; Rotational constants: A = 817323.21126 B = 435158.60141 C = 283968.37536 [MHz]; Nuclear repulsion = 9.168193296424349. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: STO-3G; Blend: STO-3G; Number of shells: 5; Number of basis functions: 7; Number of Cartesian functions: 7; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (STO-3G AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1 entry O line 318 file /opt/conda/share/psi4/basis/def2-universal-jkfit.gbs; atoms 2-3 entry H line 18 file /opt/conda/share/psi4/basis/def2-universal-jkfit.gbs; ```. If I add `mp.set_start_method('spawn', force=True)`, I can get this to work - or I can run this script on macOS, for which `mp` uses `spawn` by default. This code also runs if I uncomment `proc.run()`, which runs the function in the same process instead of creating a new process. . Any advice here?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3189:2139,Energy,Energy,2139,https://psicode.org,https://github.com/psi4/psi4/issues/3189,1,['Energy'],['Energy']
Energy Efficiency,"/psi4/psi4/issues/1116 :. 1.) Split Prop into ; - - Prop: All One Electron convenience accessors and setters and getters, but no access to globals at all. Prop is now only a convenience class, which sets up a few nice accessors.; - - TaskListComputer: This class handles all the compute baseclass elements of Prop, adding, removing tasks from a task queue and computing them. It's very low complexity.; This was done to allow Prop to be easily inheritable without having to implement all the Taskqueue things, which honestly did not have a lot do with Prop itself. This commit makes using Prop inside the code a ton easier.; This was done in commit ; 528c0d7 : https://github.com/psi4/psi4/commit/528c0d719e8bb49b12652417b00db506241a4bee. 2.) Split OEProp in three distinct classes:; - - MultipolePropCalc: This class calculates all multipole properties and mo extents in commit: ; 59005ee https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e; - - PopulationAnalysisCalc: This class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directly without any interference from Python and C++. The reason t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1133:1098,charge,charges,1098,https://psicode.org,https://github.com/psi4/psi4/pull/1133,1,['charge'],['charges']
Energy Efficiency,"0 1.403617700000 -2.603965500000; H 2.084603000000 0.521976000000 -2.972940400000; C 4.806061200000 -1.299837300000 1.069941600000; H 5.255832800000 -1.677434300000 1.995985100000; H 5.435230800000 -0.488422700000 0.699837500000; H 4.834740800000 -2.114113900000 0.338643400000; C 2.561315100000 -2.067960800000 1.878190500000; H 2.501285900000 -2.864212200000 1.130337600000; H 1.543963400000 -1.790105100000 2.156196500000; H 3.062895500000 -2.476510500000 2.763911500000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-PR07-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-PR07-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()). # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-H2-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; H 0.798743700000 0.046507300000 0.075739400000; H 1.071087200000 0.408924800000 0.665066700000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-H2-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for rea",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1338:5544,energy,energy,5544,https://psicode.org,https://github.com/psi4/psi4/issues/1338,1,['energy'],['energy']
Energy Efficiency,"0 | 4.081. Timings and Max RAM Usage for DF-MP2-F12/3C(FIX):; VTZ-F12 | NOBS | NCABS | NAUX | Total (s) | maxvmem (GB); -- | -- | -- | -- | -- | --; CH4 | 125 | 239 | 290 | 6.24 | 3.219; NH3 | 107 | 198 | 244 | 4.91 | 2.763; H2O | 89 | 157 | 198 | 2.13 | 2.282; HF | 71 | 116 | 152 | 1.18 | 2.128. ### VTune Analysis for MP2-F12/3C(FIX); Memory consumption is most egregious in the `form_teints` where the allocation of the AO ERI is quite large with the largest AO being (NOBS, NOBS, NRI, NRI) e.g. CH4 would be (125, 125, 364, 364); ![image](https://github.com/psi4/psi4/assets/52012150/7483bfd5-b2ec-4a32-a5a8-1f905d745054). CPU Time all goes back to the `form_teints` function and specifically the `two_body_ao_computer`; ![image](https://github.com/psi4/psi4/assets/52012150/07eedb8d-5e89-4614-a4f3-315a7f669f27). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] MP2-F12 single-point energy. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Computes in-core MP2-F12/3C(FIX) energy; - [X] Computes disk MP2-F12/3C(FIX) energy; - [X] Computes in-core DF-MP2-F12/3C(FIX) energy; - [X] Computes disk DF-MP2-F12/3C(FIX) energy. ## Questions; - [ ] I am unsure if I have done the disk implementation correctly.; - [ ] The max RAM usage for the conventional is quite large. I could use some suggestions on how to get this down.; - [ ] The conventional MP2-F12/3C(FIX) is not as usable as I would like with the high max RAM usage and slow integral computation. DF-MP2-F12/3C(FIX) is recommended over the conventional.; - [ ] This version of DF-MP2-F12/3C(FIX) uses a more robust scheme than ORCA and MPQC for the density-fitting. . ## Checklist; - [x] Documentation; - [x] Tests added for",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3110:2676,energy,energy,2676,https://psicode.org,https://github.com/psi4/psi4/pull/3110,1,['energy'],['energy']
Energy Efficiency,"0.00000000 0.00000000 0.00000000; C 1.21064700 0.71690500 0.00000000; C 1.20587000 2.10633100 0.00000000; C 0.00000000 2.80649500 0.00000000; C -1.20587000 2.10633100 0.00000000; C -1.21064700 0.71690500 0.00000000; H -2.14648500 0.17133400 0.00000000; H -2.14658900 2.64534700 0.00000000; H 0.00000000 3.89046700 0.00000000; H 2.14658900 2.64534700 0.00000000; H 2.14648500 0.17133400 0.00000000; C 0.00000000 -1.42321300 0.00000000; C 0.00000000 -2.63387100 0.00000000; C 0.00000000 -4.05708400 0.00000000; C -1.21064700 -4.77398900 0.00000000; C -1.20587000 -6.16341500 0.00000000; C 0.00000000 -6.86357900 0.00000000; C 1.20587000 -6.16341500 0.00000000; C 1.21064700 -4.77398900 0.00000000; H 2.14648500 -4.22841800 0.00000000; H 2.14658900 -6.70243100 0.00000000; H 0.00000000 -7.94755100 0.00000000; H -2.14658900 -6.70243100 0.00000000; H -2.14648500 -4.22841800 0.00000000. }. set scf_type df; set basis aug-cc-pVTZ; set reference uks. mol.update_geometry(); mol.symmetrize(1e-3). energy('b3lyp'); ```. I observe; ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; Ag 160 160 ; B1g 130 130 ; B2g 63 63 ; B3g 84 84 ; Au 63 63 ; B1u 84 84 ; B2u 160 160 ; B3u 130 130 ; -------------------------; Total 874 874; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UKS iter SAD: -538.61970612101391 -5.38620e+02 0.00000e+00 . Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin//psi4"", line 338, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2455, in run_scf; scf_wfn = scf_helper(name, ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2594:1160,energy,energy,1160,https://psicode.org,https://github.com/psi4/psi4/issues/2594,1,['energy'],['energy']
Energy Efficiency,"0.0000000000. }. set {; reference rohf; d_convergence 10; e_convergence 10; basis_guess True; max_force_g_convergence 1e-7; freeze_core True; }. E = energy('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z'); H = frequency('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1; --------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:1144,ENERGY,ENERGY,1144,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['ENERGY'],['ENERGY']
Energy Efficiency,0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0.013096; 4A 0.031501 5A 0.060513 6A 0.060513; 7A 0.069525 8A 0.095086 9A 0.095086; 10A 0.137869 11A 0.165536 12A 0.208043; 13A 0.433342 14A 0.433342 15A 0.441856; 16A 0.441856 17A 0.448174 18A 0.472941; 19A 1.496359 20A 1.532476 21A 2.670316; 22A 2.670316 23A 2.674872 24A 2.674872; 25A 2.681167 26A 2.694559. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @UHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594355422; Two-Electron Energy = 1.0674974882236108; Total Energy = -4.3332496681624875. ```; **output ROHF**; ```; ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. Singly Occupied:. 1A -1.100095 2A -1.099427 3A -0.089533; 4A -0.038589. Virtual:. 5A 0.029531 6A 0.035908 7A 0.035908; 8A 0.073244 9A 0.073244 10A 0.106854; 11A 0.112697 12A 0.153001 13A 0.409470; 14A 0.409470 15A 0.418444 16A 0.418444; 17A 0.422709 18A 0.447857 19A 1.338927; 20A 1.377853 21A 2.585893 22A 2.585893; 23A 2.590572 24A 2.590572 25A 2.596665; 26A 2.610180. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @ROHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594321973; Two-Electron Energy = 1.0674974882202668; Total Energy = -4.3332496681624875; ```. EDIT: there was,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1975:3033,Energy,Energy,3033,https://psicode.org,https://github.com/psi4/psi4/issues/1975,1,['Energy'],['Energy']
Energy Efficiency,"0.21455 -1.28105; H 1.61155 -1.37871 0.79725; H -0.00411 -0.81057 2.57479; H -0.26633 0.85763 1.80344; H 2.16195 0.28247 -0.96305; H 1.24281 1.54792 -0.09693; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; }. nrg, wfn = energy('M06-2X', return_wfn=True); wfn.to_file(""test_restart""); ```. This creates a ""test_restart.npy"" file. I then try to compute the energy for the same molecule using this test_restart.npy file and a different input file:. ```py; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C 1.13408 -0.39513 0.82671; C 0.24384 -0.10727 1.77918; C 1.25947 0.48184 -0.37564; C -1.70320 -0.60897 -0.07371; C -1.08313 0.35853 -0.75350; O 0.15798 0.21455 -1.28105; H 1.61155 -1.37871 0.79725; H -0.00411 -0.81057 2.57479; H -0.26633 0.85763 1.80344; H 2.16195 0.28247 -0.96305; H 1.24281 1.54792 -0.09693; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; }. nrg, wfn = energy('M06-2X', return_wfn=True, restart_file=""test_restart""); ```. However, I get the following error :. ```; Traceback (most recent call last):; File ""/home/tony/psi4conda/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2390, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1520, in scf_helper; old_wfn = core.Wavefunction.from_file(read_filename); File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/p4util/python_helpers.py"", line 196, in _core_wavefunction_from_file; basisset = core.BasisSet.build(molecule, 'ORBITAL', basis_name, puream=basis_puream); File ""/home/tony/psi4con",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2571:1566,energy,energy,1566,https://psicode.org,https://github.com/psi4/psi4/issues/2571,1,['energy'],['energy']
Energy Efficiency,"0.754159895630; C 0.705817366890 -0.292132845559 -0.060119676721; H 1.697771204799 1.493890140835 -0.841405738393; H 2.809791237804 0.316266152249 -0.104120355409; H 1.780184254006 1.337108071239 0.927741879375; C 1.808370373970 0.768135672436 -0.017435993935; }. # Now generate torsion scan . steps = 36; start_angle = 0.001; step_size = 10. table = Table(rows=[""D""], cols=[""E(SCF)""]). for counter in range(0, steps):; # set smaller basis for geometry optimization; set{; basis 6-31G*; scf_type df; guess sad; }. dihedral = 1.0 * counter * step_size + start_angle; dihedral_string = ""4 7 10 14 %.5f"" % dihedral. set optking{; frozen_dihedral = """"; fixed_dihedral = $dihedral_string; }. optimize('scf') #geometry optimization with HF; geom = c4h10.geometry(); geom.print_out() # Print out optimized geometry. # Print to screen; print('-------------------------------------------'); print('| Optimized geometry for dihedral %.2f |' % dihedral); print('-------------------------------------------'); geom_py = mat2arr(geom); print(geom_py). for atom in range(c4h10.natom()):; print(""""""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; c4h10.Z(atom), # atomic number; c4h10.symbol(atom), # element symbol; c4h10.label(atom), # input element label; c4h10.charge(atom), # element charge; c4h10.x(atom), # x-coordinate; c4h10.y(atom), # y-coordinate; c4h10.z(atom), # z-coordinate; c4h10.mass(atom), # mass; )). energy('scf') # HF single point energy; escf = get_variable('SCF TOTAL ENERGY'); table[dihedral] = [escf]. print('------------------------'); print(' Table of Energies '); print('------------------------'); print table; relative = table.copy(); relative.absolute_to_relative(); print('Relative table (Kcal/mol)'); print relative; ```. I used a start angle of 0.001 instead of zero because when the angle was exactly 0 I got the following error:. ```; Format of dihedral entry is ""D atom_1 atom_2 atom_3 atom_4 (eq_val)""; Dynamic level is 0.; exc.g_really_quit() is 0.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647:1952,charge,charge,1952,https://psicode.org,https://github.com/psi4/psi4/issues/647,5,"['ENERGY', 'charge', 'energy']","['ENERGY', 'charge', 'energy']"
Energy Efficiency,"0.778803000000 0.000000000000 1.132683000000; H -0.666682000000 0.764099000000 1.706291000000; H -0.666682000000 -0.764099000000 1.706290000000; symmetry c1; no_reorient; no_com; }. gradient(""PBE0""). Chrgfield = QMMM(); Chrgfield.extern.addCharge(-0.834,1.649232019048,0.0,-2.356023604706); Chrgfield.extern.addCharge(0.417,0.544757019107,0.0,-3.799961446760); Chrgfield.extern.addCharge(0.417,0.544757019107,0.0,-0.912085762652); psi4.set_global_option_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. 2) A helium atom with a point charge (q=-1) 1 Angstrom away. ```; memory 1 gb; set reference rks; set basis 6-31G*; set guess sad; set scf_type df. molecule QMregion {; 0 1; He 0.0 0.0 0.0; symmetry c1; no_reorient; no_com; }. gradient(""PBE0""). Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1,0.0,0.0,1.8897261245650618); psi4.set_global_option_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. For test 1, the gradient from the water and the water+charges are different, but they do not agree with the forces returned by an equivalent calculation with Gaussian. The isolated water molecule has gradients that agree with the Gaussian forces, but once the charges are added the Gaussian and PSI4 calculations return different results. For test 2, the PSI4 gradient is zero for the for the helium with and without the point charge. The charge has no effect on the results. When I repeated the calculation with Gaussian, there was a finite force on the helium atom when a charge was included. Here are the gradient results I pulled from the output files:. ```; Water+Charges (TIP3P charges: O->-0.834, H->0.417). PSI4 gradient without charges:; 1 -0.000345685156 -0.000000503248 -0.001768512746; 2 0.000171019827 0.000099064969 0.000874930893; 3 0.000170945942 -0.000098562011 0.000874553581. Gaussian forces without charges:; 1 8 0.000342119 0.000000502 0.001755656; 2 1 -0.000171096 -0.000103970 -0.000878017; 3 1 -0.000171022 0.000103468 -0.000877640. PSI4 gradient with charges",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/184:1351,charge,charges,1351,https://psicode.org,https://github.com/psi4/psi4/issues/184,1,['charge'],['charges']
Energy Efficiency,"00 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1975:1361,energy,energy,1361,https://psicode.org,https://github.com/psi4/psi4/issues/1975,7,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"00 electron.; Alpha orbital 5 will contain 1.000E+00 electron.; Beta orbital 3 will contain 6.667E-01 electron.; Beta orbital 4 will contain 6.667E-01 electron.; Beta orbital 5 will contain 6.667E-01 electron. @UHF iter 1: -85.83418494087701 -8.58342e+01 1.47308e-01 DIIS; Occupation by irrep:; A ; DOCC [ 5 ]; SOCC [ 0 ]. @UHF iter 2: -86.90714628725982 -1.07296e+00 4.33630e-02 FRAC; @UHF iter 3: -96.04326201435347 -9.13612e+00 5.10365e-02 DIIS/FRAC; @UHF iter 4: -95.69273858723787 3.50523e-01 3.47534e-02 DIIS/FRAC; @UHF iter 5: -98.96468336105178 -3.27194e+00 1.08919e-02 DIIS/FRAC; @UHF iter 6: -99.16143874023540 -1.96755e-01 9.82232e-04 DIIS/FRAC; @UHF iter 7: -99.16448800785139 -3.04927e-03 2.62203e-04 DIIS/FRAC; @UHF iter 8: -99.16466805777382 -1.80050e-04 9.94209e-05 DIIS/FRAC; @UHF iter 9: -99.16470603597492 -3.79782e-05 8.45894e-06 DIIS/FRAC; @UHF iter 10: -99.16470620018562 -1.64211e-07 6.74767e-07 DIIS/FRAC; Energy and wave function converged.; ```; and the final energy is close to my fully numerical value `-99.164711346`. However, if you remove `symmetry c1`, it is not using fractional occupations at all:; ```; ==> Fractionally-Occupied SCF Iterations <==. Alpha orbital 3 will contain 1.000E+00 electron.; Alpha orbital 4 will contain 1.000E+00 electron.; Alpha orbital 5 will contain 1.000E+00 electron.; Beta orbital 3 will contain 6.667E-01 electron.; Beta orbital 4 will contain 6.667E-01 electron.; Beta orbital 5 will contain 6.667E-01 electron. @UHF iter 1: -85.83418494094745 -8.58342e+01 2.89307e-01 DIIS; Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]. @UHF iter 2: -87.14703249342156 -1.31285e+00 8.61028e-02 FRAC; @UHF iter 3: -94.44949400540921 -7.30246e+00 1.33943e-01 DIIS/FRAC; @UHF iter 4: -88.66303583515608 5.78646e+00 7.46716e-02 DIIS/FRAC; @UHF iter 5: -97.45982782482486 -8.79679e+00 7.49420e-02 DIIS/FRAC; @UHF iter 6: -99.09220877420857 -1.63238e+00 2.78679e-02 DIIS/FRAC; @UH",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1673:3448,energy,energy,3448,https://psicode.org,https://github.com/psi4/psi4/issues/1673,1,['energy'],['energy']
Energy Efficiency,000 -0.893 0.000 0.000 0.000 -7.342 		 |	w1 Extern-B 59.651 0.000 -0.893 0.000 0.000 0.000 58.757 ; Extern-A w3 -9.800 0.000 0.000 -1.200 0.000 0.000 -11.000 		 |	Extern-A w3 -103.747 0.000 0.000 -1.200 0.000 0.000 -104.947 ; Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 			Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 ; w1 All -15.193 11.445 -3.138 -0.663 -1.754 0.000 -9.303 		 |	w1 All 50.906 11.445 -3.138 -0.663 -1.754 0.000 56.796 ; Extern-A All -15.674 0.000 0.000 -1.200 0.000 0.000 -16.874 		 |	Extern-A All -109.621 0.000 0.000 -1.200 0.000 0.000 -110.821 ; All w3 -18.545 11.445 -2.245 -1.863 -1.754 0.000 -12.961 		 |	All w3 -112.492 11.445 -2.245 -1.863 -1.754 0.000 -106.908 ; All Extern-B -12.322 0.000 -0.893 0.000 0.000 0.000 -13.216 		 |	All Extern-B 53.777 0.000 -0.893 0.000 0.000 0.000 52.883 ; All All -30.867 11.445 -3.138 -1.863 -1.754 0.000 -26.177 		 |	All All -58.715 11.445 -3.138 -1.863 -1.754 0.000 -54.025 . => Reduced Analysis <=										 => Reduced Analysis <=. Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total 			Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total ; w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 			w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 ; w1 Extern-B -6.448 0.000 -0.893 0.000 0.000 0.000 -7.342 		 |	w1 Extern-B 59.651 0.000 -0.893 0.000 0.000 0.000 58.757 ; Extern-A w3 -9.800 0.000 0.000 -1.200 0.000 0.000 -11.000 		 |	Extern-A w3 -103.747 0.000 0.000 -1.200 0.000 0.000 -104.947 ; Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 			Extern-A Extern-B -5.874 0.000 0.000 0.000 0.000 0.000 -5.874 ; w1 All -15.193 11.445 -3.138 -0.663 -1.754 0.000 -9.303 		 |	w1 All 50.906 11.445 -3.138 -0.663 -1.754 0.000 56.796 ; Extern-A All -15.674 0.000 0.000 -1.200 0.000 0.000 -16.874 		 |	Extern-A All -109.621 0.000 0.000 -1.200 0.000 0.000 -110.821 ; All w3 -18.545 11.445 -2.245 -1.863 -1.754 0.000 -12.961 		 |	All w3 -112.492 11.445 -2.245 -1.863 -1.754 0.000 -106.908 ; All E,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2330:8731,Reduce,Reduced,8731,https://psicode.org,https://github.com/psi4/psi4/issues/2330,4,['Reduce'],['Reduced']
Energy Efficiency,"000 0.000000000000; H -2.169000000000 2.147000000000 0.000000000000; H -4.649000000000 2.147000000000 0.000000000000; H -5.888000000000 0.000000000000 0.000000000000; H -4.649000000000 -2.147000000000 0.000000000000; H -2.169000000000 -2.147000000000 0.000000000000; C -0.611000000000 0.000000000000 0.000000000000; C 0.611000000000 0.000000000000 0.000000000000; C 2.013000000000 0.000000000000 0.000000000000; C 4.805000000000 0.000000000000 0.000000000000; C 4.107000000000 1.209000000000 0.000000000000; C 2.711000000000 1.209000000000 0.000000000000; C 2.711000000000 -1.209000000000 0.000000000000; C 4.107000000000 -1.209000000000 0.000000000000; H 4.649000000000 2.147000000000 0.000000000000; H 2.169000000000 2.147000000000 0.000000000000; H 5.888000000000 0.000000000000 0.000000000000; H 2.169000000000 -2.147000000000 0.000000000000; H 4.649000000000 -2.147000000000 0.000000000000; ```. Running in c1 symmetry. Nuclear repulsion = 697.113178296437809. Charge = 0; Multiplicity = 1; Electrons = 94; Nalpha = 47; Nbeta = 47. ==> Algorithm <==. SCF Algorithm Type is OUT_OF_CORE.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-08; Density threshold = 1.00e-10; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: CC-PVDZ; Number of shells: 114; Number of basis function: 246; Number of Cartesian functions: 260; Spherical Harmonics?: true; Max angular momentum: 2. ==> Pre-Iterations <==. ---. ```; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; ```. ---. ```; A 246 246 0 0 0 0; ```. ---. ```; Total 246 246 47 47 47 0; ```. ---. Starting with a DF guess... OEINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of atoms: 24; Number of AO shells: 114; Number of SO shells: 114; Number of primitives: 358; Number of atomic orbitals: 260; Number of basis functions: 246. ```; Number of irreps: 1; Number of functions per irrep: [ 246 ]. Overlap, kinetic, potential, dipole, and quadrupole integr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61:5280,Charge,Charge,5280,https://psicode.org,https://github.com/psi4/psi4/issues/61,2,['Charge'],['Charge']
Energy Efficiency,"00000000 -7.94755100 0.00000000; H -2.14658900 -6.70243100 0.00000000; H -2.14648500 -4.22841800 0.00000000. }. set scf_type df; set basis aug-cc-pVTZ; set reference uks. mol.update_geometry(); mol.symmetrize(1e-3). energy('b3lyp'); ```. I observe; ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; Ag 160 160 ; B1g 130 130 ; B2g 63 63 ; B3g 84 84 ; Au 63 63 ; B1u 84 84 ; B2u 160 160 ; B3u 130 130 ; -------------------------; Total 874 874; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UKS iter SAD: -538.61970612101391 -5.38620e+02 0.00000e+00 . Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin//psi4"", line 338, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2455, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1670, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 429, in scf_iterate; self.form_C(). RuntimeError: ; Fatal Error: Count 49 alpha electrons, expected 48.; This is a bug. Please file a report.; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libscf_solver/hf.cc on line: 482; ```. Quick counting says that 48 is the expected number of alpha electrons for this system.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2594:1946,energy,energy,1946,https://psicode.org,https://github.com/psi4/psi4/issues/2594,2,['energy'],['energy']
Energy Efficiency,"0000000000 1.378195289586; C 0.000000000000 -1.112779051192 0.642308628677; C -0.000000000000 1.112779051192 0.642308628677; N 0.000000000000 -1.193800518377 -0.689363570963; CL 0.000000000000 -2.604296831956 1.503991149589; CL -0.000000000000 2.604296831956 1.503991149589; CL -0.000000000000 0.000000000000 -3.007607968024; }; mol.update_geometry(); mol.symmetrize(0.01). set reference rks; set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True). set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.12, 0.12, 0.12]; cubeprop(wfn); ```; give this in cube header:. > Sum of electrons: 58527.1 number of electrons: 101.135. from the chargemol program; > nvalence = 90.0000; pixelvolume = 1.7280E-03; numerically integrated valence density = 1.0113E+02; sum_valence_occupancy_correction = 0.0000E+00; checkme = 1.1135E+01; The electrons are not properly accounted for.; Either the grid in your electron density input file is too coarse, you have specified the incorrect net charge in the chargemol_job.m file, or t$; Program will terminate. Further testing by changing on the grid spacing (worst case here above):; ```; grid:0.2, error:5.2489 ; grid:0.19, error:4.5155 ; grid:0.18, error:2.4477 ; grid:0.17, error:3.6323 ; grid:0.16, error:2.3993 ; grid:0.15, error:2.8355 . grid:0.14, error:2.4962 ; grid:0.138, error:4.6381; grid:0.136, error:0.8501; grid:0.134, error:1.4051; grid:0.132, error:1.2419; grid:0.13, error:0.58084; grid:0.128, error:1.5786; grid:0.126, error:1.0912; grid:0.124, error:0.25624; grid:0.122, error:4.2158; grid:0.12, error:11.538; grid:0.118, error:3.1169; grid:0.116, error:1.4544; grid:0.114, error:1.4049; grid:0.112, error:1.502; grid:0.11, error:0.29599; grid:0.108, error:1.1679; grid:0.106, error:0.73735; grid:0.104, error:1.9971; grid:0.102, error:0.6448; grid:0.1, error:0.92615. grid:0.09, error:1.1189; grid:0.08, error:0.3121; grid:0.07, error:0.2545; grid:0.06, error:0.20924; grid:0.05, err",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311:1834,charge,charge,1834,https://psicode.org,https://github.com/psi4/psi4/issues/1311,1,['charge'],['charge']
Energy Efficiency,"0000000000; C 1.606477124020 0.927500000000 0.000000000000; C 1.606477124020 -0.927500000000 0.000000000000; C -1.606477124020 0.927500000000 0.000000000000; C -1.606477124020 -0.927500000000 0.000000000000; H -0.000000000000 3.289000000000 0.000000000000; H 0.000000000000 -3.289000000000 0.000000000000; H 2.848357553047 1.644500000000 0.000000000000; H 2.848357553047 -1.644500000000 0.000000000000; H -2.848357553047 1.644500000000 0.000000000000; H -2.848357553047 -1.644500000000 0.000000000000; ```. At the end of optking:. ```; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); C -0.0000000000 0.9816237969 0.0000000000; C 0.0000000000 -0.9816237969 0.0000000000; C 0.8501111451 0.4908118984 0.0000000000; C 0.8501111451 -0.4908118984 0.0000000000; C -0.8501111451 0.4908118984 0.0000000000; C -0.8501111451 -0.4908118984 0.0000000000; H -0.0000000000 1.7404639720 0.0000000000; H 0.0000000000 -1.7404639720 -0.0000000000; H 1.5072860141 0.8702319860 0.0000000000; H 1.5072860141 -0.8702319860 0.0000000000; H -1.5072860141 0.8702319860 0.0000000000; H -1.5072860141 -0.8702319860 0.0000000000; ```. The new SCF:. ```; Geometry (in Bohr), charge = 0, multiplicity = 1:. Center X Y Z ; ------------ ----------------- ----------------- -----------------; C -0.000000000000 1.855000000000 0.000000000000; C 0.000000000000 -1.855000000000 0.000000000000; C 1.606477124020 0.927500000000 0.000000000000; C 1.606477124020 -0.927500000000 0.000000000000; C -1.606477124020 0.927500000000 0.000000000000; C -1.606477124020 -0.927500000000 0.000000000000; H -0.000000000000 3.289000000000 0.000000000000; H 0.000000000000 -3.289000000000 0.000000000000; H 2.848357553047 1.644500000000 0.000000000000; H 2.848357553047 -1.644500000000 0.000000000000; H -2.848357553047 1.644500000000 0.000000000000; H -2.848357553047 -1.644500000000 0.000000000000; ```. In other folders (than /tmp) it works fine. Maybe change the naming scheme?. Best,; Sebastian",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/66:2110,charge,charge,2110,https://psicode.org,https://github.com/psi4/psi4/issues/66,1,['charge'],['charge']
Energy Efficiency,"00007F6F9C906B20 Unknown Unknown Unknown; libc-2.28.so 00007F6F9BDDC37F gsignal Unknown Unknown; libc-2.28.so 00007F6F9BDC6DB5 abort Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B535A Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B53C5 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B5658 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B5A129 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B69438 _ZN3psi4PSIO2rwEm Unknown Unknown; core.cpython-310- 00007F6F88B6B963 _ZN3psi4PSIO5writ Unknown Unknown; core.cpython-310- 00007F6F88B566E9 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6DFBF4 Unknown Unknown Unknown; libpthread-2.28.s 00007F6F9C8FC14A Unknown Unknown Unknown; libc-2.28.so 00007F6F9BEA1DC3 clone Unknown Unknown; /var/spool/slurm/slurmd/job83930/slurm_script: line 27: 2245656 Aborted (core dumped). ```. </details>. CPU information:. <details>. ```; processor : 15; vendor_id : GenuineIntel; cpu family : 6; model : 45; model name : Intel(R) Xeon(R) CPU E5-2670 0 @ 2.60GHz; stepping : 6; microcode : 0x621; cpu MHz : 1832.125; cache size : 20480 KB; physical id : 1; siblings : 8; core id : 7; cpu cores : 8; apicid : 46; initial apicid : 46; fpu : yes; fpu_exception : yes; cpuid level : 13; wp : yes; flags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm pti ssbd ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid xsaveopt dtherm arat pln pts md_clear flush_l1d; bugs : cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf mds swapgs itlb_multihit; bogomips : 5194.34; clflush size : 64; cache_alignment : 64; address sizes : 46 bits physical, 48 bits virtual; power management:; ```. </details>",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:13869,monitor,monitor,13869,https://psicode.org,https://github.com/psi4/psi4/issues/2970,2,"['monitor', 'power']","['monitor', 'power']"
Energy Efficiency,"0000; C 0.00000000 -2.63387100 0.00000000; C 0.00000000 -4.05708400 0.00000000; C -1.21064700 -4.77398900 0.00000000; C -1.20587000 -6.16341500 0.00000000; C 0.00000000 -6.86357900 0.00000000; C 1.20587000 -6.16341500 0.00000000; C 1.21064700 -4.77398900 0.00000000; H 2.14648500 -4.22841800 0.00000000; H 2.14658900 -6.70243100 0.00000000; H 0.00000000 -7.94755100 0.00000000; H -2.14658900 -6.70243100 0.00000000; H -2.14648500 -4.22841800 0.00000000. }. set scf_type df; set basis aug-cc-pVTZ; set reference uks. mol.update_geometry(); mol.symmetrize(1e-3). energy('b3lyp'); ```. I observe; ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; Ag 160 160 ; B1g 130 130 ; B2g 63 63 ; B3g 84 84 ; Au 63 63 ; B1u 84 84 ; B2u 160 160 ; B3u 130 130 ; -------------------------; Total 874 874; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UKS iter SAD: -538.61970612101391 -5.38620e+02 0.00000e+00 . Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin//psi4"", line 338, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2455, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1670, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2594:1589,Energy,Energy,1589,https://psicode.org,https://github.com/psi4/psi4/issues/2594,1,['Energy'],['Energy']
Energy Efficiency,"00025 -0.00000001 -0.00000021 -0.00000007 0.00000005; # 2 0.00000010 0.00000008 0.00000000 0.00000001 -0.00000020; # 3 0.00000038 -0.00000005 -0.00000006 -0.00000023 -0.00000003. def test_norm_start(mol):; g0 = gradient('mp2', molecule=mol); compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(norm_g_start, g0, 3, 'start grad'). def test_zero_grad(mol):; e, wfn = optimize('mp2', return_wfn=True, molecule=mol); g = wfn.gradient(); g.print_out(); compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); compare_matrices(zerograd, g, 3, 'opt ZERO grad'). def test_odd_start(mol):; g0 = gradient('mp2', molecule=mol); compare_values(odd_nre_start, mol.nuclear_repulsion_energy(), 1, 'start nre'); compare_values(odd_e_start, get_variable('CURRENT ENERGY'), 3, 'start ene'); compare_values(odd_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(odd_g_start, g0, 3, 'start grad'). def test_badodd_grad(mol):; e, wfn = optimize('mp2', return_wfn=True, molecule=mol); g = wfn.gradient(); g.print_out(); compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); compare_values(odd_rmsg_opt, g.rms(), 4, 'opt grad nogood'). test_norm_start(normz); test_zero_grad(normz). # And behold, the initial gradient matches Q-Chem, the optimization; # progresses nicely, the RMS Force column goes to zero, and the gradient; # at the end is zero. # start nre.........................................................PASSED; # start ene.........................................................PASSED; # start rms grad....................................................PASSED; # start grad..............................................",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:2774,ENERGY,ENERGY,2774,https://psicode.org,https://github.com/psi4/psi4/issues/310,1,['ENERGY'],['ENERGY']
Energy Efficiency,"000308; CONVERGED STATE 4 ENERGY= -99.5258078193; CONVERGED STATE 5 ENERGY= -99.5258078193; CONVERGED STATE 6 ENERGY= -99.5095744807; ```; while Psi4 predicts:; ```; Psi4 LiCN/6-31G* (symmetry c1, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.5315015582624; CI ROOT 2 TOTAL ENERGY:-99.53150155297872; CI ROOT 3 TOTAL ENERGY:-99.52581092386518; CI ROOT 4 TOTAL ENERGY:-99.52581092379563; CI ROOT 5 TOTAL ENERGY:-99.5096013650753; CI ROOT 6 TOTAL ENERGY:-99.48378441050741; ````; this result doesn't change with or without frozen core, but the results are fine with STO-3G, as well as water with 6-31G*. the results also match GAMESS if I perturb the linear geometry of LiCN, as suggested by @psi-rking , which suggests maybe an issue with finding roots of whatever symmetry the first excited state is; however, adding more roots (or running with/without symmetry) doesn't resolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems to converge in just one step for c1 and c2v. I suppose it's possible the guess space just isn't grabbing roots for all symmetries, but increasing the number of roots to 30 doesn't change the results. perhaps more disturbing, though, is that the in-core diagonization routine `RSP` gives yet another set of results:; ```; Psi4 LiCN/6-31G* (symmetry c1, RSP solver); CI ROOT 1 TOTAL ENERGY:-99.58887523722994; CI ROOT 2 TOTAL ENERGY:-99.56069933848028; CI ROOT 3 TOTAL ENERGY:-99.56069933848008; CI ROOT 4 TOTAL ENERGY:-99.53483755106353; CI ROOT 5 TOTAL ENERGY:-99.53483755106343; CI ROOT 6 TOTAL ENERGY:-99.5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:1701,ENERGY,ENERGY,1701,https://psicode.org,https://github.com/psi4/psi4/issues/3083,1,['ENERGY'],['ENERGY']
Energy Efficiency,"00485 ; 2B2 -1.213674 3A1 -0.787485 1B1 -0.638605 ; 4A1 -0.611527 3B2 -0.571415 1A2 -0.448360 . Virtual: . 5A1 0.196427 4B2 0.233677 5B2 0.363534 ; 6B2 0.797460 2B1 0.838809 6A1 0.844012 ; 7A1 0.899194 2A2 0.923759 8A1 1.027087 ; 7B2 1.058856 9A1 1.124050 8B2 1.149224 ; 9B2 1.493845 3B1 1.719758 10A1 1.729020 ; 3A2 1.885626 4B1 1.905688 10B2 2.114549 ; 11A1 2.362681 12A1 2.530729 11B2 2.768793 ; 13A1 2.777858 5B1 2.778067 4A2 2.804070 ; 5A2 2.974845 12B2 3.002608 13B2 3.319351 ; 14A1 3.594108 14B2 3.777164 15A1 4.062330 ; 15B2 4.514378 16A1 45.233612 16B2 45.429678 . Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 4, 1, 1, 3 ]. Energy converged. @DF-RHF Final Energy: -150.80654620986098. => Energetics <=. Nuclear Repulsion Energy = 37.8876016263036917; One-Electron Energy = -283.3602994176750940; Two-Electron Energy = 94.6661515815104053; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -150.8065462098609828. Saving occupied orbitals to File 180. *** tstop() called on mrabsence-Ubuntu at Mon Aug 22 01:48:07 2016; Module time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.5931. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.2113. Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.3818 Total: 1.3818. Dipole Moment: (Debye); X: 0.0000 Y: -0.0000 Z: -3.5122 Total: 3.5122. *** tstart() called on mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ------------------------------------------------------------; SCF HESS ; Rob Parrish, Ju",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/463:6778,Energy,Energy,6778,https://psicode.org,https://github.com/psi4/psi4/issues/463,1,['Energy'],['Energy']
Energy Efficiency,"00; H 5.255832800000 -1.677434300000 1.995985100000; H 5.435230800000 -0.488422700000 0.699837500000; H 4.834740800000 -2.114113900000 0.338643400000; C 2.561315100000 -2.067960800000 1.878190500000; H 2.501285900000 -2.864212200000 1.130337600000; H 1.543963400000 -1.790105100000 2.156196500000; H 3.062895500000 -2.476510500000 2.763911500000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-PR07-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-PR07-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()). # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-H2-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; H 0.798743700000 0.046507300000 0.075739400000; H 1.071087200000 0.408924800000 0.665066700000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-H2-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-H2-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1338:6237,energy,energy,6237,https://psicode.org,https://github.com/psi4/psi4/issues/1338,3,['energy'],['energy']
Energy Efficiency,"015; 	 D(74,73,72,81) = -3.122676	 -178.916163; 	 D(74,73,75,76) = -0.011641	 -0.666985; 	 D(74,73,75,77) = 3.122888	 178.928328; 	 D(75,73,72,81) = -0.019333	 -1.107720; 	 D(75,77,79,80) = 3.131087	 179.398052; 	 D(75,77,79,81) = -0.015352	 -0.879608; 	 D(76,75,77,78) = -0.007210	 -0.413100; 	 D(76,75,77,79) = 3.133177	 179.517791; 	 D(77,79,81,82) = 3.133788	 179.552810; 	 D(78,77,79,80) = -0.011717	 -0.671362; 	 D(78,77,79,81) = 3.125029	 179.050978; 	 D(80,79,81,82) = -0.012627	 -0.723483; 	 R(1,57) = 8.611430	 4.556972; 	 R(1,59) = 8.002134	 4.234547; 	 R(1,61) = 9.891833	 5.234532; 	 R(3,10) = 8.354935	 4.421241; 	 R(3,59) = 7.403642	 3.917839; 	 R(26,42) = 9.688168	 5.126758; 	 R(27,42) = 9.474505	 5.013692; 	 R(27,43) = 7.412528	 3.922541; 	 R(31,42) = 9.020000	 4.773179; 	 R(36,42) = 9.995549	 5.289417; 	 R(38,42) = 7.990790	 4.228544; 	 R(38,48) = 6.850401	 3.625076; 	 R(40,42) = 7.393607	 3.912528; 	 R(40,43) = 7.486021	 3.961431; 	 R(43,51) = 8.319137	 4.402298. 	Current energy : -3922.0645401701. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1. 	Determining step-restricting scale parameter for RS-RFO.; 	Maximum step size allowed 0.50000. 	 Iter |step| alpha rfo_root ; 	------------------------------------------------; 	 0 0.83062 1.00000 1; 	 1 0.62444 1.92936 1; 	 2 0.52908 2.80267 1; 	 3 0.50229 3.14703 1; 	 4 0.50002 3.17893 1; 	 5 0.50000 3.17916 1; 	------------------------------------------------; 	Norm of target step-size 0.50000; 	Projected energy change by RFO approximation: -0.2098497469. 	Back-transformation to cartesian coordinates...; 	Could not converge backtransformation.; 	Using first guess instead. 	--- Internal Coordinate Step in ANG or DEG, aJ/ANG or AJ/DEG ---; 	 ---------------------------------------------------------------------------; 	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921:18105,energy,energy,18105,https://psicode.org,https://github.com/psi4/psi4/issues/1921,1,['energy'],['energy']
Energy Efficiency,"02) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.6.0 (#2028) ; - Fix memory bug in libtrans (#2027) ; - Fix to large DF-MP2 (#2033) ; - Make sure psi populates qcschema wfn with orbital occupations (#2036) ; - Options reading ignores spaces (#2051) ; - Fix to Treutler grid call (#2044) ; - Fix diffuse external potential after L2 (#2068) ; - Fixes to PCM/qcschema (#2037) ; - Bug in ccresponse (#2077) ; - Fix error throwing in some threaded blocks (#2082) ; - Better error printing (#2083) ; - Fix in EOM CC3 (#2085) ; - Deprecate Matrix::Savetype::Full (#2092) ; - Fix getting of CC amplitudes in frozen core jobs (#2095) ; - QCSchema export bug fix (#2112) ; - Fix TD-SCF computations when using DF and symmetry (#2124) ; - Fix DF-DCT energy, grad, properties, and densities (#2100) ; - Fix bug by closing DPD file in DF grad (#2137) ; - Fix method/basis bug when using DiskDF (#2141) ; - Fix bug by triggering error in CC code (#2150) ; - Fix indexing bug in DCT (#2165) ; - Fix gcc-related bug (#2175) ; - Fix stability of mcscf test (#2173) ; - Citation type fix in dft builder (#2176) ; - Keep internal coordinate files in optking (#2188) ; - Bugfix in parallelization of DF gradients (#2193) ; - Fix bug in qcvars for nbody computations (#2191) ; - Use correct libxc functional for wB97X-D3 (#2207) ; - Fix shell core freezing with ECPs (#2222) ; - Fix linear dependency bugs in DCT (#2232, #2233) ; - Return correct energy for ccsd(at) (#2241) ; - Bug in detci printing (#2245); - Fix bug whereby MP2 cube files through OCC segfaulted (#2249); - Increase likelihood a misformatted basis set file will error instead of passing silently (#2254); - Fix normalization issue in Molden files (#2229); - Fix longstanding limitation where `phi_ao` function only returned correctly for Cartesian basis sets (#2210, #2262) . ## Known Bugs; - Find them and tell us",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:13986,energy,energy,13986,https://psicode.org,https://github.com/psi4/psi4/issues/1562,2,['energy'],['energy']
Energy Efficiency,"0240633, 0.05677652, -0.03006882, 0.02470420],; [ -0.06715450, 0.05113530, -0.00508959, -0.00643364, 0.02754243]]; norm_g_start.set(zip(*contents)); norm_rmsg_start = 0.041309 # Q-Chem; # Full Analytical Gradient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 -0.04900557 -0.00240633 0.05677652 -0.03006882 0.02470420; # 2 0.07990533 0.00642920 0.00348020 -0.04874047 -0.04107426; # 3 -0.06715450 0.05113530 -0.00508959 -0.00643364 0.02754243. # reference optimized NRE, E (G should be 0). nre_opt = 37.5276022922 # Q-Chem; e_opt = -139.5573922 # Q-Chem; #norm_g_opt # Q-Chem; # Full Analytical Gradient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 0.00000025 -0.00000001 -0.00000021 -0.00000007 0.00000005; # 2 0.00000010 0.00000008 0.00000000 0.00000001 -0.00000020; # 3 0.00000038 -0.00000005 -0.00000006 -0.00000023 -0.00000003. def test_norm_start(mol):; g0 = gradient('mp2', molecule=mol); compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(norm_g_start, g0, 3, 'start grad'). def test_zero_grad(mol):; e, wfn = optimize('mp2', return_wfn=True, molecule=mol); g = wfn.gradient(); g.print_out(); compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); compare_matrices(zerograd, g, 3, 'opt ZERO grad'). def test_odd_start(mol):; g0 = gradient('mp2', molecule=mol); compare_values(odd_nre_start, mol.nuclear_repulsion_energy(), 1, 'start nre'); compare_values(odd_e_start, get_variable('CURRENT ENERGY'), 3, 'start ene'); compare_values(odd_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(odd_g_start, g0, 3, 'start grad'). def test_badodd_grad(mol):; e, wfn = optimize('mp2', return_wfn=True, molecule=mol); g = wfn.gradient(); g.print_out(); compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogoo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:2130,ENERGY,ENERGY,2130,https://psicode.org,https://github.com/psi4/psi4/issues/310,1,['ENERGY'],['ENERGY']
Energy Efficiency,"02: mrcc-rohf_ccsdt_q_; Start 503: mrcc-optfreq; 1/5 Test #499: mrcc-ccsdt .......................***Failed 0.62 sec; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /tmp/mrcc_67625/KEYWD; Image PC Routine Line Source; dmrcc 0000000001284F08 Unknown Unknown Unknown; dmrcc 00000000012A12A2 Unknown Unknown Unknown; dmrcc 00000000004AE4BD Unknown Unknown Unknown; dmrcc 0000000000507E55 Unknown Unknown Unknown; dmrcc 000000000040D9DD Unknown Unknown Unknown; dmrcc 00000000004021AA Unknown Unknown Unknown; dmrcc 0000000000400DF2 Unknown Unknown Unknown; dmrcc 00000000013571F9 Unknown Unknown Unknown; dmrcc 0000000000400CCA Unknown Unknown Unknown; Traceback (most recent call last):; File ""/home/gytibor/psi4/objdir/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4732, in run_mrcc; for line in open('iface'):. FileNotFoundError: [Errno 2] No such file or directory: 'iface'. Printing out the relevant lines from the Psithon --> Python processed input file:; h 1 1.0 2 104.5; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pvdz""); core.set_global_option(""FREEZE_CORE"", ""true""); --> energy('mrccsdt'); compare_values( 8.801465529972, variable(""NUCLEAR REPULSION ENERGY""), 6, 'NRE'); compare_values(-76.021418445155, variable(""SCF TOTAL ENERGY""), 6, 'SCF'); compare_values( -0.204692406830, variable(""MP2 CORRELATION ENERGY"") , 6, 'MP2 correlation'); compare_values( -0.217715210258, variable(""CCSDT CORRELATION ENERGY""), 6, 'CCSDT correlation'); compare_values(-76.239133655413, variable(""CURRENT ENERGY""), 6, 'CCSDT'). !-----------------------------------------------!; ! !; ! [Errno 2] No such file or directory: 'iface' !; ! ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2497:1382,energy,energy,1382,https://psicode.org,https://github.com/psi4/psi4/issues/2497,2,['energy'],['energy']
Energy Efficiency,"04262 0.5746382727 -0.0668232062; C 2.9322291027 -0.5491503715 -0.0253808964; C 3.2949719214 -1.8954547342 0.0021456089; C 2.3774158668 -2.9661063312 0.0421948956; C 0.9910962887 -2.8134295526 0.0516412719; C 0.0065004625 -3.8005717170 0.0933574064; C -1.3797668642 -3.5408136100 0.1034400320; C -1.9409778357 -2.2639998084 0.0835635290; C -3.2884679268 -1.9048573146 0.0867443596; C -3.7572441300 -0.5746153801 0.0624966242; C -2.9322699356 0.5491764124 0.0248765082; C -3.2951262899 1.8957129852 0.0016465100; C -2.3775183237 2.9662393715 -0.0357709805; H 0.6306894251 -1.7913750813 0.0208596131; H 2.7841508221 -3.9758109969 0.0667744946; H 4.3553844319 -2.1428427854 -0.0063594220; H 1.8668978587 -0.3494271067 -0.0121498700; H 0.3228373264 -4.8420256607 0.1188602273; H -2.0511468159 -4.3975325285 0.1300589689; H -1.2357730759 -1.4410348629 0.0655215046; H 4.8351452690 0.4211590359 -0.0805349766; H 4.0326489552 2.6988346470 -0.1263761210; H 1.2360000160 1.4415822577 -0.0454433027; H 2.0511633898 4.3973662877 -0.1345195235; H -0.3226761608 4.8421262640 -0.1059899081; H -0.6312244278 1.7907842456 -0.0464818848; H -2.7838455263 3.9761404520 -0.0477059840; H -4.3553303919 2.1429676321 0.0149903516; H -1.8669715938 0.3495233958 0.0124287296; H -4.8350335200 -0.4213578612 0.0728297413; H -4.0325261304 -2.6992664259 0.1093084921; }; E,wfn = optimize('b3lyp5',return_wfn=True). When I run this file with psi4 1.1 the results of first geometry is. Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp . Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o . 1 -696.23196743 -6.96e+02 6.60e-04 2.45e-04 o 3.67e-03 1.31e-03 o ~. But I run this file with psi4 1.2 the results of first geometry is. Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~. Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~. 1 -696.23196742 -6.96e+02 6.43e-02 1.88e-02 o 2.04e-02 6.09e-03 o ~. And psi4 1.2 failed to optimize geometry but psi4 1.1 successfully optimize geometry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1094:1871,Energy,Energy,1871,https://psicode.org,https://github.com/psi4/psi4/issues/1094,2,['Energy'],['Energy']
Energy Efficiency,"059 ; 195A 2.119505 196A 2.136885 197A 2.139951 ; 198A 2.143625 199A 2.144516 200A 2.149966 ; 201A 2.153416 202A 2.160845 203A 2.177753 ; 204A 2.193917 205A 2.249401 206A 2.259315 ; 207A 2.260884 208A 2.264073 209A 2.270343 ; 210A 2.290240 211A 2.296245 212A 2.304338 ; 213A 2.316737 214A 2.379290 215A 2.453589 ; 216A 2.461743 217A 2.495632 218A 2.498678 ; 219A 2.519294 220A 2.562708 221A 2.608244 ; 222A 2.726412 223A 2.739216 224A 2.753717 ; 225A 2.766537 226A 2.769494 227A 2.781755 ; 228A 2.786035 229A 2.802889 230A 2.877816 ; 231A 2.934217 232A 2.946283 233A 2.971176 ; 234A 2.978125 235A 3.021450 236A 3.025068 ; 237A 3.055308 238A 3.105407 239A 3.192416 ; 240A 3.230170 241A 3.237091 242A 3.270263 ; 243A 3.501427 244A 3.509120 245A 3.988816 ; 246A 4.002956 . Final Occupation by Irrep:; A ; DOCC [ 47 ]; ```. Energy converged. @RHF Final Energy: -535.97469065986820. => Energetics <=. ```; Nuclear Repulsion Energy = 697.1131782964378090; One-Electron Energy = -2106.2189353611356637; Two-Electron Energy = 873.1310664048263561; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; Total Energy = -535.9746906598714986; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density density matrix; Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on shukla-pc.localdomain at Thu Oct 9 10:48:21 2014; Module time:; user time = 515.17 seconds = 8.59 minutes; system time = 10.04 seconds = 0.17 minutes; total time = 527 seconds = 8.78 minutes; Total time:; user time = 515.17 seconds = 8.59 minutes; system time = 10.04 seconds = 0.17 minutes; total time = 527 seconds = 8.78 minutes. **\* ts",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61:13837,Energy,Energy,13837,https://psicode.org,https://github.com/psi4/psi4/issues/61,1,['Energy'],['Energy']
Energy Efficiency,"059 ; 195A 2.119505 196A 2.136885 197A 2.139951 ; 198A 2.143625 199A 2.144516 200A 2.149966 ; 201A 2.153416 202A 2.160845 203A 2.177753 ; 204A 2.193917 205A 2.249401 206A 2.259315 ; 207A 2.260884 208A 2.264073 209A 2.270343 ; 210A 2.290240 211A 2.296245 212A 2.304338 ; 213A 2.316737 214A 2.379290 215A 2.453589 ; 216A 2.461743 217A 2.495632 218A 2.498678 ; 219A 2.519294 220A 2.562708 221A 2.608244 ; 222A 2.726412 223A 2.739216 224A 2.753717 ; 225A 2.766537 226A 2.769494 227A 2.781755 ; 228A 2.786035 229A 2.802889 230A 2.877816 ; 231A 2.934217 232A 2.946283 233A 2.971176 ; 234A 2.978125 235A 3.021450 236A 3.025068 ; 237A 3.055308 238A 3.105407 239A 3.192416 ; 240A 3.230170 241A 3.237091 242A 3.270263 ; 243A 3.501427 244A 3.509120 245A 3.988816 ; 246A 4.002956 . Final Occupation by Irrep:; A ; DOCC [ 47 ]; ```. Energy converged. @RHF Final Energy: -535.97469065986911. => Energetics <=. ```; Nuclear Repulsion Energy = 697.1131782964378090; One-Electron Energy = -2106.2189353611738625; Two-Electron Energy = 873.1310664048628496; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; Total Energy = -535.9746906598732039; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density density matrix; Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on shukla-pc.localdomain at Thu Oct 16 11:16:51 2014; Module time:; user time = 522.41 seconds = 8.71 minutes; system time = 15.59 seconds = 0.26 minutes; total time = 594 seconds = 9.90 minutes; Total time:; user time = 522.41 seconds = 8.71 minutes; system time = 15.59 seconds = 0.26 minutes; total time = 594 seconds = 9.90 minutes. **\* t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:12465,Energy,Energy,12465,https://psicode.org,https://github.com/psi4/psi4/issues/62,1,['Energy'],['Energy']
Energy Efficiency,"06.2189353611356637; Two-Electron Energy = 873.1310664048263561; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; Total Energy = -535.9746906598714986; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density density matrix; Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on shukla-pc.localdomain at Thu Oct 9 10:48:21 2014; Module time:; user time = 515.17 seconds = 8.59 minutes; system time = 10.04 seconds = 0.17 minutes; total time = 527 seconds = 8.78 minutes; Total time:; user time = 515.17 seconds = 8.59 minutes; system time = 10.04 seconds = 0.17 minutes; total time = 527 seconds = 8.78 minutes. **\* tstart() called on shukla-pc.localdomain; **\* at Thu Oct 9 10:48:21 2014. ```; **************************************************; * TRANSQT2: Program to transform integrals from *; * the SO basis to the MO basis. *; * *; * Daniel, David, & Justin *; **************************************************. Input parameters:; -----------------; Wave function = DETCI; Backtransform = No; Print Level = 1; Print TEIs = No; Reference wfn = RHF; Derivative = None; Delete TEI File = Yes; Memory (Mbytes) = 5000.0; Cache Level = 2; Cache Type = LRU; Chkpt Parameters:; --------------------; Number of irreps = 1; Number of SOs = 246; Number of MOs = 246; Number of active MOs = 232. Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; A 246 14 33 0 199 0. Nuclear Rep. energy (chkpt) = 697.11317829643781; SCF energy (chkpt) = -535.97469065986820. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 2; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61:15632,energy,energy,15632,https://psicode.org,https://github.com/psi4/psi4/issues/61,2,['energy'],['energy']
Energy Efficiency,"0836 46A 0.610855 ; 47A 0.630158 48A 0.718603 49A 0.718620 ; 50A 0.736912 51A 0.819908 52A 0.820049 ; 53A 0.841985 54A 0.842142 55A 0.861839 ; 56A 0.915524 57A 0.915721 58A 0.916478 ; 59A 0.958476 60A 0.958532 61A 0.986377 ; 62A 1.033004 63A 1.062720 64A 1.062956 ; 65A 1.089893 66A 1.194156 67A 1.194624 ; 68A 1.260967 69A 1.272575 70A 1.297678 ; 71A 1.297926 72A 1.359441 73A 1.359571 ; 74A 1.502783 75A 1.503340 76A 1.596335 ; 77A 1.617548 78A 1.617829 79A 1.669742 ; 80A 1.669811 81A 1.778057 82A 1.778197 ; 83A 1.861590 84A 1.904708 85A 1.905302 ; 86A 1.932619 87A 1.933506 88A 1.984745 ; 89A 2.223699 90A 2.225628 91A 2.225668 ; 92A 2.494202 93A 2.559162 94A 2.559231 ; 95A 2.694381 96A 2.694493 97A 2.699523 ; 98A 2.989001 99A 2.989072 100A 3.239982 ; 101A 3.409966 102A 3.418072 103A 3.418110 ; 104A 3.811009 105A 4.348714 106A 5.581608 ; 107A 6.661779 108A 7.322224 109A 7.404171 ; 110A 8.435277 111A 8.975985 . Final Occupation by Irrep:; A ; DOCC [ 16 ]; NA [ 16 ]; NB [ 16 ]. @DF-RKS Final Energy: -42.04595197988089. => Energetics <=. Nuclear Repulsion Energy = 93.4549456916637951; One-Electron Energy = -246.7432156290641103; Two-Electron Energy = 118.6378186354417608; DFT Exchange-Correlation Energy = -7.3862953798450999; Empirical Dispersion Energy = -0.0092052980772349; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -42.0459519798808898. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : -7.8209495 8.4115446 0.5905951; Dipole Y : -2.3244093 2.4977096 0.1733003; Dipole Z : -4.0798888 4.3904336 0.3105448; Magnitude : 0.6894009. ---------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:25618,Energy,Energy,25618,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"087844 -1.006105897774 12.000000000000; C -0.616450380987 0.164556718463 -1.058443190817 12.000000000000; C -0.158086394624 0.730699386222 -0.889727187104 12.000000000000; C 0.484942144607 0.574229834356 -0.649010141458 12.000000000000; C 0.688355917017 -0.142302467208 -0.581381981865 12.000000000000; C 0.242793965654 -0.737031769438 -0.731596272801 12.000000000000; H -0.732074019279 -1.008555512000 -1.147218404188 1.007825032230; H -1.164258386631 0.206232540657 -1.161273694869 1.007825032230; H -0.258581893650 1.331482152944 -0.817970826130 1.007825032230; H 0.882404676284 0.994103603000 -0.554927857467 1.007825032230; H 1.180331932734 -0.274347490367 -0.372481393212 1.007825032230; H 0.518565778818 -1.191478177535 -0.672179821662 1.007825032230. Running in c1 symmetry. Rotational constants: A = 0.17182 B = 0.08760 C = 0.08513 [cm^-1]; Rotational constants: A = 5151.08371 B = 2626.15995 C = 2552.12610 [MHz]; Nuclear repulsion = 1190.670750997537880. Charge = 0; Multiplicity = 1; Electrons = 84; Nalpha = 42; Nbeta = 42. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: DEF2-TZVPPD; Blend: DEF2-TZVPPD; Number of shells: 240; Number of basis functions: 648; Number of Cartesian functions: 732; Spherical Harmonics?: true; Max angular momentum: 3. ==> DFT Potential <==. => LibXC <=. Version 5.1.6; S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018) (10.1016/j.softx.2017.11.002). => Composite Functional: WB97M-V <= . wB97M-V Hyb-GGA Exchange-Correlation Functional. N. Mardirossian and M. Head-Gordon, J. Chem. Phys. 144, 214110 (2016) (10.1063/1.4952647). Deriv = 1; GGA = TRUE; Meta = TRUE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange-Correlation Functionals <=. 1.0000 wB97M-V exchange-correlation functional. => Exact (HF) Exchange",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641:8142,Charge,Charge,8142,https://psicode.org,https://github.com/psi4/psi4/issues/2641,1,['Charge'],['Charge']
Energy Efficiency,"0887 14A 0.110657 15A 0.110658; 16A 0.173580 17A 0.360176 18A 0.370157; 19A 0.370158 20A 0.455135 21A 0.455137; 22A 0.543892 23A 0.571369 24A 0.610757; 25A 0.610759 26A 0.613674 27A 0.623635; 28A 0.623637 29A 0.682101 30A 0.875957; 31A 1.031832 32A 1.031833 33A 1.292103; 34A 1.292104 35A 1.442476 36A 1.448632; 37A 1.662612 38A 1.675074 39A 1.675078; 40A 1.685189 41A 1.685192 42A 1.745843; 43A 1.745846 44A 1.748838 45A 1.953626; 46A 1.953628 47A 2.104265 48A 2.256310; 49A 2.256312 50A 2.286838 51A 2.457344; 52A 2.457345 53A 2.522627 54A 2.738613; 55A 2.803606 56A 2.803611 57A 2.896284; 58A 2.896288 59A 5.038202 60A 5.264241. Final Occupation by Irrep:; A; DOCC [ 9 ]; NA [ 9 ]; NB [ 9 ]. @DF-RKS Final Energy: -79.32647565991985. => Energetics <=. Nuclear Repulsion Energy = 42.0362430486042129; One-Electron Energy = -188.7935335064416904; Two-Electron Energy = 79.9597081286466675; DFT Exchange-Correlation Energy = -12.5288933307290371; Empirical Dispersion Energy = 0.0000000000000000; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -79.3264756599198506. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : 0.0000185 -0.0000189 -0.0000004; Dipole Y : -0.0000204 0.0000189 -0.0000015; Dipole Z : -0.0000155 0.0000189 0.0000034; Magnitude : 0.0000037. ------------------------------------------------------------------------------------. *** tstop() called on baldr at Tue Mar 28 17:20:52 2023; Module time:; user time = 6.85 seconds = 0.11 minutes; system time = 0.17 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Total time:; user time = 6.85 seconds =",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:8758,Energy,Energy,8758,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['Energy'],['Energy']
Energy Efficiency,09.75 mb; CCSD intermediates: 68716.04 mb. <<< warning! >>> switched to low-memory (t) algorithm. memory requirements for CCSD(T): 36451.32 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 26; Number of active occupied orbitals: 74; Number of active virtual orbitals: 640; Number of frozen virtual orbitals: 38. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 393. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -3.045395864164; SS MP2 FNO correction: -1.111907331006; MP2 FNO correction: -4.157303195170. OS MP2 correlation energy: -3.045395864164; SS MP2 correlation energy: -1.111907331006; MP2 correlation energy: -4.157303195170; * MP2 total energy: -1500.355601695273. OS CCSD correlation energy: -3.045395864164; SS CCSD correlation energy: -1.111907331006; CCSD correlation energy: -4.157303195170; * CCSD total energy: -1500.355601695273. Total time for CCSD iterations: 3404.15 s (user); 270.93 s (system); 607 s (total). Time per iteration: inf s (user); inf s (system); inf s (total). *** tstop() called on r3546 at Mon Feb 10 14:43:17 2014; Module time:; user time = 31046.70 seconds = 517.45 minutes; system time = 945.63 seconds = 15.76 minutes; total time = 5144 seconds = 85.73 minutes; Total time:; user time = 33202.74 seconds = 553.38 minutes; system time = 990.31 seconds = 16.51 minutes; total time = 5317 seconds = 88.62 minutes. *** tstart() called on r3546; *** at Mon Feb 10 14:57:28 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 16; available memory = 83711.64 mb; memory requirements = 36451.32 mb. ```. PSIO error (from stderr). ```; PSIO_ERROR: unit,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34:2225,energy,energy,2225,https://psicode.org,https://github.com/psi4/psi4/issues/34,1,['energy'],['energy']
Energy Efficiency,"0947; 1B2u -0.180947 1B1u -0.180947. Virtual:. 2B2u 0.442532 2B3u 0.442532 2B1u 0.442532; 3Ag 0.485648 4Ag 1.228480 1B3g 1.228480; 5Ag 1.228480 1B2g 1.228480 1B1g 1.228480; 3B3u 1.526002 3B2u 1.526002 3B1u 1.526002; 6Ag 2.051155 7Ag 3.283338 2B2g 3.283338; 2B3g 3.283338 2B1g 3.283338 8Ag 3.283338; 4B2u 3.331721 4B3u 3.331721 1Au 3.331721; 4B1u 3.331721 5B3u 3.331721 5B2u 3.331721; 5B1u 3.331721 6B2u 5.672254 6B1u 5.672254; 6B3u 5.672254 7B1u 9.267994 7B2u 9.267994; 7B3u 9.267994 8B1u 9.267994 8B3u 9.267994; 2Au 9.267994 8B2u 9.267994 9Ag 9.745165; 3B2g 9.745165 3B1g 9.745165 3B3g 9.745165; 10Ag 9.745165 11Ag 10.965644. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; ```. Energy converged. @RHF Final Energy: -99.45080702230226. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -143.9965313656634294; Two-Electron Energy = 44.5457243433611438; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -99.4508070223022855. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-06 at Fri Jan 8 13:56:55 2016; Module time:; user time = 10.33 seconds = 0.17 minutes; system time = 0.28 seconds = 0.00 minutes; total time = 2 seconds = 0.03 minutes; Total time:; user time = 10.33 seconds = 0.17 minutes; system time = 0.28 seconds = 0.00 minutes; total time = 2 second",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:8082,Energy,Energy,8082,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['Energy'],['Energy']
Energy Efficiency,"095744807; ```; while Psi4 predicts:; ```; Psi4 LiCN/6-31G* (symmetry c1, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.5315015582624; CI ROOT 2 TOTAL ENERGY:-99.53150155297872; CI ROOT 3 TOTAL ENERGY:-99.52581092386518; CI ROOT 4 TOTAL ENERGY:-99.52581092379563; CI ROOT 5 TOTAL ENERGY:-99.5096013650753; CI ROOT 6 TOTAL ENERGY:-99.48378441050741; ````; this result doesn't change with or without frozen core, but the results are fine with STO-3G, as well as water with 6-31G*. the results also match GAMESS if I perturb the linear geometry of LiCN, as suggested by @psi-rking , which suggests maybe an issue with finding roots of whatever symmetry the first excited state is; however, adding more roots (or running with/without symmetry) doesn't resolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems to converge in just one step for c1 and c2v. I suppose it's possible the guess space just isn't grabbing roots for all symmetries, but increasing the number of roots to 30 doesn't change the results. perhaps more disturbing, though, is that the in-core diagonization routine `RSP` gives yet another set of results:; ```; Psi4 LiCN/6-31G* (symmetry c1, RSP solver); CI ROOT 1 TOTAL ENERGY:-99.58887523722994; CI ROOT 2 TOTAL ENERGY:-99.56069933848028; CI ROOT 3 TOTAL ENERGY:-99.56069933848008; CI ROOT 4 TOTAL ENERGY:-99.53483755106353; CI ROOT 5 TOTAL ENERGY:-99.53483755106343; CI ROOT 6 TOTAL ENERGY:-99.53418772103414; ```; here, we find 3 roots lower in energy than either GAMESS or the default Psi4 routines, and we also recov",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:1744,ENERGY,ENERGY,1744,https://psicode.org,https://github.com/psi4/psi4/issues/3083,1,['ENERGY'],['ENERGY']
Energy Efficiency,"0; C -0.000441805455 0.006819635345 -0.003870796492 12.000000000000; C 1.281348194545 0.095909635345 0.010599203508 12.000000000000; C 2.556298194545 0.180969635345 0.026599203508 12.000000000000; C 3.872538194545 0.268679635345 0.044049203508 12.000000000000; H 4.487898194545 -0.251640364655 -0.694370796492 1.007825032230; H 4.393828194545 0.864729635345 0.797449203508 1.007825032230; C -3.871661805455 -0.281870364655 -0.036170796492 12.000000000000; H -4.492551805455 0.418709635345 -0.600540796492 1.007825032230; H -4.386761805455 -1.069870364655 0.519199203508 1.007825032230. Running in c1 symmetry. Rotational constants: A = 4.80078 B = 0.02632 C = 0.02632 [cm^-1]; Rotational constants: A = 143923.76944 B = 788.91243 C = 788.90743 [MHz]; Nuclear repulsion = 93.753880150339768. Charge = 0; Multiplicity = 1; Electrons = 32; Nalpha = 16; Nbeta = 16. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: VDZP; Blend: VDZP; Number of shells: 47; Number of basis functions: 111; Number of Cartesian functions: 118; Spherical Harmonics?: true; Max angular momentum: 2. Core potential: VDZP; Number of shells: 28; Number of ECP primitives: 28; Number of ECP core electrons: 14; Max angular momentum: 3. ==> DFT Potential <==. => LibXC <=. Version 6.2.2; S. Lehtola, C. Steigemann, M. J.T. Oliveira, and M. A.L. Marques., SoftwareX 7, 1–5 (2018) (10.1016/j.softx.2017.11.002). => Composite Functional: WB97X3C <= . wB97X basied 3C composite method with a small basis set, gCP and D4 (10.1063/5.0133026); M. Muller, A. Hansen, S. Grimme, J. Chem. Phys. 158, 014103 (2023). Deriv = 1; GGA = TRUE; Meta = FALSE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange-Correlation Functionals <=. 1.0000 wB97X-V range-separated functional. => Exact (HF) Exchange <=. 0.8330 HF,LR [omega = 0.3000]; 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:7791,Energy,Energy,7791,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"0A 0.665432 51A 0.712798 52A 0.728207 ; 53A 0.728722 54A 0.731604 55A 0.750409 ; 56A 0.785076 57A 0.814891 58A 0.822500 ; 59A 0.837421 60A 0.837786 61A 0.896368 ; 62A 0.911715 63A 0.939819 64A 1.013440 ; 65A 1.043686 66A 1.043717 67A 1.079379 ; 68A 1.110213 69A 1.243320 70A 1.248770 ; 71A 1.249096 72A 1.325143 73A 1.325198 ; 74A 1.395025 75A 1.397495 76A 1.442305 ; 77A 1.442695 78A 1.456897 79A 1.504332 ; 80A 1.639667 81A 1.641352 82A 1.668110 ; 83A 1.705574 84A 1.784410 85A 1.840841 ; 86A 1.841701 87A 1.932164 88A 2.090833 ; 89A 2.093816 90A 2.132735 91A 2.154837 ; 92A 2.180250 93A 2.253444 94A 2.481160 ; 95A 2.481328 96A 2.496342 97A 2.793920 ; 98A 2.848632 99A 2.969349 100A 2.969418 ; 101A 3.337134 102A 3.399821 103A 3.400315 ; 104A 3.528082 105A 4.155988 106A 5.476938 ; 107A 5.786400 108A 6.199146 109A 7.337445 ; 110A 8.481836 111A 8.867663 . Final Occupation by Irrep:; A ; DOCC [ 16 ]; NA [ 16 ]; NB [ 16 ]. @DF-RKS Final Energy: -43.40748214051649. => Energetics <=. Nuclear Repulsion Energy = 93.7538801503397679; One-Electron Energy = -245.6257702779177521; Two-Electron Energy = 115.6223560816475100; DFT Exchange-Correlation Energy = -7.1485657255274635; Empirical Dispersion Energy = -0.0093823690585561; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -43.4074821405164926. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : -0.0030364 0.0030278 -0.0000086; Dipole Y : 0.0588791 -0.0477754 0.0111036; Dipole Z : -0.0335702 0.0272773 -0.0062929; Magnitude : 0.0127629. ------------------------------------------------------------------------------------. *",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:13782,Energy,Energy,13782,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"0A 0.736912 51A 0.819908 52A 0.820049 ; 53A 0.841985 54A 0.842142 55A 0.861839 ; 56A 0.915524 57A 0.915721 58A 0.916478 ; 59A 0.958476 60A 0.958532 61A 0.986377 ; 62A 1.033004 63A 1.062720 64A 1.062956 ; 65A 1.089893 66A 1.194156 67A 1.194624 ; 68A 1.260967 69A 1.272575 70A 1.297678 ; 71A 1.297926 72A 1.359441 73A 1.359571 ; 74A 1.502783 75A 1.503340 76A 1.596335 ; 77A 1.617548 78A 1.617829 79A 1.669742 ; 80A 1.669811 81A 1.778057 82A 1.778197 ; 83A 1.861590 84A 1.904708 85A 1.905302 ; 86A 1.932619 87A 1.933506 88A 1.984745 ; 89A 2.223699 90A 2.225628 91A 2.225668 ; 92A 2.494202 93A 2.559162 94A 2.559231 ; 95A 2.694381 96A 2.694493 97A 2.699523 ; 98A 2.989001 99A 2.989072 100A 3.239982 ; 101A 3.409966 102A 3.418072 103A 3.418110 ; 104A 3.811009 105A 4.348714 106A 5.581608 ; 107A 6.661779 108A 7.322224 109A 7.404171 ; 110A 8.435277 111A 8.975985 . Final Occupation by Irrep:; A ; DOCC [ 16 ]; NA [ 16 ]; NB [ 16 ]. @DF-RKS Final Energy: -42.04595197988089. => Energetics <=. Nuclear Repulsion Energy = 93.4549456916637951; One-Electron Energy = -246.7432156290641103; Two-Electron Energy = 118.6378186354417608; DFT Exchange-Correlation Energy = -7.3862953798450999; Empirical Dispersion Energy = -0.0092052980772349; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -42.0459519798808898. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : -7.8209495 8.4115446 0.5905951; Dipole Y : -2.3244093 2.4977096 0.1733003; Dipole Z : -4.0798888 4.3904336 0.3105448; Magnitude : 0.6894009. ------------------------------------------------------------------------------------. ***",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:25682,Energy,Energy,25682,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"0A 1.248770 ; 71A 1.249096 72A 1.325143 73A 1.325198 ; 74A 1.395025 75A 1.397495 76A 1.442305 ; 77A 1.442695 78A 1.456897 79A 1.504332 ; 80A 1.639667 81A 1.641352 82A 1.668110 ; 83A 1.705574 84A 1.784410 85A 1.840841 ; 86A 1.841701 87A 1.932164 88A 2.090833 ; 89A 2.093816 90A 2.132735 91A 2.154837 ; 92A 2.180250 93A 2.253444 94A 2.481160 ; 95A 2.481328 96A 2.496342 97A 2.793920 ; 98A 2.848632 99A 2.969349 100A 2.969418 ; 101A 3.337134 102A 3.399821 103A 3.400315 ; 104A 3.528082 105A 4.155988 106A 5.476938 ; 107A 5.786400 108A 6.199146 109A 7.337445 ; 110A 8.481836 111A 8.867663 . Final Occupation by Irrep:; A ; DOCC [ 16 ]; NA [ 16 ]; NB [ 16 ]. @DF-RKS Final Energy: -43.40748214051649. => Energetics <=. Nuclear Repulsion Energy = 93.7538801503397679; One-Electron Energy = -245.6257702779177521; Two-Electron Energy = 115.6223560816475100; DFT Exchange-Correlation Energy = -7.1485657255274635; Empirical Dispersion Energy = -0.0093823690585561; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -43.4074821405164926. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : -0.0030364 0.0030278 -0.0000086; Dipole Y : 0.0588791 -0.0477754 0.0111036; Dipole Z : -0.0335702 0.0272773 -0.0062929; Magnitude : 0.0127629. ------------------------------------------------------------------------------------. *** tstop() called on agincourt.lan at Mon Sep 16 22:17:38 2024; Module time:; 	user time = 9.63 seconds = 0.16 minutes; 	system time = 0.15 seconds = 0.00 minutes; 	total time = 10 seconds = 0.17 minutes; Total time:; 	user time = 9.63 seconds = 0.16 minutes; 	system time",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:14056,Energy,Energy,14056,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"0A 1.297678 ; 71A 1.297926 72A 1.359441 73A 1.359571 ; 74A 1.502783 75A 1.503340 76A 1.596335 ; 77A 1.617548 78A 1.617829 79A 1.669742 ; 80A 1.669811 81A 1.778057 82A 1.778197 ; 83A 1.861590 84A 1.904708 85A 1.905302 ; 86A 1.932619 87A 1.933506 88A 1.984745 ; 89A 2.223699 90A 2.225628 91A 2.225668 ; 92A 2.494202 93A 2.559162 94A 2.559231 ; 95A 2.694381 96A 2.694493 97A 2.699523 ; 98A 2.989001 99A 2.989072 100A 3.239982 ; 101A 3.409966 102A 3.418072 103A 3.418110 ; 104A 3.811009 105A 4.348714 106A 5.581608 ; 107A 6.661779 108A 7.322224 109A 7.404171 ; 110A 8.435277 111A 8.975985 . Final Occupation by Irrep:; A ; DOCC [ 16 ]; NA [ 16 ]; NB [ 16 ]. @DF-RKS Final Energy: -42.04595197988089. => Energetics <=. Nuclear Repulsion Energy = 93.4549456916637951; One-Electron Energy = -246.7432156290641103; Two-Electron Energy = 118.6378186354417608; DFT Exchange-Correlation Energy = -7.3862953798450999; Empirical Dispersion Energy = -0.0092052980772349; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -42.0459519798808898. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : -7.8209495 8.4115446 0.5905951; Dipole Y : -2.3244093 2.4977096 0.1733003; Dipole Z : -4.0798888 4.3904336 0.3105448; Magnitude : 0.6894009. ------------------------------------------------------------------------------------. *** tstop() called on agincourt.lan at Mon Sep 16 22:19:42 2024; Module time:; 	user time = 6.43 seconds = 0.11 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 6 seconds = 0.10 minutes; Total time:; 	user time = 6.43 seconds = 0.11 minutes; 	system time = ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:25956,Energy,Energy,25956,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"1 | 2.763; H2O | 89 | 157 | 198 | 2.13 | 2.282; HF | 71 | 116 | 152 | 1.18 | 2.128. ### VTune Analysis for MP2-F12/3C(FIX); Memory consumption is most egregious in the `form_teints` where the allocation of the AO ERI is quite large with the largest AO being (NOBS, NOBS, NRI, NRI) e.g. CH4 would be (125, 125, 364, 364); ![image](https://github.com/psi4/psi4/assets/52012150/7483bfd5-b2ec-4a32-a5a8-1f905d745054). CPU Time all goes back to the `form_teints` function and specifically the `two_body_ao_computer`; ![image](https://github.com/psi4/psi4/assets/52012150/07eedb8d-5e89-4614-a4f3-315a7f669f27). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] MP2-F12 single-point energy. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Computes in-core MP2-F12/3C(FIX) energy; - [X] Computes disk MP2-F12/3C(FIX) energy; - [X] Computes in-core DF-MP2-F12/3C(FIX) energy; - [X] Computes disk DF-MP2-F12/3C(FIX) energy. ## Questions; - [ ] I am unsure if I have done the disk implementation correctly.; - [ ] The max RAM usage for the conventional is quite large. I could use some suggestions on how to get this down.; - [ ] The conventional MP2-F12/3C(FIX) is not as usable as I would like with the high max RAM usage and slow integral computation. DF-MP2-F12/3C(FIX) is recommended over the conventional.; - [ ] This version of DF-MP2-F12/3C(FIX) uses a more robust scheme than ORCA and MPQC for the density-fitting. . ## Checklist; - [x] Documentation; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3110:2957,energy,energy,2957,https://psicode.org,https://github.com/psi4/psi4/pull/3110,4,['energy'],['energy']
Energy Efficiency,"1.0022953748703003 1.1210383176803589 -1.9738258123397827; H -0.46503451466560364 -0.8350303173065186 -2.2904675006866455; H -0.9999359846115112 -1.117483139038086 1.977584958076477; H 0.46812179684638977 0.8390328884124756 2.2878639698028564; H 1.9390827417373657 2.4920878410339355 -0.5236388444900513""""""); molecule.set_molecular_charge(0); molecule.set_multiplicity(1); psi4.set_options({""reference"":""uhf""}). print(""calculate energy...""); energy, wfn = psi4.energy(""HF3c/"", return_wfn=True); print(""converting energy ...""); kcal_energy = energy * psi4.constants.hartree2kcalmol; print(""energy {:.2f} kcal/mol"".format(kcal_energy)); ```; Specifically the output I get is ; ```; set output file path; create molecule...; calculate energy...; Segmentation fault: 11; ```; I tried to attach the .dat file, but github wouldn't let me, but this is end of it:; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: MINIX; Blend: MINIX; Number of shells: 42; Number of basis functions: 64; Number of Cartesian functions: 64; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (MINIX AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 8 entry O line 318 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 2-5, 7, 9, 14-15 entry C line 198 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 6 entry N line 258 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 10-13, 16-20 entry H line 18 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; ```. If I use a conda environment I built a few weeks ago the script runs fine. This is the same as we are seeing on our cloud platform on AWS. Docker images built ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593:3061,Energy,Energy,3061,https://psicode.org,https://github.com/psi4/psi4/issues/2593,1,['Energy'],['Energy']
Energy Efficiency,"1.103859872549; H -0.442720873003 -1.244238976392 0.982141695030; H 0.874512929539 -0.960390442589 1.119149924166; H 1.217460053606 0.336381670040 1.046181387539; H 0.335297687566 1.281777775821 0.982193856028; H -0.948519039798 0.925731991759 1.117846063269; H -1.420111450991 -0.227880344246 1.099752848840; C -0.431336419082 -0.578608087844 -1.006105897774; C -0.616450380987 0.164556718463 -1.058443190817; C -0.158086394624 0.730699386222 -0.889727187104; C 0.484942144607 0.574229834356 -0.649010141458; C 0.688355917017 -0.142302467208 -0.581381981865; C 0.242793965654 -0.737031769438 -0.731596272801; H -0.732074019279 -1.008555512000 -1.147218404188; H -1.164258386631 0.206232540657 -1.161273694869; H -0.258581893650 1.331482152944 -0.817970826130; H 0.882404676284 0.994103603000 -0.554927857467; H 1.180331932734 -0.274347490367 -0.372481393212; H 0.518565778818 -1.191478177535 -0.672179821662; units angstrom; no_reorient; no_com; symmetry c1; }; mol.update_geometry(); e, wf = energy('wb97m-v',return_wfn=True,); ```. Output File:; ```. -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.6.0. . D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish,; M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio,; A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer,; R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni,; J. S. O'Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein,; B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov,; K. Patkowski, A. E. DePrince III, U. Bozkaya, R. A. King,; F. A. Evangelista, J. M. Turney, T. D. Crawford, C. D. Sherrill,; J. Chem. Phys. 152(18) 184108 (2020). https://doi.org/10.1063/5.0006002. Additional Code Authors; E. T. Seidl, C. L. Janssen, E. F. Valeev, M. L. Leininger,; J. F. Gonthier, R. M. Richard, H. R. McAlexander, M. Saitow, X. Wang,; P. Verma, M. H. Lechner, and A. Jiang. Previous Authors",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641:2139,energy,energy,2139,https://psicode.org,https://github.com/psi4/psi4/issues/2641,1,['energy'],['energy']
Energy Efficiency,"1.1042 2.21706 -2.12009; H -2.30161 1.7313 -0.88466; H 0.4692 2.99187 -0.17478; H -0.84409 2.57987 0.97189; H -1.13803 3.76616 -0.33793; units angstrom; no_reorient; no_com; symmetry c1; }; energy('wb97m-v'); --------------------------------------------------------------------------. Scratch directory: /tmp/. *** tstart() called on ...; *** at Tue Sep 26 11:04:21 2023. => Loading Basis Set <=. Name: DEF2-TZVPPD; Role: ORBITAL; Keyword: BASIS; atoms 1, 4, 6 entry O line 218 file .../share/psi4/basis/def2-tzvppd.gbs ; atoms 2-3, 9-13 entry H line 14 file .../share/psi4/basis/def2-tzvppd.gbs ; atoms 5, 7-8 entry C line 144 file .../share/psi4/basis/def2-tzvppd.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = -1, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; Gh(O) -2.901500000000 2.033900000000 4.065300000000 15.994914619570; Gh(H) -3.022280000000 2.578500000000 4.875900000000 1.007825032230; Gh(H) -2.166320000000 1.418620000000 4.287130000000 1.007825032230; O 0.000000000000 0.000000000000 0.000000000000 15.994914619570; C -0.674790000000 0.413410000000 -1.014660000000 12.000000000000; O -0.876150000000 -0.422220000000 -1.962070000000 15.994914619570; C -1.218230000000 1.795570000000 -1.102840000000 12.000000000000; C -0.617450000000 2.829000000000 -0.078430000000 12.000000000000; H -1.104200000000 2.217060000000 -2.120090000000 1.007825032230; H -2.301610000000 1.731300000000 -0.884660000000 1.007825032230; H 0.469200000000 2.991870000000 -0.174780000000 1.007825032230; H -0.844090000000 2.579870000000 0.971890000000 1.007825032230; H -1.138030000000 3.766160000000 -0.337930000000 1.007825032230. Running ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051:3711,charge,charge,3711,https://psicode.org,https://github.com/psi4/psi4/issues/3051,1,['charge'],['charge']
Energy Efficiency,"1.240 -2.147 0.000; H 1.240 -2.147 0.000; C 2.798 0.000 0.000; C 4.020 0.000 0.000; C 5.422 0.000 0.000; C 8.214 0.000 0.000; C 7.516 1.209 0.000; C 6.120 1.209 0.000; C 6.120 -1.209 0.000; C 7.516 -1.209 0.000; H 8.058 2.147 0.000; H 5.578 2.147 0.000; H 9.297 0.000 0.000; H 5.578 -2.147 0.000; H 8.058 -2.147 0.000. symmetry c1; units angstrom; }. set globals {; reference rhf; basis cc-pvdz ; freeze_core true; scf_type out_of_core; dipmom true; num_roots 10; }. set scf d_convergence 10; set detci e_convergence 8; ## thisenergy = energy('detci'). Memory set to 5.000 GiB by Python script. **\* tstart() called on shukla-pc.localdomain; **\* at Thu Oct 16 11:06:57 2014. ```; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 5000 MiB Core; ---------------------------------------------------------; ```. ==> Geometry <==. ```; Molecular point group: c1; Full point group: D2h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z ; ------------ ----------------- ----------------- -----------------; C -2.013000000000 0.000000000000 0.000000000000; C -2.711000000000 1.209000000000 0.000000000000; C -4.107000000000 1.209000000000 0.000000000000; C -4.805000000000 0.000000000000 0.000000000000; C -4.107000000000 -1.209000000000 0.000000000000; C -2.711000000000 -1.209000000000 0.000000000000; H -2.169000000000 2.147000000000 0.000000000000; H -4.649000000000 2.147000000000 0.000000000000; H -5.888000000000 0.000000000000 0.000000000000; H -4.649000000000 -2.147000000000 0.000000000000; H -2.169000000000 -2.147000000000 0.000000000000; C -0.611000000000 0.000000000000 0.000000000000; C 0.611000000000 0.000000000000 0.000000000000; C 2.013000000000 0.000000000000 0.000000000000; C 4.805000000000 0.000000000000 0.000000000000; C 4.107000000000 1.209000000000 0.000000000000; C 2.711000000000 1.209000000000 0.000000000000; C 2.711000000000 -1.209000000000 0.000000000000; C 4.1070",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:2551,charge,charge,2551,https://psicode.org,https://github.com/psi4/psi4/issues/62,1,['charge'],['charge']
Energy Efficiency,"1.244238976392 0.982141695030; H 0.874512929539 -0.960390442589 1.119149924166; H 1.217460053606 0.336381670040 1.046181387539; H 0.335297687566 1.281777775821 0.982193856028; H -0.948519039798 0.925731991759 1.117846063269; H -1.420111450991 -0.227880344246 1.099752848840; C -0.431336419082 -0.578608087844 -1.006105897774; C -0.616450380987 0.164556718463 -1.058443190817; C -0.158086394624 0.730699386222 -0.889727187104; C 0.484942144607 0.574229834356 -0.649010141458; C 0.688355917017 -0.142302467208 -0.581381981865; C 0.242793965654 -0.737031769438 -0.731596272801; H -0.732074019279 -1.008555512000 -1.147218404188; H -1.164258386631 0.206232540657 -1.161273694869; H -0.258581893650 1.331482152944 -0.817970826130; H 0.882404676284 0.994103603000 -0.554927857467; H 1.180331932734 -0.274347490367 -0.372481393212; H 0.518565778818 -1.191478177535 -0.672179821662; units angstrom; no_reorient; no_com; symmetry c1; }; mol.update_geometry(); e, wf = energy('wb97m-v',return_wfn=True,)--------------------------------------------------------------------------. SETUP_PHASE; Threads set to 14 by Python driver. Scratch directory: [REMOVED]. *** tstart() called on [REMOVED]; *** at Fri Jul 22 13:16:33 2022. => Loading Basis Set <=. Name: DEF2-TZVPPD; Role: ORBITAL; Keyword: BASIS; atoms 1-6, 13-18 entry C line 144 file [REMOVED BASE DIRECTORY]/psi4/basis/def2-tzvppd.gbs ; atoms 7-12, 19-24 entry H line 14 file [REMOVED BASE DIRECTORY]/psi4/basis/def2-tzvppd.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 14 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; C -0.260781259973 -0.714012941782 1.022641061033 12.000000000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641:5395,energy,energy,5395,https://psicode.org,https://github.com/psi4/psi4/issues/2641,1,['energy'],['energy']
Energy Efficiency,"1.955082 185A 1.962510 ; 186A 1.987883 187A 1.992233 188A 2.021730 ; 189A 2.047832 190A 2.054449 191A 2.063391 ; 192A 2.073995 193A 2.089810 194A 2.098059 ; 195A 2.119505 196A 2.136885 197A 2.139951 ; 198A 2.143625 199A 2.144516 200A 2.149966 ; 201A 2.153416 202A 2.160845 203A 2.177753 ; 204A 2.193917 205A 2.249401 206A 2.259315 ; 207A 2.260884 208A 2.264073 209A 2.270343 ; 210A 2.290240 211A 2.296245 212A 2.304338 ; 213A 2.316737 214A 2.379290 215A 2.453589 ; 216A 2.461743 217A 2.495632 218A 2.498678 ; 219A 2.519294 220A 2.562708 221A 2.608244 ; 222A 2.726412 223A 2.739216 224A 2.753717 ; 225A 2.766537 226A 2.769494 227A 2.781755 ; 228A 2.786035 229A 2.802889 230A 2.877816 ; 231A 2.934217 232A 2.946283 233A 2.971176 ; 234A 2.978125 235A 3.021450 236A 3.025068 ; 237A 3.055308 238A 3.105407 239A 3.192416 ; 240A 3.230170 241A 3.237091 242A 3.270263 ; 243A 3.501427 244A 3.509120 245A 3.988816 ; 246A 4.002956 . Final Occupation by Irrep:; A ; DOCC [ 47 ]; ```. Energy converged. @RHF Final Energy: -535.97469065986820. => Energetics <=. ```; Nuclear Repulsion Energy = 697.1131782964378090; One-Electron Energy = -2106.2189353611356637; Two-Electron Energy = 873.1310664048263561; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; Total Energy = -535.9746906598714986; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density density matrix; Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on shukla-pc.localdomain at Thu Oct 9 10:48:21 2014; Module time:; user time = 515.17 seconds = 8.59 minutes; system time = 10.04 seconds = 0.17 minutes; total time = 527 seconds = 8.78 minutes",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61:13677,Energy,Energy,13677,https://psicode.org,https://github.com/psi4/psi4/issues/61,1,['Energy'],['Energy']
Energy Efficiency,"1.955082 185A 1.962510 ; 186A 1.987883 187A 1.992233 188A 2.021730 ; 189A 2.047832 190A 2.054449 191A 2.063391 ; 192A 2.073995 193A 2.089810 194A 2.098059 ; 195A 2.119505 196A 2.136885 197A 2.139951 ; 198A 2.143625 199A 2.144516 200A 2.149966 ; 201A 2.153416 202A 2.160845 203A 2.177753 ; 204A 2.193917 205A 2.249401 206A 2.259315 ; 207A 2.260884 208A 2.264073 209A 2.270343 ; 210A 2.290240 211A 2.296245 212A 2.304338 ; 213A 2.316737 214A 2.379290 215A 2.453589 ; 216A 2.461743 217A 2.495632 218A 2.498678 ; 219A 2.519294 220A 2.562708 221A 2.608244 ; 222A 2.726412 223A 2.739216 224A 2.753717 ; 225A 2.766537 226A 2.769494 227A 2.781755 ; 228A 2.786035 229A 2.802889 230A 2.877816 ; 231A 2.934217 232A 2.946283 233A 2.971176 ; 234A 2.978125 235A 3.021450 236A 3.025068 ; 237A 3.055308 238A 3.105407 239A 3.192416 ; 240A 3.230170 241A 3.237091 242A 3.270263 ; 243A 3.501427 244A 3.509120 245A 3.988816 ; 246A 4.002956 . Final Occupation by Irrep:; A ; DOCC [ 47 ]; ```. Energy converged. @RHF Final Energy: -535.97469065986911. => Energetics <=. ```; Nuclear Repulsion Energy = 697.1131782964378090; One-Electron Energy = -2106.2189353611738625; Two-Electron Energy = 873.1310664048628496; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; Total Energy = -535.9746906598732039; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density density matrix; Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on shukla-pc.localdomain at Thu Oct 16 11:16:51 2014; Module time:; user time = 522.41 seconds = 8.71 minutes; system time = 15.59 seconds = 0.26 minutes; total time = 594 seconds = 9.90 minute",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:12305,Energy,Energy,12305,https://psicode.org,https://github.com/psi4/psi4/issues/62,1,['Energy'],['Energy']
Energy Efficiency,"100; }. set basis cc-pVDZ; set num_roots 20; set e_convergence 1e-9; set r_convergence 1e-7; set diag_method rsp; set icore 1; set calc_s_squared true; set reference rohf; energy('fci'); ```; leads to garbage energies. It is surprising that this even runs, since there are only 11 determinants. This means that all the roots beyond 10 are spurious.; ```; ==> FCI root 11 information <==. FCI Root 11 energy = 0.713724930411819. The 11 most important determinants:. * 1 -0.034785 ( 25, 0) 1AgA 2B1uA ; * 2 0.022822 ( 26, 0) 2AgA 2B1uA ; * 3 0.011314 ( 31, 0) 1B3gA 1B2uA ; * 4 0.011314 ( 30, 0) 3AgA 3B1uA ; * 5 0.006836 ( 29, 0) 2AgA 3B1uA ; * 6 -0.003553 ( 28, 0) 1AgA 3B1uA ; * 7 -0.001178 ( 22, 0) 1AgA 1B1uA ; * 8 0.000527 ( 23, 0) 1B1uA 2AgA ; * 9 -0.000025 ( 27, 0) 3AgA 2B1uA ; * 10 -0.000022 ( 24, 0) 1B1uA 3AgA . ==> FCI root 12 information <==. FCI Root 12 energy = 0.713724930411819. The 11 most important determinants:. * 1 0.997978 ( 24, 0) 1B1uA 3AgA ; * 2 -0.044153 ( 23, 0) 1B1uA 2AgA ; * 3 0.035020 ( 25, 0) 1AgA 2B1uA ; * 4 0.016316 ( 22, 0) 1AgA 1B1uA ; * 5 0.015442 ( 27, 0) 3AgA 2B1uA ; * 6 0.010267 ( 31, 0) 1B3gA 1B2uA ; * 7 0.010267 ( 30, 0) 3AgA 3B1uA ; * 8 0.009433 ( 29, 0) 2AgA 3B1uA ; * 9 -0.007604 ( 28, 0) 1AgA 3B1uA ; * 10 0.000987 ( 26, 0) 2AgA 2B1uA . ==> FCI root 13 information <==. FCI Root 13 energy = 0.713724930411819. The 11 most important determinants:. * 1 9428415418299144033154400292021347105929105493743677660349912587242773315947068624452342728374216723512286367807081434394321801889849919042883561598345939692181343106349826374754254429319550145134592.000000 ( 32, 0) 1B2gA 1B3uA ; * 2 0.997807 ( 22, 0) 1AgA 1B1uA ; * 3 -0.047756 ( 23, 0) 1B1uA 2AgA ; * 4 -0.031275 ( 26, 0) 2AgA 2B1uA ; * 5 -0.027155 ( 25, 0) 1AgA 2B1uA ; * 6 -0.017321 ( 24, 0) 1B1uA 3AgA ; * 7 -0.007466 ( 29, 0) 2AgA 3B1uA ; * 8 -0.003632 ( 28, 0) 1AgA 3B1uA ; * 9 -0.003171 ( 27, 0) 3AgA 2B1uA ; * 10 -0.001483 ( 31, 0) 1B3gA 1B2uA ; * 11 -0.001483 ( 30, 0) 3AgA 3B1uA ; ```; etc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2779:1412,energy,energy,1412,https://psicode.org,https://github.com/psi4/psi4/issues/2779,1,['energy'],['energy']
Energy Efficiency,"115935 -5.37526e-10 6.69153e-08 DIIS; @DF-UHF iter 7: -0.49762403116031 -9.60343e-13 2.69685e-09 DIIS; @DF-UHF iter 8: -0.49762403116031 -7.77156e-16 2.10910e-10 DIIS; @DF-UHF iter 9: -0.49762403116032 -8.88178e-16 2.91582e-11 DIIS; @DF-UHF iter 10: -0.49762403116032 -6.66134e-16 1.10373e-14 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 7.500000000E-01; @S^2 Observed: 7.500000000E-01; @S Expected: 5.000000000E-01; @S Observed: 5.000000000E-01. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.497624 . Alpha Virtual: . 2A 0.048719 3A 0.066612 4A 0.066612 ; 5A 0.098792 6A 0.253872 7A 0.387743 ; 8A 0.387743 9A 0.427498 10A 1.213680 ; 11A 3.852115 . Beta Occupied: . . Beta Virtual: . 1A 0.020894 2A 0.058417 3A 0.068354 ; 4A 0.068354 5A 0.183800 6A 0.269157 ; 7A 0.391375 8A 0.391375 9A 0.451441 ; 10A 1.378124 11A 3.853058 . Final Occupation by Irrep:; A ; DOCC [ 0 ]; SOCC [ 1 ]. @DF-UHF Final Energy: -0.49762403116032. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -0.4976240311603163; Two-Electron Energy = 0.0000000000000000; Total Energy = -0.4976240311603163. UHF NO Occupations:; HONO-0 : 1 A 1.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SCF //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: AUG-CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry LI line 68 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz.gbs ; atoms 2 entry H line 40 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 976 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecula",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:5124,Energy,Energy,5124,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Energy'],['Energy']
Energy Efficiency,"12A 0.198954 13A 0.208977 ; 14A 0.208977 15A 0.256823 16A 0.270230 ; 17A 0.318044 18A 0.318044 19A 0.402166 ; 20A 0.450346 21A 0.450346 22A 0.540514 ; 23A 0.606544 24A 0.606544 25A 0.613724 ; 26A 0.613724 27A 0.838452 28A 1.281252 ; 29A 1.826605 30A 1.826605 31A 1.850798 ; 32A 4.179388 . Beta Occupied: . . Beta Virtual: . 1A 0.006309 2A 0.013514 3A 0.013821 ; 4A 0.013821 5A 0.037931 6A 0.065570 ; 7A 0.070561 8A 0.070561 9A 0.090473 ; 10A 0.171679 11A 0.207466 12A 0.207466 ; 13A 0.209492 14A 0.209492 15A 0.257933 ; 16A 0.287508 17A 0.331720 18A 0.331720 ; 19A 0.427501 20A 0.478623 21A 0.478623 ; 22A 0.598357 23A 0.612674 24A 0.612674 ; 25A 0.614564 26A 0.614564 27A 0.921140 ; 28A 1.322779 29A 1.926318 30A 1.926318 ; 31A 1.947876 32A 4.183965 . Final Occupation by Irrep:; A ; DOCC [ 0 ]; SOCC [ 1 ]. @DF-UHF Final Energy: -0.49935164423756. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -0.4993516442375593; Two-Electron Energy = 0.0000000000000000; Total Energy = -0.4993516442375593. UHF NO Occupations:; HONO-0 : 1 A 1.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 1.8897. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: -0.0000 Z: -1.8895. Dipole Moment: [e a0]; X: 0.0000 Y: -0.0000 Z: 0.0002 Total: 0.0002. Dipole Moment: [D]; X: 0.0000 Y: -0.0000 Z: 0.0006 Total: 0.0006. *** tstop() called on filip-ThinkPad-E495 at Wed Mar 4 16:29:33 2020; Module time:; 	user time = 0.55 seconds = 0.01 minutes; 	system time = 0.01 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 1.79 seconds = 0.03 minutes; 	system time = 0.07 seconds = 0.00 minutes; 	total time = 2 seconds = 0.03 minutes; Constructing Basis Sets for SAPT... => Loading Basis Set <=. Name: (AU",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:10806,Energy,Energy,10806,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Energy'],['Energy']
Energy Efficiency,"1420601330 0.149257795111 14.003074004430; N -0.943697896280 0.770718955070 -2.195103718789 14.003074004430; N 3.030604932020 -0.774545035830 -0.027468195689 14.003074004430; N 2.139390467920 1.040663076670 -0.664008978489 14.003074004430; N 2.724104508920 -0.024887744330 -1.077948484789 14.003074004430; N 0.964366717620 1.701693516370 2.799565885411 14.003074004430; N -1.189761996980 -1.443402396430 1.139850386111 14.003074004430; O -4.650460781380 0.935132853670 3.030086427411 15.994914619570; O 0.553972156620 2.379030254270 -3.938430599989 15.994914619570; O -6.376361129480 0.574029773370 0.505587091411 15.994914619570; O -5.547778804180 -0.131717416630 -2.508918002589 15.994914619570; O 3.352911070220 -3.242204449630 1.878767812611 15.994914619570. Running in c1 symmetry. Rotational constants: A = 0.00301 B = 0.00144 C = 0.00130 [cm^-1]; Rotational constants: A = 90.10550 B = 43.03146 C = 38.85152 [MHz]; Nuclear repulsion = 7705.917246066113876. Charge = 0; Multiplicity = 1; Electrons = 378; Nalpha = 189; Nbeta = 189. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: DEF2-TZVPPD; Blend: DEF2-TZVPPD; Number of shells: 1047; Number of basis functions: 2817; Number of Cartesian functions: 3173; Spherical Harmonics?: true; Max angular momentum: 3. ==> DFT Potential <==. => LibXC <=. Version 5.2.3; S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018) (10.1016/j.softx.2017.11.002). => Composite Functional: WB97M-D3BJ <= . wB97M-V with D3(BJ) instead of VV10 dispersion . A. Najib, L. Goerigk, J. Comput. Theory Chem.,14, 5725, 2018; N. Mardirossian, M. Head-Gordon, J. Chem. Phys. 144, 214110, 2016. Deriv = 1; GGA = TRUE; Meta = TRUE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange-Correlation Functionals <=. 1.0000 wB97M-V exchange-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:10042,Charge,Charge,10042,https://psicode.org,https://github.com/psi4/psi4/issues/2970,1,['Charge'],['Charge']
Energy Efficiency,"153416 202A 2.160845 203A 2.177753 ; 204A 2.193917 205A 2.249401 206A 2.259315 ; 207A 2.260884 208A 2.264073 209A 2.270343 ; 210A 2.290240 211A 2.296245 212A 2.304338 ; 213A 2.316737 214A 2.379290 215A 2.453589 ; 216A 2.461743 217A 2.495632 218A 2.498678 ; 219A 2.519294 220A 2.562708 221A 2.608244 ; 222A 2.726412 223A 2.739216 224A 2.753717 ; 225A 2.766537 226A 2.769494 227A 2.781755 ; 228A 2.786035 229A 2.802889 230A 2.877816 ; 231A 2.934217 232A 2.946283 233A 2.971176 ; 234A 2.978125 235A 3.021450 236A 3.025068 ; 237A 3.055308 238A 3.105407 239A 3.192416 ; 240A 3.230170 241A 3.237091 242A 3.270263 ; 243A 3.501427 244A 3.509120 245A 3.988816 ; 246A 4.002956 . Final Occupation by Irrep:; A ; DOCC [ 47 ]; ```. Energy converged. @RHF Final Energy: -535.97469065986820. => Energetics <=. ```; Nuclear Repulsion Energy = 697.1131782964378090; One-Electron Energy = -2106.2189353611356637; Two-Electron Energy = 873.1310664048263561; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; Total Energy = -535.9746906598714986; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density density matrix; Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on shukla-pc.localdomain at Thu Oct 9 10:48:21 2014; Module time:; user time = 515.17 seconds = 8.59 minutes; system time = 10.04 seconds = 0.17 minutes; total time = 527 seconds = 8.78 minutes; Total time:; user time = 515.17 seconds = 8.59 minutes; system time = 10.04 seconds = 0.17 minutes; total time = 527 seconds = 8.78 minutes. **\* tstart() called on shukla-pc.localdomain; **\* at Thu Oct 9 10:48:21 2014. ```; ***********************",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61:13943,Energy,Energy,13943,https://psicode.org,https://github.com/psi4/psi4/issues/61,1,['Energy'],['Energy']
Energy Efficiency,"153416 202A 2.160845 203A 2.177753 ; 204A 2.193917 205A 2.249401 206A 2.259315 ; 207A 2.260884 208A 2.264073 209A 2.270343 ; 210A 2.290240 211A 2.296245 212A 2.304338 ; 213A 2.316737 214A 2.379290 215A 2.453589 ; 216A 2.461743 217A 2.495632 218A 2.498678 ; 219A 2.519294 220A 2.562708 221A 2.608244 ; 222A 2.726412 223A 2.739216 224A 2.753717 ; 225A 2.766537 226A 2.769494 227A 2.781755 ; 228A 2.786035 229A 2.802889 230A 2.877816 ; 231A 2.934217 232A 2.946283 233A 2.971176 ; 234A 2.978125 235A 3.021450 236A 3.025068 ; 237A 3.055308 238A 3.105407 239A 3.192416 ; 240A 3.230170 241A 3.237091 242A 3.270263 ; 243A 3.501427 244A 3.509120 245A 3.988816 ; 246A 4.002956 . Final Occupation by Irrep:; A ; DOCC [ 47 ]; ```. Energy converged. @RHF Final Energy: -535.97469065986911. => Energetics <=. ```; Nuclear Repulsion Energy = 697.1131782964378090; One-Electron Energy = -2106.2189353611738625; Two-Electron Energy = 873.1310664048628496; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; Total Energy = -535.9746906598732039; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density density matrix; Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on shukla-pc.localdomain at Thu Oct 16 11:16:51 2014; Module time:; user time = 522.41 seconds = 8.71 minutes; system time = 15.59 seconds = 0.26 minutes; total time = 594 seconds = 9.90 minutes; Total time:; user time = 522.41 seconds = 8.71 minutes; system time = 15.59 seconds = 0.26 minutes; total time = 594 seconds = 9.90 minutes. **\* tstart() called on shukla-pc.localdomain; **\* at Thu Oct 16 11:16:51 2014. ```; *********************",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:12571,Energy,Energy,12571,https://psicode.org,https://github.com/psi4/psi4/issues/62,1,['Energy'],['Energy']
Energy Efficiency,"16538238525 -2.9721903800964355 0.626854419708252; O -2.283581256866455 -2.8034048080444336 1.8416125774383545; C -3.1216139793395996 -4.092474460601807 0.022369852289557457; H -2.5071558952331543 -4.992997646331787 -0.06683211773633957; H -3.9806551933288574 -4.315130233764648 0.6616312265396118; H -3.4815473556518555 -3.7952513694763184 -0.9667707681655884; H -1.818267822265625 -2.5147225856781006 -1.3233563899993896; C -0.2652755677700043 -0.47430306673049927 -1.2846300601959229; C 0.5650341510772705 0.6324429512023926 -1.1073341369628906; H 1.0022953748703003 1.1210383176803589 -1.9738258123397827; H -0.46503451466560364 -0.8350303173065186 -2.2904675006866455; H -0.9999359846115112 -1.117483139038086 1.977584958076477; H 0.46812179684638977 0.8390328884124756 2.2878639698028564; H 1.9390827417373657 2.4920878410339355 -0.5236388444900513""""""); molecule.set_molecular_charge(0); molecule.set_multiplicity(1); psi4.set_options({""reference"":""uhf""}). print(""calculate energy...""); energy, wfn = psi4.energy(""HF3c/"", return_wfn=True); print(""converting energy ...""); kcal_energy = energy * psi4.constants.hartree2kcalmol; print(""energy {:.2f} kcal/mol"".format(kcal_energy)); ```; Specifically the output I get is ; ```; set output file path; create molecule...; calculate energy...; Segmentation fault: 11; ```; I tried to attach the .dat file, but github wouldn't let me, but this is end of it:; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: MINIX; Blend: MINIX; Number of shells: 42; Number of basis functions: 64; Number of Cartesian functions: 64; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (MINIX AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 8 entry O line 318 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593:2512,energy,energy,2512,https://psicode.org,https://github.com/psi4/psi4/issues/2593,1,['energy'],['energy']
Energy Efficiency,"171 -0.0000000000 0.0000000000; O 0.5974387171 0.0000000000 0.0000000000. }. set {; reference rohf; d_convergence 10; e_convergence 10; basis_guess True; max_force_g_convergence 1e-7; freeze_core True; }. E = energy('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z'); H = frequency('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:1082,ENERGY,ENERGY,1082,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['ENERGY'],['ENERGY']
Energy Efficiency,"171 -0.50652361 -8.79096870; symmetry c1; }. set basis aug-cc-pvdz; set reference rohf; set ints_tolerance 1e-14; set d_convergence 5e-9; set e_convergence 1e-10; set ccenergy maxiter 2. energy('BCCD(T)'); ```. Tail of the produced output:; ```; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; ---- --------------------- --------- ---------- ---------- ---------- --------; 0 -0.533075915819886 0.000e+00 0.006541 0.000000 0.000000 0.000000; 1 -0.556071307119493 7.982e-02 0.013677 0.000000 0.000000 0.000000; 2 -0.568751401183405 2.374e-02 0.014574 0.000000 0.000000 0.000000. ** Wave function not converged to 1.0e-07 ** . Traceback (most recent call last):; File ""/home/jzz/psi4conda/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 40, in <module>; File ""/home/jzz/psi4conda/lib//python3.7/site-packages/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/jzz/psi4conda/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2673, in run_bccd; ref_wfn = core.ccenergy(ref_wfn). RuntimeError: ; Fatal Error: Timer ccenergy is not on.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1584239292352/work/psi4/src/psi4/libqt/timer.cc on line: 1143; The most recent 5 function calls were:. psi::timer_off(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""rohf""); core.set_global_option(""INTS_TOLERANCE"", 1e-14); core.set_global_option(""D_CONVERGENCE"", 5e-9); core.set_global_option(""E_CONVERGENCE"", 1e-10); core.set_local_option(""CCENERGY"", ""MAXITER"", 2); --> energy('BCCD(T)'). Psi4 stopped on: Friday, 10 April 2020 10:27PM; Psi4 wall time for execution: 0:00:27.38. *** Psi4 encountered an error. Buy a developer more coffee!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1864:2345,energy,energy,2345,https://psicode.org,https://github.com/psi4/psi4/issues/1864,1,['energy'],['energy']
Energy Efficiency,"193917 205A 2.249401 206A 2.259315 ; 207A 2.260884 208A 2.264073 209A 2.270343 ; 210A 2.290240 211A 2.296245 212A 2.304338 ; 213A 2.316737 214A 2.379290 215A 2.453589 ; 216A 2.461743 217A 2.495632 218A 2.498678 ; 219A 2.519294 220A 2.562708 221A 2.608244 ; 222A 2.726412 223A 2.739216 224A 2.753717 ; 225A 2.766537 226A 2.769494 227A 2.781755 ; 228A 2.786035 229A 2.802889 230A 2.877816 ; 231A 2.934217 232A 2.946283 233A 2.971176 ; 234A 2.978125 235A 3.021450 236A 3.025068 ; 237A 3.055308 238A 3.105407 239A 3.192416 ; 240A 3.230170 241A 3.237091 242A 3.270263 ; 243A 3.501427 244A 3.509120 245A 3.988816 ; 246A 4.002956 . Final Occupation by Irrep:; A ; DOCC [ 47 ]; ```. Energy converged. @RHF Final Energy: -535.97469065986820. => Energetics <=. ```; Nuclear Repulsion Energy = 697.1131782964378090; One-Electron Energy = -2106.2189353611356637; Two-Electron Energy = 873.1310664048263561; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; Total Energy = -535.9746906598714986; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density density matrix; Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on shukla-pc.localdomain at Thu Oct 9 10:48:21 2014; Module time:; user time = 515.17 seconds = 8.59 minutes; system time = 10.04 seconds = 0.17 minutes; total time = 527 seconds = 8.78 minutes; Total time:; user time = 515.17 seconds = 8.59 minutes; system time = 10.04 seconds = 0.17 minutes; total time = 527 seconds = 8.78 minutes. **\* tstart() called on shukla-pc.localdomain; **\* at Thu Oct 9 10:48:21 2014. ```; **************************************************; * TRANSQT2: Pro",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61:13978,Energy,Energy,13978,https://psicode.org,https://github.com/psi4/psi4/issues/61,1,['Energy'],['Energy']
Energy Efficiency,"193917 205A 2.249401 206A 2.259315 ; 207A 2.260884 208A 2.264073 209A 2.270343 ; 210A 2.290240 211A 2.296245 212A 2.304338 ; 213A 2.316737 214A 2.379290 215A 2.453589 ; 216A 2.461743 217A 2.495632 218A 2.498678 ; 219A 2.519294 220A 2.562708 221A 2.608244 ; 222A 2.726412 223A 2.739216 224A 2.753717 ; 225A 2.766537 226A 2.769494 227A 2.781755 ; 228A 2.786035 229A 2.802889 230A 2.877816 ; 231A 2.934217 232A 2.946283 233A 2.971176 ; 234A 2.978125 235A 3.021450 236A 3.025068 ; 237A 3.055308 238A 3.105407 239A 3.192416 ; 240A 3.230170 241A 3.237091 242A 3.270263 ; 243A 3.501427 244A 3.509120 245A 3.988816 ; 246A 4.002956 . Final Occupation by Irrep:; A ; DOCC [ 47 ]; ```. Energy converged. @RHF Final Energy: -535.97469065986911. => Energetics <=. ```; Nuclear Repulsion Energy = 697.1131782964378090; One-Electron Energy = -2106.2189353611738625; Two-Electron Energy = 873.1310664048628496; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; Total Energy = -535.9746906598732039; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density density matrix; Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on shukla-pc.localdomain at Thu Oct 16 11:16:51 2014; Module time:; user time = 522.41 seconds = 8.71 minutes; system time = 15.59 seconds = 0.26 minutes; total time = 594 seconds = 9.90 minutes; Total time:; user time = 522.41 seconds = 8.71 minutes; system time = 15.59 seconds = 0.26 minutes; total time = 594 seconds = 9.90 minutes. **\* tstart() called on shukla-pc.localdomain; **\* at Thu Oct 16 11:16:51 2014. ```; **************************************************; * TRANSQT2: P",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:12606,Energy,Energy,12606,https://psicode.org,https://github.com/psi4/psi4/issues/62,1,['Energy'],['Energy']
Energy Efficiency,1; 7.108450E-01 2.850510E-01; 2.731900E-01 4.614400E-02; 1.042330E-01 -3.249000E-03; 3.829100E-02 1.357000E-03; P 16 1.00; 1.774569E+04 3.000000E-06; 4.200721E+03 2.900000E-05; 1.364429E+03 1.650000E-04; 5.220806E+02 7.340000E-04; 2.214595E+02 2.626000E-03; 1.009096E+02 7.725000E-03; 4.840115E+01 1.773300E-02; 2.398536E+01 3.005500E-02; 1.218250E+01 3.109400E-02; 6.242298E+00 -1.004800E-02; 3.110944E+00 -8.830600E-02; 1.509958E+00 -1.298240E-01; 7.108450E-01 -7.693700E-02; 2.731900E-01 2.126610E-01; 1.042330E-01 5.730610E-01; 3.829100E-02 3.696510E-01; P 16 1.00; 1.774569E+04 5.000000E-06; 4.200721E+03 4.200000E-05; 1.364429E+03 2.410000E-04; 5.220806E+02 1.085000E-03; 2.214595E+02 3.831000E-03; 1.009096E+02 1.142300E-02; 4.840115E+01 2.579200E-02; 2.398536E+01 4.481800E-02; 1.218250E+01 4.459800E-02; 6.242298E+00 -1.117700E-02; 3.110944E+00 -1.381340E-01; 1.509958E+00 -1.882850E-01; 7.108450E-01 -1.073990E-01; 2.731900E-01 4.448630E-01; 1.042330E-01 6.402390E-01; 3.829100E-02 6.445700E-02; P 1 1.00; 3.829100E-02 1.000000E+00; D 8 1.00; 1.133440E+02 3.530000E-03; 3.364140E+01 2.578400E-02; 1.233100E+01 9.911900E-02; 4.994780E+00 2.390730E-01; 2.072800E+00 3.571990E-01; 8.307530E-01 3.621880E-01; 3.091780E-01 2.364610E-01; 1.001300E-01 6.011800E-02; D 8 1.00; 1.133440E+02 -3.890000E-03; 3.364140E+01 -2.844200E-02; 1.233100E+01 -1.124290E-01; 4.994780E+00 -2.742570E-01; 2.072800E+00 -3.155460E-01; 8.307530E-01 5.710900E-02; 3.091780E-01 5.636040E-01; 1.001300E-01 3.846370E-01; D 1 1.00; 1.001300E-01 1.000000E+00; F 2 1.00; 3.224300E+00 4.222490E-01; 7.758000E-01 7.714680E-01; ****; H 0; S 3 1.00; 13.0100000 0.0196850; 1.9620000 0.1379770; 0.4446000 0.4781480; S 1 1.00; 0.1220000 1.0000000; P 1 1.00; 0.7270000 1.0000000; ****; }. set basis mine2; set basis_relativistic mine2. set scf df_scf_guess false; set scf guess gwh; set ccenergy r_convergence 10; energy('scf'). clean(). basis{; assign Fe cc-pwcvtz-dk; assign H cc-pvtz-dk; }. set scf guess read; energy('cc2'); ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/899:6419,energy,energy,6419,https://psicode.org,https://github.com/psi4/psi4/issues/899,2,['energy'],['energy']
Energy Efficiency,"1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. -AO BASIS SET INFORMATION:; Name = CC-PVTZ; Blend = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; ___________________________________________________________________ test_json ____________________________________________________________________. def test_json():; """"""json/energy""""""; ; import numpy as np; ; # Generate JSON data; json_data = {}; json_data[""molecule""] = """"""He 0 0 0\n--\nHe 0 0 1""""""; json_data[""driver""] = ""gradient""; json_data[""args""] = 'SCF'; json_data[""kwargs""] = {}; json_data[""options""] = {""BASIS"": ""STO-3G""}; json_data[""return_output""] = True; ; psi4.json_wrapper.run_json(json_data); ; assert psi4.compare_strings(""STO-3G"", json_data[""options""][""BASIS""], ""Options test""); > assert psi4.compare_integers(True, json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . expected = True, computed = False, label = 'Success'. def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite.; ; """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, e",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:16704,energy,energy,16704,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"1; H -1.36917 -4.23407 -0.64127; O -1.89779 -2.21963 -0.70275; C 0.04169 -3.51758 1.45753; H 1.00429 -3.46857 1.97365; O -0.95802 -2.84738 2.22072; H -0.62594 -1.95593 2.43463; H -0.25639 -4.56534 1.39064; C -3.89573 -1.47663 1.11455; H -2.84685 -1.21526 1.24711; O -3.96785 -2.64213 0.26554; C -3.25927 -2.48505 -0.9528; H -3.38296 -3.42013 -1.49634; C -3.83016 -1.30519 -1.76284; H -4.84213 -1.57034 -2.07564; O -3.08657 -1.08539 -2.95725; H -2.16485 -0.88813 -2.71436; C -3.89865 -0.04023 -0.90552; H -2.87924 0.29308 -0.69629; O -4.61098 1.01217 -1.56224; H -4.00729 1.44319 -2.17836; C -4.59468 -0.30612 0.4222; H -5.64733 -0.55648 0.23973; O -4.51034 0.8485 1.2693; H -4.69798 1.62621 0.72518; C -4.47115 -1.85465 2.46592; H -5.33699 -2.50924 2.30958; O -3.50744 -2.49324 3.3135; H -2.76983 -2.83605 2.77919; H -4.81526 -0.95879 2.98516; O 2.01537 -1.70774 -1.89652; H 1.17126 -1.21952 -1.9851; units angstrom. }; set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'); energy('sapt0-ct'); ```. User reported error message:; ```; Traceback (most recent call last):; File “/home/think/psi4conda/bin/psi4”, line 248, in; exec(content); File “”, line 147, in; File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py”, line 460, in energy; wfn = procedures[‘energy’][lowername](lowername, molecule=molecule, **kwargs); File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py”, line 3278, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits, std::allocator >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::sapt::SA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1328:3568,energy,energy,3568,https://psicode.org,https://github.com/psi4/psi4/issues/1328,2,['energy'],['energy']
Energy Efficiency,1; S 1 1.00; 0.2207807629E+01 0.1000000000E+01; S 1 1.00; 0.1127496852E+01 0.1000000000E+01; S 1 1.00; 0.5757970639E+00 0.1000000000E+01; S 1 1.00; 0.2940516050E+00 0.1000000000E+01; S 1 1.00; 0.1501680918E+00 0.1000000000E+01; P 1 1.00; 0.1829869625E+04 0.1000000000E+01; P 1 1.00; 0.9344891347E+03 0.1000000000E+01; P 1 1.00; 0.4772306896E+03 0.1000000000E+01; P 1 1.00; 0.2437151195E+03 0.1000000000E+01; P 1 1.00; 0.1244619442E+03 0.1000000000E+01; P 1 1.00; 0.6356099525E+02 0.1000000000E+01; P 1 1.00; 0.3245972208E+02 0.1000000000E+01; P 1 1.00; 0.1657673158E+02 0.1000000000E+01; P 1 1.00; 0.8465507783E+01 0.1000000000E+01; P 1 1.00; 0.4323217860E+01 0.1000000000E+01; P 1 1.00; 0.2207807629E+01 0.1000000000E+01; P 1 1.00; 0.1127496852E+01 0.1000000000E+01; P 1 1.00; 0.5757970639E+00 0.1000000000E+01; P 1 1.00; 0.2940516050E+00 0.1000000000E+01; P 1 1.00; 0.1501680918E+00 0.1000000000E+01; P 1 1.00; 0.7668876969E-01 0.1000000000E+01; ****; }. energy('scf'); ```; This runs nicely; ```; ==> Fractionally-Occupied SCF Iterations <==. Alpha orbital 3 will contain 1.000E+00 electron.; Alpha orbital 4 will contain 1.000E+00 electron.; Alpha orbital 5 will contain 1.000E+00 electron.; Beta orbital 3 will contain 6.667E-01 electron.; Beta orbital 4 will contain 6.667E-01 electron.; Beta orbital 5 will contain 6.667E-01 electron. @UHF iter 1: -85.83418494087701 -8.58342e+01 1.47308e-01 DIIS; Occupation by irrep:; A ; DOCC [ 5 ]; SOCC [ 0 ]. @UHF iter 2: -86.90714628725982 -1.07296e+00 4.33630e-02 FRAC; @UHF iter 3: -96.04326201435347 -9.13612e+00 5.10365e-02 DIIS/FRAC; @UHF iter 4: -95.69273858723787 3.50523e-01 3.47534e-02 DIIS/FRAC; @UHF iter 5: -98.96468336105178 -3.27194e+00 1.08919e-02 DIIS/FRAC; @UHF iter 6: -99.16143874023540 -1.96755e-01 9.82232e-04 DIIS/FRAC; @UHF iter 7: -99.16448800785139 -3.04927e-03 2.62203e-04 DIIS/FRAC; @UHF iter 8: -99.16466805777382 -1.80050e-04 9.94209e-05 DIIS/FRAC; @UHF iter 9: -99.16470603597492 -3.79782e-05 8.45894e-06 DIIS/FRAC; @UHF ite,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1673:2287,energy,energy,2287,https://psicode.org,https://github.com/psi4/psi4/issues/1673,1,['energy'],['energy']
Energy Efficiency,"1B1 -0.638605 ; 4A1 -0.611527 3B2 -0.571415 1A2 -0.448360 . Virtual: . 5A1 0.196427 4B2 0.233677 5B2 0.363534 ; 6B2 0.797460 2B1 0.838809 6A1 0.844012 ; 7A1 0.899194 2A2 0.923759 8A1 1.027087 ; 7B2 1.058856 9A1 1.124050 8B2 1.149224 ; 9B2 1.493845 3B1 1.719758 10A1 1.729020 ; 3A2 1.885626 4B1 1.905688 10B2 2.114549 ; 11A1 2.362681 12A1 2.530729 11B2 2.768793 ; 13A1 2.777858 5B1 2.778067 4A2 2.804070 ; 5A2 2.974845 12B2 3.002608 13B2 3.319351 ; 14A1 3.594108 14B2 3.777164 15A1 4.062330 ; 15B2 4.514378 16A1 45.233612 16B2 45.429678 . Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 4, 1, 1, 3 ]. Energy converged. @DF-RHF Final Energy: -150.80654620986098. => Energetics <=. Nuclear Repulsion Energy = 37.8876016263036917; One-Electron Energy = -283.3602994176750940; Two-Electron Energy = 94.6661515815104053; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -150.8065462098609828. Saving occupied orbitals to File 180. *** tstop() called on mrabsence-Ubuntu at Mon Aug 22 01:48:07 2016; Module time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.5931. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.2113. Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.3818 Total: 1.3818. Dipole Moment: (Debye); X: 0.0000 Y: -0.0000 Z: -3.5122 Total: 3.5122. *** tstart() called on mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ------------------------------------------------------------; SCF HESS ; Rob Parrish, Justin Turney, ; Andy Simmonett, and ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/463:6813,Energy,Energy,6813,https://psicode.org,https://github.com/psi4/psi4/issues/463,1,['Energy'],['Energy']
Energy Efficiency,"2 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.5931. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.2113. Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.3818 Total: 1.3818. Dipole Moment: (Debye); X: 0.0000 Y: -0.0000 Z: -3.5122 Total: 3.5122. *** tstart() called on mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ------------------------------------------------------------; SCF HESS ; Rob Parrish, Justin Turney, ; Andy Simmonett, and Alex Sokolov ; ------------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H -0.000000000000 0.980353033500 -0.849954236217 1.007825032070; O -0.000000000000 0.698854518800 0.053554843883 15.994914619560; O 0.000000000000 -0.698854518800 0.053554843883 15.994914619560; H 0.000000000000 -0.980353033500 -0.849954236217 1.007825032070. Nuclear repulsion = 37.887601626303692. ==> Basis Set <==. Basis Set: DZP; Number of shells: 20; Number of basis function: 42; Number of Cartesian functions: 42; Spherical Harmonics?: false; Max angular momentum: 2. ==> DFJKGrad: Density-Fitted SCF Gradients <==. Gradient: 2; J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 183; Schwarz Cutoff: 0E+00; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: ; Number of shells: 62; Number of basis function: 226; Number of Cartesian functions: 226; Spherical Harmonics?: false; Max angular moment",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/463:7978,charge,charge,7978,https://psicode.org,https://github.com/psi4/psi4/issues/463,1,['charge'],['charge']
Energy Efficiency,"2,7) = 2.053717	 1.086780; 	 R(3,4) = 2.460043	 1.301799; 	 R(4,5) = 2.048304	 1.083916; 	 R(4,6) = 2.048052	 1.083782; 	 B(1,2,3) = 2.184425	 125.158344; 	 B(1,2,7) = 2.039946	 116.880293; 	 B(2,1,8) = 1.932206	 110.707222; 	 B(2,1,9) = 1.943108	 111.331905; 	 B(2,1,10) = 1.932189	 110.706283; 	 L(2,3,4) = 3.139524	 179.881489; 	 l(2,3,4) = 3.141593	 180.000000; 	 B(3,2,7) = 2.058814	 117.961348; 	 B(3,4,5) = 2.119850	 121.458466; 	 B(3,4,6) = 2.120178	 121.477254; 	 B(5,4,6) = 2.043155	 117.064152; 	 B(8,1,9) = 1.892072	 108.407726; 	 B(8,1,10) = 1.869872	 107.135787; 	 B(9,1,10) = 1.892170	 108.413330; 	 D(3,2,1,8) = 2.105760	 120.651167; 	 D(3,2,1,9) = -0.000265	 -0.015201; 	 D(3,2,1,10) = -2.106403	 -120.688028; 	 D(7,2,1,8) = -1.035039	 -59.303377; 	 D(7,2,1,9) = -3.141065	 -179.969745; 	 D(7,2,1,10) = 1.035983	 59.357428; 	 D(1,2,4,5) = -1.570902	 -90.006049; 	 D(1,2,4,6) = 1.571763	 90.055389; 	 D(5,4,2,7) = 1.569937	 89.950750; 	 D(6,4,2,7) = -1.570584	 -89.987812. 	Current energy : -155.9174379498. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1.; 	Norm of target step-size 0.02433; 	Projected energy change by RFO approximation: -0.0001821031. 	Back-transformation to cartesian coordinates...; 	Could not converge backtransformation.; 	Using first guess instead. 	--- Internal Coordinate Step in ANG or DEG, aJ/ANG or AJ/DEG ---; 	 ---------------------------------------------------------------------------; 	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 1.505794 -0.034892 3.856575 5.362368; 	 2 R(1,8) = 1.092251 -0.013706 3.549391 4.641642; 	 3 R(1,9) = 1.088350 -0.010961 4.187384 5.275733; 	 4 R(1,10) = 1.092294 -0.013927 3.544911 4.637205; 	 5 R(2,3) = 1.301698 -0.004903 0.637751 1.939449; 	 6 R(2,7) = 1.086780 -0.014812 4.341946 5.428727; 	 7 R(3,4) = 1.301799 -0.000235 0.638104 1.939903; 	 8 R(4,5) = 1.083",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020:4715,energy,energy,4715,https://psicode.org,https://github.com/psi4/psi4/issues/2020,1,['energy'],['energy']
Energy Efficiency,"2.48505 -0.9528; H -3.38296 -3.42013 -1.49634; C -3.83016 -1.30519 -1.76284; H -4.84213 -1.57034 -2.07564; O -3.08657 -1.08539 -2.95725; H -2.16485 -0.88813 -2.71436; C -3.89865 -0.04023 -0.90552; H -2.87924 0.29308 -0.69629; O -4.61098 1.01217 -1.56224; H -4.00729 1.44319 -2.17836; C -4.59468 -0.30612 0.4222; H -5.64733 -0.55648 0.23973; O -4.51034 0.8485 1.2693; H -4.69798 1.62621 0.72518; C -4.47115 -1.85465 2.46592; H -5.33699 -2.50924 2.30958; O -3.50744 -2.49324 3.3135; H -2.76983 -2.83605 2.77919; H -4.81526 -0.95879 2.98516; O 2.01537 -1.70774 -1.89652; H 1.17126 -1.21952 -1.9851; units angstrom. }; set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'); energy('sapt0-ct'); ```. User reported error message:; ```; Traceback (most recent call last):; File “/home/think/psi4conda/bin/psi4”, line 248, in; exec(content); File “”, line 147, in; File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py”, line 460, in energy; wfn = procedures[‘energy’][lowername](lowername, molecule=molecule, **kwargs); File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py”, line 3278, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits, std::allocator >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::sapt::SAPT::zero_disk(int, char const*, int, int); psi::sapt::SAPT0::df_integrals(); ```. @loriab reported being able to reproduce this, but was interrupted working on the bug and never got around to it. This may just be a case of the disk filling up, in which case, all we can do is write a better error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1328:3866,energy,energy,3866,https://psicode.org,https://github.com/psi4/psi4/issues/1328,2,['energy'],['energy']
Energy Efficiency,2.93172e-02 6.13615e-04 ADIIS/DIIS; @RHF iter 4: -672.74452727814617 -7.87814e-04 1.92071e-04 ADIIS/DIIS; @RHF iter 5: -672.74459671900468 -6.94409e-05 5.54299e-05 DIIS; @RHF iter 6: -672.74460689054501 -1.01715e-05 1.01141e-05 DIIS; @RHF iter 7: -672.74460730521071 -4.14666e-07 1.79146e-06 DIIS; @RHF iter 8: -672.74460731376098 -8.55027e-09 7.54369e-07 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 ADIIS/DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 ADIIS/DIIS; @RHF iter 3: -672.74373946371918 -2.93172e-02 6.13615e-04 ADIIS/DIIS; @RHF iter 4: -672.74452727814617 -7.87814e-04 1.92071e-04 ADIIS/DIIS; @RHF iter 5: -672.74459671900468 -6.94409e-05 5.54299e-05 DIIS; @RHF iter 6: -672.74460689054501 -1.01715e-05 1.01141e-05 DIIS; @RHF iter 7: -672.74460730521071 -4.14666e-07 1.79146e-06 DIIS; @RHF iter 8: -672.74460731376098 -8.55027e-09 7.54369e-07 DIIS; @RHF iter 9: -672.74460731474016 -9.79185e-10 2.16800e-07 DIIS; @RHF iter 10: -672.74460731487568 -1.35515e-10 7.07155e-08 DIIS; @RHF iter 11: -672.74460731489148 -1.58025e-11 1.29083e-08 DIIS; @RHF iter 12: -672.74460731489262 -1.13687e-12 2.70093e-09 DIIS; @RHF iter 13: -672.74460731489307 -4.54747e-13 6.42115e-10 DIIS; @RHF iter 14: -672.74460731489330 -2.27374e-13 2.02808e-10 DIIS; @RHF iter 15: -672.74460731489262 6.82121e-13 6.57895e-11 DIIS; @RHF iter 16: -672.74460731489239 2.27374e-13 1.98299e-11 DIIS; @RHF iter 17: -672.74460731489273 -3.41061e-13 4.17600e-12 DIIS; @RHF iter 18: -672.74460731489296 -2.27374e-13 1.20666e-12 DIIS; @RHF iter 19: -672.74460731489376 -7.95808e-13 2.59222e-13 DIIS; Energy and wave function converged.; ```. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2446:5091,Energy,Energy,5091,https://psicode.org,https://github.com/psi4/psi4/pull/2446,1,['Energy'],['Energy']
Energy Efficiency,"20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL.; Traceback (most recent call last):; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/driver.py"", line 577, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_proc.py"", line 255, in run_sapt_dft; sapt_dft(dimer_wfn, wfn_A, wfn_B, sapt_jk=sapt_jk, data=data, print_header=False); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_proc.py"", line 421, in sapt_dft; fdds_disp = sapt_mp2_terms.df_fdds_dispersion(primary_basis, aux_basis, cache, is_hybrid, x_alpha); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_mp2_terms.py"", line 146, in df_fdds_dispersion; Rtinv_A = np.linalg.pinv(R_A, rcond=1.e-13).transpose(); File ""<__array_function__ internals>"", line 6, in pinv; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2178:2511,energy,energy,2511,https://psicode.org,https://github.com/psi4/psi4/issues/2178,2,['energy'],['energy']
Energy Efficiency,"203508 ; C 2.556298194545 0.180969635345 0.026599203508 ; C 3.872538194545 0.268679635345 0.044049203508 ; H 4.487898194545 -0.251640364655 -0.694370796492 ; H 4.393828194545 0.864729635345 0.797449203508; C -3.871661805455 -0.281870364655 -0.036170796492 ; H -4.492551805455 0.418709635345 -0.600540796492 ; H -4.386761805455 -1.069870364655 0.519199203508 ; }. energy(""wb97x-3c""); ```. Input file for heptatriyne:; ```; molecule {; C -3.385689447328 -1.019909032022 -1.749453831407 ; H -4.303799447328 -1.298729032022 -2.222123831407; C -2.336629447328 -0.701769032022 -1.209473831407 ; C -1.177199447328 -0.351139032022 -0.612463831407 ; C -0.119169447328 -0.031909032022 -0.066563831407 ; C 1.038150552672 0.314670967978 0.533526168593 ; C 2.088230552672 0.627260967978 1.081186168593; C 3.329350552672 0.995630967978 1.729406168593 ; H 3.940040552672 1.640920967978 1.078936168593 ; H 3.139820552672 1.543830967978 2.665426168593 ; H 3.926960552672 0.104360967978 1.976426168593 ; }. energy(""wb97x-3c""); ```. Output file for H2C-C5-CH2:; ```. -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.9.1 release. Git: Rev {} zzzzzzz . D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish,; M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio,; A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer,; R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni,; J. S. O'Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein,; B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov,; K. Patkowski, A. E. DePrince III, U. Bozkaya, R. A. King,; F. A. Evangelista, J. M. Turney, T. D. Crawford, C. D. Sherrill,; J. Chem. Phys. 152(18) 184108 (2020). https://doi.org/10.1063/5.0006002. Additional Code Authors; E. T. Seidl, C. L. Janssen, E. F. Valeev, M. L. Leininger,; J. F. Gonthier, R. M. Richard, H. R. McAlexander, M. Saitow, X. Wang,; P. Verma, M. H. Lechner, A. Jiang",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:2849,energy,energy,2849,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['energy'],['energy']
Energy Efficiency,"208 file /opt/psi/4/master/share/psi4/basis/heavy-aug-cc-pvdz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; ROHF-MBPT(2) Wavefunction, 4 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 144; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 2 9 7 37 37 0; BETA 2 7 5 39 39 0; --------------------------------------------------------. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -149.6217688382015183 [Eh]; Singles Energy = -0.0130981432734322 [Eh]; Same-Spin Energy = -0.1180463523157988 [Eh]; Opposite-Spin Energy = -0.2655370704826780 [Eh]; Correlation Energy = -0.3966815660719090 [Eh]; Total Energy = -150.0184504042734375 [Eh]; -----------------------------------------------------------; ================> DF-SCS-MP2 Energies <==================; -----------------------------------------------------------; SCS Same-Spin Scale = 0.3333333333333333 [-]; SCS Opposite-Spin Scale = 1.2000000000000000 [-]; SCS Same-Spin Energy = -0.0393487841052663 [Eh]; SCS Opposite-Spin Energy = -0.3186444845792136 [Eh]; SCS Correlation Energy = -0.3710914119579120 [Eh]; SCS Total Energy = -149.9928602501594241 [Eh]; -----------------------------------------------------------; ```. I haven't run any other CBS hessians to see if the issue appears where psi4 might have analytic gradients or something.; I also have not tired passing `mp2_type df` into the Delta wfn explicitly. I assume that would perform the desired calculation but I believe the calculation requested in the input should perform conventional mp2 without needing to use the explicit",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:7457,Energy,Energy,7457,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['Energy'],['Energy']
Energy Efficiency,"21 60A 0.837786 61A 0.896368 ; 62A 0.911715 63A 0.939819 64A 1.013440 ; 65A 1.043686 66A 1.043717 67A 1.079379 ; 68A 1.110213 69A 1.243320 70A 1.248770 ; 71A 1.249096 72A 1.325143 73A 1.325198 ; 74A 1.395025 75A 1.397495 76A 1.442305 ; 77A 1.442695 78A 1.456897 79A 1.504332 ; 80A 1.639667 81A 1.641352 82A 1.668110 ; 83A 1.705574 84A 1.784410 85A 1.840841 ; 86A 1.841701 87A 1.932164 88A 2.090833 ; 89A 2.093816 90A 2.132735 91A 2.154837 ; 92A 2.180250 93A 2.253444 94A 2.481160 ; 95A 2.481328 96A 2.496342 97A 2.793920 ; 98A 2.848632 99A 2.969349 100A 2.969418 ; 101A 3.337134 102A 3.399821 103A 3.400315 ; 104A 3.528082 105A 4.155988 106A 5.476938 ; 107A 5.786400 108A 6.199146 109A 7.337445 ; 110A 8.481836 111A 8.867663 . Final Occupation by Irrep:; A ; DOCC [ 16 ]; NA [ 16 ]; NB [ 16 ]. @DF-RKS Final Energy: -43.40748214051649. => Energetics <=. Nuclear Repulsion Energy = 93.7538801503397679; One-Electron Energy = -245.6257702779177521; Two-Electron Energy = 115.6223560816475100; DFT Exchange-Correlation Energy = -7.1485657255274635; Empirical Dispersion Energy = -0.0093823690585561; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -43.4074821405164926. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : -0.0030364 0.0030278 -0.0000086; Dipole Y : 0.0588791 -0.0477754 0.0111036; Dipole Z : -0.0335702 0.0272773 -0.0062929; Magnitude : 0.0127629. ------------------------------------------------------------------------------------. *** tstop() called on agincourt.lan at Mon Sep 16 22:17:38 2024; Module time:; 	user time = 9.63 seconds = 0.16 minutes; 	system time",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:13926,Energy,Energy,13926,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"22; C -1.63014171 -0.50652361 -8.79096870; symmetry c1; }. set basis aug-cc-pvdz; set reference rohf; set ints_tolerance 1e-14; set d_convergence 5e-9; set e_convergence 1e-10; set ccenergy maxiter 2. energy('BCCD(T)'); ```. Tail of the produced output:; ```; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; ---- --------------------- --------- ---------- ---------- ---------- --------; 0 -0.533075915819886 0.000e+00 0.006541 0.000000 0.000000 0.000000; 1 -0.556071307119493 7.982e-02 0.013677 0.000000 0.000000 0.000000; 2 -0.568751401183405 2.374e-02 0.014574 0.000000 0.000000 0.000000. ** Wave function not converged to 1.0e-07 ** . Traceback (most recent call last):; File ""/home/jzz/psi4conda/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 40, in <module>; File ""/home/jzz/psi4conda/lib//python3.7/site-packages/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/jzz/psi4conda/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2673, in run_bccd; ref_wfn = core.ccenergy(ref_wfn). RuntimeError: ; Fatal Error: Timer ccenergy is not on.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1584239292352/work/psi4/src/psi4/libqt/timer.cc on line: 1143; The most recent 5 function calls were:. psi::timer_off(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""rohf""); core.set_global_option(""INTS_TOLERANCE"", 1e-14); core.set_global_option(""D_CONVERGENCE"", 5e-9); core.set_global_option(""E_CONVERGENCE"", 1e-10); core.set_local_option(""CCENERGY"", ""MAXITER"", 2); --> energy('BCCD(T)'). Psi4 stopped on: Friday, 10 April 2020 10:27PM; Psi4 wall time for execution: 0:00:27.38. *** Psi4 encountered an error. Buy a developer mor",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1864:1450,energy,energy,1450,https://psicode.org,https://github.com/psi4/psi4/issues/1864,2,['energy'],['energy']
Energy Efficiency,2330		 CA 0.748527364156 0.017183395493 -0.00012330; 									 >; Running in c1 symmetry.							 Running in c1 symmetry.; 									 >; Rotational constants: A = 6.96289 B = 0.22986 C = 0		 Rotational constants: A = 6.96289 B = 0.22986 C = 0; Rotational constants: A = 208742.34059 B = 6890.97828 C = 6670		 Rotational constants: A = 208742.34059 B = 6890.97828 C = 6670; Nuclear repulsion = 0.000000000000000					 Nuclear repulsion = 0.000000000000000; 									 >; Charge = 2								 Charge = 2; Multiplicity = 1								 Multiplicity = 1; Electrons = 8								 Electrons = 8; Nalpha = 4								 Nalpha = 4; Nbeta = 4								 Nbeta = 4; 									 >; ==> Algorithm <==								 ==> Algorithm <==; 									 >; SCF Algorithm Type is DF.							 SCF Algorithm Type is DF.; DIIS enabled.									 DIIS enabled.; MOM disabled.									 MOM disabled.; Fractional occupation disabled.						 Fractional occupation disabled.; Guess Type is SAD.								 Guess Type is SAD.; Energy threshold = 1.00e-10							 Energy threshold = 1.00e-10; Density threshold = 1.00e-10							 Density threshold = 1.00e-10; Integral threshold = 1.00e-12							 Integral threshold = 1.00e-12; 									 >; ==> Primary Basis <==								 ==> Primary Basis <==; 									 >; Basis Set: LANL2DZ								 Basis Set: LANL2DZ; Blend: LANL2DZ								 Blend: LANL2DZ; Number of shells: 15							 Number of shells: 15; Number of basis functions: 25						 Number of basis functions: 25; Number of Cartesian functions: 25						 Number of Cartesian functions: 25; Spherical Harmonics?: false							 Spherical Harmonics?: false; Max angular momentum: 1							 Max angular momentum: 1; 									 >; Core potential: LANL2DZ							 Core potential: LANL2DZ; Number of shells: 3								 Number of shells: 3; Number of ECP primitives: 13						 Number of ECP primitives: 13; Number of ECP core electrons: 10						 Number of ECP core electrons: 10; Max angular momentum: 2							 Max angular momentum: 2; 									 >; => Loading Basis Set <=							 => Loadi,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3072:3179,Energy,Energy,3179,https://psicode.org,https://github.com/psi4/psi4/issues/3072,1,['Energy'],['Energy']
Energy Efficiency,"24, @psi-rking, @SimonBoothroyd, @yxie326, @VHchavez, @nlk36701, @edeustua, @leeping, @mquevill, @lazaroid, @sgoodlett. ## Performance Optimizations; - omega exchange can now be computed with `MemJK` algorithm. By not having to shunt range-separated functionals to `DiskJK` even when they'd fit in memory, 30-40% performance improvements seen (#1749); - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) . ## Developer Interests; - Improves [QCSchema](https://github.com/MolSSI/QCSchema); - Handle module-level options: `scf__reference` equivalent to `set scf reference` (#1578); - `psi4 --qcschema` instead of `psi4 --json` (#1723); - arrays losslessly transmitted in binary if `msgpack` installed (#1723); - new CC properties collected (#1723), dipole returned in au (#1728) ; - basisset and wavefunction schema returned (#1728); - New DFT grid pruning schemes, Treutler and robust accessed through `set dft_pruning_scheme` (not yet engaged by default) (grid points reduced by 30–45%) (#1591); - `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` have been removed, as have ""MP2"" variables from double-hybrid DFT final return (#1445); - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY` (#1445); - Dunning basis updates for Li, Be, Na, Mg (#1559); - S^Inf 2nd-order Dispersion and Exchange-Dispersion for SAPT (#1490); - Enable LGTM static analysis; - Add qcvars to wavefunction (not just globals) for CI, CheMPS2, PsiMRCC, DFT, scf_helper, DFMP2, OEPROP, DETCI. Add functional-including qcvars for DFT (#1570, #1445); - Add option `PARENT_SYMMETRY` to replace a global. Don't use it directly (#1575); - Driver sow/reap for optimize, database which never worked for py3 removed (#1583); - Add 6-311G(2df, <any>) for 2nd row atoms (#1531); -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:4029,reduce,reduced,4029,https://psicode.org,https://github.com/psi4/psi4/issues/1562,4,"['ENERGY', 'reduce']","['ENERGY', 'reduced']"
Energy Efficiency,"2403116031 -9.60343e-13 2.69685e-09 DIIS; @DF-UHF iter 8: -0.49762403116031 -7.77156e-16 2.10910e-10 DIIS; @DF-UHF iter 9: -0.49762403116032 -8.88178e-16 2.91582e-11 DIIS; @DF-UHF iter 10: -0.49762403116032 -6.66134e-16 1.10373e-14 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 7.500000000E-01; @S^2 Observed: 7.500000000E-01; @S Expected: 5.000000000E-01; @S Observed: 5.000000000E-01. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.497624 . Alpha Virtual: . 2A 0.048719 3A 0.066612 4A 0.066612 ; 5A 0.098792 6A 0.253872 7A 0.387743 ; 8A 0.387743 9A 0.427498 10A 1.213680 ; 11A 3.852115 . Beta Occupied: . . Beta Virtual: . 1A 0.020894 2A 0.058417 3A 0.068354 ; 4A 0.068354 5A 0.183800 6A 0.269157 ; 7A 0.391375 8A 0.391375 9A 0.451441 ; 10A 1.378124 11A 3.853058 . Final Occupation by Irrep:; A ; DOCC [ 0 ]; SOCC [ 1 ]. @DF-UHF Final Energy: -0.49762403116032. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -0.4976240311603163; Two-Electron Energy = 0.0000000000000000; Total Energy = -0.4976240311603163. UHF NO Occupations:; HONO-0 : 1 A 1.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SCF //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: AUG-CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry LI line 68 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz.gbs ; atoms 2 entry H line 40 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 976 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in An",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:5187,Energy,Energy,5187,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Energy'],['Energy']
Energy Efficiency,"2866 0.00371412 0.00163364 0.01005622 0.00527025 ~; # 5 -139.557391640737 -0.000041693330 0.00051457 0.00018711 0.00138018 0.00067210 ~; # 6 -139.557392223903 -0.000000583166 0.00004140 0.00002031 0.00028542 0.00012144 ~; # 7 -139.557392234146 -0.000000010243 0.00001186 0.00000566 0.00004411 0.00002377 ~; # 8 -139.557392234594 -0.000000000448 0.00000420 0.00000194 0.00001643 0.00000834 ~; # 9 -139.557392234645 -0.000000000051 0.00000176 0.00000074 0.00000686 0.00000306 ~; # 10 -139.557392234661 -0.000000000016 0.00000071 0.00000029 0.00000278 0.00000118 ~; # --------------------------------------------------------------------------------------------------------------- ~. # Second system, a not-right by eye but still plausible geometry, oddz. molecule oddz {; C; H 1 1.792; H 1 1.792 2 59.4; H 1 1.089 2 136.7 3 -127.3; F 1 2.089 2 101.7 4 -135.9; }. # reference start NRE, E, G for this geometry. odd_nre_start = 25.7790014493 # Q-Chem; odd_e_start = -139.1749807824 # Q-Chem; # Full Analytical Gradient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 -0.06704124 0.03019136 0.05220334 -0.00529778 -0.01005568; # 2 0.09718540 -0.00309814 -0.00309734 -0.00009178 -0.09089814; # 3 -0.11760428 0.07849561 0.06595344 -0.00926729 -0.01757747; odd_g_start = psi4.Matrix(5, 3) # Q-Chem; contents = [ # have to swap x & y, and -x; [ -0.09718540, 0.00309814, 0.00309734, 0.00009178, 0.09089814],; [ -0.06704124, 0.03019136, 0.05220334, -0.00529778, -0.01005568],; [ -0.11760428, 0.07849561, 0.06595344, -0.00926729, -0.01757747]]; odd_g_start.set(zip(*contents)); odd_rmsg_start = 0.058156. # optimized reference should be same as norm, but in practice is this. odd_nre_opt = 33.838291620; odd_e_opt = -139.301327453; odd_rmsg_opt = 0.0422103431176. # should be able to pass starting gradient at new geometry, then zero grad final structure. test_odd_start(oddz) # works; #test_zero_grad(oddz) # should work; test_badodd_grad(oddz) # works b/c I'm testing against the bad results. # qu-est-ce que c-est? By ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:5653,Energy,Energy,5653,https://psicode.org,https://github.com/psi4/psi4/issues/310,1,['Energy'],['Energy']
Energy Efficiency,"2890634209E-11.; Reciprocal condition number of the overlap matrix is 1.8442944048E-12.; Using canonical orthogonalization.; Overall, 27 of 648 possible MOs eliminated. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 648 621 ; -------------------------; Total 648 621; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -212.57868470845432 -2.12579e+02 0.00000e+00 ; @DF-RKS iter 1: -74.64880419187541 1.37930e+02 2.89342e-02 DIIS/ADIIS; @DF-RKS iter 2: -104.73618075758787 -3.00874e+01 2.89040e-02 DIIS/ADIIS. Traceback (most recent call last):; File ""[REMOVED BASE DIRECTORY]/bin/psi4"", line 347, in <module>; exec(content); File ""<string>"", line 66, in <module>; File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File [REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/proc.py"", line 2455, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/proc.py"", line 1670, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 412, in scf_iterate; for engine_used in self.diis(Dnorm):; File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/scf_proc/subclass_methods.py"", line 111, in _RHF_diis; return self.diis_manager_.extrapolate(self.Fa(), Dnorm=Dnorm); File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/diis.py"", line 407, in extrapolate; coeffs = m * initial_coefficient_function() + (1 - m) * self.diis_coefficients(); File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/diis.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641:11553,energy,energy,11553,https://psicode.org,https://github.com/psi4/psi4/issues/2641,2,['energy'],['energy']
Energy Efficiency,"294071, 8.76854971761692, 13.809542785134276],; [-6.6559650527771, 5.623054516429932, 11.652471107312186],; [-1.468268747886573, 5.28326673868353, 11.844582222696696],; [0.8007407915165865, 9.351122493395383, 13.62968442543807],; [-1.7446447844863573, 12.352368203223108, 15.730323703929539],; [-6.107578326059717, 12.142102014322907, 15.775189493290956],; [-8.826609299232123, 8.823065427642629, 13.96073770638817],; [4.172828613898477, -10.019359049577828, 12.568748646228057],; [6.585879005168848, -9.128190457034952, 12.478041774546314],; [6.984608919104673, -6.646175650573697, 13.484648438245728],; [4.926355976270059, -5.086295938718023, 14.142608570641505],; [2.5693750230805064, -6.160659927473747, 14.21370645735928],; [2.213083164787955, -8.608181965255541, 13.443982462683802],; [3.999512419878047, -12.183109880381776, 11.88872814465905],; [7.838444165512118, -10.445402451015424, 11.901760284360375],; [8.849510177006636, -5.874104763895764, 13.500697704537037],; [5.393131101647324, -3.34742918654667, 14.868434474560834],; [0.6932168112938935, -5.217693305978344, 14.784738155333894],; [0.20440754893479765, -9.087941596751813, 13.331302279241509],; [-3.2892141006967823, -14.756611605640634, 1.0212612440672273],; [-4.948928650864744, -12.644342755401091, 0.9470556536023668],; [-7.018708920913597, -12.427948798034729, 2.6098865953999857],; [-7.4497840653131195, -14.37239700557793, 4.290791021232555],; [-5.735933553365823, -16.22709057302199, 4.620966842252425],; [-3.687572420474477, -16.562818050920185, 3.034974786431045],; [-1.8513633325344034, -14.81598763653126, -0.335313559402],; [-4.715451333061206, -10.884464610668445, -0.14073902754797188],; [-8.203091935607064, -10.657070118309775, 2.4997219071223564],; [-8.600509943381129, -14.063399990960185, 6.07175152431976],; [-6.0418939362757165, -17.409178187152243, 6.273481969281969],; [-2.0367076889241837, -17.717700841096935, 3.450457310685484]])); mol.update_geometry(); e, wf = energy('wb97m-v',return_wfn=True,); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735:16127,energy,energy,16127,https://psicode.org,https://github.com/psi4/psi4/issues/2735,1,['energy'],['energy']
Energy Efficiency,"2; 3Ag 0.485648 4Ag 1.228480 1B3g 1.228480; 5Ag 1.228480 1B2g 1.228480 1B1g 1.228480; 3B3u 1.526002 3B2u 1.526002 3B1u 1.526002; 6Ag 2.051155 7Ag 3.283338 2B2g 3.283338; 2B3g 3.283338 2B1g 3.283338 8Ag 3.283338; 4B2u 3.331721 4B3u 3.331721 1Au 3.331721; 4B1u 3.331721 5B3u 3.331721 5B2u 3.331721; 5B1u 3.331721 6B2u 5.672254 6B1u 5.672254; 6B3u 5.672254 7B1u 9.267994 7B2u 9.267994; 7B3u 9.267994 8B1u 9.267994 8B3u 9.267994; 2Au 9.267994 8B2u 9.267994 9Ag 9.745165; 3B2g 9.745165 3B1g 9.745165 3B3g 9.745165; 10Ag 9.745165 11Ag 10.965644. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; ```. Energy converged. @RHF Final Energy: -99.45080702230226. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -143.9965313656634294; Two-Electron Energy = 44.5457243433611438; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -99.4508070223022855. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-06 at Fri Jan 8 13:56:55 2016; Module time:; user time = 10.33 seconds = 0.17 minutes; system time = 0.28 seconds = 0.00 minutes; total time = 2 seconds = 0.03 minutes; Total time:; user time = 10.33 seconds = 0.17 minutes; system time = 0.28 seconds = 0.00 minutes; total time = 2 seconds = 0.03 minutes. **\* tstart() called on node5-027-06; **\* at Fri Jan 8 13:56:55 2016.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:8161,Energy,Energy,8161,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['Energy'],['Energy']
Energy Efficiency,"2rdm = -103.086205379481. > psi4.energy('v2rdm-casscf', molecule=n2). /home/je714/psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py:741:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /home/je714/psi4conda/lib/python3.5/site-packages/psi4/driver/driver.py:454: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name = 'v2rdm-casscf', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f8d89888e30>}; lowername = 'v2rdm-casscf', optstash = <psi4.driver.p4util.optproc.OptionsState object at 0x7f8d89888470>; ref_wfn = <psi4.core.RHF object at 0x7f8d897e56d0>, filename = '', scf_type = 'CD'. def run_v2rdm_casscf(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; v2rdm_casscf can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('v2rdm_casscf'). """""". lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). optstash = p4util.OptionsState(; ['SCF', 'DF_INTS_IO']). core.set_local_option('SCF', 'DF_INTS_IO', 'SAVE'). # Your plugin's psi4 run sequence goes here; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = psi4.driver.scf_helper(name, **kwargs). # if restarting from a checkpoint file, this file; # needs to be in scratch with the correct name; filename = core.get_option(""V2RDM_CASSCF"",""RESTART_FROM_CHECKPOINT_FILE""). # todo PSIF_V2RDM_CHECKPOINT should be definied in psifiles.h; if ( filename != """" ):; molname = ref_wfn.molecule().name(); p4util.copy_file_to_scratch(filename,'psi',molname,269,False). # Ensure IWL files have been written when not using DF/CD; scf_type = core.get_option('SCF', 'SCF_TYPE'); if ( scf_type == 'PK' or scf_type == 'DIRECT' ):; proc_util.check_iwl_file_from_scf_type(core.get_option('SCF', 'SCF_TYPE'), ref_wfn). > returnva",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/710:4443,energy,energy,4443,https://psicode.org,https://github.com/psi4/psi4/issues/710,1,['energy'],['energy']
Energy Efficiency,"3,10) = 8.354935	 4.421241; 	 R(3,59) = 7.403642	 3.917839; 	 R(26,42) = 9.688168	 5.126758; 	 R(27,42) = 9.474505	 5.013692; 	 R(27,43) = 7.412528	 3.922541; 	 R(31,42) = 9.020000	 4.773179; 	 R(36,42) = 9.995549	 5.289417; 	 R(38,42) = 7.990790	 4.228544; 	 R(38,48) = 6.850401	 3.625076; 	 R(40,42) = 7.393607	 3.912528; 	 R(40,43) = 7.486021	 3.961431; 	 R(43,51) = 8.319137	 4.402298. 	Current energy : -3922.0645401701. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1. 	Determining step-restricting scale parameter for RS-RFO.; 	Maximum step size allowed 0.50000. 	 Iter |step| alpha rfo_root ; 	------------------------------------------------; 	 0 0.83062 1.00000 1; 	 1 0.62444 1.92936 1; 	 2 0.52908 2.80267 1; 	 3 0.50229 3.14703 1; 	 4 0.50002 3.17893 1; 	 5 0.50000 3.17916 1; 	------------------------------------------------; 	Norm of target step-size 0.50000; 	Projected energy change by RFO approximation: -0.2098497469. 	Back-transformation to cartesian coordinates...; 	Could not converge backtransformation.; 	Using first guess instead. 	--- Internal Coordinate Step in ANG or DEG, aJ/ANG or AJ/DEG ---; 	 ---------------------------------------------------------------------------; 	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 2.335710 0.090136 63.980301 66.316011; 	 2 R(1,3) = 2.326476 0.109678 63.375593 65.702069; 	 3 R(1,4) = 2.007516 0.188032 51.365464 53.372981; 	 4 R(1,7) = 2.016049 0.114287 51.538366 53.554415; 	 5 R(4,5) = 1.384412 -0.275784 46.225609 47.610021; 	 6 R(4,13) = 1.412329 -0.576035 19.811852 21.224182; 	 7 R(5,6) = 1.038942 -0.187283 12.792781 13.831723; 	 8 R(5,10) = 1.416684 -0.377534 28.841613 30.258297; 	 9 R(7,8) = 1.376927 -0.247751 46.770531 48.147458; 	 10 R(7,29) = 1.458156 -0.535463 11.368978 12.827134; 	 11 R(8,9) = 1.022473 -0.080776 17.987589 19.010062; 	 12 R(8,26) = 1.399864 -0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921:18696,energy,energy,18696,https://psicode.org,https://github.com/psi4/psi4/issues/1921,1,['energy'],['energy']
Energy Efficiency,"30 ; 189A 2.047832 190A 2.054449 191A 2.063391 ; 192A 2.073995 193A 2.089810 194A 2.098059 ; 195A 2.119505 196A 2.136885 197A 2.139951 ; 198A 2.143625 199A 2.144516 200A 2.149966 ; 201A 2.153416 202A 2.160845 203A 2.177753 ; 204A 2.193917 205A 2.249401 206A 2.259315 ; 207A 2.260884 208A 2.264073 209A 2.270343 ; 210A 2.290240 211A 2.296245 212A 2.304338 ; 213A 2.316737 214A 2.379290 215A 2.453589 ; 216A 2.461743 217A 2.495632 218A 2.498678 ; 219A 2.519294 220A 2.562708 221A 2.608244 ; 222A 2.726412 223A 2.739216 224A 2.753717 ; 225A 2.766537 226A 2.769494 227A 2.781755 ; 228A 2.786035 229A 2.802889 230A 2.877816 ; 231A 2.934217 232A 2.946283 233A 2.971176 ; 234A 2.978125 235A 3.021450 236A 3.025068 ; 237A 3.055308 238A 3.105407 239A 3.192416 ; 240A 3.230170 241A 3.237091 242A 3.270263 ; 243A 3.501427 244A 3.509120 245A 3.988816 ; 246A 4.002956 . Final Occupation by Irrep:; A ; DOCC [ 47 ]; ```. Energy converged. @RHF Final Energy: -535.97469065986820. => Energetics <=. ```; Nuclear Repulsion Energy = 697.1131782964378090; One-Electron Energy = -2106.2189353611356637; Two-Electron Energy = 873.1310664048263561; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; Total Energy = -535.9746906598714986; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density density matrix; Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on shukla-pc.localdomain at Thu Oct 9 10:48:21 2014; Module time:; user time = 515.17 seconds = 8.59 minutes; system time = 10.04 seconds = 0.17 minutes; total time = 527 seconds = 8.78 minutes; Total time:; user time = 515.17 seconds = 8.59 minutes; system",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61:13747,Energy,Energy,13747,https://psicode.org,https://github.com/psi4/psi4/issues/61,1,['Energy'],['Energy']
Energy Efficiency,"30 ; 189A 2.047832 190A 2.054449 191A 2.063391 ; 192A 2.073995 193A 2.089810 194A 2.098059 ; 195A 2.119505 196A 2.136885 197A 2.139951 ; 198A 2.143625 199A 2.144516 200A 2.149966 ; 201A 2.153416 202A 2.160845 203A 2.177753 ; 204A 2.193917 205A 2.249401 206A 2.259315 ; 207A 2.260884 208A 2.264073 209A 2.270343 ; 210A 2.290240 211A 2.296245 212A 2.304338 ; 213A 2.316737 214A 2.379290 215A 2.453589 ; 216A 2.461743 217A 2.495632 218A 2.498678 ; 219A 2.519294 220A 2.562708 221A 2.608244 ; 222A 2.726412 223A 2.739216 224A 2.753717 ; 225A 2.766537 226A 2.769494 227A 2.781755 ; 228A 2.786035 229A 2.802889 230A 2.877816 ; 231A 2.934217 232A 2.946283 233A 2.971176 ; 234A 2.978125 235A 3.021450 236A 3.025068 ; 237A 3.055308 238A 3.105407 239A 3.192416 ; 240A 3.230170 241A 3.237091 242A 3.270263 ; 243A 3.501427 244A 3.509120 245A 3.988816 ; 246A 4.002956 . Final Occupation by Irrep:; A ; DOCC [ 47 ]; ```. Energy converged. @RHF Final Energy: -535.97469065986911. => Energetics <=. ```; Nuclear Repulsion Energy = 697.1131782964378090; One-Electron Energy = -2106.2189353611738625; Two-Electron Energy = 873.1310664048628496; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; Total Energy = -535.9746906598732039; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density density matrix; Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on shukla-pc.localdomain at Thu Oct 16 11:16:51 2014; Module time:; user time = 522.41 seconds = 8.71 minutes; system time = 15.59 seconds = 0.26 minutes; total time = 594 seconds = 9.90 minutes; Total time:; user time = 522.41 seconds = 8.71 minutes; syste",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:12375,Energy,Energy,12375,https://psicode.org,https://github.com/psi4/psi4/issues/62,1,['Energy'],['Energy']
Energy Efficiency,"30; C -2.336629447328 -0.701769032022 -1.209473831407 12.000000000000; C -1.177199447328 -0.351139032022 -0.612463831407 12.000000000000; C -0.119169447328 -0.031909032022 -0.066563831407 12.000000000000; C 1.038150552672 0.314670967978 0.533526168593 12.000000000000; C 2.088230552672 0.627260967978 1.081186168593 12.000000000000; C 3.329350552672 0.995630967978 1.729406168593 12.000000000000; H 3.940040552672 1.640920967978 1.078936168593 1.007825032230; H 3.139820552672 1.543830967978 2.665426168593 1.007825032230; H 3.926960552672 0.104360967978 1.976426168593 1.007825032230. Running in c1 symmetry. Rotational constants: A = 5.27900 B = 0.02592 C = 0.02592 [cm^-1]; Rotational constants: A = 158260.38795 B = 777.17946 C = 777.17689 [MHz]; Nuclear repulsion = 93.454945691663795. Charge = 0; Multiplicity = 1; Electrons = 32; Nalpha = 16; Nbeta = 16. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: VDZP; Blend: VDZP; Number of shells: 47; Number of basis functions: 111; Number of Cartesian functions: 118; Spherical Harmonics?: true; Max angular momentum: 2. Core potential: VDZP; Number of shells: 28; Number of ECP primitives: 28; Number of ECP core electrons: 14; Max angular momentum: 3. ==> DFT Potential <==. => LibXC <=. Version 6.2.2; S. Lehtola, C. Steigemann, M. J.T. Oliveira, and M. A.L. Marques., SoftwareX 7, 1–5 (2018) (10.1016/j.softx.2017.11.002). => Composite Functional: WB97X3C <= . wB97X basied 3C composite method with a small basis set, gCP and D4 (10.1063/5.0133026); M. Muller, A. Hansen, S. Grimme, J. Chem. Phys. 158, 014103 (2023). Deriv = 1; GGA = TRUE; Meta = FALSE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange-Correlation Functionals <=. 1.0000 wB97X-V range-separated functional. => Exact (HF) Exchange <=. 0.8330 HF,LR [omega = 0.3000]; 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:20189,Energy,Energy,20189,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"3150155297872; CI ROOT 3 TOTAL ENERGY:-99.52581092386518; CI ROOT 4 TOTAL ENERGY:-99.52581092379563; CI ROOT 5 TOTAL ENERGY:-99.5096013650753; CI ROOT 6 TOTAL ENERGY:-99.48378441050741; ````; this result doesn't change with or without frozen core, but the results are fine with STO-3G, as well as water with 6-31G*. the results also match GAMESS if I perturb the linear geometry of LiCN, as suggested by @psi-rking , which suggests maybe an issue with finding roots of whatever symmetry the first excited state is; however, adding more roots (or running with/without symmetry) doesn't resolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems to converge in just one step for c1 and c2v. I suppose it's possible the guess space just isn't grabbing roots for all symmetries, but increasing the number of roots to 30 doesn't change the results. perhaps more disturbing, though, is that the in-core diagonization routine `RSP` gives yet another set of results:; ```; Psi4 LiCN/6-31G* (symmetry c1, RSP solver); CI ROOT 1 TOTAL ENERGY:-99.58887523722994; CI ROOT 2 TOTAL ENERGY:-99.56069933848028; CI ROOT 3 TOTAL ENERGY:-99.56069933848008; CI ROOT 4 TOTAL ENERGY:-99.53483755106353; CI ROOT 5 TOTAL ENERGY:-99.53483755106343; CI ROOT 6 TOTAL ENERGY:-99.53418772103414; ```; here, we find 3 roots lower in energy than either GAMESS or the default Psi4 routines, and we also recover the -99.534837 E_h root, but this time as a doubly-degenerate state. the other routines mentioned in [the manual; ](https://psicode.org/psi4manual/master/autodoc_glossar",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:1916,ENERGY,ENERGY,1916,https://psicode.org,https://github.com/psi4/psi4/issues/3083,1,['ENERGY'],['ENERGY']
Energy Efficiency,"3267; #20 0x00006a91c388fed2 in PyEval_EvalCode (co=<optimized out>, globals=<optimized out>, locals=<optimized out>) at Python/ceval.c:669; #21 0x00006a91c38ae38c in run_mod (arena=0x93cee40, flags=<optimized out>, locals=0x6a91c4610d70, globals=0x6a91c4610d70, filename=0x6a91c38de42d ""<string>"", mod=<optimized out>) at Python/pythonrun.c:1371; #22 PyRun_StringFlags (. ```; str=0x92f8a04 ""from psi4 import *\nfrom p4const import *\nfrom p4util import *\nfrom molutil import *\nfrom aliases import *\npsi4_io = psi4.IOManager.shared_object()\npsi4.efp_init()\npsi4_io.set_default_path(\""/app/scienc""..., ; start=257, globals=0x6a91c4610d70, locals=0x6a91c4610d70, flags=<optimized out>) at Python/pythonrun.c:1334; ```; #23 0x000000000555a8aa in boost::python::exec(boost::python::str, boost::python::api::object, boost::python::api::object) (); #24 0x0000000000a67f25 in psi::Python::run(_IO_FILE*) (); #25 0x00000000009937e0 in main (). (gdb) . the input file:. memory 2500 mb. molecule struct {; symmetry c1; no_reorient #; no_com # whether to move the origin to the center of masses; units angstrom; 0 1 ; C 0.008240 0.001327 0.000310; C 1.553694 0.001373 0.000036; N -0.700795 -1.157242 -0.001319; N -2.008585 -1.428031 0.002174; N -0.699812 1.158389 -0.000832; N -2.008322 1.432822 0.001677; N 2.267238 1.156444 -0.001011; N 3.565803 1.436891 0.001896; N 2.266013 -1.155613 -0.000583; N 3.563003 -1.435099 0.001415; B -1.131831 -2.605160 -0.011643; B -1.129410 2.608511 -0.010295; B 2.669048 -2.603366 -0.007508; B 2.671738 2.604971 -0.007555; }. set {; basis 6-31G*; # Do use pure angular momentum basis functions?; # PUREAM false. # SCF_TYPE DIRECT # An out-of-core, presorted algorithm using exact ERIs. # MOLDEN_WRITE true. }. optimize('scf', dertype='energy'). psi4 is installed through miniconda:. [root@titan3 2]# find /app/ -name psi4 -type f; /app/miniconda/pkgs/psi4-0.2.54-py27_gf997694/bin/psi4; /app/miniconda/bin/psi4; [root@titan3 2]# /app/miniconda/bin/psi4 --version; 0.2.54",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153:5072,energy,energy,5072,https://psicode.org,https://github.com/psi4/psi4/issues/153,1,['energy'],['energy']
Energy Efficiency,"3391 ; 192A 2.073995 193A 2.089810 194A 2.098059 ; 195A 2.119505 196A 2.136885 197A 2.139951 ; 198A 2.143625 199A 2.144516 200A 2.149966 ; 201A 2.153416 202A 2.160845 203A 2.177753 ; 204A 2.193917 205A 2.249401 206A 2.259315 ; 207A 2.260884 208A 2.264073 209A 2.270343 ; 210A 2.290240 211A 2.296245 212A 2.304338 ; 213A 2.316737 214A 2.379290 215A 2.453589 ; 216A 2.461743 217A 2.495632 218A 2.498678 ; 219A 2.519294 220A 2.562708 221A 2.608244 ; 222A 2.726412 223A 2.739216 224A 2.753717 ; 225A 2.766537 226A 2.769494 227A 2.781755 ; 228A 2.786035 229A 2.802889 230A 2.877816 ; 231A 2.934217 232A 2.946283 233A 2.971176 ; 234A 2.978125 235A 3.021450 236A 3.025068 ; 237A 3.055308 238A 3.105407 239A 3.192416 ; 240A 3.230170 241A 3.237091 242A 3.270263 ; 243A 3.501427 244A 3.509120 245A 3.988816 ; 246A 4.002956 . Final Occupation by Irrep:; A ; DOCC [ 47 ]; ```. Energy converged. @RHF Final Energy: -535.97469065986820. => Energetics <=. ```; Nuclear Repulsion Energy = 697.1131782964378090; One-Electron Energy = -2106.2189353611356637; Two-Electron Energy = 873.1310664048263561; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; Total Energy = -535.9746906598714986; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density density matrix; Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on shukla-pc.localdomain at Thu Oct 9 10:48:21 2014; Module time:; user time = 515.17 seconds = 8.59 minutes; system time = 10.04 seconds = 0.17 minutes; total time = 527 seconds = 8.78 minutes; Total time:; user time = 515.17 seconds = 8.59 minutes; system time = 10.04 seconds = 0.17 minutes; tot",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61:13791,Energy,Energy,13791,https://psicode.org,https://github.com/psi4/psi4/issues/61,1,['Energy'],['Energy']
Energy Efficiency,"3391 ; 192A 2.073995 193A 2.089810 194A 2.098059 ; 195A 2.119505 196A 2.136885 197A 2.139951 ; 198A 2.143625 199A 2.144516 200A 2.149966 ; 201A 2.153416 202A 2.160845 203A 2.177753 ; 204A 2.193917 205A 2.249401 206A 2.259315 ; 207A 2.260884 208A 2.264073 209A 2.270343 ; 210A 2.290240 211A 2.296245 212A 2.304338 ; 213A 2.316737 214A 2.379290 215A 2.453589 ; 216A 2.461743 217A 2.495632 218A 2.498678 ; 219A 2.519294 220A 2.562708 221A 2.608244 ; 222A 2.726412 223A 2.739216 224A 2.753717 ; 225A 2.766537 226A 2.769494 227A 2.781755 ; 228A 2.786035 229A 2.802889 230A 2.877816 ; 231A 2.934217 232A 2.946283 233A 2.971176 ; 234A 2.978125 235A 3.021450 236A 3.025068 ; 237A 3.055308 238A 3.105407 239A 3.192416 ; 240A 3.230170 241A 3.237091 242A 3.270263 ; 243A 3.501427 244A 3.509120 245A 3.988816 ; 246A 4.002956 . Final Occupation by Irrep:; A ; DOCC [ 47 ]; ```. Energy converged. @RHF Final Energy: -535.97469065986911. => Energetics <=. ```; Nuclear Repulsion Energy = 697.1131782964378090; One-Electron Energy = -2106.2189353611738625; Two-Electron Energy = 873.1310664048628496; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; Total Energy = -535.9746906598732039; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density density matrix; Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on shukla-pc.localdomain at Thu Oct 16 11:16:51 2014; Module time:; user time = 522.41 seconds = 8.71 minutes; system time = 15.59 seconds = 0.26 minutes; total time = 594 seconds = 9.90 minutes; Total time:; user time = 522.41 seconds = 8.71 minutes; system time = 15.59 seconds = 0.26 minutes; to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:12419,Energy,Energy,12419,https://psicode.org,https://github.com/psi4/psi4/issues/62,1,['Energy'],['Energy']
Energy Efficiency,"34.593 cal/mol-K (mol. weight = 18.0106); - Rotational = 10.668 cal/mol-K (symmetry # = 2); - Vibrational = 0.014 cal/mol-K; ```. Q-Chem Input. ```; $molecule; 0 1; O 0.00000000 0.00000000 0.00000000; H 0.00000000 1.93042809 -1.10715266; H 0.00000000 -1.93042809 -1.10715266; $end. $rem; INPUT_BOHR true; BASIS STO-3G; JOBTYPE opt; METHOD hf; $end. @@@. $molecule; read; $end. $rem; INPUT_BOHR true; BASIS STO-3G; JOBTYPE freq; METHOD hf; SCF_GUESS read; ISOTOPES 1; VIBMAN_PRINT 4; THRESH 12; SCF_CONVERGENCE 7; !SYM_IGNORE TRUE; !SYMMETRY FALSE; MEM_TOTAL 1600; MEM_STATIC 512; INTEGRALS_BUFFER 512; MAX_SCF_CYCLES 200; $end. $isotopes; 3 0 ! three loops, both at std temp and pressure; 2; 2 2.014101779; 3 2.014101779; 1; 2 2.014101779; 2; 2 2.014101779; 3 3.01604927; $end; ```. Molpro Input. ```; ***,HCl; memory,100,M; geomtyp=zmat; geometry; O,, 0.00000000 , 0.00000000 , 0.00000000; H2,, 0.00000000 , 1.93042809 , -1.10715266; H3,, 0.00000000 , -1.93042809 , -1.10715266; end. basis=sto-3g; GTHRESH,energy=1.d-8. {HF}; {OPTG}. {frequencies,analytic; thermo,; print,thermo}. mass,init,H=2.014101779,O=15.994914619560; {frequencies,analytic; thermo,; print,thermo}. mass,init,O=15.994914619560,H2=2.014101779,H3=1.007825032070; {frequencies,analytic; thermo,; print,thermo}. mass,init,O=15.994914619560,H2=2.014101779,H3=3.01604927; {frequencies,analytic; thermo,; print,thermo}; ```. NW-Chem Input. ```; start h2o; title Water . memory total 1600 mb noverify. geometry units au autosym; O 0.00000000 0.00000000 0.00000000; H 0.00000000 1.93042809 -1.10715266; H 0.00000000 -1.93042809 -1.10715266; end; basis noprint; H library sto-3g ; O library sto-3g; end; scf; thresh 1e-6; end; driver; tight; end; task scf optimize. scf; thresh 1e-8; print none; end; task scf freq . freq; reuse; temp 4 298.15 300.0 350.0 400.0; end; task scf freq. freq ; reuse; mass H 2.014101779; temp 1 298.15; end; task scf freq. freq; reuse; mass 2 2.014101779; end; task scf freq. freq; reuse; mass 2 2.014101779 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/345:7647,energy,energy,7647,https://psicode.org,https://github.com/psi4/psi4/issues/345,1,['energy'],['energy']
Energy Efficiency,"3580 17A 0.360176 18A 0.370157; 19A 0.370158 20A 0.455135 21A 0.455137; 22A 0.543892 23A 0.571369 24A 0.610757; 25A 0.610759 26A 0.613674 27A 0.623635; 28A 0.623637 29A 0.682101 30A 0.875957; 31A 1.031832 32A 1.031833 33A 1.292103; 34A 1.292104 35A 1.442476 36A 1.448632; 37A 1.662612 38A 1.675074 39A 1.675078; 40A 1.685189 41A 1.685192 42A 1.745843; 43A 1.745846 44A 1.748838 45A 1.953626; 46A 1.953628 47A 2.104265 48A 2.256310; 49A 2.256312 50A 2.286838 51A 2.457344; 52A 2.457345 53A 2.522627 54A 2.738613; 55A 2.803606 56A 2.803611 57A 2.896284; 58A 2.896288 59A 5.038202 60A 5.264241. Final Occupation by Irrep:; A; DOCC [ 9 ]; NA [ 9 ]; NB [ 9 ]. @DF-RKS Final Energy: -79.32647565991985. => Energetics <=. Nuclear Repulsion Energy = 42.0362430486042129; One-Electron Energy = -188.7935335064416904; Two-Electron Energy = 79.9597081286466675; DFT Exchange-Correlation Energy = -12.5288933307290371; Empirical Dispersion Energy = 0.0000000000000000; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -79.3264756599198506. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : 0.0000185 -0.0000189 -0.0000004; Dipole Y : -0.0000204 0.0000189 -0.0000015; Dipole Z : -0.0000155 0.0000189 0.0000034; Magnitude : 0.0000037. ------------------------------------------------------------------------------------. *** tstop() called on baldr at Tue Mar 28 17:20:52 2023; Module time:; user time = 6.85 seconds = 0.11 minutes; system time = 0.17 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Total time:; user time = 6.85 seconds = 0.11 minutes; system time = 0.17 second",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:8793,Energy,Energy,8793,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['Energy'],['Energy']
Energy Efficiency,364156 0.017183395493 -0.00012330		 CA 0.748527364156 0.017183395493 -0.00012330; 									 >; Running in c1 symmetry.							 Running in c1 symmetry.; 									 >; Rotational constants: A = 6.96289 B = 0.22986 C = 0		 Rotational constants: A = 6.96289 B = 0.22986 C = 0; Rotational constants: A = 208742.34059 B = 6890.97828 C = 6670		 Rotational constants: A = 208742.34059 B = 6890.97828 C = 6670; Nuclear repulsion = 0.000000000000000					 Nuclear repulsion = 0.000000000000000; 									 >; Charge = 2								 Charge = 2; Multiplicity = 1								 Multiplicity = 1; Electrons = 8								 Electrons = 8; Nalpha = 4								 Nalpha = 4; Nbeta = 4								 Nbeta = 4; 									 >; ==> Algorithm <==								 ==> Algorithm <==; 									 >; SCF Algorithm Type is DF.							 SCF Algorithm Type is DF.; DIIS enabled.									 DIIS enabled.; MOM disabled.									 MOM disabled.; Fractional occupation disabled.						 Fractional occupation disabled.; Guess Type is SAD.								 Guess Type is SAD.; Energy threshold = 1.00e-10							 Energy threshold = 1.00e-10; Density threshold = 1.00e-10							 Density threshold = 1.00e-10; Integral threshold = 1.00e-12							 Integral threshold = 1.00e-12; 									 >; ==> Primary Basis <==								 ==> Primary Basis <==; 									 >; Basis Set: LANL2DZ								 Basis Set: LANL2DZ; Blend: LANL2DZ								 Blend: LANL2DZ; Number of shells: 15							 Number of shells: 15; Number of basis functions: 25						 Number of basis functions: 25; Number of Cartesian functions: 25						 Number of Cartesian functions: 25; Spherical Harmonics?: false							 Spherical Harmonics?: false; Max angular momentum: 1							 Max angular momentum: 1; 									 >; Core potential: LANL2DZ							 Core potential: LANL2DZ; Number of shells: 3								 Number of shells: 3; Number of ECP primitives: 13						 Number of ECP primitives: 13; Number of ECP core electrons: 10						 Number of ECP core electrons: 10; Max angular momentum: 2							 Max angular momentum: 2; 									 >; => Loading,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3072:3144,Energy,Energy,3144,https://psicode.org,https://github.com/psi4/psi4/issues/3072,1,['Energy'],['Energy']
Energy Efficiency,"367 -0.372481393212; H 0.518565778818 -1.191478177535 -0.672179821662; units angstrom; no_reorient; no_com; symmetry c1; }; mol.update_geometry(); e, wf = energy('wb97m-v',return_wfn=True,)--------------------------------------------------------------------------. SETUP_PHASE; Threads set to 14 by Python driver. Scratch directory: [REMOVED]. *** tstart() called on [REMOVED]; *** at Fri Jul 22 13:16:33 2022. => Loading Basis Set <=. Name: DEF2-TZVPPD; Role: ORBITAL; Keyword: BASIS; atoms 1-6, 13-18 entry C line 144 file [REMOVED BASE DIRECTORY]/psi4/basis/def2-tzvppd.gbs ; atoms 7-12, 19-24 entry H line 14 file [REMOVED BASE DIRECTORY]/psi4/basis/def2-tzvppd.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 14 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; C -0.260781259973 -0.714012941782 1.022641061033 12.000000000000; C 0.448798235138 -0.584866555587 1.116392879147 12.000000000000; C 0.671191593804 0.158609920222 1.104026912627 12.000000000000; C 0.177969561551 0.681404978559 1.093307893756 12.000000000000; C -0.560580808895 0.542719215332 1.056079456761 12.000000000000; C -0.776583606603 -0.133446136243 1.103859872549 12.000000000000; H -0.442720873003 -1.244238976392 0.982141695030 1.007825032230; H 0.874512929539 -0.960390442589 1.119149924166 1.007825032230; H 1.217460053606 0.336381670040 1.046181387539 1.007825032230; H 0.335297687566 1.281777775821 0.982193856028 1.007825032230; H -0.948519039798 0.925731991759 1.117846063269 1.007825032230; H -1.420111450991 -0.227880344246 1.099752848840 1.007825032230; C -0.431336419082 -0.578608087844 -1.006105897774 12.000000000000; C -0.616450380987 0.16455",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641:6238,charge,charge,6238,https://psicode.org,https://github.com/psi4/psi4/issues/2641,1,['charge'],['charge']
Energy Efficiency,"378 6A 0.063621 7A 0.068900 ; 8A 0.068900 9A 0.086764 10A 0.103920 ; 11A 0.198954 12A 0.198954 13A 0.208977 ; 14A 0.208977 15A 0.256823 16A 0.270230 ; 17A 0.318044 18A 0.318044 19A 0.402166 ; 20A 0.450346 21A 0.450346 22A 0.540514 ; 23A 0.606544 24A 0.606544 25A 0.613724 ; 26A 0.613724 27A 0.838452 28A 1.281252 ; 29A 1.826605 30A 1.826605 31A 1.850798 ; 32A 4.179388 . Beta Occupied: . . Beta Virtual: . 1A 0.006309 2A 0.013514 3A 0.013821 ; 4A 0.013821 5A 0.037931 6A 0.065570 ; 7A 0.070561 8A 0.070561 9A 0.090473 ; 10A 0.171679 11A 0.207466 12A 0.207466 ; 13A 0.209492 14A 0.209492 15A 0.257933 ; 16A 0.287508 17A 0.331720 18A 0.331720 ; 19A 0.427501 20A 0.478623 21A 0.478623 ; 22A 0.598357 23A 0.612674 24A 0.612674 ; 25A 0.614564 26A 0.614564 27A 0.921140 ; 28A 1.322779 29A 1.926318 30A 1.926318 ; 31A 1.947876 32A 4.183965 . Final Occupation by Irrep:; A ; DOCC [ 0 ]; SOCC [ 1 ]. @DF-UHF Final Energy: -0.49935164423756. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -0.4993516442375593; Two-Electron Energy = 0.0000000000000000; Total Energy = -0.4993516442375593. UHF NO Occupations:; HONO-0 : 1 A 1.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 1.8897. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: -0.0000 Z: -1.8895. Dipole Moment: [e a0]; X: 0.0000 Y: -0.0000 Z: 0.0002 Total: 0.0002. Dipole Moment: [D]; X: 0.0000 Y: -0.0000 Z: 0.0006 Total: 0.0006. *** tstop() called on filip-ThinkPad-E495 at Wed Mar 4 16:29:33 2020; Module time:; 	user time = 0.55 seconds = 0.01 minutes; 	system time = 0.01 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 1.79 seconds = 0.03 minutes; 	system time = 0.07 seconds = 0.00 minutes; 	total time = 2 seconds = 0.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:10728,Energy,Energy,10728,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Energy'],['Energy']
Energy Efficiency,"4350 46A 0.504767 ; 47A 0.605740 48A 0.607010 49A 0.653648 ; 50A 0.665432 51A 0.712798 52A 0.728207 ; 53A 0.728722 54A 0.731604 55A 0.750409 ; 56A 0.785076 57A 0.814891 58A 0.822500 ; 59A 0.837421 60A 0.837786 61A 0.896368 ; 62A 0.911715 63A 0.939819 64A 1.013440 ; 65A 1.043686 66A 1.043717 67A 1.079379 ; 68A 1.110213 69A 1.243320 70A 1.248770 ; 71A 1.249096 72A 1.325143 73A 1.325198 ; 74A 1.395025 75A 1.397495 76A 1.442305 ; 77A 1.442695 78A 1.456897 79A 1.504332 ; 80A 1.639667 81A 1.641352 82A 1.668110 ; 83A 1.705574 84A 1.784410 85A 1.840841 ; 86A 1.841701 87A 1.932164 88A 2.090833 ; 89A 2.093816 90A 2.132735 91A 2.154837 ; 92A 2.180250 93A 2.253444 94A 2.481160 ; 95A 2.481328 96A 2.496342 97A 2.793920 ; 98A 2.848632 99A 2.969349 100A 2.969418 ; 101A 3.337134 102A 3.399821 103A 3.400315 ; 104A 3.528082 105A 4.155988 106A 5.476938 ; 107A 5.786400 108A 6.199146 109A 7.337445 ; 110A 8.481836 111A 8.867663 . Final Occupation by Irrep:; A ; DOCC [ 16 ]; NA [ 16 ]; NB [ 16 ]. @DF-RKS Final Energy: -43.40748214051649. => Energetics <=. Nuclear Repulsion Energy = 93.7538801503397679; One-Electron Energy = -245.6257702779177521; Two-Electron Energy = 115.6223560816475100; DFT Exchange-Correlation Energy = -7.1485657255274635; Empirical Dispersion Energy = -0.0093823690585561; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -43.4074821405164926. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : -0.0030364 0.0030278 -0.0000086; Dipole Y : 0.0588791 -0.0477754 0.0111036; Dipole Z : -0.0335702 0.0272773 -0.0062929; Magnitude : 0.0127629. -------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:13718,Energy,Energy,13718,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"45080702229581 -2.23110e-12 2.66726e-07 DIIS; @RHF iter 16: -99.45080702230226 -6.45173e-12 5.58591e-09 DIIS. ==> Post-Iterations <==. ```; Orbital Energies (a.u.); -----------------------. Doubly Occupied:. 1Ag -25.833682 2Ag -1.076019 1B3u -0.180947; 1B2u -0.180947 1B1u -0.180947. Virtual:. 2B2u 0.442532 2B3u 0.442532 2B1u 0.442532; 3Ag 0.485648 4Ag 1.228480 1B3g 1.228480; 5Ag 1.228480 1B2g 1.228480 1B1g 1.228480; 3B3u 1.526002 3B2u 1.526002 3B1u 1.526002; 6Ag 2.051155 7Ag 3.283338 2B2g 3.283338; 2B3g 3.283338 2B1g 3.283338 8Ag 3.283338; 4B2u 3.331721 4B3u 3.331721 1Au 3.331721; 4B1u 3.331721 5B3u 3.331721 5B2u 3.331721; 5B1u 3.331721 6B2u 5.672254 6B1u 5.672254; 6B3u 5.672254 7B1u 9.267994 7B2u 9.267994; 7B3u 9.267994 8B1u 9.267994 8B3u 9.267994; 2Au 9.267994 8B2u 9.267994 9Ag 9.745165; 3B2g 9.745165 3B1g 9.745165 3B3g 9.745165; 10Ag 9.745165 11Ag 10.965644. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; ```. Energy converged. @RHF Final Energy: -99.45080702230226. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -143.9965313656634294; Two-Electron Energy = 44.5457243433611438; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -99.4508070223022855. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-06 at Fri Jan 8 13:56:55 2016; Module tim",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:7821,Energy,Energy,7821,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['Energy'],['Energy']
Energy Efficiency,"46023368835449; C -2.3128416538238525 -2.9721903800964355 0.626854419708252; O -2.283581256866455 -2.8034048080444336 1.8416125774383545; C -3.1216139793395996 -4.092474460601807 0.022369852289557457; H -2.5071558952331543 -4.992997646331787 -0.06683211773633957; H -3.9806551933288574 -4.315130233764648 0.6616312265396118; H -3.4815473556518555 -3.7952513694763184 -0.9667707681655884; H -1.818267822265625 -2.5147225856781006 -1.3233563899993896; C -0.2652755677700043 -0.47430306673049927 -1.2846300601959229; C 0.5650341510772705 0.6324429512023926 -1.1073341369628906; H 1.0022953748703003 1.1210383176803589 -1.9738258123397827; H -0.46503451466560364 -0.8350303173065186 -2.2904675006866455; H -0.9999359846115112 -1.117483139038086 1.977584958076477; H 0.46812179684638977 0.8390328884124756 2.2878639698028564; H 1.9390827417373657 2.4920878410339355 -0.5236388444900513""""""); molecule.set_molecular_charge(0); molecule.set_multiplicity(1); psi4.set_options({""reference"":""uhf""}). print(""calculate energy...""); energy, wfn = psi4.energy(""HF3c/"", return_wfn=True); print(""converting energy ...""); kcal_energy = energy * psi4.constants.hartree2kcalmol; print(""energy {:.2f} kcal/mol"".format(kcal_energy)); ```; Specifically the output I get is ; ```; set output file path; create molecule...; calculate energy...; Segmentation fault: 11; ```; I tried to attach the .dat file, but github wouldn't let me, but this is end of it:; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: MINIX; Blend: MINIX; Number of shells: 42; Number of basis functions: 64; Number of Cartesian functions: 64; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (MINIX AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 8 entry O line 318 file /Users/cbannan/miniconda3/envs/bab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593:2499,energy,energy,2499,https://psicode.org,https://github.com/psi4/psi4/issues/2593,1,['energy'],['energy']
Energy Efficiency,"4; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; ________________________________________________________________ test_psi4_basic _________________________________________________________________. def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); > psi4.energy('scf'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:15: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4ccd780>, functional = None. def scf_wavefunction_facto",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:21849,energy,energy,21849,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; Alpha-Alpha Contribution (a.u.) : -0.02415964277065; Alpha-Beta Contribution (a.u.) : -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimized now.; 	Transforming MOs to the semicanonical basis... ; Switching to the standard DF-MP2 computation... ; ```; are present in the reference output file but not in the output file that I posted. This is due to the if clause [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2648), which requires `std::fabs(DE) >= tol_Eod`, i.e., that the observed delta E is _greater ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509:2756,Energy,Energy,2756,https://psicode.org,https://github.com/psi4/psi4/issues/1509,1,['Energy'],['Energy']
Energy Efficiency,"50 0.05113530 -0.00508959 -0.00643364 0.02754243. # reference optimized NRE, E (G should be 0). nre_opt = 37.5276022922 # Q-Chem; e_opt = -139.5573922 # Q-Chem; #norm_g_opt # Q-Chem; # Full Analytical Gradient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 0.00000025 -0.00000001 -0.00000021 -0.00000007 0.00000005; # 2 0.00000010 0.00000008 0.00000000 0.00000001 -0.00000020; # 3 0.00000038 -0.00000005 -0.00000006 -0.00000023 -0.00000003. def test_norm_start(mol):; g0 = gradient('mp2', molecule=mol); compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(norm_g_start, g0, 3, 'start grad'). def test_zero_grad(mol):; e, wfn = optimize('mp2', return_wfn=True, molecule=mol); g = wfn.gradient(); g.print_out(); compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); compare_matrices(zerograd, g, 3, 'opt ZERO grad'). def test_odd_start(mol):; g0 = gradient('mp2', molecule=mol); compare_values(odd_nre_start, mol.nuclear_repulsion_energy(), 1, 'start nre'); compare_values(odd_e_start, get_variable('CURRENT ENERGY'), 3, 'start ene'); compare_values(odd_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(odd_g_start, g0, 3, 'start grad'). def test_badodd_grad(mol):; e, wfn = optimize('mp2', return_wfn=True, molecule=mol); g = wfn.gradient(); g.print_out(); compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); compare_values(odd_rmsg_opt, g.rms(), 4, 'opt grad nogood'). test_norm_start(normz); test_zero_grad(normz). # And behold, the initial gradient matches Q-Chem, the optimization; # progresses nicely, the RMS Force column goes to zero, and the gradient; # at the end is zero. # start nre...................",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:2507,ENERGY,ENERGY,2507,https://psicode.org,https://github.com/psi4/psi4/issues/310,1,['ENERGY'],['ENERGY']
Energy Efficiency,"5000 1.241852000 8.156885000; H 1.485477000 1.176688000 9.116348000; C 3.332840000 1.154673000 7.834922000; H 4.206519000 0.999649000 8.462845000; N 1.311649000 1.424993000 6.973626000; C 2.188563000 1.435214000 5.957752000; H 1.944614000 1.560136000 4.907488000; N 3.421451000 1.288054000 6.467033000; C 4.624491000 1.154329000 5.644658000; H 4.896627000 0.092348000 5.590783000; H 4.378873000 1.527036000 4.641881000; H 5.430033000 1.755038000 6.090598000; C -0.139438000 1.464529000 6.788437000; H -0.534567000 0.445964000 6.893963000; H -0.329914000 1.835298000 5.773051000; H -0.575851000 2.145114000 7.533419000; F 2.193639000 -1.420051000 6.719505000; B 1.853598000 -1.602720000 5.368653000; F 1.684676000 -2.933106000 5.022169000; F 2.887295000 -1.000476000 4.545917000; F 0.639066000 -0.856861000 5.091564000; }; set globals {; basis aug-cc-pVDZ; scf_type direct; freeze_core True; guess sad; basis_guess 3-21G; }; energy('mrccsd(t)_l'); ```. End of output. ```; *** tstart() called on r3584; *** at Mon Feb 17 12:17:52 2014. PSI4 interface to MRCC:; Generating inputs for CCSD(T)_L. Automatically determined settings:; method 4; exlevel 3; fullname CCSD(T)_L. Orbital Information:. Frozen Core [ 24]; Active DOCC [ 70]; SOCC [ 0]; Frozen Virtual [ 0]. Total MOs [ 690]. Beginning integral transformation.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 5; ```. Stderr. ```; iwl_buf_init: Can't open file 33; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""<string>"", line 72, in <module>; File ""/apps/psicode/4.0b5.1/share/psi/python/driver.py"", line 570, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/apps/psicode/4.0b5.1/share/psi/python/proc.py"", line 2111, in run_mrcc; psi4.mrcc_generate_input(level); RuntimeError: PSIO Error; file: /short/z00/cyl900/psi4/psi4public/src/lib/libpsio/error.cc; line: 116; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/35:2720,energy,energy,2720,https://psicode.org,https://github.com/psi4/psi4/issues/35,2,['energy'],['energy']
Energy Efficiency,"500000000 4.875900000000 1.007825032230; Gh(H) -2.166320000000 1.418620000000 4.287130000000 1.007825032230; O 0.000000000000 0.000000000000 0.000000000000 15.994914619570; C -0.674790000000 0.413410000000 -1.014660000000 12.000000000000; O -0.876150000000 -0.422220000000 -1.962070000000 15.994914619570; C -1.218230000000 1.795570000000 -1.102840000000 12.000000000000; C -0.617450000000 2.829000000000 -0.078430000000 12.000000000000; H -1.104200000000 2.217060000000 -2.120090000000 1.007825032230; H -2.301610000000 1.731300000000 -0.884660000000 1.007825032230; H 0.469200000000 2.991870000000 -0.174780000000 1.007825032230; H -0.844090000000 2.579870000000 0.971890000000 1.007825032230; H -1.138030000000 3.766160000000 -0.337930000000 1.007825032230. Running in c1 symmetry. Rotational constants: A = 0.06565 B = 0.02593 C = 0.02115 [cm^-1]; Rotational constants: A = 1968.08966 B = 777.38628 C = 634.17436 [MHz]; Nuclear repulsion = 166.614552089989843. Charge = -1; Multiplicity = 1; Electrons = 40; Nalpha = 20; Nbeta = 20. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: DEF2-TZVPPD; Blend: DEF2-TZVPPD; Number of shells: 130; Number of basis functions: 350; Number of Cartesian functions: 393; Spherical Harmonics?: true; Max angular momentum: 3. ==> DFT Potential <==. => LibXC <=. Version 6.0.0; S. Lehtola, C. Steigemann, M. J.T. Oliveira, and M. A.L. Marques., SoftwareX 7, 1\u20135 (2018) (10.1016/j.softx.2017.11.002). => Composite Functional: WB97M-V <= . wB97M-V Hyb-GGA Exchange-Correlation Functional. N. Mardirossian and M. Head-Gordon., J. Chem. Phys. 144, 214110 (2016) (10.1063/1.4952647). Deriv = 1; GGA = TRUE; Meta = TRUE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange-Correlation Functionals <=. 1.0000 wB97M-V exchange-correlation functional. => Exact",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051:4910,Charge,Charge,4910,https://psicode.org,https://github.com/psi4/psi4/issues/3051,1,['Charge'],['Charge']
Energy Efficiency,"512; - #2515; - #2518; - #2526 ; - #2530 ; - #2532; - #2536 ; - #2544. 59 changed files, and 3,408 additions and 1,885 deletions. c. loriab:recursive62; - #2552 ; - #2557; - [ ] #2516. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Create compute classes for nbody, CBS and findif; - [ ] Integrate QCArchive. ## Release Notes; - `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - python 3.8 requires pint 0.10; - add a logging file, presently `file.log` that currently is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351:1303,energy,energy,1303,https://psicode.org,https://github.com/psi4/psi4/pull/1351,2,['energy'],['energy']
Energy Efficiency,"530335 -0.8498671785; }. # g_convergence needs to be tight for IRCs:; set g_convergence gau_verytight. set {; basis dzp; opt_type irc; geom_maxiter 50; irc_direction backward; }. frequencies('scf'). # Lower point group from C2v to C2; h2o2.reset_point_group('c2'). energy = optimize('scf'). compare_values(-150.8200278868627, energy, 5, ""Energy of last IRC point"") #TEST; --------------------------------------------------------------------------; hessian() will perform analytic frequency computation.; There are an even number of electrons - assuming singlet.; Specify the multiplicity in the molecule input block. *** tstart() called on mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 256 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H -0.000000000000 0.980353033500 -0.849954236217 1.007825032070; O -0.000000000000 0.698854518800 0.053554843883 15.994914619560; O 0.000000000000 -0.698854518800 0.053554843883 15.994914619560; H 0.000000000000 -0.980353033500 -0.849954236217 1.007825032070. Running in c2v symmetry. Rotational constants: A = 10.89064 B = 0.95995 C = 0.88219 [cm^-1]; Rotational constants: A = 326493.09066 B = 28778.51563 C = 26447.33310 [MHz]; Nuclear repulsion = 37.887601626303692. Charge = 0; Multiplicity = 1; Electrons = 18; Nalpha = 9; Nbeta = 9. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: DZP; Number of shells: 20; Number of basis function: 42; Number of Cartes",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/463:2719,charge,charge,2719,https://psicode.org,https://github.com/psi4/psi4/issues/463,1,['charge'],['charge']
Energy Efficiency,"5315015582624; CI ROOT 2 TOTAL ENERGY:-99.53150155297872; CI ROOT 3 TOTAL ENERGY:-99.52581092386518; CI ROOT 4 TOTAL ENERGY:-99.52581092379563; CI ROOT 5 TOTAL ENERGY:-99.5096013650753; CI ROOT 6 TOTAL ENERGY:-99.48378441050741; ````; this result doesn't change with or without frozen core, but the results are fine with STO-3G, as well as water with 6-31G*. the results also match GAMESS if I perturb the linear geometry of LiCN, as suggested by @psi-rking , which suggests maybe an issue with finding roots of whatever symmetry the first excited state is; however, adding more roots (or running with/without symmetry) doesn't resolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems to converge in just one step for c1 and c2v. I suppose it's possible the guess space just isn't grabbing roots for all symmetries, but increasing the number of roots to 30 doesn't change the results. perhaps more disturbing, though, is that the in-core diagonization routine `RSP` gives yet another set of results:; ```; Psi4 LiCN/6-31G* (symmetry c1, RSP solver); CI ROOT 1 TOTAL ENERGY:-99.58887523722994; CI ROOT 2 TOTAL ENERGY:-99.56069933848028; CI ROOT 3 TOTAL ENERGY:-99.56069933848008; CI ROOT 4 TOTAL ENERGY:-99.53483755106353; CI ROOT 5 TOTAL ENERGY:-99.53483755106343; CI ROOT 6 TOTAL ENERGY:-99.53418772103414; ```; here, we find 3 roots lower in energy than either GAMESS or the default Psi4 routines, and we also recover the -99.534837 E_h root, but this time as a doubly-degenerate state. the other routines mentioned in [the manual; ](https://ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:1873,ENERGY,ENERGY,1873,https://psicode.org,https://github.com/psi4/psi4/issues/3083,1,['ENERGY'],['ENERGY']
Energy Efficiency,"57 14A -0.526703 15A -0.507419 ; 16A -0.419207 . Virtual: . 17A -0.218606 18A -0.112811 19A -0.091525 ; 20A 0.037195 21A 0.048637 22A 0.051338 ; 23A 0.054059 24A 0.105612 25A 0.106004 ; 26A 0.174431 27A 0.193680 28A 0.196900 ; ```. Not sure what ECP factors could be driving these issues, or how to fix this, but thought I should raise an issue. Here's all the input and output files:. Input file for H2C-C5-CH2:; ```; molecule {; C -2.556271805455 -0.181690364655 -0.026620796492 ; C -1.282011805455 -0.085620364655 -0.016410796492 ; C -0.000441805455 0.006819635345 -0.003870796492 ; C 1.281348194545 0.095909635345 0.010599203508 ; C 2.556298194545 0.180969635345 0.026599203508 ; C 3.872538194545 0.268679635345 0.044049203508 ; H 4.487898194545 -0.251640364655 -0.694370796492 ; H 4.393828194545 0.864729635345 0.797449203508; C -3.871661805455 -0.281870364655 -0.036170796492 ; H -4.492551805455 0.418709635345 -0.600540796492 ; H -4.386761805455 -1.069870364655 0.519199203508 ; }. energy(""wb97x-3c""); ```. Input file for heptatriyne:; ```; molecule {; C -3.385689447328 -1.019909032022 -1.749453831407 ; H -4.303799447328 -1.298729032022 -2.222123831407; C -2.336629447328 -0.701769032022 -1.209473831407 ; C -1.177199447328 -0.351139032022 -0.612463831407 ; C -0.119169447328 -0.031909032022 -0.066563831407 ; C 1.038150552672 0.314670967978 0.533526168593 ; C 2.088230552672 0.627260967978 1.081186168593; C 3.329350552672 0.995630967978 1.729406168593 ; H 3.940040552672 1.640920967978 1.078936168593 ; H 3.139820552672 1.543830967978 2.665426168593 ; H 3.926960552672 0.104360967978 1.976426168593 ; }. energy(""wb97x-3c""); ```. Output file for H2C-C5-CH2:; ```. -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 1.9.1 release. Git: Rev {} zzzzzzz . D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish,; M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio,; A. Alenaizan, A. M. Jame",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:2223,energy,energy,2223,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['energy'],['energy']
Energy Efficiency,"5929720968 34.968852682000; CL -8.649879121071 1.613320688080 0.245929720968 34.968852682000; NA -8.649879121071 4.433600688080 0.245929720968 22.989769282000; NA -11.470159121071 1.613320688080 0.245929720968 22.989769282000; CL -5.829599121071 -1.206959311920 0.245929720968 34.968852682000; CL -8.649879121071 -4.027239311920 0.245929720968 34.968852682000; NA -8.649879121071 -1.206959311920 0.245929720968 22.989769282000; NA -11.470159121071 -4.027239311920 0.245929720968 22.989769282000; CL -5.829599121071 -6.847519311920 0.245929720968 34.968852682000; CL -8.649879121071 -9.667799311920 0.245929720968 34.968852682000; NA -8.649879121071 -6.847519311920 0.245929720968 22.989769282000; NA -11.470159121071 -9.667799311920 0.245929720968 22.989769282000. Running in c1 symmetry. Rotational constants: A = 0.00022 B = 0.00019 C = 0.00010 [cm^-1]; Rotational constants: A = 6.52472 B = 5.74098 C = 3.08570 [MHz]; Nuclear repulsion = 33842.470608681665908. Charge = 0; Multiplicity = 1; Electrons = 1042; Nalpha = 521; Nbeta = 521. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: 6-31G; Blend: 6-31G; Number of shells: 586; Number of basis functions: 1058; Number of Cartesian functions: 1058; Spherical Harmonics?: false; Max angular momentum: 1. ==> DFT Potential <==. => LibXC <=. Version 5.2.3; S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018) (10.1016/j.softx.2017.11.002). => Composite Functional: B3LYP-D3ZERO <= . B3LYP-d3zero Hyb-GGA Exchange-Correlation Functional. P. J. Stephens, F. J. Devlin, C. F. Chabalowski, and M. J. Frisch, J. Phys. Chem. 98, 11623 (1994) (10.1021/j100096a001). Deriv = 1; GGA = TRUE; Meta = FALSE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange Functionals <=. 0.0800 Slater exchange; 0.7200 Becke 88. => Exa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709:17337,Charge,Charge,17337,https://psicode.org,https://github.com/psi4/psi4/issues/2709,1,['Charge'],['Charge']
Energy Efficiency,"59933 0.0707833845 3.2535115991; 	 0.0005829612 0.0007979689 -0.0000766467; 	 -0.0000438567 -0.0088149216 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686	 89.592600; 	 B(3,1,6) = 1.577586	 90.389033; 	 B(4,1,5) = 2.102739	 120.478052; 	 B(4,1,6) = 2.076003	 118.946205; 	 B(5,1,6) = 2.104437	 120.575361. 	Current energy : -2642.5785393886. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1.; 	Norm of target step-size 0.09446; 	Projected energy change by RFO approximation: -0.0037947424. 	Back-transformation to cartesian coordinates...; 	Could not converge backtransformation.; 	Using first guess instead. 	--- Internal Coordinate Step in ANG or DEG, aJ/ANG or AJ/DEG ---; 	 ---------------------------------------------------------------------------; 	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 2.124830 0.072797 0.020582 2.145412; 	 2 R(1,3) = 2.128962 0.068599 0.020146 2.149109; 	 3 R(1,4) = 2.024461 0.069553 17.524433 19.548895; 	 4 R(1,5) = 2.028397 0.066233 17.556204 19.584601; 	 5 R(1,6) = 2.024305 0.070720 17.517231 19.541535; 	 6 L(2,1,3) = 179.431194 0.000053 -1.744105 177.687089; 	 7 l(2,1,3) = 180.000000 -0.000770 0.000000 180.000000; 	 8 B(",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265:2162,energy,energy,2162,https://psicode.org,https://github.com/psi4/psi4/issues/1265,1,['energy'],['energy']
Energy Efficiency,"6 -0.179692 0.000000; O -1.493280 1.073689 0.000000; O -1.170435 -1.166590 0.000000; H -2.979488 -0.258829 0.000000; H -0.498833 1.107195 0.000000; --; 0 1; C 1.888896 0.179692 0.000000; O 1.493280 -1.073689 0.000000; O 1.170435 1.166590 0.000000; H 2.979488 0.258829 0.000000; H 0.498833 -1.107195 0.000000; units angstrom; no_reorient; """"""); ; psi4.set_options({; 'basis': 'cc-pvdz',; 'df_basis_scf': 'cc-pvdz-jkfit',; 'df_basis_mp2': 'cc-pvdz-ri',; # not necessary to specify df_basis* for most basis sets; 'scf_type': 'df',; 'guess': 'sad',; 'd_convergence': 11,; }); ; > e_cp = psi4.energy('mp2', bsse_type='cp'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:112: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:415: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver_nbody.py:303: in nbody_gufunc; ptype_dict[pair] = func(method_string, molecule=current_mol, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . name = 'mp2', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f6fc9d20298>}, reference = 'RHF', mtd_type = 'DF', module = 'DETCI'; func = None. def select_mp2(name, **kwargs):; """"""Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules.; ; """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP2_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/dfmp2/detci/fnocc; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:33368,energy,energy,33368,https://psicode.org,https://github.com/psi4/psi4/issues/820,2,['energy'],['energy']
Energy Efficiency,"6 1.8416125774383545; C -3.1216139793395996 -4.092474460601807 0.022369852289557457; H -2.5071558952331543 -4.992997646331787 -0.06683211773633957; H -3.9806551933288574 -4.315130233764648 0.6616312265396118; H -3.4815473556518555 -3.7952513694763184 -0.9667707681655884; H -1.818267822265625 -2.5147225856781006 -1.3233563899993896; C -0.2652755677700043 -0.47430306673049927 -1.2846300601959229; C 0.5650341510772705 0.6324429512023926 -1.1073341369628906; H 1.0022953748703003 1.1210383176803589 -1.9738258123397827; H -0.46503451466560364 -0.8350303173065186 -2.2904675006866455; H -0.9999359846115112 -1.117483139038086 1.977584958076477; H 0.46812179684638977 0.8390328884124756 2.2878639698028564; H 1.9390827417373657 2.4920878410339355 -0.5236388444900513""""""); molecule.set_molecular_charge(0); molecule.set_multiplicity(1); psi4.set_options({""reference"":""uhf""}). print(""calculate energy...""); energy, wfn = psi4.energy(""HF3c/"", return_wfn=True); print(""converting energy ...""); kcal_energy = energy * psi4.constants.hartree2kcalmol; print(""energy {:.2f} kcal/mol"".format(kcal_energy)); ```; Specifically the output I get is ; ```; set output file path; create molecule...; calculate energy...; Segmentation fault: 11; ```; I tried to attach the .dat file, but github wouldn't let me, but this is end of it:; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: MINIX; Blend: MINIX; Number of shells: 42; Number of basis functions: 64; Number of Cartesian functions: 64; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (MINIX AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 8 entry O line 318 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 2-5, 7, 9, 14-15 entry C line 198 file /Users/cbannan/minico",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593:2611,energy,energy,2611,https://psicode.org,https://github.com/psi4/psi4/issues/2593,1,['energy'],['energy']
Energy Efficiency,"6 3A 0.013757 4A 0.013757 ; 5A 0.015378 6A 0.063621 7A 0.068900 ; 8A 0.068900 9A 0.086764 10A 0.103920 ; 11A 0.198954 12A 0.198954 13A 0.208977 ; 14A 0.208977 15A 0.256823 16A 0.270230 ; 17A 0.318044 18A 0.318044 19A 0.402166 ; 20A 0.450346 21A 0.450346 22A 0.540514 ; 23A 0.606544 24A 0.606544 25A 0.613724 ; 26A 0.613724 27A 0.838452 28A 1.281252 ; 29A 1.826605 30A 1.826605 31A 1.850798 ; 32A 4.179388 . Beta Occupied: . . Beta Virtual: . 1A 0.006309 2A 0.013514 3A 0.013821 ; 4A 0.013821 5A 0.037931 6A 0.065570 ; 7A 0.070561 8A 0.070561 9A 0.090473 ; 10A 0.171679 11A 0.207466 12A 0.207466 ; 13A 0.209492 14A 0.209492 15A 0.257933 ; 16A 0.287508 17A 0.331720 18A 0.331720 ; 19A 0.427501 20A 0.478623 21A 0.478623 ; 22A 0.598357 23A 0.612674 24A 0.612674 ; 25A 0.614564 26A 0.614564 27A 0.921140 ; 28A 1.322779 29A 1.926318 30A 1.926318 ; 31A 1.947876 32A 4.183965 . Final Occupation by Irrep:; A ; DOCC [ 0 ]; SOCC [ 1 ]. @DF-UHF Final Energy: -0.49935164423756. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -0.4993516442375593; Two-Electron Energy = 0.0000000000000000; Total Energy = -0.4993516442375593. UHF NO Occupations:; HONO-0 : 1 A 1.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 1.8897. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: -0.0000 Z: -1.8895. Dipole Moment: [e a0]; X: 0.0000 Y: -0.0000 Z: 0.0002 Total: 0.0002. Dipole Moment: [D]; X: 0.0000 Y: -0.0000 Z: 0.0006 Total: 0.0006. *** tstop() called on filip-ThinkPad-E495 at Wed Mar 4 16:29:33 2020; Module time:; 	user time = 0.55 seconds = 0.01 minutes; 	system time = 0.01 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 1.79 seconds = 0.03 minutes; 	system time = 0.07 seconds = 0.00 m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:10686,Energy,Energy,10686,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Energy'],['Energy']
Energy Efficiency,"6) . ## Developer Interests; - Improves [QCSchema](https://github.com/MolSSI/QCSchema); - Handle module-level options: `scf__reference` equivalent to `set scf reference` (#1578); - `psi4 --qcschema` instead of `psi4 --json` (#1723); - arrays losslessly transmitted in binary if `msgpack` installed (#1723); - new CC properties collected (#1723), dipole returned in au (#1728) ; - basisset and wavefunction schema returned (#1728); - New DFT grid pruning schemes, Treutler and robust accessed through `set dft_pruning_scheme` (not yet engaged by default) (grid points reduced by 30–45%) (#1591); - `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` have been removed, as have ""MP2"" variables from double-hybrid DFT final return (#1445); - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY` (#1445); - Dunning basis updates for Li, Be, Na, Mg (#1559); - S^Inf 2nd-order Dispersion and Exchange-Dispersion for SAPT (#1490); - Enable LGTM static analysis; - Add qcvars to wavefunction (not just globals) for CI, CheMPS2, PsiMRCC, DFT, scf_helper, DFMP2, OEPROP, DETCI. Add functional-including qcvars for DFT (#1570, #1445); - Add option `PARENT_SYMMETRY` to replace a global. Don't use it directly (#1575); - Driver sow/reap for optimize, database which never worked for py3 removed (#1583); - Add 6-311G(2df, <any>) for 2nd row atoms (#1531); - Improve printing and guess for r_e for the `diatomic` procedure (#1601); - Response code cleaned to use Hessian-vector products (#1550); - Enable running pytest in parallel via `psi4 --test -n<N>` if package `pytest-xdist` installed (#1612); - Considerable code-cleanup at LGTM's prompting (#1618, #1633, #1631, #1616, #1617, #1624, #1620, #1622, #1627, #1639, #1630, #1629, #1636, #1632, #1626, #1619, #1625, #1623, #1634, #1650, #1651, #1621, #1655); - Considerable memory-leak cleanup at CPPCHECK's prompting (#1534) and a bit more at valgrind's pr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:4349,ENERGY,ENERGY,4349,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['ENERGY'],['ENERGY']
Energy Efficiency,"6, in _core_wavefunction_from_file; basisset = core.BasisSet.build(molecule, 'ORBITAL', basis_name, puream=basis_puream); File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/p4util/python_helpers.py"", line 84, in _pybuild_basis; bs, basisdict = qcdb.BasisSet.pyconstruct(mol.to_dict(),; File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 696, in pyconstruct; bs, msg, ecp = BasisSet.construct(parser, mol,; File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 918, in construct; raise BasisSetNotFound('BasisSet::construct: Unable to find a basis set for atom %d for key %s among:\n%s' % \. psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['C']; Basis Sets: [('ANONYMOUS5AA41DFC', 'ANONYMOUS5AA41DFC', None)]; File Path: /home/tony/test_psi4_jobs/test_restart, /home/tony/test_psi4_jobs/test_restart, /home/tony/psi4conda/share/psi4/basis; Input Blocks:. Printing out the relevant lines from the Psithon --> Python processed input file:; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; """"""); core.IO.set_default_namespace(""""); --> nrg, wfn = energy('M06-2X', return_wfn=True, restart_file=""test_restart""). !----------------------------------------------------------------------------------!; ! !; ! BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among: !; ! Shell Entries: ['C'] !; ! Basis Sets: [('ANONYMOUS5AA41DFC', 'ANONYMOUS5AA41DFC', None)] !; ! File Path: /home/tony/test_psi4_jobs/test_restart, !; ! /home/tony/test_psi4_jobs/test_restart, !; ! /home/tony/psi4conda/share/psi4/basis !; ! Input Blocks: !; ! !; !----------------------------------------------------------------------------------!; ```. The documentation indicates that this should work. I've tried it with ""scf"" instead of M06-2X, and I get the same error.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2571:3735,energy,energy,3735,https://psicode.org,https://github.com/psi4/psi4/issues/2571,1,['energy'],['energy']
Energy Efficiency,"6/site-packages/psi4/tests/test_psi4.py FAILED; ../../../../../../current/lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED. ==================================================================== FAILURES ====================================================================; ____________________________________________________________________ test_erd ____________________________________________________________________. @using_erd; def test_erd():; """"""erd/scf5""""""; ; psi4.set_options({'integral_package': 'ERD'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:617: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4cd6b48>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISP",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:6115,energy,energy,6115,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"60 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686	 89.592600; 	 B(3,1,6) = 1.577586	 90.389033; 	 B(4,1,5) = 2.102739	 120.478052; 	 B(4,1,6) = 2.076003	 118.946205; 	 B(5,1,6) = 2.104437	 120.575361. 	Current energy : -2642.5785393886. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1.; 	Norm of target step-size 0.09446; 	Projected energy change by RFO approximation: -0.0037947424. 	Back-transformation to cartesian coordinates...; 	Could not converge backtransformation.; 	Using first guess instead. 	--- Internal Coordinate Step in ANG or DEG, aJ/ANG or AJ/DEG ---; 	 ---------------------------------------------------------------------------; 	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 2.124830 0.072797 0.020582 2.145412; 	 2 R(1,3) = 2.128962 0.068599 0.020146 2.149109; 	 3 R(1,4) = 2.024461 0.069553 17.524433 19.548895; 	 4 R(1,5) = 2.028397 0.066233 17.556204 19.584601; 	 5 R(1,6) = 2.024305 0.070720 17.517231 19.541535; 	 6 L(2,1,3) = 179.431194 0.000053 -1.744105 177.687089; 	 7 l(2,1,3) = 180.000000 -0.000770 0.000000 180.000000; 	 8 B(2,1,4) = 90.533252 -0.000595 -1.113535 89.419717; 	 9 B(2,1,5) = 89.845687 -0.000107 -1.005547 88.840140; 	 10 B(2,1,6) = 89.819597 0.000658 1.944389 91.763985; 	 11 B(3,1,4) = 89.828837 -0.000257 2.088415 91.917251; 	 12 B(3,1,5) = 8",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265:2388,energy,energy,2388,https://psicode.org,https://github.com/psi4/psi4/issues/1265,1,['energy'],['energy']
Energy Efficiency,"602; H 998.630602 998.128602 995.073603; H 1003.450600 997.893602 999.402602; H 1002.505600 996.451603 999.055602; H 1001.477601 998.875602 1001.920601; H 1002.138601 1001.212601 999.307602; H 1002.322601 998.665602 996.205603; units angstrom; }; memory 40 Gb. set {; basis def2-tzvp; maxiter 100; g_convergence gau; soscf true; soscf_max_iter 40; }; set_num_threads(20); E, wfn = optimize('B3LYP-D3', bsse_type='cp', return_wfn=True); fchk(wfn, 'citric_acid_bsse_cp.fchk'). def saveFile(name, string):; f=open(name, 'w'); f.write(string); f.close(). saveFile('citric_acid.optimized.dimer_geometry_bsse_cp.log', wfn.molecule().save_string_xyz_file()); ```. Here is the first iteration; ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo; -------------------------; A 451 451; -------------------------; Total 451 451; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -759.49493403045983 -7.59495e+02 0.00000e+00; @DF-RKS iter 1: -759.57044795569880 -7.55139e-02 3.31257e-03 DIIS; @DF-RKS iter 2: -758.78767299108517 7.82775e-01 4.58393e-03 DIIS; @DF-RKS iter 3: -760.32534769892425 -1.53767e+00 9.55400e-04 SOKS, nmicro=7; @DF-RKS iter 4: -760.39557129980335 -7.02236e-02 4.93871e-05 SOKS, nmicro=8; @DF-RKS iter 5: -760.39613633741988 -5.65038e-04 7.21946e-07 SOKS, nmicro=8; @DF-RKS iter 6: -760.39613642852896 -9.11091e-08 1.76332e-09 SOKS, nmicro=8; @DF-RKS iter 7: -760.39613642852896 0.00000e+00 5.70403e-12 SOKS, nmicro=conv; Energy and wave function converged.; ```. and here is the final iteration that fails. ```; ==> Pre-Iterations <==. SCF Guess: Orbitals guess was supplied from a previous computation. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 902 902 50 50 50 0; ---------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338:3040,Energy,Energy,3040,https://psicode.org,https://github.com/psi4/psi4/issues/2338,1,['Energy'],['Energy']
Energy Efficiency,"604962603 2.1055467704; H 0.8908035853 3.6241374839 1.0039698993; H 2.5024254412 -2.4854165868 1.5399007635; H 2.7858100041 1.4098930461 0.8661311665; H 1.1490336627 -0.0652673733 2.9502674019; H 2.0638511115 2.0769335299 2.3353274192; H 2.7993768711 -0.4085469833 2.4534782102; H -1.9892347032 2.6686747336 -1.9454961675; H -0.0986239324 -3.4441353556 -1.6764363233; Cl 1.8821942342 0.3098852687 -1.6599082362; O -1.1395010178 -0.1703680057 0.9263551082; H -0.9312248148 4.2251864392 -0.4696082573; H 1.6695378989 -3.9953914470 -0.1633815245; }. # Run SCF, initialize in smaller basis; set basis 6-31G*; set basis_guess 3-21G; set scf_type pk; set soscf true; scf_e, scf_wfn = energy('scf', return_wfn=True). # Get CISD active space guess. 69 occupied orbitals, out of which 32; # are core electrons. Leaves No=37 orbitals, excitable into Nv=204; # virtuals. Let's take only the first 50 virtuals; set restricted_docc [32]; set restricted_uocc [154]; set qc_module detci; set nat_orbs true; ci_e, ci_wfn = energy('cisd', ref_wfn=scf_wfn, return_wfn=True); ```; segfaults after the 20 most important determinants have been written to output. Backtrace gives; ```; #0 __GI___libc_free (mem=mem@entry=0x550020205841) at malloc.c:2963; #1 0x00007f6080ce0a78 in psi::detci::CIWavefunction::print_vector (this=0x55948f151ec0, vec=std::shared_ptr (count 4, weak 0) 0x559528f71aa0, root=0); at /home/work/psi4/psi4.susi/psi4/src/psi4/detci/ciwave.cc:683; #2 0x00007f6080706283 in pybind11::cpp_function::cpp_function<void, psi::detci::CIWavefunction, std::shared_ptr<psi::detci::CIvect>, int, pybind11::name, pybind11::is_method, pybind11::sibling, char [10]>(void (psi::detci::CIWavefunction::*)(std::shared_ptr<psi::detci::CIvect>, int), pybind11::name const&, pybind11::is_method const&, pybind11::sibling const&, char const (&) [10])::{lambda(psi::detci::CIWavefunction*, std::shared_ptr<psi::detci::CIvect>, int)#1}::operator()(psi::detci::CIWavefunction*, std::shared_ptr<psi::detci::CIvect>, int) con",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/606:1584,energy,energy,1584,https://psicode.org,https://github.com/psi4/psi4/issues/606,1,['energy'],['energy']
Energy Efficiency,"60674 -0.03396 -0.00063; H 1.94052 -0.78000 0.00022; """"""; add_input = ""\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molecule_string + add_input); N_active = 11 # Define the total number of active MOs.; N_frozen = 4 # Define the number of frozen occupied MO; N_virtual = 30 # Define the total number of virtual MOs that will be discarded; psi4.set_options({ 'ACTIVE' : [ N_active ],\; 'FROZEN_DOCC' : [ N_frozen ],\; 'FROZEN_UOCC' : [ N_virtual],\; 'DIAG_METHOD' : 'DAVIDSON',\; 'CI_MAXITER' : 200\; }). # assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 100, in mcscf_solver; mcscf_obj = ciwfn.mcscf_obj",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1871:1469,energy,energy,1469,https://psicode.org,https://github.com/psi4/psi4/issues/1871,1,['energy'],['energy']
Energy Efficiency,"6189269160E+00 1.29733896681495E+01; H 1.74208808173953E+01 9.58447870262053E+00 1.16469328356722E+01; O 2.10924406367978E+01 1.68832684376857E+01 1.20029556700182E+01; H 2.11724374304327E+01 1.69344491039565E+01 1.29747092928667E+01; H 2.19127120650509E+01 1.73649867268274E+01 1.16495241352093E+01; O 1.66001175009873E+01 1.68847213502115E+01 1.20018639379116E+01; H 1.66863065463536E+01 1.69318387695251E+01 1.29733879832984E+01; H 1.74208858618342E+01 1.73652789519844E+01 1.16468995475923E+01; O 1.88431375700750E+01 1.30109988980166E+01 1.19983531520136E+01; H 1.89282402555765E+01 1.30611209267480E+01 1.29697750466024E+01; H 1.96664898627493E+01 1.34868752802308E+01 1.16416190108971E+01; O 1.43526763532959E+01 1.30113970569431E+01 1.19978051198750E+01; H 1.44424504488042E+01 1.30589832954827E+01 1.29686420001814E+01; H 1.51761320099903E+01 1.34867010754835E+01 1.16393171667026E+01; }. set {; freeze_core true; scf_type df; mp_type df; basis aug-cc-pvtz; DF_BASIS_MP2 cc-pVQZ-RI; }. energy('mp2.5'); ```. Failure:. ```; ==============================================================================; ==============================================================================; ==============================================================================. DF-MP2.5; Program Written by Ugur Bozkaya; Latest Revision September 9, 2017. ==============================================================================; ==============================================================================; ==============================================================================. MO spaces... FC OCC VIR FV; ----------------------; 15 60 1305 0. Number of basis functions in the DF-CC basis: 2970. Available memory : 810623.17 MB; Memory requirement for 3-index ints : 40445.15 MB; Memory requirement for DF-CC int trans: 24244.87 MB; Memory requirement for CC contractions: 56027.91 MB; Total memory requirement for DF+CC int: 96473.07 MB; Memory requirement for Wabef term : 75373.62 MB. T",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1679:3118,energy,energy,3118,https://psicode.org,https://github.com/psi4/psi4/issues/1679,1,['energy'],['energy']
Energy Efficiency,"620666994506/work/build/testresults.log"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf/output.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL.; Traceback (most recent call last):; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/driver.py"", line 577, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-packages/psi4/driver/procrouting/sapt/sapt_proc.py"", line 255, in run_sapt_dft; sapt_dft(dimer_wfn, wfn_A, wfn_B,",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2178:1826,ENERGY,ENERGY,1826,https://psicode.org,https://github.com/psi4/psi4/issues/2178,1,['ENERGY'],['ENERGY']
Energy Efficiency,"6355; C 3.05053 -0.99330 -1.18650; C 3.20741 -2.40360 -1.74586; C 2.55026 -3.52443 -0.96032; F 3.17228 4.13514 -0.00592; F 1.27554 3.06932 0.32664; F 3.66787 0.59838 2.12267; F 1.67182 0.43073 1.22024; F 3.82500 -0.17529 -1.99644; F 1.75160 -0.57213 -1.38634; F 3.25533 -3.78096 0.19399; F 1.27730 -3.18683 -0.58308; H 2.25306 4.32050 2.37079; H 3.76241 3.37061 2.47326; H 2.19469 2.57073 2.72526; H 4.35180 1.97066 0.10411; H 2.92157 1.70418 -0.89385; H 4.54579 -0.84429 0.31346; H 3.04476 -1.57689 0.88214; H 4.27328 -2.63006 -1.82364; H 2.78870 -2.38708 -2.75512; H 2.50060 -4.45608 -1.52780; --; 0 1; C -3.87349 2.91061 -1.65876; N -2.75856 1.99410 -1.41455; C -1.50263 2.33407 -0.94691; C -0.83120 1.17172 -0.73344; C -2.84151 0.66484 -1.47790; N -1.68346 0.14262 -1.07953; C -1.46679 -1.28577 -0.78728; C -1.38542 -1.51827 0.72247; C -1.59684 -2.99357 1.06458; C -1.46598 -3.24276 2.56923; H -3.87594 3.66326 -0.86989; H -3.76218 3.38868 -2.63477; H -4.79884 2.33892 -1.60023; H -1.20045 3.35521 -0.79404; H 0.15181 0.98994 -0.34830; H -3.72834 0.10789 -1.72147; H -0.55449 -1.60196 -1.29485; H -2.32462 -1.81798 -1.19641; H -0.41387 -1.17340 1.09480; H -2.16763 -0.92438 1.19970; H -0.87575 -3.61428 0.52075; H -2.59984 -3.27619 0.72873; H -0.46552 -2.96983 2.92459; H -2.19613 -2.64103 3.11964; H -1.63860 -4.29508 2.81528; B -4.99249 -0.20013 0.53015; F -4.36607 -1.36290 -0.02014; F -5.60912 0.50296 -0.55477; F -3.96502 0.63394 1.05703; F -5.91416 -0.53978 1.49939. units angstrom; no_reorient; symmetry c1; }. set{ basis 6-311+G(d,p); scf_type df. DF_BASIS_SAPT 6-311+G(d,p); SAPT_DFT_FUNCTIONAL B3LYP-D. }; energy('sapt2', molecule=AP_BMIMBF4); ```. I received an error message that I ran out of memory. The output file indicates failure occurred during the SAPT2 part, which reported `Estimated memory usage: 64566.6 MB`. Its estimate is off by at least 30 GB, which is not good. The user didn't specify the version they were using beyond `conda`, but I observed this on `1.3a2.dev122`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1361:2039,energy,energy,2039,https://psicode.org,https://github.com/psi4/psi4/issues/1361,1,['energy'],['energy']
Energy Efficiency,"66514; C -0.68542522 0.00000000 -4.16299454; C 0.68542522 0.00000000 -4.16299454; C -2.88740001 0.00000000 -1.13057937; N -2.05486054 0.00000000 0.01405448; C -2.81721573 0.00000000 1.05258796; C -4.23537365 0.00000000 0.67022148; C -4.27600326 0.00000000 -0.70111647; C -2.35903958 0.00000000 2.45806358; C -2.48623109 0.00000000 -2.40919453; C -1.07657777 0.00000000 -2.84029441; H 1.32705735 0.00000000 5.04949752; H -1.32705735 0.00000000 5.04949752; H 3.13133350 0.00000000 3.22359766; H 5.09358852 0.00000000 1.32905912; H 5.16675318 0.00000000 -1.31569036; H 3.24762417 0.00000000 -3.18492574; H -1.32960963 0.00000000 -5.03269392; H 1.32960963 0.00000000 -5.03269392; H -5.09358852 0.00000000 1.32905912; H -5.16675318 0.00000000 -1.31569036; H -3.13133350 0.00000000 3.22359766; H -3.24762417 0.00000000 -3.18492574; units angstrom; }. set {; reference rhf; scf_type DF; guess SAD; d_convergence 4; e_convergence 4; basis cc-pvqz; df_basis_mp2 cc-pvqz-ri; }. set dfmp2 {; print 1; }. energy('dfmp2'). dfmp2.exampleFN(); ```. My plugin is given below:. ```; /*; *@BEGIN LICENSE; *; * dfmp2 by Psi4 Developer, a plugin to:; *; * PSI4: an ab initio quantum chemistry software package; *; * This program is free software; you can redistribute it and/or modify; * it under the terms of the GNU General Public License as published by; * the Free Software Foundation; either version 2 of the License, or; * (at your option) any later version.; *; * This program is distributed in the hope that it will be useful,; * but WITHOUT ANY WARRANTY; without even the implied warranty of; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; * GNU General Public License for more details.; *; * You should have received a copy of the GNU General Public License along; * with this program; if not, write to the Free Software Foundation, Inc.,; * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; *; *@END LICENSE; */. #include <libplugin/plugin.h>; #include <psi4-dec.h>; #include <libpa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/157:1899,energy,energy,1899,https://psicode.org,https://github.com/psi4/psi4/issues/157,1,['energy'],['energy']
Energy Efficiency,6e-05 5.52833e-05 DIIS; @RHF iter 6: -672.74460689141483 -1.01169e-05 1.01025e-05 DIIS; @RHF iter 7: -672.74460730536885 -4.13954e-07 1.76374e-06 DIIS; @RHF iter 8: -672.74460731378190 -8.41305e-09 7.61045e-07 DIIS; @RHF iter 9: -672.74460731474380 -9.61904e-10 2.09614e-07 DIIS; @RHF iter 10: -672.74460731487704 -1.33241e-10 6.64041e-08 DIIS; @RHF iter 11: -672.74460731489182 -1.47793e-11 1.26692e-08 DIIS; @RHF iter 12: -672.74460731489194 -1.13687e-13 2.66098e-09 DIIS; @RHF iter 13: -672.74460731489341 -1.47793e-12 6.52605e-10 DIIS; @RHF iter 14: -672.74460731489307 3.41061e-13 2.24066e-10 DIIS; @RHF iter 15: -672.74460731489285 2.27374e-13 6.54131e-11 DIIS; @RHF iter 16: -672.74460731489262 2.27374e-13 2.00408e-11 DIIS; @RHF iter 17: -672.74460731489285 -2.27374e-13 4.36522e-12 DIIS; @RHF iter 18: -672.74460731489307 -2.27374e-13 1.26829e-12 DIIS; @RHF iter 19: -672.74460731489410 -1.02318e-12 2.71243e-13 DIIS; @RHF iter 20: -672.74460731489353 5.68434e-13 7.18233e-14 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 ADIIS/DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 ADIIS/DIIS; @RHF iter 3: -672.74373946371918 -2.93172e-02 6.13615e-04 ADIIS/DIIS; @RHF iter 4: -672.74452727814617 -7.87814e-04 1.92071e-04 ADIIS/DIIS; @RHF iter 5: -672.74459671900468 -6.94409e-05 5.54299e-05 DIIS; @RHF iter 6: -672.74460689054501 -1.01715e-05 1.01141e-05 DIIS; @RHF iter 7: -672.74460730521071 -4.14666e-07 1.79146e-06 DIIS; @RHF iter 8: -672.74460731376098 -8.55027e-09 7.54369e-07 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 ADIIS/DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 ADIIS/DIIS; @RHF iter 3: -672.74373946371918 -2.93172e-02 6.13615e-04 ADIIS/DIIS; @RHF iter 4: -672.74452727814617 -7.87814e-04 1.92071e-04 ADIIS/DIIS; ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2446:3113,Energy,Energy,3113,https://psicode.org,https://github.com/psi4/psi4/pull/2446,1,['Energy'],['Energy']
Energy Efficiency,"6hfd4bba0_1; xz 5.2.3 h55aa19d_2; yaml 0.1.7 had09818_2; zlib 1.2.11 ha838bed_2; ```. Our input is:. ```; set_num_threads(4); set_memory('16000 MB'). set { scf_mem_safety_factor 0.7 }. set { reference rks }; set { basis 6-311++G** }. molecule MOL {; 1 1; noreorient; nocom; symmetry c1; C 0.000000 0.000000 -0.170000; C 0.007000 1.210000 0.523000; C 0.000000 1.205000 1.904000; C 0.000000 0.000000 2.592000; C 0.000000 -1.205000 1.904000; C -0.007000 -1.210000 0.523000; C 0.000000 0.000000 -1.643000; H -0.019000 2.146000 -0.006000; H -0.011000 2.134000 2.442000; H 0.000000 0.000000 3.666000; H 0.011000 -2.134000 2.442000; H 0.019000 -2.146000 -0.006000; N -0.741000 -0.864000 -2.296000; N 0.741000 0.864000 -2.296000; H 0.721000 0.947000 -3.291000; H 1.404000 1.427000 -1.808000; H -1.404000 -1.427000 -1.808000; H -0.721000 -0.947000 -3.291000; }. set optking { dynamic_level = 1; geom_maxiter = 250; print_trajectory_xyz_file = True }. set { scf_type direct }; energy, wfn = optimize('SCF', dft_functional='wB97X-D', dertype='gradient', return_wfn=True). import os; os.chdir(os.environ['HTMD_PSI4_WORKDIR']). oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES'). with open('psi4out.xyz', 'w') as f:; f.write('18 ' ); f.write('%.12f\n' % energy); f.write(MOL.save_string_xyz()); ```. This errors with:. ```; Traceback (most recent call last):; File ""/home/damasj02/software/psi4dev/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 55, in <module>; File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1054, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/driver.py"", line 606, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2051, in run_scf_gradient;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948:2907,energy,energy,2907,https://psicode.org,https://github.com/psi4/psi4/issues/948,1,['energy'],['energy']
Energy Efficiency,"7 -2.64002e-06 2.86336e-06 SOSCF, nmicro=5; @DF-ROHF iter 14: -1928.51831487022673 -2.51935e-06 1.14965e-06 SOSCF, nmicro=5; @DF-ROHF iter 15: -1928.51831729563537 -2.42541e-06 2.74681e-06 SOSCF, nmicro=5; @DF-ROHF iter 16: -1928.51831963922041 -2.34359e-06 1.10840e-06 SOSCF, nmicro=5; @DF-ROHF iter 17: -1928.51832191065023 -2.27143e-06 2.65960e-06 SOSCF, nmicro=5; @DF-ROHF iter 18: -1928.51832411656915 -2.20592e-06 1.07467e-06 SOSCF, nmicro=5; @DF-ROHF iter 19: -1928.51832626156192 -2.14499e-06 2.58541e-06 SOSCF, nmicro=5; @DF-ROHF iter 20: -1928.51832834999686 -2.08843e-06 1.04450e-06 SOSCF, nmicro=5; @DF-ROHF iter 21: -1928.51833038416635 -2.03417e-06 2.51779e-06 SOSCF, nmicro=5; @DF-ROHF iter 22: -1928.51833236735638 -1.98319e-06 1.01620e-06 SOSCF, nmicro=5; @DF-ROHF iter 23: -1928.51833430059696 -1.93324e-06 2.45380e-06 SOSCF, nmicro=5; @DF-ROHF iter 24: -1928.51833618656428 -1.88597e-06 9.89026e-07 SOSCF, nmicro=5; @DF-ROHF iter 25: -1928.51833802564261 -1.83908e-06 2.39210e-06 SOSCF, nmicro=5; @DF-ROHF iter 26: -1928.51833982011476 -1.79447e-06 9.62693e-07 SOSCF, nmicro=5; @DF-ROHF iter 27: -1928.51834157004896 -1.74993e-06 2.33205e-06 SOSCF, nmicro=5; @DF-ROHF iter 28: -1928.51834327746201 -1.70741e-06 9.37124e-07 SOSCF, nmicro=5; @DF-ROHF iter 29: -1928.51834494231707 -1.66486e-06 2.27333e-06 SOSCF, nmicro=5; @DF-ROHF iter 30: -1928.51834656639858 -1.62408e-06 9.12295e-07 SOSCF, nmicro=5; @DF-ROHF iter 31: -1928.51834814968470 -1.58329e-06 2.21577e-06 SOSCF, nmicro=5; ```. We are well within the quadratic region, and although the energy is monotonically decreasing, it is decreasing very slowly, and with the error bouncing back and forth between two numbers: one around 2e-6 and one around 9e-7. That should never happen within the quadratic region. We see the same pattern if you try the SCF with conventional integrals. There are similar problems when you don't use SOSCF, so the error may not be SOSCF specific. I strongly suspect the ECPs are somehow at fault.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1716:3148,energy,energy,3148,https://psicode.org,https://github.com/psi4/psi4/issues/1716,1,['energy'],['energy']
Energy Efficiency,"71 1.613320688080 0.245929720968 22.989769282000; CL -5.829599121071 -1.206959311920 0.245929720968 34.968852682000; CL -8.649879121071 -4.027239311920 0.245929720968 34.968852682000; NA -8.649879121071 -1.206959311920 0.245929720968 22.989769282000; NA -11.470159121071 -4.027239311920 0.245929720968 22.989769282000; CL -5.829599121071 -6.847519311920 0.245929720968 34.968852682000; CL -8.649879121071 -9.667799311920 0.245929720968 34.968852682000; NA -8.649879121071 -6.847519311920 0.245929720968 22.989769282000; NA -11.470159121071 -9.667799311920 0.245929720968 22.989769282000. Running in c1 symmetry. Rotational constants: A = 0.00022 B = 0.00019 C = 0.00010 [cm^-1]; Rotational constants: A = 6.52472 B = 5.74098 C = 3.08570 [MHz]; Nuclear repulsion = 33842.470608681665908. Charge = 0; Multiplicity = 1; Electrons = 1042; Nalpha = 521; Nbeta = 521. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: 6-31G; Blend: 6-31G; Number of shells: 586; Number of basis functions: 1058; Number of Cartesian functions: 1058; Spherical Harmonics?: false; Max angular momentum: 1. ==> DFT Potential <==. => LibXC <=. Version 5.2.3; S. Lehtola, C. Steigemann, M. J. Oliveira, and M. A. Marques, SoftwareX 7, 1 (2018) (10.1016/j.softx.2017.11.002). => Composite Functional: B3LYP-D3ZERO <= . B3LYP-d3zero Hyb-GGA Exchange-Correlation Functional. P. J. Stephens, F. J. Devlin, C. F. Chabalowski, and M. J. Frisch, J. Phys. Chem. 98, 11623 (1994) (10.1021/j100096a001). Deriv = 1; GGA = TRUE; Meta = FALSE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange Functionals <=. 0.0800 Slater exchange; 0.7200 Becke 88. => Exact (HF) Exchange <=. 0.2000 HF . => Correlation Functionals <=. 0.1900 Vosko, Wilk & Nusair (VWN5_RPA); 0.8100 Lee, Yang & Parr. => LibXC Density Thresholds <==. XC_HYB_GGA_XC_B",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709:17541,Energy,Energy,17541,https://psicode.org,https://github.com/psi4/psi4/issues/2709,1,['Energy'],['Energy']
Energy Efficiency,"720 64A 1.062956 ; 65A 1.089893 66A 1.194156 67A 1.194624 ; 68A 1.260967 69A 1.272575 70A 1.297678 ; 71A 1.297926 72A 1.359441 73A 1.359571 ; 74A 1.502783 75A 1.503340 76A 1.596335 ; 77A 1.617548 78A 1.617829 79A 1.669742 ; 80A 1.669811 81A 1.778057 82A 1.778197 ; 83A 1.861590 84A 1.904708 85A 1.905302 ; 86A 1.932619 87A 1.933506 88A 1.984745 ; 89A 2.223699 90A 2.225628 91A 2.225668 ; 92A 2.494202 93A 2.559162 94A 2.559231 ; 95A 2.694381 96A 2.694493 97A 2.699523 ; 98A 2.989001 99A 2.989072 100A 3.239982 ; 101A 3.409966 102A 3.418072 103A 3.418110 ; 104A 3.811009 105A 4.348714 106A 5.581608 ; 107A 6.661779 108A 7.322224 109A 7.404171 ; 110A 8.435277 111A 8.975985 . Final Occupation by Irrep:; A ; DOCC [ 16 ]; NA [ 16 ]; NB [ 16 ]. @DF-RKS Final Energy: -42.04595197988089. => Energetics <=. Nuclear Repulsion Energy = 93.4549456916637951; One-Electron Energy = -246.7432156290641103; Two-Electron Energy = 118.6378186354417608; DFT Exchange-Correlation Energy = -7.3862953798450999; Empirical Dispersion Energy = -0.0092052980772349; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -42.0459519798808898. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : -7.8209495 8.4115446 0.5905951; Dipole Y : -2.3244093 2.4977096 0.1733003; Dipole Z : -4.0798888 4.3904336 0.3105448; Magnitude : 0.6894009. ------------------------------------------------------------------------------------. *** tstop() called on agincourt.lan at Mon Sep 16 22:19:42 2024; Module time:; 	user time = 6.43 seconds = 0.11 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 6 seconds",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:25877,Energy,Energy,25877,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"74098138661, ; -108.48773838140609, -108.48773538142858, -108.48720108543215]. psi4.diatomic.anharmonicity(r,eng,'result.out'); --------------------------------------------------------------------------. Memory set to 1.863 GiB by Python driver. Performing a fit to 85 data points. Optimizing geometry based on current surface:. E = -108.48763191189867, x = 3.2252941, grad = 0.00224788400003; E = -108.48738990806602, x = 3.3996397, grad = 0.00068618041148; E = -108.48734508016932, x = 3.4996883, grad = 0.00016321285348; E = -108.48733918433076, x = 3.5300091, grad = 0.00004224053808; E = -108.48733835624454, x = 3.5376957, grad = -0.00000455763475; E = -108.48733841386600, x = 3.5368732, grad = 0.00000047690618; E = -108.48733840748675, x = 3.5369593, grad = -0.00000005153221; E = -108.48733840817202, x = 3.5369500, grad = 0.00000000555231; E = -108.48733840809817, x = 3.5369510, grad = -0.00000000059873; Final E = -108.48733840809817, x = 3.5369510, grad = -0.00000000059873. Equilibrium Energy -108.48733840809817 Hartrees; Gradient -0.00000000059873; Quadratic Force Constant -0.0241494 MDYNE/A; Cubic Force Constant 0.0817885 MDYNE/A**2; Quartic Force Constant -0.1482087 MDYNE/A**3. Traceback (most recent call last):; File ""/home/martin/miniconda/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 41, in <module>; File ""/home/martin/miniconda/lib//python3.7/site-packages/psi4/driver/diatomic.py"", line 194, in anharmonicity; roots2 = np.roots(coefs2); File ""/home/martin/miniconda/lib//python3.7/site-packages/numpy/lib/polynomial.py"", line 245, in roots; roots = eigvals(A); File ""/home/martin/miniconda/lib//python3.7/site-packages/numpy/linalg/linalg.py"", line 1059, in eigvals; _assertFinite(a); File ""/home/martin/miniconda/lib//python3.7/site-packages/numpy/linalg/linalg.py"", line 219, in _assertFinite; raise LinAlgError(""Array must not contain infs or NaNs""). numpy.linalg.LinAlgError: Array must not contain infs or NaNs. Printing out the relevant lin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1600:9761,Energy,Energy,9761,https://psicode.org,https://github.com/psi4/psi4/issues/1600,1,['Energy'],['Energy']
Energy Efficiency,"76 60A 0.958532 61A 0.986377 ; 62A 1.033004 63A 1.062720 64A 1.062956 ; 65A 1.089893 66A 1.194156 67A 1.194624 ; 68A 1.260967 69A 1.272575 70A 1.297678 ; 71A 1.297926 72A 1.359441 73A 1.359571 ; 74A 1.502783 75A 1.503340 76A 1.596335 ; 77A 1.617548 78A 1.617829 79A 1.669742 ; 80A 1.669811 81A 1.778057 82A 1.778197 ; 83A 1.861590 84A 1.904708 85A 1.905302 ; 86A 1.932619 87A 1.933506 88A 1.984745 ; 89A 2.223699 90A 2.225628 91A 2.225668 ; 92A 2.494202 93A 2.559162 94A 2.559231 ; 95A 2.694381 96A 2.694493 97A 2.699523 ; 98A 2.989001 99A 2.989072 100A 3.239982 ; 101A 3.409966 102A 3.418072 103A 3.418110 ; 104A 3.811009 105A 4.348714 106A 5.581608 ; 107A 6.661779 108A 7.322224 109A 7.404171 ; 110A 8.435277 111A 8.975985 . Final Occupation by Irrep:; A ; DOCC [ 16 ]; NA [ 16 ]; NB [ 16 ]. @DF-RKS Final Energy: -42.04595197988089. => Energetics <=. Nuclear Repulsion Energy = 93.4549456916637951; One-Electron Energy = -246.7432156290641103; Two-Electron Energy = 118.6378186354417608; DFT Exchange-Correlation Energy = -7.3862953798450999; Empirical Dispersion Energy = -0.0092052980772349; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -42.0459519798808898. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : -7.8209495 8.4115446 0.5905951; Dipole Y : -2.3244093 2.4977096 0.1733003; Dipole Z : -4.0798888 4.3904336 0.3105448; Magnitude : 0.6894009. ------------------------------------------------------------------------------------. *** tstop() called on agincourt.lan at Mon Sep 16 22:19:42 2024; Module time:; 	user time = 6.43 seconds = 0.11 minutes; 	system time =",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:25826,Energy,Energy,25826,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"77156e-16 2.10910e-10 DIIS; @DF-UHF iter 9: -0.49762403116032 -8.88178e-16 2.91582e-11 DIIS; @DF-UHF iter 10: -0.49762403116032 -6.66134e-16 1.10373e-14 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 7.500000000E-01; @S^2 Observed: 7.500000000E-01; @S Expected: 5.000000000E-01; @S Observed: 5.000000000E-01. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.497624 . Alpha Virtual: . 2A 0.048719 3A 0.066612 4A 0.066612 ; 5A 0.098792 6A 0.253872 7A 0.387743 ; 8A 0.387743 9A 0.427498 10A 1.213680 ; 11A 3.852115 . Beta Occupied: . . Beta Virtual: . 1A 0.020894 2A 0.058417 3A 0.068354 ; 4A 0.068354 5A 0.183800 6A 0.269157 ; 7A 0.391375 8A 0.391375 9A 0.451441 ; 10A 1.378124 11A 3.853058 . Final Occupation by Irrep:; A ; DOCC [ 0 ]; SOCC [ 1 ]. @DF-UHF Final Energy: -0.49762403116032. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -0.4976240311603163; Two-Electron Energy = 0.0000000000000000; Total Energy = -0.4976240311603163. UHF NO Occupations:; HONO-0 : 1 A 1.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SCF //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: AUG-CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry LI line 68 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz.gbs ; atoms 2 entry H line 40 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 976 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:5272,Energy,Energy,5272,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Energy'],['Energy']
Energy Efficiency,"7; freeze_core True; }. E = energy('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z'); H = frequency('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. ---------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:1264,ENERGY,ENERGY,1264,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['ENERGY'],['ENERGY']
Energy Efficiency,"7e-03 DIIS; @DF-RKS iter 2: -758.78767299108517 7.82775e-01 4.58393e-03 DIIS; @DF-RKS iter 3: -760.32534769892425 -1.53767e+00 9.55400e-04 SOKS, nmicro=7; @DF-RKS iter 4: -760.39557129980335 -7.02236e-02 4.93871e-05 SOKS, nmicro=8; @DF-RKS iter 5: -760.39613633741988 -5.65038e-04 7.21946e-07 SOKS, nmicro=8; @DF-RKS iter 6: -760.39613642852896 -9.11091e-08 1.76332e-09 SOKS, nmicro=8; @DF-RKS iter 7: -760.39613642852896 0.00000e+00 5.70403e-12 SOKS, nmicro=conv; Energy and wave function converged.; ```. and here is the final iteration that fails. ```; ==> Pre-Iterations <==. SCF Guess: Orbitals guess was supplied from a previous computation. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 902 902 50 50 50 0; -------------------------------------------------------; Total 902 902 50 50 50 0; -------------------------------------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -756.64555164402248 -7.56646e+02 2.23119e-03; @DF-RKS iter 1: -756.44709462410424 1.98457e-01 2.61941e-03 DIIS; @DF-RKS iter 2: -696.79549781482638 5.96516e+01 8.79521e-03 DIIS; @DF-RKS iter 3: -757.70517729196388 -6.09097e+01 2.61678e-03 SOKS, nmicro=40; Did not take a SOSCF step, using normal convergence methods; @DF-RKS iter 4: -743.37798168217728 1.43272e+01 5.03487e-03 DIIS; Did not take a SOSCF step, using normal convergence methods; @DF-RKS iter 5: -756.65675968040807 -1.32788e+01 3.12016e-03 DIIS; @DF-RKS iter 6: -757.18710490514206 -5.30345e-01 2.04901e-03 SOKS, nmicro=40; @DF-RKS iter 7: -749.08851900767434 8.09859e+00 3.21116e-03 SOKS, nmicro=40; Did not take a SOSCF step, using normal convergence methods; @DF-RKS iter 8: -714.30385026747103 3.47847e+01 8.06060e-03 DIIS; @DF-RKS iter 9: -757.30477472616599 -4.30009e+01 2.00054e-03 SOKS, nmicro=40; @DF-RKS iter 10: -750.16020340117416 7.14457e+00 3.81913e-03 SOKS, nmicro=40; @DF-RKS iter 11: ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338:4177,Energy,Energy,4177,https://psicode.org,https://github.com/psi4/psi4/issues/2338,1,['Energy'],['Energy']
Energy Efficiency,"8 7.59453e-07 DIIS; @DF-RHF iter 9: -150.80654620984450 -5.18980e-10 1.53431e-07 DIIS; @DF-RHF iter 10: -150.80654620986070 -1.62004e-11 2.35473e-08 DIIS; @DF-RHF iter 11: -150.80654620986098 -2.84217e-13 4.64793e-09 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A1 -20.621389 1B2 -20.621057 2A1 -1.500485 ; 2B2 -1.213674 3A1 -0.787485 1B1 -0.638605 ; 4A1 -0.611527 3B2 -0.571415 1A2 -0.448360 . Virtual: . 5A1 0.196427 4B2 0.233677 5B2 0.363534 ; 6B2 0.797460 2B1 0.838809 6A1 0.844012 ; 7A1 0.899194 2A2 0.923759 8A1 1.027087 ; 7B2 1.058856 9A1 1.124050 8B2 1.149224 ; 9B2 1.493845 3B1 1.719758 10A1 1.729020 ; 3A2 1.885626 4B1 1.905688 10B2 2.114549 ; 11A1 2.362681 12A1 2.530729 11B2 2.768793 ; 13A1 2.777858 5B1 2.778067 4A2 2.804070 ; 5A2 2.974845 12B2 3.002608 13B2 3.319351 ; 14A1 3.594108 14B2 3.777164 15A1 4.062330 ; 15B2 4.514378 16A1 45.233612 16B2 45.429678 . Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 4, 1, 1, 3 ]. Energy converged. @DF-RHF Final Energy: -150.80654620986098. => Energetics <=. Nuclear Repulsion Energy = 37.8876016263036917; One-Electron Energy = -283.3602994176750940; Two-Electron Energy = 94.6661515815104053; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -150.8065462098609828. Saving occupied orbitals to File 180. *** tstop() called on mrabsence-Ubuntu at Mon Aug 22 01:48:07 2016; Module time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.5931. Electronic D",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/463:6409,Energy,Energy,6409,https://psicode.org,https://github.com/psi4/psi4/issues/463,1,['Energy'],['Energy']
Energy Efficiency,"8011 0.5815086085 0.0001370199; C 1.0350419647 2.1233908325 0.0000560557; H -0.7431145724 3.3030270884 -0.0000267393; C 3.4883230319 -0.6965617227 0.0001198798; H 3.0247551098 -2.8137455124 -0.0000114884; H 3.6468820938 1.4378475591 0.0002285887; H 1.7080534900 2.9727786324 0.0001481379; H 4.5601138853 -0.8547707550 0.0001982298; --; C -4.6677342923 -0.4812248419 -0.6036352502; C -4.6673152527 -0.4812811516 0.6042242192; H -4.6695688176 -0.4823291871 1.6698321709; H -4.6707474329 -0.4821684972 -1.6692408842; }. ################################################################################; ########################## Don't Edit Below This Line ##########################; ################################################################################. # Some general Psi4 settings; set {; freeze_core True # only treat valence electrons in expensive correlated calculations; scf_type df # Use density fitting with the HF part of the calculation; mp2_type df # Use density fitting with the MP2 part of the calculation; cc_type df # for coupled cluster calculations, use the fast density fitted code; pcg_convergence 9 # helps w/ coupled cluster accuracy; e_convergence 11 # Set the energy convergence a little more stringent; }. gradient(geom_opt_method); ```; ------------------. The last handful of lines for the failing output file are included below. The difference between a failed and a successful output file appears to be the last two lines that are bolded (the ones with DFHelper and in-core AOs):. ------------------; ```; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: (AUG-CC-PV(Q+D)Z AUX); Role: RIFIT; Keyword: DF_BASIS_MP2; atoms 1 entry O line 332 file /storage/hive/project/chem-sherrill/lkurfman3/.conda/envs/something_different/share/psi4/basis/aug-cc-pvqz-ri.gbs; atoms 2, 9, 11, 14, 16-19, 22-23 entry H line 30 file /storage/hive/project/chem-sherrill/lkurfman3/.conda/envs/something_different/share/psi4/basis/aug-cc-pvqz-ri.gbs; atoms 3-8, 1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3030:2611,energy,energy,2611,https://psicode.org,https://github.com/psi4/psi4/issues/3030,1,['energy'],['energy']
Energy Efficiency,"80344789; --; @Br 2.24215713 -6.77867982 5.71107037; @Br 0.05511550 -6.05660413 5.30313985; units angstrom; }. set {; basis aug-cc-pvdz; scf_type pk ; sapt_dft_grac_shift_a 0.05731; sapt_dft_grac_shift_b 0.01680; SAPT_DFT_FUNCTIONAL REVSCAN; }. energy('revscan'); ```. ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo; -------------------------; A 113 113; -------------------------; Total 113 113; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RKS iter SAD: -76.04124004396280 -7.60412e+01 0.00000e+00. Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin//psi4"", line 338, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2455, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1670, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 412, in scf_iterate; for engine_used in self.diis(Dnorm):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/scf_proc/subclass_methods.py"", line 111, in _RHF_diis; return self.diis_manager_.extrapolate(self.Fa(), Dnorm=Dnorm); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/diis.py"", line 407, in extrapolate; coeffs = m * initial_coefficient_function() + (",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2609:1447,energy,energy,1447,https://psicode.org,https://github.com/psi4/psi4/issues/2609,2,['energy'],['energy']
Energy Efficiency,"819 64A 1.013440 ; 65A 1.043686 66A 1.043717 67A 1.079379 ; 68A 1.110213 69A 1.243320 70A 1.248770 ; 71A 1.249096 72A 1.325143 73A 1.325198 ; 74A 1.395025 75A 1.397495 76A 1.442305 ; 77A 1.442695 78A 1.456897 79A 1.504332 ; 80A 1.639667 81A 1.641352 82A 1.668110 ; 83A 1.705574 84A 1.784410 85A 1.840841 ; 86A 1.841701 87A 1.932164 88A 2.090833 ; 89A 2.093816 90A 2.132735 91A 2.154837 ; 92A 2.180250 93A 2.253444 94A 2.481160 ; 95A 2.481328 96A 2.496342 97A 2.793920 ; 98A 2.848632 99A 2.969349 100A 2.969418 ; 101A 3.337134 102A 3.399821 103A 3.400315 ; 104A 3.528082 105A 4.155988 106A 5.476938 ; 107A 5.786400 108A 6.199146 109A 7.337445 ; 110A 8.481836 111A 8.867663 . Final Occupation by Irrep:; A ; DOCC [ 16 ]; NA [ 16 ]; NB [ 16 ]. @DF-RKS Final Energy: -43.40748214051649. => Energetics <=. Nuclear Repulsion Energy = 93.7538801503397679; One-Electron Energy = -245.6257702779177521; Two-Electron Energy = 115.6223560816475100; DFT Exchange-Correlation Energy = -7.1485657255274635; Empirical Dispersion Energy = -0.0093823690585561; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -43.4074821405164926. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : -0.0030364 0.0030278 -0.0000086; Dipole Y : 0.0588791 -0.0477754 0.0111036; Dipole Z : -0.0335702 0.0272773 -0.0062929; Magnitude : 0.0127629. ------------------------------------------------------------------------------------. *** tstop() called on agincourt.lan at Mon Sep 16 22:17:38 2024; Module time:; 	user time = 9.63 seconds = 0.16 minutes; 	system time = 0.15 seconds = 0.00 minutes; 	total time = 10 seco",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:13977,Energy,Energy,13977,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"89389000 4.189751000 3.137207000; F 0.482658000 2.259079000 3.612149000; F 2.731761000 2.111893000 3.070818000; C 1.992235000 1.241852000 8.156885000; H 1.485477000 1.176688000 9.116348000; C 3.332840000 1.154673000 7.834922000; H 4.206519000 0.999649000 8.462845000; N 1.311649000 1.424993000 6.973626000; C 2.188563000 1.435214000 5.957752000; H 1.944614000 1.560136000 4.907488000; N 3.421451000 1.288054000 6.467033000; C 4.624491000 1.154329000 5.644658000; H 4.896627000 0.092348000 5.590783000; H 4.378873000 1.527036000 4.641881000; H 5.430033000 1.755038000 6.090598000; C -0.139438000 1.464529000 6.788437000; H -0.534567000 0.445964000 6.893963000; H -0.329914000 1.835298000 5.773051000; H -0.575851000 2.145114000 7.533419000; F 2.193639000 -1.420051000 6.719505000; B 1.853598000 -1.602720000 5.368653000; F 1.684676000 -2.933106000 5.022169000; F 2.887295000 -1.000476000 4.545917000; F 0.639066000 -0.856861000 5.091564000; }; set globals {; basis aug-cc-pVDZ; scf_type direct; freeze_core True; guess sad; basis_guess 3-21G; }; energy('mrccsd(t)_l'); ```. End of output. ```; *** tstart() called on r3584; *** at Mon Feb 17 12:17:52 2014. PSI4 interface to MRCC:; Generating inputs for CCSD(T)_L. Automatically determined settings:; method 4; exlevel 3; fullname CCSD(T)_L. Orbital Information:. Frozen Core [ 24]; Active DOCC [ 70]; SOCC [ 0]; Frozen Virtual [ 0]. Total MOs [ 690]. Beginning integral transformation.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 5; ```. Stderr. ```; iwl_buf_init: Can't open file 33; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""<string>"", line 72, in <module>; File ""/apps/psicode/4.0b5.1/share/psi/python/driver.py"", line 570, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/apps/psicode/4.0b5.1/share/psi/python/proc.py"", line 2111, in run_mrcc; psi4.mrcc_generate_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/35:1924,energy,energy,1924,https://psicode.org,https://github.com/psi4/psi4/issues/35,1,['energy'],['energy']
Energy Efficiency,"8982; SCF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; Alpha-Alpha Contribution (a.u.) : -0.02415964277065; Alpha-Beta Contribution (a.u.) : -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimized now.; 	Transforming MOs to the semicanonical basis... ; Switching to the standard DF-MP2 computation... ; ```; are present in the reference output file but not in the output file that I posted. This is due to the if clause [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2648), which requires `std::fabs(DE) >= tol_Eod`, i.e., that the observed delta E is _greater than_ the user-specified convergence criteria. This situation is precisely what the fix to #1143 no longer allows for, so I must conclude that the code in that if suite is what is responsible for the discrepancy. It looks like this code in this if suite is re-computing the energy using the orbitals",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509:2989,Energy,Energy,2989,https://psicode.org,https://github.com/psi4/psi4/issues/1509,1,['Energy'],['Energy']
Energy Efficiency,"9 DIIS. ==> Post-Iterations <==. ```; Orbital Energies (a.u.); -----------------------. Doubly Occupied:. 1Ag -25.833682 2Ag -1.076019 1B3u -0.180947; 1B2u -0.180947 1B1u -0.180947. Virtual:. 2B2u 0.442532 2B3u 0.442532 2B1u 0.442532; 3Ag 0.485648 4Ag 1.228480 1B3g 1.228480; 5Ag 1.228480 1B2g 1.228480 1B1g 1.228480; 3B3u 1.526002 3B2u 1.526002 3B1u 1.526002; 6Ag 2.051155 7Ag 3.283338 2B2g 3.283338; 2B3g 3.283338 2B1g 3.283338 8Ag 3.283338; 4B2u 3.331721 4B3u 3.331721 1Au 3.331721; 4B1u 3.331721 5B3u 3.331721 5B2u 3.331721; 5B1u 3.331721 6B2u 5.672254 6B1u 5.672254; 6B3u 5.672254 7B1u 9.267994 7B2u 9.267994; 7B3u 9.267994 8B1u 9.267994 8B3u 9.267994; 2Au 9.267994 8B2u 9.267994 9Ag 9.745165; 3B2g 9.745165 3B1g 9.745165 3B3g 9.745165; 10Ag 9.745165 11Ag 10.965644. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; ```. Energy converged. @RHF Final Energy: -99.45080702230226. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -143.9965313656634294; Two-Electron Energy = 44.5457243433611438; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -99.4508070223022855. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-06 at Fri Jan 8 13:56:55 2016; Module time:; user time = 10.33 seconds = 0.17 minutes; system time = 0.28 seconds = 0.00 minutes; total time = 2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:7932,Energy,Energy,7932,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['Energy'],['Energy']
Energy Efficiency,"9) = 1.943108	 111.331905; 	 B(2,1,10) = 1.932189	 110.706283; 	 L(2,3,4) = 3.139524	 179.881489; 	 l(2,3,4) = 3.141593	 180.000000; 	 B(3,2,7) = 2.058814	 117.961348; 	 B(3,4,5) = 2.119850	 121.458466; 	 B(3,4,6) = 2.120178	 121.477254; 	 B(5,4,6) = 2.043155	 117.064152; 	 B(8,1,9) = 1.892072	 108.407726; 	 B(8,1,10) = 1.869872	 107.135787; 	 B(9,1,10) = 1.892170	 108.413330; 	 D(3,2,1,8) = 2.105760	 120.651167; 	 D(3,2,1,9) = -0.000265	 -0.015201; 	 D(3,2,1,10) = -2.106403	 -120.688028; 	 D(7,2,1,8) = -1.035039	 -59.303377; 	 D(7,2,1,9) = -3.141065	 -179.969745; 	 D(7,2,1,10) = 1.035983	 59.357428; 	 D(1,2,4,5) = -1.570902	 -90.006049; 	 D(1,2,4,6) = 1.571763	 90.055389; 	 D(5,4,2,7) = 1.569937	 89.950750; 	 D(6,4,2,7) = -1.570584	 -89.987812. 	Current energy : -155.9174379498. 	Generating empirical Hessian (Schlegel '84) for each fragment.; 	Taking RFO optimization step.; 	Going to follow RFO solution 1.; 	Using RFO vector 1.; 	Norm of target step-size 0.02433; 	Projected energy change by RFO approximation: -0.0001821031. 	Back-transformation to cartesian coordinates...; 	Could not converge backtransformation.; 	Using first guess instead. 	--- Internal Coordinate Step in ANG or DEG, aJ/ANG or AJ/DEG ---; 	 ---------------------------------------------------------------------------; 	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 1.505794 -0.034892 3.856575 5.362368; 	 2 R(1,8) = 1.092251 -0.013706 3.549391 4.641642; 	 3 R(1,9) = 1.088350 -0.010961 4.187384 5.275733; 	 4 R(1,10) = 1.092294 -0.013927 3.544911 4.637205; 	 5 R(2,3) = 1.301698 -0.004903 0.637751 1.939449; 	 6 R(2,7) = 1.086780 -0.014812 4.341946 5.428727; 	 7 R(3,4) = 1.301799 -0.000235 0.638104 1.939903; 	 8 R(4,5) = 1.083916 -0.015328 3.771054 4.854970; 	 9 R(4,6) = 1.083782 -0.014647 3.771929 4.855711; 	 10 B(1,2,3) = 125.158344 -0.000118 -72.392563 52.765781; 	 11 B(1,2,7) = 116.880293 0.000088 48.210719 165.091012; 	 12 B(2,1,8) = 110.707222 -0.000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020:4940,energy,energy,4940,https://psicode.org,https://github.com/psi4/psi4/issues/2020,1,['energy'],['energy']
Energy Efficiency,"9.45080702230226 -6.45173e-12 5.58591e-09 DIIS. ==> Post-Iterations <==. ```; Orbital Energies (a.u.); -----------------------. Doubly Occupied:. 1Ag -25.833682 2Ag -1.076019 1B3u -0.180947; 1B2u -0.180947 1B1u -0.180947. Virtual:. 2B2u 0.442532 2B3u 0.442532 2B1u 0.442532; 3Ag 0.485648 4Ag 1.228480 1B3g 1.228480; 5Ag 1.228480 1B2g 1.228480 1B1g 1.228480; 3B3u 1.526002 3B2u 1.526002 3B1u 1.526002; 6Ag 2.051155 7Ag 3.283338 2B2g 3.283338; 2B3g 3.283338 2B1g 3.283338 8Ag 3.283338; 4B2u 3.331721 4B3u 3.331721 1Au 3.331721; 4B1u 3.331721 5B3u 3.331721 5B2u 3.331721; 5B1u 3.331721 6B2u 5.672254 6B1u 5.672254; 6B3u 5.672254 7B1u 9.267994 7B2u 9.267994; 7B3u 9.267994 8B1u 9.267994 8B3u 9.267994; 2Au 9.267994 8B2u 9.267994 9Ag 9.745165; 3B2g 9.745165 3B1g 9.745165 3B3g 9.745165; 10Ag 9.745165 11Ag 10.965644. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; ```. Energy converged. @RHF Final Energy: -99.45080702230226. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -143.9965313656634294; Two-Electron Energy = 44.5457243433611438; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -99.4508070223022855. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-06 at Fri Jan 8 13:56:55 2016; Module time:; user time = 10.33 seconds = 0.17 minutes; system time = 0.2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:7890,Energy,Energy,7890,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['Energy'],['Energy']
Energy Efficiency,9285 2.27374e-13 6.54131e-11 DIIS; @RHF iter 16: -672.74460731489262 2.27374e-13 2.00408e-11 DIIS; @RHF iter 17: -672.74460731489285 -2.27374e-13 4.36522e-12 DIIS; @RHF iter 18: -672.74460731489307 -2.27374e-13 1.26829e-12 DIIS; @RHF iter 19: -672.74460731489410 -1.02318e-12 2.71243e-13 DIIS; @RHF iter 20: -672.74460731489353 5.68434e-13 7.18233e-14 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 ADIIS/DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 ADIIS/DIIS; @RHF iter 3: -672.74373946371918 -2.93172e-02 6.13615e-04 ADIIS/DIIS; @RHF iter 4: -672.74452727814617 -7.87814e-04 1.92071e-04 ADIIS/DIIS; @RHF iter 5: -672.74459671900468 -6.94409e-05 5.54299e-05 DIIS; @RHF iter 6: -672.74460689054501 -1.01715e-05 1.01141e-05 DIIS; @RHF iter 7: -672.74460730521071 -4.14666e-07 1.79146e-06 DIIS; @RHF iter 8: -672.74460731376098 -8.55027e-09 7.54369e-07 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 ADIIS/DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 ADIIS/DIIS; @RHF iter 3: -672.74373946371918 -2.93172e-02 6.13615e-04 ADIIS/DIIS; @RHF iter 4: -672.74452727814617 -7.87814e-04 1.92071e-04 ADIIS/DIIS; @RHF iter 5: -672.74459671900468 -6.94409e-05 5.54299e-05 DIIS; @RHF iter 6: -672.74460689054501 -1.01715e-05 1.01141e-05 DIIS; @RHF iter 7: -672.74460730521071 -4.14666e-07 1.79146e-06 DIIS; @RHF iter 8: -672.74460731376098 -8.55027e-09 7.54369e-07 DIIS; @RHF iter 9: -672.74460731474016 -9.79185e-10 2.16800e-07 DIIS; @RHF iter 10: -672.74460731487568 -1.35515e-10 7.07155e-08 DIIS; @RHF iter 11: -672.74460731489148 -1.58025e-11 1.29083e-08 DIIS; @RHF iter 12: -672.74460731489262 -1.13687e-12 2.70093e-09 DIIS; @RHF iter 13: -672.74460731489307 -4.54747e-13 6.42115e-10 DIIS; @RHF iter 14: -672.74460731489330 -2.27374e-13 2.0280,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2446:3746,Energy,Energy,3746,https://psicode.org,https://github.com/psi4/psi4/pull/2446,1,['Energy'],['Energy']
Energy Efficiency,"9708252; O -2.283581256866455 -2.8034048080444336 1.8416125774383545; C -3.1216139793395996 -4.092474460601807 0.022369852289557457; H -2.5071558952331543 -4.992997646331787 -0.06683211773633957; H -3.9806551933288574 -4.315130233764648 0.6616312265396118; H -3.4815473556518555 -3.7952513694763184 -0.9667707681655884; H -1.818267822265625 -2.5147225856781006 -1.3233563899993896; C -0.2652755677700043 -0.47430306673049927 -1.2846300601959229; C 0.5650341510772705 0.6324429512023926 -1.1073341369628906; H 1.0022953748703003 1.1210383176803589 -1.9738258123397827; H -0.46503451466560364 -0.8350303173065186 -2.2904675006866455; H -0.9999359846115112 -1.117483139038086 1.977584958076477; H 0.46812179684638977 0.8390328884124756 2.2878639698028564; H 1.9390827417373657 2.4920878410339355 -0.5236388444900513""""""); molecule.set_molecular_charge(0); molecule.set_multiplicity(1); psi4.set_options({""reference"":""uhf""}). print(""calculate energy...""); energy, wfn = psi4.energy(""HF3c/"", return_wfn=True); print(""converting energy ...""); kcal_energy = energy * psi4.constants.hartree2kcalmol; print(""energy {:.2f} kcal/mol"".format(kcal_energy)); ```; Specifically the output I get is ; ```; set output file path; create molecule...; calculate energy...; Segmentation fault: 11; ```; I tried to attach the .dat file, but github wouldn't let me, but this is end of it:; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: MINIX; Blend: MINIX; Number of shells: 42; Number of basis functions: 64; Number of Cartesian functions: 64; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (MINIX AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 8 entry O line 318 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 2-5, 7, 9, 1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593:2531,energy,energy,2531,https://psicode.org,https://github.com/psi4/psi4/issues/2593,2,['energy'],['energy']
Energy Efficiency,"97; H -1.83355 -0.33077 0.86231; H 0.60674 -0.03396 -0.00063; H 1.94052 -0.78000 0.00022; """"""; add_input = ""\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molecule_string + add_input); N_active = 11 # Define the total number of active MOs.; N_frozen = 4 # Define the number of frozen occupied MO; N_virtual = 30 # Define the total number of virtual MOs that will be discarded; psi4.set_options({ 'ACTIVE' : [ N_active ],\; 'FROZEN_DOCC' : [ N_frozen ],\; 'FROZEN_UOCC' : [ N_virtual],\; 'DIAG_METHOD' : 'DAVIDSON',\; 'CI_MAXITER' : 200\; }). # assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 100, in mcsc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1871:1433,energy,energy,1433,https://psicode.org,https://github.com/psi4/psi4/issues/1871,1,['energy'],['energy']
Energy Efficiency,"992473; N 1.3008767173 -0.9287768925 1.0635839133; C -1.2886186814 2.2834208702 -1.2181338272; C -0.7050865946 3.1821062059 -0.3604271375; C 0.3534920334 2.8195308082 0.5207059889; C 0.2177419816 -2.6945497951 -0.9662726987; C 1.2181378357 -3.0250490115 -0.0961995911; C 1.7180430400 -2.1229929449 0.8899899444; C 1.9393113446 1.3525171542 1.5367699106; C 1.8333722479 -0.0604962603 2.1055467704; H 0.8908035853 3.6241374839 1.0039698993; H 2.5024254412 -2.4854165868 1.5399007635; H 2.7858100041 1.4098930461 0.8661311665; H 1.1490336627 -0.0652673733 2.9502674019; H 2.0638511115 2.0769335299 2.3353274192; H 2.7993768711 -0.4085469833 2.4534782102; H -1.9892347032 2.6686747336 -1.9454961675; H -0.0986239324 -3.4441353556 -1.6764363233; Cl 1.8821942342 0.3098852687 -1.6599082362; O -1.1395010178 -0.1703680057 0.9263551082; H -0.9312248148 4.2251864392 -0.4696082573; H 1.6695378989 -3.9953914470 -0.1633815245; }. # Run SCF, initialize in smaller basis; set basis 6-31G*; set basis_guess 3-21G; set scf_type pk; set soscf true; scf_e, scf_wfn = energy('scf', return_wfn=True). # Get CISD active space guess. 69 occupied orbitals, out of which 32; # are core electrons. Leaves No=37 orbitals, excitable into Nv=204; # virtuals. Let's take only the first 50 virtuals; set restricted_docc [32]; set restricted_uocc [154]; set qc_module detci; set nat_orbs true; ci_e, ci_wfn = energy('cisd', ref_wfn=scf_wfn, return_wfn=True); ```; segfaults after the 20 most important determinants have been written to output. Backtrace gives; ```; #0 __GI___libc_free (mem=mem@entry=0x550020205841) at malloc.c:2963; #1 0x00007f6080ce0a78 in psi::detci::CIWavefunction::print_vector (this=0x55948f151ec0, vec=std::shared_ptr (count 4, weak 0) 0x559528f71aa0, root=0); at /home/work/psi4/psi4.susi/psi4/src/psi4/detci/ciwave.cc:683; #2 0x00007f6080706283 in pybind11::cpp_function::cpp_function<void, psi::detci::CIWavefunction, std::shared_ptr<psi::detci::CIvect>, int, pybind11::name, pybind11::is_method, pybin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/606:1255,energy,energy,1255,https://psicode.org,https://github.com/psi4/psi4/issues/606,1,['energy'],['energy']
Energy Efficiency,": 'cc-pvdz',; 'df_basis_scf': 'cc-pvdz-jkfit',; 'df_basis_mp2': 'cc-pvdz-ri',; # not necessary to specify df_basis* for most basis sets; 'scf_type': 'df',; 'guess': 'sad',; 'd_convergence': 11,; }); ; > e_cp = psi4.energy('mp2', bsse_type='cp'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:112: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:415: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver_nbody.py:303: in nbody_gufunc; ptype_dict[pair] = func(method_string, molecule=current_mol, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . name = 'mp2', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f6fc9d20298>}, reference = 'RHF', mtd_type = 'DF', module = 'DETCI'; func = None. def select_mp2(name, **kwargs):; """"""Function selecting the algorithm for a MP2 energy call; and directing to specified or best-performance default modules.; ; """"""; reference = core.get_option('SCF', 'REFERENCE'); mtd_type = core.get_global_option('MP2_TYPE'); module = core.get_global_option('QC_MODULE'); # Considering only [df]occ/dfmp2/detci/fnocc; ; # MP2_TYPE exists largely for py-side reasoning, so must manage it; # here rather than passing to c-side unprepared for validation; ; func = None; if reference == 'RHF':; if mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module == 'FNOCC':; func = run_fnocc; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module == 'OCC':; fun",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:33661,energy,energy,33661,https://psicode.org,https://github.com/psi4/psi4/issues/820,2,['energy'],['energy']
Energy Efficiency,":56); ==98805== by 0x29697716: test (plugin.cc:134); ==98805== by 0x5FDD804: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5FE0666: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5F6A896: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x4FDC86: cfunction_call (methodobject.c:543); ==98805== by 0x4F741A: _PyObject_MakeTpCall (call.c:215); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:112); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:99); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:123); ==98805== by 0x4F34C5: UnknownInlinedFun (ceval.c:5893); ==98805== by 0x4F34C5: _PyEval_EvalFrameDefault (ceval.c:4181); ==98805== by 0x4FE0CE: UnknownInlinedFun (pycore_ceval.h:46); ==98805== by 0x4FE0CE: UnknownInlinedFun (ceval.c:5067); ==98805== by 0x4FE0CE: _PyFunction_Vectorcall (call.c:342); ==98805== If you believe this happened as a result of a stack; ==98805== overflow in your program's main thread (unlikely but; ==98805== possible), you can try to increase the size of the; ==98805== main thread stack using the --main-stacksize= flag.; ==98805== The main thread stack size used in this run was 8388608.; ==98805== ; ==98805== HEAP SUMMARY:; ==98805== in use at exit: 20,461,418 bytes in 40,150 blocks; ==98805== total heap usage: 393,696 allocs, 353,546 frees, 108,089,532 bytes allocated; ==98805== ; ==98805== LEAK SUMMARY:; ==98805== definitely lost: 0 bytes in 0 blocks; ==98805== indirectly lost: 0 bytes in 0 blocks; ==98805== possibly lost: 480,565 bytes in 454 blocks; ==98805== still reachable: 19,980,817 bytes in 39,694 blocks; ==98805== suppressed: 36 bytes in 2 blocks; ==98805== Rerun with --leak-check=full to see details of leaked memory; ==98805== ; ==98805== For lists of detected and suppressed errors, rerun with: -s; ==98805== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0); Segmentation fault (core dumped); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3200:4075,allocate,allocated,4075,https://psicode.org,https://github.com/psi4/psi4/issues/3200,1,['allocate'],['allocated']
Energy Efficiency,":; """"""sapt1""""""; #! SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF; #! and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates.; ; Eref = [ 85.189064196429101, -0.00359915058, 0.00362911158,; -0.00083137117, -0.00150542374, -0.00230683391 ]; ; ethene_ethyne = psi4.geometry(""""""; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom; """"""); ; # this molecule will crash test if molecule passing broken; barrier = psi4.geometry(""""""; 0 1; He; """"""); ; psi4.set_options({; ""basis"": ""cc-pvdz"",; ""guess"": ""sad"",; ""scf_type"": ""df"",; ""sad_print"": 2,; ""d_convergence"": 11,; ""puream"": True,; ""print"": 1}); ; > psi4.energy('sapt0', molecule=ethene_ethyne). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:158: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:3200: in run_sapt; monomerA_wfn = scf_helper('RHF', molecule=monomerA, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4a5c830>, funct",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:37121,energy,energy,37121,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,":; Ntotal = 18.0000006848 ; deviation = 6.848e-07. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. 1A -9.811979 2A -9.811957 3A -0.686974; 4A -0.549234 5A -0.403737 6A -0.403737; 7A -0.338480 8A -0.310133 9A -0.310133. Virtual:. 10A 0.023031 11A 0.076058 12A 0.080886; 13A 0.080887 14A 0.110657 15A 0.110658; 16A 0.173580 17A 0.360176 18A 0.370157; 19A 0.370158 20A 0.455135 21A 0.455137; 22A 0.543892 23A 0.571369 24A 0.610757; 25A 0.610759 26A 0.613674 27A 0.623635; 28A 0.623637 29A 0.682101 30A 0.875957; 31A 1.031832 32A 1.031833 33A 1.292103; 34A 1.292104 35A 1.442476 36A 1.448632; 37A 1.662612 38A 1.675074 39A 1.675078; 40A 1.685189 41A 1.685192 42A 1.745843; 43A 1.745846 44A 1.748838 45A 1.953626; 46A 1.953628 47A 2.104265 48A 2.256310; 49A 2.256312 50A 2.286838 51A 2.457344; 52A 2.457345 53A 2.522627 54A 2.738613; 55A 2.803606 56A 2.803611 57A 2.896284; 58A 2.896288 59A 5.038202 60A 5.264241. Final Occupation by Irrep:; A; DOCC [ 9 ]; NA [ 9 ]; NB [ 9 ]. @DF-RKS Final Energy: -79.32647565991985. => Energetics <=. Nuclear Repulsion Energy = 42.0362430486042129; One-Electron Energy = -188.7935335064416904; Two-Electron Energy = 79.9597081286466675; DFT Exchange-Correlation Energy = -12.5288933307290371; Empirical Dispersion Energy = 0.0000000000000000; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -79.3264756599198506. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : 0.0000185 -0.0000189 -0.0000004; Dipole Y : -0.0000204 0.0000189 -0.0000015; Dipole Z : -0.0000155 0.0000189 0.0000034; Magnitude : 0.0000037. --------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:8456,Energy,Energy,8456,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['Energy'],['Energy']
Energy Efficiency,":__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >); psi::DFTGrid::DFTGrid(std::shared_ptr<psi::Molecule>, std::shared_ptr<psi::BasisSet>, psi::Options&). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. Are there plans to include support for the SG-1 grid in Psi4? If not, are there any alternative grids that do work? _Removing_ the SG-1 option from the input file simply results in a segfault. The input file is below:. ```; memory 13500 Mb; molecule {; 0 1; C 4.067369 -2.240127 -0.129252; C 4.972458 -1.390566 3.098494; C 2.921005 -1.630865 0.608144; C 2.878286 -1.651992 2.002187; C 0.763829 -0.484138 1.955055; C 1.885141 -1.036307 -0.112440; C 1.799700 -1.078640 2.675676; C 0.806556 -0.463011 0.561006; O 3.881939 -2.228505 2.721026; Br -0.697406 0.294370 2.866925; H 4.856028 -1.495441 -0.288527; H 4.492277 -3.085465 0.426246; H 3.750214 -2.627370 -1.105706; H 5.701654 -1.973847 3.666076; H 4.602203 -0.560418 3.705314; H 5.446916 -0.996749 2.196547; H 1.908587 -1.015574 -1.198747; H 1.775186 -1.100057 3.762739; H 0.006619 -0.004988 -0.014918; }; set dft_radial_points 99; set dft_spherical_points 590; set dft_grid_name SG1; set dft_nuclear_scheme treutler; set dft_radial_scheme EM; set basis def2-TZVPPD; ENE=energy(""wB97M-V""); ```. I'm running with a slightly old commit from 09/19 (92b4c55b7171ba48520f91b5344cdcfe99cedc2f). My apologies if the problem has already been fixed in a more recent commit, though it doesn't seem like it based on reading through the diffs of commits with relevant messages. Thanks!; Aditya",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/827:2579,energy,energy,2579,https://psicode.org,https://github.com/psi4/psi4/issues/827,1,['energy'],['energy']
Energy Efficiency,"; - [x] [dfmp2](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_dfmp2.rst) pretty simple, so why not; - [x] Other changes to docs contents:; - [x] instead of detailed capabilities getting lost under notes in the TOC, moving it to a separate page, to be followed by notes.; - [x] the main hand-generated capabilities table in introduction.rst tried to do a lot in specifying allowed refs, types, dertypes, and parallelism, including by specifying exceptions in footnotes. This discouraged updating since it was hard to know what was right w/o extensive testing and/or it was easier to glide over details. The hand-gen table has been replaced to be more general listing maximum capabilities, the parallelism column has been removed, and the complementary auto-gen summary table has been added; - [x] the main hand-generated capabilities table in introduction.rst and the docstring methods table in driver.py (shows up in https://psicode.org/psi4manual/master/energy.html etc.) have been reconciled with the current state of the procedures table. Devs are now admonished to update all three concurrently :-); - [x] Some investigation and searching of CDS's memory and comparison to GAMESS concluded that for arbitrary-order MPn and ZAPTn through DETCI that the written docs were right (MPn for RHF only and ZAPTn for ROHF only) and what was allowed was wrong (both for both). This has been reworked to match the written docs and various UpgradeHelpers have been positioned. Some tests had to change. Note that ZAPTn reduces to MPn for RHF, and DETCI was producing that correctly. However, DETCI MPn for ROHF wasn't producing anything we had confidence in, so it's good to get that disabled. Ugur's ROHF MP2 matches GAMESS `ospt=rmp` and DETCI's ROHF ZAPT2 matches GAMESS `ospt=zapt`, so I think this puts #311 to rest.; - [x] As reported in #2634, MRCC wasn't playing nicely with distributed driver due to the two-stage call-with-mrmtd then intercept-an",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:5052,energy,energy,5052,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['energy'],['energy']
Energy Efficiency,"; 183A 1.950596 184A 1.955082 185A 1.962510 ; 186A 1.987883 187A 1.992233 188A 2.021730 ; 189A 2.047832 190A 2.054449 191A 2.063391 ; 192A 2.073995 193A 2.089810 194A 2.098059 ; 195A 2.119505 196A 2.136885 197A 2.139951 ; 198A 2.143625 199A 2.144516 200A 2.149966 ; 201A 2.153416 202A 2.160845 203A 2.177753 ; 204A 2.193917 205A 2.249401 206A 2.259315 ; 207A 2.260884 208A 2.264073 209A 2.270343 ; 210A 2.290240 211A 2.296245 212A 2.304338 ; 213A 2.316737 214A 2.379290 215A 2.453589 ; 216A 2.461743 217A 2.495632 218A 2.498678 ; 219A 2.519294 220A 2.562708 221A 2.608244 ; 222A 2.726412 223A 2.739216 224A 2.753717 ; 225A 2.766537 226A 2.769494 227A 2.781755 ; 228A 2.786035 229A 2.802889 230A 2.877816 ; 231A 2.934217 232A 2.946283 233A 2.971176 ; 234A 2.978125 235A 3.021450 236A 3.025068 ; 237A 3.055308 238A 3.105407 239A 3.192416 ; 240A 3.230170 241A 3.237091 242A 3.270263 ; 243A 3.501427 244A 3.509120 245A 3.988816 ; 246A 4.002956 . Final Occupation by Irrep:; A ; DOCC [ 47 ]; ```. Energy converged. @RHF Final Energy: -535.97469065986820. => Energetics <=. ```; Nuclear Repulsion Energy = 697.1131782964378090; One-Electron Energy = -2106.2189353611356637; Two-Electron Energy = 873.1310664048263561; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; Total Energy = -535.9746906598714986; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density density matrix; Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on shukla-pc.localdomain at Thu Oct 9 10:48:21 2014; Module time:; user time = 515.17 seconds = 8.59 minutes; system time = 10.04 seconds = 0.17 minutes; total time = 527 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61:13648,Energy,Energy,13648,https://psicode.org,https://github.com/psi4/psi4/issues/61,1,['Energy'],['Energy']
Energy Efficiency,"; 183A 1.950596 184A 1.955082 185A 1.962510 ; 186A 1.987883 187A 1.992233 188A 2.021730 ; 189A 2.047832 190A 2.054449 191A 2.063391 ; 192A 2.073995 193A 2.089810 194A 2.098059 ; 195A 2.119505 196A 2.136885 197A 2.139951 ; 198A 2.143625 199A 2.144516 200A 2.149966 ; 201A 2.153416 202A 2.160845 203A 2.177753 ; 204A 2.193917 205A 2.249401 206A 2.259315 ; 207A 2.260884 208A 2.264073 209A 2.270343 ; 210A 2.290240 211A 2.296245 212A 2.304338 ; 213A 2.316737 214A 2.379290 215A 2.453589 ; 216A 2.461743 217A 2.495632 218A 2.498678 ; 219A 2.519294 220A 2.562708 221A 2.608244 ; 222A 2.726412 223A 2.739216 224A 2.753717 ; 225A 2.766537 226A 2.769494 227A 2.781755 ; 228A 2.786035 229A 2.802889 230A 2.877816 ; 231A 2.934217 232A 2.946283 233A 2.971176 ; 234A 2.978125 235A 3.021450 236A 3.025068 ; 237A 3.055308 238A 3.105407 239A 3.192416 ; 240A 3.230170 241A 3.237091 242A 3.270263 ; 243A 3.501427 244A 3.509120 245A 3.988816 ; 246A 4.002956 . Final Occupation by Irrep:; A ; DOCC [ 47 ]; ```. Energy converged. @RHF Final Energy: -535.97469065986911. => Energetics <=. ```; Nuclear Repulsion Energy = 697.1131782964378090; One-Electron Energy = -2106.2189353611738625; Two-Electron Energy = 873.1310664048628496; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; Total Energy = -535.9746906598732039; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density density matrix; Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: -0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on shukla-pc.localdomain at Thu Oct 16 11:16:51 2014; Module time:; user time = 522.41 seconds = 8.71 minutes; system time = 15.59 seconds = 0.26 minutes; total time = 594",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:12276,Energy,Energy,12276,https://psicode.org,https://github.com/psi4/psi4/issues/62,1,['Energy'],['Energy']
Energy Efficiency,"; 2 -75.7907030487 -6.46e-05 6.80e-04 3.45e-03 1.29e-06 ; 3 -75.7907190240 -1.60e-05 4.26e-04 1.69e-03 5.72e-07 ; 4 -75.7907244154 -5.39e-06 2.25e-04 1.39e-03 2.96e-07 ; 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; Alpha-Alpha Contribution (a.u.) : -0.02415964277065; Alpha-Beta Contribution (a.u.) : -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509:2251,Energy,Energy,2251,https://psicode.org,https://github.com/psi4/psi4/issues/1509,1,['Energy'],['Energy']
Energy Efficiency,"; 53A 0.728722 54A 0.731604 55A 0.750409 ; 56A 0.785076 57A 0.814891 58A 0.822500 ; 59A 0.837421 60A 0.837786 61A 0.896368 ; 62A 0.911715 63A 0.939819 64A 1.013440 ; 65A 1.043686 66A 1.043717 67A 1.079379 ; 68A 1.110213 69A 1.243320 70A 1.248770 ; 71A 1.249096 72A 1.325143 73A 1.325198 ; 74A 1.395025 75A 1.397495 76A 1.442305 ; 77A 1.442695 78A 1.456897 79A 1.504332 ; 80A 1.639667 81A 1.641352 82A 1.668110 ; 83A 1.705574 84A 1.784410 85A 1.840841 ; 86A 1.841701 87A 1.932164 88A 2.090833 ; 89A 2.093816 90A 2.132735 91A 2.154837 ; 92A 2.180250 93A 2.253444 94A 2.481160 ; 95A 2.481328 96A 2.496342 97A 2.793920 ; 98A 2.848632 99A 2.969349 100A 2.969418 ; 101A 3.337134 102A 3.399821 103A 3.400315 ; 104A 3.528082 105A 4.155988 106A 5.476938 ; 107A 5.786400 108A 6.199146 109A 7.337445 ; 110A 8.481836 111A 8.867663 . Final Occupation by Irrep:; A ; DOCC [ 16 ]; NA [ 16 ]; NB [ 16 ]. @DF-RKS Final Energy: -43.40748214051649. => Energetics <=. Nuclear Repulsion Energy = 93.7538801503397679; One-Electron Energy = -245.6257702779177521; Two-Electron Energy = 115.6223560816475100; DFT Exchange-Correlation Energy = -7.1485657255274635; Empirical Dispersion Energy = -0.0093823690585561; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -43.4074821405164926. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : -0.0030364 0.0030278 -0.0000086; Dipole Y : 0.0588791 -0.0477754 0.0111036; Dipole Z : -0.0335702 0.0272773 -0.0062929; Magnitude : 0.0127629. ------------------------------------------------------------------------------------. *** tstop() called on agincourt.lan at ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:13825,Energy,Energy,13825,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"; 53A 0.841985 54A 0.842142 55A 0.861839 ; 56A 0.915524 57A 0.915721 58A 0.916478 ; 59A 0.958476 60A 0.958532 61A 0.986377 ; 62A 1.033004 63A 1.062720 64A 1.062956 ; 65A 1.089893 66A 1.194156 67A 1.194624 ; 68A 1.260967 69A 1.272575 70A 1.297678 ; 71A 1.297926 72A 1.359441 73A 1.359571 ; 74A 1.502783 75A 1.503340 76A 1.596335 ; 77A 1.617548 78A 1.617829 79A 1.669742 ; 80A 1.669811 81A 1.778057 82A 1.778197 ; 83A 1.861590 84A 1.904708 85A 1.905302 ; 86A 1.932619 87A 1.933506 88A 1.984745 ; 89A 2.223699 90A 2.225628 91A 2.225668 ; 92A 2.494202 93A 2.559162 94A 2.559231 ; 95A 2.694381 96A 2.694493 97A 2.699523 ; 98A 2.989001 99A 2.989072 100A 3.239982 ; 101A 3.409966 102A 3.418072 103A 3.418110 ; 104A 3.811009 105A 4.348714 106A 5.581608 ; 107A 6.661779 108A 7.322224 109A 7.404171 ; 110A 8.435277 111A 8.975985 . Final Occupation by Irrep:; A ; DOCC [ 16 ]; NA [ 16 ]; NB [ 16 ]. @DF-RKS Final Energy: -42.04595197988089. => Energetics <=. Nuclear Repulsion Energy = 93.4549456916637951; One-Electron Energy = -246.7432156290641103; Two-Electron Energy = 118.6378186354417608; DFT Exchange-Correlation Energy = -7.3862953798450999; Empirical Dispersion Energy = -0.0092052980772349; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -42.0459519798808898. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : -7.8209495 8.4115446 0.5905951; Dipole Y : -2.3244093 2.4977096 0.1733003; Dipole Z : -4.0798888 4.3904336 0.3105448; Magnitude : 0.6894009. ------------------------------------------------------------------------------------. *** tstop() called on agincourt.lan at Mo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:25725,Energy,Energy,25725,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"; @DF-RHF iter 10: -150.80654620986070 -1.62004e-11 2.35473e-08 DIIS; @DF-RHF iter 11: -150.80654620986098 -2.84217e-13 4.64793e-09 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A1 -20.621389 1B2 -20.621057 2A1 -1.500485 ; 2B2 -1.213674 3A1 -0.787485 1B1 -0.638605 ; 4A1 -0.611527 3B2 -0.571415 1A2 -0.448360 . Virtual: . 5A1 0.196427 4B2 0.233677 5B2 0.363534 ; 6B2 0.797460 2B1 0.838809 6A1 0.844012 ; 7A1 0.899194 2A2 0.923759 8A1 1.027087 ; 7B2 1.058856 9A1 1.124050 8B2 1.149224 ; 9B2 1.493845 3B1 1.719758 10A1 1.729020 ; 3A2 1.885626 4B1 1.905688 10B2 2.114549 ; 11A1 2.362681 12A1 2.530729 11B2 2.768793 ; 13A1 2.777858 5B1 2.778067 4A2 2.804070 ; 5A2 2.974845 12B2 3.002608 13B2 3.319351 ; 14A1 3.594108 14B2 3.777164 15A1 4.062330 ; 15B2 4.514378 16A1 45.233612 16B2 45.429678 . Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 4, 1, 1, 3 ]. Energy converged. @DF-RHF Final Energy: -150.80654620986098. => Energetics <=. Nuclear Repulsion Energy = 37.8876016263036917; One-Electron Energy = -283.3602994176750940; Two-Electron Energy = 94.6661515815104053; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -150.8065462098609828. Saving occupied orbitals to File 180. *** tstop() called on mrabsence-Ubuntu at Mon Aug 22 01:48:07 2016; Module time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.5931. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.2113. Dipole Moment: (a.u.); X: 0.0000 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/463:6506,Energy,Energy,6506,https://psicode.org,https://github.com/psi4/psi4/issues/463,1,['Energy'],['Energy']
Energy Efficiency,"; File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 680, in pyconstruct; verbose=verbose); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 862, in construct; shells, msg, ecp_shells, ecp_msg, ecp_ncore = parser.parse(entry, lines); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasissetparser.py"", line 304, in parse; contraction = float(what.group(3)). ValueError: could not convert string to float: '0.6757974388D-01'. Printing out the relevant lines from the Psithon --> Python processed input file:; ****; """"""; return basstrings; qcdb.libmintsbasisset.basishorde['ANONYMOUSA2D5A0E2'] = basisspec_psi4_yo__anonymousa2d5a0e2; core.set_global_option(""BASIS"", ""anonymousa2d5a0e2""); --> e, wfn = energy('scf', return_wfn=True). !--------------------------------------------------------!; ! !; ! could not convert string to float: '0.6757974388D-01' !; ! !; !--------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1996:2997,energy,energy,2997,https://psicode.org,https://github.com/psi4/psi4/issues/1996,1,['energy'],['energy']
Energy Efficiency,"; Keyword: DF_BASIS_MP2; atoms 1-2 entry O line 208 file /opt/psi/4/master/share/psi4/basis/heavy-aug-cc-pvdz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; ROHF-MBPT(2) Wavefunction, 4 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 144; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 2 9 7 37 37 0; BETA 2 7 5 39 39 0; --------------------------------------------------------. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -149.6217688382015183 [Eh]; Singles Energy = -0.0130981432734322 [Eh]; Same-Spin Energy = -0.1180463523157988 [Eh]; Opposite-Spin Energy = -0.2655370704826780 [Eh]; Correlation Energy = -0.3966815660719090 [Eh]; Total Energy = -150.0184504042734375 [Eh]; -----------------------------------------------------------; ================> DF-SCS-MP2 Energies <==================; -----------------------------------------------------------; SCS Same-Spin Scale = 0.3333333333333333 [-]; SCS Opposite-Spin Scale = 1.2000000000000000 [-]; SCS Same-Spin Energy = -0.0393487841052663 [Eh]; SCS Opposite-Spin Energy = -0.3186444845792136 [Eh]; SCS Correlation Energy = -0.3710914119579120 [Eh]; SCS Total Energy = -149.9928602501594241 [Eh]; -----------------------------------------------------------; ```. I haven't run any other CBS hessians to see if the issue appears where psi4 might have analytic gradients or something.; I also have not tired passing `mp2_type df` into the Delta wfn explicitly. I assume that would perform the desired calculation but I believe the calculation requested in the input should perform conv",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:7410,Energy,Energy,7410,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['Energy'],['Energy']
Energy Efficiency,; Number of virtual orbitals in truncated space: 640. ==> Memory <==. Total memory requirements: 78825.79 mb; 3-index integrals: 10109.75 mb; CCSD intermediates: 68716.04 mb. <<< warning! >>> switched to low-memory (t) algorithm. memory requirements for CCSD(T): 36451.32 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 26; Number of active occupied orbitals: 74; Number of active virtual orbitals: 640; Number of frozen virtual orbitals: 38. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 393. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -3.045395864164; SS MP2 FNO correction: -1.111907331006; MP2 FNO correction: -4.157303195170. OS MP2 correlation energy: -3.045395864164; SS MP2 correlation energy: -1.111907331006; MP2 correlation energy: -4.157303195170; * MP2 total energy: -1500.355601695273. OS CCSD correlation energy: -3.045395864164; SS CCSD correlation energy: -1.111907331006; CCSD correlation energy: -4.157303195170; * CCSD total energy: -1500.355601695273. Total time for CCSD iterations: 3404.15 s (user); 270.93 s (system); 607 s (total). Time per iteration: inf s (user); inf s (system); inf s (total). *** tstop() called on r3546 at Mon Feb 10 14:43:17 2014; Module time:; user time = 31046.70 seconds = 517.45 minutes; system time = 945.63 seconds = 15.76 minutes; total time = 5144 seconds = 85.73 minutes; Total time:; user time = 33202.74 seconds = 553.38 minutes; system time = 990.31 seconds = 16.51 minutes; total time = 5317 seconds = 88.62 minutes. *** tstart() called on r3546; *** at Mon Feb 10 14:57:28 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_t,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34:2099,energy,energy,2099,https://psicode.org,https://github.com/psi4/psi4/issues/34,1,['energy'],['energy']
Energy Efficiency,"; no_com; }. gradient(""PBE0""). Chrgfield = QMMM(); Chrgfield.extern.addCharge(-0.834,1.649232019048,0.0,-2.356023604706); Chrgfield.extern.addCharge(0.417,0.544757019107,0.0,-3.799961446760); Chrgfield.extern.addCharge(0.417,0.544757019107,0.0,-0.912085762652); psi4.set_global_option_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. 2) A helium atom with a point charge (q=-1) 1 Angstrom away. ```; memory 1 gb; set reference rks; set basis 6-31G*; set guess sad; set scf_type df. molecule QMregion {; 0 1; He 0.0 0.0 0.0; symmetry c1; no_reorient; no_com; }. gradient(""PBE0""). Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1,0.0,0.0,1.8897261245650618); psi4.set_global_option_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. For test 1, the gradient from the water and the water+charges are different, but they do not agree with the forces returned by an equivalent calculation with Gaussian. The isolated water molecule has gradients that agree with the Gaussian forces, but once the charges are added the Gaussian and PSI4 calculations return different results. For test 2, the PSI4 gradient is zero for the for the helium with and without the point charge. The charge has no effect on the results. When I repeated the calculation with Gaussian, there was a finite force on the helium atom when a charge was included. Here are the gradient results I pulled from the output files:. ```; Water+Charges (TIP3P charges: O->-0.834, H->0.417). PSI4 gradient without charges:; 1 -0.000345685156 -0.000000503248 -0.001768512746; 2 0.000171019827 0.000099064969 0.000874930893; 3 0.000170945942 -0.000098562011 0.000874553581. Gaussian forces without charges:; 1 8 0.000342119 0.000000502 0.001755656; 2 1 -0.000171096 -0.000103970 -0.000878017; 3 1 -0.000171022 0.000103468 -0.000877640. PSI4 gradient with charges:; 1 0.001872262723 -0.000000506498 -0.002344911788; 2 -0.000937982580 -0.003306842432 0.001163140925; 3 -0.000938055973 0.003307348640 0.001162761678. Gaussian forces wi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/184:1557,charge,charges,1557,https://psicode.org,https://github.com/psi4/psi4/issues/184,1,['charge'],['charges']
Energy Efficiency,"; optimize('scf', dertype='gradient'); freq('scf', dertype='gradient'). #grep '~' hess0.out; 1 -75.93350508 -7.59e+01 1.35e-01 1.14e-01 o 3.44e-01 2.89e-01 o ~; 2 -76.01434847 -8.08e-02 6.88e-02 5.91e-02 o 2.89e-01 2.51e-01 o ~; 3 -76.00936003 4.99e-03 1.27e-01 1.04e-01 o 1.83e-01 1.51e-01 o ~; 4 -76.02647334 -1.71e-02 1.62e-02 1.35e-02 o 4.78e-02 4.32e-02 o ~; 5 -76.02694403 -4.71e-04 6.79e-03 5.64e-03 o 1.47e-02 1.11e-02 o ~; 6 -76.02702784 -8.38e-05 1.73e-03 1.43e-03 o 2.89e-03 2.48e-03 o ~; 7 -76.02703276 -4.93e-06 1.05e-04 * 8.74e-05 o 1.63e-04 * 1.45e-04 o ~. #grep -A1 'post-proj all' hess0.out; post-proj all modes:['0.0000i' '0.0000i' '0.0000i' '1103.2728' '1246.1842' '1310.1099'; '1334.3071' '1578.1703' '1760.1248']; post-proj all modes:['0.0000i' '0.0000i' '0.0000i' '0.0000i' '0.0000' '0.0001' '1776.3032'; '4112.4185' '4210.8898']. Now, we calculate the Hessian at every step (full_hess_every 1). The; minimization does not converge after 15 steps. The energy printed at; each step is always the initial energy. The frequencies obtained at each; step are always the initial frequencies. #input: hess1.in; ...; set full_hess_every 1; ... #grep '~' hess1.out; 1 -75.93350508 -7.59e+01 1.35e-01 1.14e-01 o 3.44e-01 2.89e-01 o ~; 2 -75.93350508 5.68e-14 * 6.88e-02 5.91e-02 o 3.43e-01 2.89e-01 o ~; 3 -75.93350508 0.00e+00 * 1.90e-01 1.55e-01 o 8.83e-02 7.22e-02 o ~; 4 -75.93350508 0.00e+00 * 9.14e-02 7.47e-02 o 2.21e-02 1.80e-02 o ~; 5 -75.93350508 -1.42e-14 * 7.13e-02 5.82e-02 o 5.52e-03 4.51e-03 o ~; 6 -75.93350508 1.42e-14 * 6.65e-02 5.43e-02 o 5.52e-03 4.51e-03 o ~; 7 -75.93350508 0.00e+00 * 6.18e-02 5.05e-02 o 1.38e-03 1.13e-03 o ~; 8 -75.93350508 -1.42e-14 * 6.06e-02 4.95e-02 o 7.08e-04 * 5.78e-04 o ~; 9 -75.93350508 -5.68e-14 * 6.00e-02 4.90e-02 o 7.08e-04 * 5.78e-04 o ~; 10 -75.93350508 2.84e-14 * 5.94e-02 4.85e-02 o 7.08e-04 * 5.78e-04 o ~; 11 -75.93350508 2.84e-14 * 5.88e-02 4.81e-02 o 7.08e-04 * 5.78e-04 o ~; 12 -75.93350508 1.42e-14 * 5.83e-02 4.76e-02 o 7.08",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1282:1578,energy,energy,1578,https://psicode.org,https://github.com/psi4/psi4/issues/1282,2,['energy'],['energy']
Energy Efficiency,"; with open(xyzFilename,""r"") as f:; xyz_string = f.read(). psi4_geo = psi4.core.Molecule.from_string(xyz_string, dtype='xyz',fix_symmetry='c1', fix_orientation=True,fix_com=True). # run psi4 calculation ; psi4.core.set_num_threads(ncores); psi4.set_options(; {; ""scf__reference"": ""rks"",; ""scf_type"": ""df"",; ""scf__maxiter"": 50,; ""basis"": 'def2-svp',; ""df_basis_scf"": 'def2-universal-jfit',; ""puream"":False,; ""guess"": ""sad"",; ""SCF_INITIAL_ACCELERATOR"":""none"",; ""dft_spherical_points"":434, ; ""dft_radial_points"" :88, ; ""diis_max_vecs"" : 6; }; ); energy = psi4.energy(name=""scf"", dft_functional=""svwn"", molecule=psi4_geo, return_wfn=False). # run PySCF calculation; mol = pyscf.M(; atom=xyzFilename, ; basis=""def2-svp"",; symmetry=False,; verbose=4,; cart=True,; ); # mol.max_memory = 10_000; mf = dft.rks.RKS(mol, xc=""svwn"").density_fit(auxbasis='def2-universal-jfit'); mf.init_guess = 'vsap'; mf.grids.level = 7; mf.conv_tol = 1e-7; mf.kernel(); print('Nuc-Nuc PySCF= ', mol.energy_nuc()); print('One electron integrals energy',mf.scf_summary['e1']); print('Coulomb energy ',mf.scf_summary['coul']); print('EXC ',mf.scf_summary['exc']); ```; The XYZ file for ethane is here; ```; 8; Ethane; C -0.759130 0.027045 -0.000000; C 0.759130 -0.027045 -0.000000; H -1.125990 0.306235 1.010150; H -1.171340 -0.966695 -0.274750; H -1.109050 0.781825 -0.735390; H 1.109040 -0.781815 0.735390; H 1.171340 0.966695 0.274760; H 1.125990 -0.306235 -1.010150; ```; The following is my output:; Psi4; ```; Memory set to 111.759 GiB by Python driver.; Threads set to 8 by Python driver. Scratch directory: /tmp/. *** tstart() called on xxx; *** at Tue Mar 28 17:20:51 2023. => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry C line 90 file /home/manas/psi4conda/share/psi4/basis/def2-svp.gbs; atoms 3-8 entry H line 15 file /home/manas/psi4conda/share/psi4/basis/def2-svp.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmone",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:1962,energy,energy,1962,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['energy'],['energy']
Energy Efficiency,"<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: (HEAVY-AUG-CC-PV(D+D)Z AUX); Role: RIFIT; Keyword: DF_BASIS_MP2; atoms 1-2 entry O line 208 file /opt/psi/4/master/share/psi4/basis/heavy-aug-cc-pvdz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; ROHF-MBPT(2) Wavefunction, 4 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 144; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 2 9 7 37 37 0; BETA 2 7 5 39 39 0; --------------------------------------------------------. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -149.6217688382015183 [Eh]; Singles Energy = -0.0130981432734322 [Eh]; Same-Spin Energy = -0.1180463523157988 [Eh]; Opposite-Spin Energy = -0.2655370704826780 [Eh]; Correlation Energy = -0.3966815660719090 [Eh]; Total Energy = -150.0184504042734375 [Eh]; -----------------------------------------------------------; ================> DF-SCS-MP2 Energies <==================; -----------------------------------------------------------; SCS Same-Spin Scale = 0.3333333333333333 [-]; SCS Opposite-Spin Scale = 1.2000000000000000 [-]; SCS Same-Spin Energy = -0.0393487841052663 [Eh]; SCS Opposite-Spin Energy = -0.3186444845792136 [Eh]; SCS Correlation Energy = -0.3710914119579120 [Eh]; SCS Total Energy = -149.9928602501594241 [Eh]; -----------------------------------------------------------; ```. I haven't run any other CBS hessians to see if the issue appears where psi4 might have analytic gradients or something.; I also have not tired passing `mp2_type df` into the Delta wfn explicitly. I assume that would perform the d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:7316,Energy,Energy,7316,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['Energy'],['Energy']
Energy Efficiency,"= ""aug-cc-pvdz""; REFERENCE = ""uhf""; BASIS_GUESS = ""3-21G""; GUESS = ""sad""; dimer = psi4.geometry(geo_string). psi4.set_options(; {; ""basis"": BASIS,; ""reference"": REFERENCE,; ""basis_guess"": BASIS_GUESS,; ""guess"": GUESS,; ""scf_type"": ""mem_df"",; ""e_convergence"": 1e-12,; ""d_convergence"": 1e-12,; }; ). psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); ```. result:; ```; Role: ORBITAL; Keyword: BASIS; atoms 1 entry LI line 35 file /home/filip/software/psi4-1.4rc/share/psi4/basis/3-21g.gbs ; atoms 2 entry H line 21 file /home/filip/software/psi4-1.4rc/share/psi4/basis/3-21g.gbs . ---------------------------------------------------------; SCF Castup computation ; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 976 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; Gh(LI) 0.000000000000 0.000000000000 -1.000000000000 7.016003436600; H 0.000000000000 0.000000000000 1.000000000000 1.007825032230. Running in c1 symmetry. Rotational constants: A = ************ B = 2.10095 C = 2.10095 [cm^-1]; Rotational constants: A = ************ B = 62984.77227 C = 62984.77227 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 3-21G; Blend: 3-21G; Number of shells: 7; Number of basis function: 11; Number of Cartesian functions: 11; Spherical Harmonics?: false; Max angular momentum: 1. => Loading Basis Set <=. Name: (3-21G A",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:1431,charge,charge,1431,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['charge'],['charge']
Energy Efficiency,"= 0.0000000000000000; One-Electron Energy = -0.4976240311603163; Two-Electron Energy = 0.0000000000000000; Total Energy = -0.4976240311603163. UHF NO Occupations:; HONO-0 : 1 A 1.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SCF //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: AUG-CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry LI line 68 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz.gbs ; atoms 2 entry H line 40 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 976 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; Gh(LI) 0.000000000000 0.000000000000 -1.000000000000 7.016003436600; H 0.000000000000 0.000000000000 1.000000000000 1.007825032230. Running in c1 symmetry. Rotational constants: A = ************ B = 2.10095 C = 2.10095 [cm^-1]; Rotational constants: A = ************ B = 62984.77227 C = 62984.77227 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is MEM_DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: AUG-CC-PVDZ; Blend: AUG-CC-PVDZ; Number of shells: 14; Number of basis function: 32; Number of Cartesian functions: 34; Spherical Harmonics?: true; Max angular momentum: 2. => Loading Basis Set <=",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:6192,charge,charge,6192,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['charge'],['charge']
Energy Efficiency,"=. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; ---------------------------------------------------------------------------------------------; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o; ---------------------------------------------------------------------------------------------; 2 -232.08477729 -4.57e-04 2.31e-04 * 9.07e-05 o 6.20e-04 * 2.31e-04 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 2 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -232.084319861329 -232.084319861329 0.00763634 0.00254450 0.02132377 0.00710535 ~; 2 -232.084777290884 -0.000457429555 0.00023074 0.00009069 0.00061967 0.00023101 ~; --------------------------------------------------------------------------------------------------------------- ~; ```. If change the convergence criteria by adding to my input file; ```; set {; max_energy_g_convergence 1e-6; }; ```. or ; ```; set {; g_convergence MOLPRO; }; ```. the optimization goes for three steps before converging properly:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; -------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1947:1892,Energy,Energy,1892,https://psicode.org,https://github.com/psi4/psi4/issues/1947,1,['Energy'],['Energy']
Energy Efficiency,== Performing DF-OMP2.5 iterations... ========================== ; ============================================================================== ; Minimizing DF-MP2.5-L Functional ; ------------------------------ ; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2 ; ---- --------------- ---------- ----------- ----------- ---------- ; 1 -75.7906384498 -7.38e-04 1.89e-03 7.57e-03 5.95e-06 ; 2 -75.7907030487 -6.46e-05 6.80e-04 3.45e-03 1.29e-06 ; 3 -75.7907190240 -1.60e-05 4.26e-04 1.69e-03 5.72e-07 ; 4 -75.7907244154 -5.39e-06 2.25e-04 1.39e-03 2.96e-07 ; 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; Alpha-Alpha Contribution (a.u.) : -0.02415964277065; Alpha-Beta Contribution (a.u.) : -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) :,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509:1838,energy,energy,1838,https://psicode.org,https://github.com/psi4/psi4/issues/1509,1,['energy'],['energy']
Energy Efficiency,"=====================+===========+======================================================+; | omega | frequency | cm^-1 | np.array(ndof) complex (real/imag) |; | q | normal mode, normalized mass-weighted | a0 u^1/2 | np.array(ndof, ndof) float |; | w | normal mode, un-mass-weighted | a0 | np.array(ndof, ndof) float |; | x | normal mode, normalized un-mass-weighted | a0 | np.array(ndof, ndof) float |; | degeneracy | degree of degeneracy | | np.array(ndof) int |; | TRV | translation/rotation/vibration | | np.array(ndof) str 'TR' or 'V' or '-' for partial |; | gamma | irreducible representation | | np.array(ndof) str irrep or None if unclassifiable |; | mu | reduced mass | u | np.array(ndof) float (+/+) |; | k | force constant | mDyne/A | np.array(ndof) float (+/-) |; | DQ0 | RMS deviation v=0 | a0 u^1/2 | np.array(ndof) float (+/0) |; | Qtp0 | Turning point v=0 | a0 u^1/2 | np.array(ndof) float (+/0) |; | Xtp0 | Turning point v=0 | a0 | np.array(ndof) float (+/0) |; | theta_vib | char temp | K | np.array(ndof) float (+/0) |; ; Examples; --------; # displacement of first atom in highest energy mode; >>> vibinfo['x'].data[:, -1].reshape(nat, 3)[0]; ; # remove translations & rotations; >>> vibonly = filter_nonvib(vibinfo); ```; - [ ] Should we run a gradient before every freq to judge whether to project rotations? Right now freq on non-stationary structures are going to be way different than from findif because findif stuck with the (in PR analysis labeling) ""pre-proj"" vibs; - [ ] How to handle natural geometry shift the occurs upon isotopic substitution in geometry but not in reused Hessian? shift/rotate the Hessian? compute in center-of-charge instead?. ## Good stuff still to do; - [ ] vibs docs; - [ ] warning to isapt folks that frag spec just got tighter wrt mult; - [ ] break up vibanalysis, dft-cation, dft-water-dimer tests. to py?. closes #940 . ## Status; - [x] Ready for review; - [x] Ready for merge content-correctness-wise; - [x] Ready for merge psi-planning-wise",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:14514,energy,energy,14514,https://psicode.org,https://github.com/psi4/psi4/pull/834,2,"['charge', 'energy']","['charge', 'energy']"
Energy Efficiency,"=========================. DF-MP2.5; Program Written by Ugur Bozkaya; Latest Revision September 9, 2017. ==============================================================================; ==============================================================================; ==============================================================================. MO spaces... FC OCC VIR FV; ----------------------; 15 60 1305 0. Number of basis functions in the DF-CC basis: 2970. Available memory : 810623.17 MB; Memory requirement for 3-index ints : 40445.15 MB; Memory requirement for DF-CC int trans: 24244.87 MB; Memory requirement for CC contractions: 56027.91 MB; Total memory requirement for DF+CC int: 96473.07 MB; Memory requirement for Wabef term : 75373.62 MB. Traceback (most recent call last):; File ""/home/416653/PSI4/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/home/416653/PSI4/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/416653/PSI4/lib/psi4/driver/procrouting/proc.py"", line 456, in select_mp2p5; return func(name, **kwargs); File ""/home/416653/PSI4/lib/psi4/driver/procrouting/proc.py"", line 1607, in run_dfocc; dfocc_wfn = core.dfocc(ref_wfn). MemoryError: std::bad_array_new_length. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""FREEZE_CORE"", ""true""); core.set_global_option(""SCF_TYPE"", ""df""); core.set_global_option(""MP_TYPE"", ""df""); core.set_global_option(""BASIS"", ""aug-cc-pvtz""); core.set_global_option(""DF_BASIS_MP2"", ""cc-pVQZ-RI""); --> energy('mp2.5'). Psi4 stopped on: Thursday, 02 May 2019 01:23PM; Psi4 wall time for execution: 0:18:04.56; ```. Looks like the error is somewhere around [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2546). The `std::bad_array_new_length` is usually (but not always) thrown for negative lengths. @bozkaya any ideas?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1679:4336,energy,energy,4336,https://psicode.org,https://github.com/psi4/psi4/issues/1679,3,['energy'],['energy']
Energy Efficiency,"========================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; Alpha-Alpha Contribution (a.u.) : -0.02415964277065; Alpha-Beta Contribution (a.u.) : -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimized now.; 	Transforming MOs to the semicanonical basis... ; Switching to the standard DF-MP2 computation... ; ```; are present in the reference output file but not in the output file that I posted. This is due to the if clause [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2648), which requires `std::fabs(DE) >= tol_Eod`, i.e., that the observed delta E is _greater than_ the user-specified convergence criteria. This situation is precisely what the fix to #1143 no",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509:2796,Energy,Energy,2796,https://psicode.org,https://github.com/psi4/psi4/issues/1509,1,['Energy'],['Energy']
Energy Efficiency,"================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; Alpha-Alpha Contribution (a.u.) : -0.02415964277065; Alpha-Beta Contribution (a.u.) : -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimized now.; 	Transforming MOs to the semicanonical basis... ; Switching to the standard DF-MP2 computation... ; ```; are present in the reference output file but not in the output file that I posted. This is due to the if clause [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2648), which requires `std::fabs(DE) >= tol_Eod`, i.e., that the observed delta E is _greater than_ the user-specified convergence criteria. This situation is precisely what the fix to #1143 no longer allows for, so I must conclude that the code in that if suite is what is responsible for the d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509:2894,Energy,Energy,2894,https://psicode.org,https://github.com/psi4/psi4/issues/1509,1,['Energy'],['Energy']
Energy Efficiency,============================================================================ ; Minimizing DF-MP2.5-L Functional ; ------------------------------ ; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2 ; ---- --------------- ---------- ----------- ----------- ---------- ; 1 -75.7906384498 -7.38e-04 1.89e-03 7.57e-03 5.95e-06 ; 2 -75.7907030487 -6.46e-05 6.80e-04 3.45e-03 1.29e-06 ; 3 -75.7907190240 -1.60e-05 4.26e-04 1.69e-03 5.72e-07 ; 4 -75.7907244154 -5.39e-06 2.25e-04 1.39e-03 2.96e-07 ; 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; Alpha-Alpha Contribution (a.u.) : -0.02415964277065; Alpha-Beta Contribution (a.u.) : -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509:1962,Energy,Energy,1962,https://psicode.org,https://github.com/psi4/psi4/issues/1509,1,['Energy'],['Energy']
Energy Efficiency,"==> Input File <==. ---. molecule N2{; N; N 1 2.58; units bohr; }; set {; basis cc-pVDZ; scf_type pk; DOCC [3,0,0,0,0,2,1,1]; e_convergence 10; d_convergence 10; r_convergence 10; FROZEN_DOCC [1,0,0,0,0,1,0,0]; Maxiter 100; Num_roots 1; }. energy('fci'). ---. This calculation diverge after iteration 50. ==> End Of Output File <==; Iter 41 Root 1 = -109.192522175 Delta_E -1.929E-12 Delta_C 4.066E-06; Iter 42 Root 1 = -109.192522175 Delta_E -9.223E-12 Delta_C 8.618E-06; Iter 43 Root 1 = -109.192522175 Delta_E -4.168E-11 Delta_C 1.799E-05; Iter 44 Root 1 = -109.192522175 Delta_E -1.870E-10 Delta_C 3.800E-05; Iter 45 Root 1 = -109.192522176 Delta_E -8.855E-10 Delta_C 8.431E-05; Iter 46 Root 1 = -109.192522181 Delta_E -4.538E-09 Delta_C 1.955E-04; Iter 47 Root 1 = -109.192522205 Delta_E -2.466E-08 Delta_C 4.665E-04; Iter 48 Root 1 = -109.192522355 Delta_E -1.496E-07 Delta_C 1.179E-03; Iter 49 Root 1 = -109.192523753 Delta_E -1.398E-06 Delta_C 4.152E-03; Iter 50 Root 1 = -109.968750624 Delta_E -7.762E-01 Delta_C 3.339E+00; Iter 51 Root 1 = -118.722003520 Delta_E -8.753E+00 Delta_C 1.458E+01; Iter 52 Root 1 = -145.122489317 Delta_E -2.640E+01 Delta_C 5.957E+01; Iter 53 Root 1 = -172.017439239 Delta_E -2.689E+01 Delta_C 1.206E+02; Iter 54 Root 1 = -198.930392334 Delta_E -2.691E+01 Delta_C 1.936E+02; Iter 55 Root 1 = -225.849104619 Delta_E -2.692E+01 Delta_C 2.771E+02; Iter 56 Root 1 = -252.770463097 Delta_E -2.692E+01 Delta_C 3.698E+02; Iter 57 Root 1 = -279.693265542 Delta_E -2.692E+01 Delta_C 4.709E+02; Iter 58 Root 1 = -306.616944155 Delta_E -2.692E+01 Delta_C 5.797E+02; Iter 59 Root 1 = -333.541194861 Delta_E -2.692E+01 Delta_C 6.958E+02; Iter 60 Root 1 = -360.465839881 Delta_E -2.692E+01 Delta_C 8.188E+02; Iter 61 Root 1 = -387.390768249 Delta_E -2.692E+01 Delta_C 9.481E+02; Iter 62 Root 1 = -414.315907096 Delta_E -2.693E+01 Delta_C 1.084E+03; Iter 63 Root 1 = -441.241206582 Delta_E -2.693E+01 Delta_C 1.225E+03; Iter 64 Root 1 = -468.166631458 Delta_E -2.693E+01 Delta_C",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/448:240,energy,energy,240,https://psicode.org,https://github.com/psi4/psi4/issues/448,1,['energy'],['energy']
Energy Efficiency,"==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 1; Memory [MiB]: 166; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 4.4477; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (VDZP AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 199; Number of basis functions: 597; Number of Cartesian functions: 703; Spherical Harmonics?: true; Max angular momentum: 4. Cached 25.0% of DFT collocation blocks in 0.161 [GiB]. Minimum eigenvalue in the overlap matrix is 5.5610928795E-04.; Reciprocal condition number of the overlap matrix is 9.8342984140E-05.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 111 111 ; -------------------------; Total 111 111; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -39.70316824232670 -3.97032e+01 0.00000e+00 ; @DF-RKS iter 1: -43.27234536758360 -3.56918e+00 3.69413e-03 ADIIS/DIIS; @DF-RKS iter 2: -43.35383639315761 -8.14910e-02 2.43782e-03 ADIIS/DIIS; @DF-RKS iter 3: -43.38733837751467 -3.35020e-02 1.10466e-03 ADIIS/DIIS; @DF-RKS iter 4: -43.39730753466733 -9.96916e-03 3.77682e-04 ADIIS/DIIS; @DF-RKS iter 5: -43.39937943728395 -2.07190e-03 2.05445e-04 ADIIS/DIIS; @DF-RKS iter 6: -43.40044782166130 -1.06838e-03 1.11750e-04 ADIIS/DIIS; @DF-RKS iter 7: -43.40150886235944 -1.06104e-03 1.08271e-04 ADIIS/DIIS; @DF-RKS iter 8: -43.40259319327883 -1.08433e-03 1.03266e-04 ADIIS/DIIS; @DF-RKS iter 9: -43.40562867052822 -3.03548e-03 8.61300e-05 DIIS; @DF-RKS iter 10: -43.40705815490672 -1.42948e-03 4.81672e-05 DIIS; @DF-RKS iter 11: -43.40726807149662 -2.09917e-04 3.05961e-05 DIIS; @DF-RKS iter 12: -43.40746692997944 -1.98858e-04 1.72184e-05 DIIS; @DF-RKS iter 13: -43.40747472236222 -7.79238e-06 6.59771e-06 DIIS; @DF-RKS ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:10609,Energy,Energy,10609,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 1; Memory [MiB]: 167; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 3.8471; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (VDZP AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 199; Number of basis functions: 597; Number of Cartesian functions: 703; Spherical Harmonics?: true; Max angular momentum: 4. Cached 25.0% of DFT collocation blocks in 0.155 [GiB]. Minimum eigenvalue in the overlap matrix is 5.5224744543E-04.; Reciprocal condition number of the overlap matrix is 8.7845130506E-05.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 111 111 ; -------------------------; Total 111 111; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -40.20742626722070 -4.02074e+01 0.00000e+00 ; @DF-RKS iter 1: -41.85372076056422 -1.64629e+00 4.64946e-03 DIIS/ADIIS; @DF-RKS iter 2: -42.00985523463992 -1.56134e-01 2.18407e-03 DIIS/ADIIS; @DF-RKS iter 3: -42.04248981983608 -3.26346e-02 7.08822e-04 DIIS/ADIIS; @DF-RKS iter 4: -42.04528563064348 -2.79581e-03 3.01721e-04 DIIS/ADIIS; @DF-RKS iter 5: -42.04589556301210 -6.09932e-04 8.40052e-05 DIIS; @DF-RKS iter 6: -42.04594641312401 -5.08501e-05 2.29544e-05 DIIS; @DF-RKS iter 7: -42.04595101061475 -4.59749e-06 8.73466e-06 DIIS; @DF-RKS iter 8: -42.04595193846246 -9.27848e-07 1.83903e-06 DIIS; @DF-RKS iter 9: -42.04595197043621 -3.19738e-08 1.16291e-06 DIIS; @DF-RKS iter 10: -42.04595197988089 -9.44468e-09 3.03360e-07 DIIS; Energy and wave function converged. ==> Post-Iterations <==. Electrons on quadrature grid:; Ntotal = 31.9999968368 ; deviation = -3.163e-06 . Orbital Energies [Eh]; ---------------------. Doubly Occupied: . 1A -0.966068 2A -0.941808 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:23004,Energy,Energy,23004,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: SIMINT; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:27 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constant",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:14728,energy,energy,14728,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"@CDSherrill, here's the rohf mp2 results from a few programs. Ugur matches Q-Chem. Molpro is fairly close to Q-Chem, though I'm really not sure about that input. ""rccsd"" ""calls spin-restricted open-shell coupled cluster program"" according to the manual, but this route through the code is not labeled enough for me to be confident of it. So detci is the odd one out, but good news is that its reference is sound. | program | fc | scf | singles | mp2corl | mp2tot |; | --- | --- | --- | --- | --- | --- |; | occ | fc | -25.94361432 | -0.00068837 | -0.05940725 | -26.00302157 |; | detci | fc | -25.94361432 | | -0.06094168 | -26.00455600 |; | qchem | fc | -25.94361432 | -0.00068837 | -0.05940725 | -26.00302157 |; | molpro | fc | -25.94361432 | -0.00054735 | -0.05936497 | -26.00297929 |. ```; $molecule; 1 2; B 0.10369114 0.00000000 0.00000000; H -1.13269886 0.00000000 0.00000000; H 3.00000000 0.37149000 0.00000000; H 3.00000000 -0.37149000 0.00000000; $end. $rem; JOBTYPE sp; unrestricted false; n_frozen_core fc; scf_guess sad; BASIS cc-pVdZ; basis2 6-31g; correlation mp2; THRESH 12; SCF_CONVERGENCE 8; SYM_IGNORE TRUE; SYMMETRY FALSE; MEM_TOTAL 1600; MEM_STATIC 512; INTEGRALS_BUFFER 512; MAX_SCF_CYCLES 200; $end; ```. ```; molecule bh_h2p {; 1 2; B 0.10369114 0.00000000 0.00000000; H -1.13269886 0.00000000 0.00000000; H 3.00000000 0.37149000 0.00000000; H 3.00000000 -0.37149000 0.00000000; }. set basis cc-pvdz; set scf_type pk; set mp2_type conv; set guess sad; set freeze_core true; set e_convergence 8; set d_convergence 7; set reference rohf. set qc_module detci # toggle detci/occ; energy('mp2'); ```. ```; memory,200,m; nosym; noorient; angstrom; geometry={; B 0.10369114 0.00000000 0.00000000; H -1.13269886 0.00000000 0.00000000; H 3.00000000 0.37149000 0.00000000; H 3.00000000 -0.37149000 0.00000000; }. GTHRESH,ZERO=1.e-14,ONEINT=1.e-14,TWOINT=1.e-14,ENERGY=1.e-9. SET,CHARGE=1; SET,SPIN=1. basis=cc-pVDZ. rhf; rccsd; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/311:1598,energy,energy,1598,https://psicode.org,https://github.com/psi4/psi4/issues/311,3,"['CHARGE', 'ENERGY', 'energy']","['CHARGE', 'ENERGY', 'energy']"
Energy Efficiency,@hokru told me to post this here from this thread on the forum. ; http://forum.psicode.org/t/weird-energy-with-df-ccsd-t-on-pre-built-1-2-binary/1240. I used the pre-built binaries for 1.2. It's the python 3.5 linux version. . I am getting an asinine energy with this method for sumanene. Here's a few of the iterations. . ```; 0 0 1 82301976411.2597808838 82301976411.2597808838 180071.6863671333 79; 1 1 1 -11765764147947413438464.0000000000 -11765764148029716168704.0000000000 5189755552069629.0000000000 1039; 2 2 1 18577504081805034984135645462528.0000000000 18577504093570799348831936839680.0000000000 13953090784875981570048.0000000000 1042; 3 3 1 -10975754574997206597632.0000000000 -18577504092780789161197672857600.0000000000 2850375421929338594918400.0000000000 1058; ```. ```; memory 120 GB; molecule {; 0 1; C 3.269671140 0.262382661 0.000000000; C -1.638988443 0.201021220 2.834237354; C -1.638988443 0.201021220 -2.834237354; H 3.645686428 1.289803000 0.000000000; H -1.846170088 1.221151217 3.170972567; C 1.219967165 -0.666672220 0.713456211; C 0.020624067 -0.681664789 1.405951372; C 0.020624067 -0.681664789 -1.405951372; C 1.219967165 -0.666672220 -0.713456211; C -1.215021798 -0.697111167 -0.692495161; C -1.215021798 -0.697111167 0.692495161; C 2.350712693 -0.010518009 1.202305693; C -0.133462307 -0.041571814 2.636656855; C -0.133462307 -0.041571814 -2.636656855; C 2.350712693 -0.010518009 -1.202305693; C -2.215754163 -0.067601818 -1.434351162; C -2.215754163 -0.067601818 1.434351162; C 2.253218542 0.518128480 2.489250128; C 1.019790334 0.502709825 3.201425874; C 1.019790334 0.502709825 -3.201425874; C 2.253218542 0.518128480 -2.489250128; C -3.291380529 0.448817382 -0.712175746; C -3.291380529 0.448817382 0.712175746; H 3.077229877 1.077986926 2.924280546; H 0.974199492 1.051697677 4.138560570; H 0.974199492 1.051697677 -4.138560570; H 3.077229877 1.077986926 -2.924280546; H -4.090407292 0.988386795 -1.214280023; H -4.090407292 0.988386795 1.214280023; H 4.1547601,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1545:99,energy,energy-with-df-ccsd-t-on-pre-built-,99,https://psicode.org,https://github.com/psi4/psi4/issues/1545,2,['energy'],"['energy', 'energy-with-df-ccsd-t-on-pre-built-']"
Energy Efficiency,"@loriab asked me for 1.1 showstoppers. Here's one: the formatted checkpoint files don't work. . With the input; ```; molecule {; symmetry c1; H 0.0 0.0 0.0; H 0.0 1.0 0.0; H 0.0 0.0 1000.0; H 0.0 1.0 1000.0; }. set basis 6-31G; scf_e, scf_wfn = energy('s_x', return_wfn=True). fchk(scf_wfn, ""scf.fchk""); ```; I get a formatted checkpoint file, which I load to IQmol or Avogardo. The result is: I see no nuclei!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/708:245,energy,energy,245,https://psicode.org,https://github.com/psi4/psi4/issues/708,1,['energy'],['energy']
Energy Efficiency,"@robertodr, when you added the PCM POLARIZATION ENERGY psivar to Wfn, I think you removed it from `P::e.globals` (which `psi4 --test` noticed and complained about). For a transition period, I think we want storage duplicated so that P::e.globals is a full list. Could you add the variable back wherever it gets set to the Wfn value and test that `psi4 --test` works again? Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/697:48,ENERGY,ENERGY,48,https://psicode.org,https://github.com/psi4/psi4/issues/697,1,['ENERGY'],['ENERGY']
Energy Efficiency,"@susilehtola . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The behavior of the `DFT__RHO_V2_CUTOFF` keyword has been slightly modified for UKS.; - [x] The `DFT__RHO_V2_CUTOFF` default has been changed to the LibXC default. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] RKS and closed-shell UKS now screen out the same points.; - [x] Hermiticity of the UKS energy hessian (should) be restored.; - [x] Test references changed to use tighter density thresholds. (Still derived from Psi.) . ## Questions; - [x] Do we want to tighten the `DFT__RHO_V2_CUTOFF` default?. ## Checklist; - [x] `tdscf` ctests pass; - [x] `test_tdscf_excitations` pytest passes; - [x] SVWN analytic hessian pytests pass . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2834:679,energy,energy,679,https://psicode.org,https://github.com/psi4/psi4/pull/2834,1,['energy'],['energy']
Energy Efficiency,"A 0.023031 11A 0.076058 12A 0.080886; 13A 0.080887 14A 0.110657 15A 0.110658; 16A 0.173580 17A 0.360176 18A 0.370157; 19A 0.370158 20A 0.455135 21A 0.455137; 22A 0.543892 23A 0.571369 24A 0.610757; 25A 0.610759 26A 0.613674 27A 0.623635; 28A 0.623637 29A 0.682101 30A 0.875957; 31A 1.031832 32A 1.031833 33A 1.292103; 34A 1.292104 35A 1.442476 36A 1.448632; 37A 1.662612 38A 1.675074 39A 1.675078; 40A 1.685189 41A 1.685192 42A 1.745843; 43A 1.745846 44A 1.748838 45A 1.953626; 46A 1.953628 47A 2.104265 48A 2.256310; 49A 2.256312 50A 2.286838 51A 2.457344; 52A 2.457345 53A 2.522627 54A 2.738613; 55A 2.803606 56A 2.803611 57A 2.896284; 58A 2.896288 59A 5.038202 60A 5.264241. Final Occupation by Irrep:; A; DOCC [ 9 ]; NA [ 9 ]; NB [ 9 ]. @DF-RKS Final Energy: -79.32647565991985. => Energetics <=. Nuclear Repulsion Energy = 42.0362430486042129; One-Electron Energy = -188.7935335064416904; Two-Electron Energy = 79.9597081286466675; DFT Exchange-Correlation Energy = -12.5288933307290371; Empirical Dispersion Energy = 0.0000000000000000; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -79.3264756599198506. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : 0.0000185 -0.0000189 -0.0000004; Dipole Y : -0.0000204 0.0000189 -0.0000015; Dipole Z : -0.0000155 0.0000189 0.0000034; Magnitude : 0.0000037. ------------------------------------------------------------------------------------. *** tstop() called on baldr at Tue Mar 28 17:20:52 2023; Module time:; user time = 6.85 seconds = 0.11 minutes; system time = 0.17 seconds = 0.00 minutes; total time = 1 seconds = 0.02 m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:8715,Energy,Energy,8715,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['Energy'],['Energy']
Energy Efficiency,"A 0.086764 10A 0.103920 ; 11A 0.198954 12A 0.198954 13A 0.208977 ; 14A 0.208977 15A 0.256823 16A 0.270230 ; 17A 0.318044 18A 0.318044 19A 0.402166 ; 20A 0.450346 21A 0.450346 22A 0.540514 ; 23A 0.606544 24A 0.606544 25A 0.613724 ; 26A 0.613724 27A 0.838452 28A 1.281252 ; 29A 1.826605 30A 1.826605 31A 1.850798 ; 32A 4.179388 . Beta Occupied: . . Beta Virtual: . 1A 0.006309 2A 0.013514 3A 0.013821 ; 4A 0.013821 5A 0.037931 6A 0.065570 ; 7A 0.070561 8A 0.070561 9A 0.090473 ; 10A 0.171679 11A 0.207466 12A 0.207466 ; 13A 0.209492 14A 0.209492 15A 0.257933 ; 16A 0.287508 17A 0.331720 18A 0.331720 ; 19A 0.427501 20A 0.478623 21A 0.478623 ; 22A 0.598357 23A 0.612674 24A 0.612674 ; 25A 0.614564 26A 0.614564 27A 0.921140 ; 28A 1.322779 29A 1.926318 30A 1.926318 ; 31A 1.947876 32A 4.183965 . Final Occupation by Irrep:; A ; DOCC [ 0 ]; SOCC [ 1 ]. @DF-UHF Final Energy: -0.49935164423756. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -0.4993516442375593; Two-Electron Energy = 0.0000000000000000; Total Energy = -0.4993516442375593. UHF NO Occupations:; HONO-0 : 1 A 1.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 1.8897. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: -0.0000 Z: -1.8895. Dipole Moment: [e a0]; X: 0.0000 Y: -0.0000 Z: 0.0002 Total: 0.0002. Dipole Moment: [D]; X: 0.0000 Y: -0.0000 Z: 0.0006 Total: 0.0006. *** tstop() called on filip-ThinkPad-E495 at Wed Mar 4 16:29:33 2020; Module time:; 	user time = 0.55 seconds = 0.01 minutes; 	system time = 0.01 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 1.79 seconds = 0.03 minutes; 	system time = 0.07 seconds = 0.00 minutes; 	total time = 2 seconds = 0.03 minutes; Constructing Basis Sets for SAP",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:10771,Energy,Energy,10771,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Energy'],['Energy']
Energy Efficiency,"A 0.785076 57A 0.814891 58A 0.822500 ; 59A 0.837421 60A 0.837786 61A 0.896368 ; 62A 0.911715 63A 0.939819 64A 1.013440 ; 65A 1.043686 66A 1.043717 67A 1.079379 ; 68A 1.110213 69A 1.243320 70A 1.248770 ; 71A 1.249096 72A 1.325143 73A 1.325198 ; 74A 1.395025 75A 1.397495 76A 1.442305 ; 77A 1.442695 78A 1.456897 79A 1.504332 ; 80A 1.639667 81A 1.641352 82A 1.668110 ; 83A 1.705574 84A 1.784410 85A 1.840841 ; 86A 1.841701 87A 1.932164 88A 2.090833 ; 89A 2.093816 90A 2.132735 91A 2.154837 ; 92A 2.180250 93A 2.253444 94A 2.481160 ; 95A 2.481328 96A 2.496342 97A 2.793920 ; 98A 2.848632 99A 2.969349 100A 2.969418 ; 101A 3.337134 102A 3.399821 103A 3.400315 ; 104A 3.528082 105A 4.155988 106A 5.476938 ; 107A 5.786400 108A 6.199146 109A 7.337445 ; 110A 8.481836 111A 8.867663 . Final Occupation by Irrep:; A ; DOCC [ 16 ]; NA [ 16 ]; NB [ 16 ]. @DF-RKS Final Energy: -43.40748214051649. => Energetics <=. Nuclear Repulsion Energy = 93.7538801503397679; One-Electron Energy = -245.6257702779177521; Two-Electron Energy = 115.6223560816475100; DFT Exchange-Correlation Energy = -7.1485657255274635; Empirical Dispersion Energy = -0.0093823690585561; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -43.4074821405164926. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : -0.0030364 0.0030278 -0.0000086; Dipole Y : 0.0588791 -0.0477754 0.0111036; Dipole Z : -0.0335702 0.0272773 -0.0062929; Magnitude : 0.0127629. ------------------------------------------------------------------------------------. *** tstop() called on agincourt.lan at Mon Sep 16 22:17:38 2024; Module time:; 	use",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:13870,Energy,Energy,13870,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"A 0.915524 57A 0.915721 58A 0.916478 ; 59A 0.958476 60A 0.958532 61A 0.986377 ; 62A 1.033004 63A 1.062720 64A 1.062956 ; 65A 1.089893 66A 1.194156 67A 1.194624 ; 68A 1.260967 69A 1.272575 70A 1.297678 ; 71A 1.297926 72A 1.359441 73A 1.359571 ; 74A 1.502783 75A 1.503340 76A 1.596335 ; 77A 1.617548 78A 1.617829 79A 1.669742 ; 80A 1.669811 81A 1.778057 82A 1.778197 ; 83A 1.861590 84A 1.904708 85A 1.905302 ; 86A 1.932619 87A 1.933506 88A 1.984745 ; 89A 2.223699 90A 2.225628 91A 2.225668 ; 92A 2.494202 93A 2.559162 94A 2.559231 ; 95A 2.694381 96A 2.694493 97A 2.699523 ; 98A 2.989001 99A 2.989072 100A 3.239982 ; 101A 3.409966 102A 3.418072 103A 3.418110 ; 104A 3.811009 105A 4.348714 106A 5.581608 ; 107A 6.661779 108A 7.322224 109A 7.404171 ; 110A 8.435277 111A 8.975985 . Final Occupation by Irrep:; A ; DOCC [ 16 ]; NA [ 16 ]; NB [ 16 ]. @DF-RKS Final Energy: -42.04595197988089. => Energetics <=. Nuclear Repulsion Energy = 93.4549456916637951; One-Electron Energy = -246.7432156290641103; Two-Electron Energy = 118.6378186354417608; DFT Exchange-Correlation Energy = -7.3862953798450999; Empirical Dispersion Energy = -0.0092052980772349; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -42.0459519798808898. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : -7.8209495 8.4115446 0.5905951; Dipole Y : -2.3244093 2.4977096 0.1733003; Dipole Z : -4.0798888 4.3904336 0.3105448; Magnitude : 0.6894009. ------------------------------------------------------------------------------------. *** tstop() called on agincourt.lan at Mon Sep 16 22:19:42 2024; Module time:; 	user ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:25770,Energy,Energy,25770,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"A 1.079379 ; 68A 1.110213 69A 1.243320 70A 1.248770 ; 71A 1.249096 72A 1.325143 73A 1.325198 ; 74A 1.395025 75A 1.397495 76A 1.442305 ; 77A 1.442695 78A 1.456897 79A 1.504332 ; 80A 1.639667 81A 1.641352 82A 1.668110 ; 83A 1.705574 84A 1.784410 85A 1.840841 ; 86A 1.841701 87A 1.932164 88A 2.090833 ; 89A 2.093816 90A 2.132735 91A 2.154837 ; 92A 2.180250 93A 2.253444 94A 2.481160 ; 95A 2.481328 96A 2.496342 97A 2.793920 ; 98A 2.848632 99A 2.969349 100A 2.969418 ; 101A 3.337134 102A 3.399821 103A 3.400315 ; 104A 3.528082 105A 4.155988 106A 5.476938 ; 107A 5.786400 108A 6.199146 109A 7.337445 ; 110A 8.481836 111A 8.867663 . Final Occupation by Irrep:; A ; DOCC [ 16 ]; NA [ 16 ]; NB [ 16 ]. @DF-RKS Final Energy: -43.40748214051649. => Energetics <=. Nuclear Repulsion Energy = 93.7538801503397679; One-Electron Energy = -245.6257702779177521; Two-Electron Energy = 115.6223560816475100; DFT Exchange-Correlation Energy = -7.1485657255274635; Empirical Dispersion Energy = -0.0093823690585561; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -43.4074821405164926. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : -0.0030364 0.0030278 -0.0000086; Dipole Y : 0.0588791 -0.0477754 0.0111036; Dipole Z : -0.0335702 0.0272773 -0.0062929; Magnitude : 0.0127629. ------------------------------------------------------------------------------------. *** tstop() called on agincourt.lan at Mon Sep 16 22:17:38 2024; Module time:; 	user time = 9.63 seconds = 0.16 minutes; 	system time = 0.15 seconds = 0.00 minutes; 	total time = 10 seconds = 0.17 minutes; Total time:; 	user time = 9",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:14021,Energy,Energy,14021,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"A 1.194624 ; 68A 1.260967 69A 1.272575 70A 1.297678 ; 71A 1.297926 72A 1.359441 73A 1.359571 ; 74A 1.502783 75A 1.503340 76A 1.596335 ; 77A 1.617548 78A 1.617829 79A 1.669742 ; 80A 1.669811 81A 1.778057 82A 1.778197 ; 83A 1.861590 84A 1.904708 85A 1.905302 ; 86A 1.932619 87A 1.933506 88A 1.984745 ; 89A 2.223699 90A 2.225628 91A 2.225668 ; 92A 2.494202 93A 2.559162 94A 2.559231 ; 95A 2.694381 96A 2.694493 97A 2.699523 ; 98A 2.989001 99A 2.989072 100A 3.239982 ; 101A 3.409966 102A 3.418072 103A 3.418110 ; 104A 3.811009 105A 4.348714 106A 5.581608 ; 107A 6.661779 108A 7.322224 109A 7.404171 ; 110A 8.435277 111A 8.975985 . Final Occupation by Irrep:; A ; DOCC [ 16 ]; NA [ 16 ]; NB [ 16 ]. @DF-RKS Final Energy: -42.04595197988089. => Energetics <=. Nuclear Repulsion Energy = 93.4549456916637951; One-Electron Energy = -246.7432156290641103; Two-Electron Energy = 118.6378186354417608; DFT Exchange-Correlation Energy = -7.3862953798450999; Empirical Dispersion Energy = -0.0092052980772349; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -42.0459519798808898. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : -7.8209495 8.4115446 0.5905951; Dipole Y : -2.3244093 2.4977096 0.1733003; Dipole Z : -4.0798888 4.3904336 0.3105448; Magnitude : 0.6894009. ------------------------------------------------------------------------------------. *** tstop() called on agincourt.lan at Mon Sep 16 22:19:42 2024; Module time:; 	user time = 6.43 seconds = 0.11 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 6 seconds = 0.10 minutes; Total time:; 	user time = 6.43",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:25921,Energy,Energy,25921,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"A [recent PR](https://github.com/psi4/psi4/pull/2780#event-7959038316) changed `detci` so that it crashes when the user specified more roots than the basis set allows. @susilehtola proposed that instead, `detci` take as many roots as possible. What do we want to do?. I'll quote Lori's analysis of our options. > 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; > ; > 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); > ; > 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2825:806,allocate,allocated,806,https://psicode.org,https://github.com/psi4/psi4/issues/2825,1,['allocate'],['allocated']
Energy Efficiency,"A clean version of 287272b showed that when `full_hess_every` is enabled in an optimization, the data is corrupted. Every time a hessian is taken, it appears to be taken from the starting geometry, not the current geometry in the optimization. optking thinks the ""reference"" of the hessian it gets should be the starting point for the next step for purposes of convergence criteria output, but not for purposes of the internal coordinate step. In this example, every odd displacement has exactly the same energy. To me, this screams that `intco.dat` is being handled correctly, but some other file is not. Input file:; ```; molecule h2o { ; symmetry c1; O ; H 1 1.0 ; H 1 1.0 2 104.5 ; }. set {; basis sto-3g; e_convergence 10; d_convergence 10; points 3; geom_maxiter 50; full_hess_every 2 ; }. optimize('scf', dertype = 0); ```. We direly need `full_hess_every` coverage in the test suite. `grep` says the only test covering it is `opt10`, which isn't even built when I build all the tests, for some reason. The exact commit number is probably not integral to this problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1298:505,energy,energy,505,https://psicode.org,https://github.com/psi4/psi4/issues/1298,1,['energy'],['energy']
Energy Efficiency,"A minor DCT bug that is on my to-fix list when I move the control logic to Python:; The code often prints energies to the output file that were created using outdated intermediates, so they aren't the energy you would actually get using the current cumulant and orbital parameters. This means that even for variational parameters, lowering the residual produces a higher (reported) energy. The two offenders I've noticed are not updating the tau intermediate after a cumulant update and not re-computing the 1RDM and separable contributions to the energy after updating tau. In `dcft_oo_UHF.cc:run_simult_dcft_oo`, for instance, the cumulant is updated on [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dcft/dcft_oo_UHF.cc#L133), but tau never gets recomputed (`build_tau` and `refine_tau`) until the next iteration of the loop, by which point the energy has already been printed. You can see both problems in the twostep algorithm. Even if it was recomputed, `dcft_compute_uhf:compute_energy_UHF` is never called until the next iteration of the loop either. That function is responsible for re-computing the tau-dependent terms, so the tau-energy contribution would still be one iteration behind. The control logic will need to be re-organized.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1511:201,energy,energy,201,https://psicode.org,https://github.com/psi4/psi4/issues/1511,5,['energy'],['energy']
Energy Efficiency,"A molecule like the one below with charged monoA and neutral monoB gets confused when monoB ghosted b/c charge (interpreted as ""overall charge"") applied to each of monomers, but no electrons in monoB to even up count. This has bitten at least four users and developers and been declared to be bug, not feature. This is not a beginner's ticket, as it involves the dreaded `Molecule::create_molecule_from_string` function, but it needs to be fixed. I'd recc. writing the test cases first. ```; molecule mol {; units Angstrom; no_com; no_reorient; -1 1; C 0.033732944853 -1.125511797114 1.580406987928; C 0.784732944853 -1.165511797114 0.291406987928; O 0.666732944853 -0.174511797114 -0.463593012072; O 1.521732944853 -2.153511797114 0.048406987928; H -1.041267055147 -1.075511797114 1.390406987928; H 0.317732944853 -0.230511797114 2.136406987928; H 0.264722944853 -2.016378797114 2.182900987928; -- # toggle this line to comment to fix; #0 1; Gh(C) -2.103267055147 2.116488202886 -0.821593012072; Gh(O) -0.712267055147 2.192488202886 -0.525593012072; Gh(H) -0.329267055147 1.293488202886 -0.603593012072; Gh(H) -2.471267055147 1.129488202886 -0.531593012072; Gh(H) -2.632087055147 2.887778202886 -0.242406012072; Gh(H) -2.239007055147 2.240855802886 -1.906078012072. }; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/114:35,charge,charged,35,https://psicode.org,https://github.com/psi4/psi4/issues/114,3,['charge'],"['charge', 'charged']"
Energy Efficiency,"A rather important issue for @bozkaya. The test suite documents that energies computed with DFOCC can be internally inconsistent. `dfomp2p5-2` demonstrates the problem. The final energy computed via Lagrangian is [-75.7907](https://github.com/psi4/psi4/blob/master/tests/dfomp2p5-2/output.ref#L498). The final energy is reported as [-75.7914](https://github.com/psi4/psi4/blob/master/tests/dfomp2p5-2/output.ref#L530) hartrees, which are inconsistent. The discrepancy disappeared upon elimination of [the lines in dfocc that allow for the user-specified energy convergence criteria to be overridden](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/occ_iterations.cc#L278-L281), per issue #1143. The relevant part of the output file is:. ```; ============================================================================== ; ================ Performing DF-OMP2.5 iterations... ========================== ; ============================================================================== ; Minimizing DF-MP2.5-L Functional ; ------------------------------ ; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2 ; ---- --------------- ---------- ----------- ----------- ---------- ; 1 -75.7906384498 -7.38e-04 1.89e-03 7.57e-03 5.95e-06 ; 2 -75.7907030487 -6.46e-05 6.80e-04 3.45e-03 1.29e-06 ; 3 -75.7907190240 -1.60e-05 4.26e-04 1.69e-03 5.72e-07 ; 4 -75.7907244154 -5.39e-06 2.25e-04 1.39e-03 2.96e-07 ; 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF E",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509:179,energy,energy,179,https://psicode.org,https://github.com/psi4/psi4/issues/1509,3,['energy'],['energy']
Energy Efficiency,"A recent [forum issue](http://forum.psicode.org/t/fatal-error-wavefunction-unable-to-obtain-mo-coefficients/2204/14) about obtaining dipoles has been complicated by the question of what the name of the variable to call them is. For example:. ```; wfn = psi4.properties(""scf"", properties=['dipole'], return_wfn=True)[1]; prop_dipole = wfn.variable(""SCF DIPOLE""). wfn = energy(""scf"", return_wfn=True)[1]; psi4.oeprop(wfn, ""DIPOLE""); oeprop_dipole = wfn.variable(""DIPOLE""); ```. These two methods of obtaining the dipole save it to the wavefunction under different names. Is there some way to make this more standardized?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2203:368,energy,energy,368,https://psicode.org,https://github.com/psi4/psi4/issues/2203,1,['energy'],['energy']
Energy Efficiency,"A segfaulting test case; ```; molecule {; 0 2; H; }; set reference uhf; set df_scf_guess false; set scf_type direct. basis {; assign test. [test]; spherical; ****; H 0; P 1 1.0; 1.0 1.0; ****; }; energy('scf'); ```. I have found one issue and fixed it in hf.cc; ```; diff --git a/psi4/src/psi4/libscf_solver/hf.cc b/psi4/src/psi4/libscf_solver/hf.cc; index fec5efaa4..c462addab 100644; --- a/psi4/src/psi4/libscf_solver/hf.cc; +++ b/psi4/src/psi4/libscf_solver/hf.cc; @@ -705,9 +705,15 @@ void HF::form_Shalf() {; ; // Convert the eigenvales to 1/sqrt(eigenvalues); const Dimension& dimpi = eigval->dimpi();; - double min_S = std::fabs(eigval->get(0, 0));; + // Cannot assume that (0,0) is a valid reference; + bool min_S_initialized = false;; + double min_S;; for (int h = 0; h < nirrep_; ++h) {; for (int i = 0; i < dimpi[h]; ++i) {; + if(!min_S_initialized) {; + min_S = eigval->get(h, i);; + min_S_initialized = true;; + }; ```; but now the code crashes somewhere in pybind11.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1694:196,energy,energy,196,https://psicode.org,https://github.com/psi4/psi4/issues/1694,1,['energy'],['energy']
Energy Efficiency,"A simple input fails to run:; ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```; a; And here is the error message:. ```; [henrique@localhost ~] $ psi4 teste.dat ; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 7, in <module>. File ""/usr/share/psi4/python/driver.py"", line 45, in <module>; import driver_util. File ""/usr/share/psi4/python/driver_util.py"", line 30, in <module>; from procedures import *. File ""/usr/share/psi4/python/procedures/__init__.py"", line 1, in <module>; from proc_table import procedures, hooks, energy_only_methods. File ""/usr/share/psi4/python/procedures/proc_table.py"", line 198, in <module>; for ssuper in proc.superfunctional_list():. File ""/usr/share/psi4/python/procedures/functional.py"", line 3605, in superfunctional_list; sup = superfunctionals[key](key, 1, 1). File ""/usr/share/psi4/python/procedures/functional.py"", line 1953, in build_b3lypd1_superfunctional; sup = build_b3lyp_superfunctional(name, npoints, deriv). File ""/usr/share/psi4/python/procedures/functional.py"", line 1224, in build_b3lyp_superfunctional; sup = psi4.SuperFunctional.blank(). TypeError: No to_python (by-value) converter found for C++ type: boost::shared_ptr<psi::SuperFunctional>. ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/531:218,energy,energy,218,https://psicode.org,https://github.com/psi4/psi4/issues/531,1,['energy'],['energy']
Energy Efficiency,"A user on the forums [reported](http://forum.psicode.org/t/psio-error-during-adc-2/1338) a PSIO error when using ADC(2). The input file is; ```; #! ADC/def-2SVP on BODIPY-Phe . molecule bodphe {; 0 1 ; N 0.07895 0.63049 2.21156; N 0.40701 -1.77253 2.18386; C 0.85975 -1.61894 0.87368; C 1.93462 -2.51476 0.66009; C 0.25153 -0.54266 0.07529; C 0.60747 0.60802 0.92030; C 1.47746 1.72071 0.77028; C 1.38234 2.45311 1.95195; C 2.07438 -3.24863 1.84094; C 0.53652 1.71840 2.84134; C 1.13424 -2.73093 2.77791; H 2.76916 -4.06657 2.02914; H 0.98002 -2.99119 3.82431; H 2.46553 -2.64393 -0.28198; H -0.76107 1.52726 -1.36025; C -0.87740 0.55157 -1.84231; C -0.42668 -0.61486 -1.17553; C -0.59367 -1.86931 -1.81442; H -0.24902 -2.77578 -1.30769; C -1.18278 -1.94632 -3.07591; H -1.30041 -2.92327 -3.55316; C -1.60723 -0.78659 -3.74115; H -2.04665 -0.85123 -4.73942; C -1.45720 0.45654 -3.10859; H -1.78685 1.36634 -3.61791; B -0.55985 -0.69534 2.82439; F -0.40573 -0.68314 4.19154; H 0.27433 1.92595 3.87885; H 1.84952 3.41187 2.17639; H 2.03049 1.96835 -0.13399; F -1.84936 -0.86321 2.39539; symmetry c1 ; }. set {; reference rhf; basis def2-svp; freeze_core true; guess auto ; roots_per_irrep [2] ; }. ref_energy = -906.2735763050857258 ; adc_energy = energy('adc'); ```. The (OV|VV) integral transformation completes, and then `file4_mat_irrep_rd_block` raises the following error:; ```; PSIO_ERROR: Can't find TOC Entry MO Ints V1243); PSIO_ERROR: unit = 61, errval = 13; PSIO_ERROR: 13 (no such TOC entry); ```. This may be a large system, but user's tests indicate scratch usage is at 10% at the time of the crash, and this error message isn't what PSIO normally displays during a memory problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1596:1246,energy,energy,1246,https://psicode.org,https://github.com/psi4/psi4/issues/1596,1,['energy'],['energy']
Energy Efficiency,"AC; @UHF iter 5: -98.96468336105178 -3.27194e+00 1.08919e-02 DIIS/FRAC; @UHF iter 6: -99.16143874023540 -1.96755e-01 9.82232e-04 DIIS/FRAC; @UHF iter 7: -99.16448800785139 -3.04927e-03 2.62203e-04 DIIS/FRAC; @UHF iter 8: -99.16466805777382 -1.80050e-04 9.94209e-05 DIIS/FRAC; @UHF iter 9: -99.16470603597492 -3.79782e-05 8.45894e-06 DIIS/FRAC; @UHF iter 10: -99.16470620018562 -1.64211e-07 6.74767e-07 DIIS/FRAC; Energy and wave function converged.; ```; and the final energy is close to my fully numerical value `-99.164711346`. However, if you remove `symmetry c1`, it is not using fractional occupations at all:; ```; ==> Fractionally-Occupied SCF Iterations <==. Alpha orbital 3 will contain 1.000E+00 electron.; Alpha orbital 4 will contain 1.000E+00 electron.; Alpha orbital 5 will contain 1.000E+00 electron.; Beta orbital 3 will contain 6.667E-01 electron.; Beta orbital 4 will contain 6.667E-01 electron.; Beta orbital 5 will contain 6.667E-01 electron. @UHF iter 1: -85.83418494094745 -8.58342e+01 2.89307e-01 DIIS; Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]. @UHF iter 2: -87.14703249342156 -1.31285e+00 8.61028e-02 FRAC; @UHF iter 3: -94.44949400540921 -7.30246e+00 1.33943e-01 DIIS/FRAC; @UHF iter 4: -88.66303583515608 5.78646e+00 7.46716e-02 DIIS/FRAC; @UHF iter 5: -97.45982782482486 -8.79679e+00 7.49420e-02 DIIS/FRAC; @UHF iter 6: -99.09220877420857 -1.63238e+00 2.78679e-02 DIIS/FRAC; @UHF iter 7: -99.44918068528692 -3.56972e-01 3.39613e-03 DIIS/FRAC; @UHF iter 8: -99.45912394307129 -9.94326e-03 7.68176e-04 DIIS/FRAC; @UHF iter 9: -99.45934128713316 -2.17344e-04 2.22026e-04 DIIS/FRAC; @UHF iter 10: -99.45935820610052 -1.69190e-05 3.31546e-05 DIIS/FRAC; @UHF iter 11: -99.45935869140743 -4.85307e-07 2.94426e-06 DIIS/FRAC; @UHF iter 12: -99.45935870608619 -1.46788e-08 1.74098e-06 DIIS/FRAC; @UHF iter 13: -99.45935871335570 -7.26951e-09 2.09073e-07 DIIS/FRAC; Energy and wave function converged.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1673:4939,Energy,Energy,4939,https://psicode.org,https://github.com/psi4/psi4/issues/1673,1,['Energy'],['Energy']
Energy Efficiency,ADIIS minimization failed for wB97M-V energy computation with modified VV10 parameters,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641:38,energy,energy,38,https://psicode.org,https://github.com/psi4/psi4/issues/2641,1,['energy'],['energy']
Energy Efficiency,"AL; Keyword: BASIS; atoms 1, 3-8 entry C line 117 (ECP: line 2345) file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/vdzp.gbs ; atoms 2, 9-11 entry H line 22 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/vdzp.gbs . !!! WARNING: ECP capability is in beta. Please check occupations closely. !!!. => WB97X3C: Empirical Dispersion <=. Grimme's -D4 (BJ-damping) Dispersion Correction with ATM; Caldeweyher, E.; Ehlert, S.; Hansen, A.; Neugebauer, H.; Spicher, S.; Bannwarth, C.; Grimmme, S., J. Chem. Phys. 150, 154122 (2019). a1 = 0.246400; a2 = 4.737000; alp = 16.000000; s6 = 1.000000; s8 = 0.000000; s9 = 1.000000; ga = 3.000000; gc = 2.000000; wf = 6.000000. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; C -3.385689447328 -1.019909032022 -1.749453831407 12.000000000000; H -4.303799447328 -1.298729032022 -2.222123831407 1.007825032230; C -2.336629447328 -0.701769032022 -1.209473831407 12.000000000000; C -1.177199447328 -0.351139032022 -0.612463831407 12.000000000000; C -0.119169447328 -0.031909032022 -0.066563831407 12.000000000000; C 1.038150552672 0.314670967978 0.533526168593 12.000000000000; C 2.088230552672 0.627260967978 1.081186168593 12.000000000000; C 3.329350552672 0.995630967978 1.729406168593 12.000000000000; H 3.940040552672 1.640920967978 1.078936168593 1.007825032230; H 3.139820552672 1.543830967978 2.665426168593 1.007825032230; H 3.926960552672 0.104360967978 1.976426168593 1.007825032230. Running in c1 symmetry. Rotational constants: A = 5.27900 B = 0.02592 C = 0.02592 [cm^-1]; Rotational constants: A = 158260.38795 B = 777.17946 C = 777",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:18932,charge,charge,18932,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['charge'],['charge']
Energy Efficiency,Access to terms in the MP2 energy from Python,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/642:27,energy,energy,27,https://psicode.org,https://github.com/psi4/psi4/issues/642,1,['energy'],['energy']
Energy Efficiency,"According to [the documentation](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#L329-L330) of `sotoao()`, the function is supposed to return the inverse of `PetiteList.aotoso()`. This matrix is not guaranteed to be invertible. If the matrix is _not_ invertible, multiplying `sotoao()` and `aotoso()` together does not yield the identity matrix. The problem is that `aotoso()` isn't even guaranteed to be square. The SO space will always be [the number of basis functions](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#622-L639). The AO space will be [the number of basis functions or the number of atomic orbitals ](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#615-L620), depending on whether `include_pure_transform_` is set. In other words, you may be transforming from either Cartesian or pure angular momentum functions to symmetry-adapted pure angular momentum functions. If `d` or higher angular momentum functions are present, then choosing to transform from Cartesian functions means you have more atomic orbitals than basis functions, so the row and column dimensions don't match. The transformation isn't even square, let alone invertible, so of course `sotoao()` returns nonsense. The following input file almost demonstrates the problem. You'll need to PyBind the `PetiteList` initializer over as well for it to run. ```; molecule mol {; 0 3; symmetry c1; C 0.0000000000 0.0000000000 -0.5928430915; H -0.0000000000 0.9469373770 -1.1509808737; H 0.0000000000 -0.9469373770 -1.1509808737; }. basis = core.BasisSet.build(mol, ""ORBITAL"", ""cc-pvdz"", quiet=True); factory = core.IntegralFactory(basis). # np.dot(so2ao, ao2so) should always be the identity. The functions are inverses. # We have a problem!; petite = core.PetiteList(basis, factory, True); so2ao = petite.sotoao().nph[0]; print(so2ao); print(so2ao.shape) # (24, 25) ; ao2so = petite.aotoso().nph[0]; print(np.dot(so2ao, ao2so)). # Works ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1763:929,adapt,adapted,929,https://psicode.org,https://github.com/psi4/psi4/issues/1763,1,['adapt'],['adapted']
Energy Efficiency,"According to [the forums](http://forum.psicode.org/t/windows-anaconda-nightly-build-failing-on-sapt0-calculations/2353/4), the following simple input file raises `PSIO_ERROR: unit = 193, errval = 8` AKA trying to close file 193 when it's not even open:. ```; memory 4 GB. molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis jun-cc-pvdz. energy('sapt0'); ```. Possibly of importance is that the reporter supplied `-n 10` to the computation, so threading may be involved.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2342:565,energy,energy,565,https://psicode.org,https://github.com/psi4/psi4/issues/2342,1,['energy'],['energy']
Energy Efficiency,Adapt PSIMRCC to compute_energy standard,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1854:0,Adapt,Adapt,0,https://psicode.org,https://github.com/psi4/psi4/pull/1854,1,['Adapt'],['Adapt']
Energy Efficiency,Added MBIS Charge Partitioning Scheme,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1961:11,Charge,Charge,11,https://psicode.org,https://github.com/psi4/psi4/pull/1961,1,['Charge'],['Charge']
Energy Efficiency,Added isapt-charged example,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2950:12,charge,charged,12,https://psicode.org,https://github.com/psi4/psi4/pull/2950,1,['charge'],['charged']
Energy Efficiency,"An error which is very high on my to-fix list, but where the fix is very involved. DF-DCT properties as present are not correct. I've tested against my own Python code and the Psi code and found disagreements in the fifth and sixth decimal place between finite difference and analytic properties. I've spoken with the code authors, and we are aware of two sources of disagreement.; 1. For gradients, the RDMs are contracted against the conventional derivative integrals, not the density fitted derivative integrals.; 2. Due to a subtle point in the derivation, the DF-DCT cumulant stationarity conditions are not variational minimization of the energy, as they are in conventional DCT. Accordingly, you're missing a cumulant response term for gradients and other properties. The fix for point 1 will hopefully just be marking the wavefunction as density fitted and leave the contractions to the `Deriv` object. However, DCT at present interferes with RDM processing in `libtrans`, so the fix will be likely be more involved. The fix for point 2 is not clear. I'm aware of three options:; * Change the DF-DCFT stationarity conditions to be variational minimization of the energy; * Change which terms are to be contracted against JKFIT integrals and which against RIFIT integrals, so the stationarity conditions are ""fixed"" automatically; * Add a cumulant response term. (Please don't make me do this.). I favor option B, but it'll take time to see what B does to energies.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1579:645,energy,energy,645,https://psicode.org,https://github.com/psi4/psi4/issues/1579,2,['energy'],['energy']
Energy Efficiency,"Any computation that attempts to compute frequencies of a density fitted method will crash unless the symmetry is explicitly set to c1. Gradients do not have this problem. The below input file demonstrates the problem and has been taken from the test cases. The only modifications are changing gradients to frequencies and CCSD(T) to MP2. The bug is there with both methods, and also CCSD. I haven't checked other DF methods. ```; #! DF-MP2 cc-pVDZ energy for the H2O molecule. molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776 ; }. set {; basis cc-pvdz; df_basis_scf cc-pvdz-jkfit; df_basis_cc cc-pvdz-ri; scf_type df; guess sad ; freeze_core true; cc_type df; qc_module occ ; }. frequencies('mp2', dertype=0); ```; The crash gives the following error message:; ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1774, in frequency; H, wfn = hessian(lowername, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1595, in hessian; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1608, in run_dfocc; ""RIFIT"", core.get_global_option(""BASIS"")); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py"", line 99, in pybui",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1093:449,energy,energy,449,https://psicode.org,https://github.com/psi4/psi4/issues/1093,1,['energy'],['energy']
Energy Efficiency,"As discussed in #2204, Psi's current second-order SCF technology is the straightforward Newton-Raphson approach. This is prone to fail in cases where the MO hessian has a small, negative eigenvalue near the minimum, and it would be good if we had a modified second-order method that could handle this. As a test case, this eigenstructure problem causes the convergence failure of. ```; molecule {; 0 2; Mg; F 1 3.0; }. set reference uhf ; set soscf true ; set soscf_print true ; set soscf_max_iter 10; set stability_analysis follow. energy('hf/cc-pvdz'); ```. as confirmed by running the system with the Psi4Numpy SOSCF code. @susilehtola suggested a level shift as a possible fix, but I'm open to alternatives.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2212:533,energy,energy,533,https://psicode.org,https://github.com/psi4/psi4/issues/2212,1,['energy'],['energy']
Energy Efficiency,"As mentioned [here](http://forum.psicode.org/t/manual-update-dfocc-requires-scf-type-disk-df/904/3), users can set `scf_type` in the SCF local namespace which will really mess with a great deal of our logic. I think this should be extracted and placed in globals only similar to `CC_TYPE` and the like. @loriab any thoughts?. ```; set scf {; scf_type df; }; energy('ccsd(t)/aug-cc-pvtz'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1019:358,energy,energy,358,https://psicode.org,https://github.com/psi4/psi4/issues/1019,1,['energy'],['energy']
Energy Efficiency,"As the title stated, I want to perform fsapt calculation on a system that contains iodine atoms. At the begining I used the aug-cc-tzvp but it didn't contain the parameter for iodine.So I use the basis set def2-tzvp which contains the parameter for iodine. But when I run the calculation, it sent out such error message:; ```; Traceback (most recent call last):; File ""/pubhome/zchen02/miniconda3/envs/psi4/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 141, in <module>; File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 3631, in run_fisapt; core.get_global_option(""MINAO_BASIS"")); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/p4util/python_helpers.py"", line 80, in _pybuild_basis; mol.to_dict(), key, resolved_target, fitrole, other, return_dict=True, return_atomlist=return_atomlist); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 679, in pyconstruct; verbose=verbose); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 897, in construct; (at + 1, key, text2)). psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 106 for key BASIS among:; Shell Entries: ['I']; Basis Sets: [('CC-PVTZ-MINAO', 'CC-PVTZ-MINAO', None)]; ```; Is there any method to solve this problem?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2291:606,energy,energy,606,https://psicode.org,https://github.com/psi4/psi4/issues/2291,2,['energy'],['energy']
Energy Efficiency,Asinine energy with DF-FNO-CCSD(T) energy,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1545:8,energy,energy,8,https://psicode.org,https://github.com/psi4/psi4/issues/1545,2,['energy'],['energy']
Energy Efficiency,"Assume I have the electron density represented as the expansion coefficients under an DF auxiliary basis (which come from machine learning prediction). Although the kinetic energy cannot be evaluated without an AO basis, theoretically the Kohn-Sham effective potential has no kinetic term and should be able to be constructed from DF density (assume we are using PBE). Then we might restart the DFT from this effective potential. Is this possible for psi4? And if so, may I have some hints on how to do this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3070:173,energy,energy,173,https://psicode.org,https://github.com/psi4/psi4/issues/3070,1,['energy'],['energy']
Energy Efficiency,"Attempting frequency() for atomic species fails irrespective of charge, multiplicity, and reference type. Typical error message:. > 1 displacements needed.; > 1; > ; > An error has occurred. Traceback:; > <type 'exceptions.IndexError'>: basic_string::replace: File ""<string>"", line 26, in <module>; > ; > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in frequency; > psi4.thermo(wfn, wfn.frequencies()). Thanks,; -drhaney, -- that's ""D. R."", not Doctor. Typical input file attached (C atom, neutral triplet).; [C.txt](https://github.com/psi4/psi4/files/198782/C.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332:64,charge,charge,64,https://psicode.org,https://github.com/psi4/psi4/issues/332,1,['charge'],['charge']
Energy Efficiency,"Attempts to use both density fitting and the quadratically convergent algorithm in DCT crash Psi. In particular, the following input file. ```; molecule adduct {; O; H 1 1 ; H 1 1 2 104.5; }. set {; basis sto-3g; reference uhf ; dcft_type df; }. set dcft {; algorithm qc; }. energy('dcft'); ```. raises the following error. ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 272, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/procrouting/proc.py"", line 1489, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libpsio/error.cc on line: 128 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::read(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); ```. Public Enemy No. 2, we meet again... My hunch is that this was never implemented, and an error just needs to be raised until it is implemented. However, it may actually be implemented, but just suffering from a bug. I'll be leaving this error message here until I can figure out which - that will take a while.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1353:275,energy,energy,275,https://psicode.org,https://github.com/psi4/psi4/issues/1353,3,['energy'],['energy']
Energy Efficiency,"B2u 0.442532 2B3u 0.442532 2B1u 0.442532; 3Ag 0.485648 4Ag 1.228480 1B3g 1.228480; 5Ag 1.228480 1B2g 1.228480 1B1g 1.228480; 3B3u 1.526002 3B2u 1.526002 3B1u 1.526002; 6Ag 2.051155 7Ag 3.283338 2B2g 3.283338; 2B3g 3.283338 2B1g 3.283338 8Ag 3.283338; 4B2u 3.331721 4B3u 3.331721 1Au 3.331721; 4B1u 3.331721 5B3u 3.331721 5B2u 3.331721; 5B1u 3.331721 6B2u 5.672254 6B1u 5.672254; 6B3u 5.672254 7B1u 9.267994 7B2u 9.267994; 7B3u 9.267994 8B1u 9.267994 8B3u 9.267994; 2Au 9.267994 8B2u 9.267994 9Ag 9.745165; 3B2g 9.745165 3B1g 9.745165 3B3g 9.745165; 10Ag 9.745165 11Ag 10.965644. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; ```. Energy converged. @RHF Final Energy: -99.45080702230226. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -143.9965313656634294; Two-Electron Energy = 44.5457243433611438; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -99.4508070223022855. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-06 at Fri Jan 8 13:56:55 2016; Module time:; user time = 10.33 seconds = 0.17 minutes; system time = 0.28 seconds = 0.00 minutes; total time = 2 seconds = 0.03 minutes; Total time:; user time = 10.33 seconds = 0.17 minutes; system time = 0.28 seconds = 0.00 minutes; total time = 2 seconds = 0.03 minutes. **\* tstart() called on node5-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:8128,Energy,Energy,8128,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['Energy'],['Energy']
Energy Efficiency,"BS_BASIS cc-pvtz-f12-optri; DF_BASIS_F12 aug-cc-pvtz-ri; F12_TYPE df; CABS_SINGLES true; }. energy('mp2-f12'); ```. ### Timings; Timings and maxvmem are an average over 50 runs.; Orbital basis set (OBS) is cc-pVTZ-F12 (VTZ-F12) and CABS is cc-pVTZ-F12-OPTRI. For DF, auxiliary basis set (AUX) is aug-cc-pVTZ-RI. Timings and Max RAM Usage for MP2-F12/3C(FIX):; VTZ-F12 | NOBS | NCABS | Total (s) | Total (min) | maxvmem (GB); -- | -- | -- | -- | -- | --; CH4 | 125 | 239 | 176.48 | 2.94 | 27.554; NH3 | 107 | 198 | 96.64 | 1.61 | 15.060; H2O | 89 | 157 | 53.02 | 0.88 | 7.828; HF | 71 | 116 | 17.96 | 0.30 | 4.081. Timings and Max RAM Usage for DF-MP2-F12/3C(FIX):; VTZ-F12 | NOBS | NCABS | NAUX | Total (s) | maxvmem (GB); -- | -- | -- | -- | -- | --; CH4 | 125 | 239 | 290 | 6.24 | 3.219; NH3 | 107 | 198 | 244 | 4.91 | 2.763; H2O | 89 | 157 | 198 | 2.13 | 2.282; HF | 71 | 116 | 152 | 1.18 | 2.128. ### VTune Analysis for MP2-F12/3C(FIX); Memory consumption is most egregious in the `form_teints` where the allocation of the AO ERI is quite large with the largest AO being (NOBS, NOBS, NRI, NRI) e.g. CH4 would be (125, 125, 364, 364); ![image](https://github.com/psi4/psi4/assets/52012150/7483bfd5-b2ec-4a32-a5a8-1f905d745054). CPU Time all goes back to the `form_teints` function and specifically the `two_body_ao_computer`; ![image](https://github.com/psi4/psi4/assets/52012150/07eedb8d-5e89-4614-a4f3-315a7f669f27). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] MP2-F12 single-point energy. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] Computes in-core MP2-F12/3C(FIX) energy; - [X] Computes disk MP2-F12/3C(FIX) energy; - [X] Computes in-core DF-MP2-F12/3C(FIX) energy; -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3110:2008,consumption,consumption,2008,https://psicode.org,https://github.com/psi4/psi4/pull/3110,1,['consumption'],['consumption']
Energy Efficiency,"Because the fno code is an efficient implementation of mp2 natural orbitals, it'd make a whole lot of sense to have ""fno"" variants of detci keywords, which would just trigger the detci calculation in the MP2 NO basis. The better starting guess would make CASSCF and RASSCF calculations converge a lot more quickly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/829:27,efficient,efficient,27,https://psicode.org,https://github.com/psi4/psi4/issues/829,1,['efficient'],['efficient']
Energy Efficiency,CBS hessian behaves differently than energy and grad,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:37,energy,energy,37,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['energy'],['energy']
Energy Efficiency,"CCSD calculations on the N and F atoms result in segmentation faults for me (gcc 4.8.1, boost 1.53, python 3.3.2). I used the input file:. ```; molecule f { ; f 0.00 0.00 0.00; }; set basis cc-pVTZ; set scf reference uhf ; energy('ccsd'); ```. (and similarly for N). I tried increasing the memory and changing basis set to no avail (some basis sets caused a back trace rather than just a segmentation fault). Curiously CCSD calculations with a UHF reference on the rest of the period 2 atoms ran without a problem. Running psi4 through gdb and the backtraces indicate the problem is with freeing an invalid pointer when closing a dpd buffer in ccenergy/pair_energies.cc. Full backtrace from gdb:. ```; (gdb) where; #0 0x00007ffff45e62a4 in free () from /usr/lib/libc.so.6; #1 0x000000000136b8bc in psi::free_int_matrix (array=0x29d1fc0) at /home/james/projects/psi4/src/lib/libciomr/int_array.cc:134; #2 0x00000000012edea5 in psi::DPD::buf4_close (this=<optimized out>, Buf=Buf@entry=0x7fffffffd630); at /home/james/projects/psi4/src/lib/libdpd/buf4_close.cc:50; #3 0x000000000082dbf8 in psi::ccenergy::pair_energies (epair_aa=epair_aa@entry=0x7fffffffd7c8, epair_ab=epair_ab@entry=0x7fffffffd7d0); at /home/james/projects/psi4/src/bin/ccenergy/pair_energies.cc:99; #4 0x000000000086b797 in psi::ccenergy::ccenergy (options=...) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:307; #5 0x000000000086f4a5 in psi::ccenergy::CCEnergyWavefunction::compute_energy (this=0x293b760) at /home/james/projects/psi4/src/bin/ccenergy/ccenergy.cc:171; #6 0x00000000007004f4 in py_psi_ccenergy () at /home/james/projects/psi4/src/bin/psi4/python.cc:429; #7 0x00000000007080f7 in invoke<boost::python::to_python_value<double const&>, double (*)()> (rc=..., f=<optimized out>); at /usr/include/boost/python/detail/invoke.hpp:75; #8 operator() (args_=<optimized out>, this=<optimized out>) at /usr/include/boost/python/detail/caller.hpp:223; #9 boost::python::objects::caller_py_function_impl<boost::python::",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/12:223,energy,energy,223,https://psicode.org,https://github.com/psi4/psi4/issues/12,1,['energy'],['energy']
Energy Efficiency,CIWave: Fixes occasional power issue with the MCSCF DIIS object,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/610:25,power,power,25,https://psicode.org,https://github.com/psi4/psi4/pull/610,1,['power'],['power']
Energy Efficiency,"CSD(T): 36451.32 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 26; Number of active occupied orbitals: 74; Number of active virtual orbitals: 640; Number of frozen virtual orbitals: 38. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 393. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -3.045395864164; SS MP2 FNO correction: -1.111907331006; MP2 FNO correction: -4.157303195170. OS MP2 correlation energy: -3.045395864164; SS MP2 correlation energy: -1.111907331006; MP2 correlation energy: -4.157303195170; * MP2 total energy: -1500.355601695273. OS CCSD correlation energy: -3.045395864164; SS CCSD correlation energy: -1.111907331006; CCSD correlation energy: -4.157303195170; * CCSD total energy: -1500.355601695273. Total time for CCSD iterations: 3404.15 s (user); 270.93 s (system); 607 s (total). Time per iteration: inf s (user); inf s (system); inf s (total). *** tstop() called on r3546 at Mon Feb 10 14:43:17 2014; Module time:; user time = 31046.70 seconds = 517.45 minutes; system time = 945.63 seconds = 15.76 minutes; total time = 5144 seconds = 85.73 minutes; Total time:; user time = 33202.74 seconds = 553.38 minutes; system time = 990.31 seconds = 16.51 minutes; total time = 5317 seconds = 88.62 minutes. *** tstart() called on r3546; *** at Mon Feb 10 14:57:28 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 16; available memory = 83711.64 mb; memory requirements = 36451.32 mb. ```. PSIO error (from stderr). ```; PSIO_ERROR: unit = 260, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); Traceback (most recent call last):; File ""<string>"", line",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34:2350,energy,energy,2350,https://psicode.org,https://github.com/psi4/psi4/issues/34,1,['energy'],['energy']
Energy Efficiency,CUBEPROP: Compute adaptive isocontour range for cube files,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/864:18,adapt,adaptive,18,https://psicode.org,https://github.com/psi4/psi4/pull/864,1,['adapt'],['adaptive']
Energy Efficiency,"Carlos is going to look into writing us a few test cases that make sure that all MP2 methods and all CC methods in Psi4 give consistent energies. - [ ] DF-MP2: Rob's code vs dfnocc is already in test case test/fnocc4, at the end. Split this part out to a new test case that compares these two as well as from the occ module. set qc_module occ will run Ugur's code (give it method 'mp2').; - [ ] Conventional MP2: Crawford's code vs fnocc vs occ; - [ ] DF-CCSD and DF-CCSD(T): Eugene's code with no FNO (df-fnocc), Ugur's code; - [ ] CCSD and CCSD(T): fnocc vs Crawford's code (ccenergy); - [ ] CEPA comparison: energy('cepa(0)') vs LCCD if available for non-OO, and vs DCFT [FYI some CEPA definitions have singles, others don't]",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/714:611,energy,energy,611,https://psicode.org,https://github.com/psi4/psi4/issues/714,1,['energy'],['energy']
Energy Efficiency,"Carried forward from [forum](http://forum.psicode.org/t/fatal-error-wavefunction-unable-to-obtain-mo-coefficients/2204/12). Even with SOSCF, I'm not able to converge MgF at 3 Angstroms. Several of the iterations display non-monotonic decrease of the residual, sometimes increasing after PCG iterations. This is surprising but I don't think mathematically inpossible, if the MO Hessian isn't positive semi-definite, in which case, CG methods fail. If that was all, we should look into alternate SOSCF methods. But even when convergence is monotonic, one sees an energy improvement on the order of 1e-4 hartrees, and negligible drop in the residual. What's going wrong here? I have a memory that the SOSCF step isn't being taken correctly (by exponentiation), so that's worth looking into. Probably a weekend project for me...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2204:561,energy,energy,561,https://psicode.org,https://github.com/psi4/psi4/issues/2204,1,['energy'],['energy']
Energy Efficiency,"Carried forward from [forums](http://forum.psicode.org/t/cfour-outfile-inconsistent-with-cfour-grd/1642). I haven't run this myself, but the output file the reporter gave is from 1.3.2 release, and I don't think the CFOUR driver has been touched since then. @loriab, correct me if I'm wrong. See the following input file:; ```; memory 2 gb. molecule co2 {; C; O 1 1.163; O 1 1.163 2 180; }. set basis aug-cc-pvdz; set CFOUR_ABCDTYPE AOBASIS; set CFOUR_CC_PROGRAM ecc; set cfour_anharmonic VIBROT; set cfour_vibration findif. optimize('c4-ccsd(t)'); ```. Psi will do a sanity check at the end of the computation, that the nuclear repulsion energy harvested from CFOUR output agrees with the same as computed from CFOUR's GRD file. In this case, they disagree. The output harvested quantity is the _undisplaced geometry_, where the GRD harvest is the last displacement to run, which is a _displaced geometry_. Unsurprisingly, the nuclear repulsion energies disagree between the two, and Psi reports a [validation error](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/cfour.py#L597).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1784:639,energy,energy,639,https://psicode.org,https://github.com/psi4/psi4/issues/1784,1,['energy'],['energy']
Energy Efficiency,"Carried forward from [the forums](http://forum.psicode.org/t/a-roots-per-irrep-value-crashes-cc3/1826). The following input file. ```; molecule radical {; 0 2; O 0.0000000000 0.0000000000 0.1081705869; H 0.0000000000 0.0000000000 -0.8651605869; units angstrom; symmetry C1; }; set {; basis ""6-31+G(d)""; reference ""uhf""; freeze_core true; roots_per_irrep [3] ; }; energy('eom-cc3'); ```. gives the error `Parameter 3 was incorrect on entry to DGEBAL.` and then segfaults. Initial debugging attempts indicate that at the time [this line is executed](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/cceom/diag.cc#L555) `G[0][0] = NaN`, causing the subsequent matrix diagonalization to fail. Determining why `G[0][0] = NaN` will require expert attention. If there is some legitimate reason for the failure, a more helpful error message should be printed instead. The only one I can think of is if we were capturing only one state of a degenerate pair. But as the original poster remarked, setting `roots_per_irrep` to other numbers like 2 or 4 worked just fine, and when I set `roots_per_irrep` to 4, none of the roots had the same EOM energy. That seems to eliminate the ""degenerate pair"" hypothesis.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1931:363,energy,energy,363,https://psicode.org,https://github.com/psi4/psi4/issues/1931,2,['energy'],['energy']
Energy Efficiency,"Carried forward from a forum report. Consider the following input file designed to use a custom SCF guess. (And unfortunately, there isn't a much cleaner way to do this.). ```; import numpy as np. memory 4 GB. molecule mymol {; symmetry C1; no_reorient; 0 1; H1 0.00000000 0.00000000 0.00000000; H2 0.00000000 0.00000000 0.60000000; }. set {; basis sto-3g; scf_type pk; reference rhf; maxiter 1; }. mo_coeff = np.array([; [ 3.12018412E-01, 2.77605634E-01, 3.12018412E-01, 2.77605634E-01],; [ 8.82705828E-02, 2.02527493E+00, -8.82705828E-02, -2.02527493E+00],; [ 7.20615388E-01, -6.53699105E-01, 7.20615388E-01, -6.53699105E-01],; [ -1.21367472E+00, 1.40100934E+00, 1.21367472E+00, -1.40100934E+00]; ]).T. try:; energy('scf'); except SCFConvergenceError as e:; scf_wfn = e.wfn; scf_wfn.Ca().from_array(mo_coeff); scf_wfn.to_file(scf_wfn.get_scratch_filename(180)); set guess read; set maxiter 200; energy('scf'); ```. The `set guess read` is ignored because Psi internally set the SCF local option to be read, causing the global option to be ignored. To fix this, first, we'll need to _find_ where Psi is setting this internally. Which seems like a simple enough fix. From there, we'll need to make sure that the setting is only temporary through the use of OptionsStash objects, as done frequently throughout `driver/procrouting.py`. I'm marking this as `new_dev` friendly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2110:711,energy,energy,711,https://psicode.org,https://github.com/psi4/psi4/issues/2110,2,['energy'],['energy']
Energy Efficiency,"Carrying forward a recent [forum report](http://forum.psicode.org/t/df-casscf-energy-not-equal-to-those-of-other-programs/2064/4). The report has a working example of the behavior. Suppose you compute a DF-CASSCF wavefunction with an initial DF-HF wavefunction, and an initial conventional-integral HF wavefunction. In both cases, you change the orbitals because you have a better initial guess. The CASSCF energy should be the same in both cases, as long as the two attempts converge to the same state. No way these two initial wavefunctions differ should change the final result, not even their different initial Fock matrices. But for the reporter's example, the two have an energy difference of 14 microHartrees.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2119:78,energy,energy-not-equal-to-those-of-other-programs,78,https://psicode.org,https://github.com/psi4/psi4/issues/2119,3,['energy'],"['energy', 'energy-not-equal-to-those-of-other-programs']"
Energy Efficiency,"Carrying forward an issue from the [forums](http://forum.psicode.org/t/failed-to-converge-in-sapt-calculation/1506/6). A user reported an SCF they couldn't converge. Even on the newest master and using SOSCF, I can't converge it. The specific way in which it fails to converge indicates there is something wrong with Psi. I've included my test file below, using basis sets taken from EMSL.; [scf_demo.txt](https://github.com/psi4/psi4/files/3600864/scf_demo.txt). The SOSCF iterations look like:; ```; Total Energy Delta E RMS |[F,P]|. @DF-ROHF iter SAD: -1924.11724276608629 -1.92412e+03 0.00000e+00 ; @DF-ROHF iter 1: -1928.28933947889254 -4.17210e+00 2.53544e-03 DIIS ; @DF-ROHF iter 2: -1928.45146002818092 -1.62121e-01 1.47486e-03 DIIS ; @DF-ROHF iter 3: -1928.51413649707683 -6.26765e-02 1.68876e-04 SOSCF, nmicro=5; @DF-ROHF iter 4: -1928.51791993729876 -3.78344e-03 1.54401e-05 SOSCF, nmicro=5; @DF-ROHF iter 5: -1928.51821178601676 -2.91849e-04 1.97203e-05 SOSCF, nmicro=5; @DF-ROHF iter 6: -1928.51827252226894 -6.07363e-05 2.98751e-06 SOSCF, nmicro=5; @DF-ROHF iter 7: -1928.51828987200679 -1.73497e-05 5.27601e-06 SOSCF, nmicro=5; @DF-ROHF iter 8: -1928.51829604915929 -6.17715e-06 1.67929e-06 SOSCF, nmicro=5; @DF-ROHF iter 9: -1928.51830046281020 -4.41365e-06 3.51665e-06 SOSCF, nmicro=5; @DF-ROHF iter 10: -1928.51830387234213 -3.40953e-06 1.32956e-06 SOSCF, nmicro=5; @DF-ROHF iter 11: -1928.51830692139856 -3.04906e-06 3.05868e-06 SOSCF, nmicro=5; @DF-ROHF iter 12: -1928.51830971085883 -2.78946e-06 1.20987e-06 SOSCF, nmicro=5; @DF-ROHF iter 13: -1928.51831235087457 -2.64002e-06 2.86336e-06 SOSCF, nmicro=5; @DF-ROHF iter 14: -1928.51831487022673 -2.51935e-06 1.14965e-06 SOSCF, nmicro=5; @DF-ROHF iter 15: -1928.51831729563537 -2.42541e-06 2.74681e-06 SOSCF, nmicro=5; @DF-ROHF iter 16: -1928.51831963922041 -2.34359e-06 1.10840e-06 SOSCF, nmicro=5; @DF-ROHF iter 17: -1928.51832191065023 -2.27143e-06 2.65960e-06 SOSCF, nmicro=5; @DF-ROHF iter 18: -1928.51832411656915 -2.20592e-0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1716:508,Energy,Energy,508,https://psicode.org,https://github.com/psi4/psi4/issues/1716,1,['Energy'],['Energy']
Energy Efficiency,"Carrying forward from [a forum post](http://forum.psicode.org/t/memory-leak-in-psi4-energy/1230/). . A user reported memory leaks in Psi4. Terminating the following sample code prematurely; ```; import psi4; psi4.set_memory('1000 MB'). mol = psi4.geometry('''; O; H 1 0.96; H 1 0.96 2 104.5; '''). psi4.set_options({'basis' : 'cc-pVDZ'}); EHF, wfn = psi4.energy('scf', return_wfn='on'); for i in range(10000):; psi4.energy('detci', ref_wfn=wfn); ```; I get the following memory usage graph using developer Psi, which spans several iterations:. ![detci_mem](https://user-images.githubusercontent.com/29777889/52713199-aac84f00-2f64-11e9-9069-0bdda9ee6ac6.png). User reported another, smaller memory leak in the `scf` code. That, I have not attempted to reproduce. There may be _other_ memory leaks, and it would be worthwhile to check for them.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1532:84,energy,energy,84,https://psicode.org,https://github.com/psi4/psi4/issues/1532,3,['energy'],['energy']
Energy Efficiency,"Carrying forward from [forum report](http://forum.psicode.org/t/slight-mismatching-of-casscf-between-total-mcscf-energy-and-mcscf-root-0-energy/1693). `detci` reports a different `MCSCF Root 0 Energy` than its `Total MCSCF Energy`. This is possibly the same root issue as #2119, but debugging is needed to confirm.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2258:113,energy,energy-and-mcscf-root-,113,https://psicode.org,https://github.com/psi4/psi4/issues/2258,4,"['Energy', 'energy']","['Energy', 'energy', 'energy-and-mcscf-root-']"
Energy Efficiency,"Carrying forward from [the forums](http://forum.psicode.org/t/problem-when-passing-a-reference-wavefunction-to-df-ccsd-in-the-fnocc-module/1346). . The following input file leads to a PSIO error:; ```; molecule {; O; H 1 r; H 1 r 2 a. r=0.958; a=104.5. symmetry c1; }. set scf_type df; set cc_type df; set df_ints_io save; eng, wfn = psi4.energy('hf/cc-pvdz', return_wfn=True); cc_eng = psi4.energy('ccsd/cc-pvdz', ref_wfn=wfn); ```. The following workaround input file runs fine:; ```; molecule {; O; H 1; H 1 r 2 a; r=0.958; a=104.5; symmetry c1; }. set basis cc-pvdz; set scf_type df; set cc_type df; set df_ints_io save; eng, wfn = psi4.energy(‘hf’, return_wfn=True); cc_eng = psi4.energy(‘ccsd’, ref_wfn=wfn); ```. Still, it would be good to figure out what is differing between these two cases.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1604:339,energy,energy,339,https://psicode.org,https://github.com/psi4/psi4/issues/1604,4,['energy'],['energy']
Energy Efficiency,Charge-aware frozen core,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350:0,Charge,Charge-aware,0,https://psicode.org,https://github.com/psi4/psi4/pull/1350,1,['Charge'],['Charge-aware']
Energy Efficiency,Check convergence of FCI energy/residual,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/394:25,energy,energy,25,https://psicode.org,https://github.com/psi4/psi4/issues/394,1,['energy'],['energy']
Energy Efficiency,"Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+ gives very different energies.; The following input with the core guess gives a total energy of -75.5488580481183476. ```; memory 250 mb; molecule h2o {; symmetry c1; 1 2; O 0.0000000000 0.0000000000 -0.2249058930; H 1.4523499293 0.0000000000 0.8996235720; H -1.4523499293 0.0000000000 0.8996235720; units bohr; no_reorient; no_com; }. set {; basis cc-pVDZ; scf_type direct ; guess core ; reference uhf; e_convergence 7; d_convergence 7; }. energy_scf1 = energy('scf'); ```. while this input with the SAD guess gives a total energy of -75.6330881795159655. ```; memory 250 mb; molecule h2o {; symmetry c1; 1 2; O 0.0000000000 0.0000000000 -0.2249058930; H 1.4523499293 0.0000000000 0.8996235720; H -1.4523499293 0.0000000000 0.8996235720; units bohr; no_reorient; no_com; }. set {; basis cc-pVDZ; scf_type direct ; guess sad ; reference uhf; e_convergence 7; d_convergence 7; }. energy_scf1 = energy('scf'); ```. Of course, the initial guess has always a huge impact on the calculation, but is the reported difference reasonable for a system as small as H2O+?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211:156,energy,energy,156,https://psicode.org,https://github.com/psi4/psi4/issues/211,4,['energy'],['energy']
Energy Efficiency,Compute both gradient and energy,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2878:26,energy,energy,26,https://psicode.org,https://github.com/psi4/psi4/issues/2878,1,['energy'],['energy']
Energy Efficiency,"Consider the following input file:; ```; molecule = geometry(""""""; H; H 1 1.0 ; """"""). set basis sto-3g. wfn = energy('b3lyp', return_wfn=True)[1]; assert isinstance(wfn, core.RHF). c1_molecule = molecule.clone(); c1_molecule.reset_point_group('c1'); c1_molecule.fix_orientation(True); c1_molecule.fix_com(True); c1_molecule.update_geometry(); c1_basis = core.BasisSet.build(c1_molecule, ""ORBITAL"", core.get_global_option('BASIS'), quiet=True). new_wfn = wfn.c1_deep_copy(c1_basis); ```. The computation crashed with an error message about the functional being ""unpolarized for UV reference."" The problem is on [this line](https://github.com/psi4/psi4/blob/c57375a3f02b6b339e028516ea44c6911c2e9e22/psi4/src/psi4/libscf_solver/hf.cc#L271). The reference is RHF, not RKS, so the if-statement makes the wrong choice.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2335:109,energy,energy,109,https://psicode.org,https://github.com/psi4/psi4/issues/2335,1,['energy'],['energy']
Energy Efficiency,"Consider the following input file:; ```; molecule h2o {; symmetry c1; 0 1 ; O; H 1 0.957119; H 1 0.957119 2 104.225; }. set {; basis cc-pVDZ; freeze_core true; pair_energies_print true; cachelevel 1; }. energy('ccsd'); energy('ccsd'); ```. The second time the MP2 orbital energies are printed, they use the CCSD values. This is because the MP2 values are initialized from the [tau amplitudes](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/pair_energies.cc#L69), but those initialize to the values from the first computation. I attempted to fix this by changing the line in question to read amplitudes from the DPD file ""tauIjAb (MP2)"", but this caused a test failure for low values of `cachelevel`, as the MP2 amplitudes are not saved, but the CCSD amplitudes were, for reasons that are unclear to me. The correct fix is also unclear to me.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2457:203,energy,energy,203,https://psicode.org,https://github.com/psi4/psi4/issues/2457,2,['energy'],['energy']
Energy Efficiency,"Consider the following input file:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set scf_type pk; set basis 6-31+G(d); set r_convergence 12. energy, wfn = energy('hf', return_wfn = True); NBOWriter(wfn).write('input.47'); ```. This is the NBO test case, except I have replaced the basis set with a Pople basis. When I run the produced input file through NBO, the result I get does not match QChem. The fault is with Psi. Just look at the unphysical energy gap in the d NAOs:; ```; 15 O 1 dxy Ryd( 3d) 0.00000 0.22545; 16 O 1 dxz Ryd( 3d) 0.00196 0.22862; 17 O 1 dyz Ryd( 3d) 0.00518 0.52493; 18 O 1 dx2y2 Ryd( 3d) 0.00125 2.36883; 19 O 1 dz2 Ryd( 3d) 0.00227 2.02191; ```. For comparison, QChem gives; ```; 15 O 1 dxy Ryd( 3d) 0.00000 2.02907; 16 O 1 dxz Ryd( 3d) 0.00518 2.71710; 17 O 1 dyz Ryd( 3d) 0.00196 2.05762; 18 O 1 dx2y2 Ryd( 3d) 0.00125 2.36883; 19 O 1 dz2 Ryd( 3d) 0.00227 2.02191; ```. I suspect the error has to do with Pople basis sets being defined in cartesians and not spherical. This is the only reason I can think of for agreement with QChem being basis-set dependent, and it also agrees nicely with the fact that ""Input basis functions are not normalized; fixed"" appears in the Psi-NBO output file. While I'll likely end up fixing this, this is very low on my priority list. If anybody else wants to take this, feel free. Just post here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1698:146,energy,energy,146,https://psicode.org,https://github.com/psi4/psi4/issues/1698,3,['energy'],['energy']
Energy Efficiency,"Consider the following simple input file:; ```; molecule { ; symmetry c1; 0 2; C ; N 1 r1 . r1 = 1.17; }. set reference uhf ; set diis_start 3; set stability_analysis follow; energy('hf/cc-pvdz'); ```. Stability analysis gives ; ```; => Iterations <=. Iter Converged Subspace Residual; DLU 1 0 1 6.419E-01; DLU 2 0 2 3.750E-01; DLU 3 0 3 2.147E-01; DLU 4 0 4 1.520E-01; DLU 5 0 5 8.829E-02; DLU 6 0 6 2.804E-02; DLU 7 0 7 5.664E-03; DLU 8 0 8 2.645E-03; DLU 9 0 9 6.334E-04; DLU 10 0 10 1.096E-04; DLU 11 0 11 1.377E-05; DLU 12 0 12 3.046E-06; DLU 13 1 13 4.870E-07. DLUSolver converged. Wavefunction stable under totally symmetric rotations.; Lowest totally symmetric eigenvalue: 0.136742; Lowest UHF->UHF stability eigenvalues:; A 0.136742; ```. If you add symmetry, you get; ```; => Iterations <=. Iter Converged Subspace Residual; DLU 1 0 1 2.389E-01; DLU 2 0 2 8.290E-02; DLU 3 0 3 5.100E-02; ```; ...; ```; DLU 79 0 13 2.402E-05; DLU 80 0 3 2.963E-06; DLU 81 0 4 3.426E-06; DLU 82 1 5 8.990E-07. DLUSolver converged. Wavefunction stable under totally symmetric rotations.; Lowest totally symmetric eigenvalue: -0.000000; Lowest UHF->UHF stability eigenvalues:; B2 -0.000000 B1 -0.000000 A2 -0.000000 A1 0.110020; ```. For reference, the conventional integral analysis gives lowest eigenvalues of `B2 0.136642 B1 0.136642 A2 0.163586 A1 0.163586`, so the `0.110020` number is simply _wrong_. Of course, the real fix for this issue is #1005, but I call Roberto saying that symmetry and DF integrals weren't working in TD-DFT using the new solvers either. Time for me to do more yak shaving, then.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2122:175,energy,energy,175,https://psicode.org,https://github.com/psi4/psi4/issues/2122,1,['energy'],['energy']
Energy Efficiency,"Consider the following:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set maxiter 2; energy(""scf/cc-pvdz""); set guess sadno; energy(""scf/cc-pvdz""); ```. The second run does not use the new guess type, but the guess type will update if the absurdly low `set maxiter` is removed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2458:90,energy,energy,90,https://psicode.org,https://github.com/psi4/psi4/issues/2458,2,['energy'],['energy']
Energy Efficiency,"Continuation of #2012 . Users report large errors with the default frozen core settings because the ""core"" orbitals we freeze are at the energy of ""valence"" orbitals. (simply put). Valuable comments from other issue:; https://github.com/psi4/psi4/issues/2012#issuecomment-702870857; https://github.com/psi4/psi4/issues/2012#issuecomment-702811354. Possibly we want what `freeze_core -2` does for all alkali metals?; Same for the earth alkali?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2343:137,energy,energy,137,https://psicode.org,https://github.com/psi4/psi4/issues/2343,1,['energy'],['energy']
Energy Efficiency,"Currently the scf-guess suite only checks final energies, which is simple but also not very useful. There should be a variant of the tests that check the energy of the first iteration, which will tell us if a test gets broken or not.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3040:154,energy,energy,154,https://psicode.org,https://github.com/psi4/psi4/issues/3040,1,['energy'],['energy']
Energy Efficiency,"Currently, PCM settings can not be set via QCEngine using the schema interface, passing a task like this from QCEngine results in an error ; ```python; {'schema_name': 'qcschema_input',; 'schema_version': 1,; 'molecule': Molecule(name='H2O', formula='H2O', hash='941bd29'),; 'driver': 'energy',; 'model': {'method': 'SCF', 'basis': 'sto-3g'},; 'protocols': {'wavefunction': 'orbitals_and_eigenvalues'},; 'keywords': {'scf_type': 'df',; 'pcm_scf_type': 'total',; 'pcm': {'Units': 'Angstrom',; 'Medium': {'SolverType': 'IEFPCM', 'Solvent': 'Water'},; 'Cavity': {'RadiiSet': 'UFF',; 'Type': 'GePol',; 'Scaling': False,; 'Area': 0.3,; 'Mode': 'Implicit'}}}}; ```; as it tries to pass the dictionary of settings to the `core.set_global` function. . Extending the `set_options` function [here](https://github.com/psi4/psi4/blob/5de566ed7d4bf51816c673c4ea1def449e4e8618/psi4/driver/p4util/python_helpers.py#L423) to handle the `pcm` keyword should fix this issue. tagging @loriab following the slack discussion.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1986:286,energy,energy,286,https://psicode.org,https://github.com/psi4/psi4/issues/1986,1,['energy'],['energy']
Energy Efficiency,"Currently, Psi4 supports meta-GGAs that depend on the kinetic energy density. However, some meta-GGA functionals depend on the laplacian of the electron density in addition to or instead of the kinetic energy density. The missing pieces should be added so that also laplacian functionals could be used in Psi4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1734:62,energy,energy,62,https://psicode.org,https://github.com/psi4/psi4/issues/1734,2,['energy'],['energy']
Energy Efficiency,"D: 28503; PSI4DATADIR: /usr/local/psi4/share/psi4; Memory level set to 256.000 MB. ==> Input File <==. --------------------------------------------------------------------------; #! Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. ; # Print; # the path to a trajectory file for visualization; # in Jmol.; # grep '@IRC' on the output to see a nice printout; # of the progress of your IRC computation. molecule h2o2 {; H 0.0000000000 0.9803530335 -0.8498671785; O 0.0000000000 0.6988545188 0.0536419016; O 0.0000000000 -0.6988545188 0.0536419016; H 0.0000000000 -0.9803530335 -0.8498671785; }. # g_convergence needs to be tight for IRCs:; set g_convergence gau_verytight. set {; basis dzp; opt_type irc; geom_maxiter 50; irc_direction backward; }. frequencies('scf'). # Lower point group from C2v to C2; h2o2.reset_point_group('c2'). energy = optimize('scf'). compare_values(-150.8200278868627, energy, 5, ""Energy of last IRC point"") #TEST; --------------------------------------------------------------------------; hessian() will perform analytic frequency computation.; There are an even number of electrons - assuming singlet.; Specify the multiplicity in the molecule input block. *** tstart() called on mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 256 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H -0.000000000000 0.980353033500 -0.849954236217 1.007825032070; O -0.000000000000 0.698854518800 0.053554843883 15.994914619560; O 0.000000000000 -0.698854518800 0.053554843883 15.994914619560; H 0.000000000000 -0.980353033500 -0.849954236217 1.007825032070. Running in c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/463:2047,energy,energy,2047,https://psicode.org,https://github.com/psi4/psi4/issues/463,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"DCT gradients fail with the traceback below when ROHF starting orbitals are used. The same result is obtained for all DCT functionals w/ analytic gradients (ODC-13, ODC-12, ODC-06, DC-06). The calculation runs fine with UHF starting orbitals. Furthermore identical energies are obtained for the UHF calculation and the ROHF calculation, but the ROHF calculation fails out before computing the gradient. . ``` Molecular point group: c2v; Full point group: C2v. Geometry (in Bohr), charge = 0, multiplicity = 1:. Center X Y Z; ------------ ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.124297814551; H 0.000000000000 -1.434419280484 0.986348258811; H 0.000000000000 1.434419280484 0.986348258811. Traceback (most recent call last):; File ""/home/mmd01986/anaconda3/envs/psi4/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/mmd01986/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 638, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/mmd01986/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 1501, in run_dcft_gradient; grad = derivobj.compute(). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1532493090788/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PSIO::read(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::PSIO::read_entry(unsigned long, char const*, char*, unsigned long). Psi4 stopped on: Friday, 18 January 2019 09:58AM; Psi4 wall time for execution: 0:00:01.14. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1482:480,charge,charge,480,https://psicode.org,https://github.com/psi4/psi4/issues/1482,1,['charge'],['charge']
Energy Efficiency,"DF used to default for OMP2/OMP3/OMP2.5/OCEPA(0). However, CONV is default for them now due to default mp2_type/mp_type/cepa_type options. I think it would be better to choose DF as default for OO methods since all DF-OO methods have both energy and gradients (RHF and UHF) and significantly faster than conventional ones. @loriab @CDSherrill",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/279:239,energy,energy,239,https://psicode.org,https://github.com/psi4/psi4/issues/279,1,['energy'],['energy']
Energy Efficiency,DF-CASSCF: Diff. Input Wfn. + Same CASSCF Soln. = Diff. Energy,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2119:56,Energy,Energy,56,https://psicode.org,https://github.com/psi4/psi4/issues/2119,1,['Energy'],['Energy']
Energy Efficiency,"DF-CC freaks out when linear dependencies are present, and i tracked the issue to an inconsistency between reference_wavefunction_->nmopi() and reference_wavefunction_->Ca()->coldim(). The latter has the correct value when linear dependencies are removed. . Should nmopi() and Ca()->coldim() be consistent in this case?. Minimal input:; ```; molecule { ; o ; h 1 1.0; h 1 1.0 2 104.5; }. set {; basis 'aug-cc-pvtz'; scf_type df; cc_type df; s_tolerance 1e-3; }; energy('ccsd'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2120:462,energy,energy,462,https://psicode.org,https://github.com/psi4/psi4/issues/2120,1,['energy'],['energy']
Energy Efficiency,DFOCC's Final Energy Dependent on Whether User Energy Convergence Criteria Met,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509:14,Energy,Energy,14,https://psicode.org,https://github.com/psi4/psi4/issues/1509,2,['Energy'],['Energy']
Energy Efficiency,"DIIS; @DF-UHF iter 8: -0.49762403116031 -7.77156e-16 2.10910e-10 DIIS; @DF-UHF iter 9: -0.49762403116032 -8.88178e-16 2.91582e-11 DIIS; @DF-UHF iter 10: -0.49762403116032 -6.66134e-16 1.10373e-14 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 7.500000000E-01; @S^2 Observed: 7.500000000E-01; @S Expected: 5.000000000E-01; @S Observed: 5.000000000E-01. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.497624 . Alpha Virtual: . 2A 0.048719 3A 0.066612 4A 0.066612 ; 5A 0.098792 6A 0.253872 7A 0.387743 ; 8A 0.387743 9A 0.427498 10A 1.213680 ; 11A 3.852115 . Beta Occupied: . . Beta Virtual: . 1A 0.020894 2A 0.058417 3A 0.068354 ; 4A 0.068354 5A 0.183800 6A 0.269157 ; 7A 0.391375 8A 0.391375 9A 0.451441 ; 10A 1.378124 11A 3.853058 . Final Occupation by Irrep:; A ; DOCC [ 0 ]; SOCC [ 1 ]. @DF-UHF Final Energy: -0.49762403116032. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -0.4976240311603163; Two-Electron Energy = 0.0000000000000000; Total Energy = -0.4976240311603163. UHF NO Occupations:; HONO-0 : 1 A 1.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SCF //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: AUG-CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry LI line 68 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz.gbs ; atoms 2 entry H line 40 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 976 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:5229,Energy,Energy,5229,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Energy'],['Energy']
Energy Efficiency,"DZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 198 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz.gbs ; atoms 2-3 entry H line 22 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RHF Reference; 1 Threads, 476 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.065775570547 15.994914619570; H 0.000000000000 -0.759061990794 0.521953018286 1.007825032230; H 0.000000000000 0.759061990794 0.521953018286 1.007825032230. Running in c2v symmetry. Rotational constants: A = 27.26297 B = 14.51533 C = 9.47217 [cm^-1]; Rotational constants: A = 817323.21126 B = 435158.60141 C = 283968.37536 [MHz]; Nuclear repulsion = 9.168193296424349. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: CC-PVDZ; Blend: CC-PVDZ; Number of shells: 12; Number of basis functions: 24; Number of Cartesian functions: 25; Spherical Harmonics?: true; Max angular momentum: 2. => Loading Basis Set <=. Name: (CC-PVDZ AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1 entry O line 221 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz-jkfit.gbs ; atoms 2-3 entry H line 51 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz-jkfit.gbs . Process finished with exit code 139 (interrupted by signal 11: SIGSEGV); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2930:2091,Charge,Charge,2091,https://psicode.org,https://github.com/psi4/psi4/issues/2930,2,"['Charge', 'Energy']","['Charge', 'Energy']"
Energy Efficiency,"Dear Developers, . I compiled successfully psi4-0.5 but obtain an error when running psi4 :. ```; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 (no tag) Driver. Git: Rev {detached?} 8e01b1f . J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; and T. D. Crawford, WIREs Comput. Mol. Sci. 2, 556-565 (2012); (doi: 10.1002/wcms.93). Additional Contributions by; A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; -----------------------------------------------------------------------. Psi4 started on: Thu Feb 18 17:21:00 2016. Process ID: 63254; PSI4DATADIR: /home/LUCA/psi-master/psi4public/lib; Memory level set to 256.000 MB; ```. ==> Input File <==. ---; # ! Sample UHF/6-31G*\* CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C ; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'). ---. Memory set to 250.000 MiB by Python script. An error has occurred Py-side; Traceback:; <class 'Boost.Python.ArgumentError'>: Python argument types in; psi4.scf(NoneType, NoneType); did not match C++ signature:; scf(boost::shared_ptrpsi::Wavefunction, _object_, _object_): File ""<string>"", line 29, in <module>. File ""/home/LUCA/psi-master/psi4public/lib/python/driver.py"", line 576, in energy; procedures['energy'][lowername](lowername, **kwargs). File ""/home/LUCA/psi-master/psi4public/lib/python/proc.py"", line 932, in run_scf; scf_helper(name, **kwargs). File ""/home/LUCA/psi-master/psi4public/lib/python/proc.py"", line 1138, in scf_helper; e_scf = psi4.scf(precallback, postcallback). Best wishes; LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266:1077,energy,energy,1077,https://psicode.org,https://github.com/psi4/psi4/issues/266,3,['energy'],['energy']
Energy Efficiency,"Dear Developers, . I try to calculate excited states of H2 molecule using this input file : . molecule H2 { ; H -0.3836975 0.0000000 0.0000000 ; H 0.3836975 0.0000000 0.0000000; units ang; }. set basis aug-cc-pvqz ; set scf_type df; #set guess sad; set reference rhf; set e_convergence 1e-06; set d_convergence 1e-06; set ints_tolerance 1e-08. set freeze_core true; set roots_per_irrep [4,4,4,4,4,4,4,4]; set maxiter 100000. property('eom-ccsd', properties=['oscillator_strength']); ---------------------------------------------------------------------------------------------; However, for some of excited states i obtain 0 eV !. Excitation Energy OS RS RS Einstein A; 	State (eV) (cm^-1) (nm) (au) (l,au) (v,au) (s^-1); 	 1 Ag 12.964 104563.7 95.6 0.476427 0.0000 0.0000 0.0000 0.000000E+00; 	 2 Ag 16.771 135268.5 73.9 0.616329 0.0000 0.0000 0.0000 0.000000E+00; 	 3 Ag 18.773 151418.0 66.0 0.689911 0.0000 0.0000 0.0000 0.000000E+00; 	 4 Ag 25.910 208979.2 47.9 0.952179 0.0000 0.0000 0.0000 0.000000E+00; 	 1B1g 16.855 135946.4 73.6 0.619417 0.0000 0.0000 0.0000 0.000000E+00; 	 2B1g 19.351 156077.5 64.1 0.711142 0.0000 0.0000 0.0000 0.000000E+00; 	 3B1g 19.458 156942.8 63.7 0.715084 0.0000 0.0000 0.0000 0.000000E+00; 	 4B1g 19.513 157382.5 63.5 0.717087 0.0000 0.0000 0.0000 0.000000E+00; 	 1B2g 0.000 0.0 287864613790050.6 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 	 2B2g 0.000 0.0 168701352313695.2 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 	 3B2g 0.000 0.0 111616374313896.7 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 	 4B2g 0.000 0.0 95015600179548.7 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 	 1B3g 0.000 0.0 276652168953733.3 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 	 2B3g 0.000 0.0 202756770901990.0 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 	 3B3g 0.000 0.0 135821991365655.0 0.000000 0.0000 0.0000 0.0000 0.000000E+00; 	 4B3g 0.000 0.0 114346140595797.4 0.000000 0.0000 0.0000 0.0000 0.000000E+00. 	 1 Au 0.000 0.0 300704927659592.6 0.000000 0.0000 0.0000 0.0000 0.00000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/521:642,Energy,Energy,642,https://psicode.org,https://github.com/psi4/psi4/issues/521,1,['Energy'],['Energy']
Energy Efficiency,"Dear Developers,. I would like to perform counterpoise-corrected DBOC computations at the CCSD level, using psi4-1.9.1. For this purpose, I wrote the following input:. ```; molecule dimer {; 0 1; N 1.608094757 -0.561155368 0.000000000; N 2.389700473 0.210989439 0.000000000; --; 0 1; N -2.389700473 -0.210989439 0.000000000; N -1.608094757 0.561155368 0.000000000; }. set globals {; cfour_dboc on; basis cc-pvdz; d_convergence 11; }. e_cp = energy('c4-ccsd',bsse_type='cp', return_total_data=True); ```. When I tried to run this input, I received a segmentation fault, without any further information. If I replace `c4-ccsd` with `c4-hf`, then there occurs another segmentation fault, which is more verbose than the previous one:. `QcdbException: Psi4/Cfour gradients with ghost atoms no longer supported. Use QCEngine or QCDB where they are.`. There is a simple warning, as well, which I am not sure what to do with:. `Using qcdb.align.B787instead ofqcelemental.molutil.B787 is deprecated, and as soon as 1.5 it will stop working`. Could you please help me how to modify this input for a successful execution?. Thank you in advance for your help. Best regards,. Roland",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3217:441,energy,energy,441,https://psicode.org,https://github.com/psi4/psi4/issues/3217,1,['energy'],['energy']
Energy Efficiency,"Dear PSI4 developers. I use psi4 MOLDEN output (along with ORCA, QCHEM, etc.) as input for CASINO QMC program https://vallico.net/casinoqmc/ . For very simple system as Be, B, C atoms well proven that if we add 2s->2p excitation to the ground state than we improve wfn quality. PSI4, ORCA and other code gives me MOLDEN orbitals and coefficients for most important determinants. I can take it and check with CASINO QMC if energy of this multi-determinant configuration is the same as in conventional QMC codes. For the B output from Psi4 it isn't so.; Psi4 determinant coeffs is; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX.; ```. but should be (as in the ORCA and other programs):; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 -0.165709 ( 4, 3) 3AA 5AX.; * 3 -0.165709 ( 2, 2) 3AA 4AX.; ```; And if I change sign by hand in PSI4 output i get right energy in CASINO QMC for this multi-determinant configuration, same as PAS4 Total MCSCF energy. Can You check whether the signs of coefficients are correct. Best, Vladimir. PS Git: Rev {HEAD} add49b9. PPS; ```; memory 2 Gb. molecule b {; 0 2; symmetry c1; B 0.000000000000 0.000000000000 0.000000000000; }. set {; basis cc-pVQZ; reference rohf; restricted_docc [ 1 ]; active [ 4 ]; }. cas_e, cas_wfn = energy('casscf', return_wfn=True); molden(cas_wfn, 'molden.dat'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796:422,energy,energy,422,https://psicode.org,https://github.com/psi4/psi4/issues/796,4,['energy'],['energy']
Energy Efficiency,"Dear Psi4 developer, ; I'm using v1.4rc2. I find very convenient to use the QCSchema for submitting my `energy` calculations, but it is not clear to me what is currently implemented for this input method.; Using `{""basis"": ""aug-cc-pv[tq]z"", ""method"": ""MP2""}`, results in the error; ```; npsi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: ; Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['N']; Basis Sets: [('AUG-CC-PV[TQ]Z', 'AUG-CC-PV[TQ]Z', None)]; ```; which makes me think that CompeteBasisSet (CBS) extrapolations are not yet implemented.; My goal would be to submit even more advanced extrapolation protocols like `mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz`.; Is there a way to do this with the current implementation of the QCSchema? Or do you see it possible in a near-future release?. Thank you very much for your help!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2198:104,energy,energy,104,https://psicode.org,https://github.com/psi4/psi4/issues/2198,1,['energy'],['energy']
Energy Efficiency,"Dear all, . I started to use psi4 last week, to run the sapt calculation, but maybe I am doing something wrong because the results are not what I expected. I run the system H2O-H2 using the following input:. #! SAPT0 aug-cc-pVQZ computation of the h2o-h2 interaction energy,. molecule {; 0 1; O	-0.00497112320277 0.00000000000 -0.00324242498004 ; H	-0.00635802533704 0.00000000000 1.80786893363963 ; H	1.74732087529567 0.00000000000 -0.46100056491475 ; --; 0 1; H	-5.31435149256189 0.00000000000 -3.57188290957646 ; H	-4.14192596170216 0.00000000000 -2.81859073952601 ; units angstrom; }. set {; basis aug-cc-pvqz; guess sad; scf_type df; puream true; print 1; basis_guess true; }. energy('sapt2+3(ccd)'). Eelst = psi4.get_variable(""SAPT ELST ENERGY""); Eexch = psi4.get_variable(""SAPT EXCH ENERGY""); Eind = psi4.get_variable(""SAPT IND ENERGY""); Edisp = psi4.get_variable(""SAPT DISP ENERGY""); ET = psi4.get_variable(""SAPT0 TOTAL ENERGY""). And I got the following results:. Total HF -0.23285527 [mEh] -0.14611889 [kcal/mol] -0.61136150 [kJ/mol]; Total SAPT0 -0.31237291 [mEh] -0.19601697 [kcal/mol] -0.82013509 [kJ/mol]; Total SAPT2 -0.22375789 [mEh] -0.14041020 [kcal/mol] -0.58747633 [kJ/mol]; Total SAPT2+ -0.21063053 [mEh] -0.13217266 [kcal/mol] -0.55301046 [kJ/mol]; Total SAPT2+(3) -0.18566214 [mEh] -0.11650476 [kcal/mol] -0.48745596 [kJ/mol]; Total SAPT2+3 -0.18495027 [mEh] -0.11605805 [kcal/mol] -0.48558693 [kJ/mol]; Total SAPT2+(CCD) -0.19261506 [mEh] -0.12086778 [kcal/mol] -0.50571084 [kJ/mol]; Total SAPT2+(3)(CCD) -0.16764667 [mEh] -0.10519988 [kcal/mol] -0.44015633 [kJ/mol]; Total SAPT2+3(CCD) -0.16693480 [mEh] -0.10475317 [kcal/mol] -0.43828731 [kJ/mol]. Special recipe for scaled SAPT0 (see Manual):; Electrostatics sSAPT0 -0.21426853 [mEh] -0.13445554 [kcal/mol] -0.56256203 [kJ/mol]; Exchange sSAPT0 0.00071398 [mEh] 0.00044803 [kcal/mol] 0.00187454 [kJ/mol]; Induction sSAPT0 -0.01930071 [mEh] -0.01211138 [kcal/mol] -0.05067402 [kJ/mol]; Dispersion sSAPT0 -0.07951765 [mEh] -0.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/938:267,energy,energy,267,https://psicode.org,https://github.com/psi4/psi4/issues/938,7,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"Dear all,. I am new at psi4, and I want to run sapt using the mid-bonds. I pick up the sapt3 example to test it, but I got the following error . Memory set to 953.674 MiB by Python driver.; SAPT does not make use of molecular symmetry, further calculations in C1 point group. Traceback (most recent call last):; File ""/opt/psi4/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/psi4/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 3151, in run_sapt; raise ValidationError('SAPT requires active molecule to have 2 fragments, not %s.' % (nfrag)). ValidationError: SAPT requires active molecule to have 2 fragments, not 3. Can somebody tell me what I am doing wrong?. Thanks",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936:498,energy,energy,498,https://psicode.org,https://github.com/psi4/psi4/issues/936,2,['energy'],['energy']
Energy Efficiency,"Dear all,. I am trying to make FCI/aug-cc-pVTZ calculation on a fluoride-anion. The input file is:. memory 48000 mb; molecule h2o {; -1 1; F .0000000000 .0000000000 -.000000000; units bohr; }; set globals {; basis aug-cc-pVTZ; icore 0; }; thisenergy = energy('fci'). I am running it on a node with 12 cores and 48 GiB of RAM and gets the following:. ..........; There are 1370754 alpha strings; There are 1370754 beta strings; CI space contains 8 blocks. CI space requires 234872686232 determinants. Check SCF Energy from 1- and 2-electron integrals. SCF Energy (ref): -99.4508070223; Nuclear repulsion energy: 0.0000000000; One-electron energy: -143.9965314821; Two-electron energy: 44.5457244598; Dropped core energy: 0.0000000000; Total electronic energy: -99.4508070223; Total SCF energy: -99.4508070223. CI vector/subblock length = 29726587396; init_array: trouble allocating memory; size = 29726587396. If the length is in bytes, then it seems, that I need ~30 GiB, while I have 48. What is the reason, why the job fails? What can I do to make it work?. Thank you in advance. Best regards,; Michael Medvedev. ---. The full output:; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 (no tag) Driver. ```; Git: Rev {(no tag)}. J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; and T. D. Crawford, WIREs Comput. Mol. Sci. 2, 556-565 (2012); (doi: 10.1002/wcms.93). Additional Contributions by; A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; -----------------------------------------------------------------------. Psi4 started on: Fri Jan 8 13:56:46 2016. Process ID: 11885; PSI4DATADIR: ./lib; Memory level set to 256.000 MB; ```. ==> Input File <==. ---; # ! 6-31G H",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:252,energy,energy,252,https://psicode.org,https://github.com/psi4/psi4/issues/204,9,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Dear all,. I try to obtain molecular orbitals for a converged calculation. I use the following input:; ```python; set guess sad; set scf_type df; set reference rhf. psi4_io.set_specific_path(180, './'); psi4_io.set_specific_retention(180, True). energy('scf'); ```; and start psi4 with the ""-m"" flag. However, I do not get this file. Is there another command/way that I have to use?. thanks,; Christopher",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/918:246,energy,energy,246,https://psicode.org,https://github.com/psi4/psi4/issues/918,1,['energy'],['energy']
Energy Efficiency,"Dear developers,. I am currently running SA-CASSCF calculations on the formaldimine molecule. I am particularly interested by the determinant decomposition of the ground and first excited state of the molecule (singlet symmetry). However, I think I have noticed a pb concerning the sign of the determinants in the output. First, I give you my INPUT in python : . pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; variables = pes_origin[:] + [90, 90]; psi4.geometry(; """"""; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables) ); ; psi4.set_options({ 'basis': 'cc-pvdz',; 'DETCI_FREEZE_CORE' : False,; 'reference': 'RHF',; 'num_roots': 2,; 'frozen_docc':[0],; 'restricted_docc': [6],; 'active': [3],; 'restricted_uocc': [11], ; 'frozen_uocc': [23],; 'mcscf_maxiter': 1000, ; 'avg_states' : [ 0, 1],; 'avg_weights' : [ 0.5, 0.5 ]; }); ; sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY') . Then, I give you from the OUTPUT FILE the decomposition I obtain : . *******************************************************************; *******************************************************************; ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -93.931448649953467. Active Space Natural occupation numbers:. A 2.000000 A 1.000000 A 1.000000. The 9 most important determinants:. * 1 0.691216 ( 0, 1) 7AX 8AA 9AB ; * 2 0.691216 ( 1, 0) 7AX 8AB 9AA ; * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX ; * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX ; * 5 0.000000 ( 0, 0) 7AX 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.2911",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008:921,energy,energy,921,https://psicode.org,https://github.com/psi4/psi4/issues/2008,1,['energy'],['energy']
Energy Efficiency,"Dear developers,. I am interested in wave functions and electron densities of molecules solvated by PCM. However, the current implementation of PCM in PSI4 (Psi4 0.3.131 Driver, Git: Rev {master} 7a8bad0 dirty) provides inconsistent electronic properties (e.g. dipole moment) for restricted and unrestricted HF/DFT methods. Obviously, both approaches should converge to the same values for the closed shell systems, but in both cases, the final wave functions and density matrices are perhaps wrong. Dipole moments calculated by electric field perturbation method differ from dipoles calculated from SCF density matrices. It can be illustrated by running the attached input.; [input.txt](https://github.com/psi4/psi4public/files/72199/input.txt). I am not expert in PCM methods or in the QM codes, but I suspect this piece of code in hf.cc:. ```; 540 #ifdef HAVE_PCMSOLVER; 541 if(pcm_enabled_) {; 542 // Prepare the density; 543 SharedMatrix D_pcm;; 544 if(same_a_b_orbs()) {; 545 D_pcm = Da_;; 546 D_pcm->scale(2.0); // PSI4's density doesn't include the occupation; 547 }; 548 else {; 549 D_pcm = Da_;; 550 D_pcm->add(Db_);; 551 }; 552 ; 553 // Add the PCM potential to the Fock matrix; 554 SharedMatrix V_pcm;; 555 V_pcm = hf_pcm_->compute_V();; 556 if(same_a_b_orbs()) Fa_->add(V_pcm);; 557 else {; 558 Fa_->add(V_pcm);; 559 Fb_->add(V_pcm);; 560 }; 561 }; 562 #endif; ```. If these lines are disabled, the dipole moments calculated from density matrices agree with those from finite electric field perturbation calculations. Moreover, convergence for restricted and unrestricted HF/DFT is restored, but the polarization energy and total energy reported by psi4 is not affected. Perhaps some double-counting of PCM contributions takes place in the code. I would be very grateful if this part of the code is reviewed by developers. Regards,. Jiri Vymetal",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/198:1626,energy,energy,1626,https://psicode.org,https://github.com/psi4/psi4/issues/198,2,['energy'],['energy']
Energy Efficiency,"Dear devs,. I've been running some dihedral-constrained optimizations on capped dipeptides, and a small percentage of them fail. Examples are attached. In the first example, the optimizer takes a huge step and ends up in a crazy geometry. I worked around it by setting `intrafrag_step_limit 0.1`. Unfortunately I lost the .intco file, but the output file shows that two dihedrals have been constrained. https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize.dat; https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize.out; https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize.xyz. In the second example, the energy oscillates with periodicity 3. . https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize-1.dat; https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize-1.out; https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize-1.xyz; https://dl.dropboxusercontent.com/u/5381783/psi4-opt/optimize-1.THR.intco. I'll try to work around this by using `step_type nr`, but thought it was worth reporting nonetheless. Thanks,; - Lee-Ping Wang (Postdoc, Stanford)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/18:631,energy,energy,631,https://psicode.org,https://github.com/psi4/psi4/issues/18,1,['energy'],['energy']
Energy Efficiency,Disable CC46 to keep full tests green on 1.2rc1,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1002:32,green,green,32,https://psicode.org,https://github.com/psi4/psi4/pull/1002,1,['green'],['green']
Energy Efficiency,"Discovered on a build of 8db12d6 while investigating [a forum post](http://forum.psicode.org/t/ri-mp2-def2-tzvppd-convergence-issue-for-calculations-with-iodide/1106/5). The user's input file crashes during the MP2 computation with traceback:. ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 272, in <module>; exec(content); File ""<string>"", line 100, in <module>; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 431, in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 225, in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver_nbody.py"", line 411, in compute_nbody_components; current_mol = molecule.extract_subsets(list(pair[0]), ghost). RuntimeError: ; Fatal Error: Coordinates have been set in the wrong order; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 239 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Molecule::operator=(psi::Molecule const&); psi::Molecule::Molecule(psi::Molecule const&); ```. Given that the user's problem is failure for the SCF to converge, I can only assume some change since the 1.2.1 release is at fault. I've been able to get the crash with the following simplified input file:; ```; molecule dimer {; 1 1; C1 0.000000 0.513942 0.000000; N2 0.628754 1.703580 0.000000; H3 0.109407 2.571793 0.000000; H4 1.638743 1.762759 0.000000; N5 -1.342220 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1325:615,energy,energy,615,https://psicode.org,https://github.com/psi4/psi4/issues/1325,3,['energy'],['energy']
Energy Efficiency,"Doc some changes after the OCC open-heart surgery series of #1789 (series), even up scs treatment between mp2-capable modules. * [ ] test scs, sns(n), sos somewhere on a closed-shell and open-shell; * [ ] even up custom-scs-mp2 commands to dfmp2, cc, maybe dfocc; * [ ] table. | | 2 | o2 | 2.5 | o2.5 | 3 | o3 | lccd | olccd |; | --- | --- | --- | --- | --- | --- | --- | --- | --- |; | plain | y | y | y | y | y | y | y | y |; | scs | y | y | | | y | y | | |; | scs(n) | y | | | | | | | |; | scsvdw | y | | | | | | | |; | sos | y | y | | | | y | | |; | sos-pi | y | | | | | | | |; | custom | y | y | y | y | y | y | y | y | . * [ ] the energy docstring needs to be updated, as does the occ/dfocc manual page, which needed to be updated anyways.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1796:637,energy,energy,637,https://psicode.org,https://github.com/psi4/psi4/issues/1796,1,['energy'],['energy']
Energy Efficiency,"During an optimization where an initial hessian by finite difference is requested, the gradient is requested at the starting geometry _twice_. Once by the optimizer and once to determine what modes should be projected in the finite difference treatment. The SCF and final energies agree, but for some reason, the estimated MP2 energies disagree, and the RMS lambda errors don't match either. In this example, the MP2 correlation energy the first time is -0.018978215515226, but the MP2 correlation energy the second time is -0.017979235543976. An MP2 computation agreed with the first correlation energy. Minimal input file below. I've seen this bug on systems with UHF and systems of C1 symmetry. I want this fixed ASAP, just in case the bug does affect energies in some way I haven't seen, so I'll take this myself.; ```; molecule mol {; 0 1 ; units bohr; H; H 1 1.8 ; }. set {; reference rhf ; basis sto-3g; scf_type pk; dcft_functional odc-12; full_hess_every 0; }. optimize('dcft'); ````",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1309:429,energy,energy,429,https://psicode.org,https://github.com/psi4/psi4/issues/1309,3,['energy'],['energy']
Energy Efficiency,"During debugging of the failing (on Windows) test in #1235, I have noticed the following:; ```; (psi4-dev-cbs_dict) kraus@dream:~/psi4/tests/cbs-xtpl-freq::psi4 -n 1 -i in.dat -o n1.out; 	Nuclear repulsion energy..........................................PASSED; 6 displacements needed.; 1 2 3 4 5 6; 	SCF/cc-pVDZ Frequency 1...........................................PASSED; 	SCF/cc-pVDZ Frequency 2...........................................PASSED; 	SCF/cc-pVDZ Frequency 3...........................................PASSED; (psi4-dev-cbs_dict) kraus@dream:~/psi4/tests/cbs-xtpl-freq::psi4 -n 4 -i in.dat -o n4.out; 	Nuclear repulsion energy..........................................PASSED; 9 displacements needed.; 1 2 3 4 5 6 7 8 9; Warning: used thermodynamics relations inappropriate for low-frequency modes: ['476.8559' '479.2930' '484.2715']; 	SCF/cc-pVDZ Frequency 1: computed value (1809.246) does not match (476.856) to 2 digits.; Traceback (most recent call last):; File ""/home/kraus/Applications/psi4-cbs_dict/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/home/kraus/Applications/psi4-cbs_dict/lib/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	SCF/cc-pVDZ Frequency 1: computed value (1809.246) does not match (476.856) to 2 digits.; ```; The in.dat, n1.out and n2.out files are attached.; [in.txt](https://github.com/psi4/psi4/files/2488549/in.txt); [n1.txt](https://github.com/psi4/psi4/files/2488550/n1.txt); [n4.txt](https://github.com/psi4/psi4/files/2488551/n4.txt). The number of SALC's in the parallel version (see line 362) is wrong: it should be 3, it is 6. @JonathonMisiewicz , ideas?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1295:206,energy,energy,206,https://psicode.org,https://github.com/psi4/psi4/issues/1295,2,['energy'],['energy']
Energy Efficiency,"Edit: from forum post: http://forum.psicode.org/t/error-for-sapt-dmp2-calculation/1691; running `psi4 -p myprefix <input_file>` for a delta_mp2 SAPT calculations results in:. ```; PSIO_ERROR: Can't find TOC Entry DFMP2 Jm12; PSIO_ERROR: unit = 97, errval = 13; PSIO_ERROR: 13 (no such TOC entry); ```. uncommenting [this](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsio/change_namespace.cc#L69) , applied [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3918) reveals (at least); the 97 file (the Jm12 metric) still uses the default prefix (`psi`):. ```; /Users/kruse/scratch/PSI4/psi.44624.dimer.97; /Users/kruse/scratch/PSI4/psi.44624.monomerA.97; ```. ---; example input; ```; molecule water_dimer {; 0 1; O -0.003244 1.511274 0.000000; H 0.070125 0.540684 0.000000; H 0.900899 1.845934 0.000000; --; 0 1; O -0.003244 -1.375885 0.000000; H -0.459556 -1.734864 0.771839; H -0.459556 -1.734864 -0.771839. units angstrom; no_reorient; symmetry c1; }; set basis sto-3g; energy('sapt2+(3)dmp2'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1874:1016,energy,energy,1016,https://psicode.org,https://github.com/psi4/psi4/issues/1874,1,['energy'],['energy']
Energy Efficiency,"Either both of the below attempts to read a wfn in for an SCF gradient should be trapped by an error, or neither should. Right now, the first works fine, but the bottom segfaults. ```; h2o = psi4.geometry(""""""; O ; H 1 0.96; H 1 0.96 2 104.5; """"""); wfn=psi4.energy('scf/def2-svp', molecule=h2o, return_wfn=True)[1]; # No segfault with the un-serialized wfn.; psi4.gradient('scf/def2-svp', molecule=wfn.molecule(), ref_wfn=wfn). wfn.to_file('my_wfn'); wfn_new = psi4.core.Wavefunction.from_file('my_wfn'); # Segfault with the un-serialized wfn.; psi4.gradient('scf/def2-svp', molecule=wfn_new.molecule(), ref_wfn=wfn_new) # Segfault here.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2712:257,energy,energy,257,https://psicode.org,https://github.com/psi4/psi4/issues/2712,1,['energy'],['energy']
Energy Efficiency,Eliminate unused psimrcc file to reduce compile time #525,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/544:33,reduce,reduce,33,https://psicode.org,https://github.com/psi4/psi4/pull/544,1,['reduce'],['reduce']
Energy Efficiency,Error computing atomization energy of Al atom,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2858:28,energy,energy,28,https://psicode.org,https://github.com/psi4/psi4/issues/2858,1,['energy'],['energy']
Energy Efficiency,"Example input below. Seems method and integral-type independent. Using `ref_wfn` with an existing wfn works. The issue thus seems caused by the writing or reading. I tested few other modules (fnocc, ccenergy, dfmp2) and those seem fine. (found through http://forum.psicode.org/t/post-scf-with-custom-matrices/1701). ```; molecule water6 {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; symmetry c1; }. memory 2 GiB; set {; ints_tolerance 1e-10; basis def2-SVP; }. set mp2_type df; set cc_type df; set qc_module occ; set scf_type df; e,wfn=energy('scf',return_wfn=True); wfn.to_file('my_wfn'); wfn_new = Wavefunction.from_file('my_wfn'); energy('mp2',ref_wfn=wfn_new); #energy('MP2',ref_wfn=wfn) # <-- works; ```. results in segmentation fault after printing the MO space.; For example for conventional MP2:; ```; IRREP FC OCC VIR FV; ==============================; A 0 5 19 0; ==============================. Memory is 2147 MB; Cost of iabc is 0 MB; Cost of abcd is 0 MB; Switching to the incore algorithm for iabc..; Switching to the incore algorithm for abcd.. /Users/kruse/bin/psi4dev: line 1: 80585 Segmentation fault: 11 /Users/kruse/qc/psi4.bin/bin/psi4 -s . $@; ```. as per wish, pinging @JonathonMisiewicz",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1851:592,energy,energy,592,https://psicode.org,https://github.com/psi4/psi4/issues/1851,3,['energy'],['energy']
Energy Efficiency,"Example: [molden_cartesian.zip](https://github.com/psi4/psi4/files/4988043/molden_cartesian.zip). The ZIP file contains a trivial HF/6-31G* calculation on water with PSI4 and Gaussian. To allow for a one-on-one comparison, symmetry, reorientation etc. are disabled. The molden file written out by PSI4 results in the wrong total charge when it is loaded into Molden, which shows there is a problem:. ```; Mulliken Charges; ================; ; O -0.8774; H 0.4308; H 0.4316; ; Sum of Mulliken Charges: -0.0150; ```. Repeating the calculation in Gaussian and loading the log file into Molden gives:. ```; Mulliken Charges; ================; ; O -0.8652; H 0.4323; H 0.4329; ; Sum of Mulliken Charges: -0.0000; ```. I've written out the orbitals from the Gaussian log back into a Molden file with Molden, to allow for a one-on-one comparison of the orbital coefficients. This revealed that coefficients 13, 14 and 15 of each orbital in the Molden file written by PSI4 are a factor **sqrt(3)** too large compared to what they should be. These are coefficients for the `xy`, `xz` and `yz` basis functions in a d shell. Other d functions are fine. I'll check for g and f functions as well...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1973:329,charge,charge,329,https://psicode.org,https://github.com/psi4/psi4/issues/1973,5,"['Charge', 'charge']","['Charges', 'charge']"
Energy Efficiency,"Example:; ```; frame_metadata = {; 'system_name': '{C#N}_O'; }. molecule {; 0 1; C 0.0000000000 0.0000000000 0.0000000000; N -0.3650589000 0.4281249000 1.0136910000; H 0.2430928700 -0.5101510800 -0.9168319000. symmetry c1; no_com; no_reorient; }. energy(""hf""); ```. The psithon interpreter turns this into ; ```; import psi4; from psi4 import *; from psi4.core import *; from psi4.driver.diatomic import anharmonicity; from psi4.driver.gaussian_n import *; from psi4.driver.aliases import *; from psi4.driver.driver_cbs import xtpl_highest_1, scf_xtpl_helgaker_2, scf_xtpl_helgaker_3, corl_xtpl_helgaker_2; from psi4.driver.wrapper_database import database, db, DB_RGT, DB_RXN; from psi4.driver.wrapper_autofrag import auto_fragments; from psi4.driver.constants.physconst import *; psi4_io = core.IOManager.shared_object(); psi4_io.set_default_path(""/state/partition1/tmp/""); geometry(""""""; 0 1; H; H 1 0.74; """""",""blank_molecule_psi4_yo""); frame_metadata = {; 'system_name': '{; }; core.efp_init(); geometry(""""""; 0 1; C 0.0000000000 0.0000000000 0.0000000000; N -0.3650589000 0.4281249000 1.0136910000; H 0.2430928700 -0.5101510800 -0.9168319000. symmetry c1; no_com; no_reorient; """"""); core.IO.set_default_namespace(""""); energy(""hf""); ```. Which unsurprisingly gives a syntax error.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/655:247,energy,energy,247,https://psicode.org,https://github.com/psi4/psi4/issues/655,2,['energy'],['energy']
Energy Efficiency,FISAPT: Charge on A is incompatible with singlet,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2870:8,Charge,Charge,8,https://psicode.org,https://github.com/psi4/psi4/issues/2870,1,['Charge'],['Charge']
Energy Efficiency,Fail in Psi4 energy decomposition analysis,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2866:13,energy,energy,13,https://psicode.org,https://github.com/psi4/psi4/issues/2866,1,['energy'],['energy']
Energy Efficiency,"Fails on methyl chloride, succeeds on diatomic chlorine.; Did not test larger alkyl groups.; CH3Cl was pre-optimized at HF/6-31G(d). ; Attempted RHF single point energy failed to converge with these basis sets:. > 6-311g(3df); > 6-311g(3df,p); > 6-311g(3df,2p); > 6-311g(3df,2pd); > 6-311g(3df,3pd); > aug-cc-pV(D+d)Z; > aug-cc-pV(Q+d)Z; > aug-cc-pV(T+d)Z; > g3mp2large. They all have at least 3df polarization, some more. Not all heavily polarized 6-311G(*) basis sets contain both C, Cl so these basis sets are only 5 of the 51 6-311?G(etc) sets. Doubtless, the other 10 sets with diffuse functions (e.g., 6-311++G(3df)) will fail but take longer at it. Though large, the 7152 Mb memory allocation requirement did not exhaust available shared memory. G3(MP2) method requires the g3mp2large basis set and the Wilson Group's cc-CA methods require the aug-cc-pV([DQT]+d)Z basis sets. Minimal test case attached.; [CH3Cl-3df-fail.zip](https://github.com/psi4/psi4/files/214171/CH3Cl-3df-fail.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/340:162,energy,energy,162,https://psicode.org,https://github.com/psi4/psi4/issues/340,1,['energy'],['energy']
Energy Efficiency,"File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 1594, in frequency; H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 1431, in hessian; plan.compute(); File ""/home/work/psi4/install/lib/psi4/driver/driver_findif.py"", line 1314, in compute; t.compute(client=client); File ""/home/work/psi4/install/lib/psi4/driver/task_base.py"", line 179, in compute; self.result = qcng.compute(; File ""/home/susi/.conda/envs/p4env/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/home/susi/.conda/envs/p4env/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 233, in compute; output_data = psi4.schema_wrapper.run_qcschema(input_model, postclean=False).dict(); File ""/home/work/psi4/install/lib/psi4/driver/schema_wrapper.py"", line 460, in run_qcschema; ret_data = run_json_qcschema(input_model.dict(), clean, False, keep_wfn=keep_wfn); File ""/home/work/psi4/install/lib/psi4/driver/schema_wrapper.py"", line 626, in run_json_qcschema; val, wfn = methods_dict_[json_data[""driver""]](method, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 525, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 1386, in select_mrcc; return func(name, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 4935, in run_mrcc; ref_wfn = scf_helper(name, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 1887, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 82, in scf_compute_energy; self.initialize(); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 223, in scf_initialize; self.guess(); KeyboardInterrupt; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:9522,energy,energy,9522,https://psicode.org,https://github.com/psi4/psi4/issues/3159,2,['energy'],['energy']
Energy Efficiency,"File ""<string>"", line 46, in <module>; File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5424, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1437, in scf_wavefunction_factory; wfn = core.ROHF(ref_wfn, superfunc). RuntimeError:; Fatal Error: Input DOCC array has the wrong dimensions; Error occurred in file: /home/conda/feedstock_root/build_artifacts/psi4_1683815705191/work/psi4/src/psi4/libscf_solver/hf.cc on line: 146; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; F 1 {}; symmetry c2v; """""".format(R)). --> energy('casscf'). ecp[R] = [get_variable('ci root 0 total energy'),; get_variable('ci root 1 total energy'),; get_variable('ci root 2 total energy')]. !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Input DOCC array has the wrong dimensions !; ! Error occurred in file: /home/conda/feedstock_root/build_artifacts/psi4_16838157 !; ! 05191/work/psi4/src/psi4/libscf_solver/hf.cc on line: 146 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181:2659,energy,energy,2659,https://psicode.org,https://github.com/psi4/psi4/issues/3181,4,['energy'],['energy']
Energy Efficiency,Fix MCSCF Final CI Energy Mismatch,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2259:19,Energy,Energy,19,https://psicode.org,https://github.com/psi4/psi4/pull/2259,1,['Energy'],['Energy']
Energy Efficiency,Fix SAD guess energy printout,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1493:14,energy,energy,14,https://psicode.org,https://github.com/psi4/psi4/pull/1493,1,['energy'],['energy']
Energy Efficiency,Fix energy return value of optimize() for IRC jobs.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/292:4,energy,energy,4,https://psicode.org,https://github.com/psi4/psi4/pull/292,1,['energy'],['energy']
Energy Efficiency,"Fixes #1196. As an example, the following input file:; ```; memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'). foo = [1, 2]; print(foo[3]); ```. ...now prints the following upon termination... ```; *** tstop() called on Jonathons-MacBook-Pro.local at Tue Sep 4 13:22:51 2018; Module time:; user time = 0.52 seconds = 0.01 minutes; system time = 0.05 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.52 seconds = 0.01 minutes; system time = 0.05 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdirfindif/stage/usr/local/psi4/bin/psi4"", line 270, in <module>; exec(content); File ""<string>"", line 30, in <module>. IndexError: list index out of range. Printing out the relevant lines from the post-processed input file:; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pVDZ""); energy('scf'); foo = [1, 2]; --> print(foo[3]). Psi4 stopped on: Tuesday, 04 September 2018 01:22PM; Psi4 wall time for execution: 0:00:00.78. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. ## Todos; - [x] Fixes #1196 - if an error occurs Py-side, the post-processed line of output that called it is displayed, plus five back and forwards, for context. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1214:145,energy,energy,145,https://psicode.org,https://github.com/psi4/psi4/pull/1214,2,['energy'],['energy']
Energy Efficiency,Fixes #2940. Closes #2921. @mnottoli Could you quickly give this a second pair of eyes to check what I'm doing [here when I'm lowering the tolerance](https://github.com/psi4/psi4/blob/6173fba2dc820bba05918f3dfa599550704de4f5/tests/pytests/test_ddx.py#L112) is reasonable --- I'm thinking this is the escaped charge problem for this small system. Maybe we should just remove the test alltogether?. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2952:308,charge,charge,308,https://psicode.org,https://github.com/psi4/psi4/pull/2952,1,['charge'],['charge']
Energy Efficiency,Fixing integral overflow problem in (T) energy code,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/706:40,energy,energy,40,https://psicode.org,https://github.com/psi4/psi4/pull/706,1,['energy'],['energy']
Energy Efficiency,"Following from https://github.com/psi4/psi4/pull/1896#issuecomment-633623036, we observe that MKL 2020.1 (from conda) produces different answers at about 1e-8 in run-to-run execution for DF-HF at any basis set on Intel processors. https://software.intel.com/content/www/us/en/develop/documentation/mkl-windows-developer-guide/top/obtaining-numerically-reproducible-results/specifying-code-branches.html. Relevant envvar is `MKL_CBWR`. In the CI we're preempting with `MKL_CBWR=AUTO`. Will monitor future MKL releases. Please add to affected test list as you find them. * always passes: `COMPATIBLE`, `SSE2`, `AVX`, `AUTO`; * mixed pass/fail: `MKL_CBWR` unset; * always fails: `SSE4_2`. #### known affected test cases. * scf-cholesky-basis; * psimrcc-ccsd_t-4; * one of the IRCs",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1906:489,monitor,monitor,489,https://psicode.org,https://github.com/psi4/psi4/issues/1906,1,['monitor'],['monitor']
Energy Efficiency,"Following the discussion https://github.com/psi4/psi4/issues/1113, it'd be useful to add to the comment line of cube files (found in [libcubeprop](https://github.com/psi4/psi4/tree/master/psi4/src/psi4/libcubeprop)) info about the number of core electrons treated by ECP and _not_ to be found in the electron density of the cube file. * Note that not all types of cubes will need this (e.g., not HOMO/LUMO cubes); * Since the Chargemol input needs number of electrons and number of core electrons _per atom_, should identify which atom(s) cores belong to. (e.g., `Total core: 10 [e] from atom 4 (6) and 8 (4)`. I'm not sure where the 0-/1-indexing notice should go.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1136:426,Charge,Chargemol,426,https://psicode.org,https://github.com/psi4/psi4/issues/1136,1,['Charge'],['Chargemol']
Energy Efficiency,"Follows from discussion in https://github.com/psi4/psi4public/issues/103 and a bit in https://github.com/psi4/psi4private/issues/101. We'd like reference `rhf`, `rohf`, etc. to behave exactly as they do at present, that is cry foul if inappropriate for active molecule or unavailable for the method at hand. But we'd like a new value `auto` for `reference` keyword that is the default and switches between rhf and uhf>rohf as appropriate, depending solely on the molecule. . Exactly how to this this is up for discussion. It's most appropriately done at activate-molecule-time, but don't have the machinery to track and undo that setting in the activalte molecule code. Maybe a generic function that's called in each run_\* in proc.py with inputs of the most restrictive reference setting among the called modules (e.g., rhf/rohf for run_detci that traverses scf _and_ detci modules). Then the generic function sets the reference to something legit (e.g., `rhf`) for the scope of the energy/grad/etc call. And the optstash object in each of the proc.py routines can be used to undo the driver-level reference setting and return to the user or default setting.; - [ ] implement above. break this into smaller bullets as needed.; - [ ] also, warn in output that reference changing",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/118:984,energy,energy,984,https://psicode.org,https://github.com/psi4/psi4/issues/118,1,['energy'],['energy']
Energy Efficiency,"For Psi4 1.0.54 [Git: Rev {master} 8d4cec3 dirty]; Hi,. When executing `energy(cbs,...)` and `delta_basis` equals a `corl_basis`, then the final MP2/CBS value is clearly wrong, and as a result the CBS value as well. Either E(CBS) will be too large or too small.; A typical output:. ```; ---------------------------------------------------------------------------------------------------------; scf hf / jun-cc-pvqz -152.13112737 xtpl_highest_1; corl mp2 / jun-cc-pv[tq]z 110.40871391 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / jun-cc-pvtz -0.02698189 xtpl_highest_1; total CBS -41.74939535 ; -----------------------------------------------------------------------------------; ```. The previous values (""Stages"", ""Components"") all look ok at a glance. ```; Eg:; molecule test {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; O -1.551007 -0.114520 8.000000; H -1.934259 0.762503 8.000000; H -0.599677 0.040712 8.000000; }. memory 55 GB. set global {; cc_type df; INTS_TOLERANCE 1e-11; freeze_core true; }. # ok; #energy(cbs,scf_basis='jun-cc-pVQZ',corl_wfn='mp2', corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVDZ'). # print error; energy(cbs,scf_basis='jun-cc-pVQZ',corl_wfn='mp2',corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVTZ'). # error2, although this calc makes less sense...; #energy(cbs,scf_basis='aug-cc-pVQZ',corl_wfn='mp2',corl_basis='jun-cc-pv[tq]z',corl_scheme=corl_xtpl_helgaker_2,delta_wfn='fno-ccsd(t)',delta_basis='jun-cc-pVQZ'). ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/528:72,energy,energy,72,https://psicode.org,https://github.com/psi4/psi4/issues/528,4,['energy'],['energy']
Energy Efficiency,"For some reason, `detci` is silently ignoring when the user supplies `num_frozen_uocc`. While [there are keywords that arrive it](https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html#term-FROZEN_UOCC-GLOBALS), they shouldn't be present here. Minimal Not-Working Example:. ```; import psi4; psi4.set_memory('500 MB'); be2 = psi4.geometry(""""""; 0 1; Be 0.000000 0.000000 -1.200000; Be 0.000000 0.000000 1.200000; symmetry d2h ; """"""); psi4.set_options({'basis' : 'sto-3g',; 'scf_type' : 'pk',; 'reference' : 'rhf',; 'e_convergence' : 1e-12,; 'd_convergence' : 1e-12,; 'num_frozen_docc' : 2,; 'num_frozen_uocc' : 3; }) ; psi4.core.set_output_file('output.dat', False); p4_Escf, p4_wfn = psi4.energy('SCF', return_wfn=True); fci_e, fci_wfn = psi4.energy('FCI', return_wfn=True); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2295:704,energy,energy,704,https://psicode.org,https://github.com/psi4/psi4/issues/2295,2,['energy'],['energy']
Energy Efficiency,"For some reason, the following script raises a segfault:. ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set {; reference rohf; basis cc-pVDZ; scf_type pk; freeze_core true; }. _, wfn = energy('bccd(t)',return_wfn = True); energy('mrccsdt', ref_wfn=wfn); ```. It runs fine when I use RHF Brueckner or ROHF SCF, so it's the ROHF Brueckner combination that's guilty.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2308:189,energy,energy,189,https://psicode.org,https://github.com/psi4/psi4/issues/2308,2,['energy'],['energy']
Energy Efficiency,"For the `fnocc` modules, [`cepa(0)` means `lccsd`](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L4655-L4660). I have only ever heard of `cepa(0)` meaning `lccd`. It is `lccd` in the `dct` module, it is `lccd` in the `occ` module, and it is `lccd` in the `dfocc` module. Can we make this consistent, or at least print a warning?. CEPA(0) is very important to my own research, and I had only ever heard of it as `lccd`. After doing some more digging, I've come across some sources that equate CEPA(0) and `lccsd`, but it seems to me to be a minority position. . Making this even more complicated, all requests for `cepa(0)` go to `fnocc`. `occ` and `dfocc` require `lccd`. `dct` also requires `cepa0`, but as a keyword rather than the energy name. Obligatory ping of @edeprince3 for `fnocc` issues and @loriab for defining methods consistently across modules and @jturney because this has been causing problems at CCQC.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1872:761,energy,energy,761,https://psicode.org,https://github.com/psi4/psi4/issues/1872,1,['energy'],['energy']
Energy Efficiency,"For the below molecule I get very strange MBIS charges with the combination of DDX implicit solvent and the `def2-TZVPPD` basis set compared to using `def2-TZVP`. I also only see this happen for molecules containing Iodine.; ```python; from qcelemental.models.common_models import Model; from qcelemental.models import AtomicInput, Molecule; import qcengine; import numpy. qc_mol = Molecule.from_data(; """"""; 0 1; C -2.770566610000 0.138041700000 0.070178320000; C -1.574766790000 -2.182402580000 0.041630990000; C 1.033304570000 -2.323434390000 -0.024422900000; C 2.435037490000 -0.121299970000 -0.061679550000; C 1.259017560000 2.209348470000 -0.033641890000; C -1.350150920000 2.328080550000 0.032456990000; I 6.389923580000 -0.318582790000 -0.161855610000; H -4.794725900000 0.238941070000 0.121450260000; H -2.664958600000 -3.891956620000 0.070604800000; H 1.951364020000 -4.127647160000 -0.046322210000; H 2.351710440000 3.913369620000 -0.062674850000; H -2.265188840000 4.137542080000 0.054275640000; units bohr; no_com; no_reorient; """"""; ); # create the psi4 job; spec = Model(method=""PBE0"", basis=""def2-TZVPPD""); task = AtomicInput(; molecule=qc_mol,; driver=""properties"",; keywords={; ""function_kwargs"": {; ""properties"": [; # ""dipole_polarizabilities"",; ""mbis_charges"",; ""quadrupole"",; ""mulliken_charges"",; ""dipole"",; ""lowdin_charges"",; ""wiberg_lowdin_indices"",; ""mayer_indices"",; ]; },; ""ddx"": True,; ""ddx_model"": ""pcm"",; ""ddx_solvent_epsilon"": 4.0,; ""ddx_solvent"": ""water"",; },; model=spec,; ); result = qcengine.compute(; input_data=task, raise_error=True, task_config={""ncores"": 4}, program=""psi4""; ); print(result.extras[""qcvars""][""MBIS CHARGES""]); ```; `def2-TZVPPD`; > [[ 2.5896714 ]; [ 0.9083468 ]; [ 0.96984483]; [ 1.82049044]; [ 1.84275851]; [ 1.27477756]; [-0.33630084]; [ 0.9999906 ]; [-0.6920741 ]; [-7.79483929]; [-2.0360328 ]; [ 0.45360942]]. `def2-TZVP`; >[[-0.14122935]; [-0.13601096]; [-0.12667168]; [-0.07069663]; [-0.12664356]; [-0.13593726]; [-0.05171043]; [ 0.15172393];",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3135:47,charge,charges,47,https://psicode.org,https://github.com/psi4/psi4/issues/3135,1,['charge'],['charges']
Energy Efficiency,"From discussion today, the following tasks to wrap up https://github.com/psi4/psi4public/issues/103; - [x] In driver.py, delete reference-bearing methods from procedures table (multiple places). Delete table:energy_scf rst table and its analogies. Salvage 'hf' from them and move it into the main rst table.; - [x] In proc.py, remove much of parse_scf_cases, maybe drop that fn and move it back into the run_scf\* as it was early this year.; - [x] Inspect test cases for removed functionality and adapt them. Check that the uhf that originally prompted this post is still working. Check that every energy/gradient rhf/uhf/rohf/cuhf/etc scf/hf/b3lyp does something sensible or exits gracefully.; - [x] Check the docs to see if they reference this functionality and adapt them.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/117:497,adapt,adapt,497,https://psicode.org,https://github.com/psi4/psi4/issues/117,3,"['adapt', 'energy']","['adapt', 'energy']"
Energy Efficiency,"Further to our discussion at Slack and e-mail, I made some tests on molecules with ECP's. Please see the attached G09 and psi4 input and log files. To obtain the psi4 results, the g- and h- shell coefficient of 0.000 in the Xe/Hg ECP has been replaced with 1D-10. A simple trapping of `tsum==0` in `erd_normalize_shell()` in `libmintsgshell.py` doesn't work properly - the term has to be sanity-checked in the loop before on lines 241-252. . For Hg, the `libmintsbasissetparser.py` had to be extended at line 202 to include the H-shell (thanks, Jesse). ![image](https://user-images.githubusercontent.com/5336995/36932575-1957f002-1ecb-11e8-84dc-b365f16b84b3.png). As can be seen from the table above, the absolute energies of the dimers are fine when compared to G09. The `nocp` interaction energy is also OK, however when CP-correction is involved, the results are not good - I imagine the ECP doesn't get properly ghosted. Finally, the psi4 calculations crash as `libmintsbasisset.py` is not able to find the basis sets for some reason - perhaps the basis set file is not passed into the routine properly? This also occurs when the basis set is defined in the job file using `basis { ... }`. [ECP-test.zip](https://github.com/psi4/psi4/files/1777311/ECP-test.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/926:791,energy,energy,791,https://psicode.org,https://github.com/psi4/psi4/issues/926,1,['energy'],['energy']
Energy Efficiency,GY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01845040 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00160622 xtpl_highest_1; total CBS -150.20089375; ---------------------------------------------------------------------------------------------------------; ```; Which as an aside does have some weird duplicates like ; ```hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY```. The order is a bit a different but everything does seem to match. But the mp2 energies are not the same. mp2/dz from the singlepoint:. ```delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1```. mp2/dz from the hessian:; ```mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY```. The hessian mp2 energy comes from this df-mp2 calculation. This should be a conventional mp2 calculation afaik; ```; //>>>>>>>>>,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:5225,Energy,Energy,5225,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['Energy'],['Energy']
Energy Efficiency,"GY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00134025 xtpl_highest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:2383,Energy,Energy,2383,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['Energy'],['Energy']
Energy Efficiency,"GaTech has known that dftd3-version returns wrong energy from one of the C++ functional calls, leading to a failed test, when build _for_ (not necessarily _on_) 5930 processor family. Fundamental cause is a different number of DFT grid points. @lazaroid at [the forum](http://forum.psicode.org/t/different-dft-grid-behaviour-on-different-machines-very-different-dft-enrgies/460/5) has given a good analysis of the problem. This issue admits that there is a problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/677:50,energy,energy,50,https://psicode.org,https://github.com/psi4/psi4/issues/677,1,['energy'],['energy']
Energy Efficiency,"Geom looks reasonable, and the calculation performed with the ghost atoms as *real* atoms goes just fine. Just this portion of the counterpoise-corrected intene goes off the rails. I've tested in both 1.6.x and 1.7.x; I don't have 1.8.x installed but if someone else does it's a very light weight calc to try. . Input:; ```set {; freeze_core true; basis def2-tzvppd; guess sad; }; molecule mol {; -1 1; @O -2.9015 2.0339 4.0653; @H -3.02228 2.5785 4.8759; @H -2.16632 1.41862 4.28713; O 0.0 0.0 0.0; C -0.67479 0.41341 -1.01466; O -0.87615 -0.42222 -1.96207; C -1.21823 1.79557 -1.10284; C -0.61745 2.829 -0.07843; H -1.1042 2.21706 -2.12009; H -2.30161 1.7313 -0.88466; H 0.4692 2.99187 -0.17478; H -0.84409 2.57987 0.97189; H -1.13803 3.76616 -0.33793; units angstrom; no_reorient; no_com; symmetry c1; }; energy('wb97m-v'); ```. Output:. ```. -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 (inplace). Git: Rev (inplace). D. G. A. Smith, L. A. Burns, A. C. Simmonett, R. M. Parrish,; M. C. Schieber, R. Galvelis, P. Kraus, H. Kruse, R. Di Remigio,; A. Alenaizan, A. M. James, S. Lehtola, J. P. Misiewicz, M. Scheurer,; R. A. Shaw, J. B. Schriber, Y. Xie, Z. L. Glick, D. A. Sirianni,; J. S. O'Brien, J. M. Waldrop, A. Kumar, E. G. Hohenstein,; B. P. Pritchard, B. R. Brooks, H. F. Schaefer III, A. Yu. Sokolov,; K. Patkowski, A. E. DePrince III, U. Bozkaya, R. A. King,; F. A. Evangelista, J. M. Turney, T. D. Crawford, C. D. Sherrill,; J. Chem. Phys. 152(18) 184108 (2020). https://doi.org/10.1063/5.0006002. Additional Code Authors; E. T. Seidl, C. L. Janssen, E. F. Valeev, M. L. Leininger,; J. F. Gonthier, R. M. Richard, H. R. McAlexander, M. Saitow, X. Wang,; P. Verma, M. H. Lechner, A. Jiang, S. Behnle, A. G. Heide,; M. F. Herbst, and D. L. Poole. Previous Authors, Complete List of Code Contributors,; and Citations for Specific Modules; https://github.com/psi4/psi4/blob/master/codemeta.json; htt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051:808,energy,energy,808,https://psicode.org,https://github.com/psi4/psi4/issues/3051,1,['energy'],['energy']
Energy Efficiency,"Geometric direct minimization (GDM) has been described in [Mol. Phys. 100, 1713 (2002)](https://doi.org/10.1080/00268970110103642) for RHF and UHF, as well as [J. Theor. Comput. Chem. 1, 255 (2002)](https://doi.org/10.1142/S0219633602000233) for ROHF. The idea is to simply minimize the total energy with respect to orbital rotations, employing an approximate preconditioner obtained by block-diagonalization of the molecular orbital Fock matrix. The approach is pretty straightforward, and implementing it would go a long way to solving #888. Its implementation would also be feasible for a new Psi4 developer.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2214:293,energy,energy,293,https://psicode.org,https://github.com/psi4/psi4/issues/2214,1,['energy'],['energy']
Energy Efficiency,Geometry not updated for energy surface scan with dummy atoms,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880:25,energy,energy,25,https://psicode.org,https://github.com/psi4/psi4/issues/2880,1,['energy'],['energy']
Energy Efficiency,"Ghost atoms should only carry basis functions (and in case of DFT xc quadrature grid points) but not ECPs. Psi4 does not remove the ECP. Tested for Psi4 Version 1.4a2.dev839+e273d32 installed via anaconda. Example: HF/def2-SVP for He-Xe dimer at 1 Angstrom separation, Xe as ghost atom. Expected energy: -2.855863 Hartree; Psi4: -2.818142 Hartree. Expected energy is obtained when removing ECP information from basis set file. Input file used for calculation:; ```; import psi4. geo = """"""; 0 1; he 0.0 0.0 0.0; @xe 1.0 0.0 0.0; """""". method = ""hf/def2-svp""; mol = psi4.geometry(geo). psi4.set_options({; 'scf_type': 'direct'; }). e = psi4.energy(method, molecule=mol); ```; Output file is attached.; [he-xe_ghost_hf_def2-svp_sp.log](https://github.com/psi4/psi4/files/4978823/he-xe_ghost_hf_def2-svp_sp.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1968:296,energy,energy,296,https://psicode.org,https://github.com/psi4/psi4/issues/1968,3,['energy'],['energy']
Energy Efficiency,"Given the following input; ```; molecule {; symmetry c1; He 0.0 0.0 0.0; He 0.0 0.0 1000.0; }. set basis 6-31G; set GUESS_VECTOR UNIT; set NUM_DETS_PRINT 4000000000000; set e_convergence 1e-10; set r_convergence 1e-10; #set diag_method rsp; energy('fci'); ```. I get the same energy with SEM and RSP, but the wave functions are totally different: SEM yields; ```; The 36 most important determinants:. * 1 -0.995668 ( 0, 0) 1AX 2AX ; * 2 0.065607 ( 3, 3) 1AX 4AX ; * 3 0.065607 ( 2, 2) 2AX 3AX ; * 4 -0.004323 ( 5, 5) 3AX 4AX ; * 5 0.002076 ( 0, 3) 1AX 2AA 4AB ; * 6 0.002076 ( 3, 0) 1AX 2AB 4AA ; * 7 -0.002076 ( 0, 2) 1AA 2AX 3AB ; * 8 -0.002076 ( 2, 0) 1AB 2AX 3AA ; * 9 0.000137 ( 2, 5) 2AA 3AX 4AB ; * 10 0.000137 ( 5, 2) 2AB 3AX 4AA ; * 11 -0.000137 ( 3, 5) 1AA 3AB 4AX ; * 12 -0.000137 ( 5, 3) 1AB 3AA 4AX ; * 13 0.000004 ( 2, 3) 1AB 2AA 3AA 4AB ; * 14 0.000004 ( 3, 2) 1AA 2AB 3AB 4AA ; * 15 -0.000004 ( 0, 5) 1AA 2AA 3AB 4AB ; * 16 -0.000004 ( 5, 0) 1AB 2AB 3AA 4AA ; ```. while RSP gives; ```; The 36 most important determinants:. * 1 0.995668 ( 0, 0) 1AX 2AX ; * 2 0.089327 ( 2, 3) 1AB 2AA 3AA 4AB ; * 3 -0.023675 ( 2, 2) 2AX 3AX ; * 4 0.009265 ( 0, 4) 1AA 2AX 4AB ; * 5 0.004289 ( 5, 5) 3AX 4AX ; * 6 -0.000549 ( 4, 4) 2AX 4AX ; * 7 0.000262 ( 4, 3) 1AB 2AA 4AX ; * 8 0.000159 ( 0, 3) 1AX 2AA 4AB ; * 9 -0.000043 ( 2, 4) 2AX 3AA 4AB ; ```. The RSP solution is obviously wrong, since the quadruple excitation should be possible to write in terms of independent singles/doubles.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/558:241,energy,energy,241,https://psicode.org,https://github.com/psi4/psi4/issues/558,2,['energy'],['energy']
Energy Efficiency,Gradients on point charges (C++),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2472:19,charge,charges,19,https://psicode.org,https://github.com/psi4/psi4/issues/2472,1,['charge'],['charges']
Energy Efficiency,"Greeting friends,; As you may have heard we are in the process of several fundamental Psi4 change. These include: rewriting the build system, removing Boost from Psi4, the ""inversion"", and a history rewrite. Read below for summaries of each step and where to find more detailed information. If you have any questions please ask them here or email us directly.; ## Steps. **Build system:**; The build system has moved to a ""super build"" strategy which reduces total compilation time and makes it much easier to add additional external libraries in the future. Developers will also see a reduction in the amount of time it takes to compile internal Psi4 changes and Psi4 can now link all external dependancies (libint for examples). Note that much of the github wiki on building psi4 is now plain wrong. Consult the top-level CMakeLists.txt to get building again. See [here](https://github.com/psi4/psi4/pull/442) for more information. . **Boost:**; Much of the Boost functionality that we have depended on in Psi4 has been implemented in C++11. In order to keep Psi4 up to date with best C++11 practices, reduce complexity, and generally remove several headaches, Boost has been removed from Psi4. The C++ Python bindings have been moved to PyBind11. See [here](https://github.com/psi4/psi4/issues/450) for more information. **Inversion:**; Currently the hybrid Python/C++ architecture of Psi4 is in an odd spot where Psi4 itself is a C++ program that calls an input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:451,reduce,reduces,451,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['reduce'],['reduces']
Energy Efficiency,H	32.47104	36.21876	90.76503; H	34.11454	35.52935	90.89115; H	33.84377	37.22581	91.29056; N	32.90475	37.13782	88.34874; C	33.15782	37.60052	86.97934; C	33.86886	38.96454	87.03422; O	34.80991	39.18532	86.28033; C	31.84528	37.71848	86.17268; C	32.03912	38.31152	84.79977; C	32.40330	37.64936	83.66144; C	31.91466	39.69401	84.43479; N	32.47754	38.52922	82.60241; C	32.22560	39.79734	83.05872; C	31.60991	40.86835	85.14938; C	32.23753	41.02592	82.38040; C	31.61276	42.08300	84.47411; C	31.93451	42.15430	83.10915; H	31.95003	36.90694	88.59560; H	33.86469	36.93525	86.48382; H	31.13951	38.33626	86.73028; H	31.39547	36.72527	86.09622; H	32.59682	36.59842	83.51011; H	32.83616	38.29956	81.69424; H	31.31032	40.82332	86.18651; H	32.49069	41.08281	81.32702; H	31.33751	42.98458	85.00576; H	31.93577	43.12034	82.61529; N	33.40238	39.87548	87.93259; C	33.95021	41.22796	88.13235; H	32.55100	39.65063	88.42989; H	33.33418	41.72562	88.88051; H	34.98535	41.18000	88.47977; H	33.91805	41.79950	87.20131; --; 0 1; C	24.40765	37.90938	79.56994; C	25.83546	38.31759	79.18785; O	26.04547	39.41352	78.66119; H	24.31593	36.86662	79.87982; H	24.08304	38.55074	80.39153; H	23.76087	38.10682	78.71472; N	26.80694	37.42577	79.45991; C	28.22549	37.63124	79.13952; C	28.56576	36.80191	77.91575; O	28.83057	35.60470	78.02521; C	29.13237	37.29707	80.33956; C	28.88026	38.15181	81.54233; N	28.83455	39.53680	81.45341; C	28.66488	37.79159	82.82840; C	28.59991	39.96651	82.68069; N	28.48108	38.95420	83.54114; H	26.56791	36.56463	79.92396; H	28.31093	38.69230	78.89909; H	30.16951	37.39398	79.98760; H	29.00411	36.24597	80.60454; H	28.96585	40.09061	80.62516; H	28.63154	36.81370	83.28055; H	28.52541	41.00151	82.97633; N	28.48465	37.43528	76.73944; C	28.68712	36.79551	75.44087; H	28.15661	38.38779	76.75046; H	28.43260	37.51232	74.66125; H	29.72488	36.47603	75.31892; H	28.05066	35.91312	75.34470; }. set {; scf_type DF; freeze_core True; basis aug-cc-pVDZ; }. energy('sapt2+'); ```; I'm using psi4 1.1rc1 Git: Rev {HEAD} 6db9b1f,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1828:5657,energy,energy,5657,https://psicode.org,https://github.com/psi4/psi4/issues/1828,1,['energy'],['energy']
Energy Efficiency,"H, wfn2 = psi4.hessian('b3lyp', return_wfn=True); wfn2.to_file(). Traceback (most recent call last):; File ""/root/.pycharm_helpers/pydev/pydevconsole.py"", line 364, in runcode; coro = func(); File ""<input>"", line 1, in <module>; File ""/opt/anaconda3/envs/py310/lib/python3.10/site-packages/psi4/driver/p4util/python_helpers.py"", line 360, in _core_wavefunction_to_file; 'Ca': wfn.Ca().to_array() if wfn.Ca() else None,; RuntimeError: ; Fatal Error: Wavefunction::Ca: Unable to obtain MO coefficients.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1683589981287/work/psi4/src/psi4/libmints/wavefunction.cc on line: 804; The most recent 5 function calls were:; psi::Wavefunction::Ca() const. this error doesn't happen when calculating energy",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3068:761,energy,energy,761,https://psicode.org,https://github.com/psi4/psi4/issues/3068,1,['energy'],['energy']
Energy Efficiency,"HF iter 20: -87.74745909582182 3.42916e-01 1.57938e+00; 20A 2.235682 21A 2.639750 22A 4.068870	 |	 @DF-RHF iter 21: -49.76413449146133 3.79833e+01 2.29697e+01; 23A 4.230928 24A 4.338550 25A 32.834338	 |	 @DF-RHF iter 22: -77.94619510085352 -2.81821e+01 6.69706e+00; Final Occupation by Irrep:						 |	 @DF-RHF iter 23: -80.45392024701042 -2.50773e+00 4.59655e+00; A								 |	 @DF-RHF iter 24: -76.07267063391218 4.38125e+00 9.18998e+00; DOCC [ 4 ]							 |	 @DF-RHF iter 25: -61.85382425940151 1.42188e+01 1.05928e+01; NA [ 4 ]							 |	 @DF-RHF iter 26: -86.77218963929283 -2.49184e+01 2.75808e+00; NB [ 4 ]							 |	 @DF-RHF iter 27: -77.43543931232399 9.33675e+00 3.96819e+00; @DF-RHF Final Energy: -35.61046747457991				 |	 @DF-RHF iter 28: -83.24663680738689 -5.81120e+00 3.02602e+00; => Energetics <=							 |	 @DF-RHF iter 29: -84.59007629023938 -1.34344e+00 2.49302e+00; Nuclear Repulsion Energy = 0.0000000000000000		 |	 @DF-RHF iter 30: -86.14724570488455 -1.55717e+00 1.56145e+00; One-Electron Energy = -54.3510785737621944		 |	 @DF-RHF iter 31: -78.57013959925717 7.57711e+00 2.04327e+00; Two-Electron Energy = 18.7406110991822779		 |	 @DF-RHF iter 32: -85.83622153869187 -7.26608e+00 3.17187e+00; Total Energy = -35.6104674745799201		 |	 @DF-RHF iter 33: -87.27348788185634 -1.43727e+00 1.46175e+00; Computation Completed							 |	 @DF-RHF iter 34: -76.35072049818045 1.09228e+01 3.97637e+00; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0	 |	 @DF-RHF iter 35: -70.56903511141743 5.78169e+00 1.24567e+01; Properties computed using the SCF density matrix			 |	 @DF-RHF iter 36: -75.56024107699382 -4.99121e+00 7.54313e+00; Multipole Moments:							 |	 @DF-RHF iter 37: 153.64365441909877 2.29204e+02 6.36152e+01; ---------------------------------------------------------------------	 |	 @DF-RHF iter 38: -73.57749835218766 -2.27221e+02 1.31647e+01; Multipole Electronic (a.u.) Nuclear (a.u.) 	 |	 @DF-RHF iter 39: -85.87858242035303 -1.23011e+01 1.51536e+00; -----------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3072:10190,Energy,Energy,10190,https://psicode.org,https://github.com/psi4/psi4/issues/3072,1,['Energy'],['Energy']
Energy Efficiency,Have energy derivatives intercept missing analytic methods on auto,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1149:5,energy,energy,5,https://psicode.org,https://github.com/psi4/psi4/issues/1149,1,['energy'],['energy']
Energy Efficiency,"Having recently been fiddling about with orbital coefficients, I've discovered that for ""reference = rhf or rohf"", the name of the Matrix returned by Ca() of a Wavefunction object, i.e. wfn.Ca().name is ""Beta MO coefficients"" and also printed by wfn.Ca().print_out(). wfn.Cb().name is ""Beta MO coefficients"", as expected in these cases. For at least rhf (and also rohf?), alpha and beta should be the same (the matrices returned by Da() and Db() are simply named ""SCF density"" for ""reference = rhf"".) Having had a quick look, Cb is mostly just a copy of Ca, so I'm not quite sure where the (re)naming to ""Beta"" occurs for Ca. For ""reference = uhf or cuhf"", Ca() and Cb() return the names Alpha and Beta, as expected. Very simple input file to reproduce:. molecule water{; 0 1; O 0.000000 0.000000 0.135446; H -0.000000 0.866812 -0.541782; H -0.000000 -0.866812 -0.541782; }. set {; reference rhf; }. e, wfn = energy('hf/3-21G', return_wfn=True). wfn.Ca().print_out(); print(wfn.Ca().name). wfn.Da().print_out(); print(wfn.Da().name). wfn.Fa().print_out(); print(wfn.Fa().name)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2587:909,energy,energy,909,https://psicode.org,https://github.com/psi4/psi4/issues/2587,1,['energy'],['energy']
Energy Efficiency,"Hello Psi4 community,; I was trying to simulate a simple reference model, pentacene on two layers of NaCl but cannot get it to converge. I am posting here instead of the Psi4 forum, since it does not support https, but I hope that someone can help me with this issue and see if I made any wrong assumptions. . In the input file I fixed the coordinated of the lower most NaCl monolayer and I use the OptKing solver (maybe geomeTRIC is more efficient here but did not know the input) with b3lyp-d3 (in hope to have a vdW-correction) and 6-31G as the basis set. I think that in itself b3lyp is not ideal for the surface, but I think that a plane-wave approach is better for the crystal itself. I'm interested in the electronic structure of the molecule in presence of the insulating layer, compared to gas-phase and in the atomic positions of the relaxed system. Any kind of help is much appreciated! Thank you in advance. My output file is the following:; ```; ==> Input File <==. --------------------------------------------------------------------------; memory 25 GB. set basis 6-31G. molecule {; 0 1; H 3.7651778770 9.5503410836 -1.8903043554 ; H 3.7651778770 7.0753410836 -1.8903043554 ; H 17.8091778770 7.0753410836 -1.8903043554 ; H 17.8091778770 9.5503410836 -1.8903043554 ; C 4.7039778770 9.0113410836 -1.8890043554 ; C 4.7039778770 7.6143410836 -1.8890043554 ; C 16.8703778770 7.6143410836 -1.8890043554 ; C 16.8703778770 9.0113410836 -1.8890043554 ; H 5.8910778770 10.7979410836 -1.8875043554 ; H 5.8910778770 5.8277410836 -1.8875043554 ; H 15.6832778770 5.8277410836 -1.8875043554 ; H 15.6832778770 10.7979410836 -1.8875043554 ; C 5.9119778770 9.7145410836 -1.8874043554 ; C 5.9119778770 6.9110410836 -1.8874043554 ; C 15.6623778770 6.9110410836 -1.8874043554 ; C 15.6623778770 9.7145410836 -1.8874043554 ; C 7.1332778770 9.0207410836 -1.8859043554 ; C 7.1332778770 7.6048410836 -1.8859043554 ; C 14.4410778770 9.0207410836 -1.8859043554 ; C 14.4410778770 7.6048410836 -1.8859043554 ; H 8.34",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709:439,efficient,efficient,439,https://psicode.org,https://github.com/psi4/psi4/issues/2709,1,['efficient'],['efficient']
Energy Efficiency,"Hello all; I've tried to load molecular geometry from XYZ-file. 3; 0 2; C 0.000000000000 0.000000000000 0.000000000000; C 0.000000000000 0.000000000000 1.211315440000; H 0.000000000000 0.000000000000 2.275843410000. charge = 0 multiplicity = 2. my input. memory 2 Gb; qmol = qcdb.Molecule.init_with_xyz('mol.xyz'); lmol = geometry(qmol.create_psi4_string_from_molecule()); set basis cc-pVQZ; set reference uhf; hf_e, hf_wfn = energy('scf', return_wfn=True); molden(hf_wfn, 'molden.dat'). I've got the following issue:. ```; Traceback (most recent call last):; File ""/home/vladimir/psi4conda/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 21, in <module>; File ""/home/vladimir/psi4conda/lib//python3.5/site-packages/psi4/driver/qcdb/molecule.py"", line 147, in init_with_xyz; instance.add_atom(el2z[fileAtom], fileX, fileY, fileZ, fileAtom, el2mass[fileAtom], el2z[fileAtom]); File ""/home/vladimir/psi4conda/lib//python3.5/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 1173, in add_atom; raise ValidationError(""Molecule::add_atom: Adding atom on top of an existing atom.""); ```; this exception raises after H atom insertions.; my version Git: Rev {HEAD} add49b9. when I rearranged my XYZ-file to the following. 3; 0 2; H 0.000000000000 0.000000000000 2.275843410000; C 0.000000000000 0.000000000000 0.000000000000; C 0.000000000000 0.000000000000 1.211315440000. all works fine. Best wishes, Vladimir.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/804:216,charge,charge,216,https://psicode.org,https://github.com/psi4/psi4/issues/804,2,"['charge', 'energy']","['charge', 'energy']"
Energy Efficiency,"Hello folks, . I am trying to obtain some multipoles using `psi4.gdma`. While using psi4 `1.6.1` I am able to run [this](https://github.com/psi4/psi4/blob/master/samples/gdma/gdma1/input.dat) example. ; Unfortunately, the program unexpectedly fails when running the **Python** snippet shown below, resulting in no information. . Any advice on how to troubleshoot this issue?; Thanks :). Here's what I'm running:. ```; import psi4; #psi4.core.be_quiet(). water = psi4.geometry(""""""; O 0.000000 0.000000 0.117176; H -0.000000 -0.756950 -0.468706; H -0.000000 0.756950 -0.468706; noreorient; nocom; """"""). psi4.set_options({""scf_type"" : ""pk"",; ""basis"" : ""cc-pvtz"",; ""d_convergence"" : 10,; }). psi4.set_options({ ""gdma_switch"" : 0,; ""gdma_radius"" : [ ""H"", 0.65 ],; ""gdma_limit"" : 2,; ""gdma_origin"" : [0.0, 0.0, 0.117176]. }). e, wfn = psi4.energy(""scf"", return_wfn=True, molecule=water); psi4.gdma(wfn). print(""I did not die while attempting to generate multipoles""); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2706:834,energy,energy,834,https://psicode.org,https://github.com/psi4/psi4/issues/2706,1,['energy'],['energy']
Energy Efficiency,"Hello, ; I am using Psi4 to perform QM/MM simulations, but I failed to find the gradient for the point charges.; So is there any way to get the gradient of point charges in QM/MM calculations? ; Thanks in advance",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2244:103,charge,charges,103,https://psicode.org,https://github.com/psi4/psi4/issues/2244,2,['charge'],['charges']
Energy Efficiency,"Hello, I have been trying to geometry optimize >100 dimer pairs of organic molecules. I have a 60% success rate. I am struggling with the 40% that fail. I have tried using second order convergence and level shifting. Below is an example of a citric acid dimer that fails to converge in 100 scf iterations. The systems all seem to follow the same trend. The first couple of iterations converge the wavefunction, but eventually the scf fails to converge. The starting dimer configuration is generated using a steepest descent MM energy minimization. I can provide the entire log file, or other files as well. On other runs I have tried using LEVEL_SHIFT, but it did not help. ```; molecule dimer {; C 999.407602 1002.751600 1001.828601; C 1000.887601 1002.788600 1001.459601; O 1001.420601 1002.207601 1000.537601; O 1001.632601 1003.490600 1002.306601; C 998.553602 1001.680601 1001.080601; C 997.058603 1001.817601 1001.472601; C 996.802603 1001.523601 1002.938600; O 996.673603 1002.368601 1003.793600; O 996.522603 1000.257601 1003.219600; C 999.058602 1000.222601 1001.385601; O 999.978601 999.942601 1002.133601; O 998.491602 999.266602 1000.641601; O 998.619602 1001.964601 999.673602; H 999.003602 1003.752600 1001.641601; H 999.352602 1002.590600 1002.911600; H 1002.505600 1003.321600 1001.914601; H 996.453603 1001.125601 1000.874601; H 996.697603 1002.829600 1001.259601; H 996.300603 1000.363601 1004.159600; H 999.068602 998.498602 1000.848601; H 999.237602 1001.315601 999.248602; --; C 1000.474601 997.570602 997.565602; C 999.917601 998.148602 996.273603; O 1000.520601 998.883602 995.519603; O 998.741602 997.650602 995.912603; C 1001.785601 998.271602 998.044602; C 1002.427600 997.524602 999.252602; C 1001.663601 997.719602 1000.554601; O 1000.490601 997.439602 1000.697601; O 1002.249601 998.561602 1001.401601; C 1001.507601 999.774602 998.424602; O 1000.400601 1000.275601 998.494602; O 1002.573600 1000.457601 998.849602; O 1002.730600 998.191602 996.966603; H 1000.645601 996.5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338:527,energy,energy,527,https://psicode.org,https://github.com/psi4/psi4/issues/2338,1,['energy'],['energy']
Energy Efficiency,"Hello,. Somehow the `pytest` module is imported during the DFT calculation with dispersion correction and crashes Psi4 if `pytest` is missing. It can be fixed simply by installing the missing module, but I thought that it's worth reporting still in order to patch the packaging. Psi4: v.1.8 from `conda-forge` (installed in a clean env using ` conda install psi4 python=3.10 -c conda-forge/label/libint_dev -c conda-forge `). Code to reproduce:. ```python; molecule {; 0 1; O 0.0 0.5 0.0; H 0.5 0.0 0.0; H -0.5 0.0 0.0. no_reorient; symmetry c1; }. memory 8GB; set_num_threads(2); set freeze_core True. E, wfn = energy('wb97x-d/6-311g**',return_wfn=True); ```. Fails with the following error:. ```; Traceback (most recent call last):; File ""/home/q-posev/miniconda3/envs/psi4-v18/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 2574, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 1430, in scf_wavefunction_factory; superfunc, _disp_functor = build_functional_and_disp(name, restricted=(reference in [""RKS"", ""RHF""]), **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 1407, in build_functional_and_disp; _disp_functor = empirical_dispersion.EmpiricalDispersion(name_hint=superfunc.name(),; File ""/home/q-posev/mi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3003:612,energy,energy,612,https://psicode.org,https://github.com/psi4/psi4/issues/3003,1,['energy'],['energy']
Energy Efficiency,"Hello,. We have developed software around psi4 to perform potential energy scans. We submit psi4 jobs to our cluster. Our cluster architecture is allocated where each node has 64 cores with each core having 1 thread enabled. My psi4 is installed pythonically. . When I submit jobs I request how many predicted cores I need:. ```bash; -pe smp 64; ```. Initially, when I submitted the jobs, I would pass this flag into `psi4.set_num_threads` but since each core has 1 thread it only used 1 the whole scan. Which would not work for our purpose, it's too slow. . When reading the documentation I can set the OMP and MKL flags prior to running the script. ```bash; export MKL_NUM_THREADS=48; export OMP_NUM_THREADS=48; ```. I saw that psi4 started spreading the loads across the cores but it looks like there are spikes where it clocks over the 48 requested cores that I thought is what tell psi4 what is available to it. . We record our results on ganglia on the performance and here are the screenshots down below:. ![n131](https://user-images.githubusercontent.com/11812946/195706024-72bf740f-be03-4348-8a08-8f7e5d90178c.png). So my question is how do I control pythonically psi4, it's allocation to cores, and set the limit where it doesn't spike a node. If that makes sense?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747:68,energy,energy,68,https://psicode.org,https://github.com/psi4/psi4/issues/2747,2,"['allocate', 'energy']","['allocated', 'energy']"
Energy Efficiency,"Hello,. You should be able to bump up the version of chemps2 used in psi4 to 1.6 without any other modifications. It contains many performance improvements. In 1.7 (not released yet) there will be API changes. So the dmrgscf/dmrgci routine will need to be adapted simultaneously with the version tag. And it will also contain DMRG-CASPT2!. Best wishes,; Sebastian",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/263:256,adapt,adapted,256,https://psicode.org,https://github.com/psi4/psi4/issues/263,1,['adapt'],['adapted']
Energy Efficiency,"Hello,; One of our users hit a problem last year on our supercomputer with his SAPT (energy('sapt2+3-ct')) jobs. Our sysadmins flagged low cpu utilisation for his jobs for which we decided that 4 cpus would give him optimum efficiency. However, the jobs were large enough as to take > 1000 hours (also frowned upon by our sysadmins) so I was asked to look into whether he could make better parallel use of the processors. We had some teething problems bringing our new supercomputer on line last year so I wanted to rule out issues on our side and I think I have now ruled out issues with IO, memory and threading (that had affected other programs).; Furthermore, during the investigations we noticed that ""top"" showed an almost equal alternation between one cpu and maximum cpus thus averaging above/below 50% use no matter how many cpus were requested. Roger Amos and I had a quick look at the SAPT papers and decided there wasn't anything intrinsic about the method that wouldn't allow it to parallel or would cause this behaviour (note I initially thought it might be a load imbalance between monomer basis and dimer basis calculations but it isn't). Also, subsequently we were asked to look into the performance of energy('fno-df-ccsd(t)') and that doesn't show this serial/parallel alternation.; Do you have any thoughts on this and have suggestions for determining optimum number of processors (does it depend on memory?) for this sort of calculation?; Thanks.; Rika; PS Do you need an input deck for this? Originally, the smallest case he had showing this behaviour took 230 hrs (seemed to be ok for his 60 hr SAPT job) but since then I think I have a 48 hr test case that will also display this behaviour. I'll need to ask the user for permission to pass it on first though.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/57:85,energy,energy,85,https://psicode.org,https://github.com/psi4/psi4/issues/57,2,['energy'],['energy']
Energy Efficiency,"Hello,; This is Jason from Monash Uni again. Thought I'd post my issue here instead of emailing everyone. I'm getting a PSIO error for some FNO-CD-CCSD(T) calculations and I'm hoping someone could help solve my problem. See below for the details. Cheers,; Jason. Input. ```; memory 126 Gb; molecule complex {; *** Atomic coordinates omitted ***; }. set globals {; basis aug-cc-pVDZ; scf_type df; df_basis_cc cholesky; freeze_core True; guess sad; basis_guess 3-21G; }; energy('fno-df-ccsd(t)'); ```. End of calculation output. ```; *** at Mon Feb 10 13:17:33 2014. *******************************************************; * *; * DF-CCSD *; * Density-fitted CCSD *; * *; * Eugene DePrince *; * *; *******************************************************. ==> 3-index integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2784. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -4.157303195170. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 678; Number of virtual orbitals in truncated space: 640. ==> Memory <==. Total memory requirements: 78825.79 mb; 3-index integrals: 10109.75 mb; CCSD intermediates: 68716.04 mb. <<< warning! >>> switched to low-memory (t) algorithm. memory requirements for CCSD(T): 36451.32 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 26; Number of active occupied orbitals: 74; Number of active virtual orbitals: 640; Number of frozen virtual orbitals: 38. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 393. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -3.045395864164; SS MP2 FNO correction: -1.111907331006; MP",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34:469,energy,energy,469,https://psicode.org,https://github.com/psi4/psi4/issues/34,2,['energy'],['energy']
Energy Efficiency,"Here's a minimal reproducible example (`mp_test.py`):. ```python; import multiprocessing as mp; import psi4. def run_psi4():; print(""start""); psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""). psi4.energy(""scf/sto-3g""); print(""done""); return. if __name__ == ""__main__"":; proc = mp.Process(target=run_psi4); # proc.run(); proc.start(); proc.join(); ```. This script doesn't run successfully on an Ubuntu machine, where `multiprocessing` uses `fork` to start new processes - it just dies silently partway through starting out. . Here's the output: ; ```; $ python mp_test.py; start. Scratch directory: /tmp/; => Libint2 <=. Primary basis highest AM E, G, H: 6, 6, 3; Auxiliary basis highest AM E, G, H: 7, 7, 4; Onebody basis highest AM E, G, H: -, -, -; Solid Harmonics ordering: Gaussian. *** tstart() called on 4f210325e2d9; *** at Tue Jul 2 19:27:19 2024. => Loading Basis Set <=. Name: STO-3G; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 81 file /opt/conda/share/psi4/basis/sto-3g.gbs; atoms 2-3 entry H line 19 file /opt/conda/share/psi4/basis/sto-3g.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.065775570547 15.994914619570; H 0.000000000000 -0.759061990794 0.521953018286 1.007825032230; H 0.000000000000 0.759061990794 0.521953018286 1.007825032230. Running in c2v symmetry. Rotational constants: A = 27.26297 B = 14.51533 C = 9.47217 [cm^-1]; Rotational constants: A = 817323.21126 B = 435158.60141 C = 283968.37536 [MHz]; Nuclear repulsion = 9.168193296424349. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nb",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3189:203,energy,energy,203,https://psicode.org,https://github.com/psi4/psi4/issues/3189,1,['energy'],['energy']
Energy Efficiency,"Here's a torture rack example that doesn't work in Psi4.; ```; set sad_scf_type direct; set scf_type direct; set df_scf_guess false; set sad_print 2; set guess sad. molecule xe1 {; 0 1; Xe; }; basis {; assign Xe 3-21G; }; energy('scf'). molecule xe2 {; 0 1; Xe; }; basis {; assign Xe def2-SVP; }; energy('scf'). molecule xe12 {; 0 1; Xe1; Xe2 1 100.0; }. basis {; assign Xe1 3-21G; assign Xe2 def2-SVP; }; energy('scf'); ```. The first calculation in 3-21G gives -7200.75273615335664; the SAD guess is already converged. The second calculation in def2-SVP gives -324.58820001177179 as the SAD guess energy, and -328.29839367561794 as the converged energy. The guess should also be fully converged here, so there some issue must still remain in the guess code. However, the real issue is the third calculation: now, instead of -7200.75273615335664, the SAD for the first atom gives -7200.18106523988899, so there's a 0.6 Hartree difference. The SAD for the second atom gives -2516.58141792475817? Also, SCF on the dimer fails to converge; this is probably an issue with the ECP.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1497:222,energy,energy,222,https://psicode.org,https://github.com/psi4/psi4/issues/1497,5,['energy'],['energy']
Energy Efficiency,"Here's another example of a hard geometry optimization problem. Psi4 1.3.2 crashes/segfaults; @psi-rking's pyoptking also gives up.; ```; import optking; memory 8 gb. molecule {; Mn -1.19858918223104 -0.08207133498850 -0.13371354096607; N -0.41561138019044 1.27599387849124 0.21223826269367; O 0.14600552164730 2.25554129585451 0.46379448621401; C -2.77325495017405 0.77903635981534 -0.46993705135304; C -0.09036086226268 -0.50949483218465 -1.52013938052672; O 0.61690491558852 -0.75191770614607 -2.38035917189752; O -3.74228303591446 1.34350620162321 -0.67446015379883; C -2.08944770913093 -1.62303880517967 -0.52670173551821; C -0.89694974294004 -0.80918135325017 1.51325120318508; O -2.64631747328247 -2.58917480422090 -0.77666675977250; O -0.69173610111097 -1.23796889981931 2.54918384173987; }. set basis STO-3G; set geom_maxiter 250. # Use a (75,302) quadrature grid; set dft_radial_points 75; set dft_spherical_points 302. # Psi4 has problems converging the first SCF with PBE so we initialize; # with Hartree-Fock orbitals; set df_basis_scf def2-svp-jkfit; energy('scf'); set df_basis_scf def2-svp-jfit; set guess read. optimize('pbe') # Crashes in psi4 1.3.2; #optking.optimize_psi4('pbe') # Also crashes; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2213:1065,energy,energy,1065,https://psicode.org,https://github.com/psi4/psi4/issues/2213,1,['energy'],['energy']
Energy Efficiency,"Hey PSI4 developers,. I am writing a plugin to test a JK algorithm. I want to run SCF in my plugin and test the new JK algorithm. . Even though I pass a converged scf wavefunction to the plugin, the SCF procedure doesn't converge. It seems that the wavefunction passing is messed up here. . Here is the basic structure of the plugin:. ```; SharedWavefunction kevin_plugin(SharedWavefunction ref_wfn, Options& options); {; boost::shared_ptr<Wavefunction> scf(new scf::RHF(ref_wfn, options, PSIO::shared_object()));; double scf_energy = scf->compute_energy();; } ; ```. I run the plugin as follows:. ```; import kevin_plugin. molecule H20 {; 0 1; H; O 1 1.08; H 2 1.08 1 107.5; units bohr; }. set globals {; basis sto-3g; df_basis_scf cc-pvdz-jkfit; df_basis_mp2 cc-pvdz-ri; scf_type df; reference RHF; }; refenergy, refwfn = energy('scf', return_wfn=True); energy('kevin_plugin', ref_wfn=refwfn); ```. Here is the first scf:. ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -75.66716318225211 -7.56672e+01 7.87344e-01; @DF-RHF iter 1: -73.90687341477560 1.76029e+00 2.74191e-02; @DF-RHF iter 2: -73.91391789759025 -7.04448e-03 3.08278e-03 DIIS; @DF-RHF iter 3: -73.91403288011436 -1.14983e-04 4.69651e-04 DIIS; @DF-RHF iter 4: -73.91403606558048 -3.18547e-06 5.07365e-05 DIIS; @DF-RHF iter 5: -73.91403611477740 -4.91969e-08 6.26518e-06 DIIS; @DF-RHF iter 6: -73.91403611547619 -6.98790e-10 5.20238e-09 DIIS; ```. Here is the scf after my plugin is called:. ```; @DF-RHF iter 1: 15.38889387804263 1.53889e+01 0.00000e+00; @DF-RHF iter 2: -72.40376803946150 -8.77927e+01 3.34064e-01 DIIS; @DF-RHF iter 3: -72.40376803946153 -2.84217e-14 3.34064e-01 DIIS; @DF-RHF iter 4: -72.40376803946151 1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 5: -72.40376803946153 -1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 6: -72.40376803946153 0.00000e+00 3.34064e-01 DIIS; @DF-RHF iter 7: -72.40376803946148 4.26326e-14 3.34064e-01 DIIS; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/419:824,energy,energy,824,https://psicode.org,https://github.com/psi4/psi4/issues/419,3,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Hi Psi4 developers,. I'd like to open discussion on making Psi4 packages on `conda-forge`. We at OpenFF have some projects that make heavy use of Psi4 and that we'd like to roll out to production alongside a pretty length list of other packages. Unfortunately, one or of our other dependencies is a somewhat monolithic and tangled web of FORTRAN and legacy code that regularly produces conflicts on macOS and sometimes causes deployment issues on Linux. (Others may have more comments on other deployment issues). We've been able to [resolve this](https://github.com/psi4/psi4/issues/2024) in the past, and we've also filled up the packaging channel on Slack on more than a few occasions. However, it may be more sustainable in the long run (for us and presumably other users) if we can get conda packaging for the Psi4 stack moved over to `conda-forge` - something we'd be happy to take a role in. * **Would this be useful for Psi4 developers and/or users?** I have personally had good experiences with migrations, both as a developer/maintainer and user. Getting everything on one channel (and using `conda-forge`'s existing automation) should help with dependency resolution/compatibility and in principle should also make build processes smoother. It would unblock some production issues with our software and be generally valuable for us - but we absolutely don't want to make life harder on for Psi4 developers/maintainers.; * **What technical blockers exist?** In the past we have gotten over some large hurdles (migrating OpenMM included contributing a recipe for CUDA toolkits) and more tedious blockers (migrating the OpenFF stack involved contributing something like 10-20 separate packages, piece by piece). `conda-forge` has [some tooling](https://conda-forge.org/docs/maintainer/knowledge_base.html#using-cmake) built around CMake, including MKL and some number of compilers. (Sorry - I'm not really an expert in packaging compiled code so I can't say much more about this - others may c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300:713,sustainab,sustainable,713,https://psicode.org,https://github.com/psi4/psi4/issues/2300,1,['sustainab'],['sustainable']
Energy Efficiency,"Hi Psi4 team,. I've seen some strange problems with the FCHK file in recent versions of Psi4. This includes 1.2 (release) and v1.3a1-405-gdcb0159 from github.; I am using the following commands to write out the FCHK file: . > energy, wfn = energy('PBE0', return_wfn=True); > ; > fchk_writer = psi4.FCHKWriter(wfn); > fchk_writer.write('TNB_n2_A.fchk'). This works correctly for small systems like H2O: all expected fields in the FCHK file are present. But for larger systems like TNB (file enclosed below), the following are missing:; 1) Alpha MO coefficients (Beta is present); 2) No orbital energies are present. There may be more fields missing, but these are the ones I know of. . What is odd is that the problem is not apparently systematic: the FCHK file is correct for the RDX molecule (all fields are present), but not TNB. . I need both the MO coefficients and MO energies for subsequent SAPT(DFT) calculations in CamCASP. We never had problems with Psi4 1.1, but need the AC in 1.2/3. Unfortunately this problem arises. . I hope this can be fixed and the structure/fields in the FCHK file made consistent with the specs. ; All the best,; Alston. **Input file:**. > memory 61440 MB; > ; > basis {; > assign aug-cc-pvdz; > }; > ; > molecule TNB_1 {; > no_reorient; > no_com; > units bohr; > 0 1; > O1 1.09555107 3.76703629 -7.83852576; > O2 1.12573623 6.36725616 -4.70326928; > O3 -2.95373205 4.13977831 3.05907653; > O4 -4.81462989 0.53449898 3.42022641; > O5 -3.04576492 -4.23365310 -7.04056005; > O6 -4.88147857 -5.23919973 -3.54614660; > N1 0.56718784 4.39077285 -5.70465171; > N2 -3.61888234 2.10279732 2.26585157; > N3 -3.68554450 -3.82553238 -4.88515975; > C1 -0.89474878 2.57110902 -4.18157565; > C2 -1.53597193 3.21430712 -1.73399499; > C3 -2.90523393 1.47230460 -0.35362235; > C4 -3.63263104 -0.83708361 -1.32968698; > C5 -2.93743373 -1.37538831 -3.78771254; > C6 -1.56886658 0.29097245 -5.25919020; > H1 -0.98802906 5.00949031 -0.93088016; > H2 -4.70324490 -2.17020139 -0.21423238; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1501:226,energy,energy,226,https://psicode.org,https://github.com/psi4/psi4/issues/1501,2,['energy'],['energy']
Energy Efficiency,"Hi all, ; I followed the tutorial to install the latest PSI4. However, when I used the cp command, it would show ""name 'cp' is not defined"". (if I use other function, such as energy, then there is no this kind of issue). could you help me solve this problem? Thank you.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/653:175,energy,energy,175,https://psicode.org,https://github.com/psi4/psi4/issues/653,1,['energy'],['energy']
Energy Efficiency,"Hi all,. I am getting the following error while running a DMRG calculation. I am using version 1.1rc1. > `###########################################################; > ### ###; > ### DMRG-SCF ###; > ### ###; > ### CheMPS2 by Sebastian Wouters ###; > ### https://github.com/SebWouters/CheMPS2 ###; > ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; > ### ###; > ###########################################################; > ; > Number of variables in the x-matrix = 22549; > CheMPS2 output is temporarily written to the file singlet.dmrg.out.chemps2 and will be copied here.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 47; > ; > Traceback (most recent call last):; > File ""/home/AzureUser/psi4conda/bin/psi4"", line 247, in <module>; > exec(content); > File ""<string>"", line 100, in <module>; > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/driver.py"", line 454, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/procrouting/proc.py"", line 3081, in run_dmrgci; > dmrg_wfn = core.dmrg(ref_wfn); > ; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1491459515796/work/psi4/src/psi4/libpsio/error.cc on line: 128; > The most recent 5 function calls were:; > ; > psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); > psi::psio_error(unsigned int, unsigned int); > psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); > psi::IntegralTransform::presort_so_tei(); > psi::IntegralTransform::transform_tei_first_half(std::shared_ptr<psi::MOSpace>, std::shared_ptr<psi::MOSpace>); > ; > ; > *** Psi4 encountered an error. Buy a developer more coffee!; > *** Resources and help at github.com/psi4/psi4.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2102:948,energy,energy,948,https://psicode.org,https://github.com/psi4/psi4/issues/2102,2,['energy'],['energy']
Energy Efficiency,"Hi all,. I am trying Psi4 4.0.0-beta4 today, but encountered a problem when parsing input and fetching corresponding basis set info. Here is a sample input file,; # =======================; # ! sample input. memory 500 mb. molecule test {; Li 0.000 0.000 0.000; }. set reference uhf; set globals = {; scf_type direct; basis 6-31G; e_convergence 10; }. this_energy = energy('scf'); # =======================. running with Psi 4.0.0-beta4 on Linux, compiled with intel composer xe 2013 (x86-64). The error message is: ; # =======================. Traceback (most recent call last):; File ""<string>"", line 36, in <module>; File ""/home/ren/soft/Psi4/share/psi/python/driver.py"", line 526, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 489, in run_scf; scf_helper(name, **kwargs); File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 707, in scf_helper; e_scf = PsiMod.scf(precallback, postcallback); RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for LI; file: /home/ren/soft/psi4.0b4/src/lib/libmints/basisset_parser.cc; line: 339; # =======================. Is it a but or am I wrong anywhere?; I appreciate any help and suggestions,; Hao",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/7:366,energy,energy,366,https://psicode.org,https://github.com/psi4/psi4/issues/7,3,['energy'],['energy']
Energy Efficiency,"Hi all,. I have been benchmarking energy calculations of various organic small-molecule dimers in Psi4. These dimers have minimum monomer separations (closest intermolecular contact) up to 15 Å. To determine which method produces interaction energies closest to coupled cluster results, I have graphed the partial crystal lattice energy contributions (a scaled sum of the dimer interaction energies) for subsets of dimers with monomer separations between (n, n+1). Odd behavior arose when analyzing results of benzene. PBEh-3c returned errors _much_ larger than any other method. To investigate these results, PBE, PBEh, and PBEh-3c were run in ORCA (5.0.1) and Psi4 (1.4rc3). Results are shown below. Methods denoted with an asterisk are those which use a fine grid (total points = 6340328). Methods without an asterisk used the default grid (Psi4 total points = 253270; ORCA total points = 56510). ![subplot-8](https://user-images.githubusercontent.com/87093097/134976005-f5bf7501-27d2-40c0-b033-06b33126f8dc.png). The graph shows that while PBE generally agrees in Psi4 and ORCA, PBEh and PBEh-3c disagree when comparing the two software packages and default grid points are used. When Psi4 uses a fine grid, the results align more-so with ORCA -- and the coupled cluster results. Two individual dimers have been chosen to highlight the differences in interaction energies:. | Benzene Dimer | Min. Monomer Separation (Å) | Interaction Energy (kJ/mol) | Software | Spherical Points | Radial Points | Total Points |; |---|---|---|---|---|---|---|; | 2mer-0+1 | 2.544 | -6.01017169 | ORCA | 194 | OptM3 with GC (2021) | 56510 |; | | | -6.09347943 | Psi4 | 302 | 75 | 253270 |; | | | -6.06158176 | Psi4 | 5810 | 99 | 6340328 |; | 2mer-0+77 | 11.016 | -0.03777130 | ORCA | 194 | OptM3 with GC (2021) | 56510 |; | | | -0.09279455 | Psi4 | 302 | 75 | 253270 |; | | | -0.03957357 | Psi4 | 5810 | 99 | 6340328 |. To me, this seems to be a systematic issue with Psi4 calculating interaction energies with PBE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2304:34,energy,energy,34,https://psicode.org,https://github.com/psi4/psi4/issues/2304,2,['energy'],['energy']
Energy Efficiency,"Hi all,. I have test PSI4 1.3.1 in Win10/WSL, the tests with test_snsmp2 & test_psi4_cc failed:. ```; ____________________________________________________ test_snsmp2 ______________________________________________________. @pytest.mark.smoke; @using_snsmp2; def test_snsmp2():; """"""snsmp2/he-he"""""". HeHe = psi4.geometry(""""""; 0 1; He 0 0 0; --; He 2 0 0; """"""). > e = psi4.energy('sns-mp2'). miniconda3/envs/psi/lib/python3.6/site-packages/psi4/tests/test_addons.py:935:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/driver.py:556: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/snsmp2.py:81: in run_sns_mp2; m1mhigh = c.compute('m1', 'm', 'high', mp2=True, mp2_dm=True); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/wavefunctioncache.py:386: in compute; self._init_ns(calc); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/wavefunctioncache.py:143: in _init_ns; return self._init_upcast_C(oldcalc=candidate, calc=calc); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/wavefunctioncache.py:172: in _init_upcast_C; new_wfn = self._basis_projection(oldcalc, calc); miniconda3/envs/psi/lib/python3.6/site-packages/snsmp2/wavefunctioncache.py:187: in _basis_projection; old_wfn = core.Wavefunction.from_file(read_filename); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/p4util/python_helpers.py:156: in _core_wavefunction_from_file; wfn_data = np.load(wfn_data).item(); miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/npyio.py:447: in load; pickle_kwargs=pickle_kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. fp = <_io.BufferedReader name='pytest_output.m1-m-low.14086.180.npy'>, allow_pickle = False; pickle_kwargs = {'encoding': 'ASCII', 'fi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:370,energy,energy,370,https://psicode.org,https://github.com/psi4/psi4/issues/1611,3,['energy'],['energy']
Energy Efficiency,"Hi all,. I just built Psi4 on mac os x, and everything seem to build and test fine. However, in doing a calculation I received the following error: . ```; An error has occurred Py-side; Traceback:; <class 'Boost.Python.ArgumentError'>: Python argument types in; OEProp.__init__(OEProp, str); did not match C++ signature:; __init__(_object*, boost::shared_ptr<psi::Wavefunction>): File ""<string>"", line 28, in <module>. File ""/usr/local/psi4/share/psi4/python/p4util/util.py"", line 41, in oeprop; oe = psi4.OEProp(wfn); ```. Input was:. ```; import psi4. molecule {; C 0.012220093121 -0.717626540721 0.000000000000; O -0.062545506204 0.679938040344 0.000000000000; H 0.518735639503 -1.098516178616 0.883563931671; H 0.518735639503 -1.098516178616 -0.883563931671; H -1.002097021106 -1.091505681690 0.000000000000; H 0.811765758420 1.042084199023 0.000000000000; }. set globals {; basis 6-31g*; }. energy('scf'); oeprop(""MULLIKEN_CHARGES""); ```. Commenting out the `oeprop` line not surprisingly gets rid of the error. . I doubt any of the rest of this matters, but... I did get two errors building, in case they're relevant, but I've seen them in other open issues:. ```; The following tests FAILED:; 254 - pywrap-opt-sowreap (Failed); 263 - sapt4 (Failed); Errors while running CTest; make: *** [test] Error 8; ```. Command used to configure: `./setup -DBUILD_CUSTOM_BOOST=TRUE --python /usr/bin/python objdir`; Compiler: gcc/g++/gfortran from hpc.sourceforge.net; OS: OS X 10.10.5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/260:896,energy,energy,896,https://psicode.org,https://github.com/psi4/psi4/issues/260,1,['energy'],['energy']
Energy Efficiency,"Hi all,. I was using the MRCC interface to compute the CCSDT energy of a trimer at the quadruplet spin state. Psi4 seems to initiate the computation correctly, but the MRCC computation stops after printing; `Calculation of MP denominators...`; without performing the CC iterations, but still printing `Normal termination of mrcc.` ; I tried the water example provided in the MRCC interface manual:; `molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt')`; It works fine as is, it also works fine if I change the multiplicity to `0 3` with `reference uhf` but not if I change it to `1 4` with `reference uhf`. It then fails at the same point than my original trimer computation. I notice that the output file of the successful triplet computation prints `Spin multiplicity: 3` twice whereas this line is missing in the failing quadruplet computations (see attached files).; [test.out.txt](https://github.com/psi4/psi4/files/1713187/test.out.txt); [test_quad.out.txt](https://github.com/psi4/psi4/files/1713188/test_quad.out.txt). Running the quadruplet directly through MRCC using their input file works fine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/915:61,energy,energy,61,https://psicode.org,https://github.com/psi4/psi4/issues/915,2,['energy'],['energy']
Energy Efficiency,"Hi all,. I've been running x2c calculations and when I checked for a simple Fe atom I encountered a bug I guess, as the energy is plain wrong with x2c in the cc-pVDZ basis when ```puream = false```. Here is the script I use:. ```; import psi4; ; psi4.geometry(""""""; Fe 0. 0. 0.; symmetry c1; """"""); psi4.set_options({'basis':""cc-pvdz-decon"",; 'basis_relativistic': ""cc-pvdz-decon"",; 'reference': ""rhf"",; 'relativistic': ""X2C"",; 'puream':""false""}). scf_e, scf_wfn = psi4.energy('scf', return_wfn=True); print(""Hartree-Fock energy: {}"".format(scf_e)); ```. Just replacing ```puream = true``` fixes the issue. Any idea of the reason of this ?; Note that ```sto-3g-decon``` works like a charm with ```puream = false```, so it might be a problem in the f shell ?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1908:120,energy,energy,120,https://psicode.org,https://github.com/psi4/psi4/issues/1908,3,['energy'],['energy']
Energy Efficiency,"Hi all,. Running the following per the docs works as expected:; ```; >>> conda create -n p4env psi4 -c psi4; >>> conda activate p4env; >>> psi4 --version; 1.6.1; ```. And I'm able to use psi4 in PsiAPI mode as expected (can run the h2o geometry opt and freq calcs) after entering a python shell. However, when I try to use Psi4 in Psithon mode like so, I obtain an error:. ```; >>> psi4 -i input.dat -o output.dat; A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.1; ```. Is this a compile issue in the Psi4 executable on conda?. In case it's helpful, I'm using a Mac (v.11.3.1) and running conda (4.12.0) with python 3.9.13. The input file I was trying to use contains:. ```; memory 600 mb. molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```. The tests module ran 92 / 4121 tests, and two failed (test_gdma and test_psi4_cc), but these seem unrelated to the current issue.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2661:810,energy,energy,810,https://psicode.org,https://github.com/psi4/psi4/issues/2661,1,['energy'],['energy']
Energy Efficiency,"Hi everyone,. I was testing the ADC(2) code in Psi4 on small molecules and noticed that the results I obtained were significantly different from Q-Chem. The SCF and MP2 energies match very well. For N2 (r = 1.2 A) with cc-pVDZ basis, here's a summary of the energies for the 8 lowest-lying singlet states from Q-Chem 4.4.1 compared to Psi4 1.1:. Q-Chem 4.4.1:; MP2 ground-state energy: -109.2579498247; Excitation energy: 8.385211 eV; Excitation energy: 8.385211 eV; Excitation energy: 8.832813 eV; Excitation energy: 9.441957 eV; Excitation energy: 9.441957 eV; Excitation energy: 13.868446 eV; Excitation energy: 13.868446 eV; Excitation energy: 14.791430 eV. Psi4 1.1: ; MP2 ground-state energy: -109.25794982519506; ->	1 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	2 A state : 0.3113289 (a.u.), 8.4716885 (eV); ->	3 A state : 0.3343892 (a.u.), 9.0991916 (eV); ->	4 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	5 A state : 0.3565394 (a.u.), 9.7019279 (eV); ->	6 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	7 A state : 0.5069575 (a.u.), 13.7950140 (eV); ->	8 A state : 0.5127312 (a.u.), 13.9521243 (eV). The Q-Chem energies agree with my standalone code. For N2 with STO-3G basis I simply get zero excitation energies with Psi4:. ==> ADC(2) Computation <== ; ; -> 1 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.3864160 (a.u.), 10.5149136 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! ; ; -> 2 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.4145495 (a.u.), 11.2804653 (eV); ┆ ┆ Occ Vir Coefficient ; --------------------------------------------- ; ; Converged in 2 iteration. ; Squared norm of the S component: 1.0000000 ; The S vector is rotated up to 90.000 (deg.) ; #WARNING: Strongly rotated from the CIS state! . Any idea about what's going on? . My inpu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033:378,energy,energy,378,https://psicode.org,https://github.com/psi4/psi4/issues/1033,10,['energy'],['energy']
Energy Efficiency,"Hi everyone,. When I run the following input I get different energies depending on the diag_method. While RSP gives the correct zeroth root of H0 as the ground state energy, the default one gives the first root energy as the ground state energy. With RSP Total CI energy = -149.601664883615285; with the default one Total CI energy = -149.577513236489096. İnput:; ```; molecule {; 0 1; O; O 1 1.2156; symmetry c1; }. set {; basis 6-311++G(d); reference rohf; frozen_docc [7]; frozen_uocc [35]; diag_method rsp; }; energy('detci'); ```; @dgasmith @CDSherrill",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1281:166,energy,energy,166,https://psicode.org,https://github.com/psi4/psi4/issues/1281,6,['energy'],['energy']
Energy Efficiency,"Hi guys,. @raimis found this bug and we are adapting to it on our code, but I find it kind of an ugly workaround. Have you experienced it?. @raimis, can you provide some more details? Thanks!. João",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817:44,adapt,adapting,44,https://psicode.org,https://github.com/psi4/psi4/issues/817,1,['adapt'],['adapting']
Energy Efficiency,"Hi psi4 developers. I want to get amplitudes of CI after finishing CISD calculation.; My input:. memory 2 Gb. molecule acetaldehyde {; 0 1; C 0.000000000000 0.000000000000 0.000000000000; O 0.000000000000 0.000000000000 1.208802240800; H 0.956843585468 0.000000000000 -0.556162423200; C -1.240787823813 0.000000000000 -0.847327118586; H -2.129446365838 0.000000000000 -0.220697345202; H -1.237161750186 0.878440322927 -1.496548823107; H -1.237161750186 -0.878440322927 -1.496548823107; }. set {; basis cc-pVDZ; freeze_core true; ciblks_print true; }; energy('cisd'). I set an option **ciblks_print true** but nothing has changed.; How do I get CI amplitudes (or 20 first one) properly?. Best, Vladimir.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/696:551,energy,energy,551,https://psicode.org,https://github.com/psi4/psi4/issues/696,1,['energy'],['energy']
Energy Efficiency,"Hi! I'm following the [official tutorial](https://psicode.org/psi4manual/master/psiapi.html) to run a simple HF computation using Psi4:; ```; H2 = psi4.geometry(""""""; units au; H 0 0 0; H 1.4 0 0; """"""; ). psi4.set_module_options('scf', {'e_convergence': '1e-3'}). psi4.energy('scf/cc-pvdz'); ```. However, it seems that after I manually set the energy convergence threshold to `1e-3`, the program still used the default value `1e-6` for the computation based on its output log: ; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12; ```. Did I use the wrong method to change the option (even though it's recommended in the same tutorial)? If so, what is the correct way to do it in Python? Thank you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2990:268,energy,energy,268,https://psicode.org,https://github.com/psi4/psi4/issues/2990,3,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Hi!. there is a bug in energy() function: both; energy('scf') ; and; energy('scf', dft_functional='b3lyp'); produce exactly the same results in psi4conda. This fact is inconsistent with http://www.psicode.org/psi4manual/master/dft.html where it is said that the latter syntax is absolutely valid.; See attached archieves for complete input and output files.; [1cc1.z437604.hippodrome.zip](https://github.com/psi4/psi4/files/1777480/1cc1.z437604.hippodrome.zip); [1cc1.z437605.hippodrome.zip](https://github.com/psi4/psi4/files/1777481/1cc1.z437605.hippodrome.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/927:23,energy,energy,23,https://psicode.org,https://github.com/psi4/psi4/issues/927,3,['energy'],['energy']
Energy Efficiency,"Hi, . I was doing the Energy surface scan in PSI4. . The surface scan worked well when there is no dummy atom in the z-matrix.; However, when I added a dummy atom in the z-matrix, the geometries are updated correctly. ; I have attached the input and output files with a dummy atom. . Thank you. Yiling . Input ; ```; # water and na, R is the distance variable for Rvals; memory 1000 mb. molecule dimer {; 0 1; O1 4.70071 0.00000 0.00000; H1 4.11483 0.00000 0.75695; H2 4.11483 0.00000 -0.75695; --; 1 1; X O1 R H1 125.25 H2 180.0; NA X 0.1 O1 180.0 H2 180.0; }. # set the scan variable of R above, ex: distance, manually/automatically assign; # ----------------------------------------------------------------; def frange(start, stop, step): ## do not change the section of def frange; 	i = start; 	while i < stop:; 		yield i; 		i += step; # ----------------------------------------------------------------; # Rvals=[2.5, 3.0, 4.0] ## manually assign the variable, ex: distance at 2.5, 3.0 and 4.0 anstrom; Rvals=[]; for j in frange(1.4, 1.9, 0.1): ## automatically assign the variable; the endpoint will not be performed; 	Rvals.append(round(j,2)) ## decimal is 2. ; # basis set; # ----------------------------------------------------------------; ##set basis <basisset>; set basis 6-31G(d). set guess sad; set scf_type df; set freeze_core false ## false for ions; ####cp(""df-mp2"") ## moved to below. # get the energy at each variable; # ----------------------------------------------------------------------------; # Initialize a blank dictionary of counterpoise corrected energies; # (Need this for the syntax below to work). ecp = {}; for R in Rvals:; dimer.R = R; ecp[R] = energy(""mp2"", bsse_type = ""cp"") ## for new version; #ecp[R] = cp(""df-mp2"") ## for beta version; e= ecp[R] * psi_hartree2kcalmol; psi4.print_out(""R, E_int [kcal/mol]: %3.1f %10.6f\n"" % (R, e)). # print out all the energies; # ----------------------------------------------------------------------------; psi4.print_out(""\n"")",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880:22,Energy,Energy,22,https://psicode.org,https://github.com/psi4/psi4/issues/2880,1,['Energy'],['Energy']
Energy Efficiency,"Hi, I am doing DFT calculations and get results like this:. @Final double-hybrid DFT total energy = -76.4165290991355590. Since a double precision floating point number can only store 15 decimals I wonder where the other decimals come from?; ; The excess of precision is a problem if I try to read the output files using a C++ program and the energy is truncated, which of course I can work around but that should not be necessary, right?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1733:91,energy,energy,91,https://psicode.org,https://github.com/psi4/psi4/issues/1733,2,['energy'],['energy']
Energy Efficiency,"Hi, I am trying to compute energy and force scans for some diatomic compounds using psi4.gradeint. In this case, a NO radical is used, with MP2 and the aug-cc-pvtz basis. The energy is not a smooth function of the distance, however all the calculations have converged SCF. Complete input script which takes a few minutes to run is attached as well as output. There are more examples. Am I missing something in checking for convergence? The main part of the script is here:; ```; converged = True; try:; grad, wfn = psi4.gradient(""MP2"", molecule=geom, return_wfn=True); except psi4.driver.SCFConvergenceError as ex:; converged = False; print(""SCF convergence error at r = %g converged = %s"" % (r, str(converged))); if converged:; myener = wfn.energy(); forces = grad.to_array(); table.append([r, myener, -forces[0][2]]); ```. I would be thankful for any input!. ![energy](https://user-images.githubusercontent.com/3735358/225842500-985ebc66-c219-455b-8ada-39eba9729b88.png); [psi4energy.zip](https://github.com/psi4/psi4/files/10998961/psi4energy.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2901:27,energy,energy,27,https://psicode.org,https://github.com/psi4/psi4/issues/2901,4,['energy'],['energy']
Energy Efficiency,"Hi, I created brand new `conda` environment and then installed `psi4` with:. ```; conda install psi4 psi4-rt python=3.6 -c psi4; ```. and then tried to run a test input, like so:. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```. I receive a segmentation fault and see the following Traceback:. ```TraceBack; psi4 test.in test.out; Traceback (most recent call last):; File ""/xxx/anaconda3/envs/psi4/bin/psi4"", line 177, in <module>; import psi4; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/__init__.py"", line 82, in <module>; from .driver import endorsed_plugins; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/psi4/driver/endorsed_plugins.py"", line 33, in <module>; import v2rdm_casscf; File ""/xxx/anaconda3/envs/psi4/lib//python3.6/site-packages/v2rdm_casscf/__init__.py"", line 45, in <module>; psi4.core.plugin_load(sofile); RuntimeError:; Fatal Error: load_plugin: Cannot open library: core.so: cannot open shared object file: No such file or directory; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 52; The most recent 5 function calls were:. forrtl: severe (174): SIGSEGV, segmentation fault occurred; ```. This also happens if I make the input file use the Python API. This is using:. - `conda` 4.8.3; - RHEL 7.6. Yikes. I just typed `psi4 --version` to grab the version and also received the Traceback, so something deep inside psi4 appears to be broken. I wasn't able to find a similar issue on GitHub, so apologies if this is already known. I tried to update `libint` based on this [thread](https://github.com/psi4/psi4/issues/1533), but that didn't fix this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1984:367,energy,energy,367,https://psicode.org,https://github.com/psi4/psi4/issues/1984,1,['energy'],['energy']
Energy Efficiency,"Hi, I noticed some odd ghosting behavior when doing interaction energy calculations on molecules containing Iodine. . When manually doing the counterpoise correction for a non-I-containing molecule, Psi4 reads the ghosted atoms properly and computes a sensible interaction energy (see `correctly-ghosted.txt`). However, when manually doing the counterpoise correction for an I-containing molecule, Psi4 does not ghost the atoms at all, and does the exact same calculation three times, resulting in an incorrect interaction energy (see `incorrectly-ghosted.txt`). The (much easier) workaround here is to counterpoise correct using the bsse_type=""cp"" interface, but I wanted to bring this to your attention anyways. [correctly-ghosted.txt](https://github.com/psi4/psi4/files/1458283/correctly-ghosted.txt); [incorrectly-ghosted.txt](https://github.com/psi4/psi4/files/1458284/incorrectly-ghosted.txt). Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/843:64,energy,energy,64,https://psicode.org,https://github.com/psi4/psi4/issues/843,3,['energy'],['energy']
Energy Efficiency,"Hi, I used the following code to do the dual descriptor analysis and with vmd for visualization. i think the visualization result is pretty nice. But dont know how to get the atom level contribution for the dual descriptor? i mean i want to get a dual descriptor value for each atom based on this analysis. please let me know whether is actionable or not, if yes, how to do this. memory 16GB. set {; basis def2-tzvp; scf_type df; cubeprop_tasks ['DUAL_DESCRIPTOR']; }. molecule {; 0 1; O 0.0079 -1.9528 -0.0005; C -2.5157 -0.6433 0.0011; C 2.5068 -0.5969 -0.0025; C -1.1805 0.1195 0.0002; C 1.1968 0.1198 -0.0018; C -0.0047 -0.5887 -0.0004; C -1.2319 1.4923 -0.0006; C 1.1838 1.5146 -0.0026; C -3.6879 0.3616 0.0011; C -2.6068 -1.5297 1.2621; C -2.7079 -1.5687 -1.2217; C 2.5070 -1.9923 0.7039; C 3.0017 -0.8662 -1.4567; C 3.6063 0.2376 0.7231; C -0.0305 2.2009 -0.0020; C -0.0443 3.6922 -0.0027; H -2.1329 2.0904 -0.0043; H 2.0930 2.1046 -0.0334; H -3.7145 0.9835 -0.9019; H -3.7037 0.9949 0.8966; H -4.6437 -0.1797 0.0141; H -1.9229 -2.3824 1.2564; H -3.6157 -1.9476 1.3668; H -2.4027 -0.9472 2.1687; H -2.0011 -2.4024 -1.2484; H -2.5837 -1.0072 -2.1552; H -3.7124 -2.0084 -1.2299; H 3.5334 -2.3099 0.9302; H 1.9732 -1.9611 1.6607; H 2.1098 -2.8008 0.0833; H 3.1163 0.0724 -2.0117; H 3.9714 -1.3768 -1.4592; H 2.2900 -1.4879 -2.0116; H 4.5299 -0.3429 0.8400; H 3.8984 1.1317 0.1617; H 3.2837 0.5402 1.7263; H -0.8758 4.0777 0.5971; H -0.1445 4.0662 -1.0265; H 0.8759 4.1009 0.4287; H 0.3642 -2.2241 -0.8650; }. E, wfn = energy('PBE0', return_wfn=True); fchk(wfn, ""orbital.fchk""); cubeprop(wfn); ![Uploading bht_dual_descriptor_visualization_by_vmd.png…]()",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3108:1522,energy,energy,1522,https://psicode.org,https://github.com/psi4/psi4/issues/3108,1,['energy'],['energy']
Energy Efficiency,"Hi, PSI4 developers. My input:. ```; memory 1000 mb; molecule naphtalene {; 0 1; H -3.36584264 1.24097876 0.00000000; H -3.36584264 -1.24097876 0.00000000; C -2.42446866 -0.70593661 0.00000000; C -2.42446866 0.70593661 0.00000000; H -1.23966218 -2.48102176 0.00000000; C -1.24087056 -1.39724699 0.00000000; H -1.23966218 2.48102176 0.00000000; C -1.24087056 1.39724699 0.00000000; C 0.00000000 -0.71416200 0.00000000; C 0.00000000 0.71416200 0.00000000; H 1.23966218 -2.48102176 0.00000000; C 1.24087056 -1.39724699 0.00000000; H 1.23966218 2.48102176 0.00000000; C 1.24087056 1.39724699 0.00000000; C 2.42446866 -0.70593661 0.00000000; C 2.42446866 0.70593661 0.00000000; H 3.36584264 1.24097876 0.00000000; H 3.36584264 -1.24097876 0.00000000; }. set {; basis sto-3g; scf_type df; ROOTS_PER_IRREP = [ 0, 0, 0, 0, 0, 0, 1, 1 ]; }. energy('eom-cc3'); ```. crash on second excitation state calculation with error:. ```; PSIO_ERROR: unit = 128, errval = 18; PSIO_ERROR: 18 (Incorrect block end address). An error has occurred. Traceback:; <type 'exceptions.RuntimeError'>:.; Fatal Error: PSIO Error; Error occurred in file: /home/vladimir/git/psi4public/src/lib/libpsio/error.cc on line: 123; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::psio_read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_rd(psi::dpdfile4*, int); : File ""<string>"", line 43, in <module>. File ""/usr/local/psi4/share/psi4/python/driver.py"", line 586, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/usr/local/psi4/share/psi4/python/proc.py"", line 2243, in run_eom_cc; psi4.cceom(ref_wfn); ```. with respect, Vladimir.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/307:832,energy,energy,832,https://psicode.org,https://github.com/psi4/psi4/issues/307,3,['energy'],['energy']
Energy Efficiency,"Hi, PSI4 users.; I run OMP2/OMP3/OCEPA for cubane molecule (Molecular point group: d2h, Full point group: Oh).; And found that OMP2 didn't use symmetry in SCF run, but OMP3/OCEPA does.; Using symmetry significantly accelerates calculation. . My input:. > # ; > ; > memory 1000 mb; > molecule cubane {; > 0 1; > H 1.4194 -1.4194 1.4194; > C 0.7855 -0.7855 0.7855; > H 1.4194 -1.4194 -1.4194; > C 0.7855 -0.7855 -0.7855; > H 1.4194 1.4194 1.4194; > C 0.7855 0.7855 0.7855; > H 1.4194 1.4194 -1.4194; > C 0.7855 0.7855 -0.7855; > H -1.4194 1.4194 -1.4194; > C -0.7855 0.7855 -0.7855; > H -1.4194 1.4194 1.4194; > C -0.7855 0.7855 0.7855; > H -1.4194 -1.4194 1.4194; > C -0.7855 -0.7855 0.7855; > H -1.4194 -1.4194 -1.4194; > C -0.7855 -0.7855 -0.7855; > }; > ; > set {; > basis cc-pVDZ; > scf_type pk; > E_CONVERGENCE 10; > D_CONVERGENCE 10; > molden_write true; > }; > ; > energy('omp2'). Git: Rev {master} 521f06adb441ac1e2f1732eb1cd090190b409c49. Vladimir",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/186:871,energy,energy,871,https://psicode.org,https://github.com/psi4/psi4/issues/186,1,['energy'],['energy']
Energy Efficiency,"Hi, all! I mentioned this issue yesterday at the Psi4 Dev meeting, and I wanted to post the issue here, with more collected information. The crux of the issue, as I have determined, is that the COSX code, when using the ROBUST grid pruning scheme in conjunction with 146 spherical points on either of its grids (initial or final), simply breaks. Consider the following input:; ```; molecule mol {; 0 1; O; H 1 0.96; H 1 0.96 2 104.5; symmetry c1; no_reorient; no_com; }. set {; scf_type cosx; df_scf_guess false; basis aug-cc-pVDZ; e_convergence 1.0e-10; incfock true; incfock_full_fock_every 4; ints_tolerance 1.0e-12; cosx_spherical_points_final 146; cosx_radial_points_final 50; cosx_pruning_scheme robust; }. energy = energy('scf'); ```. A simple expansion of the final COSX grid compared to default. This calculation breaks upon entering the final SCF iteration (where the tight grid is used) with the following error:; ```; !----------------------------------------------------------------------------------!; ! !; ! ADIIS minimization failed. File a bug, and include your entire input and output !; ! files. !; ! !; !----------------------------------------------------------------------------------!; ```. The following input, an expansion of both the initial and final grids, also fails:; ```; molecule mol {; 0 1; O; H 1 0.96; H 1 0.96 2 104.5; symmetry c1; no_reorient; no_com; }. set {; scf_type cosx; df_scf_guess false; basis aug-cc-pVDZ; e_convergence 1.0e-10; incfock true; incfock_full_fock_every 4; ints_tolerance 1.0e-12; cosx_spherical_points_initial 146 ; cosx_radial_point_initial 50 ; cosx_spherical_points_final 302; cosx_radial_points_final 75 ; cosx_pruning_scheme robust; }. energy = energy('scf'); ```. This one fails in the SAD-guess iteration, with the following error:; ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Matrix::diagonalize: DSYEV failed! !; ! Error occurred in file: !; ! /theoryfs2/ds/dpoole",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890:713,energy,energy,713,https://psicode.org,https://github.com/psi4/psi4/issues/2890,2,['energy'],['energy']
Energy Efficiency,"Hi,. Against a build of HEAD, using the following input:. ```; set basis $BASIS_SET$. molecule MOL {; 0 1; C 0.0 0.00000 0.00000; symmetry c1; }. energy('scf'); oeprop(""GRID_ESP"", ""GRID_FIELD""); ```. When $BASIS_SET$ is set to ""6-31G*"", PSI4 runs to completion, correctly outputting grid_esp.dat and grid_field.dat files. However, when set to ""cc-pvdz"", PSI4 fails in oeprop(), with the errror:. ```; Traceback (most recent call last):; File ""<string>"", line 22, in <module>; File ""/usr/local/psi4/share/psi//python/p4util/util.py"", line 46, in oeprop; oe.compute(); RuntimeError: Matrix::vector_dot: Dimensions do not match!. ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/84:146,energy,energy,146,https://psicode.org,https://github.com/psi4/psi4/issues/84,1,['energy'],['energy']
Energy Efficiency,"Hi,. Forgive me if this is elementary. I want to compute reaction rates between an open and closed ring in a molecule. . <img width=""489"" alt=""Screenshot 2023-11-15 at 9 53 43 AM"" src=""https://github.com/psi4/psi4/assets/11812946/02f6b424-9ad0-41ab-9994-2fe667eb1232"">. If we take a z-matrix of the input and output. <img width=""159"" alt=""Screenshot 2023-11-15 at 9 56 05 AM"" src=""https://github.com/psi4/psi4/assets/11812946/9857d904-2867-4d84-b201-b72500bf796b"">. And pass it through the psi4 code:. ```python. import psi4 . psi4.set_options({; 'scf_type': 'df',; 'g_convergence': 'gau_tight',; 'freeze_core': 'true',; }). zmatrix = ''. molecule = psi4.geometry(zmatrix); molecule.update_geometry(). energy, wave_function = psi4.energy(; 'mp2/cc-pvqz',; return_wfn=True,; molecule=molecule; ). frequency = psi4.frequencies(; ' mp2/cc-pvqz',; ref_gradient=wave_function.gradient(),; molecule=molecule; ). ```. I can run the thermo package and obtain energies in both closed/open states but I was wondering how, thermodynamically (the different energetic terms: Thermal Energy, Enthalpy, Gibbs Free Energy), this relates to the erying equation. . Is the enthalpy of activation = enthalpy of closed - enthalpy of open.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3077:702,energy,energy,702,https://psicode.org,https://github.com/psi4/psi4/issues/3077,4,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Hi,. Hope you don't mind me asking if there's an ETA for the 1.1.0 release?; I ask only because I'd like to co-ordinate with the release schedule of our own software that has a dependency on Psi4. Thanks,. Matt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/608:137,schedul,schedule,137,https://psicode.org,https://github.com/psi4/psi4/issues/608,1,['schedul'],['schedule']
Energy Efficiency,"Hi,. I am new to psi4 and am having a question about how to read in initial guess wfn. Below is my input:; ```; memory 4000 mb; molecule mol {; 0 3; 	O 1.09800 -0.01685 0.05354; 	O 2.24893 -0.01685 0.05354; }; set basis 6-31g*; set puream false; set reference uhf; set scf_type direct; set guess read; e, wfn = energy('scf', molecule=mol, return_wfn=True, restart_file=""./psi-wfn.npy"") ; molden(wfn, 'psi4-out.molden'); wfn.to_file('psi-wfn-new'); ```; But it does not seem to use the guess wfn (psi-wfn.npy) and still need 12 cycles to converge (I kept the same basis set and method in this test).; ```; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.; ```. I also did a comparison test where I have these two subsequential jobs in the same input file, and I found the second job loaded the wfn file from the previous job. Do I need to change the naming of the wfn file to a specific format? Or does psi4 currently support reading .npy (or other types of the wfn files) from different jobs? Thanks in advance for you help!. Best,; Chenru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1936:311,energy,energy,311,https://psicode.org,https://github.com/psi4/psi4/issues/1936,1,['energy'],['energy']
Energy Efficiency,"Hi,. I am now using the developer version 1.4a2.dev215, and I realized that some of my calculation are not giving the same results as before. I asked someone to do the same calculation with the release version of psi4 and we indeed have something really different. We did H4, square shape. I enclose the output of both files. Note that this was done with the OpenFermion-Psi4 interface and the output contains HF, CISD, FCI and CCSD calculations. I do not see any difference in the settings, so I don't understand why I get wrong HF energy for instance. Can anyone see something or knows something about it ?. [version_1.4a2.dev215.txt](https://github.com/psi4/psi4/files/4579640/version_1.4a2.dev215.txt); [release_1.3.2.txt](https://github.com/psi4/psi4/files/4579639/release_1.3.2.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1878:533,energy,energy,533,https://psicode.org,https://github.com/psi4/psi4/issues/1878,1,['energy'],['energy']
Energy Efficiency,"Hi,. I am running Psi4 on Microsoft Azure. We have a 32 CPU and 128 GB of memory for running our workflow Ubuntu 20.04. When I run our code I get for optimizing `psi4.optimize` I get an initial segmentation fault. Python version 3.7, and psi4 version 1.7. It's odd because with . psi4.set_memory('128GB'); psi4.get_memory(). I can see psi4 has that allocated memory. When I run:. `psi4 --test`. ```; /_pytest/config/__init__.py"", line 620, in _importconftest; assert mod not in mods; AssertionError; ```. This gets returned. What is going on here, any hints?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3154:349,allocate,allocated,349,https://psicode.org,https://github.com/psi4/psi4/issues/3154,1,['allocate'],['allocated']
Energy Efficiency,"Hi,. I am trying to do a large CASCI (16e,16o) but I get an error which I don't understand. Note that the CAS(16e,14o) worked perfectly. Here is the error:; ```; PSIO_ERROR: unit = 53, errval = 12; PSIO_ERROR: 12 (error writing to file); Traceback (most recent call last):; File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 47, in <module>; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); File ""/marisdata/senjean/Git_repo/SA-OO-VQE//intersection_coniques.py"", line 35, in get_energies_formaldimine; E0_casci = psi4.energy('fci'); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/senjean/psi4conda/lib/python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2998, in run_detci; ciwfn = core.detci(ref_wfn); RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959:555,energy,energy,555,https://psicode.org,https://github.com/psi4/psi4/issues/1959,3,['energy'],['energy']
Energy Efficiency,"Hi,. I am wondering if it is possible to run a torsion scan from the python API using cartesian coordinates. . For example, can the following be executed solely from python?; (copying code from here : https://psicode.org/psi4manual/master/optking.html?highlight=torsion+scan#constrained-optimizations). ```; molecule hooh {; 0 1; H; O 1 0.95; O 2 1.39 1 103; H 3 0.95 2 103 1 D. D = 99. units ang; }. set {; basis cc-pvdz; intrafrag_step_limit 0.1; frozen_dihedral ("" 1 2 3 4 ""); }. dihedrals = [100, 110, 120, 130, 140, 150]; PES = []. for phi in dihedrals:; hooh.D = phi; E = optimize('scf'); PES.append((phi, E)). print(""\n\tcc-pVDZ SCF energy as a function of phi\n""); for point in PES:; print(""\t%5.1f%20.10f"" % (point[0], point[1])); ```. Thanks,; Erik",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910:640,energy,energy,640,https://psicode.org,https://github.com/psi4/psi4/issues/2910,1,['energy'],['energy']
Energy Efficiency,"Hi,. I have a molecule that has Gallium ion approaching the surface of an aromatic ring. There are 3 in the structure. I want to perform UV excitation on them to get an initial wavelength but running into problems. Is my error so far. My code looks something like this:. ```python. psi4.set_options({; 'scf_type': 'df',; 'g_convergence': 'gau',; 'freeze_core': 'true',; 'reference': 'uhf',; 'save_jk': True,; 'fail_on_maxiter': 'false'; }). molecule = 'X'. energy, wave_function = psi4.energy(; 'hf/6-311g',; return_wfn=True,; molecule=self.molecule; ). rpa = tdscf_excitations(wave_function, states=[10]); poles = [r[""EXCITATION ENERGY""] for r in rpa]; opa_residues = [np.linalg.norm(r[""ELECTRIC DIPOLE TRANSITION MOMENT (LEN)""])**2 for r in rpa]; ecd_residues = [r[""ROTATORY STRENGTH (LEN)""] for r in rpa]; opa_spectrum = spectrum(poles=poles, residues=opa_residues, gamma=0.01, out_units=""nm""); ```. Stacktrace Error:. ```python; File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 720, in tdscf_excitations; res_1 = _solve_loop(wfn, ptype, solve_function, singlets_per_irrep, maxiter, restricted, ""singlet""); File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 326, in _solve_loop; ret = solve_function(engine, nstates, guess_, maxiter); File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/procrouting/response/scf_response.py"", line 690, in rpa_solver; return solvers.hamiltonian_solver(engine=e,; File ""/home/sulstice/software/miniconda2/envs/qmpython3/lib/python3.9/site-packages/psi4/driver/p4util/solvers.py"", line 989, in hamiltonian_solver; raise RuntimeError(msg); RuntimeError: The H2 matrix is not Positive Definite. This means the reference state is not stable.; ```. Running things I would maybe predict at UHF is not right and I don't think this is a coordinate op",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3134:457,energy,energy,457,https://psicode.org,https://github.com/psi4/psi4/issues/3134,3,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"Hi,. I just started to use PSI4 and wanted to test whether my installation is able to work with CFOUR. When running PSI4 with the following input:. ```. #!CFOUR test. molecule {; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; }. set {; cfour_CALC_level=CCSD(T); cfour_BASIS=AUG-PVQZ; cfour_SCF_CONV=12; cfour_CC_CONV=12; }. energy(‘cfour’); ```. Psi4 is complaining about the basis set:. QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: [‘O’]; Basis Sets: [(’(AUTO)’, ‘(AUTO)’, None)]; File Path: /scr/tobias/psi.1379622…cfour.14c28cc5, /scr/tobias/psi.1379622…cfour.14c28cc5, /xstorage/tobias/bin/psi4/share/psi4/basis; Input Blocks:. Traceback (most recent call last):; File “/xstorage/tobias/bin/psi4/bin/psi4”, line 338, in; exec(content); File “”, line 31, in; File “/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/psi4/driver/driver.py”, line 501, in energy; wfn = procedures[‘energy’][lowername](lowername, molecule=molecule, **kwargs); File “/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/psi4/driver/procrouting/interface_cfour.py”, line 185, in run_cfour; cfour_infile.write(write_zmat(lowername, dertype, molecule)); File “/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/psi4/driver/procrouting/interface_cfour.py”, line 461, in write_zmat; qbs = core.BasisSet.build(molecule, “BASIS”, core.get_global_option(‘BASIS’)); File “/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/psi4/driver/p4util/python_helpers.py”, line 85, in _pybuild_basis; bs, basisdict = qcdb.BasisSet.pyconstruct(mol.to_dict(),; File “/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/psi4/driver/qcdb/libmintsbasisset.py”, line 696, in pyconstruct; bs, msg, ecp = BasisSet.construct(parser, mol,; File “/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/psi4/driver/qcdb/libmintsbasisset.py”, line 918, in construct; raise BasisSetNotFound(f’BasisSet::construct: Unable to find a basis set for atom {at + 1} fo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608:316,energy,energy,316,https://psicode.org,https://github.com/psi4/psi4/issues/2608,3,['energy'],['energy']
Energy Efficiency,"Hi,. I just updated my psi4 conda installation using:. `conda install psi4 python=3.10 -c conda-forge/label/libint_dev -c conda-forge `. imports seem to work fine:. ```; import psi4; import forte; ```; however, when I run the following:. ```; psi4.set_memory('500 MB'); numpy_memory = 2 # No NumPy array can exceed 2 MB in size; psi4.core.set_output_file('output.dat', False); # specify the basis; basis = 'cc-pVTZ'; # Set computation options; psi4.set_options({'basis': basis,; 'scf_type': 'pk',; 'save_jk': 'true',; 'guess': 'core',; 'print' : 5,; 'FREEZE_CORE' : 'True',; 'e_convergence': 1e-8,; 'd_convergence': 1e-10,; 'LOCAL_MAXITER':10000}); geometry = '''; O -4.6674893014 0.2942847846 3.0623807031; H -3.892960984 0.903739148 3.0964143699; H -4.4005368234 -0.1221007613 2.241525046; '''; mol = psi4.geometry(geometry+""symmetry c1""); SCF_E_psi = psi4.energy('scf'); ```; it fails with:. ```; File ~/opt/miniconda3/envs/psi4/lib/python3.10/site-packages/psi4/driver/p4util/procutil.py:531, in prepare_options_for_set_options(); 529 current_module = psi_options.get_current_module(); 530 # Get the current Forte options from Forte; --> 531 forte_options = forte.ForteOptions(); 532 forte.register_forte_options(forte_options); 533 psi_options.set_current_module(""FORTE""). AttributeError: module 'forte' has no attribute 'ForteOptions'; ```. I can minimally reproduce the error with:. ```; mport forte; forte_options = forte.ForteOptions(); ---------------------------------------------------------------------------; AttributeError Traceback (most recent call last); Cell In[7], line 2; 1 import forte; ----> 2 forte_options = forte.ForteOptions(); AttributeError: module 'forte' has no attribute 'ForteOptions'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3010:859,energy,energy,859,https://psicode.org,https://github.com/psi4/psi4/issues/3010,1,['energy'],['energy']
Energy Efficiency,"Hi,. I'm trying to run some CASSCF calculations for systems where the HF reference is terrible. What I'd like to do is use e.g. BP86 orbitals to run CASSCF. However, when I use. energy('bp86'); set guess read; set maxiter 0; set fail_on_maxiter 0; energy('casscf'). it still runs a single HF iteration even though maxiter=0. Would it be possible to change the behavior of maxiter so that maxiter=0 only recomputes the energy and orbital eigenvalues, but does not update the orbitals? (Pseudocanonization should be OK.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/556:178,energy,energy,178,https://psicode.org,https://github.com/psi4/psi4/issues/556,3,['energy'],['energy']
Energy Efficiency,"Hi,. MBIS calculation fails for iodine containing molecules with DZVP basis set using `psi4 1.4.1` and `psi4 1.6.1`. Here is a minimal reproducible example:; ```; molecule dummyol {; 0 1; C 0. -1.94 0.; I 0. 0.24 0.; H -1.04 -2.27 0.; H 0.52 -2.27 0.90; H 0.52 -2.27 -0.90; }; set {; guess sad; scf_type df; basis DZVP # works for def2-svp; e_convergence 8; d_convergence 8; }; e, wfn = energy('scf', return_wfn=True); oeprop(wfn, ""MBIS_VOLUME_RATIOS"", 'MBIS_CHARGES', title='CH3I-dzvp'). ```; The error message reads:; ```; Traceback (most recent call last):; File ""/home/anaconda3/envs/psi4-09-26-22/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/util.py"", line 72, in oeprop; free_atom_volumes(wfn); File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/prop_util.py"", line 121, in free_atom_volumes; psi4.oeprop(at_wfn, 'MBIS_CHARGES', title=a_sym + "" "" + method, free_atom=True); File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/util.py"", line 74, in oeprop; oe.compute(). RuntimeError: ; Fatal Error: Atomic Number 53 unsupported by MBIS; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1657298395608/work/psi4/src/psi4/libmints/oeprop.cc on line: 1871; The most recent 5 function calls were:. psi::OEProp::compute_mbis_multipoles(bool); psi::OEProp::compute(). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""SCF_TYPE"", ""df""); core.set_global_option(""BASIS"", ""DZVP""); core.set_global_option(""E_CONVERGENCE"", 8); core.set_global_option(""D_CONVERGENCE"", 8); e, wfn = energy('scf', return_wfn=True); --> oeprop(wfn, ""MBIS_VOLUME_RATIOS"", 'MBIS_CHARGES', title='CH3I-dzvp'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Atomic Number 53 unsuppor",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2728:387,energy,energy,387,https://psicode.org,https://github.com/psi4/psi4/issues/2728,1,['energy'],['energy']
Energy Efficiency,"Hi,. The input file for the problem described below:. ```; molecule C6H6 {; 0 1; C 0.0 1.855 0.0; C 0.0 -1.855 0.0; C 1.6064771240201337 0.9275 0.0; C 1.6064771240201337 -0.9275 0.0; C -1.6064771240201337 0.9275 0.0; C -1.6064771240201337 -0.9275 0.0; H 0.0 3.289 0.0; H 0.0 -3.289 0.0; H 2.848357553047019 1.6445 0.0; H 2.848357553047019 -1.6445 0.0; H -2.848357553047019 1.6445 0.0; H -2.848357553047019 -1.6445 0.0; units au; }. set basis cc-pVDZ; set reference rhf; set e_convergence 1e-12; set d_convergence 1e-12; set ints_tolerance 0.0. optimize('b3lyp'); ```. When you run the geometry optimization in the /tmp folder, the geometry of the SCF doesn't get updated:. First SCF:. ```; Geometry (in Bohr), charge = 0, multiplicity = 1:. Center X Y Z ; ------------ ----------------- ----------------- -----------------; C -0.000000000000 1.855000000000 0.000000000000; C 0.000000000000 -1.855000000000 0.000000000000; C 1.606477124020 0.927500000000 0.000000000000; C 1.606477124020 -0.927500000000 0.000000000000; C -1.606477124020 0.927500000000 0.000000000000; C -1.606477124020 -0.927500000000 0.000000000000; H -0.000000000000 3.289000000000 0.000000000000; H 0.000000000000 -3.289000000000 0.000000000000; H 2.848357553047 1.644500000000 0.000000000000; H 2.848357553047 -1.644500000000 0.000000000000; H -2.848357553047 1.644500000000 0.000000000000; H -2.848357553047 -1.644500000000 0.000000000000; ```. At the end of optking:. ```; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); C -0.0000000000 0.9816237969 0.0000000000; C 0.0000000000 -0.9816237969 0.0000000000; C 0.8501111451 0.4908118984 0.0000000000; C 0.8501111451 -0.4908118984 0.0000000000; C -0.8501111451 0.4908118984 0.0000000000; C -0.8501111451 -0.4908118984 0.0000000000; H -0.0000000000 1.7404639720 0.0000000000; H 0.0000000000 -1.7404639720 -0.0000000000; H 1.5072860141 0.8702319860 0.0000000000; H 1.5072860141 -0.8702319860 0.0000000000; H -1.5072860141 0.8702",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/66:710,charge,charge,710,https://psicode.org,https://github.com/psi4/psi4/issues/66,1,['charge'],['charge']
Energy Efficiency,"Hi,. With Git: Rev {master} 81f120d the following input file:. ```; molecule chromium_dimer{; 0 1; symmetry d2h; Cr 0.0000 0.0000 0.0000; Cr 0.0000 0.0000 1.6788; }. set {; basis cc-pvdz. guess sad; scf_type pk; reference rhf; INTS_TOLERANCE 0.0; D_CONVERGENCE 1e-12; E_CONVERGENCE 1e-12; }. energy('scf'); ```. hangs for more than 1 hour on. ```; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.; ```. pyscf and molpro take only seconds (the total number of orbitals is 86). Best wishes,; Sebastian",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/156:292,energy,energy,292,https://psicode.org,https://github.com/psi4/psi4/issues/156,1,['energy'],['energy']
Energy Efficiency,"Hi,. we were recently reviving a PSI4 plugin that was used with an older version of PSI4. Now, we wanted to adapt it to the current development version and realized that the AOIntegralsIterator is hidden (?) in the library. Our fix was to add PSI_API to the class definition in `src/psi4/libmints/integral.h` . . However, for us, it would be easier if it would be accessible by default (mainly to use the conda install and avoid compilation every time). Is there a specific reason, why that class is excluded or hidden in the library? If no, we would be very grateful, if a developer would add it to the header file. . Thank you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2239:108,adapt,adapt,108,https://psicode.org,https://github.com/psi4/psi4/issues/2239,1,['adapt'],['adapt']
Energy Efficiency,"Hi,; I am just wondering if anyone could provide an example/instruction how to carry out (or if it is feasible to carry out) MRCI calculation using Psi4. In this paper (https://doi.org/10.1063/1.1867379), it sounded like that it was possible to carry out MRCI on Psi 3.2, but I couldn't find much information on the Psi4 manual (nor on the Psi3 manual) on how to do that calculation. I was able to obtain CASSCF energies and wavefunctions, and was going to just use the CASSCF wavefunction as the reference for MRCI calculation, but had little success in doing so. The followings are my code (python), trying to optimize the energy for the C state of the C2 molecule (which has two main configurations near its equilibrium bond length). The paper included above deals with the X, B, and B' state of C2, but those are not the states that I want. (I want the singlet C state). ## geometry; c2=psi4.geometry(""""""; 0 1; c ; c 1 1.25; symmetry d2h; """"""); ##. ## use the C-state main electron configuration as the reference for CASSCF; psi4.set_options({; 'basis': 'cc-pVdz',; 'reference': 'rohf',; 'docc': [2, 0, 0, 0, 0, 1, 0, 1],; 'socc': [0, 0, 0, 0, 0, 1, 1, 0],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'mcscf_r_convergence': 5.e-6; }). psi4.set_module_options('detci',{; 'num_roots': 1,; 'calc_s_squared': True; }). casscf_energy, casscf_wfn = psi4.energy('casscf', return_wfn=True). #the code works up to this point. ## my way of feeding the casscf_wfn for another round of CI, but it did not work at all; psi4.set_options({; 'wfn': 'detci',; 'guess': 'gwh',; 'basis': 'cc-pVDZ',; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'e_convergence': 10,; 'd_convergence': 10; }). thisenergy = psi4.energy('detci',ref_wfn=casscf_wfn). When I did the second round of CI, psi4 crashed. It got stuck at the ""Starting CI iterations"" part, with the error message ""Segmentation fault: 11"". I am quite new to Psi4, but hopefully I am ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907:625,energy,energy,625,https://psicode.org,https://github.com/psi4/psi4/issues/1907,1,['energy'],['energy']
Energy Efficiency,"Hi,; I am using the psi4/label/dev build from anaconda, and I noticed that the molden file produced by the following snippet does not write the [7F] line indicating spherical harmonic F-type basis functions to the molden file. [5D] and [9G] are there, so I'm assuming this isn't intentional. ```; import psi4. mol = psi4.geometry(""""""; N 0.0000000000 0.0000000000 0.548756750; N 0.0000000000 0.0000000000 -0.548756750; """"""). E, wfn = psi4.energy('scf/aug-cc-pvtz', return_wfn=True); psi4.molden(wfn, 'n2.molden'); ```; I'm not sure if this has been fixed elsewhere, but I didn't find it reported on here so I thought I would share. I have attached the molden file as well. [n2.molden.txt](https://github.com/psi4/psi4/files/6773734/n2.molden.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2238:438,energy,energy,438,https://psicode.org,https://github.com/psi4/psi4/issues/2238,1,['energy'],['energy']
Energy Efficiency,"Hi,; I try to do a bunch of DFT single point energy calculations of small fragments on the university HPC cluster with a custom basis set.; After the first 20 or so calculations ran smoothly, every subsequent one failed with:; ```. PSIO_ERROR: unit = 35, errval = 5; PSIO_ERROR: 5 (file not open or open call failed); PSIO_ERROR:; PSIO_ERROR: Check the location of your scratch directory which can be; PSIO_ERROR: specified via the $PSI_SCRATCH environment variable or in; PSIO_ERROR: the $HOME/.psi4rc file.; PSIO_ERROR:; PSIO_ERROR: Please note that the scratch directory must exist and be; PSIO_ERROR: writable by Psi4; ```; Thats one example input:; ```; molecule {; 0 1; N -1.4457680611716 -1.1047188295845 0.49148092386593; C -0.19168175766337 -0.75584211512691 0.20898275954952; S 1.16737932640644 -1.82766284403922 0.14616844519932; C 2.16597045357598 -0.42448441793899 -0.26698146976982; N 1.54724741904672 0.67798068286713 -0.34204940942266; C 0.21550144939676 0.55519535899526 -0.0839857520715; C -0.70195776564886 1.65045791061703 -0.10441352532731; O -1.89802765802088 1.54782198311403 0.1259571991072; H -2.11563998092643 -0.33690782979021 0.4823163098176; H -1.71164622110861 -2.0497008550553 0.69762302601465; H 3.21537348272138 -0.55453850454389 -0.43220307841028; H -0.24675068660743 2.6223994604856 -0.34875937387462. no_reorient; no_com; }. # Set the basis set; set {; basis sdzhf; }. # Compute the energy and return the wavefunction; E, wfn = energy('WB97X-D', return_wfn=True). # Save the wavefunction to a file; wfn.to_file(""mol.wfn""); ```; and thats the last portion of the out:; ```; ==> Integral Setup <==. Traceback (most recent call last):; File ""/software/all/PSI4/1.3.2-foss-2020b/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 38, in <module>; File ""/software/all/PSI4/1.3.2-foss-2020b/lib//python3.8/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3069:45,energy,energy,45,https://psicode.org,https://github.com/psi4/psi4/issues/3069,1,['energy'],['energy']
Energy Efficiency,"Hi,; I was trying the MRCC interface in Psi4 to run energy('mrccsd(t)_l') but I run into a PSIO_ERROR. Input. ```; memory 126 Gb; molecule complex {; 0 1; C 0.028824000 0.102541000 0.329511000; H -0.846717000 0.257672000 -0.295811000; C 1.368536000 0.016176000 0.003655000; H 1.872535000 0.082040000 -0.957212000; N -0.055760000 -0.031179000 1.697636000; C 1.178669000 -0.178253000 2.203240000; H 1.426085000 -0.303457000 3.252661000; N 2.052611000 -0.167236000 1.184832000; C 3.504230000 -0.205550000 1.365908000; H 3.698001000 -0.576769000 2.380482000; H 3.898020000 0.813550000 1.260411000; H 3.939232000 -0.884942000 0.619049000; C -1.256640000 0.100763000 2.523448000; H -1.529670000 1.162452000 2.578623000; H -1.007837000 -0.272600000 3.525198000; H -2.062908000 -0.500349000 2.079371000; F 1.181657000 2.676729000 1.439625000; B 1.518848000 2.859437000 2.791181000; F 1.689389000 4.189751000 3.137207000; F 0.482658000 2.259079000 3.612149000; F 2.731761000 2.111893000 3.070818000; C 1.992235000 1.241852000 8.156885000; H 1.485477000 1.176688000 9.116348000; C 3.332840000 1.154673000 7.834922000; H 4.206519000 0.999649000 8.462845000; N 1.311649000 1.424993000 6.973626000; C 2.188563000 1.435214000 5.957752000; H 1.944614000 1.560136000 4.907488000; N 3.421451000 1.288054000 6.467033000; C 4.624491000 1.154329000 5.644658000; H 4.896627000 0.092348000 5.590783000; H 4.378873000 1.527036000 4.641881000; H 5.430033000 1.755038000 6.090598000; C -0.139438000 1.464529000 6.788437000; H -0.534567000 0.445964000 6.893963000; H -0.329914000 1.835298000 5.773051000; H -0.575851000 2.145114000 7.533419000; F 2.193639000 -1.420051000 6.719505000; B 1.853598000 -1.602720000 5.368653000; F 1.684676000 -2.933106000 5.022169000; F 2.887295000 -1.000476000 4.545917000; F 0.639066000 -0.856861000 5.091564000; }; set globals {; basis aug-cc-pVDZ; scf_type direct; freeze_core True; guess sad; basis_guess 3-21G; }; energy('mrccsd(t)_l'); ```. End of output. ```; *** tstart() called on r3584;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/35:52,energy,energy,52,https://psicode.org,https://github.com/psi4/psi4/issues/35,1,['energy'],['energy']
Energy Efficiency,"Hi,; for odd cases where there is no electron in either alpha or beta block, sapt0 solver for UHF will result in segfault due to ```zero``` dimension passed to some of the procedures, e.g. ```C_DGEMM``` calls. minimal working example; ```Python; import psi4. psi4.set_memory(""1024 MB""); geo_string = """"""; 0 2; Li 0.000 0.000 -1.000; --; 0 2; H 0.000 0.000 +1.000. no_reorient; no_com; units angstrom; symmetry c1; """""".strip(). BASIS = ""aug-cc-pvdz""; REFERENCE = ""uhf""; BASIS_GUESS = ""3-21G""; GUESS = ""sad""; dimer = psi4.geometry(geo_string). psi4.set_options(; {; ""basis"": BASIS,; ""reference"": REFERENCE,; ""basis_guess"": BASIS_GUESS,; ""guess"": GUESS,; ""scf_type"": ""mem_df"",; ""e_convergence"": 1e-12,; ""d_convergence"": 1e-12,; }; ). psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); ```. result:; ```; Role: ORBITAL; Keyword: BASIS; atoms 1 entry LI line 35 file /home/filip/software/psi4-1.4rc/share/psi4/basis/3-21g.gbs ; atoms 2 entry H line 21 file /home/filip/software/psi4-1.4rc/share/psi4/basis/3-21g.gbs . ---------------------------------------------------------; SCF Castup computation ; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 976 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; Gh(LI) 0.000000000000 0.000000000000 -1.000000000000 7.016003436600; H 0.000000000000 0.000000000000 1.000000000000 1.007825032230. Running in c1 symmetry. Rotational constants: A = ************ B = 2.10095 C = 2.10095 [cm^-1]; Rotational constants: A = ************ B = 62984.77227 C = 62984.77227 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. S",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:736,energy,energy,736,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['energy'],['energy']
Energy Efficiency,"I am attempting run a frequency calculation with Psi4 (version 1.5) and Python 3.7.10. All other calculations (optimization, single point energy, etc.) work well. However, when I attempt to run a frequency calculation with the command `psi4.frequency(""B3LYP/cc-pVDZ"", molecule=molecule_xyz, return_wfn=True, dertype='gradient')`, I get the following error. From [what I've seen on Stack Overflow](https://stackoverflow.com/questions/69564817/typeerror-load-missing-1-required-positional-argument-loader-in-google-col), this may be an issue with psi4 compatibility. How can I navigate this issue? . ```; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); [<ipython-input-13-13c5f85efa27>](https://localhost:8080/#) in <module>(); 4 ; 5 psi4.set_output_file(F'{molecule_name}_frequency_analysis.dat', False); ----> 6 psi4.frequency(""B3LYP/cc-pVDZ"", molecule=molecule_xyz, return_wfn=True, dertype='gradient'); 7 correction_g = parse_free_energy(F'{molecule_name}_frequency_analysis.dat'); 8 print(""Correction G: "", correction_g). 21 frames; [/usr/local/lib/python3.7/site-packages/psi4/driver/driver.py](https://localhost:8080/#) in frequency(name, **kwargs); 1772 ; 1773 # Compute the hessian; -> 1774 H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs); 1775 ; 1776 # Project final frequencies?. [/usr/local/lib/python3.7/site-packages/psi4/driver/driver.py](https://localhost:8080/#) in hessian(name, **kwargs); 1493 # Check if this is a CBS extrapolation; 1494 elif gradient_type == ""cbs_gufunc"":; -> 1495 return driver_cbs._cbs_gufunc(hessian, name.lower(), **kwargs, ptype=""hessian""); 1496 elif gradient_type == ""cbs_wrapper"":; 1497 return driver_cbs.cbs(hessian, ""cbs"", **kwargs, ptype=""hessian""). [/usr/local/lib/python3.7/site-packages/psi4/driver/driver_cbs.py](https://localhost:8080/#) in _cbs_gufunc(func, total_method_name, **kwargs); 1963 optstash = p4util.OptionsState(['BASIS']); 1964 core.set_glob",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510:138,energy,energy,138,https://psicode.org,https://github.com/psi4/psi4/issues/2510,1,['energy'],['energy']
Energy Efficiency,"I am currently building a high throughput program to calculate various one electron properties of large sets of molecules. . I am using psi4 1.81 and interacting with the program via the python API. First I optimise the geometry using the QCEngine wrapper, and then run a single point calculation with psi4.energy() where I return the wfn object and run psi4.oeprop(wfn). I am currently using the PBE0/def2-TZVPPD with the DDX solvent model DDX-4.0 level of theory. However, I began noticing the calculation would hang at a certain point, regardless of the level of theory and usage of the ddx solvent model (but seemed to hang quicker with more expansive methods), where the calculation would indefinitely stop at this stage:. ```; ==> Primary Basis <==. Basis Set: DEF2-TZVPPD; Blend: DEF2-TZVPPD; Number of shells: 136; Number of basis functions: 358; Number of Cartesian functions: 398; Spherical Harmonics?: true; Max angular momentum: 3; ```. I suspected a memory leak so I logged with memory usage at each stage of the calculation with:. ```; def log_memory_usage():; process = psutil.Process(); print(f""Memory Usage: {process.memory_info().rss / 1024 ** 2} MB"", flush=False); ```. When applying this function to this section of my code:. ``` ; print('memory use before E wfn'); log_memory_usage() ; E, wfn = psi4.energy(f'{settings.method}/{settings.basis}', molecule = molecule_psi4, return_wfn = True); print('memory use after E wfn'); log_memory_usage() ; psi4.oeprop(wfn,""GRID_ESP"",""GRID_FIELD"",""MULLIKEN_CHARGES"", ""LOWDIN_CHARGES"", ""DIPOLE"",""QUADRUPOLE"", ""MBIS_CHARGES""); print('memory use after oeprop'); log_memory_usage() ; ``` ; The output to my file with the above logging was:. ```; memory use before E wfn; Memory Usage: 3715.3828125 MB; --; memory use after E wfn; Memory Usage: 3783.52734375 MB; --; memory use after oeprop; Memory Usage: 3802.50390625 MB; --; memory use before wfn interaction; Memory Usage: 3802.50390625 MB; memory use after wfn interaction; Memory Usage: 380",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3146:307,energy,energy,307,https://psicode.org,https://github.com/psi4/psi4/issues/3146,1,['energy'],['energy']
Energy Efficiency,"I am encountering a problem when doing CCSD(T)/aug-cc-pvtz single point calculations with ghost atoms.; Here is an example input python script:; ```; import psi4; geo = """"""; 1 1; N -0.319514960239 -0.379524306855 0.559765629138; C 0.352425639761 0.409233493145 -0.624276970862; H 0.896212339761 1.229129293145 -0.190264570862; H -0.369712060239 1.007481593145 -1.165777070862; H -0.938830632741 -1.202223388474 0.119295063837; H 0.486503344736 -0.886226229665 1.149670412527; H -0.828245898402 0.406267805382 1.174683175564; H 0.972884518932 -0.173541567396 -1.382567158105; @H 0.158794175371 0.181939104529 -0.283074336970; @H -0.134424730413 -0.162256050585 0.233613708927; """""". mol = psi4.geometry(geo); model = ""ccsd(t)/aug-cc-pvtz"". psi4.set_memory('13GB'). psi4.set_num_threads(8). psi4.core.set_output_file(""psi4_ccsdt.outp""). psi4.set_options({; }); e = psi4.energy(model, molecule=mol). print(e); ```. The SCF converges, but then the calculation crashes, with the following output at the end of the log file (I have attached the full log file to the issue.):; ```; Wfn Parameters:; --------------------; Wavefunction = CCSD_T; Number of irreps = 1; Number of MOs = 275; Number of active MOs = 275; AO-Basis = NONE; Semicanonical = false; Reference = RHF; Print Level = 1. IRREP # MOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; A 275 0 9 0 266 0; Transforming integrals...; IWL integrals will be deleted.; (OO|OO)...; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Constructing frozen core operators; Row and column block dimensions of A; (n = 1): 275 ; (n = 1): 275 ; Row and column block dimensions of B; (n = 1): 276 ; (n = 1): 275 ; Row and column block dimensions of C; (n = 1): 275 ; (n = 1): 275 ; Asym: 0, Bsym: 0, Csym: 0; Mismatch in index Ha = 0; ```. Additionally, the following error message is given:; ```; Traceback (most recent call last):; File ""/oasis/tscc/scratch/ebullvul/projects/POPC/timi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2916:867,energy,energy,867,https://psicode.org,https://github.com/psi4/psi4/issues/2916,1,['energy'],['energy']
Energy Efficiency,"I am getting an error in Psi4 1.5 that I believe is a bug. Here is a minimal script to reproduce it. ```python; import psi4; psi4.set_options({'reference': 'uhf', 'stability_analysis': 'follow'}); mol = psi4.geometry(""""""; 0 1; O; """""");; psi4.energy('wB97M-D3BJ/def2-TZVPPD', molecule=mol); ```. It throws the exception. ```; psi4.driver.p4util.exceptions.ValidationError: Stability analysis root following is only available for UHF; ```. Since the script does use UHF, the error doesn't make sense.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2577:242,energy,energy,242,https://psicode.org,https://github.com/psi4/psi4/issues/2577,1,['energy'],['energy']
Energy Efficiency,"I am having some trouble with test case simint-scf5 failing, specifically in the singlet CUKS PK case. In principle, my changes should not have affected this test case, and so I wonder if it is a problem with the test case. I recall that at one time we had removed testing of CUKS because we found it to be numerically unstable and Rob wasn't able to remove the numerical instability. But we decided to leave in CUKS as a feature because it worked most of the time and therefore could be helpful to users. This particular test case is a bit strange ... we are testing O2 for a singlet with CUKS? While one *can* run CUKS on a singlet, this seems like a really odd thing to do... What seems to be happening is that the guess orbitals are core Hamiltonian, and they are high-spin open-shell. This being the case, the CUHF runs and happily leaves the computation high-spin open-shell. Then obviously the triplet state obtained has a different energy than the singlet state energy that is being compared. I am not sure why we are getting a high-spin open-shell guess, since the computation knows it's a singlet. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE. ... Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ]. @CUHF iter 1: -129.99407460698782 -1.29994e+02 3.58550e-01; @CUHF iter 2: -138.94369344094056 -8.94962e+00 1.91667e-01 DIIS; @CUHF iter 3: -149.19229734982372 -1.02486e+01 5.23276e-02 DIIS; @CUHF iter 4: -149.61401801756168 -4.21721e-01 8.25602e-03 DIIS; @CUHF iter 5: -149.62784456434520 -1.38265e-02 7.20728e-04 DIIS; @CUHF iter 6: -149.62803800931584 -1.93445e-04 1.87787e-04 DIIS; @CUHF iter 7: -149.62804359068420 -5.58137e-06 2.42248e-05 DIIS; @CUHF iter 8: -149.62804290255499 6.88129e-07 3.86408e-06 DIIS; @CUHF iter 9: -149.62804316316681 -2.60612e-07 2.79748e-07",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/738:940,energy,energy,940,https://psicode.org,https://github.com/psi4/psi4/issues/738,2,['energy'],['energy']
Energy Efficiency,"I am just wondering whether this composite ab initio method is available in PSI4?. If I give energy('ccCA-PS3') for a molecule then; from the output error message I recognize that this keyword is not available. . psi4.driver.p4util.exceptions.ValidationError: Energy method ""ccca-ps3"" is not available. Either I maybe making some mistakes or if you could share some sample input file related; to this composite method then it would be helpful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2157:93,energy,energy,93,https://psicode.org,https://github.com/psi4/psi4/issues/2157,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"I am new to Psi4 and quantum chemistry in general. The [PsiAPI tutorial](https://psicode.org/psi4manual/master/psiapi.html) is helpful in getting started, but doesn't mention use of `psi4.core.clean()`. I can't find any mention of this function in the docs, except [here](https://psicode.org/psi4manual/master/api/psi4.core.clean.html). A newbie like me may try to run two calculations in series. In my case, I got:; ```; Traceback (most recent call last):; File ""test.py"", line 47, in <module>; h2oi = energyFromGeometryFile('geometries/01.xyz', method=""ccsd""); File ""test.py"", line 27, in energyFromGeometryFile; return calculateEnergy(text, method, basis); File ""test.py"", line 12, in calculateEnergy; e = psi4.energy(method + '/' + basis); File ""/home/ubuntu/build/build/stage/lib/psi4/driver/driver.py"", line 525, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/ubuntu/build/build/stage/lib/psi4/driver/procrouting/proc.py"", line 871, in select_ccsd; return func(name, **kwargs); File ""/home/ubuntu/build/build/stage/lib/psi4/driver/procrouting/proc.py"", line 2894, in run_ccenergy; ref_wfn = scf_helper(name, **kwargs) # C1 certified; File ""/home/ubuntu/build/build/stage/lib/psi4/driver/procrouting/proc.py"", line 1887, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/ubuntu/build/build/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 82, in scf_compute_energy; self.initialize(); File ""/home/ubuntu/build/build/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 197, in scf_initialize; self.form_H(); RuntimeError: ; Fatal Error: PSIO_ERROR: 18 (Incorrect block end address). Practical advice: This error is probably disk related. First, check that your scratch isn’t full.; Second, make sure that you’re setting scratch (""psi4 -s"" or ""export PSI_SCRATCH"") rather than letting it ; default to /tmp. Third, run the job again to see if the error is reproducible.; If it persists, finally, file a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3164:503,energy,energyFromGeometryFile,503,https://psicode.org,https://github.com/psi4/psi4/issues/3164,5,['energy'],"['energy', 'energyFromGeometryFile']"
Energy Efficiency,"I am seeing large differences in wB97X-D3BJ energy between 1.4.0 and 1.3.2, and between different 1.4.0 installations. It seems that installing 1.4.0 with `-c anaconda` can cause the differences between 1.4.0 installations, possibly because it replaces the default linear algebra libraries with MKL versions. Such an installation runs 50% faster, but also gives wrong energies in some situations, sometimes by more than a Hartree. I've only seen the problem with clusters and large basis sets, which suggests it's a numerical issue. I've tested PBE, M06-2X, and wB97X-D3BJ, and so far it only appears in wB97X-D3BJ. Also, the error goes away if less RAM is provided (say, 10 GB instead of 32 GB). This suggests it may be related to the new ability of Psi4 1.4.0 to do in-core omega integrals (https://github.com/psi4/psi4/pull/1749). Working env: `conda create --name psi4_v1.4.0 python=3.8 psi4 psi4-rt -c psi4 -y`. Broken env: `conda create --name psi4_v1.4.0_mkl python=3.8 psi4 psi4-rt -c psi4 -c anaconda -y`. Example script: https://drive.google.com/file/d/1c0wZO47h9ooRXQMzTW9eETLWozo4MT_O/view?usp=sharing. To reproduce: install psi4 via conda with `-c anaconda` as shown, activate the env, then run the provided script `python psi4_1.4.0_omega_issue.py`. The energy should be approximately -1965.2319, but will instead give something like -1963.3023.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2279:44,energy,energy,44,https://psicode.org,https://github.com/psi4/psi4/issues/2279,2,['energy'],['energy']
Energy Efficiency,"I am trying to calculate DF-MP2 counterpoise-corrected energies for some dimers.; PSI4 gives some weird results for aug-cc-pvtz and aug-cc-pvqz (while all seems well for aug-cc-pvdz). First I provide the results for the benzene-benzene dimer.; ![benzene_benzene](https://cloud.githubusercontent.com/assets/4300354/16049263/4eba59cc-3257-11e6-9fb4-7270fba551ed.png); I plot 4 points of the dissociation curve, show both HF and DF-MP2 interaction energies for the three basis sets mentioned earlier and compare with MOLPRO. Here everything seems to be perfectly fine. However when I do exactly the same for the boroxine dimer, things look different:; ![boroxine_boroxine_rot60](https://cloud.githubusercontent.com/assets/4300354/16049322/92511392-3257-11e6-9e03-9e2922fe86e6.png); Clearly PSI4 produces some weird results for the DF-MP2 energy in the case of aug-cc-pvtz and aug-cc-pvqz.; I attach the input/output for one case where PSI4 does something weird. (Note that you can skip the CC part to reproduce the problem). [cbs.in.txt](https://github.com/psi4/psi4/files/314339/cbs.in.txt); [cbs.out.txt](https://github.com/psi4/psi4/files/314340/cbs.out.txt). My PSI4 version is Git: Rev {master} e4070d002474257",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/408:835,energy,energy,835,https://psicode.org,https://github.com/psi4/psi4/issues/408,1,['energy'],['energy']
Energy Efficiency,"I am trying to run Psi4 on [Summit](https://docs.olcf.ornl.gov/systems/summit_user_guide.html) and as there are no conda builds for `ppc64le`, I had to manually compile it on Summit. When running `ωB97M-D3BJ/def2-TZVPPD` for an Arginine molecule, I get vastly different energies in the SCF steps locally and final converge energy and gradients. I have attached the Psi4 output files for both the local run and the one on Summit and I was hoping to get some advice on what could be going on here. Also, the run time on Summit takes incredibly long (6 hours) vs about 5 minutes on my laptop, even with 128 threads and 512GB of RAM allocated on a single node calculation. Any idea why this might be the case?. [Arginine_output_local.txt](https://github.com/user-attachments/files/17094043/Arginine_output_local.txt); [Arginine_output_summit.txt](https://github.com/user-attachments/files/17094044/Arginine_output_summit.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223:323,energy,energy,323,https://psicode.org,https://github.com/psi4/psi4/issues/3223,2,"['allocate', 'energy']","['allocated', 'energy']"
Energy Efficiency,"I and my colleagues are trying to transition into using JSON in- and output files for Psi4 to add another layer of structure to our database. We understand that this is a work in progress, but I can't find any examples of what would work for optimization and/or frequency calculations in the examples dir (https://github.com/psi4/psi4/tree/master/tests/json). I tried changing one of the example input files to adapt it to our own type of calculations, but I just get errors while running it using the --qcschema flag as I can't seem to get the structure of the JSON file right. Is there an unfinished guide on how to create these JSON files?. Let say I have a non-JSON file that looks like the following:; ```; molecule mol_water {; 0 1; O 0.000000000 0.000000000 0.117000000; H 0.000000000 0.763400000 -0.468100000; H 0.000000000 -0.763400000 -0.468100000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(25000000000). try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'). E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. How would it be expressed as a valid JSON file?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2117:411,adapt,adapt,411,https://psicode.org,https://github.com/psi4/psi4/issues/2117,1,['adapt'],['adapt']
Energy Efficiency,"I believe that the issue https://github.com/psi4/psi4/issues/2238 was misleading. When I produce a Molden file in self-compiled Psi4 1.6 using this code; ```; molecule {; 0 1; He; }. set basis cc-pVTZ. [E, wfn] = energy('scf', return_wfn=True). wfn.write_molden('He.molden'); ```; the flags written to the file are; ```; [5D]; [7F]; [9G]; ```; However, this seems to be in conflict with the [Molden format specification](https://www.theochem.ru.nl/molden/molden_format.html), where `[7F]` means ""Cartesian d-functions and spherical f-functions"". Also, the *HISTORY* file from Molden 7.1 distribution contains the following summary, dated to Molden 4.1:; ```; - default is 6D and 10F; - [5D7F] means 5D and 7F; - [5D10F] means 5D and 10F; - [7F] means 6D and 7F. for backwards compatibility, [5D] still means 5D and 7F.; ```; See also this excerpt from Molden 7.1, subroutine `prtmold` (output of a Molden file from Molden):; ```fortran; if (ido5d.eq.1.and.ido7f.eq.1) then; write(iun3,'(a)') '[5D7F]'; elseif (ido5d.eq.1.and.ido7f.eq.0) then; write(iun3,'(a)') '[5D10F]'; elseif (ido5d.eq.0.and.ido7f.eq.1) then; write(iun3,'(a)') '[7F]'; elseif (ido9g.eq.1) then; write(iun3,'(a)') '[9G]'; endif; ```; and the subroutine `rdmodd` (input of a Molden file into Molden):; ```fortran; call srchmf(line,'[5D',istat); if (istat.eq.1) then; if (icdex(line,'[5D]').ne.0.or.; & icdex(line,'[5D7F]').ne.0) then; ido5d = 1; ido7f = 1; elseif (icdex(line,'[5D10F]').ne.0) then; ido5d = 1; endif; endif; call rewmf; call srchmf(line,'[7F]',istat); if (istat.eq.1) ido7f = 1; call rewmf; call srchmf(line,'[9G]',istat); if (istat.eq.1) ido9g = 1. ```; To sum up, it appears to me that a correct Molden file; - no longer uses `[5D]` in the first place,; - uses `[7F]` to mean ""Cartesian d-functions, spherical f-functions"" and; - uses `[5D7F]` and `[5D10F]` for spherical d-functions and Cartesian or spherical f-functions, respectively. When I use the legacy writer; ```; molden(wfn, 'He.molden'); ```; the output ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2612:213,energy,energy,213,https://psicode.org,https://github.com/psi4/psi4/issues/2612,1,['energy'],['energy']
Energy Efficiency,"I believe we have had this problem in the past. Take a symmetric molecule who's optimal wavefunction should contain less symmetry:. ```python; import numpy as np. mol = psi4.geometry(""""""; 0 1; C 0.0 0.0 0.673055; C 0.0 0.0 -0.673055; H 0.0 0.934981 1.246807; H 0.0 -0.934981 1.246807; H 0.934981 0.0 -1.246807; H -0.934981 0.0 -1.246807; symmetry c1; """"""). # Set reference and guess.; psi4.set_options({; ""reference"": ""rhf"",; ""guess"": ""sad"",; ""basis"": ""DZP"",; ""soscf"": ""true"",; # ""sad_frac_occ"": ""true""; }). e_scf = energy('scf'); if np.allclose(e_scf, -77.87781349420317):; print(""Found non-symmetric minima! Success!""); elif np.allclose(e_scf, -77.84789770426966):; print(""Found symmetric minima... failure.""); else:; print(""You found something... wrong.""); ```. The `-77.847` result should be found when the molecule is constrained to symmetry. However, without that constraint there is a lower SCF result to be found. The kicker is even without the symmetry restraint (computation in `c1`) we fairly consistently end up with a symmetric wavefunction. Any ideas on how to avoid this?. Note 1: The stability analysis is showing that it is indeed finding the wrong answer and there are negative eigenvalues present. We should be able to follow these once the py-scf iterations are finished. Note 2: This is not deterministic for which result we land in (whoo!). Note 3: Moving an atom out of place by 1e-14 or so seems to ensure we find the correct energy. Really any noise lets the diagonalizer break out of its self-imposed symmetry constraints.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875:516,energy,energy,516,https://psicode.org,https://github.com/psi4/psi4/issues/875,2,['energy'],['energy']
Energy Efficiency,"I figure this was probably caught already, but I thought I should submit a report just in case. I was running some test calculations in psi4 (v 0.4.0, Ubuntu) and I got the following error while trying to calculate Mulliken charges:. ```; [Screen output]. Traceback (most recent call last):; File ""<string>"", line 58, in <module>; File ""/home/kratz/bin/miniconda/share/psi4/python/p4util/util.py"", line 41, in oeprop; oe = psi4.OEProp(wfn); Boost.Python.ArgumentError: Python argument types in; OEProp.__init__(OEProp, str); did not match C++ signature:; __init__(P7_object, N5boost10shared_ptrIN3psi12WavefunctionEEE); ```. The DFT calculation that ran before the Mulliken charges completed. Just the oeprop command failed. This did not happen with an older copy on a different computer (PSI4 v 0.3.593, CentOS). As I was typing this report I tried to reinstall psi4 from conda on my CentOS machine, and I got a failure during the SAPT0 test calculations as well:. ```; [Conda output]. Report problems at http://forum.psicode.org/t/report-conda-update-psi4-oddities-here/32. Traceback (most recent call last):; File ""<string>"", line 36, in <module>; File ""/wsu/home/ft/ft08/ft0805/work/exec/miniconda/miniconda/pkgs/psi4-0.3.593-py27_gab46761/share/psi4/python/driver.py"", line 647, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/wsu/home/ft/ft08/ft0805/work/exec/miniconda/miniconda/pkgs/psi4-0.3.593-py27_gab46761/share/psi4/python/proc.py"", line 3072, in run_sapt; e_dimer = scf_helper('RHF', **kwargs); File ""/wsu/home/ft/ft08/ft0805/work/exec/miniconda/miniconda/pkgs/psi4-0.3.593-py27_gab46761/share/psi4/python/proc.py"", line 1972, in scf_helper; e_scf = psi4.scf(precallback, postcallback); Boost.Python.ArgumentError: Python argument types in; psi4.scf(NoneType, NoneType); did not match C++ signature:; scf(N5boost10shared_ptrIN3psi12WavefunctionEEE, P7_object, P7_object); ```. -kratz",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240:224,charge,charges,224,https://psicode.org,https://github.com/psi4/psi4/issues/240,4,"['charge', 'energy']","['charges', 'energy']"
Energy Efficiency,"I found that in version=1.5 MintsHelper.ao_eri() does not work for multiple basis sets, such as MintsHelper.ao_eri(BasisA, BasisA, BasisB, BasisB).; In 1.5, I ran this:; ```python; print(""python=%s, \npsi4=%s""%(sys.version, psi4.__version__)); H = psi4.geometry(; """"""; nocom; noreorient; H -1 0 0; units bohr; symmetry c1""""""; ); O = psi4.geometry(; """"""; nocom; noreorient; O 1 0 0; units bohr; symmetry c1""""""; ); psi4.set_options({""reference"": ""uhf""}); EH, wfnH = psi4.energy(""scf/sto-3g"", molecule=H, return_wfn=True); EO, wfnO = psi4.energy(""scf/sto-3g"", molecule=O, return_wfn=True); mints = psi4.core.MintsHelper(wfnH.basisset()); aoeriHO = np.array(mints.ao_eri(wfnO.basisset(), wfnO.basisset(), wfnH.basisset(), wfnH.basisset())); aoeriHO.shape; ```; ==>; ```; python=3.8.12 (default, Oct 12 2021, 13:49:34) ; [GCC 7.5.0], ; psi4=1.5; RuntimeError Traceback (most recent call last); /tmp/ipykernel_845/2933828549.py in <module>; ----> 1 aoeriHO = np.array(mints.ao_eri(wfnO.basisset(), wfnO.basisset(), wfnH.basisset(), wfnH.basisset())); 2 aoeriHO.shape. RuntimeError: ; Fatal Error: Unexpected integral type (aa|bb) in setup_sieve(); Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1638121835567/work/psi4/src/psi4/libmints/twobody.cc on line: 249; The most recent 5 function calls were:. psi::TwoBodyAOInt::setup_sieve(); psi::IntegralFactory::eri(int, bool, bool); ```; But in 1.3.2, the same code gave me; ```; python=3.7.11 (default, Jul 27 2021, 14:32:16) ; [GCC 7.5.0], ; psi4=1.3.2; (5, 5, 1, 1); ```; I am not sure if this was an issue with my python or my WSL2 or psi4. Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2439:469,energy,energy,469,https://psicode.org,https://github.com/psi4/psi4/issues/2439,2,['energy'],['energy']
Energy Efficiency,"I get a segfault when doing an upcast between custom basis sets, while everything works fine when doing an upcast between built-in basis sets. I've been poking around in GDB, but I haven't figured out the issue yet. Here's an example:. ```; molecule {; O ; H 1 0.96; H 1 0.96 2 104.5; }. basis low {; assign sto-3g; }; basis high {; assign cc-pvdz; }. core.IO.set_default_namespace(""low""); set basis low; energy('hf'). core.IO.set_default_namespace('high'); core.IO.change_file_namespace(180, 'low', 'high'); set guess read; set basis high; energy('hf'). ```. Merely replacing `set basis low` with `set basis sto-3g` and `set basis high` with `set basis cc-pvdz` fixes the segfault.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/719:405,energy,energy,405,https://psicode.org,https://github.com/psi4/psi4/issues/719,2,['energy'],['energy']
Energy Efficiency,"I get the following output with request to submit a bug report:; ```; Threads set to 4 by Python driver. Memory set to 11.176 GiB by Python driver.; Traceback (most recent call last):; File ""/var/lib/slurm/slurmd/job23834122/slurm_script"", line 16, in <module>; myener = psi4.energy(""WB97X/aug-cc-pvqz"", molecule=geom); File ""/home/x_davva/wd/miniconda3/envs/ACT/lib/python3.9/site-packages/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/x_davva/wd/miniconda3/envs/ACT/lib/python3.9/site-packages/psi4/driver/procrouting/proc.py"", line 2455, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/x_davva/wd/miniconda3/envs/ACT/lib/python3.9/site-packages/psi4/driver/procrouting/proc.py"", line 1670, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/x_davva/wd/miniconda3/envs/ACT/lib/python3.9/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); File ""/home/x_davva/wd/miniconda3/envs/ACT/lib/python3.9/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 429, in scf_iterate; self.form_C(); RuntimeError: ; Fatal Error: Count 8 alpha electrons, expected 7.; This is a bug. Please file a report.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1657298395608/work/psi4/src/psi4/libscf_solver/hf.cc on line: 482; ```; from this input; ```; #!/usr/bin/env python3; import psi4 as psi4; psi4.core.set_num_threads(4); psi4.set_memory(12000000000); psi4.core.set_output_file('Al.out', False); psi4_io = psi4.core.IOManager.shared_object(); psi4_io.set_default_path('/tmp/'); geometry= """"""; 0 2; Al 0 0 0; """"""; psi4.set_options({'reference': 'uhf'}); geom = psi4.geometry(geometry); myener = psi4.energy(""WB97X/aug-cc-pvqz"", molecule=geom); with open('atomization_energy.dat', 'w') as aefile:; aefile.write('Atomization energy %g\n' % myener); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2858:276,energy,energy,276,https://psicode.org,https://github.com/psi4/psi4/issues/2858,5,['energy'],['energy']
Energy Efficiency,"I get this error:; > OMP: Info #270: omp_set_nested routine deprecated, please use omp_set_max_active_levels instead. Using this as an input:. ```; molecule {; He 0 0 0; --; He 2 0 0; }; import snsmp2; energy('sns-mp2'); ```. I have installed it from conda channel of psi4:. > conda create -n psi4 psi4 snsmp2 -c psi4. I also did. > conda update psi4 -c psi4. as advised on the [psi4 website](http://www.psicode.org/psi4manual/master/build_obtaining.html#faq-binarypackage) . Package versions:; ```; >>> import psi4; >>> psi4.__version__; '1.3.2'; >>> snsmp2.__version__; '1.0.1.dev24'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1820:202,energy,energy,202,https://psicode.org,https://github.com/psi4/psi4/issues/1820,1,['energy'],['energy']
Energy Efficiency,"I have a dimer complex in z-matrix form that I am calculating the interaction energy. I have two scripts, one is the an object that lives inside my software and the other is an external script that I use for testing the configurations for psi4. . When I run the python on the external script, the function returns the total energy:. ```python; dimer_energy = psi4.energy(; theory,; molecule=dimer2,; bsse='cp'; ); ```; However, if I run this programmatically, although the same result in terms of the output file but the dimer energy returned is the interaction energy. . I am running this on `hf/6-31g*' so not SAPT. Is there something that I am missing where psi4 decides to return the interaction energy over the dimer energy and why would I see this inconsistency in my code. Kind of lost on this one.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2730:78,energy,energy,78,https://psicode.org,https://github.com/psi4/psi4/issues/2730,7,['energy'],['energy']
Energy Efficiency,"I have been modifying my gdma code so that it can handle h functions. It's a fairly straightforward change, but I found that I got errors in the multipoles when there were h functions in the basis. In particular, the total charge was always nonzero. Repeated checks found no errors in the gdma code. Finally I found that there is a bug in the treatment of h functions in Psi4, or at least an inconsistency with d, f and g. If the normalization factor for z^2 exp(-zeta r^2) is N, then the factor for xy exp(-zeta r^2) is \sqrt(3)N -- it needs the extra sqrt(3). Similarly z^5, xz^4, x^2z^3, xyz^3 and x^2y^2z cartesian h functions all need different normalization factors. If the gdma code takes account of these as it does for d, f and g, I get the errors. If however I treat them all as having the same normalization factor as z^5, I get sensible results -- total charges are now zero. Whether the results are correct, however, is doubtful, because the normalization error probably affects the wavefunction. Using an fchk file from Gaussian16 gives the same errors. Was the Psi4 fchk code derived from gaussian?. My revised version of gdma is available at https://git.uis.cam.ac.uk/x/ch-stone/u/ajs1/gdma.git",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574:223,charge,charge,223,https://psicode.org,https://github.com/psi4/psi4/issues/1574,2,['charge'],"['charge', 'charges']"
Energy Efficiency,"I have did a quick research and I couldn't find anything relevant. Are you planning on supporting Windows? Without using Windows PowerShell. Thanks,; João",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933:129,Power,PowerShell,129,https://psicode.org,https://github.com/psi4/psi4/issues/933,1,['Power'],['PowerShell']
Energy Efficiency,"I have recently noticed a weird problem for a handful of Psi4 output. Psi4 occasionally terminates the output file with two consecutive ""Buy a developer a beer!"" statements as you can see here:. ```; Psi4 stopped on: Sunday, 12 August 2018 05:55PM; Psi4 wall time for execution: 0:00:50.18. *** Psi4 exiting successfully. Buy a developer a beer!; ecution: 0:00:50.91. *** Psi4 exiting successfully. Buy a developer a beer!; ```. The worst output was that one time I got two summaries for CBS energies at the end of the file, and the results were different. ```; ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / aug-cc-pvqz -1007.18544968 xtpl_highest_1; corl mp2 / aug-cc-pv[tq]z -3.93422466 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pvdz -0.15577370 xtpl_highest_1; total CBS -1011.27544804; ---------------------------------------------------------------------------------------------------------; => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1, 3, 5, 13, 15, 17 entry N line 110 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 2, 4, 6, 14, 16, 18 entry C line 90 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 7, 9, 11, 19, 21, 23 entry O line 130 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs; atoms 8, 10, 12, 20, 22, 24 entry H line 15 file /theoryfs2/ds/cdsgroup/psi4-install/psi4-group-multiarch-c12/share/psi4/basis/def2-svp.gbs. Psi4 stopped on: Tuesday, 18 September 2018 03:03PM; Psi4 wall time for execution: 1 day, 4:22:27.10. *** Psi4 exiting successfully. Buy a developer a beer!; ----------------------------------------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1279:690,Energy,Energy,690,https://psicode.org,https://github.com/psi4/psi4/issues/1279,1,['Energy'],['Energy']
Energy Efficiency,"I have seen folks try the following several times:. ```; e, wfn = energy('MP2', return_wfn=True); oeprop(wfn); ```. which will return the HF properties as MP2 densities are costly to compute, the same is true with CCSD and others. To help alleviate confusion I would add a few lines [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L866) in the OEProp compute call that would highlight the name of the density matrix. A line like the following could be appropriate:. ```; if (title_ == """"){; outfile->Printf(""OEProp: No title given, name of density matrix used for the following properties is %s\n"", Da_so_->name().c_str());; }; ```. This should give folks some hint that things may not be as they appear.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1055:66,energy,energy,66,https://psicode.org,https://github.com/psi4/psi4/issues/1055,1,['energy'],['energy']
Energy Efficiency,"I have seen the same result in both v1.7 and v1.9. Below is my input:. ```; molecule {; C 43.447574615 4.402106285 18.442501068; Cl 43.539905548 3.305690527 19.834751129; H 43.777095795 3.891677380 17.581066132; H 42.397209167 4.711723328 18.365312576; H 44.039062500 5.304682255 18.653499603; Na 43.090690613 5.591814041 21.935888290; 1 1; }; set print 2; set basis def2-TZVPPD; set gradient_write on; G, wfn = gradient(""WB97M-D3BJ"", return_wfn=True); wfn.energy(); wfn.gradient().print_out(); ```. Output:; [psi 1.7](https://github.com/psi4/psi4/files/15100254/dimer_0001.txt); [psi 1.9](https://github.com/psi4/psi4/files/15100255/test.txt). Output gradient:. ```; -Total Gradient:; Atom X Y Z; ------ ----------------- ----------------- -----------------; 1 0.017612153536 -0.030226835448 -0.016364611072; 2 -0.001951550496 0.000510350455 -0.012196966883; 3 -0.006845878529 0.008632172968 0.016317898785; 4 -0.007830360016 0.005006082123 0.005314350686; 5 -0.000151463183 0.010716793785 0.004937148905; 6 -0.000804674189 0.005151834777 0.001952651442; ```. The total gradient of the geometry is (in Hatree/Bohr):. ```; 0.000028227123 -0.00020960134 -0.000039528137; ```. This seems quite large! When converted to kcal/mol/A, it's almost 0.25 kcal/mol/A. I am training a machine learning potential, which needs data in high accuracy. To find the source, I set `set print 2`, and found the source is XC Gradient. Other parts are good. ```; -XC Gradient: ; Atom X Y Z ; ------ ----------------- ----------------- ----------------- ; 1 0.023413713156 -0.034618654043 0.016561407807 ; 2 0.004295152287 -0.082574073389 0.110502690803 ; 3 0.057058934205 -0.084984859487 -0.155578605215 ; 4 -0.165454990449 0.054800035457 -0.007744542989 ; 5 0.081560548449 0.141475784522 0.033034928588 ; 6 -0.000845130524 0.005692165589 0.003184592861 ; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3161:457,energy,energy,457,https://psicode.org,https://github.com/psi4/psi4/issues/3161,1,['energy'],['energy']
Energy Efficiency,"I have situations where I want to manually specify the number of frozen core orbitals using `num_frozen_docc`, do some work, then calculate some MBIS properties including the volume ratios. The latter causes psi4 to automatically calculate the free-atom volumes in the same method as the last-run calculation (in my case, `wb97m-d3bj`) and inherits all the settings... including `num_frozen_docc`. I can insert a `set num_frozen_docc 0; set freeze_core true` right before the `oeprop(wfn, 'MULLIKEN_CHARGES')` call and make things go away, but what worries me is just _how_ things fail. Well, sometimes things are in fact _perfectly fine_. Other times, psi4 **segfaults**. The behavior depends on _just how large_ `num_frozen_docc` is -- I think if it ends up exceeding some other quality dependent on the calculation, things go belly-up. Here's the relevant line from a coredump. ```; #0 0x00002b4f362ef958 in psi::scf::HF::compute_fcpi (this=0x223c06c0) at [snip]/psi4/psi4/src/psi4/libscf_solver/hf.cc:830; 830 for (int i = 0; i < nfzc; ++i) frzcpi_[pairs[i].second]++;; ```. And here's a minimum working example of the issue that MBIS_VOLUME_RATIOS runs into, as a standalone calc:. ```; set num_frozen_docc 20; set basis def2-tzvppd; set reference uks; molecule mol {; 0 2; H 0 0 0; units angstrom; }; E, wf = energy('wb97m-d3bj',return_wfn=True,); ```. If you flip `num_frozen_docc` to 18, _it works_. (19 works for me on some machines, not on others -- eek!). In all cases I'm invoking psi4 the same way: `psi4 -n1 -i run.in --memory 500MB`. . I'm building off of 1.6.X, using icc/2020.2-108-02c7; I don't _think_ I have anything ""special"" set in my compile environment besides `buildtype=RelWithDebInfo`. I didn't mess with any optimization flags, for sure.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631:1315,energy,energy,1315,https://psicode.org,https://github.com/psi4/psi4/issues/2631,1,['energy'],['energy']
Energy Efficiency,"I have tried to run the following input:. molecule no3 {; 0 2; N -0.000000289178 0.000000000000 -0.107371527464; O 0.000000787144 0.000000000000 1.265621161075; O 1.089067344013 0.000000000000 -0.585809671624; O -1.089067877991 0.000000000000 -0.585810897335; symmetry c1; }. set globals {; basis cc-pvtz; #df_basis_scf cc-pvtz-jkfit; #df_basis_cc cc-pvtz-ri; reference uhf; scf_type df; guess gwh; e_convergence 8; d_convergence 6; mo_maxiter 400; cepa_type df; qc_module occ; }; energy('cepa(0)'). Then, I get the following error:. PsiException: Error: cepa(0) requires ""reference rhf"". An error has occurred Py-side; Traceback:; <class 'p4xcpt.ValidationError'>: Error: cepa(0) requires ""reference rhf"".: File ""<string>"", line 37, in <module>. File ""/usr/local/programs/psi4intel/share/psi/python/driver.py"", line 629, in energy; procedures['energy'][lowername](lowername, **kwargs). File ""/usr/local/programs/psi4intel/share/psi/python/proc.py"", line 3783, in run_cepa; raise ValidationError(""Error: %s requires \""reference rhf\""."" % lowername). Something should be wrong in proc.py or I missed something. @loriab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/273:481,energy,energy,481,https://psicode.org,https://github.com/psi4/psi4/issues/273,3,['energy'],['energy']
Energy Efficiency,"I have two versions of Psi4: one compiled with the Intel compiler (18.0.1 20171018) and linked with MKL, the other compiled with GCC 6.4.0 and linked with system BLAS/LAPACK. Both versions use Python 3.6.4. The following input script to run MRCC through Psi4 runs fine with both:; ```python; import psi4. psi4.set_output_file('uhf_example_mrcc_h2o.dat', False); psi4.set_num_threads(1). R_ref = 0.96735; theta_ref = 102.799. mol_string = """"""; symmetry c2v; 0 1; O; H 1 {R}; H 1 {R} 2 {theta}; units angstrom; """""". basis = 'jun-cc-pVDZ'; mol = psi4.geometry(mol_string.format(R=2.0*R_ref, theta=theta_ref), name='h2o'); molname = mol.name(); psi4.set_options({; 'SCF_TYPE': 'PK',; 'BASIS': basis,; 'E_CONVERGENCE': 1e-09,; 'D_CONVERGENCE': 1e-09,; 'REFERENCE': 'UHF',; 'STABILITY_ANALYSIS': 'FOLLOW'; }); scf_e, scf_wfn = psi4.energy('scf', molecule=mol, return_wfn=True); e_psi4 = psi4.energy('ccsd', ref_wfn=scf_wfn); e_mrcc = psi4.energy('mrccsd', ref_wfn=scf_wfn, keep=True); print('CCSD from Psi4 {:20.12f}, CCSD from MRCC {:20.12f}'.format(e_psi4, e_mrcc)); psi4.core.clean_options(); psi4.core.clean(); ```. However, when setting a higher number of threads only the GCC-compiled version runs fine. The Intel version hangs right after emitting the input files for MRCC, _e.g._ after the call to [`mrcc_generate_input`](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3734) This function is bound to Python in [`core.cc`](https://github.com/psi4/psi4/blob/master/psi4/src/core.cc#L299-L302) and defined in [`mrcc.cc`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/mrcc/mrcc.cc#L677-L1003). The last sign of activity from the Intel-compiled version is the printing of the timer (invoked by the `tstop()` before `return Success` in the function in `mrcc.cc`), if I put a print statement in `proc.py` right after, nothing happens, as if the function never returns. Ideas on how to debug?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1132:826,energy,energy,826,https://psicode.org,https://github.com/psi4/psi4/issues/1132,3,['energy'],['energy']
Energy Efficiency,"I just made a fool of myself on the GAMESS-US forum by thinking there was a basis set issue in a calculation, since I couldn't reproduce the energy with Psi4. The problem is the following: if I input a wrong format, e.g.; ```; H 0; S 3 1.0; 1 3.386500000000E+01 2.549380000000E-02; 2 5.094790000000E+00 1.903730000000E-01; 3 1.158790000000E+00 8.521610000000E-01; S 1 1.0; 1 3.258400000000E-01 1.000000000000E+00; S 1 1.0; 1 1.027410000000E-01 1.000000000000E+00; P 1 1.0; 1 1.500000000000E+00 1.000000000000E+00; P 1 1.0; 1 3.750000000000E-01 1.000000000000E+00; ****; ```; this flies through Psi4; it does not check whether the basis set format is correct. Obviously, here it is not since there is an additional enumeration in every entry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2253:141,energy,energy,141,https://psicode.org,https://github.com/psi4/psi4/issues/2253,1,['energy'],['energy']
Energy Efficiency,"I may be doing something wrong, but the outputs I get seems unexpected. When running the following example with or without point charge, the same energy is computed:. ```; # Simple example to test QMMM charges. molecule {; 0 1; He 0.0 0.0 0.0; symmetry c1; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(0.0,0.0,5.0,-1.0); psi4.set_global_option_python('EXTERN', Chrgfield.extern). set {; basis aug-cc-pvtz; }. energy('scf'); ```. Either with or without, the energy is: -2.8612063084748378 Hartree. ```; grep ""Total Energy ="" *.out; with.out: Total Energy = -2.8612063084748378; without.out: Total Energy = -2.8612063084748378; ```. Full in and outputs are attached: [qmmm_test.zip](https://github.com/psi4/psi4/files/3884810/qmmm_test.zip) These are based on the documentation here: http://www.psicode.org/psi4manual/1.2/scf.html#external-potentials-and-qm-mm",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1757:129,charge,charge,129,https://psicode.org,https://github.com/psi4/psi4/issues/1757,8,"['Energy', 'charge', 'energy']","['Energy', 'charge', 'charges', 'energy']"
Energy Efficiency,"I noticed that the code for the nonapproximated E(20)exch-disp saves its final result in `variable('sapt exch-disp20(s^inf) energy')` as it should, but never actually prints the result to the output file. For example, when I run the test in `tests/sapt-exch-disp-inf`, the comparison of values with the reference passes, but I never learn from the output what the actual result is. The simple fix is to change the do_print option to True [when the nonapproximated E(20)exch-disp code is called.](https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/procrouting/sapt/sapt_mp2_terms.py#L282). I can make this fix myself - look out for a simple PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2317:124,energy,energy,124,https://psicode.org,https://github.com/psi4/psi4/issues/2317,1,['energy'],['energy']
Energy Efficiency,"I overlooked this when previously checking the documentation. The CI/MCSCF example from the following page does not work: http://www.psicode.org/psi4manual/1.3/molden.html. A minor issue is that `'ci'` is not a valid method. The second problem is that the `wfn.opdm` method should be replaced by `wfn.get_opdm`. (A useful example can be found in the source tree: `tests/molden2/input.dat`). I believe this is a correct example, but it would be nice if someone more familiar with the CI code could confirm and explain a few questions below. (I would be happy to make a PR with updated documentation.). ```; molecule {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; }. set basis cc-pVTZ; set opdm true. E, wfn = energy('fci', return_wfn=True); molden(wfn, 'no_root1.molden', density_a=wfn.get_opdm(0, 0, ""A"", True)); ```. Main questions:; - Is this example correct? It runs and seems to give sensible results.; - Which levels of theory (other than FCI and CASSCF) can be used? (CISD gives an error: `AttributeError: 'psi4.core.Wavefunction' object has no attribute 'get_opdm'`.); - How can one use the first two arguments to `get_opdm`? They are documented here in the source code: https://github.com/psi4/psi4/blob/880f87f5b2765ed00efaf6dd63c406b574c40157/psi4/src/psi4/detci/ciwave.h#L141 but setting anything else than `0, 0` for the first two arguments does not work: `Fatal Error: CIWavefunction::get_opdm: Requested OPDM was not formed!` I tried to add `set tdm true`, but this had no effect. (Also, I guess writing out a transition density matrix to a Molden file makes little sense.); - When the last argument is `True`, does this mean the frozen-core is included in the density matrix?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1638:699,energy,energy,699,https://psicode.org,https://github.com/psi4/psi4/issues/1638,1,['energy'],['energy']
Energy Efficiency,"I recently found an issue when using DETCI to compute roots of LiCN with CIS/6-31G*, which may have uncovered some deeper problems. the main issue: the lowest-energy solution as predicted by GAMESS (and my own code, which diagonalizes the Hamiltonian by simply calling `np.linalg.eigh`) is completely skipped by Psi4, despite the following roots being the same. GAMESS predicts the following first six excited state energies (the RHF energy matching to 6 decimals):; ```; GAMESS LiCN/6-31G*; CONVERGED STATE 1 ENERGY= -99.5348374214; CONVERGED STATE 2 ENERGY= -99.5315000308; CONVERGED STATE 3 ENERGY= -99.5315000308; CONVERGED STATE 4 ENERGY= -99.5258078193; CONVERGED STATE 5 ENERGY= -99.5258078193; CONVERGED STATE 6 ENERGY= -99.5095744807; ```; while Psi4 predicts:; ```; Psi4 LiCN/6-31G* (symmetry c1, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.5315015582624; CI ROOT 2 TOTAL ENERGY:-99.53150155297872; CI ROOT 3 TOTAL ENERGY:-99.52581092386518; CI ROOT 4 TOTAL ENERGY:-99.52581092379563; CI ROOT 5 TOTAL ENERGY:-99.5096013650753; CI ROOT 6 TOTAL ENERGY:-99.48378441050741; ````; this result doesn't change with or without frozen core, but the results are fine with STO-3G, as well as water with 6-31G*. the results also match GAMESS if I perturb the linear geometry of LiCN, as suggested by @psi-rking , which suggests maybe an issue with finding roots of whatever symmetry the first excited state is; however, adding more roots (or running with/without symmetry) doesn't resolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:159,energy,energy,159,https://psicode.org,https://github.com/psi4/psi4/issues/3083,12,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"I see memory usage significantly above `psi4.set_memory()` limit. I do see the note in the documentation that memory usage might be _slightly_ higher, but if I even request within 20% of a node's total memory (requesting 300 out of ~376 GB), I risk crashing the entire node. Even now, running with `psi4.set_memory(""200 GB"")`, I see persistent VIRT usage of 259 GB and RES 256 GB. I know that determining the _actual_ amount of [memory consumed by a process is tricky](https://stackoverflow.com/questions/131303/how-to-measure-actual-memory-usage-of-an-application-or-process), but this is important to me to prevent the scheduler from killing my jobs. After some troubleshooting, I am requesting 300 GB from the scheduler, but 200 GB from psi4, and end up with ~260 GB used. Is this expected? . Relatedly, but separate, is there a way to estimate what the scratch file size may be? I was planning to use node-local storage until I found out my scratch files are 1.5+ TB. Any rule of thumb way of estimating this ahead of time (number of atoms × level of theory × some magic thing?)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1985:621,schedul,scheduler,621,https://psicode.org,https://github.com/psi4/psi4/issues/1985,2,['schedul'],['scheduler']
Energy Efficiency,"I tried running a CISD/STO-3G job on benzene (structure borrowed from the [psi4 input file samples](https://github.com/psi4/psi4/blob/master/samples/props3/input.dat)) using the following input:; ```; molecule benzene {; C 0.710500000000 0.000000000000 -1.230622098778; C 1.421000000000 0.000000000000 0.000000000000; C 0.710500000000 0.000000000000 1.230622098778; C -0.710500000000 0.000000000000 1.230622098778; C -0.710500000000 0.000000000000 -1.230622098778; C -1.421000000000 0.000000000000 0.000000000000; H 1.254500000000 0.000000000000 -2.172857738095; H -1.254500000000 0.000000000000 2.172857738095; H 2.509000000000 0.000000000000 0.000000000000; H 1.254500000000 0.000000000000 2.172857738095; H -1.254500000000 0.000000000000 -2.172857738095; H -2.509000000000 0.000000000000 0.000000000000; }. set basis sto-3g. energy('cisd', molecule=benzene); ```; Psi4 returned the following error:; ```; Traceback (most recent call last):; File ""/usr/local/psi4/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/usr/local/psi4/lib/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 949, in select_cisd; return func(name, **kwargs); File ""/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 4238, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn). RuntimeError: ; Fatal Error: ndocc must be less than nvirt; Error occurred in file: /home/shouck/psi4/psi4/src/psi4/fnocc/ccsd.cc on line: 142; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::fnocc::CoupledCluster::common_init(); psi::fnocc::CoupledCluster::CoupledCluster(std::shared_ptr<psi::Wavefunction>, psi::Options&); psi::fnocc::CoupledPair::CoupledPair(std::shared_ptr<psi::Wavefunction>, psi::Options&); psi::fnocc::fnocc(std:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828:828,energy,energy,828,https://psicode.org,https://github.com/psi4/psi4/issues/828,1,['energy'],['energy']
Energy Efficiency,"I tried using this code to generate the potential energy curve for the CF molecule and I got this error message: . ```; import psi4; import numpy as np. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). ecp = {}. for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). cf = psi4.geometry(cf_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; psi4.core.clean(); ```. The error message I got is:. ```; Traceback (most recent call last):; File ""/home/sanctus/psi4conda/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 46, in <module>; File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5424, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sanctu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181:50,energy,energy,50,https://psicode.org,https://github.com/psi4/psi4/issues/3181,1,['energy'],['energy']
Energy Efficiency,"I use the following block of code to do CCSD(T) calculations; ```; psi4_atom_task = qcelemental.models.ResultInput (; molecule= mol,; driver=""energy"",; model= {""method"": ""ccsd"", ""basis"": ""6-31g""},; ); ret=qcengine.compute(psi4_atom_task, ""psi4""). ret.dict()['extras']; ````. If the `mol` is restricted shell, then the result in 'extras' includes non-zero values of the `CC D1 DIAGNOSTIC` and `CC D2 DIAGNOSTIC`. The example output of water molecule at singlet state is:. ```; {'qcvars': {'-D ENERGY': 0.0,; 'CC D1 DIAGNOSTIC': 0.015061336005482073,; 'CC D2 DIAGNOSTIC': 0.12393617164619228,; 'CC NEW D1 DIAGNOSTIC': 0.015061336005482073,; 'CC T1 DIAGNOSTIC': 0.006755831075299291,; 'CCSD CORRELATION ENERGY': -0.13940696350922102,; 'CCSD OPPOSITE-SPIN CORRELATION ENERGY': -0.11488872459315766,; 'CCSD SAME-SPIN CORRELATION ENERGY': -0.02451823891606328,; 'CCSD TOTAL ENERGY': -76.1195648218788,; ```. However, if the calculation is for an open shell system, `CC D1 DIAGNOSTIC` and `CC D2 DIAGNOSTIC` will always be zero regardless of molecule species. I suspect that QCEngine is not parsing out the D1 and D2 values for these calculation, resulting in zero values all the time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1681:142,energy,energy,142,https://psicode.org,https://github.com/psi4/psi4/issues/1681,6,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"I used Psi4 to calculate the energy of molecules in Conformer Benchmark dataset ( https://github.com/ghutchis/conformer-benchmark/ 702 molecules, each molecule has about 10 conformations). I tried three versions of Psi4 respectively, including V1.3.2, V1.4 and V1.4.1, and then calculated the correlation between the results of the three versions. The results are shown in the following table. The consistency is not high, especially v1.4.1, which is greatly different from the other two versions. Why are the calculation results of different versions so different?. In addition, I also calculated the correlation between Psi4 results and Orca results (from Conformer benchmark), the correlation is not high, why?. ![image](https://user-images.githubusercontent.com/16797849/141259545-c20d1c6c-6fe1-44ec-a0de-1bb8980db327.png). my code:; ```Python; def run_psi4_calc(xyz_str, dtype='xyz', basis_set='WB97X-D/def2-SVP', reference='uks', max_iter=100):. psi4.set_options({; 'reference': reference,; 'maxiter': max_iter; }). mol = psi4.core.Molecule.from_string(xyz_str, dtype=dtype); energy = psi4.energy(basis_set, molecule=mol). return energy. # get molecular 3d coordinates from Conformer benchmark; xyz_str = get_xyz_str(). energy = run_psi4_calc(; xyz_str=xyz_str,; dtype='xyz+',; basis_set='WB97X-D/def2-SVP',; reference='uks',; max_iter=100; ); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2351:29,energy,energy,29,https://psicode.org,https://github.com/psi4/psi4/issues/2351,5,['energy'],['energy']
Energy Efficiency,"I used the PSI4 to run SAPT0-D3 calculation. I tested both D3 and D3mbj correction, however, they all have the errors. The error is the assertion error: pairwise sum = -0.17086444... ! =energy -0.17086561.; The key word i used in my script is the following : ; set {; scf_type DF; freeze_core True; basis jun-cc-pVDZ; soscf true; soscf_max_iter 30; }; energy(""sapt0-d3"")",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2914:186,energy,energy,186,https://psicode.org,https://github.com/psi4/psi4/issues/2914,2,['energy'],['energy']
Energy Efficiency,"I want to install psi4 on my openff environment since OpenFF Recharge requires it to generate electrostatic charges (https://docs.openforcefield.org/projects/recharge/en/stable/getting-started/installation.html). . I have used mamba to install openff, following steps 3 and 4 [https://docs.openforcefield.org/en/latest/install.html](here). I tried to install psi4 via mamba with the following commad:; `mamba install psi4=1.8.1 -c conda-forge/label/libint_dev -c conda-forge`. However, I got several warnings about incompatible packages:. `blas [2.4|2.5|2.6|2.7] would require; │ │ └─ libblas [3.8.0 4_openblas|3.8.0 5_openblas|3.8.0 6_openblas|3.8.0 7_openblas], which requires; │ │ └─ openblas 0.3.5.* , which does not exist (perhaps a missing channel);; `; and; ` psi4 1.8.1 would require; │ ├─ libblas * *mkl, which requires; │ │ └─ blas * mkl, which conflicts with any installable versions previously reported;; │ └─ mkl >=2022.2.1,<2023.0a0 , which conflicts with any installable versions previously reported;; `. I also attempted to install psi4=1.7, but this also led to a similar conflicts issue:. `psi4 1.7** is not installable because it requires; └─ blas 1.0 mkl, which conflicts with any installable versions previously reported.; `; I believe I need psi4 installed on my openff environment for it to be usable for openff's wrappers. I've tried installing the blas dependencies explicitly:. `mamba conda install -c conda-forge openblas` ; but this tells me the package is already installed. . and:. `mamba install 'libblas * *mkl' -c conda-forge -c defaults` which results in the same `openblas 0.3.5.* , which does not exist (perhaps a missing channel);` error. . Any ideas? I must admit I am relatively new to using mamba + managing environments, but I believe it is just a reimplementation of conda.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3046:108,charge,charges,108,https://psicode.org,https://github.com/psi4/psi4/issues/3046,1,['charge'],['charges']
Energy Efficiency,"I want to optimize base-pairs in Cs symmetry and DFT, but the optimization fails/produces a wrong minimum. Moreoever, the optimization goes a bit crazy. DF-B3LYP-D3/def2-QZVP gives some form of this with most options (including cart.) for the optimizer:; ```; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -1089.49118380 -1.09e+03 9.40e-02 1.22e-02 o 1.04e-01 1.41e-02 o ~; 2 -1089.49529350 -4.11e-03 5.45e-02 7.48e-03 o 9.20e-02 1.41e-02 o ~; 3 -1089.49300118 2.29e-03 4.10e-02 5.60e-03 o 8.58e-02 1.41e-02 o ~; 4 -1089.48886131 4.14e-03 3.02e-02 4.05e-03 o 8.07e-02 1.41e-02 o ~. ```. The default optimizer keeps increasing the energy and ends up in a wrong minimum. The option `DYNAMIC_LEVEL 2` tries to fix things, but it goes nowhere in the end. See output for further details: [dynamic.txt](https://github.com/psi4/psi4/files/2196749/dynamic.txt) . While at first I thought the optimizer just has weird troubles, from the below notes it seems the gradient might be faulty. And computing the numerical gradient shows some values a bit too far off. ; [grad.txt](https://github.com/psi4/psi4/files/2197616/grad.txt) (both next to each other at the bottom); E.g. compare the row for Atom 38. Additional notes/remarks; * Turbomole (RI-JK) and Gaussian converge smoothly. No increase in energy.; * smaller basis sets (def2-TZVP) converge as they should; * DFT grid increase does not change anything to the better; * same convergence issue with other (similar) structures; * revPBE0/def2-QZVP shows the same incorrect behavior; * `scf_type direct` seems to converge as it should (slow, still running); * DF-B3LYP gradient vs. FD gradients for water seems okay; * Not a symmetry problem; * Same with DF-HF; * Psi4 1.2 release; Git: Rev {HEAD} 9d4a61c (conda install)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1095:744,energy,energy,744,https://psicode.org,https://github.com/psi4/psi4/issues/1095,2,['energy'],['energy']
Energy Efficiency,"I was attempting to run an IRC, only to receive a rather confusing error message that `symm_matrix_inv : opt_symm_matrix_eig could not diagonalize`. After spending far too much time trying to figure out why various matrices were filled with NaN, I realized the problem was that I had supplied an energy minimum, not a transition state. (The SI that I was following put in a wrong geometry.) I've attached my input file. The IRC code saw the gradient was about zero and tried to follow the lowest mode... which was a translational mode. If the new PyOptking is given an initial hessian for an IRC, could it double-check that there's actually an imaginary mode?. [input.txt](https://github.com/psi4/psi4/files/2019016/input.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1025:296,energy,energy,296,https://psicode.org,https://github.com/psi4/psi4/issues/1025,1,['energy'],['energy']
Energy Efficiency,"I was doing a calculation of eda of transition metal complex by FISAPT, with three-body partition. A fatal error ocurred as followed. But the fragment A (0 1) is simply phenylacetylene, how could the error happen? ; Actrually, I have successfully done the eda of the same complex with two-body partition. The basis sets were exactly the same. Thanks in advance. ```; RuntimeError: ; Fatal Error: FISAPT: Charge on A is incompatible with singlet; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1670993662927/work/psi4/src/psi4/fisapt/fisapt.cc on line: 393; The most recent 5 function calls were:; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2870:404,Charge,Charge,404,https://psicode.org,https://github.com/psi4/psi4/issues/2870,1,['Charge'],['Charge']
Energy Efficiency,"I was having a problem with DF-CCSD(T) calculations. The issue was that the CC density was not present in the fchk file. Only the SCF density was printed out. My input file looks like this:; ; ```; memory 55 GB. molecule water {; 0 1; O 0.000000 0.119325 0.000000; H 0.763133 -0.477420 0.000000; H -0.763133 -0.477177 0.000000. symmetry c1; no_com; no_reorient; }. set {; basis aug-cc-pVTZ; scf_type df; cc_type df; }. set_num_threads(6). #e, wfn1 = energy('ccsd(t)', return_wfn=True,); grad, wfn = gradient('ccsd(t)', return_wfn=True). fchk_writer = psi4.FCHKWriter(wfn); fchk_writer.write('water.fchk'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2275:450,energy,energy,450,https://psicode.org,https://github.com/psi4/psi4/issues/2275,1,['energy'],['energy']
Energy Efficiency,"I was looking at the DIIS code to determine whether it properly handles the case of linear dependencies. For instance, the UHF code is; ```; if (initialized_diis_manager_ == false) {; diis_manager_ = std::make_shared<DIISManager>(max_diis_vectors, ""HF DIIS vector"", DIISManager::LargestError,; DIISManager::OnDisk);; diis_manager_->set_error_vector_size(2, DIISEntry::Matrix, gradient_a.get(), DIISEntry::Matrix,; gradient_b.get());; diis_manager_->set_vector_size(2, DIISEntry::Matrix, Fa_.get(), DIISEntry::Matrix, Fb_.get());; initialized_diis_manager_ = true;; }. diis_manager_->add_entry(4, gradient_a.get(), gradient_b.get(), Fa_.get(), Fb_.get());; ```; whereas extrapolation is handled by; ```; bool UHF::diis() { return diis_manager_->extrapolate(2, Fa_.get(), Fb_.get()); }; ```; To me, this looks like the code does **not** project linearly dependent eigenvectors out. This might certainly explain many SCF convergence problems seen with Psi4, in which the energy apparently converges but the DIIS error stagnates to a large value. Note that the fix was already in Pulay's original paper. In [Chem. Phys. Lett. 73, 393 (1980)](https://doi.org/10.1016/0009-2614(80)80396-4) he writes; > An even better choice is the use of Fock matrix elements transformed to an orthonormal basis, such as `S^-1/2 F S^-1/2` where `S` is the overlap matrix. This takes into account that a charge shift from a basis function to another is less important physically if the two functions overlap strongly. Obviously, `S^-1/2` is the orthogonalizing matrix `X`; alternatively, the molecular orbital coefficients `C` can also be used.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2217:968,energy,energy,968,https://psicode.org,https://github.com/psi4/psi4/issues/2217,2,"['charge', 'energy']","['charge', 'energy']"
Energy Efficiency,"I was running the following input as a test:. ```set memory 4GB. molecule {; 0 3; O -0.5974387171 -0.0000000000 0.0000000000; O 0.5974387171 0.0000000000 0.0000000000. }. set {; reference rohf; d_convergence 10; e_convergence 10; basis_guess True; max_force_g_convergence 1e-7; freeze_core True; }. E = energy('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z'); H = frequency('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:303,energy,energy,303,https://psicode.org,https://github.com/psi4/psi4/issues/1897,4,"['ENERGY', 'Energy', 'energy']","['ENERGY', 'Energy', 'energy']"
Energy Efficiency,"I was trying to run a Gaussian-2 energy calculation for hydrogen disulfide, which appears in the original G2 test set: http://scitation.aip.org/content/aip/journal/jcp/94/11/10.1063/1.460205. The job terminated after calculating the MP4(SDTQ) total energy, with message:. RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for S in /opt/science/psi/psi4/share/psi/basis/6-311g_2df_p_.gbs. When I examine the 6-311g_2df_p_.gbs file, I see that it only has entries for H, He, Li, Be, B, C, N, O, F, Ne, K, Ca. According to the comment at the top of the file it's supposed to have been merged from 6-311G*\* and 6-311G on the EMSL Basis Set Exchange. I double checked on the BSE and these basis sets also have entries for Na, Mg, Al, Si, P, S, Cl, Ar, Ga, Ge, As, Se, Br, Kr, I, as expected.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/58:33,energy,energy,33,https://psicode.org,https://github.com/psi4/psi4/issues/58,2,['energy'],['energy']
Energy Efficiency,"I was trying to run a calculation using the following composite method:. energy('MP2/aug-cc-pV([T, Q]+d)Z + D:FNO-CCSD(T)/aug-cc-pV(T+d)Z', bsse_type = 'cp') . The calculation seems to run fine, but the final energy table looks wrong. ---. ```; Method / Basis Rqd Energy [Eh] Variable; ```. ---. ```; mp2 / aug-cc-pv(q+d)z * -709.56313021 MP2 TOTAL ENERGY; hf / aug-cc-pv(q+d)z * -707.60123747 HF TOTAL ENERGY; scf / aug-cc-pv(t+d)z -707.58023768 SCF TOTAL ENERGY; mp2 / aug-cc-pv(t+d)z * -709.35534062 MP2 TOTAL ENERGY; fno-ccsd(t) / aug-cc-pv(t+d)z * -709.50405507 CCSD(T) TOTAL ENERGY; ccsd / aug-cc-pv(t+d)z -709.42134394 CCSD TOTAL ENERGY; ```. ---. ==> Stages <==. ---. ```; Stage Method / Basis Wt Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z 1 -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 1 -709.71476045 corl_xtpl_helgaker_2; corl hf / aug-cc-pv([tq]+d)z -1 -1223.95889724 corl_xtpl_helgaker_2; delta fno-ccsd(t) / aug-cc-pv(t+d)z 1 -709.50405507 xtpl_highest_1; delta mp2 / aug-cc-pv(t+d)z -1 -709.35534062 xtpl_highest_1; ```. ---. ==> CBS <==. ---. ```; Stage Method / Basis Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 514.24413679 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pv(t+d)z -0.14871446 xtpl_highest_1; total CBS -193.50581514; ```. ---. [363_2_in.txt](https://github.com/psi4/psi4/files/404462/363_2_in.txt); [363_2_out.txt](https://github.com/psi4/psi4/files/404463/363_2_out.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/455:73,energy,energy,73,https://psicode.org,https://github.com/psi4/psi4/issues/455,11,"['ENERGY', 'Energy', 'energy']","['ENERGY', 'Energy', 'energy']"
Energy Efficiency,"I would expect the two attached calculations to give the same result but they don't. The difference is that in one input, the geometry is in angstroms, while in the other the same geometry is specified in Bohr. Somehow, the term `Additional nuclear repulsion` is computed very differently:. ```; $ grep ""nuclear"" */psi4.out; case1/psi4.out: Old nuclear repulsion = 0.529177210670000; case1/psi4.out: Additional nuclear repulsion = 0.330403525088017; case1/psi4.out: Total nuclear repulsion = 0.859580735758017; case2/psi4.out: Old nuclear repulsion = 0.529177525830478; case2/psi4.out: Additional nuclear repulsion = 0.793766288745717; case2/psi4.out: Total nuclear repulsion = 1.322943814576195; ```. In- and outputs attached: [cases.zip](https://github.com/psi4/psi4/files/4586584/cases.zip). Input files for convenience:. `case1/psi4.in`. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; units angstrom; symmetry c1; no_reorient; no_com; }. set basis 3-21G. chfield = QMMM(); chfield.extern.addCharge(1.0, 0.0, 0.0, 3.77945); psi4.set_global_option_python('EXTERN', chfield.extern). energy(""SCF""); ```. `case2/psi4.in`. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.889725; units bohr; symmetry c1; no_reorient; no_com; }. set basis 3-21G. chfield = QMMM(); chfield.extern.addCharge(1.0, 0.0, 0.0, 3.77945); psi4.set_global_option_python('EXTERN', chfield.extern). energy(""SCF""); ```. The results for `case2` seem correct while `case1` seems wrong. In both cases, the output mentions the same position of the external charge in atomic untis:. `case1/psi4.out`. ```; ...; => External Potential Field: <= . > Charges [a.u.] < . Z x y z; 1.00000 0.00000 0.00000 3.77945; ...; ```. `case2/psi4.out`. ```; ...; => External Potential Field: <= . > Charges [a.u.] < . Z x y z; 1.00000 0.00000 0.00000 3.77945; ...; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881:1093,energy,energy,1093,https://psicode.org,https://github.com/psi4/psi4/issues/1881,5,"['Charge', 'charge', 'energy']","['Charges', 'charge', 'energy']"
Energy Efficiency,"I would like to implement a faster way to do ESP fits than what is found here:; https://github.com/psi4/psi4numpy/tree/master/One-Electron-Property/Restrained-Electrostatic-Potential. The solution above is writing multiple grids on disk, yet the strength of the python and C++ APIs of Psi4 should be to have these in memory and allow for fast multithreaded evaluations. My development proposal would be a little more involved, but also give the Psi4 API a lot more power. I would split the whole OEProp class into:. OEPropCalc; This class will get all currently existing logic to calculate the requested properties. Most properties are already calculated as SharedMatrix. This class will not be allowed to have any kind of output, unless a bulk property is requested (such as a grid).; OEProp; This class gets all output handling, it will only call the respective OEPropCalc functions and then use the existing code for output. Data will be passed between OEPropCalc and OEProp as SharedPointer and therefore not cost overhead. Exception to this rule would be the functions writing grids, which will get an in-memory and a direct write solution.; Reason:; Currently OEProp sometimes exposes data in memory (such as Mulliken charges using wfn.set_array) and sometimes not (such as Multipoles only via stdout or outfile). The approach above would allow internal code use of SharedMatrices directly (OEPropCalc would get a public python API) and keep existing functionality untouched. Once the split is done, I would also split the GridEvaluation routines to either write a grid-XXX.dat (the existing functionality) or to keep the grids in memory (new functionality) and generate them with a grid taken from memory using the existing GridIterator interface. Are there any objections or is somebody else currently working on this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1116:465,power,power,465,https://psicode.org,https://github.com/psi4/psi4/issues/1116,2,"['charge', 'power']","['charges', 'power']"
Energy Efficiency,I would like to run minimizations with an additional harmonic constraint such that the input coordinates are favored. The use case is for computing strain energy against a decreasing force.; I am currently running many of these calculations after modifying the code as described here:; http://forum.psicode.org/t/optimization-with-additional-harmonic-constraints/404/2. In essence we are changing lines 196 and 197 in Molecule.cc to this:; // Increase force constant by 5% of initial value per iteration; k = Opt_params.fixed_coord_force_constant;; H[cnt][cnt] += k;; Note: that the forum post has a minor bug: it is not adding the fc to H but just replacing the element in H. Would it be possible to have this as an option in the official build of Psi4? I think this would be useful for other people. Thanks so much!; Alberto,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1079:155,energy,energy,155,https://psicode.org,https://github.com/psi4/psi4/issues/1079,1,['energy'],['energy']
Energy Efficiency,"I'm attempting to compute the energies of halogens, and keep having convergence problems with B97-3c. Using the below input works with any reasonable functional/basis combination, but not B97-3c. ```python; molecule {; 0 2; Br; }. set reference UHF. # Successful; energy(""HF/6-31G*""); energy(""B3LYP/6-31G*""); energy(""HF-3C""); energy(""B97-3/def2-mTZVP""); energy(""r2SCAN-3c""); energy(""wB97X-3c""). # Fails; energy(""B97-3c""); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3218:264,energy,energy,264,https://psicode.org,https://github.com/psi4/psi4/issues/3218,7,['energy'],['energy']
Energy Efficiency,"I'm finding non-deterministic energies for cd-mp2, depending on amount of extraneous stuff commented in the input file. For example, the below works as is, but gives a different answer when the unused molecules are commented out (not only molecules, but irrelevant keywords can cause the problem, too). The problem shows up in the final output as correlation energy has wrong sign and not matching sum of aa, ab, bb contributions. At first I though it was because you're setting `EcorlL` but printing `Ecorl`, @bozkaya , but that turns out to be innocent. I've got a valgrind if that'll help. ```; molecule methane {; C 0.0000000 0.0000000 3.0826195; H 0.5868776 0.8381742 3.4463772; H -1.0193189 0.0891638 3.4463772; H 0.0000000 0.0000000 1.9966697; H 0.4324413 -0.9273380 3.4463772; }. molecule hf {; H; F 1 0.917; }. molecule bh_h2p {; 1 2; B 0.10369114 0.00000000 0.00000000; H -1.13269886 0.00000000 0.00000000; H 3.00000000 0.37149000 0.00000000; H 3.00000000 -0.37149000 0.00000000; }. set basis cc-pvdz; set scf_type df; set guess sad; set freeze_core true; set e_convergence 8; set d_convergence 7. set reference uhf; set mp2_type cd; energy('mp2'); print_variables(). compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST. ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914741; REF Energy (a.u.) : -25.94513055914741; Alpha-Alpha Contribution (a.u.) : -0.00171224403804; Alpha-Beta Contribution (a.u.) : -0.05664223456972; Beta-Beta Contribution (a.u.) : -0.00005535856885; Scaled_SS Correlation Energy (a.u.): -0.00058920086896; Scaled_OS Correlation Energy (a.u.): -0.06797068148366; CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150004; CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408805; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973553; CD-MP2 Corr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244:359,energy,energy,359,https://psicode.org,https://github.com/psi4/psi4/issues/244,1,['energy'],['energy']
Energy Efficiency,"I'm hoping to do atomic MCHF calculations with Psi4, which amount to small CASSCF calculations. However, I can't get DETCI to run the calculations for me. Take the oxygen atom for example. The 3P state has 4 electrons on the P shell. DETCI correctly determines that there is 1 alpha string (since the shell is fully occupied) and 3 beta strings, but then it says that the CI space only has a single determinant and crashes. Example inputs. ```; molecule {; 0 3; O; }. set basis cc-pVDZ; set reference rohf; set restricted_docc [2, 0, 0, 0, 0, 0, 0, 0]; set active [0, 0, 0, 0, 0, 1, 1, 1]; energy('casscf'); ```; or a lower symmetry; ```; molecule {; symmetry c2h; 0 3; O; }. set basis cc-pVDZ; set reference rohf; set restricted_docc [2, 0, 0, 0]; set active [0, 0, 1, 2]; energy('casscf'); ```. I guess the problem is that DETCI can't find a proper symmetry? Is there a way to circumvent this issue? @CDSherrill ?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1778:590,energy,energy,590,https://psicode.org,https://github.com/psi4/psi4/issues/1778,2,['energy'],['energy']
Energy Efficiency,"I'm seeing a crash in cdomp2-2 for 1.0rc on Debian unstable:. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; =======================================================================; Nuclear Repulsion Energy (a.u.) : 25.59060766929188; CD-HF Energy (a.u.) : -129.25927206477397; REF Energy (a.u.) : -129.25927206477397; Alpha-Alpha Contribution (a.u.) : -0.03921205696199; Alpha-Beta Contribution (a.u.) : -0.20476196654188; Beta-Beta Contribution (a.u.) : -0.03692010667753; Scaled_SS Correlation Energy (a.u.): -0.02537738787984; Scaled_OS Correlation Energy (a.u.): -0.24571435985026; CD-SCS-MP2 Total Energy (a.u.) : -129.53036381250408; CD-SOS-MP2 Total Energy (a.u.) : -129.52546262127842; CD-SCSN-MP2 Total Energy (a.u.) : -129.39326467277954; CD-MP2 Correlation Energy (a.u.) : -0.28089413018141; CD-MP2 Total Energy (a.u.) : -129.54016619495539; =======================================================================. Number of alpha independent-pairs:172; Number of beta independent-pairs :157. ==============================================================================; ================ Performing CD-OMP2 iterations... ============================; ==============================================================================; Minimizing CD-MP2-L Functional; ------------------------------; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2; ---- --------------- ---------- ----------- ----------- ----------; 1 2171897840405125233095316875881590551467307175332860142219670350830780702696283291230457729657914921746891661667264776735054294112163359650172177568018543474023361651834998812756231127668278305330007498940536320077394375160362584676926576578513365418212288803914428069938462720.0000000000 2.17e+276 inf 1.41e+183 8.10e+89; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 40, in <module>. File ""/build/psi4-lIOjn9/psi4-1.0~rc/share/python/driver.py"", line 444, in energy; wfn = procedures['energy'][lowername](l",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391:84,energy,energy,84,https://psicode.org,https://github.com/psi4/psi4/issues/391,11,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"I'm trying to calculate a potential energy surface for H2O double dissociation in a (4e,4o) active space using the input; ```; molecule h2o {; 0 1; symmetry c1; units bohr; O; H 1 R; H 1 R 2 110.6; }. R0=1.84345. set basis cc-pVTZ; set scf_type pk; h2o.R=3*R0; scf_e, scf_wfn = energy('scf', return_wfn=True). set frozen_docc [ 3 ]; set active [ 4 ]; set qc_module detci; set r_convergence 1e-8; set e_convergence 1e-10; set ci_maxiter 1000; set mcscf_algorithm ah. for ir in range(30, 7, -1):; h2o.R=R0*ir/10; print(h2o.R); if ir == 30:; cas_e, cas_wfn = energy('casscf', ref_wfn=scf_wfn, return_wfn=True); else:; cas_e, cas_wfn = energy('casscf', ref_wfn=cas_wfn, return_wfn=True); ```. Judging from output.dat, the run appears to crash in DiskJK for the third step. Somewhat oddly, if I look at the occupation numbers for the second step, I see; ```; Active Space Natural occupation numbers:. A 1620.561712 A 1145.170647 A 761.060310; A 410.061564; ```; whereas in the first step they're still sane; ```; Active Space Natural occupation numbers:. A 1.119206 A 1.083963 A 0.916038; A 0.880793; ```. What's going on here?!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/758:36,energy,energy,36,https://psicode.org,https://github.com/psi4/psi4/issues/758,4,['energy'],['energy']
Energy Efficiency,"I'm trying to perform SAPT calculations with the aug-cc-PV5Z bases set for the interaction between helium gas and ammonia. However, getting the error describe below. Memory set to 26.077 GiB by Python driver.; Threads set to 12 by Python driver. QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 5 for key JKFIT among:; Shell Entries: ['HE']; Basis Sets: [('aug-cc-pv5z-jkfit', 'aug-cc-pv5z-jkfit', None)]; File Path: /home/sandro/Desktop/teste_He-aug-cc-pv5z, /home/sandro/Desktop/teste_He-aug-cc-pv5z, /home/sandro/miniconda3/envs/venv_psi4/share/psi4/basis; Input Blocks: . Traceback (most recent call last):; File ""run_GN_NH3_inter_var.py"", line 402, in <module>; eel = calcula_energia(metodo, base, dimero, fator_conv)[0]; File ""run_GN_NH3_inter_var.py"", line 73, in calcula_energia; psi4.energy(f'{metodo}/{base}'); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 4394, in run_sapt; dimer_wfn = scf_helper('RHF', molecule=sapt_dimer, **kwargs); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1576, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1231, in scf_wavefunction_factory; aux_basis = core.BasisSet.build(wfn.molecule(), ""DF_BASIS_SCF"",; File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/p4util/python_helpers.py"", line 85, in _pybuild_basis; bs, basisdict = qcdb.BasisSet.pyconstruct(mol.to_dict(),; File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/qcdb/libmintsbasisset.p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2989:833,energy,energy,833,https://psicode.org,https://github.com/psi4/psi4/issues/2989,1,['energy'],['energy']
Energy Efficiency,"I'm trying to reproduce some dmrg calculations in the literature on polyenes in the STO-3G basis set. However, I get the following error. ```; ###########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file output.dat.chemps2 and will be copied here.; iwl_buf_init: Can't open file 33; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 80, in <module>. File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/driver.py"", line 444, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/procedures/proc.py"", line 2686, in run_dmrgci; dmrg_wfn = psi4.dmrg(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /global/home/groups-sw/mhg/psi4/psi4.git/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); psi::DiskJK::compute_JK(); ```. when I try to run a calculation with. ```; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ```. I'm having trouble seeing why this would fail. First of all, the scratch partition on the node has over 2 TB of free space, and second, there are only 65 basis functions in the system, so even if one didn't use any kind of symmetries for the repulsion integrals, one would",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/464:823,energy,energy,823,https://psicode.org,https://github.com/psi4/psi4/issues/464,2,['energy'],['energy']
Energy Efficiency,"I'm trying to run some FCI calculations without symmetry to ensure I land on the ground state. However, the SCF is sometimes very hard to do without symmetry, so I'd like to run SCF with symmetry, switch symmetry off and check if I'm still at a stable solution. However, I find I'm unable to change my molecule for symmetry constraints (or charge/multiplicity for that matter). The following input; ```; molecule sym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set basis STO-3G; energy('scf'). molecule nosym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set scf guess read; energy('scf'); ```; runs the first SCF, but crashes on the second with; ```; RuntimeError: ; Fatal Error: SCF guess was set to SAD, but sad_basissets_ was empty!. Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/sad.cc on line: 659; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::scf::HF::compute_SAD_guess(); psi::scf::HF::guess(); psi::scf::HF::initialize(); psi::scf::HF::compute_energy(); ```; Oddly, it appear that while in the second run; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is READ.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00; ```; the initialization uses; ```; ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: file /home/work/psi4/install/share/psi4/basis/def2-svp-jkfit.gbs; Number of shells: 12; Number of basis function: 36; Number of Cartesian functions: 40; Spherical Harmonics?: true; Max angular momentum: 2. Minimum eige",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/586:340,charge,charge,340,https://psicode.org,https://github.com/psi4/psi4/issues/586,3,"['charge', 'energy']","['charge', 'energy']"
Energy Efficiency,"I'm trying to run some simple x2c jobs using the new Karlsruhe x2c basis sets. The SVP jobs run fine, but the larger basis sets cause problems. For instance,; ```; molecule {; units bohr; 0 1; Ag; Ag 1 4.60; }. set basis x2c-TZVPall-decon; set basis_relativistic x2c-TZVPall-decon; set relativistic x2c; set scf_type direct; set df_scf_guess false; set dft_radial_points 99; set dft_spherical_points 590. energy('svwn'); ```; fails to converge. For SVP, I get; ```; The 1-norm of |H_X2C - H_Dirac| is: 0.000000088631; ```; but for TZVP; ```; The 1-norm of |H_X2C - H_Dirac| is: 181094.365380967443. WARNING: The X2C and Dirac Hamiltonians have substatially different eigenvalues!; This is probably caused by the recontraction of the basis set.; ```. This must be related to linear dependencies in the basis. pyscf appears to run the same calculations without problems. It uses a threshold for small exponents for the small exponents (https://programtalk.com/vs2/python/12572/pyscf/scf/x2c.py/ line 68); maybe one should also be used in psi4?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/868:405,energy,energy,405,https://psicode.org,https://github.com/psi4/psi4/issues/868,1,['energy'],['energy']
Energy Efficiency,"I'm trying to use the orbitals from one SCF as the guess for computations on similar structures. I'm trying to follow this procedure: [https://psicode.org/psi4manual/master/scf.html#restarting-the-scf](https://psicode.org/psi4manual/master/scf.html#restarting-the-scf). I'm using Psi4 1.5 e9f4d6d on windows subsystem linux. The input file for the initial energy is:; ```py; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C 1.13408 -0.39513 0.82671; C 0.24384 -0.10727 1.77918; C 1.25947 0.48184 -0.37564; C -1.70320 -0.60897 -0.07371; C -1.08313 0.35853 -0.75350; O 0.15798 0.21455 -1.28105; H 1.61155 -1.37871 0.79725; H -0.00411 -0.81057 2.57479; H -0.26633 0.85763 1.80344; H 2.16195 0.28247 -0.96305; H 1.24281 1.54792 -0.09693; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; }. nrg, wfn = energy('M06-2X', return_wfn=True); wfn.to_file(""test_restart""); ```. This creates a ""test_restart.npy"" file. I then try to compute the energy for the same molecule using this test_restart.npy file and a different input file:. ```py; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C 1.13408 -0.39513 0.82671; C 0.24384 -0.10727 1.77918; C 1.25947 0.48184 -0.37564; C -1.70320 -0.60897 -0.07371; C -1.08313 0.35853 -0.75350; O 0.15798 0.21455 -1.28105; H 1.61155 -1.37871 0.79725; H -0.00411 -0.81057 2.57479; H -0.26633 0.85763 1.80344; H 2.16195 0.28247 -0.96305; H 1.24281 1.54792 -0.09693; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; }. nrg, wfn = energy('M06-2X', return_wfn=True, restart_file=""test_restart""); ```. However, I get the following error :. ```; Traceback (most recent call last):; File ""/home/tony/psi4conda/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **k",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2571:356,energy,energy,356,https://psicode.org,https://github.com/psi4/psi4/issues/2571,2,['energy'],['energy']
Energy Efficiency,"I'm using psi4 through the Python API. I want to compute both the energy and the gradient for a molecule. I can do that by calling `psi4.energy()` and `psi4.gradient()`, but that repeats the entire calculation and takes twice as long as it needs to. How can I retrieve both of them without having to repeat the calculation?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2878:66,energy,energy,66,https://psicode.org,https://github.com/psi4/psi4/issues/2878,2,['energy'],['energy']
Energy Efficiency,"I've got trouble calculation H2:. ``` python; import numpy as np; memory 50 Gb. molecule H2 {; 0 1; H; H 1 R; units au; }. set {; SCF_TYPE PK; diag_method rsp; MAXITER 40; NUM_ROOTS 5; basis cc-pvdz; }. rlist = np.arange(1.00, 10.1, 0.1). for r in rlist:; H2.R = r; energy('fci'); ```. It calculates the first point and then I get:. ``` python; PSIO_ERROR: unit = 53, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""<string>"", line 36, in <module>; File ""share/psi/python/driver.py"", line 576, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""share/psi/python/proc.py"", line 1969, in run_detci; psi4.detci(); RuntimeError: PSIO Error; ```. This is done with 14c78eab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/83:266,energy,energy,266,https://psicode.org,https://github.com/psi4/psi4/issues/83,3,['energy'],['energy']
Energy Efficiency,"I've made changes and then had only the opt-irc-2 test case fail. Now I notice that others are having problems: https://testboard.org/cdash/testSummary.php?project=3&name=opt-irc-2&date=2016-02-27 . This is only a slight discrepancies at the end of a long IRC. In my case, at least, the number of IRC steps is the same. Do convergence keyword need tightening to preserve the reference progress of the IRC? Or does the compare_values check just need loosening to account for variance after many many optimization cycles? @avcopan, could you investigate?. Energy of last IRC point: computed value (-92.869134) does not match (-92.868907) to 5 decimal places.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/290:554,Energy,Energy,554,https://psicode.org,https://github.com/psi4/psi4/issues/290,1,['Energy'],['Energy']
Energy Efficiency,"I've seen this happen, though not on identical codebases. Added scf5 to quicktests so we could monitor with TravisCI. Then I saw it on Blueridge (https://testboard.org/cdash/testDetails.php?test=8074282&build=66614) to be mysteriously healed the next day (https://testboard.org/cdash/testDetails.php?test=7019761&build=66801). Then @bennybp reported it happens intermittantly on an identical codebase (https://github.com/psi4/psi4/issues/321#issuecomment-198631685). So now I believe it exists. Compilers (in my case) were Intel 2015.0.3.187.; - `Singlet PK CUHF energy: computed value (-149.6304503) does not match (-149.5905972) to 6 decimal places.`; - `Singlet PK UHF energy: computed value (-149.6484410) does not match (-149.5905972) to 6 decimal places`; - In my case, I think the guess occupancy spontaneously changed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/322:95,monitor,monitor,95,https://psicode.org,https://github.com/psi4/psi4/issues/322,3,"['energy', 'monitor']","['energy', 'monitor']"
Energy Efficiency,"I've used the following input:. ``` python; molecule CO; {; C; O 1 R; units au; }. set {; basis sto-3g; guess read; }. Rrange= [ 0.6, 0.7, 0.8, 0.9, 1. , 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2. , 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3. , 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4. , 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5. , 5.1, 5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6. , 6.1, 6.2, 6.3, 6.4, 6.5, 6.6, 6.7, 6.8, 6.9, 7. , 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8, 7.9, 8. , 8.1, 8.2, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 9. , 9.1, 9.2, 9.3, 9.4, 9.5, 9.6, 9.7, 9.8, 9.9, 10. ]. table=Table(rows=[""R""], cols=[""E(SCF)"", ""E(FCI)""]). for R in Rrange:; CO.R = R. energy('fci'); escf = get_variable('SCF TOTAL ENERGY'); efci = get_variable('CI TOTAL ENERGY'). table[R] = [escf, efci]. print table; ```. The results looks like:; ![Results plot](http://i.imgur.com/iupslMD.png). Full CI shouldn't fail in this case? This was done with f7e55f09f7",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/69:686,energy,energy,686,https://psicode.org,https://github.com/psi4/psi4/issues/69,3,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"If I have Iodine in a molecule I get wrong atom (from I[53] to Mn[25]) in header in cube file:. example:; ```; molecule mol {; 0 1; I 1.05590 0.00000 0.00000; C -1.05590 0.00000 0.00000; H -1.44970 -1.02090 0.00000; H -1.44980 0.51040 0.88420; H -1.44970 0.51050 -0.88410; }. set scf_type df; set basis def2-SVP. E, wfn = energy('pbe',return_wfn=True); set cubeprop_tasks ['density']; set CUBIC_GRID_OVERAGE [8.0, 8.0, 8.0]; set CUBIC_GRID_SPACING [0.17, 0.17, 0.17]; cubeprop(wfn). ```. cube header:; ```. Psi4 Gaussian Cube File.; Property: Dt [e/a0^3]. Isocontour range for 85% of the density: (0.0575417,0); 5 -12.299260 -10.002258 -9.689907; 123 0.170000 0.000000 0.000000; 113 0.000000 0.170000 0.000000; 115 0.000000 0.000000 0.170000; 25 0.000000 0.438284 -0.000000 -0.000001; 6 0.000000 -3.552440 -0.000000 -0.000001; 1 0.000000 -4.296614 -1.929221 -0.000001; 1 0.000000 -4.296803 0.964516 1.670895; 1 0.000000 -4.296614 0.964705 -1.670708; ```; [CH3I.log](https://github.com/psi4/psi4/files/2245612/CH3I.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1113:322,energy,energy,322,https://psicode.org,https://github.com/psi4/psi4/issues/1113,1,['energy'],['energy']
Energy Efficiency,"If Psi is built with debug symbols, I observe that the `cc53` test fails randomly. Failure rate seems to be somewhere between 50% and 80%. If Psi is not built with debug symbols, the test works perfectly. When the bug appears, the LLDB reports `malloc: *** error for object 0x100000000: pointer being freed was not allocated`. The most relevant part of the stack trace is ; ```; frame #5: 0x00000001050d3b64 core.cpython-36m-darwin.so`psi::DPD::free_dpd_block(this=0x000000011485c9c0, array=0x000000011485cb50, n=3, m=3) at block_matrix.cc:176; frame #6: 0x0000000105124f85 core.cpython-36m-darwin.so`psi::DPD::file2_mat_close(this=0x000000011485c9c0, File=0x00007ffeefbf7718) at file2_mat_close.cc:46; frame #7: 0x0000000103c092dc core.cpython-36m-darwin.so`psi::cctriples::EaT_RHF() at EaT_RHF.cc:247; frame #8: 0x0000000103c5477f core.cpython-36m-darwin.so`psi::cctriples::cctriples(reference_wavefunction=std::__1::shared_ptr<psi::Wavefunction>::element_type @ 0x0000000102a00e00 strong=7 weak=2, options=0x00000001067bf240) at triples.cc:154; frame #9: 0x0000000103b45e93 core.cpython-36m-darwin.so`psi::cclambda::CCLambdaWavefunction::compute_energy(this=0x00000001018f4e18) at cclambda.cc:324; ```. I'll leave this bug to somebody familiar with the CC code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1376:315,allocate,allocated,315,https://psicode.org,https://github.com/psi4/psi4/issues/1376,1,['allocate'],['allocated']
Energy Efficiency,"If a user decides to do a DFT computation on an open-shell molecule via the Python API, say on OH (doublet), but forgets to specify the reference, there is a strange memory effect that require restarting the kernel. Here is an example. Suppose we run this code in a cell:; ```python; import psi4; psi4.geometry(""""""; O; H 1 1.0; """"""); psi4.energy(""B3LYP/def2-SVP""); ```; This will yield the error message:; ```; RuntimeError: ; Fatal Error: RHF: RHF reference is only for singlets.; Error occurred in file: /home/jovyan/psi4/psi4/src/psi4/libscf_solver/rhf.cc on line: 94; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); ```. If we try to fix the error by specifying the correct reference, i.e., by **adding a new cell** with the following code:; ```python; psi4.set_options({'REFERENCE' : 'UKS'}); psi4.energy(""B3LYP/def2-SVP""); ```; we still give the same error message. This problem does not affect HF computations.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2372:339,energy,energy,339,https://psicode.org,https://github.com/psi4/psi4/issues/2372,2,['energy'],['energy']
Energy Efficiency,"If a user wants to make a potential energy curve or surface, it is very easy to generate nonsense when using cartesian coordinates. Using nocom and no_reorient fixes this, so maybe the driver should be setting these options if it detects such a case. ``` python; molecule beh2 {; Be 0.0 0.0 z; H 0.0 1.0 0.0; H 0.0 -1.0 0.0; }; molecule beh2_nocom {; Be 0.0 0.0 z; H 0.0 1.0 0.0; H 0.0 -1.0 0.0; nocom; no_reorient; }; activate(beh2); set basis sto-3g; set guess sad; for i in range (1,41):; z = i*0.1; beh2.z = z; e = energy('scf'); print z,e; set guess read; print ''. activate(beh2_nocom); set basis sto-3g; set guess sad; for i in range (1,41):; z = i*0.1; beh2_nocom.z = z; e = energy('scf'); print z,e; set guess read; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/59:36,energy,energy,36,https://psicode.org,https://github.com/psi4/psi4/issues/59,3,['energy'],['energy']
Energy Efficiency,"If during a BCCD(T) calculation CCENERGY errors out due to the CC iterations not converging, Psi4 crashes with an error due to a timer not being on. Cut down input that intentionally triggers the issue:; ```; memory 8 GiB; molecule {; 0 2; H 3.14661583 0.50221279 16.95640639; H -2.34237367 -1.18278602 -9.14879752; H -1.21364759 -0.97589031 -7.97279014; H -0.76962046 -0.48732090 -9.68891324; H -2.68966560 0.90001402 -8.13713011; O 3.52147514 -0.34931909 16.40682068; O -2.05471741 0.80770143 -8.67788722; C -1.63014171 -0.50652361 -8.79096870; symmetry c1; }. set basis aug-cc-pvdz; set reference rohf; set ints_tolerance 1e-14; set d_convergence 5e-9; set e_convergence 1e-10; set ccenergy maxiter 2. energy('BCCD(T)'); ```. Tail of the produced output:; ```; Solving CC Amplitude Equations; ------------------------------; Iter Energy RMS T1Diag D1Diag New D1Diag D2Diag; ---- --------------------- --------- ---------- ---------- ---------- --------; 0 -0.533075915819886 0.000e+00 0.006541 0.000000 0.000000 0.000000; 1 -0.556071307119493 7.982e-02 0.013677 0.000000 0.000000 0.000000; 2 -0.568751401183405 2.374e-02 0.014574 0.000000 0.000000 0.000000. ** Wave function not converged to 1.0e-07 ** . Traceback (most recent call last):; File ""/home/jzz/psi4conda/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 40, in <module>; File ""/home/jzz/psi4conda/lib//python3.7/site-packages/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/jzz/psi4conda/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2673, in run_bccd; ref_wfn = core.ccenergy(ref_wfn). RuntimeError: ; Fatal Error: Timer ccenergy is not on.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1584239292352/work/psi4/src/psi4/libqt/timer.cc on line: 1143; The most recent 5 function calls were:. psi::timer_off(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocato",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1864:705,energy,energy,705,https://psicode.org,https://github.com/psi4/psi4/issues/1864,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"If the SCF calculation raises a ``ConvergenceError``, the default ``SCF_TYPE`` option is not restored to the previous value. This means that if the exception is catched, and the program continues, all subsequent calculations might use a different SCF algorithm. I'm using ``psi4 1.8`` installed through ``conda-forge``. Minimal reproducible example; ```python; import numpy as np; import psi4; from psi4.driver.p4util import OptionsState. # Create water molecule.; positions = np.array([; [-0.2950, -0.2180, 0.1540],; [-0.0170, 0.6750, 0.4080],; [0.3120, -0.4570, -0.5630],; ], dtype=np.double); molecule = psi4.core.Molecule.from_arrays(geom=positions, units='angstrom', elem=['O', 'H', 'H']). # Configure.; psi4.core.be_quiet(); psi4.core.set_active_molecule(molecule); psi4.set_options(dict(basis='sto-3g', reference='RHF')). # Check scf type.; scf_type1 = psi4.core.get_global_option('SCF_TYPE'). # Run calculation.; psi4.energy(name='scf'). # Check scf type after converged calculation.; scf_type2 = psi4.core.get_global_option('SCF_TYPE'). # Now run an unconverged calculation.; option_stash = OptionsState(['MAXITER']); psi4.set_options(dict(maxiter=1)); try:; psi4.energy(name='scf'); except psi4.ConvergenceError:; pass; option_stash.restore(). # Check scf type after unconverged calculation.; scf_type3 = psi4.core.get_global_option('SCF_TYPE'). print(scf_type1, scf_type2, scf_type3); ```; output; ```; PK PK DF; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3000:926,energy,energy,926,https://psicode.org,https://github.com/psi4/psi4/issues/3000,2,['energy'],['energy']
Energy Efficiency,"If two atoms get within 0.5 Bohr of each other, psi4 crashes. I tracked this down to the overlap matrix having NAN in rows/columns involving AOs centered on the overlapping atom. This seems to be a problem in the part of the code that computes atom mappings, because when I change the tol in petitelist.h:62 to:; `int **compute_atom_map(const Molecule* mol, double tol = 0.1);`; (and the line above), the problem goes away. It seems the AO shells are not created for the overlapping atom, even though parts of the code expect them. Setting c1 symmetry does not help. Here's a small input deck that recreates the problem:. ```; #! H Ghost test. molecule h { ; -1 1; H 0.00000000 0.00000000 0.0; Gh(He) 0.0000000000 0.0000000000 0.2; }. set {; SCF_TYPE DIRECT; DF_SCF_GUESS FALSE; print 4; }. basis {; assign sto-3g; }; energy('scf'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/195:818,energy,energy,818,https://psicode.org,https://github.com/psi4/psi4/issues/195,1,['energy'],['energy']
Energy Efficiency,"If you supply two fragments to Psi4, it will assume the multiplicity of the combined system is the multiplicity of the first fragment, not the multiplicity of the high spin combination. For instance, Psi will attempt to treat the following molecule as a singlet rather than a triplet. Switching the order of the fragments will make Psi look for the triplet. Switching both to be triplets, where the high spin combination is a quintet, will have Psi look for triplets. I haven't tested how it handles more than two fragments. ```; molecule {; 0 1 ; H -0.7589216703 0.0000000000 3.1082565820; H 0.7589216703 0.0000000000 3.1082565820; O 0.0000000000 0.0000000000 2.5216012101; -- ; 0 3 ; S 0.0000000000 0.0000000000 -0.4748174225; O 0.0000000000 0.0000000000 -1.9641940526; symmetry c1; no_reorient; no_com; }. set {; reference uhf ; scf_type direct; basis cc-pVDZ; }. energy('scf'); ```; Attempted on `Git: Rev {master} 9994682`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1106:867,energy,energy,867,https://psicode.org,https://github.com/psi4/psi4/issues/1106,1,['energy'],['energy']
Energy Efficiency,"Implement scheme whereby c-side modules can define minimum ('METHOD CORRELATION ENERGY') or full sets (corl, ref, & total) of psivars, then manager comes through and ; - fills in any blanks; - checks that definitions met and consistent (tot – corl = ref); - ensures that overlapping modules are using consistent names. The quantum chemical facts I've already got in programmatic form in pandas in qcdb, so it's mostly the psi4 interfacing and reconciliation to do. This is already done, small scale, for SAPT. Also, would be nice to autodoc the equations.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/239:80,ENERGY,ENERGY,80,https://psicode.org,https://github.com/psi4/psi4/issues/239,1,['ENERGY'],['ENERGY']
Energy Efficiency,"In [`oeprops.cc`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1415), the function `compute_mulliken_charges()` is defined, which adds a vector of atom-centered Mulliken charges to the wavefunction's array variables:. ```c; void OEProp::compute_mulliken_charges() {; PAC::SharedStdVector Qa, Qb, apcs;; std::tie(Qa, Qb, apcs) = pac_.compute_mulliken_charges(true);; wfn_->set_atomic_point_charges(apcs);. auto vec_apcs = std::make_shared<Matrix>(""Mulliken Charges: (a.u.)"", 1, apcs->size());; for (size_t i = 0; i < apcs->size(); i++) {; vec_apcs->set(0, i, (*apcs)[i]);; }; wfn_->set_array_variable(""MULLIKEN CHARGES"", vec_apcs);; }; ```. It would be useful to also get spin densities here, which would just be `Qa - Qb`. Would it also be possible to add an array variable `MULLIKEN SPIN DENSITIES` which contains this value? (also perhaps for Lowdin populations too)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3211:200,charge,charges,200,https://psicode.org,https://github.com/psi4/psi4/issues/3211,3,"['CHARGE', 'Charge', 'charge']","['CHARGES', 'Charges', 'charges']"
Energy Efficiency,"In general the Psi4 SCF solver is rather straightforward by just running through DIIS iterations until convergence is reached. Fortunately the `SCF` iterations have been moving Python side and doing a smart SCF solver should be much easier. A list of possible tricks:; - Automatic root following: If the energy has converged, but the Fock gradient remains large it would be good to detect this and take a Davidson step to get out of an odd minima.; - Automatic SOSCF detection: If very tight convergences are required (1e-10 or less) SOSCF steps after (1.e-5 density/energy) would be preferred.; - Pure first order stepping: In the case of guess`read` the density is diagonalized leading to steps that could take the result away from the minima. A better approach would be to take first order steps (MO Fock matrix over the energy denominators) so that radical changes in the density do not occur.; - Damp post-guess fluctuations: often after a SAD or GWH guess the energy and density will jump considerably before coming back to something near the initial guess. It could be good to take combinations of the next iteration and guess density to prevent such jumps. In the case of SAD this will mean more computations will be non-variational, but the tradeoff could be worth it.; - SCF shake: As discussed in #875 a small amount of noise added to the orbitals/density at the start of a SCF computation could be useful in finding different minima.; - Damping of wild oscillations: If large oscillations occur in the density this could be detected and damping could be turned on for a short time.; - Many more ideas are possible and a discussion of these could be very useful. Please note that not all tricks need to be implemented at once. I would very much encourage small steps at a time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888:304,energy,energy,304,https://psicode.org,https://github.com/psi4/psi4/issues/888,4,['energy'],['energy']
Energy Efficiency,Inconsistency between Psi4 Scripts Return Energy Function,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2730:42,Energy,Energy,42,https://psicode.org,https://github.com/psi4/psi4/issues/2730,1,['Energy'],['Energy']
Energy Efficiency,Inconsistent DF-CASSCF Energy Output,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2258:23,Energy,Energy,23,https://psicode.org,https://github.com/psi4/psi4/issues/2258,1,['Energy'],['Energy']
Energy Efficiency,Incorrect ghosting behavior for Iodine interaction energy calculations,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/843:51,energy,energy,51,https://psicode.org,https://github.com/psi4/psi4/issues/843,1,['energy'],['energy']
Energy Efficiency,"Input file:. ``` python; import molutil. molecule h2o {; 0 1; O; H 1 r; H 1 r 2 104.479848; units angstrom; }. molecule beh2 {; 0 1; Be 0 0 0 ; H 0 0 r; H 0 0 -r; units angstrom; }. set basis sto-3g. beh2.r=1; molutil.activate(beh2); energy('fci'). h2o.r=1; molutil.activate(h2o); energy('fci'); ```. will calculate the FCI energy of the BeH<sub>2</sub> molecule, then do the RHF of H<sub>2</sub>O but at start of the detci module it will give:. ``` python; Traceback (most recent call last):; File ""<string>"", line 40, in <module>; File ""/home/ward/opt/share/psi/python/driver.py"", line 576, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/home/ward/opt/share/psi/python/proc.py"", line 1975, in run_detci; psi4.detci(); RuntimeError: (matrix_element): nalp/nbet != init_nalp/nbet; ```. Seems like something should be reinitialized after activating a new molecule. Done with 521f06adb441ac1e2f1732eb1cd090190b409c49.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/92:234,energy,energy,234,https://psicode.org,https://github.com/psi4/psi4/issues/92,5,['energy'],['energy']
Energy Efficiency,"Input file:; ```; molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }; set {; basis roos-ano-dz; relativistic x2c; }; energy('scf'); ```; Error Info:; ```; Traceback (most recent call last):; File ""bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""lib/psi4/driver/procedures/proc.py"", line 1917, in run_scf; scf_wfn = scf_helper(name, **kwargs); File ""lib/psi4/driver/procedures/proc.py"", line 1241, in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""lib/psi4/driver/procedures/proc.py"", line 1035, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""lib/psi4/driver/p4util/python_helpers.py"", line 62, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""lib/psi4/driver/qcdb/libmintsbasisset.py"", line 631, in pyconstruct; return_atomlist=return_atomlist); File ""lib/psi4/driver/qcdb/libmintsbasisset.py"", line 753, in construct; filename = cls.make_filename(basgbs); File ""lib/psi4/driver/qcdb/libmintsbasisset.py"", line 1292, in make_filename; basisname = basisname.lower(). AttributeError: 'NoneType' object has no attribute 'lower'; ```; This happens not only with roos-ano-dz basis, but also when a user-defined basis is used.; This problem is actually caused by line 726~730 in lib/psi4/driver/qcdb/libmintsbasisset.py. After line 730: seek['basis'] = [item for item in tmp if item != (None, None, None)], seek['basis'] have only one entry (None, None, BasisSet.decontract), which will cause basgbs == None at line 753.; Actually, after line 730, seek['basis'] should have an entry ('roos-ano-dz-decon', 'roos-ano-dz', BasisSet.decontract) for the program to run correctly. One possible solution is that add a guard:; ```; if basgbs == None:; continue; ```; before line 753: filename = cls.make_filename(basgbs)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/617:115,energy,energy,115,https://psicode.org,https://github.com/psi4/psi4/issues/617,3,['energy'],['energy']
Energy Efficiency,"Issue carried over from [forums](http://forum.psicode.org/t/cant-run-relativistic-calcs-with-decontracted-basis-sets/1177). If the input basis set is decontracted, Psi will fail to recognize the basis set when trying to use a decontracted version of the input basis for relativistic computations. The following input file will fail due to the commented out line. ```; molecule {; 0 1; CL 0.000000000000 0.000000000000 -0.035925275852; H 0.000000000000 0.000000000000 1.246511684916; symmetry c1; }. basis {. set {; basis cc-pvdz-decon; #basis_relativistic cc-pvdz-decon; df_basis_scf cc-pvdz-jkfit; reference rhf ; e_convergence 1.e-10; relativistic x2c ; }. energy('scf'); ```. The bug itself is probably an easy fix once you know what information is not being handled/passed correctly in the basis set machinery. The hard part is knowing that machinery well enough to figure out where. Reporter also noted that this is a blind spot in the test suite, so additional tests here are welcome.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1471:659,energy,energy,659,https://psicode.org,https://github.com/psi4/psi4/issues/1471,1,['energy'],['energy']
Energy Efficiency,Issue causing pywrap-cbs1 to fail. Has existed for many months. Symptom:. ```; terminate called after throwing an instance of 'psi::PsiException'; what(): BasisSet::shell: requested shell is out-of-bounds.; ```. Can generate with:. ```; memory 250 mb. molecule {; O 0.0 0.0 0.0; H 1.0 0.0 0.0; H 0.0 1.0 0.0; O 3.0 3.0 3.0; H 4.0 3.0 3.0; H 3.0 4.0 3.0; }. set basis aug-cc-pvqz; set scf_type pk. energy('scf'); ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/50:397,energy,energy,397,https://psicode.org,https://github.com/psi4/psi4/issues/50,1,['energy'],['energy']
Energy Efficiency,It appears that the (experimental) prune functions break the recently (PR #2743) introduced/re-activated lebedev_mapping:; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L5112 . The pruning with functions reduces the number of points arbitrarily and then the attempt to infer the order from the number of points fails. Technically no entry is found in the std::map and an error or segfault occurs. This does **not** happen with the 'TREUTLER' or 'ROBUST' pruning as these reduce use well-defined orders for different regions.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2754:233,reduce,reduces,233,https://psicode.org,https://github.com/psi4/psi4/issues/2754,2,['reduce'],"['reduce', 'reduces']"
Energy Efficiency,"It appears that the syntax of most of the listed examples here: https://github.com/psi4/psi4/blob/master/psi4/driver/driver_cbs.py#L1377 is outdated.; A `name` and `label` is required. Possibly just `cbs()` to `energy(cbs,` and `cbs_params` to `cbs_metadata` in [7]. Mentioning `psi4.cbs` might need to be adjusted as well.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1544:211,energy,energy,211,https://psicode.org,https://github.com/psi4/psi4/issues/1544,1,['energy'],['energy']
Energy Efficiency,"It is clear to me that, after a full-CI calculation, is possible to print out the two-particle density matrix (2PDM) in MO basis, BUT it is not clear to me if psi4 also allows to print out the 2PDM in AO basis. Could someone help me to solve this problem, please? I really need the 2PDM in AO basis!. Thanks in advance!. PS: this is the input file I am struggling with:. memory 256 mb. molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }. plugin_load(""/auto/store/ale/PSI/objdir/plugins/backtrans/backtrans.so""). set basis 6-31G; set print 5; set OPDM true; set OPDM_PRINT true; set TPDM true; set TPDM_PRINT true; energy('fci'). plugin(""/auto/store/ale/PSI/objdir/plugins/backtrans/backtrans.so"")",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/67:612,energy,energy,612,https://psicode.org,https://github.com/psi4/psi4/issues/67,1,['energy'],['energy']
Energy Efficiency,"It seems there is a weird bug in Psi4 version 1.6.1 when using multithreading and PK as SCF algorithm, which results in essentially random results. I've attached a minimal example python script that runs the same calculation 10 times and prints the results to console. minimal_example.py:; ```; import psi4; import argparse. parser = argparse.ArgumentParser(); parser.add_argument('--num_threads', type=int, default=1); parser.add_argument('--scf_type', type=str, default='DF'); parser.add_argument('--element', type=int, default=1); parser.add_argument('--multiplicity', type=int, default=2); args = parser.parse_args(). psi4.core.be_quiet() # Silence output for clarity.; psi4.set_num_threads(args.num_threads, quiet=True); psi4.set_options({; 'REFERENCE': 'UHF',; 'SCF_TYPE': args.scf_type,; }). for i in range(10):; energy = psi4.energy(; 'pbe0/sto-3g',; molecule=psi4.core.Molecule.from_arrays(; geom=[0, 0, 0],; elez=[args.element],; molecular_charge=0,; molecular_multiplicity=args.multiplicity)); print(energy); ```. To reproduce the behaviour, run; `python minimal_example.py --num_threads 6 --scf_type PK --element 1 --multiplicity 2`. For me, the output of this is (the exact numbers change on re-runs):; > -0.41204465858903644; -0.18510932345625386; 0.18101301722463536; -0.17603191005094254; -0.1034126028084521; -0.04894812237658419; -0.2577286306987443; -0.3757350049677912; -0.26680604410405556; -0.26680604410405556. Interestingly, the issue is not present when using PK and a single thread,; `python test.py --num_threads 1 --scf_type PK --element 1 --multiplicity 2`. nor when using multiple threads, but DIRECT instead of PK; `python test.py --num_threads 6 --scf_type DIRECT --element 1 --multiplicity 2`. In both of these cases, I always get the same output:; > -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.4665091390209042",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2760:820,energy,energy,820,https://psicode.org,https://github.com/psi4/psi4/issues/2760,2,['energy'],['energy']
Energy Efficiency,"It was revealed that single point can behave a little differently between `set basis bas; energy(mtd)` and `energy(mtd/bas)` calls. (copied from #2575). https://github.com/psi4/psi4/pull/2575#discussion_r876092414. Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. So after DDD, the two approaches behave the same. But psio errors aren't user friendly. Should we reconsider whether to auto clean after an energy() call? Advanced users would need to save more files explicitly. Maybe should clean() _before_ an energy() call.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2583:90,energy,energy,90,https://psicode.org,https://github.com/psi4/psi4/issues/2583,12,['energy'],"['energy', 'energy-conv']"
Energy Efficiency,"It would be valuable to developers, nightly builds, and CI testing if libint could be compiled once, then linked in as needed, like we can do for Boost. Much developer anger when CMake spontaneously decides the integrals need recompiling could be soothed! We could test molecules larger than He with density-fitted quad-zeta! The next NSF green initiative could applaud our energy savings!. Who dares to decouple libint from our build system such that it could become a detectable `ExternalProject_Add` CMake module? I think we need to be able to pass in MAX_AM, and it would be nice to have it build both static and shared libraries.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/355:339,green,green,339,https://psicode.org,https://github.com/psi4/psi4/issues/355,2,"['energy', 'green']","['energy', 'green']"
Energy Efficiency,"It would be very handy to have the ability to read/write entire Wavefunctions. We do this somewhat awkwardly for the SCF `read` guess functionality on [this](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1384) line. . Some issues and solutions:; - Serializing basis sets could be problematic. Saving the Python dictionary representation of the basis is the likely solution see [here](https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L43) to get started.; - Molecule can be serialized to/from a string (future JSON) `core.Molecule.create_molecule_from_string(mol_string)`.; - Initializing a new Wavefunction could be done with a long signature call that looks something like `Wavefunction(std::map<str::string, SharedMatrix>, std::map<str::string, SharedVector>, std::map<str::string, Dimension>, ...`. This could help reduce the number of inputs required. Curious if anyone has suggestions to simplify the population of private data. Use cases:; - Write our RHF wavefunction, read in for many post-SCF methods.; - Save initial guesses for tricky to converge molecules.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/887:875,reduce,reduce,875,https://psicode.org,https://github.com/psi4/psi4/issues/887,1,['reduce'],['reduce']
Energy Efficiency,"It's not much advertised, but the cc* modules can do some density fitting. In particular, it's found that:; * df-cc2 rhf gradients run and equal findif gradients. #2137; * df-ccsd rhf gradients run and differ from conventional by <1.e-6 . Jonathon finds that not all terms make use of DF and not hooked up to DF gradient tech.; * df-ccsd rhf energies run and differ from fnocc by 2e-7 for correlation energy (inconsistent ref energy so printing and qcvars differ more); * df-ccsd uhf energies print NYI msg; * df-ccsd rohf energies run and are plausible compared to conventional. But plumbing-wise, these aren't ready to activate:; * ccenergy vs. (fnocc, dfocc) choose a different reference. ccenergy uses CONV as the ints are needed anyways. others choose DF since that's the SCF_TYPE setting; * is DF used thoroughly enough to match DF-only implementations? if not, is it used in the expensive places so that it's worth calling instead of the reliable CONV?; * does df-rohf need validation and if so, from where?. Current state of accessibility for DF CCENERGY is that CCSD has been barred by it being a managed method, while CC2 could be accessed by turning on `cc_type=df`. Probably any DF in CCENERGY is accessible through `energy(""ccenergy"")` with a lot of manual option setting. When I converted CC2 to a managed method (locally), that broke the DF-CC2 gradient test https://github.com/psi4/psi4/blob/master/tests/pytests/test_gradients.py#L41 and reminded me that DF in CCENERGY was semi-active. For now, I plan to add an escape clause to the CC2 managed gradient so that the test can run but otherwise leave DF CCENERGY inaccessible and out of stdsuite and capabilities tables.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2710:401,energy,energy,401,https://psicode.org,https://github.com/psi4/psi4/issues/2710,3,['energy'],['energy']
Energy Efficiency,"Kicking out Boost and libint has substantially reduced our compile time. However, we're still running up against Travis-CI's 50 min max (~10 min of that are in tests). So, here's the facts. Any suggestions for reducing compile time welcome. There are thoughts in the air of moving `bin`s to external projects, where they can be tested separately, but less drastic suggestions preferred. ```; psi4 5216.132 100%; ---------------------------------; dfocc 490.372 9.4%; ccdensity 489.191 9.4%; mints 327.399 6.3%; dpd 321.392 6.2%; psimrcc 297.722 5.7%; core 285.259 5.5%; ccenergy 242.782 4.7%; occ 227.323 4.4%; cclambda 167.325 3.2%; dcft 156.295 3.0%; cceom 156.036 3.0%; ccresponse 137.6 2.6%; fock 136.653 2.6%; sapt_solver 125.653 2.4%; detci 123.652 2.4%; optking 118.63 2.3%; ccsort 118.255 2.3%; cchbar 107.15 2.1%; mcscf 106.969 2.1%; cctriple 91.443 1.8%; iwl 90.624 1.7%; fnocc 77.272 1.5%; qt 69.421 1.3%; functional 65.807 1.3%; psio 59.924 1.1%; scf_solver 57.751 1.1%; trans 51.991 1.0%; cctransort 49.189 0.9%; ciomr 47.597 0.9%; 3index 45.95 0.9%; fisapt 39.127 0.8%; adc 37.382 0.7%; transqt2 34.06 0.7%; thce 33.156 0.6%; findif 31.708 0.6%; scfgrad 30.889 0.6%; moinfo 26.539 0.5%; parallel 23.011 0.4%; dfmp2 19.045 0.4%; options 12.27 0.2%; psi4util 11.808 0.2%; plugin 10.044 0.2%; cubeprop 9.776 0.2%; efp_solver 9.012 0.2%; diis 7.406 0.1%; dmrg 7.377 0.1%; mrcc 6.772 0.1%; gdma_interface 4.447 0.1%; disp 4.221 0.1%; sapt 4.092 0.1%; cholesky 3.863 0.1%; thermo 3.677 0.1%; efp_interface 3.21 0.1%; filesystem 0.613 0.0%. ```. Note to future (http://stackoverflow.com/questions/5962285/cmake-compilation-statistics):. ```; >>> cat time-icpc; #!/bin/bash; { time /path/to/icpc ""$@""; } 2> >(cat <(echo ""/path/to/icpc $@"") - >> /path/to/timeresults.txt); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525:47,reduce,reduced,47,https://psicode.org,https://github.com/psi4/psi4/issues/525,1,['reduce'],['reduced']
Energy Efficiency,"Looks like psi4 is not following instabilities with ROHF. The issue is present in the current master. Debug case:; ```; molecule mol {; 0 1; H 0.530330 0.000000 0.0; H 0.000000 0.530330 0.0; H -0.530330 0.000000 0.0; H -0.000000 -0.530330 0.0; }. memory 31500 mb. set basis aug-pcseg-1; set reference rohf; set guess core; set scf_type pk; set stability_analysis follow; scf_e, scf_wfn = energy('scf', return_wfn = True); ```. This converges as; ```; @ROHF iter 1: -1.35786249373809 -1.35786e+00 3.29066e-02 ; @ROHF iter 2: -1.76576328233758 -4.07901e-01 2.42353e-03 DIIS; @ROHF iter 3: -1.76782078804299 -2.05751e-03 6.21952e-04 DIIS; @ROHF iter 4: -1.76802124530854 -2.00457e-04 4.60781e-05 DIIS; @ROHF iter 5: -1.76802266421582 -1.41891e-06 3.48831e-06 DIIS; @ROHF iter 6: -1.76802267513349 -1.09177e-08 6.89002e-07 DIIS; SO Integrals not on disk, computing...done.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Transforming the one-electron integrals and constructing Fock matrices; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; Lowest ROHF->ROHF stability eigenvalues:-; B1g -0.022531 B2u 0.142418 B3g 0.159990 B1g 0.196160 ; ```; The lowest eigenvalue is significantly negative, and the solution is indeed a saddle point. However, the program does **not** proceed by a SCF restart from displaced orbitals.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/816:388,energy,energy,388,https://psicode.org,https://github.com/psi4/psi4/issues/816,1,['energy'],['energy']
Energy Efficiency,Loosen `json-schema-1-energy` Sensitivity to SCF Procedure,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2323:22,energy,energy,22,https://psicode.org,https://github.com/psi4/psi4/pull/2323,1,['energy'],['energy']
Energy Efficiency,MBIS core and valence charges,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3140:22,charge,charges,22,https://psicode.org,https://github.com/psi4/psi4/issues/3140,1,['charge'],['charges']
Energy Efficiency,MBIS valence charges,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3226:13,charge,charges,13,https://psicode.org,https://github.com/psi4/psi4/pull/3226,1,['charge'],['charges']
Energy Efficiency,MP2 Gradient Incorrect with QMMM charges,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/618:33,charge,charges,33,https://psicode.org,https://github.com/psi4/psi4/issues/618,1,['charge'],['charges']
Energy Efficiency,Making Mulliken and Lowdin charge output more consistent,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/334:27,charge,charge,27,https://psicode.org,https://github.com/psi4/psi4/pull/334,1,['charge'],['charge']
Energy Efficiency,"Memory usage seems to climb upon repeating calculations in the same process. Here's my test script:. ```; import os; import psi4; import psutil. def check_resources():; process = psutil.Process(os.getpid()); return f""Memory used by process: {process.memory_info().rss / (1024 ** 2):.2f} MB"". cyanamide = psi4.geometry(""""""; C 0.000 0.239 0.000; N -0.044 1.395 0.000; N 0.134 -1.155 0.000; H -0.315 -1.556 0.837; H -0.315 -1.556 -0.837; """"""). for n in range(21):; psi4.energy(""r2scan-3c""); psi4.core.clean(). with open(""psi4.log"", ""a"") as f2:; f2.write(f""{n}: {check_resources()}\n""); ```. Here's what I get:. ```; 0: Memory used by process: 498.48 MB; 1: Memory used by process: 463.73 MB; 2: Memory used by process: 538.73 MB; 3: Memory used by process: 610.47 MB; 4: Memory used by process: 726.72 MB; 5: Memory used by process: 788.34 MB; 6: Memory used by process: 848.44 MB; 7: Memory used by process: 904.81 MB; 8: Memory used by process: 912.50 MB; 9: Memory used by process: 912.62 MB; 10: Memory used by process: 1016.02 MB; 11: Memory used by process: 1022.06 MB; 12: Memory used by process: 1037.52 MB; 13: Memory used by process: 1037.52 MB; 14: Memory used by process: 1036.77 MB; 15: Memory used by process: 1039.41 MB; 16: Memory used by process: 1039.16 MB; 17: Memory used by process: 1039.16 MB; 18: Memory used by process: 1039.16 MB; 19: Memory used by process: 1092.38 MB; 20: Memory used by process: 1094.72 MB; ```. After the first call, only about 500 MB of memory have been claimed; after 10 calls, this has crept up to over 1 GB. This could cause issues e.g. in an *ab initio* MD context, or simply in a lengthy optimization...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3207:467,energy,energy,467,https://psicode.org,https://github.com/psi4/psi4/issues/3207,1,['energy'],['energy']
Energy Efficiency,"Mentioned in PR #975 . The behaviour between the two equivalent CBS modes is inconsistent when passed through nbody driver:. ```; molecule ne2 {; 0 1; Ne 0 0 0; --; 0 1; Ne 0 0 2; }. set {; scf_type df; mp2_type df; cc_type df; e_convergence 7; reference rhf; }. E_method_basis = energy(""MP2/cc-pv[tq]z + D:CCSD(T)/cc-pv[dt]z"", bsse_type=""nocp""); E_cbs = energy(cbs, bsse_type=""nocp"", corl_wfn=""mp2"", corl_basis=""cc-pv[tq]z"",; delta_wfn=""ccsd(t)"", delta_basis=""cc-pv[dt]z""). compare_values(E_method_basis, E_cbs, 6, ""Interaction energy"") #TEST ; ``` . In the first case, `name = ""MP2/[...]""` so the sequence is:; ```; energy() -> _nbody_gufunc() -> [-> _cbs_gufunc() -> cbs()] * n => recurse back; ```; In the second case, `name = cbs` which has `__call__`, so:; ```; energy() -> cbs() -> [-> energy() -> _nbody_gufunc()] * x => recurse back; ```; I am not sure what the best way of solving this is: ; - option 1) is to extend the n-body driver to accept `__call__`-able `name`s, ; - option 2) is to bounce out of cbs() when `bsse_type` is passed in, but this would require generating a string-based representation of the cbs method anyway. I don't mind having a go at this once I know which is the preferred solution!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/977:280,energy,energy,280,https://psicode.org,https://github.com/psi4/psi4/issues/977,6,['energy'],['energy']
Energy Efficiency,Migrate energy-based `cc` tests to new standard,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2440:8,energy,energy-based,8,https://psicode.org,https://github.com/psi4/psi4/pull/2440,1,['energy'],['energy-based']
Energy Efficiency,"Minimal example; ```; molecule {; 0 1; Ne; }. my_pbe = {; ""name"": ""my pbe functional"",; ""x_functionals"" : {; ""GGA_X_PBE"" : {}; },; ""c_functionals"" : {; ""GGA_C_PBE"" : {}; }; }. set basis pcseg-1; set basis_guess pcseg-0 # Works	without	this line; energy('scf', dft_functional=my_pbe); ```. The error I get in psi4 1.3.2 is; ```; Traceback (most recent call last):; File ""/usr/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/usr/lib64/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/lib64/psi4/driver/procrouting/proc.py"", line 2002, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/usr/lib64/psi4/driver/procrouting/proc.py"", line 1272, in scf_helper; p4util.banner(name.upper()). AttributeError: 'dict' object has no attribute 'upper'. Printing out the relevant lines from the Psithon --> Python processed input file:; ""GGA_C_PBE"" : {}; }; }; core.set_global_option(""BASIS"", ""pcseg-1""); core.set_global_option(""BASIS_GUESS"", ""pcseg-0""); --> energy('scf', dft_functional=my_pbe); ```; and the same issue is also present in `master`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1876:246,energy,energy,246,https://psicode.org,https://github.com/psi4/psi4/issues/1876,4,['energy'],['energy']
Energy Efficiency,"My best guess (with the latest development version 6833bd5645022b232b82e4ffc84496e5be143506) would be as follows, for a CCSD calculation:. molecule test {; N -0.0074552142 0.0447633077 0.0549133281; H 0.7912317854 0.0113343077 0.0235803281; H -0.3132442140 -0.8795806918 0.2831263280; H -0.3744022140 0.2462893076 -1.0696916713; units angstrom; }; set {; basis cc-pVDZ; freeze_core True; guess sad; }; e, wfn = energy('CCSD', return_wfn=True); molden(wfn, 'ccsd_no.molden', density_a=wfn.Da()). However, the file `ccsd_no.molden` does not give reasonable charges when loaded into Molden:. Mulliken Charges; ================; ; N -0.0793; H -0.4048; H -0.2581; H -0.5537; ; Sum of Mulliken Charges: -1.2959. (There were no such problems with Molden files from plain SCF calculations.). The sum of the occupation numbers in the Molden file is 6.0465. Shouldn't that sum be 10 in this example? Furthermore, with a too-low sum of occupation numbers, I would expect a positive sum of Mulliken charges, so presumably, there is something else going wrong too. I'm not sure if `wfn.Da()` is the right way to get the density matrix? That was just a guess.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504:411,energy,energy,411,https://psicode.org,https://github.com/psi4/psi4/issues/504,5,"['Charge', 'charge', 'energy']","['Charges', 'charges', 'energy']"
Energy Efficiency,"My collaborators are trying to compute the SCF energy with an external one-electron potential added to the Fock matrix (this potential does NOT result from a set of point charges). We were trying to use the `wfn.push_back_external_potential()` functionality to accomplish this, but the external potential is ignored. I tracked down the issue to [this line in `scf_iterator.py`](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/scf_proc/scf_iterator.py#L312) which erases the provided external potential, resulting in only potentials from `PCM/DDX/PE`, added immediately afterwards, being allowed. The problem is completely fixed (at least in our case) by commenting out the aforementioned line of code. I will submit a one-liner PR to do this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3227:47,energy,energy,47,https://psicode.org,https://github.com/psi4/psi4/issues/3227,2,"['charge', 'energy']","['charges', 'energy']"
Energy Efficiency,"My goal is to use `psi4` for a mixed QM/MM simulation (mechanical and electrostatic embedding). I am aware of a previous issue (https://github.com/psi4/psi4/issues/341), however, I have a MD engine at hand and would like to use `psi4` as QM engine only (i.e. energies and gradients on a given molecule with external potential). In that regard, I am wondering what is the best way to use `psi4` to calculate gradients on external point charges from C++. . I am aware of the class `ExternalPotential`, which is demonstrated from the Python side here: https://github.com/psi4/psi4/tree/master/tests/extern1. It looks to me like the following function will return gradients on a given molecule caused by the points charges but not the other way round:. ```C++; /// Compute the gradients due to the external potential; SharedMatrix computePotentialGradients(std::shared_ptr<BasisSet> basis, std::shared_ptr<Matrix> Dt);; ```. However, I could not find any corresponding function that computes gradients on point charges. In case the functionality is not implemented yet, I am happy to volunteer code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2472:435,charge,charges,435,https://psicode.org,https://github.com/psi4/psi4/issues/2472,3,['charge'],['charges']
Energy Efficiency,"NTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE TOTAL ENERGY"": (""VALIRON-MAYER FUNCTION COUNTERPOISE TOTAL ENERGY"", 1.7), # note misspelling; ""VALIRON-MAYER FUNCTION COUTERPOISE INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY"", 1.7),; ``` ; - [x] added managed mode for scf gradient. it's not wholly effective at consolidating code, though, since only triggers for `gradient(""hf"")`, not `gradient(correlated)`. digits to compare has to be relaxed, but this has been seen with other qc programs, too.; - [x] Distributed driver should not be advertised for use with QCFractal at this time. It hasn't been tested in a while, and mem, cores, etc. setting may need tweaking in a non-continuous mode. Use it experimentally and report back.; - [x] n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `embedding_charges` kwarg.; - [x] stdsuite: consolidated the caller fn to remove duplicate code. added HF Hessian testing, through DF can't be uncommented until refs released in qcng.; - [x] the addition of ccsd iterations qcvar to dfocc could maybe be reverted. ## Questions; - [x] Any critical eye or independent tests that you can bring to the manybody wrapper much appreciated, @jeffschriber. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:7473,charge,charges,7473,https://psicode.org,https://github.com/psi4/psi4/pull/2575,2,"['Charge', 'charge']","['Charges', 'charges']"
Energy Efficiency,NaN energy for a reasonable sized DF-SCF computation,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/371:4,energy,energy,4,https://psicode.org,https://github.com/psi4/psi4/issues/371,1,['energy'],['energy']
Energy Efficiency,"Normal CCSD and CCSD(T) calculations work fine with big basis sets up to aug-cc-pV5Z but SAPT crashes for me with:. QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('AUG-CC-PV5Z', 'AUG-CC-PV5Z', None)]. Input:. ```; molecule LiF {; 1 1; Li 0.000000000 0.000000000 0.000000000; --; -1 1; F 0.500000000 0.000000000 0.000000000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pv5z; }. set_memory(32000000000); energy('sapt2+3(ccd)dmp2'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1557:521,energy,energy,521,https://psicode.org,https://github.com/psi4/psi4/issues/1557,1,['energy'],['energy']
Energy Efficiency,"Normally Psi4 gives me helpful error messages but in this case I have poked around a bit and can't figure out how to fix my input. I'm trying to create input files with all basis data supplied from within the file itself, so old jobs are self-documenting. I am trying to run the input below with the latest binary installed via conda. It crashes with the message. ```; Traceback (most recent call last):; File ""<string>"", line 59, in <module>; Boost.Python.ArgumentError: Python argument types in; psi4.scf(str); did not match C++ signature:; scf(void); scf(P7_object, P7_object); ```. Here is the input I am trying to run. I've made some mistake trying to implement what I read in the docs, but I can't figure out what. I retrieved the basis set data in Gaussian 94 format from the EMSL Basis Set Exchange. ```; #methane test. molecule {; #charge multiplicity; 0 1; C0 0.000000 0.000000 0.000000; H0 1.092199 0.000000 -0.000001; H0 -0.364063 0.138497 1.020380; H0 -0.364067 -0.952923 -0.390247; H0 -0.364068 0.814425 -0.630132; }. set globals {; reference RHF; maxiter 999; }. basis {; assign C0 C0bas; assign H0 H0bas; #C 3-21G; [ C0bas ]; cartesian; ****; C 0 ; S 3 1.00; 172.2560000 0.0617669 ; 25.9109000 0.3587940 ; 5.5333500 0.7007130 ; SP 2 1.00; 3.6649800 -0.3958970 0.2364600 ; 0.7705450 1.2158400 0.8606190 ; SP 1 1.00; 0.1958570 1.0000000 1.0000000 ; ****; #H 3-21G; [ H0bas ]; cartesian; ****; H 0 ; S 2 1.00; 5.4471780 0.1562850 ; 0.8245470 0.9046910 ; S 1 1.00; 0.1831920 1.0000000 ; ****; }. scf('energy'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/79:841,charge,charge,841,https://psicode.org,https://github.com/psi4/psi4/issues/79,2,"['charge', 'energy']","['charge', 'energy']"
Energy Efficiency,"Note this is only a psivars issue -- printed energies are fine. singles contributions to UHF & ROHF CCSD (https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/energy.cc#L132-L137) and below) aren't getting stored in psivars. in consequence, `CCSD SAME-SPIN CORRELATION ENERGY` and `CCSD OPPOSITE-SPIN CORRELATION ENERGY` don't sum to `CCSD CORRELATION ENERGY`. * [ ] for the CC people out there -- speak up if the CCSD analogs of the following definitions offend. they're [what qcschema is using](https://github.com/MolSSI/QCSchema/blob/a4329e626903ec0391d21179f0754bdc65e6831b/qcschema/dev/properties/cc_properties.py#L7-L38); ```; qcvardefs['MP2 SAME-SPIN CORRELATION ENERGY'] = {; 'units': 'Eh',; 'glossary': r""""""; The unscaled portion of the MP2 correlation energy; from same-spin or triplet doubles correlations. canonical_corl(os_scale=1, ss_scale=1) = singles + os_scale * (tot_corl - ss_corl) + ss_scale * ss_corl; :math:`E_{\text{SS}}` in Eq. :eq:`MP2corl`.; """"""}. qcvardefs['MP2 OPPOSITE-SPIN CORRELATION ENERGY'] = {; 'units': 'Eh',; 'glossary': r""""""; The unscaled portion of the MP2 correlation energy; from opposite-spin or singlet doubles correlations.; :math:`E_{\text{OS}}` in Eq. :eq:`MP2corl`.; """"""}. qcvardefs['MP2 SINGLES ENERGY'] = {; 'units': 'Eh',; 'glossary': r""""""; The singles portion of the MP2 correlation energy.; Zero except in ROHF.; :math:`E_{\text{S}}` in Eq. :eq:`MP2corl`.; """"""}. qcvardefs['MP2 DOUBLES ENERGY'] = {; 'units': 'Eh',; 'glossary': r""""""; The doubles portion of the MP2 correlation energy; including same-spin and opposite-spin correlations.; :math:`E_{\text{D}}` in Eq. :eq:`MP2corl`.; """"""}; ```. - [ ] let us implement storing singles for all three refs in cc* modules (only rohf will be nonzero).; - [ ] let us implement storing all three consistently in any other cc codes; - [ ] let us make sure to place these var on wfn, not in `P::e`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1702:173,energy,energy,173,https://psicode.org,https://github.com/psi4/psi4/issues/1702,12,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"NumPY-1.24.0 got released in late December, and Debian's psi4 (still based on 1.3 due to LibInt) now fails (most of) the testsuite like this:. ```; 133/143 Test #406: python-curve .....................***Failed 0.42 sec; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/tests/python/curve/input.py"", line 21, in <module>; out[d] = psi4.energy('SCF', molecule=geom); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/procrouting/proc.py"", line 2002, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/procrouting/proc.py"", line 1276, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/p4util/python_helpers.py"", line 115, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/p4util/python_helpers.py"", line 79, in _pybuild_basis; bs, basisdict = qcdb.BasisSet.pyconstruct(; ^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/qcdb/libmintsbasisset.py"", line 635, in pyconstruct; mol = Molecule(mol); ^^^^^^^^^^^^^; File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/qcdb/molecule.py"", line 143, in __init__; self._internal_from_dict(molrec, verbose=verbose); File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/qcdb/molecule.py"", l",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2865:346,energy,energy,346,https://psicode.org,https://github.com/psi4/psi4/issues/2865,3,['energy'],['energy']
Energy Efficiency,ONV = 1.00e-06 MIXED4 = yes; OEI FILE = 35 R4S = no; REPL OTF = no; TEI FILE = 72 DIAG METHOD = SEM; PRECONDITIONER= DAVIDSON UPDATE = DAVIDSON; S = 0.0000 Ms0 = yes; MAX NUM VECS = 13; RESTART = no; GUESS VECTOR = H0BLOCK OPENTYPE = NONE; REF SYM = auto; COLLAPSE SIZE = 1 HD AVG = EVANGELISTI; LSE = no LSE ITER = 0; HD OTF = yes NO DFILE = no; MPN = no MPN SCHMIDT = no; ZAPTN = no MPN WIGNER = no; PERT Z = 1.0000 FOLLOW ROOT = 0; NUM THREADS = 12; VECS WRITE = no NUM VECS WRITE = 0; FILTER GUESS = no SF RESTRICT = no; OPDM = no TRANS DENSITY= no. FILES = 50 51 52 53. EX ALLOW = 1 1 1 1 1 1 1 1 1 1; STATE AVERAGE = 1(1.00); STATE AVERAGE = 1(1.00). ORBITALS:; NMO = 46; FROZEN CORE = 0 RESTR CORE = 0; FROZEN VIRT = 0 RESTR VIRT = 0; DROPPED CORE = 0 DROPPED VIRT = 0; EXPLICIT CORE= 0 ORBS IN CI = 46; NUM ALP = 5 NUM BET = 5; NUM ALP EXPL = 5 NUM BET EXPL = 5; IOPEN = no; RAS1 LVL = 4 A RAS3 MAX = 5; RAS1 MIN = 0 B RAS3 MAX = 5; A RAS1 LVL = 4 RAS4 LVL = 46; A RAS1 MIN = 0 A RAS4 MAX = 0; A RAS1 MAX = 5 B RAS4 MAX = 0; B RAS1 LVL = 4 RAS4 MAX = 0; B RAS1 MIN = 0 A RAS34 MAX = 5; B RAS1 MAX = 5 B RAS34 MAX = 5; RAS3 LVL = 5 RAS34 MAX = 10; RAS3 MAX = 10. DOCC = 2 0 0 0 0 1 1 1; SOCC = 0 0 0 0 0 0 0 0. FROZEN DOCC = 0 0 0 0 0 0 0 0; RESTRICTED DOCC = 0 0 0 0 0 0 0 0; RAS 1 = 2 0 0 0 0 1 1 1; RAS 2 = 0 0 0 0 0 0 0 0; RAS 3 = 9 3 3 3 2 7 7 7; RAS 4 = 0 0 0 0 0 0 0 0; RESTRICTED UOCC = 0 0 0 0 0 0 0 0; FROZEN UOCC = 0 0 0 0 0 0 0 0. ---. There are 1370754 alpha strings; There are 1370754 beta strings; CI space contains 8 blocks. CI space requires 234872686232 determinants. Check SCF Energy from 1- and 2-electron integrals. SCF Energy (ref): -99.4508070223; Nuclear repulsion energy: 0.0000000000; One-electron energy: -143.9965314821; Two-electron energy: 44.5457244598; Dropped core energy: 0.0000000000; Total electronic energy: -99.4508070223; Total SCF energy: -99.4508070223. CI vector/subblock length = 29726587396; init_array: trouble allocating memory; size = 29726587396,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:13070,Energy,Energy,13070,https://psicode.org,https://github.com/psi4/psi4/issues/204,8,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Okay, onto the next problem. I want to run a DFT calculation on a system where converging even HF takes SOSCF to work. However, reading in the HF orbitals fails. ; ```; molecule {; 0 1; symmetry c1; Mn -0.0128264866 -0.0002779912 -0.1091894544; O -1.1037647823 1.0246639195 -1.2821459116; O -0.4319309790 -1.5910632792 -1.0423314985; N 0.7243918073 1.6205280457 0.7709992473; N 1.3008767173 -0.9287768925 1.0635839133; C -1.2886186814 2.2834208702 -1.2181338272; C -0.7050865946 3.1821062059 -0.3604271375; C 0.3534920334 2.8195308082 0.5207059889; C 0.2177419816 -2.6945497951 -0.9662726987; C 1.2181378357 -3.0250490115 -0.0961995911; C 1.7180430400 -2.1229929449 0.8899899444; C 1.9393113446 1.3525171542 1.5367699106; C 1.8333722479 -0.0604962603 2.1055467704; H 0.8908035853 3.6241374839 1.0039698993; H 2.5024254412 -2.4854165868 1.5399007635; H 2.7858100041 1.4098930461 0.8661311665; H 1.1490336627 -0.0652673733 2.9502674019; H 2.0638511115 2.0769335299 2.3353274192; H 2.7993768711 -0.4085469833 2.4534782102; H -1.9892347032 2.6686747336 -1.9454961675; H -0.0986239324 -3.4441353556 -1.6764363233; Cl 1.8821942342 0.3098852687 -1.6599082362; O -1.1395010178 -0.1703680057 0.9263551082; H -0.9312248148 4.2251864392 -0.4696082573; H 1.6695378989 -3.9953914470 -0.1633815245; }. # Run SCF, initialize in smaller basis; set basis 6-31G*; set basis_guess 3-21G; set scf_type pk; set soscf true; scf_e, scf_wfn = energy('scf', return_wfn=True). # Rerun with BP86 to get better density; set scf guess read; scf_e, scf_wfn = energy('bp86', return_wfn=True); ```. outputs in the BP86 part; ```; Warning! Guess was READ without Ca set, switching to CORE!; This option should have been configured at the driver level. SCF Guess: Core (One-Electron) Hamiltonian.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/612:1419,energy,energy,1419,https://psicode.org,https://github.com/psi4/psi4/issues/612,2,['energy'],['energy']
Energy Efficiency,"One of our students has been working through the Psi4Education site and one of the labs requires the user to run MP4 on boron. If I'm reading the [managed method matrix](http://psicode.org/psi4manual/master/proc_py.html#table-managedmethods) correctly then the user should specify an ROHF reference and Psi4 will use DETCI. However we receive the following error:. Input file: [h2o_mp4.txt](https://github.com/psi4/psi4/files/148253/h2o_mp4.txt). ```; An error has occurred Py-side; Traceback:; <class 'p4xcpt.ManagedMethodError'>: select_mp4: Method 'mp4' with MP_TYPE 'CONV' and REFERENCE 'ROHF' not available: File ""<string>"", line 27, in <module>. File ""/Users/jturney/Code/Chemistry/psi4/source/share/python/driver.py"", line 586, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/Users/jturney/Code/Chemistry/psi4/source/share/python/proc.py"", line 831, in select_mp4; raise ManagedMethodError(['select_mp4', name, 'MP_TYPE', mtd_type, reference, module]); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/282:738,energy,energy,738,https://psicode.org,https://github.com/psi4/psi4/issues/282,2,['energy'],['energy']
Energy Efficiency,"One of the [limitations](https://psicode.org/psi4manual/master/tdscf.html#known-limitations) of Psi's TDSCF implementation is that it raises an error upon requesting TDDFT triplets from a restricted reference. To understand the problem, it's easiest to work with a toy system. I'm choosing the following:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. mtd = ""hf/sto-6g"". set tdscf_tda true; set reference uks ; set tdscf_states [0, 0, 2, 0]. energy(""td-"" + mtd). set reference rks ; set tdscf_states [0, 0, 1, 0]; energy(""td-"" + mtd). set tdscf_triplets only; energy(""td-"" + mtd); ```. Within the TDA approximation, we need to find the roots of a Hermitian matrix. This matrix has the structure J + V + X. J consists of _Coulomb integrals_, V consists of _the exchange correlation second derivative elements_, and X is everything else - it's not relevant for this problem. Because of the spin-properties of the Hamiltonian (and approximate DFT functionals), the matrix becomes block-diagonal upon transforming the basis states (i-a) α and (i-a) β into their normalized plus and minus combinations. The plus eigenvectors correspond to singlets, and the negative eigenvectors to triplets. Matrix elements take the form 1/2 * [(α|α) ± (α|β) ± (β|α) + (β|β)], where parentheses denote a spin-dependent matrix element. Upon exploiting spin-restriction, this reduces to [(α|α) ± (α|β)]. Now, J matrix elements are spinfree, i.e., the Coulomb integral (pq|pq) doesn't care whether the bra and the ket have the same spin-index or not, so long as p and q have the same spinindex. Therefore, the plus spin combination reduces to 2 * (pq|pq), and the minus spin combination reduces to 0. The V matrix elements are not spinfree. Whether you differentiate with respect to an alpha excitation twice or an alpha followed by a beta produces different integrals. The formula [(α|α) ± (α|β)] does not simplify. Unfortunately, Psi combines the V terms into the J terms. Psi currently computes the + case of the V ter",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2841:446,energy,energy,446,https://psicode.org,https://github.com/psi4/psi4/issues/2841,3,['energy'],['energy']
Energy Efficiency,"Original report: http://forum.psicode.org/t/tdscf-calculation-for-large-system/2407. Contrary to the forum report I found no issue with B3LYP.; Only the combination of range-separated functionals and `mem_df` seems to give wrong results.; Note, for current PSI4 v1.5 the `wcombine` option is turned off https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.cc#L111. H2O2 example:; ```; from psi4.driver.procrouting.response.scf_response import tdscf_excitations; mol = geometry(""""""; 0 1; O 0.000000000000 0.695000000000 -0.049338363732; O 0.000000000000 -0.695000000000 -0.049338363732; H -0.388142000000 0.895249000000 0.783035636268; H 0.388142000000 -0.895249000000 0.783035636268; symmetry c1; """"""); psi4.set_options({; 'basis':'def2-SVP',; 'scf_type':'mem_df',; 'save_jk': True,; 'tdscf_tda':True,; }); e, wfn = psi4.energy(""cam-b3lyp"", return_wfn=True, molecule=mol); res = tdscf_excitations(wfn, states=2,tda=True,r_convergence=2e-7); ```. [H2O2_memDF.txt](https://github.com/psi4/psi4/files/8027476/H2O2_memDF.txt); [H2O2_PK.txt](https://github.com/psi4/psi4/files/8027475/H2O2_PK.txt); [H2O2_diskDF.txt](https://github.com/psi4/psi4/files/8027477/H2O2_diskDF.txt). ---. QCHEM results; ```; Excited state 1: excitation energy (eV) = 6.5611; Excited state 2: excitation energy (eV) = 6.7734; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2431:834,energy,energy,834,https://psicode.org,https://github.com/psi4/psi4/issues/2431,3,['energy'],['energy']
Energy Efficiency,"P2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimized now.; 	Transforming MOs to the semicanonical basis... ; Switching to the standard DF-MP2 computation... ; ```; are present in the reference output file but not in the output file that I posted. This is due to the if clause [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2648), which requires `std::fabs(DE) >= tol_Eod`, i.e., that the observed delta E is _greater than_ the user-specified convergence criteria. This situation is precisely what the fix to #1143 no longer allows for, so I must conclude that the code in that if suite is what is responsible for the discrepancy. It looks like this code in this if suite is re-computing the energy using the orbitals and T-amplitudes computed during the Lagrangian optimization. Hence the discrepancy is that when the user's energy convergence criteria isn't met, the Lagrangian information was overwritten with the orbital-and-amplitude formalism. Is this correct? Why does this code only run if the user's energy convergence criteria isn't met? Shouldn't we warn the user that these kinds of discrepancies are possible?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509:3965,energy,energy,3965,https://psicode.org,https://github.com/psi4/psi4/issues/1509,3,['energy'],['energy']
Energy Efficiency,"P; }. molecule {; 0 1; C -4.203390 -0.066910 -0.001310; C -4.193940 -1.465920 -0.000650; C -2.996540 0.640780 -0.000920; C -1.780230 -0.050540 0.000130; C -1.770780 -1.449550 0.000790; C -2.977630 -2.157240 0.000400; H -2.970320 -3.239550 0.000910; H -0.829810 -1.984370 0.001610; H -5.127590 -2.013410 -0.000960; H -5.144360 0.467920 -0.002130; H -0.846580 0.496950 0.000440; H -3.003850 1.723100 -0.001430; }. nrg, wfn = optimize('B3LYP', return_wfn=True); ```. top of output file for psi4 version (I'm using psi4 in WSL, reinstalled today by running the commands on http://www.psicode.org/downloads.html):; ```; Psi4 1.3.2 release. Git: Rev {HEAD} ecbda83 ; ```. towards the end of the output:; ```; ==> Convergence Check <==. Measures of convergence in internal coordinates in au.; Criteria marked as inactive (o), active & met (*), and active & unmet ( ).; ---------------------------------------------------------------------------------------------; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ; ---------------------------------------------------------------------------------------------; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o; ---------------------------------------------------------------------------------------------; 2 -232.08477729 -4.57e-04 2.31e-04 * 9.07e-05 o 6.20e-04 * 2.31e-04 o ~; ---------------------------------------------------------------------------------------------. **** Optimization is complete! (in 2 steps) ****. ==> Optimization Summary <==. Measures of convergence in internal coordinates in au.; --------------------------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------------------------- ~; 1 -232.084319861329 -232.084319861329 0.00763634 0.00254450 0.02132377 0.00710535 ~; 2 -232.084777290884 -0.000457429555 0.00023",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1947:1158,Energy,Energy,1158,https://psicode.org,https://github.com/psi4/psi4/issues/1947,1,['Energy'],['Energy']
Energy Efficiency,"PBEh-3c passes the wrong energy into Optking or Findif, sometimes, for some molecules. It happens for O2(s) but not for C3H8. See the O2(s) log posted here:. [O2 logfile](https://github.com/psi4/psi4/files/2573213/o2.txt). As @hokru pointed out, it's the D3 dispersion energy of O2 that gets forwarded instead of the total energy, the most likely culprit (as identified by @andysim) is here:. https://github.com/psi4/psi4/blob/8cb0765c2735b0735fc3468d210d258de476a72b/psi4/driver/qcdb/intf_dftd3/runner.py#L88",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1356:25,energy,energy,25,https://psicode.org,https://github.com/psi4/psi4/issues/1356,3,['energy'],['energy']
Energy Efficiency,PBEh-3c: wrong energy passed into findif/gradient,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1356:15,energy,energy,15,https://psicode.org,https://github.com/psi4/psi4/issues/1356,1,['energy'],['energy']
Energy Efficiency,"PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Internal code has been replaced by an external Python module, QCManyBody; - [x] Several n-body efficiency improvements and a new option `supersystem_ie_only` that computes the IE rather than MBE, useful for trimers and larger.; - [x] bug fix for gradient or Hessian vmfc for max_nbody >=3. ## Dev notes & details; * Unrelated; - [x] updated basis_set_exchange to v0.10 and probably fixed the internal build; - [x] switched internal build of optking to a tag that can work with py312; - [x] qcvar `GEOMETRY ITERATIONS` wasn't actually getting set. `OPTIMIZATION ITERATIONS` is actually listed in the docs glossary, so switched to that and set it.; - [x] added `resp` to the codedeps now that it's on c-f, and thus to the ecosystem testing; - [x] fixed previously excused docs links to qcfractal; - [x] added back dftd4 to ecosystem for py312; * QCManyBody: build; - [x] Adds a new pure-python required dependency, `qcmanybody`, available from c-f or pypi; * QCManyBody: BSSE efficiency improvements/bug fixes; - [x] `bsse_type=cp` + `return_total_data=True` (not default for energy) will now no longer do every species in both supersystem (for cp) and natural (for uncp) basis sets. It will do everything in the supersystem basis (since cp requested) and only monomers in the monomer basis (for rtd=T).; - [x] `driver=g/h` + `return_total_data=False`, an unlikely combination, won't just fail with syntax error; - [x] `bsse_type=vmfc` + `driver=g/h + `max_nbody`>2 are now computed correctly. Previously (at least since v1.6), only the two highest-body terms were getting summed into the contribution, so values were wrong for trimers and above (assuming max_nbody=fragment count).; - [x] `bsse_type=vmfc` + multilevel were running unnecessary calculations, so now more efficient; * QCManyBody output; - [x] the internal driver_nbody code had been setting a lot of terse qcvariables like ""2"", ""3CP"", ""GRADIENT 1"". ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3160:1521,energy,energy,1521,https://psicode.org,https://github.com/psi4/psi4/pull/3160,1,['energy'],['energy']
Energy Efficiency,PSIO_ERROR during fnocc energy calculation,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34:24,energy,energy,24,https://psicode.org,https://github.com/psi4/psi4/issues/34,1,['energy'],['energy']
Energy Efficiency,"Pair energies computed by `fnocc` have some issues:. 1. They're not computed consistently across methods. DF-CCSD has them, but non-DF methods do not, for some reason.; 2. `fnocc` computes spin-summed pair energies. The convention we agreed upon at the conference call was to separate same-spin and opposite-spin pair energies.; 3. `fnocc` stores the pair energies with the convention that \sum_{ij} e_ij should equal the correlation energy. As agreed upon at the conference call, we want e_ij to be the total energy of the (i, j) pair. If i != j, the current convention is off by a factor of 2.; 4. The `fnocc` pair energies do not include the delta MP2 correction, so \sum_{ij} e_ij does not equal the correlation energy if FNOs are used. I'll be the one to deal with at least the three items on this list, but obligatory @edeprince3 ping.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2560:434,energy,energy,434,https://psicode.org,https://github.com/psi4/psi4/issues/2560,3,['energy'],['energy']
Energy Efficiency,"Possibly the following could (also) be due to my misunderstanding of how the input is supposed to work. My apologies if that is the case. In the following example, the perturbation with the external field seems to be ignored:. ```; molecule {; 0 1; He 0.0 0.0 0.0; symmetry c1 # field breaks symmetry; }. set {; reference rhf; basis aug-cc-pvtz; relativistic x2c; perturb_h true; perturb_with dipole; perturb_dipole [0.0, 0.0, 0.1]; }. energy('scf'); ```. I've attached a series of examples, with non-relativistic, dkh and x2c calculations on a dummy test case: [reltest.zip](https://github.com/psi4/psi4/files/3884841/reltest.zip). ```; grep ""Total Energy ="" *.out; dkh_0.out: Total Energy = -2.8613053380694344; dkh_p.out: Total Energy = -2.8679760471040372; nrl_0.out: Total Energy = -2.8612063084748343; nrl_p.out: Total Energy = -2.8678772073375063; x2c_0.out: Total Energy = -2.8613053511779820; x2c_p.out: Total Energy = -2.8613053511779745; ```. The suffix `_0` and `_p` stand for ""no field"" and ""dipolar field"" respectively.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1758:436,energy,energy,436,https://psicode.org,https://github.com/psi4/psi4/issues/1758,8,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,Potential Energy Curves of the CF molecule,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181:10,Energy,Energy,10,https://psicode.org,https://github.com/psi4/psi4/issues/3181,1,['Energy'],['Energy']
Energy Efficiency,"Previously, the following input file would have ran a combination of DFJK and DiskJK calculations. Now it seems to run DiskJK calculations twice. ```; molecule acetone {; 0 1; H 0.000000 2.136732 -0.112445; H 0.000000 -2.136732 -0.112445; H -0.881334 1.333733 -1.443842; H 0.881334 -1.333733 -1.443842; H -0.881334 -1.333733 -1.443842; H 0.881334 1.333733 -1.443842; C 0.000000 0.000000 0.000000; C 0.000000 1.287253 -0.795902; C 0.000000 -1.287253 -0.795902; O 0.000000 0.000000 1.227600; units angstrom; }. set globals {; df_scf_guess true; scf_type PK; basis 3-21g; docc [8, 1, 2, 5]; guess GWH; reference RHF; e_convergence 12; }. energy('scf'); ```. ```; ==> Primary Basis <==. Basis Set: 3-21G; Number of shells: 32; Number of basis function: 48; Number of Cartesian functions: 48; Spherical Harmonics?: false; Max angular momentum: 1. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A1 21 21 8 8 8 0; A2 4 4 1 1 1 0; B1 8 8 2 2 2 0; B2 15 15 5 5 5 0; -------------------------------------------------------; Total 48 48 16 16 16 0; -------------------------------------------------------. ==> Integral Setup <==. Batch 1 pq = [ 0, 397] index = [ 0,79003]; ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory (MB): 715; Schwarz Cutoff: 1E-12. Minimum eigenvalue in the overlap matrix is 1.5083126009E-02.; Using Symmetric Orthogonalization.; SCF Guess: Generalized Wolfsberg-Helmholtz. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter 1: -187.27391666424671 -1.87274e+02 1.12539e-01; @RHF iter 2: -180.35110679174790 6.92281e+00 1.03058e-01 DIIS; @RHF iter 3: -189.00974758567247 -8.65864e+00 7.17009e-02 DIIS; @RHF iter 4: -190.36715264104453 -1.35741e+00 3.48777e-02 DIIS; @RHF iter 5: -190.83292951413978 -4.65777e-01 9.44992e-03 DIIS; @RHF iter 6: -190.87826214635624 -4.53326e-02 3.45136e-03 DIIS; @RHF i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/281:635,energy,energy,635,https://psicode.org,https://github.com/psi4/psi4/issues/281,1,['energy'],['energy']
Energy Efficiency,"Previously, this was returning the last computed energy. Now, it returns the energy of the last IRC point. This should fix the test cases, which were failing on some systems.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/292:49,energy,energy,49,https://psicode.org,https://github.com/psi4/psi4/pull/292,2,['energy'],['energy']
Energy Efficiency,"Psi4 0.3.62 Driver Git: Rev {master} 1b48d22; compiled with ""setup --fc gfortran --erd on"". HF calculation for H2O exists after 2 SCF iterations; no energy change.; output states ""Two-Electron Energy = 0.0000000000000000"" . I specified ""INTEGRAL_PACKAGE ERD"" in the input.; It is the case for DF and direct SCF. PK gives a non-converging, oscillating SCF. Did not try the other options. ""INTEGRAL_PACKAGE libint"" works normally. Let me know if I should report more data. cheers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/173:149,energy,energy,149,https://psicode.org,https://github.com/psi4/psi4/issues/173,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"Psi4 1.4a2.dev66, Git: Rev {master} 6e67529. see topic. Only recently noticed this. It used to do only dimer-basis calculations. ```; molecule ne2 {; 0 1; Ne 0 0 0; --; 0 1; Ne 0 0 2; }; set scf_type pk; energy('scf/3-21G', bsse_type=""cp""); ```. output:; ``` ===> N-Body Interaction Abacus <===; BSSE Treatment: cp; Number of 1-body computations: 4; Number of 2-body computations: 1; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691:204,energy,energy,204,https://psicode.org,https://github.com/psi4/psi4/issues/1691,1,['energy'],['energy']
Energy Efficiency,"Psi4 LiCN/6-31G* (symmetry c1, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.5315015582624; CI ROOT 2 TOTAL ENERGY:-99.53150155297872; CI ROOT 3 TOTAL ENERGY:-99.52581092386518; CI ROOT 4 TOTAL ENERGY:-99.52581092379563; CI ROOT 5 TOTAL ENERGY:-99.5096013650753; CI ROOT 6 TOTAL ENERGY:-99.48378441050741; ````; this result doesn't change with or without frozen core, but the results are fine with STO-3G, as well as water with 6-31G*. the results also match GAMESS if I perturb the linear geometry of LiCN, as suggested by @psi-rking , which suggests maybe an issue with finding roots of whatever symmetry the first excited state is; however, adding more roots (or running with/without symmetry) doesn't resolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems to converge in just one step for c1 and c2v. I suppose it's possible the guess space just isn't grabbing roots for all symmetries, but increasing the number of roots to 30 doesn't change the results. perhaps more disturbing, though, is that the in-core diagonization routine `RSP` gives yet another set of results:; ```; Psi4 LiCN/6-31G* (symmetry c1, RSP solver); CI ROOT 1 TOTAL ENERGY:-99.58887523722994; CI ROOT 2 TOTAL ENERGY:-99.56069933848028; CI ROOT 3 TOTAL ENERGY:-99.56069933848008; CI ROOT 4 TOTAL ENERGY:-99.53483755106353; CI ROOT 5 TOTAL ENERGY:-99.53483755106343; CI ROOT 6 TOTAL ENERGY:-99.53418772103414; ```; here, we find 3 roots lower in energy than either GAMESS or the default Psi4 routines, and we also recover the -99.534837 E_h root, but this time a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:1787,ENERGY,ENERGY,1787,https://psicode.org,https://github.com/psi4/psi4/issues/3083,1,['ENERGY'],['ENERGY']
Energy Efficiency,"Psi4 changes directory if **DFT-D3** is used:; ```python; import os; import psi4. print(psi4.__version__). print(os.getcwd()). psi4.set_output_file('/dev/null'); psi4.geometry('He 0 0 0'); psi4.energy('PBE-D3/3-21G'). print(os.getcwd()); ```; ```bash; $ python test1.py ; 1.2rc3; /shared/raimis/debug/psi4; /home/tmp/psi.15136..dftd3.a9f60419; ```; This does not happen if **DFT-D2** is used:; ```python; import os; import psi4. print(psi4.__version__). print(os.getcwd()). psi4.set_output_file('/dev/null'); psi4.geometry('He 0 0 0'); psi4.energy('PBE-D2/3-21G'). print(os.getcwd()); ```; ```bash; $ python test2.py ; 1.2rc3; /shared/raimis/debug/psi4; /shared/raimis/debug/psi4; ```; A small detail, but it is messing up our pipelines. And it is similar to #817.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1064:194,energy,energy,194,https://psicode.org,https://github.com/psi4/psi4/issues/1064,2,['energy'],['energy']
Energy Efficiency,"Psi4 forgets socc when guess=core. Reduced test case. molecule {; 0 2; Li; }. set basis STO-3G; set reference rohf; set guess sad; set docc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; set socc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; energy('scf'). With SAD guess, one gets. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -7.13546721504551. With core guess, one gets. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; SOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -7.31554523444454",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/420:35,Reduce,Reduced,35,https://psicode.org,https://github.com/psi4/psi4/issues/420,6,"['Energy', 'Reduce', 'energy']","['Energy', 'Reduced', 'energy']"
Energy Efficiency,"Psi4 modules writing their variable to globals should be moved to Wavefunction local variables. This is part of the general ""localization"" of Psi4 to assist in complex Psi4 runs involving multiple computations and to further promote the API. . The general plan is as follows:; 1) Add a bit of code that dumps all local Wavefunction variables to global variables at the end of each *driver* computation `energy/gradient/Hessian/etc`. The small code snippet looks like the following:. ```python; scf_e, wfn = psi4.energy(""HF"", return_wfn=True); for k, v in wfn.variables().items():; core.set_variable(k, v); ```; Thats it! Just need to be called at the right places in the driver to ensure we do not miss a crucial export. This will keep the global variables working as expected. 2) Replace all `Process::environment.globals[""name""] = variable` calls with `Wavefunction->set_variable(""name"", variable)` for modules.; 3) Keep in mind some modules may grab variables from these global options. Some thought will be needed in these cases so this is not a blanket find and replace.; 4) @loriab Are there going to be doc issues when we do this?. I would not do this all in one go due to point 3. So I would recommend a series of PR's:; - PR 1: Do (1) and apply (2) to adc, dfep2, dfmp2, detci, and libsapt_solver modules (in that order, testing in between!).; - PR 2 (may be multiple): Apply (2) to major module blocks one at a time CC*, occ, dfocc, etc.; - PR 3: Clean up any remaining module global exports.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/883:403,energy,energy,403,https://psicode.org,https://github.com/psi4/psi4/issues/883,2,['energy'],['energy']
Energy Efficiency,"Psi4 seems to be unable to recognize the symmetry of molecules that should be Cs.; Minimal input:; ```; molecule {; pubchem:fluoroethane ; }; set basis cc-pVDZ; energy('scf'); ```; Output is attached. [Cs_test.log](https://github.com/psi4/psi4/files/8209874/Cs_test.log); I have tried overriding this by manually specifying a Cs symmetry, but that results in an error:; ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: User specified point group (Cs(X)) is not a subgroup of the highest !; ! detected point group (C1). If this is because the symmetry increased, try to !; ! start the calculation again from the last geometry, after checking any !; ! symmetry-dependent input, such as DOCC. !; ! Error occurred in file: /scratch/psilocaluser/conda- !; ! builds/psi4-multiout_1645476997931/work/psi4/src/psi4/libmints/molecule.cc !; ! on line: 2011 !; ! The most recent 5 function calls were: !; ! psi::Molecule::find_point_group(double) const !; ! psi::Molecule::update_geometry() !; ! from_dict(pybind11::dict) !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2463:161,energy,energy,161,https://psicode.org,https://github.com/psi4/psi4/issues/2463,1,['energy'],['energy']
Energy Efficiency,"Psi4-1.2.1 on Debian shows several test suite failures on non-Intel hardware in the SAPT code that go like this:. ```; 90/140 Test #315: sapt1 ............................***Failed 7.40 sec; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/s390x-linux-gnu/psi4/driver/procrouting/proc.py"", line 3438, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError: ; Fatal Error: Laplace Quadrature requested for (E_HUMO - E_LOMO)/(E_LUMO-E_HOMO) > 7.0 * 10^12, quadratures are not designed for this range.; Error occurred in file: /<<PKGBUILDDIR>>/psi4/src/psi4/lib3index/denominator.cc on line: 609; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```; See https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=s390x&ver=1%3A1.2.1-2&stamp=1546705364&raw=0 for the full log. Failing test cases from `quicktests` are `sapt1`, `sapt-dft1`, `tu5-sapt` and `pywrap-db1`, failing architectures are (so far) `s390x` and `powerpc`. Anything I can do to investigate?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462:456,energy,energy,456,https://psicode.org,https://github.com/psi4/psi4/issues/1462,3,"['energy', 'power']","['energy', 'powerpc']"
Energy Efficiency,QMMM charges seem to have no effect,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1757:5,charge,charges,5,https://psicode.org,https://github.com/psi4/psi4/issues/1757,1,['charge'],['charges']
Energy Efficiency,"Quicktests fail on Fedora rawhide i686. The test case output is. Testing pywrap-freq-e-sowreap...; Performing finite difference calculations by energies; 13 displacements needed.; Computation complete.; Frequencies.......................................................PASSED; ZPVE..............................................................PASSED; SP energy.........................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; Testing cc8...; \tFAILED; Testing cc18...; Nuclear repulsion energy..........................................PASSED; SCF energy........................................................PASSED; CCSD correlation energy...........................................PASSED; CCSD total energy.................................................PASSED; \tFAILED; Testing cc19...; \tFAILED; Testing cc28...; \tFAILED; Testing cc49...; \tFAILED. The cc??.test files are empty, but the output.dat's seem sane...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/13:354,energy,energy,354,https://psicode.org,https://github.com/psi4/psi4/issues/13,5,['energy'],['energy']
Energy Efficiency,ROHF energy inconsistency,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/210:5,energy,energy,5,https://psicode.org,https://github.com/psi4/psi4/issues/210,1,['energy'],['energy']
Energy Efficiency,Reduce code triplication in Molecule::atom_at_position,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2464:0,Reduce,Reduce,0,https://psicode.org,https://github.com/psi4/psi4/pull/2464,1,['Reduce'],['Reduce']
Energy Efficiency,Reduce the number of tests on Appveyor,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1249:0,Reduce,Reduce,0,https://psicode.org,https://github.com/psi4/psi4/pull/1249,1,['Reduce'],['Reduce']
Energy Efficiency,Reduce the scope pollution in DPD::buf4_sort,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2716:0,Reduce,Reduce,0,https://psicode.org,https://github.com/psi4/psi4/pull/2716,1,['Reduce'],['Reduce']
Energy Efficiency,Reduced atom overlap tolerence to 0.1 to fix #195,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/283:0,Reduce,Reduced,0,https://psicode.org,https://github.com/psi4/psi4/pull/283,1,['Reduce'],['Reduced']
Energy Efficiency,Reduced the number of travis CI cases,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237:0,Reduce,Reduced,0,https://psicode.org,https://github.com/psi4/psi4/pull/237,1,['Reduce'],['Reduced']
Energy Efficiency,Reevaluate whether to clean after energy() etc.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2583:34,energy,energy,34,https://psicode.org,https://github.com/psi4/psi4/issues/2583,1,['energy'],['energy']
Energy Efficiency,"Related issue: [2577](https://github.com/psi4/psi4/issues/2577). Using a similar script as the previous reporter (using Psi4 1.9.1 and this build; `conda install -n $VENV_PSI4 psi4 numpy scipy dftd3-python dftd4-python gcp-correction python=$PYTHON_VERSION -c conda-forge`); ```; import psi4; psi4.set_options({'reference': 'uhf', 'stability_analysis': 'check'}); mol = psi4.geometry(""""""; 0 1; O; """""");; psi4.energy('wB97X-D3BJ/def2-TZVPD', molecule=mol); ```. I get the NYI message:; `psi4.driver.p4util.exceptions.ValidationError: Stability analysis not yet supported for XC functionals.`. Is the implementation of stability check for DFT on the roadmap for the near future? This would be very helpful especially when running UKS as we have observed that open shell systems often have instabilities in the SCF. . I also tried with `PBE/6-31G` and still get this exception. However, this [merged PR](https://github.com/psi4/psi4/pull/2849) implemented stability check for GGA functionals - is this a bug? The NYI message looks like it's triggered for every DFT functional ([see this line](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/scf_proc/scf_iterator.py#L578)), whereas [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/scf_proc/subclass_methods.py#L129) the program only raises the error if the functional is meta or needs vv10.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3236:409,energy,energy,409,https://psicode.org,https://github.com/psi4/psi4/issues/3236,1,['energy'],['energy']
Energy Efficiency,"Reposted from forum with modification. The following attempt at open-shell SAPT fails with segfault `forrtl: severe (174): SIGSEGV, segmentation fault occurred`. Original reporter concluded it was a problem with Calcium, as modifying it to Chlorine (along with the charges) resulted in a successful computation. The example molecule is reduced from the original report, for ease of reproduction. 40 GB is (hopefully) enough to indicate this is not a problem of needing more memory. ```memory 40 gb; molecule {; 0 1; H -0.803001 1.098737 0.000360; H -0.919454 -1.089722 0.000521; O -0.035537 -0.067631 0.000218; --; 2 1; Ca 2.281447 -0.004247 -0.000154; units angstrom; no_reorient; symmetry c1; }. set globals {; scf_type df; FREEZE_CORE true; }. basis {; assign aug-cc-pVTZ; assign Ca def2-TZVPP; }. df_basis_scf {; assign aug-cc-pVTZ-jkfit; assign Ca def2-TZVPP-jkfit; }. df_basis_sapt {; assign aug-cc-pVTZ-RI; assign Ca def2-TZVPP-ri; }. energy('sapt0')```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1271:265,charge,charges,265,https://psicode.org,https://github.com/psi4/psi4/issues/1271,3,"['charge', 'energy', 'reduce']","['charges', 'energy', 'reduced']"
Energy Efficiency,"Reposted from the forum. I can't investigate this myself, due to being banned by Gaussian. 1. The MO and Density blocks are being mislabeled, for all levels of theory as far as I can tell. This prevents 3rd party apps from parsing the files correctly. The labels for the MO orbital energy and coefficients blocks should always be as follows:. Alpha Orbital Energies; Alpha MO Coefficients; Beta Orbital Energies; Beta MO Coefficients. Title case is important. The Density blocks should be labeled according to the level of theory as follows:. Total SCF Density (this should be the label for both HF and DFT); Total MP2 Density (don’t prepend ‘DF’ to any methods when using density-fitting); Total MP3 Density; Total MP4 Density; Total CC Density; Total CI Density. Spin Density should be labeled similarly:. Spin SCF Density (this should be the label for HF, DFT, and CASSCF); Spin MP2 Density; Spin MP3 Density; Spin MP4 Density; Spin CC Density; Spin CI Density. 2. Don’t write the Beta blocks for RHF jobs, as their presence makes 3rd party apps think that the level of theory is UHF, and that in turn leads to unnecessarily expensive calcs. 3. If canonical orbitals have been removed from the basis due to S_TOLERANCE, then the “number of independent functions” in the .fchk file should be the resulting number of canonical orbitals. Currently the “number of independent functions” always seems to be equal to the “number of basis functions”, which screws up parsing because the matrices aren’t nbasis x nbasis in this case. 4. This wasn’t happening in v1.1, but in v1.2, writing the .fchk file triggers printing of the MOs to the output file, which bloats the file tremendously. I can’t figure out how to turn this off, but it is undesirable as a default behavior.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1272:282,energy,energy,282,https://psicode.org,https://github.com/psi4/psi4/issues/1272,1,['energy'],['energy']
Energy Efficiency,"Right now, our SCF instability following algorithm is the following, very dumb one:; * Perform SCF; * Check instability; * If unstable, rotate in the direction of the unstable vector, according to some user-specified magnitude, then repeat; * If unstable _with a new eigenvalue_, increment the magnitude. It must have been bad. We can guess more intelligently. A _smarter_ algorithm would look like:; * Perform SCF; * Check instability; * If unstable, rotate in the direction of the unstable vector, according to some user-specified magnitude, then...; * Do a line fit of the SCF energy in the direction of the unstable vector. The instability analysis gave us the first two terms of the Taylor expansion, analytically. Given that, we can then use the SCF energy at the rotated build to fit the _third_ derivative. It may also be possible to project the SCF gradient into the unstable direction. We can then use both pieces of information to fit the third and fourth derivative. (Some numerical tests will be necessary to determine whether the fourth dimensional fit is worthwhile, and good rotation magnitudes.); * We then find the zeroes of f'(x)/x. This is a quadratic, and we can solve the roots analytically. If both are real, evaluate f at both zeroes to find a guess for the true minimum, and continue SCF at the guess rotation. If both are imaginary, a degree four polynomial fit predicts that f(x) has no zeroes, and our fit is unreliable. Print a warning and the current orbitals.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3045:580,energy,energy,580,https://psicode.org,https://github.com/psi4/psi4/issues/3045,2,['energy'],['energy']
Energy Efficiency,"Run:; ```; molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776 ; }. wfn = energy('scf/cc-pvdz', return_wfn=True)[1]; print(wfn.Fa_subset(""MO"").nph); ```. The result MO basis Fock matrix is not diagonal, as expected. The correct way to transform the SO basis Fock matrix into the MO basis matrix is contraction against the C coefficient matrices. This is not what the `Fa_subset` function does. It instead goes through [a series of matrix mulitplications involving the overlap matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/wavefunction.cc#L1047-L1050). This is the correct transformation rule for the density matrix. Not-so-coincidentally, `Da_subset` goes through exactly the same function, where this behavior is correct. If you try to use the same logic for both helpers, you're going to get one of them wrong, guaranteed. While the mechanism of the bug is clear to me, I'm not sure what the best fix should be. Perhaps we should intercept ""MO"" as a special case in `Fa_subset` so it never sees the `matrix_subset_helper`? Under the hood, the code would return `Fa_->transform(Ca_)`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1989:78,energy,energy,78,https://psicode.org,https://github.com/psi4/psi4/issues/1989,1,['energy'],['energy']
Energy Efficiency,"Running a cam-b3lyp calculation with ghost atoms leads to severe scf problems. ```; molecule wat {; @O -0.031788188689 -0.057762343755 -2.500000000000; @H -0.415040188689 0.819260656245 -2.500000000000; @H 0.919541811311 0.097469656245 -2.500000000000; O -0.031788188689 -0.057762343755 2.500000000000; H -0.415040188689 0.819260656245 2.500000000000; H 0.919541811311 0.097469656245 2.500000000000; }. set {; basis def2-SVP; }; energy('cam-b3lyp'); ```. Gives:. ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -76.28416922601539 -7.62842e+01 3.25937e-02 ; @DF-RKS iter 1: 42.90914490853778 1.19193e+02 1.57477e-01 ; @DF-RKS iter 2: -67.59424772229025 -1.10503e+02 6.97022e-02 DIIS; @DF-RKS iter 3: -5.92023271767882 6.16740e+01 1.67018e-01 DIIS; @DF-RKS iter 4: -25.53109522421165 -1.96109e+01 1.22988e-01 DIIS; @DF-RKS iter 5: -6.43807826871483 1.90930e+01 1.58323e-01 DIIS; @DF-RKS iter 6: 29.17875295082399 3.56168e+01 1.24341e-01 DIIS; @DF-RKS iter 7: 29.14675833982615 -3.19946e-02 1.24329e-01 DIIS; @DF-RKS iter 8: 29.14518341499436 -1.57492e-03 1.24344e-01 DIIS; @DF-RKS iter 9: 29.15167484147237 6.49143e-03 1.24371e-01 DIIS; @DF-RKS iter 10: -25.72021965887588 -5.48719e+01 1.20627e-01 DIIS; @DF-RKS iter 11: -25.72793758296909 -7.71792e-03 1.20619e-01 DIIS; @DF-RKS iter 12: -26.38471390876281 -6.56776e-01 1.23180e-01 DIIS; @DF-RKS iter 13: -6.54455688045927 1.98402e+01 1.57065e-01 DIIS. ```. Other LRC functionals like `lrc-wpbe` seem to work fine. . The first energy is in the correct ballpark, so I guess something is wrong with the potential. But how would ghost atoms come into play? And why seemingly just for CAM-style?. -----. edit:; seemingly working ""LC"" versions:; LRC-wPBE; CAMY-B3LYP ; LCY-BLYP",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/900:429,energy,energy,429,https://psicode.org,https://github.com/psi4/psi4/issues/900,3,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,Running a single point calc on a HCl dimer; [hcl2.zip](https://github.com/psi4/psi4/files/11093879/hcl2.zip); at the CCSD(T)/aug-cc-pvtz level of theory crashes with; ```; Total cached: 139345.9 kB; MRU = 31; LRU = 32; #LRU deletions = 0; #Low-priority deletions = 0; Core max size: 48000000.0 kB; Core used: 47999971.9 kB; Core available: 28.1 kB; Core cached: 139345.9 kB; Locked cached: 139345.9 kB; Most recent entry = 31; Least recent entry = 32; dpd_block_matrix: n = 18 m = 324; Error in: dpd_block_matrix: No memory left.; ```; The program gets allocated 48 Gb of memory and 16 cores. Cache level was set to 1. Any other suggestions?; Script is attached as a zip file.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2913:553,allocate,allocated,553,https://psicode.org,https://github.com/psi4/psi4/issues/2913,1,['allocate'],['allocated']
Energy Efficiency,"Running the following input. ```; molecule mol {; 0 1; H 0.0 0.0 0.000000; H 0.0 0.0 0.700000; H 0.0 0.0 1.400000; H 0.0 0.0 2.100000; H 0.0 0.0 2.800000; H 0.0 0.0 3.500000; }. memory 3500 mb. set basis aug-cc-pVDZ; set reference rohf; set guess core; set scf_type df. scf_e, scf_wfn = energy('scf', return_wfn = True). set restricted_docc [ 0, 0, 0, 0, 0, 0, 0, 0 ]; set restricted_uocc [ 0, 0, 6, 6, 0, 0, 6, 6 ]; set qc_module detci; set nat_orbs true. ci_e, ci_wfn = energy('cisd', ref_wfn = scf_wfn, return_wfn = True); ```. crashes with; ```; RuntimeError: ; Fatal Error: Matrix::doublet: Dimension mismatch; Error occurred in file: /builddir/build/BUILD/psi4-add49b95b6be2441c522f71bddb47f1371e16958/psi4/src/psi4/libmints/matrix.cc on line: 1517; ```. both in the Fedora package of Psi4 1.1 as well as the conda package. The script runs without errors in the up-to-date trunk. Could this issue be fixed in the conda package? Alternatively, is there a conda channel for the development version?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/764:287,energy,energy,287,https://psicode.org,https://github.com/psi4/psi4/issues/764,2,['energy'],['energy']
Energy Efficiency,"Running the following input; ```; molecule {; symmetry c2v; 0 1; N; N 1 1.50; }. set basis cc-pCVDZ; set reference rohf. set restricted_docc [2, 0, 0, 0]; set ras1 [0, 0, 0, 0]; set ras2 [4, 0, 2, 2]; set ras3 [0, 0, 0, 0]; E, cas_wfn = energy('rasscf', return_wfn = True). set restricted_docc [0, 0, 0, 0]; set ras1 [2, 0, 0, 0]; set ras2 [4, 0, 2, 2]; set ras3 [4, 0, 2, 2]; E, ras_wfn = energy('detci', ref_wfn = cas_wfn, return_wfn = True); ```; results in a successful run but; ```; $ psi4 NN_1.50.in ; free(): invalid size; Aborted (core dumped); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2309:237,energy,energy,237,https://psicode.org,https://github.com/psi4/psi4/issues/2309,2,['energy'],['energy']
Energy Efficiency,"Running this input results in a PSIO error in version 1.3.2.; ```; molecule h2o {; 0 1; O 0.000000 0.000000 0.000000; H 0.000000 0.000000 0.956914; H 0.926363 0.000000 -0.239868; }. molecule ch3 {; 0 2; C 0.000000 0.000000 0.000000; H 0.000000 1.078000 0.000000; H 0.933000 -0.539000 0.000000; H -0.933000 -0.539000 0.000000; }. set basis 6-31G*. activate(h2o); set reference rhf; energy('b3lyp'). activate(ch3); set reference uhf; energy('b3lyp'); ```. However, if one switches the runs the other way around; ```; molecule h2o {; 0 1; O 0.000000 0.000000 0.000000; H 0.000000 0.000000 0.956914; H 0.926363 0.000000 -0.239868; }. molecule ch3 {; 0 2; C 0.000000 0.000000 0.000000; H 0.000000 1.078000 0.000000; H 0.933000 -0.539000 0.000000; H -0.933000 -0.539000 0.000000; }. set basis 6-31G*. activate(ch3); set reference uhf; energy('b3lyp'). activate(h2o); set reference rhf; energy('b3lyp'); ```; the calculation succeeds.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2174:381,energy,energy,381,https://psicode.org,https://github.com/psi4/psi4/issues/2174,4,['energy'],['energy']
Energy Efficiency,"Running version 0.3, I see. SCF Energy (ref): -1.4267662531; Nuclear repulsion energy: 1.1382844453; One-electron energy: -2.8081568717; Two-electron energy: 0.5202338704; Dropped core energy: 0.0000000000; Total electronic energy: -2.2879230012; Total SCF energy: -1.1496385559. **\* Calculated Energy Differs from SCF Energy in CHKPT ! ***. input.dat as follows. molecule {; 0 2; H 0.000000 0.889899 0.000000; H 0.889899 0.000000 0.000000; H 0.000000 -0.889899 0.000000; }. set basis STO-3G; set reference rohf; set NUM_ROOTS 3; energy('fci')",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/210:32,Energy,Energy,32,https://psicode.org,https://github.com/psi4/psi4/issues/210,10,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"S; @RHF iter 15: -99.45080702229581 -2.23110e-12 2.66726e-07 DIIS; @RHF iter 16: -99.45080702230226 -6.45173e-12 5.58591e-09 DIIS. ==> Post-Iterations <==. ```; Orbital Energies (a.u.); -----------------------. Doubly Occupied:. 1Ag -25.833682 2Ag -1.076019 1B3u -0.180947; 1B2u -0.180947 1B1u -0.180947. Virtual:. 2B2u 0.442532 2B3u 0.442532 2B1u 0.442532; 3Ag 0.485648 4Ag 1.228480 1B3g 1.228480; 5Ag 1.228480 1B2g 1.228480 1B1g 1.228480; 3B3u 1.526002 3B2u 1.526002 3B1u 1.526002; 6Ag 2.051155 7Ag 3.283338 2B2g 3.283338; 2B3g 3.283338 2B1g 3.283338 8Ag 3.283338; 4B2u 3.331721 4B3u 3.331721 1Au 3.331721; 4B1u 3.331721 5B3u 3.331721 5B2u 3.331721; 5B1u 3.331721 6B2u 5.672254 6B1u 5.672254; 6B3u 5.672254 7B1u 9.267994 7B2u 9.267994; 7B3u 9.267994 8B1u 9.267994 8B3u 9.267994; 2Au 9.267994 8B2u 9.267994 9Ag 9.745165; 3B2g 9.745165 3B1g 9.745165 3B3g 9.745165; 10Ag 9.745165 11Ag 10.965644. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; ```. Energy converged. @RHF Final Energy: -99.45080702230226. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -143.9965313656634294; Two-Electron Energy = 44.5457243433611438; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -99.4508070223022855. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-06 at Fri Jan 8 13:5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:7792,Energy,Energy,7792,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['Energy'],['Energy']
Energy Efficiency,"SCF calculations on the formaldimine molecule. I am particularly interested by the determinant decomposition of the ground and first excited state of the molecule (singlet symmetry). However, I think I have noticed a pb concerning the sign of the determinants in the output. First, I give you my INPUT in python : . pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; variables = pes_origin[:] + [90, 90]; psi4.geometry(; """"""; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables) ); ; psi4.set_options({ 'basis': 'cc-pvdz',; 'DETCI_FREEZE_CORE' : False,; 'reference': 'RHF',; 'num_roots': 2,; 'frozen_docc':[0],; 'restricted_docc': [6],; 'active': [3],; 'restricted_uocc': [11], ; 'frozen_uocc': [23],; 'mcscf_maxiter': 1000, ; 'avg_states' : [ 0, 1],; 'avg_weights' : [ 0.5, 0.5 ]; }); ; sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY') . Then, I give you from the OUTPUT FILE the decomposition I obtain : . *******************************************************************; *******************************************************************; ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -93.931448649953467. Active Space Natural occupation numbers:. A 2.000000 A 1.000000 A 1.000000. The 9 most important determinants:. * 1 0.691216 ( 0, 1) 7AX 8AA 9AB ; * 2 0.691216 ( 1, 0) 7AX 8AB 9AA ; * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX ; * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX ; * 5 0.000000 ( 0, 0) 7AX 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB ; * 3 -0.291143 ( 2, 0)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008:1055,ENERGY,ENERGY,1055,https://psicode.org,https://github.com/psi4/psi4/issues/2008,1,['ENERGY'],['ENERGY']
Energy Efficiency,"Setup: Install Psi4 rc1 for Linux with python 3.9 via the installer from https://psicode.org/installs/v14rc1/. Result: This installation appears to work fine for most molecules, but then has an issue with systems with linear dependencies, specifically when running the in-core DF algorithm. The provided file, `psi4_issue.py`, when run with sufficient memory to run in-core (~40 GB), gives an energy that is low by more than 2 Hartree (should be -1145.943, but gives -1148.711). With scf_type DF and less RAM (thus causing the disk algorithm to run), the energy is correct. Setting s_tolerance to 1e-4 also fixes the problem, at the cost of a little accuracy loss (5e-4 Hartree). I have reproduced this error on several computers, both CentOS and Ubuntu. The next version, psi4 rc2, does not show this problem. It would be nice to know whether this was deliberately fixed, or might still be around. `psi4_issue.py`: https://drive.google.com/file/d/1RTSVVfmXwJNpS4CHtvMYOTBU63J8Z85j/view?usp=sharing",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2211:393,energy,energy,393,https://psicode.org,https://github.com/psi4/psi4/issues/2211,2,['energy'],['energy']
Energy Efficiency,"Several downstream codes do not recognize the new SCF types `mem_DF` and `disk_DF` (introduced in #961) when set directly within the input file. I've attached [a tarball](https://github.com/psi4/psi4/files/2002517/eff-scftype-df.tar.gz) containing several such tests, adapted directly from the existing Psi4 test suite, which attempt to highlight these problems. I've also attached the summary file (from the tarball) separately for easy web viewing [here](https://github.com/psi4/psi4/files/2002535/summary.txt). Additionally worth note is that a few of these downstream codes fail gracefully (e.g., FNOCC for `scf_type mem_df`, as it assumes a disk algorithm) with helpful error messages, but others do not (e.g., CISD energies fail with PSIO errors and DLDF+D09 gradients segfault). However, if failure is unavoidable, we should probably at least be verbose in the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021:268,adapt,adapted,268,https://psicode.org,https://github.com/psi4/psi4/issues/1021,1,['adapt'],['adapted']
Energy Efficiency,"So here's another weird issue with PES scans in Psi4. Namely, it looks like the scan crashes in the SCF cycle every 4 or 5 points, even when I'm not feeding in the previous scf solution. If you try a new calculation in the point where it failed to converge, there's no problem. Test input; ```; molecule mol {; 0 1; symmetry c1; H 0.0 0.0 0.0; H 0.0 0.0 R1; H 0.0 0.0 R2; H 0.0 0.0 R3; } ; ; set basis STO-3G; set ci_maxiter 100. # This crashes at R=0.68; #for ir in range(60, 80, 2):; # This crashes at R=0.74; for ir in range(68, 80, 2):; mol.R1 = 1*(ir/100); mol.R2 = 2*(ir/100); mol.R3 = 3*(ir/100); ci_e=energy('fci'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/759:609,energy,energy,609,https://psicode.org,https://github.com/psi4/psi4/issues/759,1,['energy'],['energy']
Energy Efficiency,"So one does a frequency calc, either by energies or gradients. ```; #! Optimization followed by frequencies H2O HF/cc-pVDZ. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; optimize('scf'); #frequencies('scf', dertype='energy') # TOGGLE; frequencies('scf', dertype='gradient') # TOGGLE. eval = psi4.get_frequencies(); eval.print_out(); evec = psi4.get_normalmodes(); evec.print_out(). ref_freqs = psi4.Vector(3) #TEST; ref_freqs.set(0, 0, 1775.65) #TEST; ref_freqs.set(0, 1, 4113.38) #TEST; ref_freqs.set(0, 2, 4212.18) #TEST. fd_freqs = psi4.wavefunction().frequencies() #TEST; compare_vectors(ref_freqs, fd_freqs, 1, ""Reference vs computed frequencies to 0.1 cm^-1"") #TEST; ```. Both versions pass the frequencies check. But if you diff their printed normal modes, as below, the coordinate system seems unaligned. This job doesn't have the sow/reap complication, though it does have the zmat one. Basically, is this expected or correctable?. ```; Frequency: 1775.58 | Frequency: 1775.65; Force constant: 0.1193 Force constant: 0.1193; X Y Z mass X Y Z mass ; O 0.000 0.000 -0.068 15.994915 | O 0.000 0.000 -0.270 15.994915; H 0.000 0.416 0.536 1.007825 | H 0.000 0.417 0.538 1.007825; H 0.000 -0.416 0.536 1.007825 | H 0.000 -0.417 0.538 1.007825. Frequency: 4113.41 | Frequency: 4113.38; Force constant: 0.6403 Force constant: 0.6403; X Y Z mass X Y Z mass ; O 0.000 0.000 0.049 15.994915 | O 0.000 0.000 0.197 15.994915; H 0.000 0.569 -0.392 1.007825 | H 0.000 0.571 -0.393 1.007825; H 0.000 -0.569 -0.392 1.007825 | H 0.000 -0.571 -0.393 1.007825. Frequency: 4212.15 | Frequency: 4212.18; Force constant: 0.6714 Force constant: 0.6714; X Y Z mass X Y Z mass ; O 0.000 0.068 0.000 15.994915 | O 0.000 0.271 0.000 15.994915; H 0.000 -0.537 0.414 1.007825 | H 0.000 -0.539 0.416 1.007825; H 0.000 -0.537 -0.414 1.007825 | H 0.000 -0.539 -0.416 1.007825. ... # # # #; Irrep: 1 Irrep: 1; 1: 1775.5835048 | 1: 1775.6479720; 2: 4113.4094219 | 2: 4113.3793970; 3: 4212",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/225:255,energy,energy,255,https://psicode.org,https://github.com/psi4/psi4/issues/225,1,['energy'],['energy']
Energy Efficiency,"Somewhat related to issue 556 and pull 588, if you set nat_orbs to true and run a CI calculation, you don't get the natural orbital occupations in the output, whereas if you're running CASSCF you get a nice printout. . I'm guessing the NOONs should get printed out, since the output file does say; ```; Computing CI Natural Orbitals; !Warning: New orbitals will be sorted by occuption number,; orbital spaces (occ/act/vir) may change.; ```. Example input; ```; molecule {; 0 1; symmetry c1; C; C 1 1.0; }. set basis cc-pVDZ; set scf_type pk; set nat_orbs true; set wfn detci; set restricted_docc [2]. # Run CISDT; cas_e, cas_wfn = energy('cisdt', return_wfn=True); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/590:631,energy,energy,631,https://psicode.org,https://github.com/psi4/psi4/issues/590,1,['energy'],['energy']
Energy Efficiency,"Standardized handling of ""/"" in method name between frequency, hessian, gradient, properties and energy. ## Description; - Use of `_cbs_gufunc` helper function consistently across `energy`, `hessian`, `gradient`, `frequency` and `properties`; - `_cbs_gufunc` throws an exception for unsupported ""true"" CBS calls to `frequency` and `properties`, ""method/basis"" syntax works; - all relevant tests pass, see below; - modified regex in `_parse_cbs_gufunc_string()` to correctly handle `sapt2+(3)/basis` calls or `method/6-311++G` calls; splitting now only happens on variants of `+ D:`. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix for #934 . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949:97,energy,energy,97,https://psicode.org,https://github.com/psi4/psi4/pull/949,2,['energy'],['energy']
Energy Efficiency,Strange MBIS charges for molecules with Iodine when using DDX and def2-TZVPPD basis,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3135:13,charge,charges,13,https://psicode.org,https://github.com/psi4/psi4/issues/3135,1,['charge'],['charges']
Energy Efficiency,"Suppose we are performing an IRC starting from a transition state that is very tightly converged. An IRC will converge to that transition state, rather than the minima. ## Psi4 Internals Explanation. optking.cc::349 will call the irc_step function beginning opt_data.cc::98. Now proceed to line opt_data.cc::221. The lines below that will return true if the molecule is converged. Because the transition state was tightly converged, the function will return true. **Comparison with a non-bugged case shows this is unexpected behavior.**. converged is true and this is an IRC type optimization, so we enter optking.cc::392, the point_converged function. molecule_irc_step.cc::83 shows this causes an IRC step to be taken immediately - before the energy or the gradient have been updated from the last step. OPTKING then sees we are not at the first step but the gradient is zero and assumes we have truly converged. It terminates the IRC. ## Previous Fix Attempts. I attempted to fix this just by having the IRC return false for Step 0 of an IRC, but in some cases I found that it would converge on Step 1 instead. We'll need a smarter way to make sure we don't converge to a TS, possibly checking for negative Hessian eigenvalues. I would do this myself, but after some of the other Optking issues I've run into this, this is much less of a personal priority. Hopefully, PyOptKing will automatically take care of this. ## Minimal Demonstration Files. Demonstrated for four atoms at the SCF level. Even including the Hessian calculation, this took less than two minutes on our cluster. [input.txt](https://github.com/psi4/psi4/files/1471977/input.txt); [output.txt](https://github.com/psi4/psi4/files/1471978/output.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/859:745,energy,energy,745,https://psicode.org,https://github.com/psi4/psi4/issues/859,1,['energy'],['energy']
Energy Efficiency,"Take the following input script:. ```; molecule mol {; He 0 0 4; --; He 0 0 0; }. mol.update_geometry(); mol.print_out(). new_mol = mol.clone(); new_mol.print_out(); ```. and examine the output:. ```; Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 2.000000000000 4.002603254150; HE 0.000000000000 0.000000000000 -2.000000000000 4.002603254150. Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 2.000000000000 4.002603254150; HE 0.000000000000 0.000000000000 -2.000000000000 4.002603254150; ```. The Molecule Point group does not get carried through, and some piece of data is missing so that `update_geometry` does not fix this either. In some circumstances this will cause a seg fault. Note that the clone function is somewhat awkward in molecule and causes both the copy and assignment constructors to be called. In the meantime we can use the following syntax:. ```; new_mol = psi4.Molecule.create_molecule_from_string(mol.create_psi4_string_from_molecule()); ```. Note, if you are running this on psi4/public you will probably notice that the `new_mol` does not have atoms, this bug has been fixed inside the wavefunction_pass update.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/235:280,charge,charge,280,https://psicode.org,https://github.com/psi4/psi4/issues/235,2,['charge'],['charge']
Energy Efficiency,"Test case 32 from the FH51 subset of [GMTKN55](http://www.thch.uni-bonn.de/tc.old/downloads/GMTKN/GMTKN55/FH51ref.html) computes the isomerization energy between H2C-C5-CH2 and heptatriyne. So as to not to bury the lede: very strange energies result when running H2C-C5-CH2 with wB97X-3c, which I suspect are tied to this message:. ```; !!! WARNING: ECP capability is in beta. Please check occupations closely. !!!; ``` . The energy of H2C-C5-CH2 is computed to be -43.4074821405164926 Eh, and the energy of heptatriyne is computed to be -42.0459519798808898, leading to a predicted ∆E of -854 kcal/mol. The ""correct"" high-level value is -14.30 kcal/mol, and the authors of the wB97X-3c paper report an energy of -13.17 kcal/mol for this system. Similar results are seen when using B3LYP-D4/vDZP or r2SCAN-D4/vDZP, suggesting that vDZP is the common factor here. The orbital occupancies for H2C-C5-CH2 do seem a bit odd to me? I'm not used to seeing such low-energy virtual orbitals... ```; Orbital Energies [Eh]; ---------------------. Doubly Occupied: . 1A -1.094498 2A -1.062498 3A -1.041834 ; 4A -1.016695 5A -0.963137 6A -0.898331 ; 7A -0.834072 8A -0.703197 9A -0.700832 ; 10A -0.661618 11A -0.660116 12A -0.605235 ; 13A -0.596357 14A -0.526703 15A -0.507419 ; 16A -0.419207 . Virtual: . 17A -0.218606 18A -0.112811 19A -0.091525 ; 20A 0.037195 21A 0.048637 22A 0.051338 ; 23A 0.054059 24A 0.105612 25A 0.106004 ; 26A 0.174431 27A 0.193680 28A 0.196900 ; ```. Not sure what ECP factors could be driving these issues, or how to fix this, but thought I should raise an issue. Here's all the input and output files:. Input file for H2C-C5-CH2:; ```; molecule {; C -2.556271805455 -0.181690364655 -0.026620796492 ; C -1.282011805455 -0.085620364655 -0.016410796492 ; C -0.000441805455 0.006819635345 -0.003870796492 ; C 1.281348194545 0.095909635345 0.010599203508 ; C 2.556298194545 0.180969635345 0.026599203508 ; C 3.872538194545 0.268679635345 0.044049203508 ; H 4.487898194545 -0.251640364655 -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:147,energy,energy,147,https://psicode.org,https://github.com/psi4/psi4/issues/3221,5,['energy'],['energy']
Energy Efficiency,"Testing some calculations, I ran into very odd behavior in Psi4 1.3.2. The input; ```; molecule {; 0 2; Y; }. set basis seg-cc-pv5z-pp; set scf_type direct; set df_scf_guess false; set reference uhf; energy('scf'); ```; leads to the output; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 1, 0, 0 ]. @UHF iter 1: -33.78761858648352 -3.37876e+01 4.53671e-02 DIIS; Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 1, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 1, 1, 0, 1, 0, 0, 0, 0 ]. @UHF iter 2: -36.39804695906182 -2.61043e+00 2.16710e-02 DIIS; ```. For some reason, the occupation update changes the spin state from a doublet (one unpaired electron) to hextet (3 unpaired electrons). Basis set is attached. [seg-cc-pv5z-pp.gbs.txt](https://github.com/psi4/psi4/files/8247541/seg-cc-pv5z-pp.gbs.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2476:200,energy,energy,200,https://psicode.org,https://github.com/psi4/psi4/issues/2476,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"The MBIS implementation is great! Would it be possible to add the ability to partition the charge into core and valence components like they do in the [original paper](https://pubs.acs.org/doi/10.1021/acs.jctc.6b00456)? This is essential to use the ""valence width"" parameter that is currently calculated for any electrostatic potential or electrostatic interaction energy calculation that includes a charge penetration correction!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3140:91,charge,charge,91,https://psicode.org,https://github.com/psi4/psi4/issues/3140,3,"['charge', 'energy']","['charge', 'energy']"
Energy Efficiency,"The MBIS regression reported in #2272 was fixed via #2273, but there's still a few items to tackle. This part needn't be backported. - [ ] oeprop(wfn, ""MBIS_VOLUME_RATIOS"") should be fine (indep oeprop fn), but set scf_properties mbis_volume_ratios; energy(""scf"") will still fail as MBIS fails via QCEngine #2272 reported because those are OEProp class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to OEProps in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2299:250,energy,energy,250,https://psicode.org,https://github.com/psi4/psi4/issues/2299,2,['energy'],['energy']
Energy Efficiency,"The PBE/STO-3G calculation on Ni(CO)3 does not converge.; ```; memory 8 gb. molecule {; Ni -0.593245 2.410696 -0.537392; C 0.947231 2.245835 0.358715; C -0.875896 1.446101 -2.018123; C -1.856239 3.533688 0.051349; O -1.061878 0.818754 -2.971879; O 1.943046 2.139891 0.937442; O -2.673940 4.257626 0.432247; }. set basis STO-3G; energy('pbe'); ```; DIIS apparently gets stuck alternating between two different configurations, which is shown in the oscillating energy. I think this should be a relatively simple system for DFT; still, the default accelerator is unable to handle it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2209:328,energy,energy,328,https://psicode.org,https://github.com/psi4/psi4/issues/2209,2,['energy'],['energy']
Energy Efficiency,"The PSI4 (0.3.183, 5427c0a) gradient routine does not seem to be giving the correct values when an external field is defined using the QMMM module. I attached two test calculations:; 1) A water dimer with 1 water QM and the second represented as point charges. ```; memory 1 gb; set reference rks; set basis 6-31++G**; set guess sad; set scf_type df. molecule QMregion {; 0 1; O -0.778803000000 0.000000000000 1.132683000000; H -0.666682000000 0.764099000000 1.706291000000; H -0.666682000000 -0.764099000000 1.706290000000; symmetry c1; no_reorient; no_com; }. gradient(""PBE0""). Chrgfield = QMMM(); Chrgfield.extern.addCharge(-0.834,1.649232019048,0.0,-2.356023604706); Chrgfield.extern.addCharge(0.417,0.544757019107,0.0,-3.799961446760); Chrgfield.extern.addCharge(0.417,0.544757019107,0.0,-0.912085762652); psi4.set_global_option_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. 2) A helium atom with a point charge (q=-1) 1 Angstrom away. ```; memory 1 gb; set reference rks; set basis 6-31G*; set guess sad; set scf_type df. molecule QMregion {; 0 1; He 0.0 0.0 0.0; symmetry c1; no_reorient; no_com; }. gradient(""PBE0""). Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1,0.0,0.0,1.8897261245650618); psi4.set_global_option_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. For test 1, the gradient from the water and the water+charges are different, but they do not agree with the forces returned by an equivalent calculation with Gaussian. The isolated water molecule has gradients that agree with the Gaussian forces, but once the charges are added the Gaussian and PSI4 calculations return different results. For test 2, the PSI4 gradient is zero for the for the helium with and without the point charge. The charge has no effect on the results. When I repeated the calculation with Gaussian, there was a finite force on the helium atom when a charge was included. Here are the gradient results I pulled from the output files:. ```; Water+Charges (TIP3P charges: O->-0.834, ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/184:252,charge,charges,252,https://psicode.org,https://github.com/psi4/psi4/issues/184,2,['charge'],"['charge', 'charges']"
Energy Efficiency,"The Pb2Me6 test case from GMTKN55/HEAVYSB11 fails to converge with larger `def2-` basis sets. The `def2-sv(p)` case below doesn't crash, but the ""Fails to converge"" print [here](https://github.com/psi4/psi4/blob/f9ce6e0cdb181e741483350f0fe22cf6cff79dc1/psi4/src/psi4/libmints/ecpint.cc#L492) is triggered. With QZ basis sets, the SCF doesn't converge at all.; ```; molecule {; 0 1; PB 0.00000000 0.00000000 1.43749842; PB 0.00000000 0.00000000 -1.43749842; C 1.79821215 1.03819827 2.26869728; C 0.00000000 -2.07639654 2.26869728; C -1.79821215 1.03819827 2.26869728; C 1.79821215 -1.03819827 -2.26869728; C 0.00000000 2.07639654 -2.26869728; C -1.79821215 -1.03819827 -2.26869728; H 1.74634800 1.00825449 3.35718999; H 2.70027335 0.53041629 1.92961075; H 1.80949065 2.07329717 1.92961075; H 0.00000000 2.01650898 -3.35718999; H -0.89078269 2.60371346 -1.92961075; H 0.89078269 2.60371346 -1.92961075; H -1.74634800 -1.00825449 -3.35718999; H -1.80949065 -2.07329717 -1.92961075; H -2.70027335 -0.53041629 -1.92961075; H -1.80949065 2.07329717 1.92961075; H -2.70027335 0.53041629 1.92961075; H -1.74634800 1.00825449 3.35718999; H 1.74634800 -1.00825449 -3.35718999; H 2.70027335 -0.53041629 -1.92961075; H 1.80949065 -2.07329717 -1.92961075; H -0.89078269 -2.60371346 1.92961075; H 0.89078269 -2.60371346 1.92961075; H 0.00000000 -2.01650898 3.35718999; }; energy(""pbe-d3bj/def2-sv(p)""); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1856:1358,energy,energy,1358,https://psicode.org,https://github.com/psi4/psi4/issues/1856,1,['energy'],['energy']
Energy Efficiency,"The Psithon input could be made more powerful if it could accept a python dictionary. For example, this could be useful when the user wants to specify orbital spaces:; ```; docc = {'a1' : 3, 'b2' : 1, 'b2' : 1} # converted internally to an option of the form [['a1',3], ['b1',1], ['b2',1]]; ```; There are probably several other potential uses for this feature.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1944:37,power,powerful,37,https://psicode.org,https://github.com/psi4/psi4/issues/1944,1,['power'],['powerful']
Energy Efficiency,"The SAPT(DFT) module runs correctly using hybrid functionals like PBE0, but cannot be run with GGAs like PBE. I have used the commands:; _set {; scf_type df; sapt_dft_functional PBE; sapt_dft_do_dHF False; sapt_dft_grac_shift_a 0.12589; sapt_dft_grac_shift_b 0.12589; }_. to obtain PBE in this module, but this results in the error message:. _=> Auxiliary Basis Set <=; ; Basis Set: ANONYMOUS400E6A7D; Blend: AUG-CC-PVDZ-JKFIT + MB-SET-RI; Number of shells: 478; Number of basis function: 1452; Number of Cartesian functions: 1697; Spherical Harmonics?: true; Max angular momentum: 4; ; ; Traceback (most recent call last):; File ""/home/alston/Psi4/install/1.2-gcc/bin/psi4"", line 259, in <module>; exec(content); File ""<string>"", line 71, in <module>; File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 234, in run_sapt_dft; cache = sapt_jk_terms.build_sapt_jk_cache(wfn_A, wfn_B, sapt_jk, True); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_jk_terms.py"", line 108, in build_sapt_jk_cache; cache[""K_A""] = jk.K()[0].clone(); ; IndexError: list index out of range; ; *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4._. **Perhaps jk.K() is not filled for a GGA?** While GGAs are not expected to yield accurate SAPT(DFT) interaction energies it will be useful to have the ability to use them, if only for testing and benchmarking purposes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/911:835,energy,energy,835,https://psicode.org,https://github.com/psi4/psi4/issues/911,2,['energy'],['energy']
Energy Efficiency,"The `dct` module does not seem to like linear dependencies. Example 1:; ```; molecule { ; o ; h 1 1.0 ; h 1 1.0 2 104.5; }. set {; basis 'aug-cc-pvtz'; s_tolerance 1e-3; }. energy('dct'); ```. The computation runs to completion and gives energies that are at least _plausible_. But the output file is littered with; ```; There was a problem correcting the MO phases.; If this does not converge, try ALGORITHM=TWOSTEP; ```; and `stderr` receives several MKL errors. Example 2:; ```; molecule { ; o ; h 1 1.0 ; h 1 1.0 2 104.5; }. set {; basis 'aug-cc-pvtz'; dct_type df; s_tolerance 1e-3; }. energy('dct'); ```. Using the DF code triggers a segfault. There may well be more examples I haven't found yet as I venture into other parts of the module. Either way, I'm going to be fixing this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2231:173,energy,energy,173,https://psicode.org,https://github.com/psi4/psi4/issues/2231,2,['energy'],['energy']
Energy Efficiency,"The `dfocc` module has had problems converging MOs tightly. My experience with orbital optimization tells me the problem can be cured by coupling the DIIS iterations for orbital steps and amplitude steps, as is done in the `dct` module and in the `occ` module. There should be an option (I'd suggest making this the default option) to couple the DIIS steps, so examples like the following converge:. ```; molecule {; 1 2; units bohr; O 0.000000000000 0.000000000000 -0.143225816552; H 0.000000000000 1.638036840407 1.136548822547; H 0.000000000000 -1.638036840407 1.136548822547; }. set reference uhf ; set basis sto-3g; set MAX_MOGRAD_CONVERGENCE 8; set e_convergence 10. energy('omp2'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2215:673,energy,energy,673,https://psicode.org,https://github.com/psi4/psi4/issues/2215,1,['energy'],['energy']
Energy Efficiency,"The `dmrg/caspt2-n2` is quite large compared to the quicktests. I am no expert in DMRG, but maybe scaling down the active space to 6 orbitals would be ok for code-coverage?. I use the following patch in Debian:. ```; --- ./tests/dmrg/caspt2-n2/input.dat.orig 2016-09-23 21:52:13.874684018 +0200; +++ ./tests/dmrg/caspt2-n2/input.dat 2016-09-23 21:58:45.226670772 +0200; @@ -13,8 +13,8 @@. set dmrg_irrep 0; set dmrg_multiplicity 1; -set restricted_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; -set active [ 4 , 0 , 1 , 1 , 0 , 4 , 1 , 1 ]; +set restricted_docc [ 3 , 0 , 0 , 0 , 0 , 3 , 0 , 0 ]; +set active [ 1 , 0 , 1 , 1 , 0 , 1 , 1 , 1 ]. set dmrg_sweep_states [ 500, 1000]; set dmrg_sweep_energy_conv [ 1e-10, 1e-10]; @@ -41,6 +41,6 @@. energy(""dmrg-caspt2""). -compare_values(-109.15104350802, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; -compare_values(-109.2680229921, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; +compare_values(-107.2576689206, get_variable(""DMRG-SCF ENERGY""), 6, ""DMRG-SCF Energy"") #TEST; +compare_values(-107.5036855148, get_variable(""CURRENT ENERGY""), 6, ""DMRG-CASPT2 Energy"") #TEST; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/474:737,energy,energy,737,https://psicode.org,https://github.com/psi4/psi4/issues/474,9,"['ENERGY', 'Energy', 'energy']","['ENERGY', 'Energy', 'energy']"
Energy Efficiency,"The analytic and numerical MP2 gradients disagree when a QMMM charge field is used, while the same calculation runs correctly at the HF level. [psi4 version 1.0.0]. I found a similar issue which has already been resolved with the RKS gradient: https://github.com/psi4/psi4/issues/184 . My test case is one QM water molecule in the presence of two TIP3P-charge waters. ```; memory 400 mb. molecule water {; 0 1; O -0.167787 1.645761 0.108747; H 0.613411 1.10262 0.113724; H -0.093821 2.20972 -0.643619; symmetry c1; no_reorient; no_com; }. chgfield = QMMM(). chgfield.extern.addCharge(-0.834, -1.350388, -0.964879, -0.092208); chgfield.extern.addCharge(0.417, -1.908991, -1.211298, 0.626207); chgfield.extern.addCharge(0.417, -1.263787, -0.018107, -0.055536); chgfield.extern.addCharge(-0.834, 1.517569, -0.667424, -0.080674); chgfield.extern.addCharge(0.417, 1.989645, -1.098799, 0.612047); chgfield.extern.addCharge(0.417, 0.668397, -1.091798, -0.139744); psi4.set_global_option_python('EXTERN', chgfield.extern). set basis aug-cc-pvtz; set scf_type df; set freeze_core True. grad_fd = gradient('mp2', molecule=water, dertype=0); grad_an = gradient('mp2', molecule=water); compare_matrices(grad_an, grad_fd, 5, ""TESTING finite-diff vs. analytic gradient""); ```; The identical input file replacing ""mp2"" with ""hf"" runs successfully. It seems strange to me, since as far as I understand the external charges should only modify the core contribution to the Fock matrix. Is there a possibility that gradient('mp2') somehow fails to include the external potential gradients that are correctly computed in gradient('hf')?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/618:62,charge,charge,62,https://psicode.org,https://github.com/psi4/psi4/issues/618,3,['charge'],"['charge', 'charges']"
Energy Efficiency,"The atomic UHF solver code doesn't include ECP elements in its core Hamiltonian operator at present. Likewise, ECPs aren't taken into account in the spin state determination for the SAD state. (This is not a problem for #1458 though since it switches the default to spin-averaged densities.). For instance,; ```; molecule {; 0 1; Xe; }. set guess sad; set basis def2-svp; set sad_print 2; energy('scf'); ```. gives; ```; @Atomic UHF Final Energy for atom XE: -2507.62764642306365; Finished UHF Computation!. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: 285.32485664068048 2.85325e+02 0.00000e+00 ; @DF-RHF iter 1: -189.84500624892323 -4.75170e+02 8.80223e-01 DIIS; @DF-RHF iter 2: -290.52105276490687 -1.00676e+02 4.66004e-01 DIIS; @DF-RHF iter 3: -328.09971971455047 -3.75787e+01 4.86655e-02 DIIS; @DF-RHF iter 4: -328.29180563637317 -1.92086e-01 6.06357e-03 DIIS; @DF-RHF iter 5: -328.29809735789945 -6.29172e-03 1.54650e-03 DIIS; @DF-RHF iter 6: -328.29834344170320 -2.46084e-04 2.46581e-04 DIIS; @DF-RHF iter 7: -328.29835685761799 -1.34159e-05 4.28492e-05 DIIS; @DF-RHF iter 8: -328.29835732243424 -4.64816e-07 4.48232e-06 DIIS; @DF-RHF iter 9: -328.29835733488505 -1.24508e-08 4.61031e-07 DIIS; Energy converged.; ```. so it's only a small 2200 Hartree difference between the calculations :tongue:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1473:389,energy,energy,389,https://psicode.org,https://github.com/psi4/psi4/issues/1473,4,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"The attached input uses basis_guess to specify a basis set for the initial guess: [sapt.zip](https://github.com/psi4/psi4/files/557209/sapt.zip). This worked with a previous PSI4 release. I guess that was 4.0b6 back then. With a recent development version of PSI4 (commit 7e4ecf968ec7920ab404cb357de827cf3785a254, Wed Oct 19 16:52:24 2016 -0400), I get the following error:. ```; toon@molmod49 ~/sapt> psi4 sapt.in . QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT among:; Shell Entries: [u'N']; Basis Sets: [(u'1', u'1', None)]; File Path: /home/toon/sapt, /home/toon/sapt, /home/toon/.local/share/psi4/basis; Input Blocks: . Traceback (most recent call last):; File ""/home/toon/.local/bin/psi4"", line 161, in <module>; exec(content); File ""<string>"", line 53, in <module>; File ""/home/toon/.local/bin/../lib/psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 3133, in run_sapt; dimer_wfn = scf_helper('RHF', molecule=sapt_dimer, **kwargs); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 1199, in scf_helper; ref_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""/home/toon/.local/bin/../lib/psi4/driver/procedures/proc.py"", line 1028, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/home/toon/.local/lib/psi4/driver/p4util/python_helpers.py"", line 60, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""/home/toon/.local/bin/../lib/psi4/driver/qcdb/libmintsbasisset.py"", line 631, in pyconstruct; return_atomlist=return_atomlist); File ""/home/toon/.local/bin/../lib/psi4/driver/qcdb/libmintsbasisset.py"", line 805, in construct; (at + 1, role, text2)); psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for role JKFIT ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/484:905,energy,energy,905,https://psicode.org,https://github.com/psi4/psi4/issues/484,2,['energy'],['energy']
Energy Efficiency,"The calculation; ```; molecule {; 0 2; Li; }. set basis cc-pVDZ; set reference rohf; set scf_type pk; set DOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; set SOCC [ 0, 0, 0, 0, 1, 0, 0, 0 ]; energy('scf'); ```; produces a segfault when run. All the other ways of distributing the single electron work.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/597:176,energy,energy,176,https://psicode.org,https://github.com/psi4/psi4/issues/597,1,['energy'],['energy']
Energy Efficiency,"The context of this issue is that I got a report from @bennybp that a number of QCArchive geometry optimizations were failing, in which geomeTRIC was used to optimize the geometry by calling Psi4 (through QCEngine) for single point energies and gradients. The optimizations are part of a dataset of transition metal complexes with initial structures taken from the CSD / ICSD and pre-minimized with a semiempirical model. . Ben sent the QCArchive job specification to my student @hjnpark who converted it to a Psi4 input file (see attached input.dat in data.zip). Using this I was able to reproduce the optimization failure using geomeTRIC's command line calling Psi4 directly. We weren't sure whether the issue was due to geomeTRIC's optimization algorithm or an inaccuracy in the gradient from Psi4, so I computed the numerical gradient using finite difference of the energy and compared it with the analytic gradient. I found several components of the gradient where the difference exceeds 3e-4 and the largest difference exceeds 1e-3. The result is consistent when I use two different step sizes for the finite difference (1e-3 and 1e-4 a.u., both using central (3-point) finite difference; see fd-ana-grad.txt file in attached data.zip). By contrast, for a different system (a water dimer calculated at HF/STO-3G), the max difference between numerical and analytic gradients using a 1e-3 step size is around 1e-6. I've attached a picture where the numerical gradient, analytic gradient, and the difference are visualized. The difference is mainly on the La and Br atoms, with smaller components on the other atoms. These forces do not appear to be purely translational/rotational, but I think there is a translational/rotational component because the ""trajectory"" of the optimization appears to include some translational/rotational motion as well as distortion (attached qce_optim.xyz in data.zip). ![1](https://github.com/psi4/psi4/assets/1441560/e3dea159-d922-40c8-bad9-868b20f710e3). Although",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3066:870,energy,energy,870,https://psicode.org,https://github.com/psi4/psi4/issues/3066,1,['energy'],['energy']
Energy Efficiency,"The eps file doc/progman/svn/svn.eps.in is 1.4 MB and takes a long time to render in Gnome evince. Furthermore, it has the following commtens inside:. %%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.; %%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved. Apparently, doc/progman/svn.fig is the source for a previous version of this .eps. As the progman Makefile is no longer generated by configure.ac, maybe the whole directory could be yanked or the .eps regenerated with fig2dev (which also reduces the size to a few kilobytes)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/26:542,reduce,reduces,542,https://psicode.org,https://github.com/psi4/psi4/issues/26,1,['reduce'],['reduces']
Energy Efficiency,"The following attempt at an IRC fails. The mode I'm following lowers symmetry from C2v to Cs:; ```import os; import shutil. memory 7 gb. molecule ts {; symmetry csx; 0 3; O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. r1 = 0.966761443523761; r2 = 3.122239629907337; a1 = 51.253600445125215; d1 = 180.000000000000000; r3 = 4.641761974905505; d2 = 0.000000000000000; }. hessname = ""output.ts.{}.hess"".format(os.getpid()); shutil.copy(""FCMFINAL"",hessname). set {; opt_type irc; irc_direction backward; basis aug-cc-pV(D+d)Z; maxiter 300; g_convergence gau_verytight; geom_maxiter 1000; cart_hess_read true; dynamic_level 1; reference uhf; irc_step_size 0.01; ensure_bt_convergence true; normal_modes_write true; print_trajectory_xyz_file true; }. energy = optimize('b3lyp'); ```. The problem is in the following snippet of output:; ```; @IRC; @IRC Point Sphere Step Energy DE MAX Force RMS Force MAX Disp RMS Disp; @IRC -----------------------------------------------------------------------------------------------------------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analyti",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1126:757,energy,energy,757,https://psicode.org,https://github.com/psi4/psi4/issues/1126,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"The following command fails for me on Mac: `pytest test_detci_opdm.py test_molden_writer.py::test_H2O_molden[orbso_detci]` as the CI for molden test fails to converge on Mac with current master. The test passes when `test_detci_opdm.py` is removed. I've attached outputs from the failing Molden tests in both cases. Options appear the same. The warning ""(H0block_setup): Can't find CI block!"" appears in both files but is clearly suspicious. The ""H0 block eigenvalue"" is the first iteration energy in the correct output, but not in the buggy output. [errored_case.output.log](https://github.com/psi4/psi4/files/8952917/errored_case.output.log); [correct.output.log](https://github.com/psi4/psi4/files/8952926/correct.output.log)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2618:491,energy,energy,491,https://psicode.org,https://github.com/psi4/psi4/issues/2618,1,['energy'],['energy']
Energy Efficiency,"The following either gives `NaN` energy or (positive) 60,000 [Eh] depending on MKL version and compile options. All basis sets smaller than aug-cc-pVQZ seem to check out, did not try larger. Other guesses, `s_tolerence`, or fitting basis appear to have no effect on this error. UHF works fine. ```; molecule mol {; 0 2; C -2.83891 -0.84747 -0.20778; N -2.06959 -0.27604 0.77905; C -0.85937 -0.82512 0.74757; N -0.82980 -1.74677 -0.21226; C -2.05910 -1.77487 -0.83179; C -2.45490 0.86620 1.59959; C 0.35903 -2.49473 -0.61265; F -1.01767 1.46174 -1.11980; B 0.28985 1.63764 -0.63648; F 0.23738 1.82826 0.77419; F 0.89453 2.73957 -1.24020; F 1.05039 0.46734 -0.88673; H -0.02604 -0.54755 1.38339; H -2.27287 -2.45330 -1.64959; H -3.86751 -0.55086 -0.37733; H -3.45079 0.68580 2.01748; H -1.72185 0.98138 2.40249; H -2.44673 1.75972 0.96603; H 0.98379 -1.85263 -1.24323; H 0.91655 -2.78676 0.28358; H 0.03922 -3.39046 -1.15377; C 2.81822 0.12352 1.52490; C 3.26768 -0.78277 0.56145; H 3.28632 0.11977 2.50813; H 2.01109 0.81253 1.27433; N 3.64537 -1.55240 -0.23308; }. set {; basis aug-cc-pVQZ; scf_type df; guess gwh; reference rohf; }. energy('SCF'); ```. An example of initial convergence can be seen for UHF/aQZ:. ```; Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -716.29320215568873 -7.16293e+02 1.25967e-02; @DF-UHF iter 2: 27.48017620380119 7.43773e+02 1.97120e-02 DIIS; @DF-UHF iter 3: -561.81810445462588 -5.89298e+02 9.53326e-03 DIIS; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/371:33,energy,energy,33,https://psicode.org,https://github.com/psi4/psi4/issues/371,3,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"The following input ; ```; molecule {; 0 1 ; S 0.0904282062 -0.4095883553 0.0000000000; O 1.3547506908 0.3023925212 0.0000000000; O -0.7450974916 0.1927054620 1.2404690507; H -0.3631668951 1.0551025998 1.4663407894; O -0.7450974916 0.1927054620 -1.2404690507; H -0.3631668951 1.0551025998 -1.4663407894; }. set basis cc-pV(D+d)Z. en, wfn = energy('b3lyp', return_wfn = True); nbo = NBOWriter(wfn); nbo.write(""input.47""); ```; produces an absolute nonsense NBO analysis, with heavily delocalized core orbitals, orbital energies over 350, and 1000+ strong donor-acceptor interactions. When you add `symmetry c1`, all is normal again. I haven't been successful in finding the minimal possible example input that displays the problem. Water, for instance, seems to be just fine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1566:340,energy,energy,340,https://psicode.org,https://github.com/psi4/psi4/issues/1566,1,['energy'],['energy']
Energy Efficiency,"The following input crashes with a Segfault:. ```; molecule HeLi {; 	0 1; 	He 0.000000000 0.000000000 0.000000000; 	--; 	1 1; 	Li 3.300000000 0.000000000 0.000000000. 	units angstrom; 	no_reorient; }. set globals {; 	basis aug-cc-pVDZ; 	df_basis_scf aug-cc-pVDZ; 	df_basis_sapt aug-cc-pVDZ; 	df_basis_mp2 aug-cc-pVDZ; }. set_memory(32000000000); energy('sapt2+3(ccd)dmp2'); ```. ```; /home/apps/psi/psi4conda/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source ; libpcm.so.1 00002B46FE54BA15 Unknown Unknown Unknown; libpcm.so.1 00002B46FE549637 Unknown Unknown Unknown; ```; etcetera. Output stops suddenly:; ```; <snip>; ==> CCD Dispersion <==. Beginning Monomer A CCD. Iter Energy (H) dE (H) RMS (H); 1 -0.02083174 0.020831739 0.000000000; 2 -0.02587434 0.005042604 0.000504656; 3 -0.02710324 0.001228894 0.000126313; 4 -0.02740459 0.000301348 0.000031758; 5 -0.02747899 0.000074401 0.000008016 DIIS; 6 -0.02750358 0.000024596 0.000002027 DIIS; 7 -0.02750357 -0.000000016 0.000000004 DIIS; 8 -0.02750358 0.000000015 0.000000002 DIIS; 9 -0.02750358 0.000000001 0.000000000 DIIS. Beginning Monomer B CCD; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1564:346,energy,energy,346,https://psicode.org,https://github.com/psi4/psi4/issues/1564,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"The following input fails with a segfault; ```; molecule {; 0 5; Fe; }. set basis pcseg-0; set reference rohf; set scf_type pk; set mcscf_type conv; # Full space is [ 9, 2, 2, 2, 0, 3, 3, 3]. # Ar core; set restricted_docc [3, 0, 0, 0, 0, 2, 2, 2]; # spd active space; set ras1 [0, 0, 0, 0, 0, 0, 0, 0]; set ras2 [3, 1, 1, 1, 0, 1, 1, 1]; set ras3 [3, 1, 1, 1, 0, 0, 0, 0]; cas_e, cas_wfn = energy('rasscf', return_wfn=True). # Dynamical correlation from Ar core; set restricted_docc [0, 0, 0, 0, 0, 0, 0, 0]; set ras1 [3, 0, 0, 0, 0, 2, 2, 2]; ras_e, ras_wfn = energy('detci', ref_wfn=cas_wfn, return_wfn=True); ```. There's something wrong in the input or the code, since there's an error message in the log file; ```; ==> Setting up CI strings <==. There are 2730 alpha and 105 beta strings; (subgr_lex_addr): Impossible walk!; The CI space requires 18211 (1.82E+04) determinants and 44 blocks; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1693:391,energy,energy,391,https://psicode.org,https://github.com/psi4/psi4/issues/1693,2,['energy'],['energy']
Energy Efficiency,The following input file breaks `inputparser.py`. ```; $ cat input.dat; # ccansmi: O=C(C#C)C=O. molecule h2 {; H; H 1 0.9; }. set basis 6-31G**; energy('scf'); ```. The exception is. ```; $ psi4 input.dat; Input error: Unmatched (; ```. The error is specific to the fact that the comment appears on the first line of the file.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/86:145,energy,energy,145,https://psicode.org,https://github.com/psi4/psi4/pull/86,1,['energy'],['energy']
Energy Efficiency,"The following input file crashes; ```; molecule {; F; F 1 1.4613; }. set freeze_core true; set basis cc-pvdz; set detci ex_level 5 . energy('ci'); ```. Traceback:; ```; Traceback (most recent call last):; File ""/opt/psi/4/master/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/opt/psi/4/master/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/psi/4/master/lib/psi4/driver/procrouting/proc.py"", line 3600, in run_detci; level = kwargs['level']. KeyError: 'level'; ```. If this isn't intended usage, we need to update docs.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2282:133,energy,energy,133,https://psicode.org,https://github.com/psi4/psi4/issues/2282,3,['energy'],['energy']
Energy Efficiency,"The following input file fails with the following message:. ```; Traceback (most recent call last):; File ""/Users/francesco/Source/psi4/lib/python/inputparser.py"", line 732, in process_input; temp = re.sub('^from __future__ import .*$', future_replace, temp, flags=re.MULTILINE); TypeError: sub() got an unexpected keyword argument 'flags'; ```. I was wondering: is it possible that recent changes to python affect the ability to read user-defined basis sets from input files?. ```; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. basis {; cartesian; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****; }. energy('scf'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/169:850,energy,energy,850,https://psicode.org,https://github.com/psi4/psi4/issues/169,1,['energy'],['energy']
Energy Efficiency,"The following input file fails:; ```; set {; reference rhf ; basis cc-pVDZ; scf_type pk; freeze_core true; }. _, wfn = energy('mp2',return_wfn = True); energy('mrccsd', ref_wfn=wfn); ```. The problem is that `run_mrcc` expects [the ""CURRENT SCF ENERGY""](https://github.com/psi4/psi4/blob/2d33c3f83bee2d2b87b7a9ee4eb0c5d230b65403/psi4/driver/procrouting/proc.py#L4572) variable to be set in core, which was wiped [as soon as the energy call ran](https://github.com/psi4/psi4/blob/2d33c3f83bee2d2b87b7a9ee4eb0c5d230b65403/psi4/driver/driver.py#L546). @loriab, is there any reason _not_ to grab this variable from the incoming wavefunction?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2305:119,energy,energy,119,https://psicode.org,https://github.com/psi4/psi4/issues/2305,4,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,The following input file for H10 runs but gives an energy that is not converged:. ```; molecule {; 0 1; H 0.000 0.000 0.0000; H 0.000 0.000 2.5001; H 0.000 0.000 5.0003; H 0.000 0.000 7.5006; H 0.000 0.000 10.0011; H 0.000 0.000 12.5015; H 0.000 0.000 15.0021; H 0.000 0.000 17.5023; H 0.000 0.000 20.0030; H 0.000 0.000 22.5040; symmetry c1; }. set globals {; reference rhf; basis sto-3g; }. energy('fci'); ```. with output. ```; Find the roots by the Simultaneous Expansion Method (Block Davidson Method); Using 1 initial trial vectors; Iter 0 Root 1 = -4.093847469 Delta_E -8.176E+00 Delta_C 5.250E-01; ...; Iter 10 Root 1 = -4.680023014 Delta_E -1.423E-05 Delta_C 4.880E-03; Iter 11 Root 1 = -4.680047623 Delta_E -2.461E-05 Delta_C 7.532E-03; Iter 12 Root 1 = -4.680121394 Delta_E -7.377E-05 Delta_C 1.166E-02. Maximum number of CI iterations reached. * ROOT 1 CI total energy = -4.6801213940684; ```. **Problem:**. The final energy is far from being converged but the user is not warned. The correct converged energy is about 0.0007 Eh below (-4.680868674 Eh). This value can be obtain by adding `set detci maxiter 100` to the input file. . **Feature requested:**; - [ ] Increase the maximum number of iterations in DETCI (currently 12); - [ ] Warn the user/do not print final energy if DETCI does not converge; - [ ] Confirm that failure to converge DETCI does not affect CASSCF computations,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/394:51,energy,energy,51,https://psicode.org,https://github.com/psi4/psi4/issues/394,6,['energy'],['energy']
Energy Efficiency,"The following input file from [forums](http://forum.psicode.org/t/error-in-psio-wt-toclen/2234/5) gives a PSIO error `Error in PSIO_WT_TOCLEN()!` in up-to-date master. Reported said they could also reproduce with CCSD, but I haven't tried this myself. Setting `cachelevel 0` was a workaround, but not one that should be necessary. ```memory 5 gb. molecule = {; 0 2; Cl; O 1 R1; O 2 R2 1 A; R1=2.03230554; R2=1.20810395; A=115.36876732. }. set {; reference rohf; basis aug-cc-pwcvqz; print_MOs true; print 2; scf_type pk; guess sad; freeze_core -2; }. energy(‘bccd’); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261:551,energy,energy,551,https://psicode.org,https://github.com/psi4/psi4/issues/2261,1,['energy'],['energy']
Energy Efficiency,"The following input file gives absurd results using the current dev version of Psi:; ```; memory 1000 mb. molecule {; -1 1; I; }. basis {; assign I def2-tzvppd; }. set basis_guess true. energy('scf'); ```. The small basis computation ends with; ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 9, 2, 2, 2, 0, 4, 4, 4 ] . @DF-RHF Final Energy: -6892.35157729932507; ```. Here's how the large basis computation went:; ```; @DF-RHF iter 0: 590.08005432721836 5.90080e+02 2.80084e-01; Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 5, 2, 2, 2, 1, 5, 5, 5 ] . @DF-RHF iter 1: -67.13552163426122 -6.57216e+02 3.44500e-01 ; Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 7, 2, 2, 2, 0, 5, 4, 5 ] . @DF-RHF iter 2: -5.42420113211885 6.17113e+01 6.71875e-01 DIIS; @DF-RHF iter 3: -208.00917694080209 -2.02585e+02 3.53265e-01 DIIS; Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 8, 2, 2, 3, 0, 4, 4, 4 ] . @DF-RHF iter 4: -213.73836050769307 -5.72918e+00 3.05852e-01 DIIS; @DF-RHF iter 5: -229.29046486569237 -1.55521e+01 1.60752e-01 DIIS; @DF-RHF iter 6: -231.83352362698204 -2.54306e+00 8.54643e-02 DIIS; @DF-RHF iter 7: -233.14739556085581 -1.31387e+00 1.00459e-02 DIIS; @DF-RHF iter 8: -233.26115993293257 -1.13764e-01 6.01984e-03 DIIS; @DF-RHF iter 9: -233.30679760470645 -4.56377e-02 2.25206e-03 DIIS; @DF-RHF iter 10: -233.31593146369286 -9.13386e-03 6.80191e-04 DIIS; @DF-RHF iter 11: -233.31660737631540 -6.75913e-04 2.28951e-04 DIIS; @DF-RHF iter 12: -233.31678610778147 -1.78731e-04 1.58902e-04 DIIS; @DF-RHF iter 13: -233.31696020659965 -1.74099e-04 1.02174e-04 DIIS; @DF-RHF iter 14: -233.31707462571032 -1.14419e-04 1.37466e-05 DIIS; @DF-RHF iter 15: -233.31707485378129 -2.28071e-07 3.16438e-06 DIIS; @DF-RHF iter 16: -233.31707486465362 -1.08723e-08 5.35650e-07 DIIS; Energy converged.; ```. (Are ECP electrons supposed to be included in DOCC?). The listed doubly occupied orbitals are; ```; Doubly Occupied:. 1Ag -1.892135 1B1u 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1439:186,energy,energy,186,https://psicode.org,https://github.com/psi4/psi4/issues/1439,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"The following input file raises the error: `Cannot set element 12 since there are only 12 elements.` Somewhere, Psi is trying to set a non-existing vector element. I'm very curious why tests didn't catch this. ```; memory 2 GB. molecule {; 0 1; C 1.741722 -1.200108 -0.733703; C 1.723351 -1.235440 0.673033; C 1.741208 -0.034341 1.406196; C 1.720430 1.201594 0.733472; C 1.738484 1.236058 -0.673301; C 1.720301 0.035400 -1.407211; H 1.811924 -2.125930 -1.299462; H 1.810840 -2.187236 1.191603; H 1.810814 -0.061176 2.490913; H 1.805598 2.126733 1.298598; H 1.806257 2.188975 -1.192470; H 1.805027 0.062415 -2.491005; --; 2 1; Ba -1.306490 -0.000406 0.000195; }; basis {; assign jun-cc-pVDZ; assign Ba GENECP. [GENECP]; cartesian; ****; Ba 0 ; S 3 1.00; 0.8699000 -2.2549747 ; 0.6676000 2.5145786 ; 0.1982000 0.5775184 ; S 4 1.00; 0.8699000 2.0391383 ; 0.6676000 -2.3717712 ; 0.1982000 -1.2758006 ; 0.0823000 1.1703346 ; S 1 1.00; 0.0231000 1.0000000 ; P 3 1.00; 1.6050000 -0.1626403 ; 0.4790000 0.6971289 ; 0.1818000 0.4505107 ; P 2 1.00; 0.1804000 -0.2642537 ; 0.0476000 1.1347212 ; P 1 1.00; 0.0192000 1.0000000 ; ****; }. energy('sapt0'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2853:1125,energy,energy,1125,https://psicode.org,https://github.com/psi4/psi4/issues/2853,1,['energy'],['energy']
Energy Efficiency,"The following input file segfaults:; ```; molecule {; symmetry c1; H; H 1 1.0 ; }. set basis cc-pvdz; e, wfn = energy('fci', return_wfn=True); wfn.form_tpdm(); ```. The issue is that the driver [cleans up DETCI after every energy call](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3579). That cleanup [frees the decode matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/ciwave.cc#L458). But `form_tpdm` works by [creating a new CI vector](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/tpdm.cc#L56), which is [set with the decode matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/civect.cc#L115), which the driver freed, giving rise to a bad access exception. So which code is supposed to be responsible for DETCI cleanup? If that's the responsibility of `procrouting`, then `form_tpdm` is always going to segfault, so `form_tpdm` shouldn't be exposed to Python at all, and the user should have the TPDM be formed and kept via `set tpdm true`. If cleanup is not the responsibility of `procrouting`, then which code is supposed to be responsible for it? Leave it to the destructor?. DETCI design decisions are above my pay grade, so I'm leaving this to DGAS and CDS. The 1.4 paper is of course higher priority, but I need this feature working very badly, so I will start pinging on Tuesday.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1812:111,energy,energy,111,https://psicode.org,https://github.com/psi4/psi4/issues/1812,2,['energy'],['energy']
Energy Efficiency,"The following input file:; ```; molecule fluorine {; 0 1 ; F; F 1 1.4113; }. set globals {; basis cc-pvdz; reference uhf ; scf_type pk ; e_convergence 10 ; d_convergence 10 ; stability_analysis follow; }. energy ('scf'); ```; reports a B1u eigenvalue of -0.098916 at an SCF energy of -198.685730305942 hartrees. After disabling symmetry, I found a perfectly stable wavefunction at... -198.685730305942 hartrees. So why is the use of D2h symmetry ""creating"" a negative orbital hessian eigenvalue that wasn't there when no symmetry was used?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1125:205,energy,energy,205,https://psicode.org,https://github.com/psi4/psi4/issues/1125,2,['energy'],['energy']
Energy Efficiency,"The following input file:; ```; molecule h2o {; H; C 1 r1; O 2 r2 1 a1 ; O 2 r2 1 a1 3 180 . r1 = 1.085; r2 = 1.249; a1 = 123.8; }. set reference uhf ; set basis sto-3g. set SOCC [0, 0, 0, 1]. energy('scf'); ```; gives an SCF with a single electron. At present, Psi seems to assume `DOCC` is zero if `DOCC` isn't set but `SOCC` is.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1370:193,energy,energy,193,https://psicode.org,https://github.com/psi4/psi4/issues/1370,1,['energy'],['energy']
Energy Efficiency,"The following input file; ```; molecule mol {; 0 1 ; units bohr; O 0 0 -0.143225816552; H 0 1.638036840407 1.136548822547; H 0 -1.638036840407 1.136548822547; }. set {; reference uhf ; basis sto-3g; scf_type pk; mp2_type conv; dcft_functional odc-12; }. energy('omp2'); energy('dcft'); ```; crashes with error; ```; PSIO_ERROR: Attempt to write into next entry: 61, MO Ints (OO|OV); PSIO_ERROR: unit = 61, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1479, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:; ```; Modifying the input file showed the following:. - The error resolves when changing the reference from UHF to RHF; - Both ODC-06 and ODC-12 will trigger the error, but neither DC-06 nor DC-12 will; - Both OMP2 and OLCCD before the ODC will trigger the error, but neither MP2 nor LCCD will",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288:254,energy,energy,254,https://psicode.org,https://github.com/psi4/psi4/issues/1288,4,['energy'],['energy']
Energy Efficiency,"The following input runs a CISD computation and crashes with the current version of psi4 (fe3ab0d). ```; molecule {; O; H 1 R; H 1 R 2 A. R = .9; A = 104.5; symmetry c1; }. set basis sto-3g; energy('cisd'); ```. Here is the console output:. ```; Traceback (most recent call last):; File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/psi4"", line 210, in <module>; exec(content); File ""<string>"", line 30, in <module>; File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/../lib//psi4/driver/driver.py"", line 447, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/../lib//psi4/driver/procedures/proc.py"", line 946, in select_cisd; return func(name, **kwargs); File ""/Users/francesco/Source/psi4-fork-bin-Debug/bin/../lib//psi4/driver/procedures/proc.py"", line 3949, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn). RuntimeError: ; Fatal Error: ndocc must be less than nvirt; Error occurred in file: /Users/francesco/Source/psi4-fork/psi4/src/psi4/fnocc/ccsd.cc on line: 142; The most recent 5 function calls were:; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/546:191,energy,energy,191,https://psicode.org,https://github.com/psi4/psi4/issues/546,3,['energy'],['energy']
Energy Efficiency,"The following input, given to me via email, gives a 'bad' dMP2 correction for SAPT:; ```; delta HF,r (2) -18.53850185 [mEh] -11.63308554 [kcal/mol] -48.67282991 [kJ/mol]; delta MP2,r (2) 141.03839795 [mEh] 88.50293088 [kcal/mol] 370.29626281 [kJ/mol]; ```. ```; molecule {; 0 1; F 0.00000000 0.00000000 2.96216000; I 0.00000000 0.00000000 0.96704400; --; 0 1; C 0.00000000 0.00000000 -2.52999200; N 0.00000000 0.00000000 -1.35165800; Na 0.00000000 0.00000000 -4.84283500; units angstrom; no_reorient; symmetry c1; }; memory 20 GiB; set {; basis def2-TZVP; freeze_core true; }; energy('sapt2+dMP2'); energy('mp2',bsse_type=['nocp']); ```. The issue is reproducible for MP2/CCSD post-SCF methods. It is not directly `DF` nor `ghost` atom related. (besides a possibly small error due to https://github.com/psi4/psi4/issues/1968). And not a module specific issue. Using different ECPs (LANL2DZ) or an all electron basis (x2c-SVPall, no rel. effects.) with global `FC=on` seems to give 'better' results in the sense that MP2 interaction energy is negative. One, and perhaps only, issue is `frozen_core`.; Turning `FC = off` only for the supermolecular MP2 part gives OK results. For the NaCN fragment we are freezing 10 electrons, while e.g. ORCA is freezing only 3. ; At least for this case, freezing the Ne-shell by default for Na is not a good choice. Tagging @PeterKraus. `freeze_core -2` makes the SAPT part crash because sth goes wrong for the `IF` fragment (fragment A):; ```; FOCC A = 18446744073709551611; FOCC B = 1; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2012:577,energy,energy,577,https://psicode.org,https://github.com/psi4/psi4/issues/2012,3,['energy'],['energy']
Energy Efficiency,"The following input:. ```; E, wfn = energy(cbs, cbs_metadata=[{""wfn"":""hf"", ""basis"": ""cc-pwcv[tq]z-pp""},; {""wfn"":""mp2"", ""basis"": ""cc-pwcvtz-pp""}],; molecule=dimer,; return_wfn=True, dertype=0,; bsse_type=""cp""); ```. crashes with `UnboundLocalError: local variable 'bsse' referenced before assignment`. This is related to the logic on line 665:. https://github.com/psi4/psi4/blob/8e9d6888d722d071a9043bd8707ded67df81d7d3/psi4/driver/driver_nbody.py#L661-L668. The first (and only) assignment into `bsse` comes after, on line 681:. https://github.com/psi4/psi4/blob/8e9d6888d722d071a9043bd8707ded67df81d7d3/psi4/driver/driver_nbody.py#L680-L685. I'm not sure what this logic is doing exactly, but I'm guessing just switching the order of the blocks might do the trick.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1649:36,energy,energy,36,https://psicode.org,https://github.com/psi4/psi4/issues/1649,1,['energy'],['energy']
Energy Efficiency,"The following input; ```; memory 10 gb. molecule {; units bohr; 0 3; H; H 1 1.401100; }. set basis cc-pVDZ; set num_roots 20; set e_convergence 1e-9; set r_convergence 1e-7; set diag_method rsp; set icore 1; set calc_s_squared true; set reference rohf; energy('fci'); ```; leads to garbage energies. It is surprising that this even runs, since there are only 11 determinants. This means that all the roots beyond 10 are spurious.; ```; ==> FCI root 11 information <==. FCI Root 11 energy = 0.713724930411819. The 11 most important determinants:. * 1 -0.034785 ( 25, 0) 1AgA 2B1uA ; * 2 0.022822 ( 26, 0) 2AgA 2B1uA ; * 3 0.011314 ( 31, 0) 1B3gA 1B2uA ; * 4 0.011314 ( 30, 0) 3AgA 3B1uA ; * 5 0.006836 ( 29, 0) 2AgA 3B1uA ; * 6 -0.003553 ( 28, 0) 1AgA 3B1uA ; * 7 -0.001178 ( 22, 0) 1AgA 1B1uA ; * 8 0.000527 ( 23, 0) 1B1uA 2AgA ; * 9 -0.000025 ( 27, 0) 3AgA 2B1uA ; * 10 -0.000022 ( 24, 0) 1B1uA 3AgA . ==> FCI root 12 information <==. FCI Root 12 energy = 0.713724930411819. The 11 most important determinants:. * 1 0.997978 ( 24, 0) 1B1uA 3AgA ; * 2 -0.044153 ( 23, 0) 1B1uA 2AgA ; * 3 0.035020 ( 25, 0) 1AgA 2B1uA ; * 4 0.016316 ( 22, 0) 1AgA 1B1uA ; * 5 0.015442 ( 27, 0) 3AgA 2B1uA ; * 6 0.010267 ( 31, 0) 1B3gA 1B2uA ; * 7 0.010267 ( 30, 0) 3AgA 3B1uA ; * 8 0.009433 ( 29, 0) 2AgA 3B1uA ; * 9 -0.007604 ( 28, 0) 1AgA 3B1uA ; * 10 0.000987 ( 26, 0) 2AgA 2B1uA . ==> FCI root 13 information <==. FCI Root 13 energy = 0.713724930411819. The 11 most important determinants:. * 1 9428415418299144033154400292021347105929105493743677660349912587242773315947068624452342728374216723512286367807081434394321801889849919042883561598345939692181343106349826374754254429319550145134592.000000 ( 32, 0) 1B2gA 1B3uA ; * 2 0.997807 ( 22, 0) 1AgA 1B1uA ; * 3 -0.047756 ( 23, 0) 1B1uA 2AgA ; * 4 -0.031275 ( 26, 0) 2AgA 2B1uA ; * 5 -0.027155 ( 25, 0) 1AgA 2B1uA ; * 6 -0.017321 ( 24, 0) 1B1uA 3AgA ; * 7 -0.007466 ( 29, 0) 2AgA 3B1uA ; * 8 -0.003632 ( 28, 0) 1AgA 3B1uA ; * 9 -0.003171 ( 27, 0) 3AgA 2B1uA ; * 1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2779:253,energy,energy,253,https://psicode.org,https://github.com/psi4/psi4/issues/2779,3,['energy'],['energy']
Energy Efficiency,"The following input; ```; molecule {; 0 1; Li; Li 1 1.63; }. basis {; spherical; ****; Li 1; S 1 1.0; 20.0 1.0; S 1 1.0; 2.0 1.0; ****; Li 2; S 1 1.0; 10.0 1.0; S 1 1.0; 1.0 1.0; ****; }. energy('scf'); ```; should give me the first basis set on atom 1 and the second basis set on atom 2. What I get instead is. ```; $ psi4 . QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/crc, /tmp/crc, /home/work/psi4/install/share/psi4/basis; Input Blocks: anonymous8452ca2a. Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 48, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 493, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 2006, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 1266, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 115, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/work/psi4/install/lib/psi4/driver/p4util/python_helpers.py"", line 77, in pybuild_basis; return_atomlist=return_atomlist); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 683, in pyconstruct; verbose=verbose); File ""/home/work/psi4/install/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 902, in construct; (at + 1, key, text2)). BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['LI']; Basis Sets: [('anonymous8452ca2a', 'anonymous8452ca2a', None)]; File Path: /tmp/cr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1270:188,energy,energy,188,https://psicode.org,https://github.com/psi4/psi4/issues/1270,3,['energy'],['energy']
Energy Efficiency,"The following job converges to a nonsensical CCSD correlation energy (about -4 hartrees) on our i7-5930 nodes. Even on iteration 2, the problem is manifesting:. ```; Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -2.3661052959 -2.3661052959 0.8065388359 14; 1 1 1 -3.3098744652 -0.9437691693 1.5557928713 155; ```. ```; molecule{; C 2.072533 0.400337 0.000000 ; C 2.351068 -0.237230 -1.205081 ; C 2.351068 -0.237230 1.205081 ; C 2.908137 -1.512363 -1.205081 ; C 2.908137 -1.512363 1.205081 ; C 3.186672 -2.149930 0.000000 ; H 1.640169 1.390021 0.000000 ; H 2.134886 0.257612 -2.140393 ; H 2.134886 0.257612 2.140393 ; H 3.124320 -2.007205 -2.140393 ; H 3.124320 -2.007205 2.140393 ; H 3.619036 -3.139614 0.000000 ; C -1.382969 1.594698 0.000000 ; C -0.970087 2.154700 -1.205081 ; C -0.970087 2.154700 1.205081 ; C -0.144324 3.274703 -1.205081 ; C -0.144324 3.274703 1.205081 ; C 0.268558 3.834704 0.000000 ; H -2.023878 0.725418 0.000000 ; H -1.290542 1.720059 -2.140393 ; H -1.290542 1.720059 2.140393 ; H 0.176131 3.709343 -2.140393 ; H 0.176131 3.709343 2.140393 ; H 0.909467 4.703984 0.000000 ; C -0.689564 -1.995035 0.000000 ; C -1.380981 -1.917470 -1.205081 ; C -1.380981 -1.917470 1.205081 ; C -2.763814 -1.762339 -1.205081 ; C -2.763814 -1.762339 1.205081 ; C -3.455230 -1.684774 0.000000 ; H 0.383709 -2.115439 0.000000 ; H -0.844344 -1.977672 -2.140393 ; H -0.844344 -1.977672 2.140393 ; H -3.300450 -1.702138 -2.140393 ; H -3.300450 -1.702138 2.140393 ; H -4.528503 -1.564371 0.000000 ; }; memory 60 Gb; set{; basis cc-pvdz; freeze_core true; scf_type df; guess SAD; }. energy('FNO-DF-CCSD(T)'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/209:62,energy,energy,62,https://psicode.org,https://github.com/psi4/psi4/issues/209,4,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,The following smoketests are failing on the current master branch; ```; The following tests FAILED:; 	138 - dfmp2-1 (Failed); 	486 - ddd-deriv (Failed); 	491 - psi4numpy-rhf (Failed); 	493 - psi4numpy-rhf-hessian (Failed); 	498 - python-energy (Failed); 	513 - json-schema-1-gradient (Failed); ```; Are these failures reproducible?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3028:237,energy,energy,237,https://psicode.org,https://github.com/psi4/psi4/issues/3028,1,['energy'],['energy']
Energy Efficiency,"The grepable '@ROHF' in each iteration is printed incorrectly as '@DF-ROHF' if running PK algorithm after a previous DF computation. Example (input file below):; ```; ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 11; Number of AO shells: 90; Number of primitives: 196; Number of atomic orbitals: 285; Number of basis functions: 250. Integral cutoff 1.00e-12; Number of threads: 8. Performing in-core PK; Using 984422000 doubles for integral storage.; We computed 8218442 shell quartets total.; Whereas there are 8386560 unique shell quartets. ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory [MiB]: 11444; Schwarz Cutoff: 1E-12. OpenMP threads: 8. Minimum eigenvalue in the overlap matrix is 4.0355404199E-04.; Using Symmetric Orthogonalization. SCF Guess: Orbitals guess was supplied from a previous computation. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-ROHF iter 0: -341.07180740631509 -3.41072e+02 3.89250e-08; @DF-ROHF iter 1: -341.07180740660510 -2.90015e-10 2.49267e-06; @DF-ROHF iter 2: -341.07180758006677 -1.73462e-07 2.84695e-07 DIIS; ```; This input file produces the problem (edit: had the wrong molecule name). ```; memory 16 GB. molecule qr3 {; 0 2; O; C 1 1.24816; H 2 1.09517 1 120.2960; C 2 1.40976 1 123.9986 3 180.0; O 4 1.31711 2 123.7177 1 D1; O 5 1.41029 4 117.3948 2 D2; H 6 1.00462 5 103.4812 4 D3; C 4 1.48637 5 112.7653 2 180.0; H 8 1.08795 4 109.7238 2 0.00; H 8 1.09123 9 109.0482 4 -121.2; H 8 1.09132 9 109.0157 4 121.2; }. qr3.D1 = 0.0; qr3.D2 = 0.0; qr3.D3 = 0.0; qr3.update_geometry(). set {; basis cc-pvtz; reference uhf; }. set scf {; scf_type df; stability_analysis follow; soscf true; soscf_max_iter 20; max_attempts 5; }. energy('scf'). set scf {; reference rohf; guess read; stability_analysis none; }. energy('scf'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1503:934,Energy,Energy,934,https://psicode.org,https://github.com/psi4/psi4/issues/1503,3,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"The input file:. ```; memory 1 Gb. molecule NO; {; 1 1; N; O 1 R; units au; }. set {; guess read. diag_method rsp. VECS_WRITE true; NUM_VECS_WRITE 1. basis sto-3g; }. NO.R = 2. energy('scf'). NO.R = 50. energy('fci'). set {; diag_method sem; GUESS_VECTOR IMPORT; }. energy('fci'); ```. I first calculated the RHF solution at 2 Bohr and use it as seed for the solution at 50 Bohr. The first `energy('fci')` uses exact diagonalization and produces the correct energy `-127.1625943265614`. The second call to `energy('fci')` uses Davidson with as start guess the CI vector from the previous calculation. This should immediately convergence yet it finds a ground state energy of `-1527.1801524600446`. Clearly very far below the actual lowest eigenvalue. Something goes terrible wrong here. . Any ideas?. It also would be nice if the docs would mention that building the OPDM, etc doesn't work if you use `diag_method rsp`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/175:177,energy,energy,177,https://psicode.org,https://github.com/psi4/psi4/issues/175,7,['energy'],['energy']
Energy Efficiency,"The input; ```; molecule {; 0 2; Li; }. set basis def2-SVP; set reference uhf; set freeze_core True; set scf_type df; set mp2_type df. energy('mp2'); ```; results in a crash:; ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: There are no occupied orbitals with beta spin. !; ! Error occurred in file: /scratch/psilocaluser/conda- !; ! builds/psi4-multiout_1671346910751/work/psi4/src/psi4/dfmp2/mp2.cc on line: !; ! 206 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```; even though there are occupied orbitals with beta spin; ```; --------------------------------------------------------; DF-MP2 ; 2nd-Order Density-Fitted Moller-Plesset Theory ; UMP2 Wavefunction, 1 Threads ; ; Rob Parrish, Justin Turney, Andy Simmonett, ; Ed Hohenstein, and C. David Sherrill ; --------------------------------------------------------. --------------------------------------------------------; NBF = 9, NAUX = 25; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 1 2 1 7 7 0; BETA 1 1 0 8 8 0; --------------------------------------------------------. ```; A related issue is that the hydrogen also fails with the same error. For hydrogen (or any one-electron system), MP2 should return the HF energy.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2976:135,energy,energy,135,https://psicode.org,https://github.com/psi4/psi4/issues/2976,2,['energy'],['energy']
Energy Efficiency,"The input; ```; molecule {; 0 5; Ar; }. set basis sto-3g; set reference rohf; energy('scf'); ```; gives a segfault in both Psi4 1.3.2 as well as the current master.; ```; Program terminated with signal SIGSEGV, Segmentation fault.; #0 0x00007fce90309923 in psi::scf::HF::find_occupation (this=0x55f4fdfe6140) at /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/hf.cc:463; 463	 for (int i = 0; i < nalpha_; ++i) nalphapi_[pairs_a[i].second]++;; (gdb) bt; #0 0x00007fce90309923 in psi::scf::HF::find_occupation (this=0x55f4fdfe6140) at /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/hf.cc:463; #1 0x00007fce903340b2 in psi::scf::ROHF::form_initial_C (this=0x55f4fdfe6140) at /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/rohf.cc:465; #2 0x00007fce9031193d in psi::scf::HF::guess (this=0x55f4fdfe6140) at /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/hf.cc:1157; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1981:78,energy,energy,78,https://psicode.org,https://github.com/psi4/psi4/issues/1981,1,['energy'],['energy']
Energy Efficiency,"The input; ```; molecule {; H; H 1 0.60; }. set basis cc-pVDZ; set docc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; # STO-3G active space; set active [1, 0, 0, 0, 0, 1, 0, 0 ]; energy('casscf'); ```; fails with the up-to-date master branch with the error message; ```; Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 387, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 519, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 5483, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 153, in mcscf_solver; nci_iter = ciwfn.diag_h(abs(ediff) * 1.e-2, orb_grad_rms * 1.e-3). RuntimeError: ; Fatal Error: DSYEV diagonalizer failed in DETCI SEM!; Error occurred in file: /home/work/psi4/psi4/src/psi4/detci/sem.cc on line: 561; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; """"""); core.IO.set_default_namespace(""""); core.set_global_option(""BASIS"", ""cc-pVDZ""); core.set_global_option(""DOCC"", [ 1, 0, 0, 0, 0, 0, 0, 0 ]); core.set_global_option(""ACTIVE"", [1, 0, 0, 0, 0, 1, 0, 0 ]); --> energy('casscf'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: DSYEV diagonalizer failed in DETCI SEM! !; ! Error occurred in file: /home/work/psi4/psi4/src/psi4/detci/sem.cc on line: 561 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! !; !----------------------------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3096:161,energy,energy,161,https://psicode.org,https://github.com/psi4/psi4/issues/3096,3,['energy'],['energy']
Energy Efficiency,"The input; ```; set basis pcseg-0; energy('scf'); ```; runs even though a molecule has not been set. It appears that Psi4 defaults to the hydrogen dimer. I don't think this functionality is a feature, since the behavior is unexpected.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3115:35,energy,energy,35,https://psicode.org,https://github.com/psi4/psi4/issues/3115,1,['energy'],['energy']
Energy Efficiency,"The manual states that when NO_RESPONSE option is set, SAPT0 should print a warning that uncoupled induction is computed. There is no such warning and the final printing contains Ind20,r which seems to imply response. I can probably do the necessary changes but I create the issue so it does not get forgotten. Example input:. ```; import psi4; psi4.set_output_file(""output_ref.dat""); water_dimer = psi4.geometry(""""""; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; units angstrom; no_com; no_reorient; symmetry c1; """"""). psi4.set_options({""BASIS"" : ""cc-pVDZ"",; ""SCF_TYPE"": ""DF"",; ""SAVE_JK"" : True,; ""NO_RESPONSE"" : True,; }). psi4.energy('sapt0'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/907:780,energy,energy,780,https://psicode.org,https://github.com/psi4/psi4/issues/907,1,['energy'],['energy']
Energy Efficiency,"The new error printing in #1862 seems to struggle when the message it's trying to print contains newlines. Consider the following input file. ```; molecule {; symmetry c1; N; N 1.500; }; set {; basis cc-pVD; }; energy('scf'); ```. This will raise a syntax error because I have a malformed Z-matrix. The new box will print out. ```; !----------------------------------------------------------------------------------!; ! !; ! Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]: symmetry c1 N !; ! N 1.500 !; ! !; !----------------------------------------------------------------------------------!; ```. where the original error message is the more readable. ```; qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]:; symmetry c1; N; N 1.500; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1867:211,energy,energy,211,https://psicode.org,https://github.com/psi4/psi4/issues/1867,1,['energy'],['energy']
Energy Efficiency,"The only remaining test suite failure now is:. ```; 22/140 Test #84: cdomp2-2 .........................***Failed 1.17 sec; 	Nuclear Repulsion Energy (a.u.)...................................PASSED; 	CD-HF Energy (a.u.)...............................................PASSED; 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 39, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/x86_64-linux-gnu/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. _Originally posted by @mbanck in https://github.com/psi4/psi4/issues/1457#issuecomment-451647367_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461:142,Energy,Energy,142,https://psicode.org,https://github.com/psi4/psi4/issues/1461,4,['Energy'],['Energy']
Energy Efficiency,"The test `pywrap-opt-sowreap` is failing for me with the following error message:. ```; Performing finite difference calculations; 5 displacements needed ...; An error has occurred Py-side; Traceback:; <type 'exceptions.TypeError'>: 'float' object is not iterable: File ""<string>"", line 25, in <module>. File ""/home/avcopan/Documents/code/github/psi4/share/python/driver.py"", line 1158, in optimize; G, wfn = gradient(name, return_wfn=True, molecule=moleculeclone, **kwargs). ```. I did some poking around and it looks like the problem is that this code (see [here](https://github.com/psi4/psi4/blob/master/share/python/driver.py#L1153)):. ```; def optimize(name, **kwargs):; # ...; G, wfn = gradient(name, return_wfn=True, molecule=moleculeclone, **kwargs); psi4.set_gradient(G); thisenergy = psi4.get_variable('CURRENT ENERGY'); ```. breaks when gradient is called in sow-reap mode because it returns `0.0` rather than a matrix-wavefunction tuple (see [here](https://github.com/psi4/psi4/blob/master/share/python/driver.py#L843)):. ```; def gradient(name, **kwargs):; # ...; if dertype == 1:; # ...; else:; # ...; if (opt_mode.lower() == 'sow'):; optstash.restore(); return 0.0; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/291:821,ENERGY,ENERGY,821,https://psicode.org,https://github.com/psi4/psi4/issues/291,1,['ENERGY'],['ENERGY']
Energy Efficiency,"The two below should give the same freq analysis. They don't because though the `Molecule.set_mass()` _does_ reset the mass, it doesn't reset the symmetry. ```; molecule hdo {; units au; O 0.00000000 0.00000000 0.00000000; H@2.014101779 0.00000000 1.93042809 -1.10715266; H 0.00000000 -1.93042809 -1.10715266; }. set basis cc-pvdz; set print 3. e = energy('hf'); print 'mass in input string'; print e; print hdo.schoenflies_symbol(). frequency('hf'); ```. ```; molecule h2o {; units au; O 0.00000000 0.00000000 0.00000000; H 0.00000000 1.93042809 -1.10715266; H 0.00000000 -1.93042809 -1.10715266; }. set basis cc-pvdz; set print 3. hdo = h2o.clone(); hdo.set_mass(1, 2.014101779); print hdo.schoenflies_symbol(); hdo.update_geometry(); print hdo.schoenflies_symbol(). e = energy('hf', molecule=hdo); print 'mass through setter'; print e; print hdo.schoenflies_symbol(). frequency('hf'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/346:349,energy,energy,349,https://psicode.org,https://github.com/psi4/psi4/issues/346,2,['energy'],['energy']
Energy Efficiency,"The xyz format sometimes specifies atomic charges instead of atomic symbols, e.g. 6 0.0 0.0 0.0. instead of. C 0.0 0.0 0.0. If possible, it would be nice for the parser to be able to cope with this kind of a definition.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/418:42,charge,charges,42,https://psicode.org,https://github.com/psi4/psi4/issues/418,1,['charge'],['charges']
Energy Efficiency,"There are many ways to converge RHF, and sometimes you can get stuck in a local minmum, that's true. However, the following case is quite striking. My input:. ---. molecule N2 {; N 0.000000000000 0.000000000000 0.000000000000; N 0.000000000000 0.000000000000 2.060000000000; units au; }. plugin_load(""./mointegrals.so""). set basis sto-3g; set mointegrals print 1; set reference rhf. scf(). plugin(""mointegrals.so""). ---. I use the MO integrals for a subsequent FCI calculation (in a self-written program). When I start from the RHF determinant given by Psi4:. DOCC [ 2, 0, 1, 0, 0, 2, 1, 1 ]; Total Energy = -106.7540443603229363. the FCI energy converges to the wrong answer. When I look at the energies from all possible determinants with Sz=0; irrep Ag; and N=14 electrons in the MO single-particle basis from Psi4, there is a determinant (in that MO basis!) with an energy which is lower: E = -107.488903265175 . The FCI energy then does converge to the right answer when this determinant is given as input for Davidson iterations.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/63:599,Energy,Energy,599,https://psicode.org,https://github.com/psi4/psi4/issues/63,4,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"There is a problem ""Orbital basis argument must not be empty"" when calling fchk() after the method and basis are defined in the energy() function call.; This problem is found in the latest development version 1.4rc2.dev97.; v1.3.x did not have this problem. ```; molecule {; 0 1; O 3.031916 1.669683 2.276015; H 2.818359 1.127467 3.035217; H 2.894980 2.585172 2.519181; }; E, wfn = energy('mp2/6-311G**',properties=['dipole'],return_wfn=True); fchk(wfn, ""test4-dma.fchk""); clean(); ```. ```; Traceback (most recent call last):; File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/bin/psi4"", line 332, in <module>; exec(content); File ""<string>"", line 69, in <module>; File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1993, in fchk; wfn_ = core.Wavefunction.build(wfn.molecule(), core.get_global_option('BASIS')); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 125, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 90, in _pybuild_basis; return_atomlist=return_atomlist); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 646, in pyconstruct; raise ValidationError(""""""Orbital basis argument must not be empty.""""""). psi4.driver.qcdb.exceptions.ValidationError: Orbital basis argument must not be empty. Printing out the relevant lines from the Psithon --> Python processed input file:; H 2.818359 1.127467 3.035217; H 2.894980 2.585172 2.519181; """"""); core.IO.set_default_namespace(""""); E, wfn = energy('mp2/6-311G**',properties=['dipole'],return_wfn=True); --> fchk(wfn, ""test4-dma.fchk""); clean(). !--------------------------------------------!; ! !; ! Orbital basis argument must not be empty. !; ! !; !-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2177:128,energy,energy,128,https://psicode.org,https://github.com/psi4/psi4/issues/2177,2,['energy'],['energy']
Energy Efficiency,"There is a segfault when `set freeze_core true` is set before a `gaussian-2` computation. Note that because of how `gaussian-2` is defined, defining a basis set is not necessary. The segfault occurs after `CGRSolver converged.` prints. I'm not familiar enough with G2 to know whether frozen core G2 is defined, or if this keyword needs to be ignored. ```; molecule {; o; h 1 r1; h 1 r1 2 a1. r1 = 1.0 ; a1 = 104.5; }. set freeze_core true. energy('gaussian-2'); ```. @edeprince3",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1530:440,energy,energy,440,https://psicode.org,https://github.com/psi4/psi4/issues/1530,1,['energy'],['energy']
Energy Efficiency,"There seems to be a wrong HOMO/LUMO mixing when SAD is used. ; ```python; H2 = psi4.geometry(f""""""; 0 1; H; H 1 3.0; symmetry c1; """"""); psi4.set_options({""REFERENCE"": ""uhf"", ; ""guess"": ""gwh"",; ""e_convergence"": 12,; ""basis"": ""cc-pvdz"",; ""guess_mix "": True,; }); E = psi4.energy(""scf"", molecule=H2); ```; It gives:; ```; Mixing alpha HOMO/LUMO orbitals (1,2); @DF-UHF iter 8: -0.99872135104496 -1.08802e-14 1.64991e-11 DIIS; ```; But for SAD; ```python; psi4.set_options({""REFERENCE"": ""uhf"", ; ""guess"": ""SAD"",; ""e_convergence"": 12,; ""basis"": ""cc-pvdz"",; ""guess_mix "": True,; }); E = psi4.energy(""scf"", molecule=H2); ```; It gives; ```; Mixing alpha HOMO/LUMO orbitals (2,3); @DF-UHF iter 5: -0.82648407827446 -6.66134e-15 5.36516e-14 DIIS; ```; My psi4.__version__ is 1.5.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2410:269,energy,energy,269,https://psicode.org,https://github.com/psi4/psi4/issues/2410,2,['energy'],['energy']
Energy Efficiency,"There's a big difference in speed between MemDFJK and DiskDFJK. For the former case, it would probably not be a bad idea to compress the DF integrals with Kállay's trick from [J. Chem. Phys. 141, 244113 (2014)](https://doi.org/10.1063/1.4905005), which can reduce the number of auxiliary functions. I assume the savings would be especially significant for small basis set calculations like 6-31G*.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3075:257,reduce,reduce,257,https://psicode.org,https://github.com/psi4/psi4/issues/3075,1,['reduce'],['reduce']
Energy Efficiency,"There's going to be planning on this this week, so this is the opportunity for others (particularly @dsirianni and @alenaizan) to chime in with requirements and wishes. consider this issue a scratchpad. ### haphazard notes; * overlap or replacement of the `QMMM` class; * serialization so can be called from json; * but we'd like to be able to specify polarizabilities at given sites, and have the SCF solver use those to figure out the magnitude of induced dipoles at the MM sites; * needs a subdict of points with (up to) anisotropic polarizability, subdict of point charges, subdict of diffuse points; * extensibility is important also - may need more info, such as damping factors to avoid singularities",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1541:569,charge,charges,569,https://psicode.org,https://github.com/psi4/psi4/issues/1541,1,['charge'],['charges']
Energy Efficiency,"This PR contains the implementation of XDM-enabled density functional theory calculations in psi4. XDM is a dispersion correction in which the dispersion coefficients that enter the asymptotic dispersion formula are calculated post-SCF from the self-consistent electron density and kinetic energy density. XDM maintains the simplicity and accuracy of a damped asymptotic dispersion correction while, at the same time, it calculates the dispersion coefficients from the self-consistent wavefunction. . The XDM energy and gradient are calculated by the [postg](https://github.com/aoterodelaroza/postg) external program, to which the new code interfaces. The implementation is very similar to the way in which psi4 currently interfaces to gCP. In addition, a few XDM-enabled functionals are provided to facilitate its use. A few tests, samples, and documentation are also included in the package. That said, I recommend that you check the XDM/postg documentation meets psi4 standards as I have no way to verify what it looks like in HTML form.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1699:290,energy,energy,290,https://psicode.org,https://github.com/psi4/psi4/pull/1699,2,['energy'],['energy']
Energy Efficiency,"This calculation fails in Psi4 1.3.2; ```; molecule {; Ne; }. my_pbe = {; ""name"": ""my pbe"",; ""x_functionals"": {""GGA_X_PBE"": {}},; ""c_functionals"": {""GGA_C_PBE"": {}}; }. set basis pcseg-2; set basis_guess true; energy('scf', dft_functional=my_pbe); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2199:210,energy,energy,210,https://psicode.org,https://github.com/psi4/psi4/issues/2199,1,['energy'],['energy']
Energy Efficiency,"This fixes #977 . ## Description; Make `energy(cbs, ..., bsse_type=[...])` calls work the expected way - calculating and returning overall interaction energies. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix for #977. ## Questions; - [ ] Do we need a test for this?. ## Checklist; - [ ] Tests added for any new features; - [x] [All tests (with the exception of 179, 376, 377 which t/o) run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1119:40,energy,energy,40,https://psicode.org,https://github.com/psi4/psi4/pull/1119,1,['energy'],['energy']
Energy Efficiency,"This input file:; ```; memory 5 GB. molecule uf4 {; 0 1; U; F 1 1.7; F 1 1.7 2 90.0; F 1 1.7 3 90.0 2 180.0; F 1 1.7 4 90.0 3 180.0; }. set basis LANL2DZ; set scf_type pk; set guess CORE; optimize('hf'); ```; produces the following output:; ``` ; Writing optimization data to binary file.; Final energy is -448.6902827985336; Final (previous) structure:; Cartesian Geometry (in Angstrom); SI 0.0000000000 0.0000000000 0.0000000000; F 0.0000000000 -1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 -1.4786286784; F 0.0000000000 -1.4770587400 -1.4786286784; Saving final (previous) structure.; Removing binary optimization data file.; --------------------------; OPTKING Finished Execution; --------------------------. Final optimized geometry and variables:; Molecular point group: d2h; Full point group: D2h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. U; F 1 2.089987; F 1 2.089987 2 89.939134; F 1 2.089987 3 90.060866 2 -180.000000; F 1 2.089987 4 89.939134 3 -180.000000. Removing binary optimization data file.; Cleaning optimization helper files. Psi4 stopped on: Tuesday, 31 July 2018 04:29PM; Psi4 wall time for execution: 0:18:57.70. *** Psi4 exiting successfully. Buy a developer a beer!; ```. It seems that Psi4 is treating it as Uranium, as the energy is different from SiF4 at the same geometry, and is therefore just a printing problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1114:296,energy,energy,296,https://psicode.org,https://github.com/psi4/psi4/issues/1114,3,"['charge', 'energy']","['charge', 'energy']"
Energy Efficiency,"This is a follow-up to #1608 (fisapt + external potentials). There might be something wrong when the molecule is specified in bohr. I'm not sure, so I thought I'd query @alenaizan and @CDSherrill about how suspicious the below makes you, and how likely you would have been to catch this in the testing process. First things, the `ExternalPotential.charges_` (holding charge and position) stores positions in the units of the molecule. For consistency for functions on the class, it translates the internal data to bohr before computing. This printing label https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L70 is wrong (for positions; ok for charges). These comments suggest this might not have been clear in the earlier PR https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L414-L416 and might have ramifications here https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fisapt/fisapt.cc#L730-L735 . When I rewrite the fsapt-ext-abc test case so that the molecule and charges are again consistent in Bohr (below), the overall passes but the fragments don't. Also below is the fsapt.dat differences. Again, I can well believe that I'm doing something wrong or that the `fsapt.py` machinery has some built-in unit assumptions, but I'm glad of any input or we-checked-that information. The reason it's coming up now is that DDD ""fixes"" this peculiarity of `ExternalPotential` and _only_ stores the charge positions in Bohr. ```; memory 1 GB. # water prism: https://science.sciencemag.org/content/sci/suppl/2012/05/16/336.6083.897.DC1/Perez_SM.pdf; # Table S43. #mol = psi4.core.Molecule.from_arrays(; # elez=[1, 8, 1, 1, 8, 1, 1, 8, 1],; # fragment_separators=[3, 6],; # fix_com=True,; # fix_orientation=True,; # fix_symmetry='c1',; # geom=np.array([; # 0.0290, -1.1199, -1.5243,; # 0.9481, -1.3990, -1.3587,; # 1.4371, -0.5588, -1.3099,; # 1.0088, -1.5240, 0.5086,; # 1.0209, -1.1732, 1.4270,; # 1.5864, -0.3901, 1.3101,; # -1.0231, 1.6243, -0.8743,; #",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2330:367,charge,charge,367,https://psicode.org,https://github.com/psi4/psi4/issues/2330,2,['charge'],"['charge', 'charges']"
Energy Efficiency,"This is the list of changes made for the wavefunction passing update. This is a very large change that modified virtually every file in Psi4, details of the why and what can be found [here](https://github.com/psi4/psi4public/wiki/Changes-to-Information-Passing-in-Psi4-%28Jan-2016%29). This is slightly long, but please read this fully as there is a decent chance that advanced users will have to make some tweaks to their existing input files. A quick rundown of the changes:; - Energy, gradient, etc now actually return a energy (a number), gradient (a matrix), etc. A good example of these changes is [this](https://github.com/psi4/psi4public/commit/a559003d1e4be8ac36107ba64751ee6db78c8f3b#diff-684250b9cfb2a0fa201f5dc123c90964L48) diff.; - All methods now take new kwargs (python variables):; - `return_wfn` - return the methods wavefunction: `scf_e, scf_wfn = energy('SCF', return_wfn=True)`; - `ref_wfn` - what wavefunction to use as reference: `mp2_e = energy('MP2', ref_wfn=scf_wfn)`; - `molecule` - give a molecule for the calculation to be run on (mostly an internal kwarg); - The global molecule is now only touched/modifed by the input file, the user parameter `activate` and by the optimize function.; - OEProp, cubewriter, and the molden writer all need to be explicitly passed a wavefunction python-side.; - These changes will allow for extremely complex workflows. Check out [`proc.py/run_sapt`](https://github.com/dgasmith/psi4public/blob/wavefunction_pass/share/python/proc.py#L2611) for an interesting case of passing wavefunctions and molecules into primary `proc.py` functions.; - `DF` and `RI` modifiers to methods are no longer valid (e.g., `energy('RI-MP2')`). Please use the `mp2_type` option instead.; - Fixed numerous bugs/oddities and moved everything towards a more object oriented workflow. ---. A few notable issues that people may run into:; - The `psi4/lib` folder has been moved to `psi4/share` please update all `PSIDATADIR` references accordingly.; - `Process::env",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246:480,Energy,Energy,480,https://psicode.org,https://github.com/psi4/psi4/pull/246,4,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"This is the mega-issue for the cleanup of excited-state variables. I come to this as a spinoff of the cc modernization mega-issue, which is a spin-off of the density sanitizing mega-issue. The goal of this mega-issue is to synchronize variable names across TDDFT, EOM, and ADC, per the standard introduced in #2462 and amended slightly in #2475. ### The Standard; We support the following access patterns:; ```; f""{method} ROOT 0 ({initial_state}) -> ROOT {irrep_idx} ({target_state}) EXCITATION ENERGY""; f""{method} TD-HF ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY; f""{method} ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY - {transition} TRANSITION; ```. - `{method}` should include both the _family_ of the method and the _specific method_ used. For example, both `CC` and `CC3`.; - `{global_idx}` is the index of the root, ordered by energy, in the space of all roots.; - `{irrep_idx}`is the index of the root, ordered by energy, in the space of roots of that irrep. This should **never** be larger than `global_idx` and is identical `global_idx` for molecules without symmetry.; - `{initial_state} ^ {target_state} = {transition}`. ### The Status. - [x] DFT; - [x] #2462 - initial cleanup; - [x] (part of) #2477 - set TD-DFT variables with names starting TD-SCF or TD-DFT (maybr both?) in addition to TD-fctl; - [ ] EOM; - [x] #2475 - variables set directly in `cceom`; - [x] Variables set directly in `ccdensity`; - [x] #2514 - Oscillator strengths; - [x] #2525 - Einstein coefficients, rotation strengths; - [x] #2538 - All access patterns ; - [ ] Variables set indirectly, via oeprop; - [X] #2479 - remove mutlipole component variables from being set in oeprop; - [x] #2485 - condense multipole setting functions into one; - [ ] #2541 Rename multipole variables from `oeprop` according to the standard; - [x] ADCC; - [x] #2513 ; - [ ] Final cleanup pass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2486:496,ENERGY,ENERGY,496,https://psicode.org,https://github.com/psi4/psi4/issues/2486,5,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"This may be related to issue #420, but the read guess also behaves in a crazy fashion if you try to set docc and socc. Test case:. molecule neutral{; 0 2; Na; }. molecule cation {; 1 1; Na; }. activate(cation); set basis STO-3G; set reference rhf; set guess core; energy('scf'). activate(neutral); set basis STO-3G; set reference rohf; set guess read; set docc [ 2, 0, 0, 0, 0, 1, 1, 1 ]; set socc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; energy('scf'). If one does not supply the latter step with the docc/socc specification, the result is. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -159.66461226804716. If one does include the specification, the result is. ```; Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @DF-ROHF Final Energy: -159.78073099020281. so the odd electron vanishes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/421:264,energy,energy,264,https://psicode.org,https://github.com/psi4/psi4/issues/421,6,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"This might be rather an issue for https://github.com/piecuch-group/cct3 but will affect psi4 users nonetheless. The following is a minimal input:; ```; import cct3. set {; basis cc-pVDZ; ints_tolerance 1e-11; }. molecule eins {; units bohr; symmetry c1; h -1.000000000000 -2.414213562373 0.000000000000; h -1.000000000000 2.414213562373 0.000000000000; h 1.000000000000 -2.414213562373 0.000000000000; h 1.000000000000 2.414213562373 0.000000000000; }. molecule zwei {; units bohr; symmetry c1; h -2.514213562373 -1.000000000000 0.000000000000; h -2.514213562373 1.000000000000 0.000000000000; h 2.514213562373 -1.000000000000 0.000000000000; h 2.514213562373 1.000000000000 0.000000000000; h -1.000000000000 -2.414213562373 0.000000000000; h -1.000000000000 2.414213562373 0.000000000000; h 1.000000000000 -2.414213562373 0.000000000000; h 1.000000000000 2.414213562373 0.000000000000; }. energy(""cr-cc(2,3)"",molecule=eins); clean(); energy(""cr-cc(2,3)"",momlecule=zwei); ```. The error is:; ```; (base) kruse@sphinx1 /scratch/kruse/CCT3 $ psi4.git -v -s . -n 16 input.dat; forrtl: severe (104): incorrect RECL= specifier value for connected file, unit 250, file /scratch/kruse/CCT3/PA; Image PC Routine Line Source; libifcoremt.so.5 00002AD86592CE75 for__io_return Unknown Unknown; libifcoremt.so.5 00002AD8659522E0 for_open Unknown Unknown; cct3.so 00002AD865620EDF integrals_mp_load Unknown Unknown; cct3.so 00002AD86562C3EB solver_mp_solve_c Unknown Unknown; cct3.so 00002AD8655F75A6 driver_mp_run_cc_ Unknown Unknown; cct3.so 00002AD86563683E cc_ Unknown Unknown; cct3.so 00002AD85AD0AAE1 cct3 Unknown Unknown; ```. The `PA` file is opened for _writing_ with a record length `recl` using orbital dimensions.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2009:890,energy,energy,890,https://psicode.org,https://github.com/psi4/psi4/issues/2009,2,['energy'],['energy']
Energy Efficiency,"This problem was already mentioned in passing here: https://github.com/psi4/psi4/issues/662#issuecomment-475861476. This is a simple example input file showing the problem:. ```; molecule {; H; }. set {; scf_type pk; basis ano-rcc; relativistic x2c; reference uhf; }. energy('hf'); ```. I have set my `$PSIPATH` to a directory containing the basis set file (downloaded from EMSL):. ```bash; ll $PSIPATH; total 2.1M; drwxr-xr-x. 2 toon toon 4.0K Apr 29 17:13 .; drwxr-xr-x. 7 toon toon 4.0K Apr 29 16:34 ..; -rw-r--r--. 1 toon toon 2.1M Apr 29 15:49 ano-rcc.gbs; ```. When running Psi4 on this input, I get the following error message:. ```; Traceback (most recent call last):; File ""/home/toon/miniconda3/envs/p4dev/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 2045, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1281, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1056, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/p4util/python_helpers.py"", line 80, in _pybuild_basis; mol.to_dict(), key, resolved_target, fitrole, other, return_dict=True, return_atomlist=return_atomlist); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 679, in pyconstruct; verbose=verbose); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 838, in construct; filename = cls.make_filename(basgbs); File ""/home/toon/miniconda3/envs/p4",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613:268,energy,energy,268,https://psicode.org,https://github.com/psi4/psi4/issues/1613,3,['energy'],['energy']
Energy Efficiency,Threaded external charge potential,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1946:18,charge,charge,18,https://psicode.org,https://github.com/psi4/psi4/pull/1946,1,['charge'],['charge']
Energy Efficiency,"Time to start working on the Psi4 1.0 release notes, #hype! Please read through and update as needed @psi4/p4manage. Loosely organized at the moment, feel free to re-do. These notes span from the Psi4 beta5 release to the official Psi4 1.0 release.; ## User improvements; - Created binary linux distribution of Psi4 for users through conda; - Automatic extrapolations at the driver layer: `energy('MP2/aug-cc-pv[D,T]Z')`,`optimize('SCF/cc-pV[D,T,Q]Z')`.; - New N-Body wrapper capable of computing non-CP, CP and VMFC energies and gradients. The `cp` wrapper has been deprecated and CP can now be called as an optional argument to an energy call: `energy('SCF/cc-pVDZ', bsse_type='CP')`.; - New cmake build system for developers; - More sophisticated user input for one-electron property analysis; - More user-friendly error checking: If the user specifies an unknown keyword, the program will print that this keyword is unknown and will suggest possible alternatives that are close in spelling; - Added code to output cube files for orbitals, densities, etc.; - Added automatic defaults for auxiliary basis sets; - Improvements to the reporting of SAPT summary information, and enhancements to obtain SAPT methods reported in doi: 10.1063/1.4867135.; - The `properties` call now has a uniform interface for SCF, DFT, MP2, CI, MCSCF methods; ## Infrastructure improvements; - The Wavefunction object is now returnable for all psi4 methods. This Wavefunction object can be passed to other codes or directly manipulated; - Driver has been refactored into a new recursive scheme (as opposed to the previous nested scheme) to better facilitate more complex calls; - The MOLDEN writer now accepts density matrices for writing natural orbitals; - Added command-line arguments -l to specify PSIDATADIR (for developers) and -s to specify location of scratch directories (overrides PSI_SCRATCH); - Internal upgrades to the direct product decomposition library, libdpd, especially regarding density fitting; - Al",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367:390,energy,energy,390,https://psicode.org,https://github.com/psi4/psi4/issues/367,3,['energy'],['energy']
Energy Efficiency,"Title is kept general, but this is especially relevant for the newer DSD double hybrids. Issue made from short discussion in slacks. For example: http://onlinelibrary.wiley.com/doi/10.1002/jcc.23391/full ; Different functional compositions for the exchange, correlation, mp2 parts for (among others) -D2 and -D3BJ. The dashparam.py functionality cannot handle these multiple versions, but; `energy('dsd-pbepbe')`, `energy('dsd-pbepbe-d2') `or `energy('dsd-pbepbe-d3bj')` should provide the proposed parameters automatically. . A possible workaround is to define everything, including the e.g. the -D parameters, in the superfunctional object and either avoid the ""dash"" in the method name or avoid invoking the dashparam functionality for specific names.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/920:391,energy,energy,391,https://psicode.org,https://github.com/psi4/psi4/issues/920,3,['energy'],['energy']
Energy Efficiency,"Transferred from the [forums](http://forum.psicode.org/t/sapt-dft-issues/1444). A user reports an SCF convergence failure during a SAPT(DFT) computation. While this _could_ be an example of a routine SCF convergence failure, the fact that it appears during SAPT(DFT) combined with how spectacular the convergence failure _is_ have me suspecting it's something more. When I run the user's input file on 1.3.2 release (see forum post), the failing SCF has iterations like this:; ```; @DF-RKS iter SAD: -2.88905500214392 -2.88906e+00 0.00000e+00 ; @DF-RKS iter 1: 0.79355642730661 3.68261e+00 8.89827e-02 DIIS ; @DF-RKS iter 2: -2.69913194172793 -3.49269e+00 1.70278e-02 DIIS ; @DF-RKS iter 3: 0.05174993763519 2.75088e+00 1.04154e-02 DIIS ; @DF-RKS iter 4: 4.56710002468099 4.51535e+00 8.67682e-02 DIIS ; @DF-RKS iter 5: 4.56708994805846 -1.00766e-05 8.67628e-02 DIIS ; @DF-RKS iter 6: 4.56706596773139 -2.39803e-05 8.67500e-02 DIIS; ```. The usual convergence tricks - playing with DIIS settings and damping - still leave a problem. Notice that iterations 1, 3, and 4 are terrible, going up in energy by _multiple Hartrees_ even after what should be a decent guess. The user reports that they are observing such problems for more complicated systems, but can reduce the problem to this two atom problem. You'd need to ask them to get the original systems, but this seems like a good starting point.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1684:1093,energy,energy,1093,https://psicode.org,https://github.com/psi4/psi4/issues/1684,2,"['energy', 'reduce']","['energy', 'reduce']"
Energy Efficiency,"Travis CI currently takes 2-6 (average 3) hours to complete depending on the current travis load, which is a bit on the long side. To help with this I am proposing that we reduce the number of build types from 15 to the following:; - Latest clang/gcc with both debug and release flags (4 cases); - Oldest supported clang/gcc with both debug and release flags (4 cases). It should be noted that travis CI typically runs the first 3-6 test cases immediately upon submission and then runs the rest in a general queue. The real time killer is when the 15th CI case does not start to run for 2-5 hours after initial submission. With the proposed changes we will hopefully be running through travis consistently in about an hour. . This will deteriorate our CI coverage a bit; however, I think this keeps with the CI spirit and should catch the corner cases that we really worry about. I am looking a bit into something like Docker in addition to Travis so that we can run a full test suite on a local box at the touch of a button. PS: Fiddling around with commits to practice squashing.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237:172,reduce,reduce,172,https://psicode.org,https://github.com/psi4/psi4/pull/237,1,['reduce'],['reduce']
Energy Efficiency,"Trying out the SCF plugin with the current master branch I get the error; ```; $ psi4 h2o.in; Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 387, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 519, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/openorbital/openorbital/psi4/scf/myplugin/pymodule.py"", line 60, in run_myplugin; psi4.set_scalar_variable('CURRENT ENERGY', myplugin_wfn.energy()). AttributeError: module 'psi4' has no attribute 'set_scalar_variable'. Printing out the relevant lines from the Psithon --> Python processed input file:; H 0.866811766153153 0.601435735686679 0.000000000000000; H -0.866811766153153 0.601435735686679 0.000000000000000; """"""); core.IO.set_default_namespace(""""); core.set_global_option(""BASIS"", ""pcseg-1""); --> energy('myplugin'). !-------------------------------------------------------!; ! !; ! module 'psi4' has no attribute 'set_scalar_variable' !; ! !; !-------------------------------------------------------!. Segmentation fault (core dumped); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3093:319,energy,energy,319,https://psicode.org,https://github.com/psi4/psi4/issues/3093,5,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"Trying to debug why #1429 is failing, I realized that ```dfmp2-ecp``` is broken also in master. Namely, if you change the guess to ```core```, the output shows; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. Occupation by irrep:; A1 A2 B1 B2 ; DOCC [ 9, 1, 4, 4 ]. @DF-RHF iter 1: -308.91202925462852 -3.08912e+02 3.76534e-01 ; Occupation by irrep:; A1 A2 B1 B2 ; DOCC [ 8, 2, 4, 4 ]. @DF-RHF iter 2: -50.26696275258255 2.58645e+02 1.14194e-01 DIIS; @DF-RHF iter 3: -312.20691537679136 -2.61940e+02 3.74738e-01 DIIS; @DF-RHF iter 4: -312.28132654669946 -7.44112e-02 3.74788e-01 DIIS; @DF-RHF iter 5: -312.28135900254506 -3.24558e-05 3.74789e-01 DIIS; @DF-RHF iter 6: -312.69660060629286 -4.15242e-01 3.74879e-01 DIIS; @DF-RHF iter 7: -314.97714389188246 -2.28054e+00 3.75872e-01 DIIS; @DF-RHF iter 8: -315.30129310258837 -3.24149e-01 3.76020e-01 DIIS; @DF-RHF iter 9: -315.76973734256387 -4.68444e-01 3.76541e-01 DIIS; @DF-RHF iter 10: -314.13107099910633 1.63867e+00 3.75335e-01 DIIS; @DF-RHF iter 11: -314.88897775403694 -7.57907e-01 3.75895e-01 DIIS; @DF-RHF iter 12: -312.91138860100165 1.97759e+00 3.74941e-01 DIIS; @DF-RHF iter 13: -313.42095297268111 -5.09564e-01 3.75328e-01 DIIS; @DF-RHF iter 14: -314.00208386703940 -5.81131e-01 3.74845e-01 DIIS; @DF-RHF iter 15: -313.82934050347035 1.72743e-01 3.74976e-01 DIIS; @DF-RHF iter 16: -315.89990741359236 -2.07057e+00 3.76160e-01 DIIS; @DF-RHF iter 17: -313.12609734973461 2.77381e+00 3.74988e-01 DIIS; @DF-RHF iter 18: -312.92378783647285 2.02310e-01 3.74498e-01 DIIS; @DF-RHF iter 19: -317.24645796226451 -4.32267e+00 3.77492e-01 DIIS; @DF-RHF iter 20: -317.60418344797176 -3.57725e-01 3.78088e-01 DIIS; @DF-RHF iter 21: -316.25416490484400 1.35002e+00 3.76492e-01 DIIS; @DF-RHF iter 22: -315.51131292261630 7.42852e-01 3.75711e-01 DIIS; @DF-RHF iter 23: -315.37233230819385 1.38981e-01 3.75579e-01 DIIS; @DF-RHF iter 24: -315.37427315424492 -1.94085e-03 3.75585e-01 DIIS; @DF-RHF iter 25: -315.36730485039720 6.96830e-03 3.75579e-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1433:192,Energy,Energy,192,https://psicode.org,https://github.com/psi4/psi4/issues/1433,1,['Energy'],['Energy']
Energy Efficiency,Unit inconsistency with QMMM charges,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881:29,charge,charges,29,https://psicode.org,https://github.com/psi4/psi4/issues/1881,1,['charge'],['charges']
Energy Efficiency,"Update the SAPT output to conform with the recommendations of our systematic study in ``Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and Performance for Interaction Energies,'' T. M. Parker, L. A. Burns, R. M. Parrish, A. G. Ryno, and C. D. Sherrill, J. Chem. Phys. 140, 094106 (2014) [doi: 10.1063/1.4867135 ]",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/37:107,Adapt,Adapted,107,https://psicode.org,https://github.com/psi4/psi4/issues/37,1,['Adapt'],['Adapted']
Energy Efficiency,"Using psi4-1.4rc1, I was able to compute `MBIS_CHARGES` via QCEngine however after PR #2127 this now fails with the following error message. While this definitely needs fixing I think it might also be nice to have the option to turn off this feature and only calculate the ratio if passed as an scf property?; ```; RuntimeError: ; Fatal Error: Wavefunction::scalar_variable: Requested variable MBIS FREE ATOM O VOLUME was not set!; Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1628080613326/work/psi4/src/psi4/libmints/wavefunction.cc on line: 1335; ```. MWE ; ```python; import qcelemental as qcel; from qcelemental.models import molecule; import qcengine as qcng. mol = qcel.models.Molecule.from_data(""""""; O 0.0 0.000 -0.129; H 0.0 -1.494 1.027; H 0.0 1.494 1.027; """"""). # build the mbis task; model = qcel.models.AtomicInput(; molecule=mol,; driver=""energy"",; model={""method"": ""SCF"", ""basis"": ""sto-3g""},; keywords={""scf_properties"": [""MBIS_CHARGES""]}; ). result = qcng.compute(model, ""psi4""). print(result.dict()); ```; versions; psi4-1.4+9485035 ; qcengine-0.19.0; qcelemental -0.21.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2272:880,energy,energy,880,https://psicode.org,https://github.com/psi4/psi4/issues/2272,1,['energy'],['energy']
Energy Efficiency,"Using version 1.2-rc2 from conda psi4/label/dev (and also several previous versions):. The following input crashes with a `RuntimeError: Fatal Error: Not enough memory` (logfile [attached](https://github.com/psi4/psi4/files/2000688/sapt0.txt)):. ```; molecule dimer {; 0 1; HE -3.175580423325 -0.517569032036 0.000000000000; --; 0 1; C -0.047607579372 0.489078465367 0.000000000000; O -0.621270272014 1.491611955637 0.000000000000; S 0.726228977971 -0.864990071157 0.000000000000. no_reorient; no_com; }. memory 20 Gb. dimer.update_geometry(); energy(""sapt0/jun-cc-pvdz"", molecule=dimer); ``` . When the He atom in the above is changed to, say, Ne, the calculation runs fine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1018:544,energy,energy,544,https://psicode.org,https://github.com/psi4/psi4/issues/1018,1,['energy'],['energy']
Energy Efficiency,"We have an [example](http://forum.psicode.org/t/adiis-minimization-failed-file-a-bug/2524/4) of an ADIIS failure. Based on how _early_ minimization is failing, this looks like something other than numerical finickiness of the underlying numpy algorithm. The ADIIS problem is either 1-by-1 or 2-by-2 (I'd need to check which), and surely we can handle a 2D constrained optimization. ```; memory 5 gb. molecule dimer {; O -2.37598501 -5.25644515 4.84543259; H -2.38171765 -4.38257907 4.44628561; H -2.48821382 -4.94837176 5.80344789; --; @Br 2.24215713 -6.77867982 5.71107037; @Br 0.05511550 -6.05660413 5.30313985; units angstrom; }. set {; basis aug-cc-pvdz; scf_type pk ; sapt_dft_grac_shift_a 0.05731; sapt_dft_grac_shift_b 0.01680; SAPT_DFT_FUNCTIONAL REVSCAN; }. energy('revscan'); ```. ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo; -------------------------; A 113 113; -------------------------; Total 113 113; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RKS iter SAD: -76.04124004396280 -7.60412e+01 0.00000e+00. Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin//psi4"", line 338, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2455, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1670, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); F",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2609:767,energy,energy,767,https://psicode.org,https://github.com/psi4/psi4/issues/2609,1,['energy'],['energy']
Energy Efficiency,"When I try to run the input file from the X2C section, it fails.; ```; molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz-decon; relativistic x2c; }. energy('hf'); ```. It runs fine if I either remove the `-decon`, remove the `relativistic x2c` option, or add the `basis_relativistic` option. The error I get is:; ```; Traceback (most recent call last):; File ""/usr/local/bin/psi4"", line 247, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/usr/local/lib/psi4/driver/driver.py"", line 454, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/local/lib/psi4/driver/procrouting/proc.py"", line 2797, in run_dft; scf_wfn = run_scf(name, **kwargs); File ""/usr/local/lib/psi4/driver/procrouting/proc.py"", line 1941, in run_scf; scf_wfn = scf_helper(name, **kwargs); File ""/usr/local/lib/psi4/driver/procrouting/proc.py"", line 1250, in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); File ""/usr/local/lib/psi4/driver/procrouting/proc.py"", line 1035, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/usr/local/lib/psi4/driver/p4util/python_helpers.py"", line 64, in pybuild_basis; key, target, fitrole, other, return_atomlist=return_atomlist); File ""/usr/local/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 641, in pyconstruct; return_atomlist=return_atomlist); File ""/usr/local/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 770, in construct; filename = cls.make_filename(basgbs); File ""/usr/local/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 1309, in make_filename; basisname = basisname.lower(). AttributeError: 'NoneType' object has no attribute 'lower'; ```. I'm guessing that this is related to issue #617.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/662:161,energy,energy,161,https://psicode.org,https://github.com/psi4/psi4/issues/662,3,['energy'],['energy']
Energy Efficiency,"When I was doing energy decomposition analysis with Bronze standard of a transition state involving a 3d metal Ni, the following error comes up. I wonder how to solve such a problem? Thanks. ```; BasisSet::construct: Unable to find a basis set for atom 24 for key BASIS ; among: ; Shell Entries: ['NI'] ; Basis Sets: [('JUN-CC-PVDZ', 'JUN-CC-PVDZ', None)] ; File Path: /gpfs/home/scms/zz/SAPT, /gpfs/home/scms/zz/SAPT, ; /gpfs/home/scms/zz/psi4conda/share/psi4/basis !; Input Blocks: ; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2866:17,energy,energy,17,https://psicode.org,https://github.com/psi4/psi4/issues/2866,1,['energy'],['energy']
Energy Efficiency,"When PSI4 updates in miniconda, the testing dialogue,. ```; Nuclear Repulsion Energy..........................................PASSED; SAPT0 Eelst.......................................................PASSED; SAPT0 Eexch.......................................................PASSED; SAPT0 Eind........................................................PASSED; SAPT0 Edisp.......................................................PASSED; SAPT0 Etotal......................................................PASSED; ```. prints as a single line which is wrapped by the terminal:. ```; Nuclear Repulsion Energy..........................................PASSED SAPT0 Eelst....; ...................................................PASSED SAPT0 Eexch...................; ....................................PASSED SAPT0 Eind...................................; .....................PASSED SAPT0 Edisp.................................................; ......PASSED SAPT0 Etotal......................................................PASSED; ```. It seems like there should be a newline after each ""PASSED"". I updated the post-link.sh script to print the test dialogue with cat instead of echo. This seems to fix the problem on my machines (Ubuntu and RedHat with Gnome terminal and Konsole). While I was updating the printing, I also added comments and made the script delete the temporary files after PSI4 is done running.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/191:78,Energy,Energy,78,https://psicode.org,https://github.com/psi4/psi4/pull/191,2,['Energy'],['Energy']
Energy Efficiency,"When a symmetric molecule is run explicitly in `C1` symmetry the `fnocc` DF-CCSD(T) calculations seems to initialise [Mintshelper](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/mintshelper.cc#L168) when accessing the 1e-integrals given the output below (molecule+detailed basis set info are printed). CONV-CCSD(T) does not print this, but its 1e-ints come from IWL files I think.; For DF-CC they are requested here:; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/df_ccsd.cc#L727. Maybe a problem with missing cached integrals and the re-computation triggers the Mintshelper init?. DF-CCSD(T) output example:; ```; ...; ==> Input parameters <==. Freeze core orbitals? no; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 0; Number of active occupied orbitals: 5; Number of active virtual orbitals: 8; Number of frozen virtual orbitals: 0. Molecular point group: c1; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.079135765818 15.994914619570; H 0.000000000000 -0.707106781187 0.627971015369 1.007825032230; H 0.000000000000 0.707106781187 0.627971015369 1.007825032230. -AO BASIS SET INFORMATION:; Name = 3-21G; Blend = 3-21G; Total number of shells = 9; Number of primitives = 15; ...; ```. example input:; ```; molecule mol {; symmetry c1; O; H 1 R; H 1 R 2 A; }; mol.R = 1.0; mol.A = 90.0. set cc_type df; energy('fno-ccsd(t)/3-21g'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1957:1041,charge,charge,1041,https://psicode.org,https://github.com/psi4/psi4/issues/1957,2,"['charge', 'energy']","['charge', 'energy']"
Energy Efficiency,When one runs SAPT0 via the SAPT(DFT) pathway with the following options:; ```; set SAPT_DFT_FUNCTIONAL HF; set SAPT_DFT_MP2_DISP_ALG FISAPT; energy('sapt(dft)'); ```; the algorithm forgets to freeze the core in the exchange-dispersion term. This does not happen when `SAPT_DFT_MP2_DISP_ALG == 'FISAPT'`. I'll submit a PR with the fix very soon.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3141:142,energy,energy,142,https://psicode.org,https://github.com/psi4/psi4/issues/3141,1,['energy'],['energy']
Energy Efficiency,"When running Psi4 1.9.1, the following structure causes Psi4 to crash, but shifting it a little bit makes things work fine. ```; molecule {; C 0.0000000182 -0.0000000013 0.0000000175; H -0.6691384315 0.8462762237 -0.0845771730; H -0.3913180530 -0.8282585144 -0.5761431456; H 0.0839750469 -0.2910425067 1.0389058590; H 0.9764814973 0.2730248868 -0.3781855106; }. energy(""BP86/sto-3g""); ```. Traceback; ```; Traceback (most recent call last):; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/bin/psi4"", line 387, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/driver.py"", line 525, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/procrouting/proc.py"", line 2588, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/procrouting/proc.py"", line 1778, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/p4util/python_helpers.py"", line 217, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis, quiet=quiet); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/p4util/python_helpers.py"", line 157, in _pybuild_basis; bs, basisdict = qcdb.BasisSet.pyconstruct(mol.to_dict(),; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/rowansci/per",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3213:362,energy,energy,362,https://psicode.org,https://github.com/psi4/psi4/issues/3213,3,['energy'],['energy']
Energy Efficiency,"When running psi4 with the input file, i.e. psi4 h2.in h2.out. > memory 2500 mb; > ; > molecule h2 {; > H ; > H 1 0.75; > }; > ; > set basis def2-QZVPP; > set FCI true; > set OPDM true; > set OPDM_PRINT true; > set TPDM true; > set TPDM_PRINT true; > energy('detci'). no one-particle density matrix or two-particle density matrix is written to the output file h2.out and other files except the output file h2.out and timer.dat are created.; See also: http://www.psicode.org/psi4manual/master/autodoc_glossary_options_c.html#term-opdm-print-detci",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/477:251,energy,energy,251,https://psicode.org,https://github.com/psi4/psi4/issues/477,1,['energy'],['energy']
Energy Efficiency,"When trying to track down some nondeterminstic behavior, I encountered the following oddity. ```; import numpy as np. molecule {; 0 1; C1 0.00000000 0.00000000 0.00000000; H2 0.49111719 0.98252240 -0.05876775; H3 -0.72033644 -0.10038934 -0.82524990; H4 -0.52826663 -0.08928047 0.96070982; H5 0.75766207 -0.79379696 -0.07638440; }. set {; basis cc-pvdz; }. e_scf, wfn = energy('hf', return_wfn=True). print(wfn.occupation_a().np); print(np.asarray(wfn.occupation_a())); ```. Somewhat surprisingly, this is the output I see:. ```; [ 0.00000000e+000 0.00000000e+000 0.00000000e+000 -7.63277803e+283; 6.91698601e-310 6.91698623e-310 0.00000000e+000 0.00000000e+000; 0.00000000e+000 0.00000000e+000 0.00000000e+000 0.00000000e+000; 1.65169957e-220 6.91698602e-310 6.91697627e-310 -3.39981117e-158; 6.91697639e-310 6.91696828e-310 5.41141341e-041 6.91697626e-310; 6.91697724e-310 0.00000000e+000 0.00000000e+000 0.00000000e+000; -3.67112871e-197 6.91698601e-310 6.91696828e-310 2.99382801e+052; 6.91697697e-310 6.91697723e-310 0.00000000e+000 0.00000000e+000; 0.00000000e+000 4.42201243e+096]; [ 1. 1. 1. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.; 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]; ```. i.e., something funky is going on with `.np`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/639:369,energy,energy,369,https://psicode.org,https://github.com/psi4/psi4/issues/639,1,['energy'],['energy']
Energy Efficiency,"When using H+ as the compound in a SAPT calculation it crashes with a divide by zero error:. ```; File ""/var/spool/slurm/d/job333055/slurm_script"", line 21, in <module>; myener = psi4.energy(""sapt2+(ccd)dmp2""); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/driver.py"", line 525, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 4581, in run_sapt; monomerA_wfn = scf_helper('RHF', molecule=monomerA, **kwargs); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1887, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 99, in scf_compute_energy; scf_energy = self.finalize_energy(); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 692, in scf_finalize_energy; self.print_energies(); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 804, in scf_print_energies; self.set_variable(""HF VIRIAL RATIO"", - potential / ke) # P::e SCF; ZeroDivisionError: float division by zero; ```. The script to reproduce this is below. ```; #!/usr/bin/env python3; import os; import numpy as np; import psi4 as psi4; psi4.core.set_num_threads(4); psi4.set_options({""cachelevel"": 1, ""print"": 1}); psi4.set_memory(12000000000); psi4_io = psi4.core.IOManager.shared_object(); psi4.core.set_output_file('hcl-sapt.log', False); geometry= """"""; 1 1; H -0.0 0.0 -1.36; --; -1 1; Cl 0.0 0.0 1; """"""; geom = psi4.geometry(geometry); psi4.basis_helper(""""""; assign aug-cc-pvtz; """"""); myener = psi4.energy(""sapt2+(ccd)dmp2""); for ener in [ 'SAPT ELST ENERGY', 'SAPT EXCH ENERGY', 'SAPT IND ENERGY', 'SAPT DISP ENERGY', 'SAPT TOTAL ENERGY' ]:; print(""%s %g"" % ( ener, psi4.variable(ener) )); ``",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3156:184,energy,energy,184,https://psicode.org,https://github.com/psi4/psi4/issues/3156,3,['energy'],['energy']
Energy Efficiency,"When using a custom basis set, `MBIS_VOLUME_RATIOS` throws an error, all other properties seem to work fine. It also works fine if the basis set is included in the call to `psi4.energy`. Using conda version of psi4 1.9.1 on Linux. Input:; ```python; import psi4. h2o = psi4.geometry(""""""; H 0 0 0; O 0 0 1; H 0 1 1; """""",""h2o""). def basisspec_psi4_MyBasis(mol, role):; mol.set_basis_all_atoms(""sto-3g"", role=role); return {}. psi4.qcdb.libmintsbasisset.basishorde[""MYBASIS""] = basisspec_psi4_MyBasis; psi4.core.set_global_option(""BASIS"", ""mybasis""). _, wfn = psi4.energy('hf', return_wfn=True, molecule=h2o). psi4.oeprop(wfn, ""MBIS_VOLUME_RATIOS""); ```. Error:; ```; QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['H']; Basis Sets: [('BASISSPEC_PSI4_MYBASIS', 'BASISSPEC_PSI4_MYBASIS', None)]; File Path: /home/jevandezande/tmp/psi4/basis, /home/jevandezande/tmp/psi4/basis, /home/jevandezande/progs/mamba/envs/peregrine/share/psi4/basis; Input Blocks:. Traceback (most recent call last):; File ""/home/jevandezande/tmp/psi4/basis/a.py"", line 18, in <module>; psi4.oeprop(wfn, ""MBIS_VOLUME_RATIOS""); File ""/home/jevandezande/progs/mamba/envs/peregrine/lib/python3.11/site-packages/psi4/driver/p4util/util.py"", line 85, in oeprop; free_atom_volumes(wfn); File ""/home/jevandezande/progs/mamba/envs/peregrine/lib/python3.11/site-packages/psi4/driver/p4util/prop_util.py"", line 119, in free_atom_volumes; at_e, at_wfn = psi4.energy(method, return_wfn=True); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/progs/mamba/envs/peregrine/lib/python3.11/site-packages/psi4/driver/driver.py"", line 525, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/progs/mamba/envs/peregrine/lib/python3.11/site-packages/psi4/driver/procrouting/proc.py"", line 2588, in run_scf; scf_wfn = scf_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3240:178,energy,energy,178,https://psicode.org,https://github.com/psi4/psi4/issues/3240,2,['energy'],['energy']
Energy Efficiency,"When using angstrom units, when parsing the molecule and including an external_potential, the geometry of the molecule gets scaled twice leading to incorrect energies. This only happens, when using python and not psithon.; This can easily be seen when adding a 0 charge far away of the molecule to the simulation, which changes energies significantly. I already prepared a PR to fix this, this is just for reference. To reproduce the problem, use the following:; ```; #! Python equivalent of extern5 test:; #! External potential sanity check with 0 charge far away; #! Checks if all units behave the same and energy is same as no; #! potential; import numpy as np; import psi4.core; import psi4. b2a=0.529177249; # Coordinates added in angstrom; coords = np.array([[ -0.778803000000 , 0.000000000000, 1.132683000000],; [ -0.666682000000, 0.764099000000, 1.706291000000],; [ -0.666682000000, -0.764099000000 , 1.706290000000]]); elements = [""O"",""H"",""H""]; molecule_ang = psi4.core.Molecule.from_arrays(geom=coords, elem=elements, fix_symmetry=""c1"", fix_com=True, fix_orientation=True); molecule_bohr = psi4.core.Molecule.from_arrays(geom=coords/b2a, elem=elements, fix_symmetry=""c1"", fix_com=True, fix_orientation=True, units=""Bohr""). external_potentials = [[0.00, np.array([10.0,10.0,10.0]) / b2a]]. psi4.set_options( {; ""scf_type"": ""df"",; ""d_convergence"": 12,; ""basis"": ""STO-3G"",; ""print"": 0,; ""debug"": 0,; }). ene_bohr_charges = psi4.energy('scf', molecule=molecule_bohr, external_potentials=external_potentials); ene_bohr_pure = psi4.energy('scf', molecule=molecule_bohr); psi4.compare_values(ene_bohr_charges, ene_bohr_pure, 6, ""Bohr geometry, charges vs no charges energy equality""). ene_ang_pure = psi4.energy('scf', molecule=molecule_ang); psi4.compare_values(ene_ang_pure, ene_bohr_pure, 6, ""No charges, Bohr vs Angstrom geometry energy equality""). ene_ang_charges = psi4.energy('scf', molecule=molecule_ang, external_potentials=external_potentials); psi4.compare_values(ene_ang_charges, ene_an",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3147:263,charge,charge,263,https://psicode.org,https://github.com/psi4/psi4/issues/3147,3,"['charge', 'energy']","['charge', 'energy']"
Energy Efficiency,"While attempting to run an ODC-12 computation, the correlation correction to the 1RDM (tau) didn't converge. I can't quite tell what ODC-12 did in response to this, but the effect was to zero the orbital gradient and make the energy negative NaN. The code should either recover gracefully if possible or, if not possible, quit ASAP. For the benefit of @mdav2 and @mlestep there's a side problem with the SCF converging to the wrong state. I'll add this as a post to the SCF topic when I've investigated further. I can tell you now that the ""true"" ground state seems to break CFOUR. [odc12_nan.txt](https://github.com/psi4/psi4/files/2254898/odc12_nan.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1117:226,energy,energy,226,https://psicode.org,https://github.com/psi4/psi4/issues/1117,1,['energy'],['energy']
Energy Efficiency,"While running the tests for #2230, I encountered the following failures; - large-atoms is trying to run analytical ECP gradietns; - min-atoms fails in `KeyError: 'psi4.core.variable: Requested variable CURRENT ENERGY was not set!\n'`; - pywrap-freq-e-sowreap fails in `NameError: name 'get_frequencies' is not defined`; - pywrap-freq-g-sowreap fails in `NameError: name 'get_frequencies' is not defined`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2234:210,ENERGY,ENERGY,210,https://psicode.org,https://github.com/psi4/psi4/issues/2234,1,['ENERGY'],['ENERGY']
Energy Efficiency,"While trying to reproduce some gaussian calculations with psi4, I noticed that the frequencies dependent on the dertype setting to a larger extend than anticipated: ; ```; molecule h2o {; units angstrom; H 0.000000 0.760300 -0.196100; O 0.000000 0.000000 0.392200; H 0.000000 -0.760300 -0.196100; }. set basis 6-311G**; set e_convergence 9; set g_convergence gau_verytight; set scf_type pk. optimize('scf', molecule=h2o). scf_e, scf_wfn = frequencies('scf', dertype='energy', return_wfn=True); scf_e, scf_wfn = frequencies('scf', dertype='gradient', return_wfn=True); scf_e, scf_wfn = frequencies('scf', dertype='hessian', return_wfn=True); ```; This generated the following frequencies:; ```; $ grep -A 3 'Vib. Freq' 'hf-6-311Gstarstar-freq.out'; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.943 2519.214; 2 4142.104 5959.557; 3 4237.400 6096.666; --; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.925 2519.188; 2 4142.111 5959.567; 3 4237.427 6096.704; --; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1731.766 2491.623; 2 4136.243 5951.124; 3 4232.474 6089.579; ```; For reference these are the gaussian g09 frequencies:; ```; Frequencies -- 1750.9454 4142.1029 4237.3716; ```. I am using:; ```; $ rpm -qif /usr/bin/psi4 | egrep '^Version|^Source'; Version : 1.1; Source RPM : psi4-1.1-2.add49b9git.fc26.src.rpm; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/901:467,energy,energy,467,https://psicode.org,https://github.com/psi4/psi4/issues/901,1,['energy'],['energy']
Energy Efficiency,"With a recent master (1.3a2.dev179, Git: Rev {master} c46660a) the following calculation fails at least 1/10 times. AMD Ryzen, Intel2018 compiler, compiled again conda libraries. `for i in {1..10}; do psi4dev -s /scratch/ -n 6 water.in out ; done`. water.in:; ```memory 4 GiB; molecule water {; O 0.000000000000 -0.000000000000 0.065656839916 ; H -0.000000000000 0.758561000000 -0.521010847646 ; H 0.000000000000 -0.758561000000 -0.521010847646 ; }; set {; scf_type df; basis def2-QZVP; dft_spherical_points 590; dft_radial_points 100; }; energy('wb97X-V'); ```; The segfault's backtrace contains `psi.VBase.build_collocation_cache`.; Turning the collocation grid _off_ fixes the issue.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1366:539,energy,energy,539,https://psicode.org,https://github.com/psi4/psi4/issues/1366,1,['energy'],['energy']
Energy Efficiency,"With apologies for the vague title, there are some issues with the `compute_gradient` function. They're connected, so it's best to have a single topic for these:. 1. Not all modules that support gradients support the `compute_gradient` API. `dct` and Rob's `dfmp2` do, but most other modules don't. We learned in #2200 that RHF wavefunctions don't, though `SCFDeriv` and `Dispersion` ""wavefunctions"" seem to. (See `scfgrad` and `libdisp`, respectively.); 2. The `compute_gradient` calls coming out of `dct` and `dfmp2` don't even work without crashing! Minimal not-working example:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. wfn = energy('mp2/sto-6g', return_wfn=True)[1] # Can switch ""mp2"" to ""dct"" and get a similar crash; wfn.compute_gradient(); ```; 3. Computing a derivative _reliably_ requires assumptions about what intermediates are available and what the Hamiltonian is. For example, we need to know that the file of ""T"" amplitudes is the same as that optimized during the energy computation, and that the energy was computed without relativistic corrections. We currently store whether the relativistic global is _currently_ enabled, but not whether relatvistic terms were added during the compute step. I'm open to alternatives, but I favor taking `compute_gradient` out of the API entirely. It's not consistently in the API, it doesn't get simple cases right when it's there, and the assumptions required by such a code don't make it a good candidate for being in the API in the first place.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2223:639,energy,energy,639,https://psicode.org,https://github.com/psi4/psi4/issues/2223,3,['energy'],['energy']
Energy Efficiency,"With the following input file, I noticed that there's an uncaught C++ exception that crashes the program hard; ```; $ cat input.dat ; memory 8640 Mb; molecule dimer {; 1 1; K -4.067042 -1.894214 0.002270; }; set dft_grid_name SG1; set dft_vv10_radial_points 50; set dft_vv10_spherical_points 194; set dft_nuclear_scheme treutler; set dft_radial_scheme EM; set basis def2-TZVPPD; ene = energy(""wB97M-V""); ```. Here's the error:. <details>; <summary> Expand </summary>. ```; $ psi4 input.dat ; terminate called after throwing an instance of 'psi::PsiException'; what(): ; Fatal Error: There is no SG-1 grid defined for the requested atomic number!; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libfock/cubature.cc on line: 2451; The most recent 5 function calls were:; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F895301610F for__signal_handl Unknown Unknown; libpthread-2.26.s 00007F895EC247E0 Unknown Unknown Unknown; libc-2.26.so 00007F895E89BB20 gsignal Unknown Unknown; libc-2.26.so 00007F895E89CFC8 abort Unknown Unknown; libint.so 00007F8933297319 _ZN9__gnu_cxx27__ Unknown Unknown; libint.so 00007F8933296839 _ZN10__cxxabiv111 Unknown Unknown; libint.so 00007F89332968D1 __cxa_call_termin Unknown Unknown; libint.so 00007F8933296600 __gxx_personality Unknown Unknown; libgcc_s.so.1 00007F895EEB9AAB Unknown Unknown Unknown; libgcc_s.so.1 00007F895EEB9F49 _Unwind_Resume Unknown Unknown; core.cpython-37m- 00007F8955C9BDC5 Unknown Unknown Unknown; core.cpython-37m- 00007F8955C94F6C Unknown Unknown Unknown; libiomp5.so 00007F8913F603F3 __kmp_invoke_micr Unknown Unknown; libiomp5.so 00007F8913EE4937 __kmp_fork_call Unknown Unknown; libiomp5.so 00007F8913EA8533 __kmpc_fork_call Unknown Unknown; core.cpython-37m- 00007F8955C947E1 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA73C0 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA62DC Unknown Unknown Unknown; core.cpython-37m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080:385,energy,energy,385,https://psicode.org,https://github.com/psi4/psi4/issues/2080,1,['energy'],['energy']
Energy Efficiency,Wrong X2C energy when using cartesian functions,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1908:10,energy,energy,10,https://psicode.org,https://github.com/psi4/psi4/issues/1908,1,['energy'],['energy']
Energy Efficiency,"X 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB ; * 3 -0.291143 ( 2, 0) 7AB 8AX 9AA ; * 4 0.206936 ( 2, 2) 8AX 9AX ; * 5 0.015212 ( 1, 1) 7AX 9AX ; * 6 0.000000 ( 1, 0) 7AX 8AB 9AA ; * 7 0.000000 ( 0, 1) 7AX 8AA 9AB ; * 8 -0.000000 ( 1, 2) 7AA 8AB 9AX ; * 9 -0.000000 ( 2, 1) 7AB 8AA 9AX ; *******************************************************************; *******************************************************************. As you can see, there is typically the same kind of sign for some determinants sharing a similar coefficient. For example, for the groundstate we have : 0.691216 ( 0, 1) 7AX 8AA 9AB and 0.691216 ( 1, 0) 7AX 8AB 9AA. However, in the context of a singlet spin symmetry, these determinants should present opposite signs. To check this, I used a personal code to build up from scratch the frozen core Hamiltonian associated to the (4,3) active space. I used for this the resulting Optimized MO coeff matrix obtained from SA-CASSCF Psi4. Diagonalizing this Hamiltonian gives the following two lowest states expressed in the active space : ; | Psi_0 > = 0.149|011011⟩ - 0.149|100111⟩ - 0.691|110110⟩ + 0.691|111001⟩; | Psi_1 > = 0.207|001111⟩ - 0.291|011110⟩ + 0.291|101101⟩ + 0.015|110011⟩ - 0.887|111100⟩; (NB : the HF determinant is |111100⟩ ). With this diagonalization, we clearly find same coefficients but with opposite signs. As a double check, I also computed the energy of these states and obtained : ; E_0 = -93.93144865003578 Ha; E_1 = -93.90255033754423 Ha. Which exactly coincides with the energy obtained in the Psi4 OUTPUT. Do you have a clue why such a pb arises in the Psi4 output ?. Thanks a lot for you answer",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008:3371,energy,energy,3371,https://psicode.org,https://github.com/psi4/psi4/issues/2008,2,['energy'],['energy']
Energy Efficiency,Y; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01845040 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-c,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:4500,Energy,Energy,4500,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['Energy'],['Energy']
Energy Efficiency,"Yet another issue [rescued from the the forums](http://forum.psicode.org/t/problem-with-tungsten-dft-and-hf-scf-unreasonable-energies/1129/2). The user reports using conda's 1.2.1 to attempt to converge a molecule with ECPs and observes a spread in deltaE between reactant and product of over 1000 kcal/mol, depending on basis set. Suspecting some catastrophic case of landing on an excited state, I ran a modified version of the input file on the cluster, using 1.3a2.dev122. I doubled the memory allocation and replaced the attempt to unpickle with simply calling the energy with `'b3lyp'` directly. While I was able to reproduce his small-basis energy, the large-basis energy never even began. Psi segfaulted after `Total Energy Delta E RMS |[F,P]|`, and `std::cout` got hit with over 500 counts of `Failed to converge:`, which can only happen due to [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/ecpint.cc#L492). So the ECP integrals won't even converge for me, and the SCF converges to garbage for our user. Because this is a transition metal, we can't immediately rule out excited state problems, but `Failed to converge:` points to ECP problems. User's Input File:; ```; # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-PR07-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; W -0.000070400000 -0.017989600000 -0.146457100000; C 0.000157200000 1.955377300000 -0.631545200000; O 0.000411800000 3.068043100000 -0.986288700000; C 0.000004600000 0.271128000000 1.825131000000; O 0.000003100000 0.436870000000 2.983755900000; C 0.000079000000 -2.055167300000 -0.056719200000; O 0.000369700000 -3.220382300000 -0.103637600000; H 0.422788400000 -0.287137400000 -1.984721800000; H -0.422970800000 -0.287404200000 -1.985319300000; P -2.498968200000 0.054091800000 -0.052469100000; C -3.398360300000 -0.535031900000 -1.584174",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1338:570,energy,energy,570,https://psicode.org,https://github.com/psi4/psi4/issues/1338,4,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,[MBIS/Charge Partitioning Feature] Added The Calculation of Atomic Volumes,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2056:6,Charge,Charge,6,https://psicode.org,https://github.com/psi4/psi4/pull/2056,1,['Charge'],['Charge']
Energy Efficiency,"[Psi4 1.3a2.dev48 Git: Rev {master} cb34149]. Can anybody confirm or deny that SCF iterations are no longer printed as they finish, but instead only in bulk when everything is done (like a buffered output). . For testing if needed:; ```; molecule benzene {; symmetry c1; pubchem:benzene; }. memory 1 GiB; energy('hf/def2-QZVP'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1284:305,energy,energy,305,https://psicode.org,https://github.com/psi4/psi4/issues/1284,1,['energy'],['energy']
Energy Efficiency,"[Recovered from the forums.](http://forum.psicode.org/t/segfault-projecting-wfn-onto-new-basis/945). User attempted a manual basis guess, with the following input file.; ```; molecule {; 0 5; FE 0.000000000000 0.000000000000 0.123274779640; F 1.565379000000 0.000000000000 -0.647320000000; F -0.000000000000 -1.700830000000 0.639825000000; F 0.000000000000 1.700830000000 0.639825000000; F -1.565379000000 -0.000000000000 -0.647320000000; }. set {; basis sto-3g; guess sad; scf_type direct; reference uhf; }. energy('hf'). basis {; assign 6-31++G**; assign Fe 6-31G**; }. set guess read; optimize('hf'); ```. The PSIO error that results is difficult to interpret. Can we catch the case of switching basis sets without cleaning and tell the user to either clean explicitly or use the `basis_guess` option, depending on what they're trying to do?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1329:509,energy,energy,509,https://psicode.org,https://github.com/psi4/psi4/issues/1329,1,['energy'],['energy']
Energy Efficiency,"[This block of code](https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsgshell.py#L222-L228) in libmintsgshell.py throws a UnboundLocalError when trying to recover from the ZeroDivisionError. ```; try:; norm = math.sqrt(1.0 / (tmp * e_sum)); except ZeroDivisionError:; self.PYcoef[i] = [1.0 for i in range(self.nprimitive())]; # Set the normalization; for i in range(self.nprimitive()):; self.PYcoef[i] *= norm; ```. Traceback; ```; Traceback (most recent call last):; File ""/prefix/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/prefix/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/prefix/lib//psi4/driver/procrouting/proc.py"", line 1990, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/prefix/lib//psi4/driver/procrouting/proc.py"", line 1279, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/prefix/lib//psi4/driver/p4util/python_helpers.py"", line 101, in pybuild_wavefunction; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/prefix/lib//psi4/driver/p4util/python_helpers.py"", line 68, in pybuild_basis; key, resolved_target, fitrole, other, return_atomlist=return_atomlist); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 661, in pyconstruct; return_atomlist=return_atomlist); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 876, in construct; ecpbasisset = BasisSet(key, mol, ecp_atom_basis_shell); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 148, in __init__; self.constructor_role_mol_shellmap(*args); File ""/prefix/lib//psi4/driver/qcdb/libmintsbasisset.py"", line 349, in constructor_role_mol_shellmap; n, xyz_ptr, bf_count, pt='Unnormalized', rpowers=rpowers[tst:tsp]); File ""/prefix/lib//psi4/driver/qcdb/libmintsgshell.py"", line 193, in __init__; self.normalize_shell(); File ""/prefix/lib//psi4/d",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/846:642,energy,energy,642,https://psicode.org,https://github.com/psi4/psi4/issues/846,2,['energy'],['energy']
Energy Efficiency,"\psi4\basis\6-31g.gbs ; atoms 37-38, 41-42, 45-46, 49-50, 53-54, 57-58, 61-62, 65-66, 69-70, 73-74, 77-78, 81-82, 85-86, 89-90, 93-94, 97-98 entry CL line 294 file PATH\Anaconda3\envs\psi4\lib\share\psi4\basis\6-31g.gbs ; atoms 39-40, 43-44, 47-48, 51-52, 55-56, 59-60, 63-64, 67-68, 71-72, 75-76, 79-80, 83-84, 87-88, 91-92, 95-96, 99-100 entry NA line 162 file PATH\Anaconda3\envs\psi4\lib\share\psi4\basis\6-31g.gbs . => B3LYP-D3: Empirical Dispersion <=. Grimme's -D3 (zero-damping) Dispersion Correction; Grimme S.; Antony J.; Ehrlich S.; Krieg H. (2010), J. Chem. Phys., 132: 154104. s6 = 1.000000; s8 = 1.703000; sr6 = 1.261000; alpha6 = 14.000000; sr8 = 1.000000. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 4 Threads, -734 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H -7.704981244071 -0.117458228320 -1.644374634432 1.007825032230; H -7.704981244071 -2.592458228320 -1.644374634432 1.007825032230; H 6.339018755929 -2.592458228320 -1.644374634432 1.007825032230; H 6.339018755929 -0.117458228320 -1.644374634432 1.007825032230; C -6.766181244071 -0.656458228320 -1.643074634432 12.000000000000; C -6.766181244071 -2.053458228320 -1.643074634432 12.000000000000; C 5.400218755929 -2.053458228320 -1.643074634432 12.000000000000; C 5.400218755929 -0.656458228320 -1.643074634432 12.000000000000; H -5.579081244071 1.130141771680 -1.641574634432 1.007825032230; H -5.579081244071 -3.840058228320 -1.641574634432 1.007825032230; H 4.213118755929 -3.840058228320 -1.641574634432 1.007825032230; H 4.213118755929 1.130141771680 -1.641574634432 1.007825032230; C -5.558181244071 0.046741771680 -1.641474634432 12.000000000000; C -5.5581812",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709:10385,charge,charge,10385,https://psicode.org,https://github.com/psi4/psi4/issues/2709,1,['charge'],['charge']
Energy Efficiency,"_EvalCodeWithName Python/ceval.c:4166; #39 0x7fa9b529f30c in PyEval_EvalCodeEx Python/ceval.c:4187; #40 0x7fa9b529f35a in PyEval_EvalCode Python/ceval.c:731; #41 0x7fa9b52db3b1 in run_mod Python/pythonrun.c:1025; #42 0x7fa9b52db3b1 in PyRun_FileExFlags Python/pythonrun.c:978; #43 0x7fa9b52db516 in PyRun_SimpleFileExFlags Python/pythonrun.c:419; #44 0x7fa9b52f7b0c in run_file Modules/main.c:340; #45 0x7fa9b52f7b0c in Py_Main Modules/main.c:810; #46 0x400bbb in main Programs/python.c:69; #47 0x7fa9b422cfe9 in __libc_start_main (/lib64/libc.so.6+0x20fe9); #48 0x400c7c (/home/raimis/opt/conda/envs/psi4/bin/python3.6+0x400c7c). 0x60800007a380 is located 0 bytes to the right of 96-byte region [0x60800007a320,0x60800007a380); allocated by thread T0 here:; #0 0x7fa9b5721e10 in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_new_delete.cc:80; #1 0x7fa9944a3281 in __gnu_cxx::new_allocator<psi::cctriples::thread_data>::allocate(unsigned long, void const*) /usr/include/c++/7/ext/new_allocator.h:111; #2 0x7fa9944a2ba8 in std::allocator_traits<std::allocator<psi::cctriples::thread_data> >::allocate(std::allocator<psi::cctriples::thread_data>&, unsigned long) /usr/include/c++/7/bits/alloc_traits.h:436; #3 0x7fa9944a2892 in std::_Vector_base<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::_M_allocate(unsigned long) /usr/include/c++/7/bits/stl_vector.h:172; #4 0x7fa9944a2506 in std::_Vector_base<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::_M_create_storage(unsigned long) (/home/raimis/prj/psi4.git/linux_build/stage/lib/psi4/core.cpython-36m-x86_64-linux-gnu.so+0xcf0a506); #5 0x7fa9944a1e64 in std::_Vector_base<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::_Vector_base(unsigned long, std::allocator<psi::cctriples::thread_data> const&) /usr/include/c++/7/bits/stl_vector.h:138; #6 0x7fa9944a18a0 in std::vector<psi::c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1438:6589,allocate,allocate,6589,https://psicode.org,https://github.com/psi4/psi4/pull/1438,1,['allocate'],['allocate']
Energy Efficiency,"______________________________________ test_v2rdm_casscf ________________________________________________. @using_v2rdm_casscf; def test_v2rdm_casscf():; """"""v2rdm_casscf/tests/v2rdm1""""""; #! cc-pvdz N2 (6,6) active space Test DQG. print(' N2 / cc-pVDZ / DQG(6,6), scf_type = CD / 1e-12, rNN = 0.5 A'). import v2rdm_casscf. n2 = psi4.geometry(""""""; 0 1; n; n 1 r; """"""). interloper = psi4.geometry(""""""; 0 1; O; H 1 1.0; H 1 1.0 2 90.0; """"""). psi4.set_options({; 'basis': 'cc-pvdz',; 'scf_type': 'cd',; 'cholesky_tolerance': 1e-12,; 'd_convergence': 1e-10,; 'maxiter': 500,; 'restricted_docc': [ 2, 0, 0, 0, 0, 2, 0, 0 ],; 'active': [ 1, 0, 1, 1, 0, 1, 1, 1 ],; }); ##psi4.set_module_options('v2rdm_casscf', {; psi4.set_options({; # 'positivity': 'dqg',; 'r_convergence': 1e-5,; 'e_convergence': 1e-6,; 'maxiter': 20000,; # #'orbopt_frequency': 1000,; # #'mu_update_frequency': 1000,; }). psi4.activate(n2). n2.r = 0.5; refscf = -103.04337420425350; refv2rdm = -103.086205379481. > psi4.energy('v2rdm-casscf', molecule=n2). /home/je714/psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py:741:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /home/je714/psi4conda/lib/python3.5/site-packages/psi4/driver/driver.py:454: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name = 'v2rdm-casscf', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f8d89888e30>}; lowername = 'v2rdm-casscf', optstash = <psi4.driver.p4util.optproc.OptionsState object at 0x7f8d89888470>; ref_wfn = <psi4.core.RHF object at 0x7f8d897e56d0>, filename = '', scf_type = 'CD'. def run_v2rdm_casscf(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; v2rdm_casscf can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('v2rdm_casscf",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/710:3480,energy,energy,3480,https://psicode.org,https://github.com/psi4/psi4/issues/710,1,['energy'],['energy']
Energy Efficiency,"______________________________________________________________. def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule; ; h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""); ; psi4.set_options({""basis"": '6-31G**'}); ; > psi4.optimize('ccsd'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:63: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:1050: in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:697: in gradient; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:752: in select_ccsd; return func(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2953: in run_detci; ref_wfn = scf_helper(name, **kwargs) # C1 certified; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4a59eb8>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SC",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:29092,energy,energy,29092,https://psicode.org,https://github.com/psi4/psi4/issues/820,2,['energy'],['energy']
Energy Efficiency,"_scfproperty <- miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py FAILED. ==================================================================== FAILURES ====================================================================; ____________________________________________________________________ test_erd ____________________________________________________________________. @using_erd; def test_erd():; """"""erd/scf5""""""; ; psi4.set_options({'integral_package': 'ERD'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:617: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4cd6b48>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_f",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:6231,energy,energy,6231,https://psicode.org,https://github.com/psi4/psi4/issues/820,2,['energy'],['energy']
Energy Efficiency,"_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Performing finite difference calculations; 5 displacements needed ... 1; ________________________________________________________________ test_psi4_dfmp2 _________________________________________________________________. def test_psi4_dfmp2():; """"""dfmp2-1""""""; #! Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy; #! using automatic counterpoise correction. Monomers are specified using Cartesian coordinates.; ; Enuc = 235.946620315069168; Ecp = -0.0224119246; ; formic_dim = psi4.geometry(""""""; 0 1; C -1.888896 -0.179692 0.000000; O -1.493280 1.073689 0.000000; O -1.170435 -1.166590 0.000000; H -2.979488 -0.258829 0.000000; H -0.498833 1.107195 0.000000; --; 0 1; C 1.888896 0.179692 0.000000; O 1.493280 -1.073689 0.000000; O 1.170435 1.166590 0.000000; H 2.979488 0.258829 0.000000; H 0.498833 -1.107195 0.000000; units angstrom; no_reorient; """"""); ; psi4.set_options({; 'basis': 'cc-pvdz',; 'df_basis_scf': 'cc-pvdz-jkfit',; 'df_basis_mp2': 'cc-pvdz-ri',; # not necessary to specify df_basis* for most basis sets; 'scf_type': 'df',; 'guess': 'sad',; 'd_convergence': 11,; }); ; > e_cp = psi4.energy('mp2', bsse_type='cp'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:112: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:32194,energy,energy,32194,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"_type df. molecule QMregion {; 0 1; He 0.0 0.0 0.0; symmetry c1; no_reorient; no_com; }. gradient(""PBE0""). Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1,0.0,0.0,1.8897261245650618); psi4.set_global_option_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. For test 1, the gradient from the water and the water+charges are different, but they do not agree with the forces returned by an equivalent calculation with Gaussian. The isolated water molecule has gradients that agree with the Gaussian forces, but once the charges are added the Gaussian and PSI4 calculations return different results. For test 2, the PSI4 gradient is zero for the for the helium with and without the point charge. The charge has no effect on the results. When I repeated the calculation with Gaussian, there was a finite force on the helium atom when a charge was included. Here are the gradient results I pulled from the output files:. ```; Water+Charges (TIP3P charges: O->-0.834, H->0.417). PSI4 gradient without charges:; 1 -0.000345685156 -0.000000503248 -0.001768512746; 2 0.000171019827 0.000099064969 0.000874930893; 3 0.000170945942 -0.000098562011 0.000874553581. Gaussian forces without charges:; 1 8 0.000342119 0.000000502 0.001755656; 2 1 -0.000171096 -0.000103970 -0.000878017; 3 1 -0.000171022 0.000103468 -0.000877640. PSI4 gradient with charges:; 1 0.001872262723 -0.000000506498 -0.002344911788; 2 -0.000937982580 -0.003306842432 0.001163140925; 3 -0.000938055973 0.003307348640 0.001162761678. Gaussian forces with charges:; 1 8 0.002079660 0.000000498 -0.002984605; 2 1 0.000413259 0.000612887 -0.001458686; 3 1 0.000413331 -0.000613388 -0.001458305. --------------------------------------------------------------------; He+Charge (q = -1.0, r = 1.0 Ang.). PSI4 gradient without charges:; 1 0.000000000000 0.000000000000 0.000000000000. Gaussian forces without charges:; 1 2 0.000000000 0.000000000 0.000000000. PSI4 gradient with charges:; 1 0.000000000000 0.000000000000 0.000000000000. Ga",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/184:2034,charge,charges,2034,https://psicode.org,https://github.com/psi4/psi4/issues/184,1,['charge'],['charges']
Energy Efficiency,"```; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); e, wfn=psi4.energy('scf/def2-svp', molecule=h2o, return_wfn=True); wfn.to_file('my_wfn'); G, wfn_new = psi4.gradient('scf/def2-svp', return_wfn=True, restart_file='my_wfn'); ```. The `restart_file` keyword is silently ignored.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2713:79,energy,energy,79,https://psicode.org,https://github.com/psi4/psi4/issues/2713,1,['energy'],['energy']
Energy Efficiency,"```; molecule custom {; 0 1; AR 0.00000000 0.00000000 0.00000000; }. set basis def2-SVP; set DFT_VV10_B 4.0; pbe0 = {; ""name"": ""my_PBE0"",; ""x_functionals"": {""GGA_X_PBE"": {""alpha"": 0.75}},; ""x_hf"": {""alpha"": 0.25},; ""c_functionals"": {""GGA_C_PBE"": {}}; }; func_call = energy('SCF', dft_functional=pbe0); ```. Logic check for `isinstance(name, dict)` is missing, i think? I wasn't fully aware of how it works.; https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/dft_funcs/superfuncs.py#L113",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1188:266,energy,energy,266,https://psicode.org,https://github.com/psi4/psi4/issues/1188,1,['energy'],['energy']
Energy Efficiency,"```; molecule {; He; }. optimize(""scf/cc-pvdz""); ```. on `1.8a1.dev57` gives. ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin//psi4"", line 345, in <module>; exec(content); File ""<string>"", line 22, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 1272, in optimize; opt_object.take_step(); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/optking/opt_helper.py"", line 174, in take_step; self.dq, self.step_str = self.opt_manager.take_step(self.fq, self._Hq, self.E, return_str=True); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/optking/optimize.py"", line 232, in take_step; achieved_dq, returned_str = self.opt_method.take_step(fq, H, energy, return_str=True). ValueError: not enough values to unpack (expected 2, got 0); ```. Something is wrong (or outright missing) for the single-atom case, which should be a straight ""no geometry to optimize.""",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971:740,energy,energy,740,https://psicode.org,https://github.com/psi4/psi4/issues/2971,1,['energy'],['energy']
Energy Efficiency,"```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. wfn = energy(""mp2/sto-6g"", return_wfn=True)[1]; new_wfn = wfn.c1_deep_copy(wfn.basisset()); new_wfn.Ca(); ```. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Wavefunction::Ca: Unable to obtain MO coefficients. !; ! Error occurred in file: !; ! /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libmints/wavefunction.cc on !; ! line: 810 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. Using `c1_deep_copy` on a non-HF wfn means the orbitals don't copy: that's handled by the constructor. This is causing problems in Francesco's group.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2777:56,energy,energy,56,https://psicode.org,https://github.com/psi4/psi4/issues/2777,1,['energy'],['energy']
Energy Efficiency,```; molecule {; symmetry c1; H 0.0 0.0 0.0; H 0.0 0.0 1000.0; }. set basis STO-3G; energy('fci'); ```. gives out NaNs after the first iteration.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/561:84,energy,energy,84,https://psicode.org,https://github.com/psi4/psi4/issues/561,1,['energy'],['energy']
Energy Efficiency,```; molecule {; symmetry c1; He 0.0 0.0 0.0; He 0.0 0.0 1000.0; }. set basis 6-31G; set GUESS_VECTOR UNIT; set NUM_DETS_PRINT 4000000000000; set e_convergence 1e-10; set r_convergence 1e-10; set diag_method mitrushenkov; energy('fci'); ```. segfaults.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/560:222,energy,energy,222,https://psicode.org,https://github.com/psi4/psi4/issues/560,1,['energy'],['energy']
Energy Efficiency,```; molecule {; symmetry c1; He 0.0 0.0 0.0; He 0.0 0.0 1000.0; }. set basis 6-31G; set GUESS_VECTOR UNIT; set NUM_DETS_PRINT 4000000000000; set e_convergence 1e-10; set r_convergence 1e-10; set diag_method olsen; energy('fci'); ```. gives either a segfault or; ```; *** H0 Block Eigenvalue = -5.71032085. Find the roots with Olsen's single vector algorithm; init_array: trouble allocating memory ; size = -1465995312; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/559:215,energy,energy,215,https://psicode.org,https://github.com/psi4/psi4/issues/559,1,['energy'],['energy']
Energy Efficiency,"```; molecule {; units bohr; H; H 1 2.7; }. set scf_type pk. energy('fci/sto-6g'); ```. Above input file crashes with `Fatal Error: CIWavefunction: Iterations did not converge!` and lots of ""NAN"" in the output file.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2243:61,energy,energy,61,https://psicode.org,https://github.com/psi4/psi4/issues/2243,1,['energy'],['energy']
Energy Efficiency,"`dft-grad-lr3` test fails with the current master (64aa80aa96983bec51d40732d18f3def5eb9e844):; ```; $ ctest -R dft-grad-lr3 --output-on-failure; Test project /home/raimis/psi4.git/linux_build; Start 158: dft-grad-lr3; 1/1 Test #158: dft-grad-lr3 .....................***Failed 85.00 sec; 	Analytic vs Reference wB97X-D Gradients...........................PASSED; Traceback (most recent call last):; File ""/home/raimis/psi4.git/linux_build/stage/bin/psi4"", line 290, in <module>; exec(content); File ""<string>"", line 74, in <module>; File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/driver.py"", line 680, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2084, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 2022, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/procrouting/empirical_dispersion.py"", line 195, in compute_energy; verbose=1); File ""/home/raimis/psi4.git/linux_build/stage/lib/psi4/driver/qcdb/intf_dftd3/runner.py"", line 136, in run_dftd3_from_arrays; jobrec['qcvars']['CURRENT ENERGY'] = copy.deepcopy(jobrec['qcvars']['DISPERSION CORRECTION ENERGY']). KeyError: 'qcvars'; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). 0% tests passed, 1 tests failed out of 1. Label Time Summary:; dft = 85.00 sec*proc (1 test); psi = 85.00 sec*proc (1 test); scf = 85.00 sec*proc (1 test). Total Test time (real) = 85.06 sec. The following tests FAILED:; 	158 - dft-grad-lr3 (Failed); Errors while running CTest; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1418:1498,ENERGY,ENERGY,1498,https://psicode.org,https://github.com/psi4/psi4/issues/1418,2,['ENERGY'],['ENERGY']
Energy Efficiency,"`energy('mp2.5')` recently defied us by not running in its fastest (DF) form. presently, <=MP2 defaults to DF in psi4 and >MP2 defaults to CONV. there is a proposal to shift that line to <=MP3. ### Data; * equal DF & CONV: mp2, mp3, mp2.5, lccd,; * strongly CONV: mp4, lccsd, ccsd, ccsd(t), cisd. ### Pro-shift; * by using ""MP"", you're after speed, not accuracy, particularly not DF vs. CONV level accuracy; * more commands run faster without options; * CDS wants it. ### Anti-shift; * how does lccd/lccsd fit in?; * will make re-run inputs change rather more than physconst or dft screening; * mp3 is a little harder to remember as a bright line in the methods than mp2. This issue made to collect opinions and to make sure a decision is made before v1.4. fwiw, I'm neutral.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1801:1,energy,energy,1,https://psicode.org,https://github.com/psi4/psi4/issues/1801,1,['energy'],['energy']
Energy Efficiency,"`python; Python 3.6.3 | packaged by conda-forge | (default, Nov 4 2017, 10:10:56) ; [GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import sys; >>> sys.executable; '/home/xxx/data/applications/anaconda3/envs/p4env/bin/python'; >>> sys.path; ['', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python36.zip', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/lib-dynload', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages']; >>> import psi4; /home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; ```. If I run inside a notebook, `sys.path` and `sys.executable` are the same, but when I `import psi4`, I get a message ""The kernel appears to have died. It will restart automatically."" In the terminal, I see: ; ```; [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `conda install ipykernel --name p4env` and then `~/data/applications/psi4conda/envs/p4env/bin/python -m ipykernel install --user` (according to [these](https://github.com/jupyter/notebook/issues/1524) instructions). - CentOS Linux release 7.4.1708 (Core) ; - 3.1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862:1553,Adapt,Adapting,1553,https://psicode.org,https://github.com/psi4/psi4/issues/862,1,['Adapt'],['Adapting']
Energy Efficiency,a bug in energy() function,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/927:9,energy,energy,9,https://psicode.org,https://github.com/psi4/psi4/issues/927,1,['energy'],['energy']
Energy Efficiency,adapt for pydantic v1 and v2,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3019:0,adapt,adapt,0,https://psicode.org,https://github.com/psi4/psi4/pull/3019,1,['adapt'],['adapt']
Energy Efficiency,adds missing mp3 energy variables to dfocc and occ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1707:17,energy,energy,17,https://psicode.org,https://github.com/psi4/psi4/pull/1707,1,['energy'],['energy']
Energy Efficiency,"ails:; ```; molecule mol {; N 0.0 0.0 0.0; N 0.0 0.0 1.0; 0 1; }. basis {; assign genbas; [genbas]; cartesian. ****; N 0; S 6 1.00; 0.4173511460D+04 0.1834772160D-02; 0.6274579110D+03 0.1399462700D-01; 0.1429020930D+03 0.6858655181D-01; 0.4023432930D+02 0.2322408730D+00; 0.1282021290D+02 0.4690699481D+00; 0.4390437010D+01 0.3604551991D+00; SP 3 1.00; 0.1162636186D+02 -0.1149611817D+00 0.6757974388D-01; 0.2716279807D+01 -0.1691174786D+00 0.3239072959D+00; 0.7722183966D+00 0.1145851947D+01 0.7408951398D+00; SP 1 1.00; 0.2120314975D+00 0.1000000000D+01 0.1000000000D+01; ****. }; e, wfn = energy('scf', return_wfn=True); ```; with message:; ```; Traceback (most recent call last):; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 680, in pyconstruct; verbose=verbose); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 862, in construct; shells, msg,",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1996:1357,energy,energy,1357,https://psicode.org,https://github.com/psi4/psi4/issues/1996,2,['energy'],['energy']
Energy Efficiency,"al/mol] -0.58747633 [kJ/mol]; Total SAPT2+ -0.21063053 [mEh] -0.13217266 [kcal/mol] -0.55301046 [kJ/mol]; Total SAPT2+(3) -0.18566214 [mEh] -0.11650476 [kcal/mol] -0.48745596 [kJ/mol]; Total SAPT2+3 -0.18495027 [mEh] -0.11605805 [kcal/mol] -0.48558693 [kJ/mol]; Total SAPT2+(CCD) -0.19261506 [mEh] -0.12086778 [kcal/mol] -0.50571084 [kJ/mol]; Total SAPT2+(3)(CCD) -0.16764667 [mEh] -0.10519988 [kcal/mol] -0.44015633 [kJ/mol]; Total SAPT2+3(CCD) -0.16693480 [mEh] -0.10475317 [kcal/mol] -0.43828731 [kJ/mol]. Special recipe for scaled SAPT0 (see Manual):; Electrostatics sSAPT0 -0.21426853 [mEh] -0.13445554 [kcal/mol] -0.56256203 [kJ/mol]; Exchange sSAPT0 0.00071398 [mEh] 0.00044803 [kcal/mol] 0.00187454 [kJ/mol]; Induction sSAPT0 -0.01930071 [mEh] -0.01211138 [kcal/mol] -0.05067402 [kJ/mol]; Dispersion sSAPT0 -0.07951765 [mEh] -0.04989808 [kcal/mol] -0.20877358 [kJ/mol]; Total sSAPT0 -0.31237291 [mEh] -0.19601697 [kcal/mol] -0.82013509 [kJ/mol]. But the energy should the higher, then I include the mid-bond to try to solve this problema . @He -2.068477419249695 0.0 -1.410916582253025 . and the results are, almost, the same:. Total HF -0.24001137 [mEh] -0.15060942 [kcal/mol] -0.63014986 [kJ/mol]; Total SAPT0 -0.31952707 [mEh] -0.20050627 [kcal/mol] -0.83891833 [kJ/mol]; Total SAPT2 -0.23090246 [mEh] -0.14489348 [kcal/mol] -0.60623440 [kJ/mol]; Total SAPT2+ -0.21777522 [mEh] -0.13665602 [kcal/mol] -0.57176884 [kJ/mol]; Total SAPT2+(3) -0.19281865 [mEh] -0.12099553 [kcal/mol] -0.50624536 [kJ/mol]; Total SAPT2+3 -0.19210713 [mEh] -0.12054905 [kcal/mol] -0.50437726 [kJ/mol]; Total SAPT2+(CCD) -0.19975973 [mEh] -0.12535113 [kcal/mol] -0.52446918 [kJ/mol]; Total SAPT2+(3)(CCD) -0.17480316 [mEh] -0.10969064 [kcal/mol] -0.45894570 [kJ/mol]; Total SAPT2+3(CCD) -0.17409164 [mEh] -0.10924416 [kcal/mol] -0.45707760 [kJ/mol]. Special recipe for scaled SAPT0 (see Manual):; Electrostatics sSAPT0 -0.21424647 [mEh] -0.13444170 [kcal/mol] -0.56250411 [kJ/mol]; Exchange sSAPT0 0.00070499 [mEh",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/938:2126,energy,energy,2126,https://psicode.org,https://github.com/psi4/psi4/issues/938,1,['energy'],['energy']
Energy Efficiency,"aled twice leading to incorrect energies. This only happens, when using python and not psithon.; This can easily be seen when adding a 0 charge far away of the molecule to the simulation, which changes energies significantly. I already prepared a PR to fix this, this is just for reference. To reproduce the problem, use the following:; ```; #! Python equivalent of extern5 test:; #! External potential sanity check with 0 charge far away; #! Checks if all units behave the same and energy is same as no; #! potential; import numpy as np; import psi4.core; import psi4. b2a=0.529177249; # Coordinates added in angstrom; coords = np.array([[ -0.778803000000 , 0.000000000000, 1.132683000000],; [ -0.666682000000, 0.764099000000, 1.706291000000],; [ -0.666682000000, -0.764099000000 , 1.706290000000]]); elements = [""O"",""H"",""H""]; molecule_ang = psi4.core.Molecule.from_arrays(geom=coords, elem=elements, fix_symmetry=""c1"", fix_com=True, fix_orientation=True); molecule_bohr = psi4.core.Molecule.from_arrays(geom=coords/b2a, elem=elements, fix_symmetry=""c1"", fix_com=True, fix_orientation=True, units=""Bohr""). external_potentials = [[0.00, np.array([10.0,10.0,10.0]) / b2a]]. psi4.set_options( {; ""scf_type"": ""df"",; ""d_convergence"": 12,; ""basis"": ""STO-3G"",; ""print"": 0,; ""debug"": 0,; }). ene_bohr_charges = psi4.energy('scf', molecule=molecule_bohr, external_potentials=external_potentials); ene_bohr_pure = psi4.energy('scf', molecule=molecule_bohr); psi4.compare_values(ene_bohr_charges, ene_bohr_pure, 6, ""Bohr geometry, charges vs no charges energy equality""). ene_ang_pure = psi4.energy('scf', molecule=molecule_ang); psi4.compare_values(ene_ang_pure, ene_bohr_pure, 6, ""No charges, Bohr vs Angstrom geometry energy equality""). ene_ang_charges = psi4.energy('scf', molecule=molecule_ang, external_potentials=external_potentials); psi4.compare_values(ene_ang_charges, ene_ang_pure, 6, ""Angstrom geometry, charges vs no charges energy equality""); ```; The last line should fail with the current psi4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3147:1435,energy,energy,1435,https://psicode.org,https://github.com/psi4/psi4/issues/3147,12,"['charge', 'energy']","['charges', 'energy']"
Energy Efficiency,"amine dimers. With PBEh-3c, I've gotten some suspiciously large errors relative to CCSD(T)/CBS. I have used 590, 99 (spherical,radial) points, and I've also compared the energies to Orca (using defgrid3... after recommendations from issue #2304). Psi4 and Orca differ by as many as .3-.4 kJ/mol, depending on the dimer, which is a large percent error. One test case is summarized below:. | Program | Monomer A (H) | Monomer B (H) | Dimer AB (H)| $E_{int}$ (kcal/mol)| ; |---------|-------------|-------------|-----------|-----------|; | Psi4 | -453.84229689692728 | -453.84229689783353 | -907.68447385499462 | 0.075263339533 |; |Orca | -453.842841688023 | -453.842841698644 | -907.685688152560 | -0.002990642998 |. | Program | $E_{int}$ (kJ/mol)| Notes|; |---------|-------------| ----|; | Psi4 | 0.31490181 | |; |Orca | -0.01251285 | |; | Benchmark | -0.00315431 | Focal Point CCSD(T)/CBS with Psi4 |. I have noticed this warning in all of my Psi4 hexamine/PBEh-3c files:; `Warning: Molecule has a spherically-symmetric moment of charge but lacks icosahedral, octahedral, and tetrahedral symmetry.` . CDS figures this has something to do with the grid placement. Any ideas of how to alleviate this warning while keeping the same geometries and/or what the energy difference could be attributed to? I've tried different basis sets, different number of grid points, `symmetry c1`, `molecule.symmetrize(1e-3)`, no pruning scheme (rather than `robust`). The only time I have been able to get the warning to go away is when I use `bsse_type='cp'`, but I really shouldn't be running the calculation with cp correction because that is already included in the PBEh-3c calculation. Output files for the above example are attached, as well as a graph of Psi4 and Orca interaction energies for all dimers tested. . [Psi4-214-int.txt](https://github.com/psi4/psi4/files/9200713/Psi4-214-int.txt); [Orca-214-monA.txt](https://github.com/psi4/psi4/files/9200765/Orca-214-monA.txt); [Orca-214-monB.txt](https://git",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2647:1138,charge,charge,1138,https://psicode.org,https://github.com/psi4/psi4/issues/2647,1,['charge'],['charge']
Energy Efficiency,"anual) on how to do that calculation. I was able to obtain CASSCF energies and wavefunctions, and was going to just use the CASSCF wavefunction as the reference for MRCI calculation, but had little success in doing so. The followings are my code (python), trying to optimize the energy for the C state of the C2 molecule (which has two main configurations near its equilibrium bond length). The paper included above deals with the X, B, and B' state of C2, but those are not the states that I want. (I want the singlet C state). ## geometry; c2=psi4.geometry(""""""; 0 1; c ; c 1 1.25; symmetry d2h; """"""); ##. ## use the C-state main electron configuration as the reference for CASSCF; psi4.set_options({; 'basis': 'cc-pVdz',; 'reference': 'rohf',; 'docc': [2, 0, 0, 0, 0, 1, 0, 1],; 'socc': [0, 0, 0, 0, 0, 1, 1, 0],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'mcscf_r_convergence': 5.e-6; }). psi4.set_module_options('detci',{; 'num_roots': 1,; 'calc_s_squared': True; }). casscf_energy, casscf_wfn = psi4.energy('casscf', return_wfn=True). #the code works up to this point. ## my way of feeding the casscf_wfn for another round of CI, but it did not work at all; psi4.set_options({; 'wfn': 'detci',; 'guess': 'gwh',; 'basis': 'cc-pVDZ',; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'e_convergence': 10,; 'd_convergence': 10; }). thisenergy = psi4.energy('detci',ref_wfn=casscf_wfn). When I did the second round of CI, psi4 crashed. It got stuck at the ""Starting CI iterations"" part, with the error message ""Segmentation fault: 11"". I am quite new to Psi4, but hopefully I am not talking complete non-sense here. Also, while the CASSCF bit worked, the CASSCF energy is much higher than I expected (by ~0.2 hartree). The C-state minimum lies above the 3P+3P limit, instead ~2-3 eV below it. So, it would also be helpful if someone could teach me the best way to carry out the CASSCF calculation on the C state. Thanks,. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907:1392,energy,energy,1392,https://psicode.org,https://github.com/psi4/psi4/issues/1907,3,['energy'],['energy']
Energy Efficiency,"armonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; __________________________________________________________________ test_simint ___________________________________________________________________. @using_simint; def test_simint():; """"""simint/scf5""""""; ; psi4.set_options({'integral_package': 'simint'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:625: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4b93fc0>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_f",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:11740,energy,energy,11740,https://psicode.org,https://github.com/psi4/psi4/issues/820,2,['energy'],['energy']
Energy Efficiency,"ary of VibrationAspect objects (fields: lbl unit data comment); Also returns text suitable for printing; ; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment) | units | data (real/imaginary modes) |; +===============+============================================+===========+======================================================+; | omega | frequency | cm^-1 | np.array(ndof) complex (real/imag) |; | q | normal mode, normalized mass-weighted | a0 u^1/2 | np.array(ndof, ndof) float |; | w | normal mode, un-mass-weighted | a0 | np.array(ndof, ndof) float |; | x | normal mode, normalized un-mass-weighted | a0 | np.array(ndof, ndof) float |; | degeneracy | degree of degeneracy | | np.array(ndof) int |; | TRV | translation/rotation/vibration | | np.array(ndof) str 'TR' or 'V' or '-' for partial |; | gamma | irreducible representation | | np.array(ndof) str irrep or None if unclassifiable |; | mu | reduced mass | u | np.array(ndof) float (+/+) |; | k | force constant | mDyne/A | np.array(ndof) float (+/-) |; | DQ0 | RMS deviation v=0 | a0 u^1/2 | np.array(ndof) float (+/0) |; | Qtp0 | Turning point v=0 | a0 u^1/2 | np.array(ndof) float (+/0) |; | Xtp0 | Turning point v=0 | a0 | np.array(ndof) float (+/0) |; | theta_vib | char temp | K | np.array(ndof) float (+/0) |; ; Examples; --------; # displacement of first atom in highest energy mode; >>> vibinfo['x'].data[:, -1].reshape(nat, 3)[0]; ; # remove translations & rotations; >>> vibonly = filter_nonvib(vibinfo); ```; - [ ] Should we run a gradient before every freq to judge whether to project rotations? Right now freq on non-stationary structures are going to be way different than from findif because findif stuck with the (in PR analysis labeling) ""pre-proj"" vibs; - [ ] How to handle natural geometry shift the occurs upon isotopic substitution in geometry but not in reused Hessian? shift/rotate the Hessian? compu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:14077,reduce,reduced,14077,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['reduce'],['reduced']
Energy Efficiency,"asses may also trigger the warning. c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; Following warning is harmless if you've altered chgmult through `set_molecular_change` or `set_multiplicity`. Such alterations are an expert feature. Specifying in the original molecule string is preferred. Nonphysical masses may also trigger the warning. c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; Following warning is harmless if you've altered chgmult through `set_molecular_change` or `set_multiplicity`. Such alterations are an expert feature. Specifying in the original molecule string is preferred. Nonphysical masses may also trigger the warning.; ...; ```. ```; c: [1.0, 0]; fc: [0.0]; m: [2]; fm: [3]; ```; steems from https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/molecule.py#L1646. and can be silenced by setting `verbose=-1`,; the other is 4 lines below:. https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/molecule.py#L1650. This PR, adds `quiet` param to `to_dict` in Molecule and `energy` in Driver, and uses that in `ip_fitting` not to post both of them out. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] removed noise from stdout while running `ip_tunning`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] silences plain `print` from `Molecule.to_dict()` - `qcel.molparse.from_arrays` and warning around setting charge/multiplicity when running `ip_fitting`. This shouldn't change other code paths. ## Questions; - [ ] Do psi have any tests that test stdout with pytest?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## St",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3229:2028,energy,energy,2028,https://psicode.org,https://github.com/psi4/psi4/pull/3229,1,['energy'],['energy']
Energy Efficiency,"ation choice that I haven't identified. Anyway, that's why those are separate entries (away from qcng) in `standard_suite_ref_local.py`; * In filling out the capabilities tables for Hessians, I tried to collect CD Hessians for HF and SVWN by FD of energies. They failed the per-element CD result ~= CONV result check. Not surprising since CD thresh is set at 1e-4. I didn't do anything about the failure (ref values deleted and tests are not active), so this is just to bring up that CD threshold is untuned for dertype or E_/D_/R_CONVERGENCE.; * refuted first two thirds of a prominent footnote: `DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented.`; - [x] upgraded stdsuite runner to catch up with qcdb and qcengine last year by (1) implementing per-dertype and abs/rel comparison checks (nothing is actually loosened) and (2) dropping a dict summary of each test to a record file.; - [x] arranged for available `td-{dft}` calls to show up in the energy table, https://psicode.org/psi4manual/master/energy.html; - [x] fixed `energy(""psimrcc_scf"")` to use regular SCF as ref for PSIMRCC and added a test; - [x] rehabilitated `energy(""qchf"")` (which never had its initialism expanded in the whole of the codebase, btw) so it runs. added a test. it probably ought to be better integrated with regular SCF module. Regular SCF has a qchf option that is unused.; - [x] adjusted some qcvars in FNOCC to collect more components from cepa-like methods and to collect different perturbative triples for qcisd.; - [x] collected qcvars correctly in DFOCC for CCD and QCHF. (It was harvesting the CCD method that tipped me into the rabbit-hole that became this PR.). - [x] TODO `pytest -m quick` is still friendly to run (CI finished in reasonable time), but the additions to stdsuite have make ordinary full pytests expensive. I need to manipulate default marks so folks don't inadvertently start hours of tests. `pytest -v ../tests/pytests/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:11630,energy,energy,11630,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['energy'],['energy']
Energy Efficiency,"ation is applied in the `HF::form_H()` routine every time, which results in inaccurate EMBPOT matrices being added to the core Hamiltonian. In order to correct this in the current version of Psi4, I have removed the AO to SO transformation and call `BasisSet::compute_phi()` on an appropriately sized vector. I have also added numerical gradients over the EMBPOT potential using the gau2grid library. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The user may supply an arbitrary potential evaluated on a numerical quadrature grid to an SCF calculation by saving the x, y, z, w, and v values to a human-readable `EMBPOT` file. The first line of the `EMBPOT` file must have the number of points inside of the file. The user must also include `set perturb_h true` and `set perturb_with embpot` in the Psi4 input. The potential will then be evaluated and included in the core Hamiltonian construction, and energy and gradient calculations. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fixed the EMBPOT functionality in `HF::form_H()` by removing AO to SO transformation and supplying an appropriately sized vector to the `BasisSet::compute_phi()` call.; - [x] Added function `MintsHelper::embpot_grad()` to calculate the component of the gradient from the EMBPOT perturbation. ## Checklist; - [x] Added test `embpot1` to compare energies and gradients computed by including embedded point charges analytically, through the `external_potentials` keyword, and numerically, through the EMBPOT functionality.; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3239:1905,energy,energy,1905,https://psicode.org,https://github.com/psi4/psi4/pull/3239,1,['energy'],['energy']
Energy Efficiency,"ba64751ee6db78c8f3b#diff-684250b9cfb2a0fa201f5dc123c90964L48) diff.; - All methods now take new kwargs (python variables):; - `return_wfn` - return the methods wavefunction: `scf_e, scf_wfn = energy('SCF', return_wfn=True)`; - `ref_wfn` - what wavefunction to use as reference: `mp2_e = energy('MP2', ref_wfn=scf_wfn)`; - `molecule` - give a molecule for the calculation to be run on (mostly an internal kwarg); - The global molecule is now only touched/modifed by the input file, the user parameter `activate` and by the optimize function.; - OEProp, cubewriter, and the molden writer all need to be explicitly passed a wavefunction python-side.; - These changes will allow for extremely complex workflows. Check out [`proc.py/run_sapt`](https://github.com/dgasmith/psi4public/blob/wavefunction_pass/share/python/proc.py#L2611) for an interesting case of passing wavefunctions and molecules into primary `proc.py` functions.; - `DF` and `RI` modifiers to methods are no longer valid (e.g., `energy('RI-MP2')`). Please use the `mp2_type` option instead.; - Fixed numerous bugs/oddities and moved everything towards a more object oriented workflow. ---. A few notable issues that people may run into:; - The `psi4/lib` folder has been moved to `psi4/share` please update all `PSIDATADIR` references accordingly.; - `Process::environment.wavefunction` no longer exists. This will break any input side `psi4.wavefunction` and `psi4.set_wavefunciton` calls. Please use the `return_wfn` and `ref_wfn` kwargs on methods instead.; - A consequence of this is we broke all of the plugins! Don't worry the fix is very simple please change your C++ signature from: ; `PsiReturnType skeleton(Options& options)`; to:; `SharedWavefunction skeleton(SharedWavefunction ref_wfn, Options& options)`; Every method in Psi4 now takes a Wavefunction and Options objects, this is to make plugins consistent as well. The python-side signature is now `psi4.plugin('skeleton.so', ref_wfn)`. Options passing has not yet been ha",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246:1666,energy,energy,1666,https://psicode.org,https://github.com/psi4/psi4/pull/246,1,['energy'],['energy']
Energy Efficiency,"bject src/CMakeFiles/core.dir/core.cc.o; cd /home/work/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/src && /usr/lib64/ccache/c++ -DUSING_CheMPS2 -DUSING_dkh -Dcore_EXPORTS -I/home/work/psi4/psi4/psi4/include -I/home/work/psi4/psi4/psi4/src -isystem /home/work/psi4/psi4/objdir/stage/include -I/home/work/psi4/install/include -isystem /usr/include/python3.6m -march=native -O2 -g -DNDEBUG -fPIC -fopenmp -fvisibility=hidden -std=c++11 -std=c++11 -o CMakeFiles/core.dir/core.cc.o -c /home/work/psi4/psi4/psi4/src/core.cc; In file included from /home/work/psi4/install/include/pybind11/stl_bind.h:13,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:40,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/operators.h:78:76: warning: inline declaration of ‘pybind11::detail::op_<(pybind11::detail::op_id)0, (pybind11::detail::op_type)0, pybind11::detail::self_t, pybind11::detail::self_t> pybind11::detail::operator+(const pybind11::detail::self_t&, const pybind11::detail::self_t&)’ follows declaration with attribute ‘noinline’ [-Wattributes]; inline op_<op_##id, op_l, self_t, self_t> op(const self_t &, const self_t &) { \; ^; /home/work/psi4/install/include/pybind11/operators.h:109:1: note: in expansion of macro ‘PYBIND11_BINARY_OPERATOR’; PYBIND11_BINARY_OPERATOR(add, radd, operator+, l + r); ^~~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/work/psi4/install/include/pybind11/cast.h:15,; from /home/work/psi4/install/include/pybind11/attr.h:13,; from /home/work/psi4/install/include/pybind11/pybind11.h:36,; from /home/work/psi4/psi4/psi4/include/psi4/pybind11.h:38,; from /home/work/psi4/psi4/psi4/src/core.cc:34:; /home/work/psi4/install/include/pybind11/descr.h:116:36: note: previous definition of ‘pybind11::detail::descr pybind11::detail::operator+(pybind11::detail::descr&&, pybind11::detail::descr&&)’ was here; PYBIND11_NOINLINE descr friend operator+(descr &&d1, descr &&d2) {; ^~~~~~~~; In file included from /home/work/psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1256:1221,Watt,Wattributes,1221,https://psicode.org,https://github.com/psi4/psi4/issues/1256,1,['Watt'],['Wattributes']
Energy Efficiency,"bltinmodule.c.h:283; #35 0x7fa9b5205c1d in _PyCFunction_FastCallDict Objects/methodobject.c:234; #36 0x7fa9b529f0d9 in call_function Python/ceval.c:4837; #37 0x7fa9b52a2901 in _PyEval_EvalFrameDefault Python/ceval.c:3335; #38 0x7fa9b529ecdd in _PyEval_EvalCodeWithName Python/ceval.c:4166; #39 0x7fa9b529f30c in PyEval_EvalCodeEx Python/ceval.c:4187; #40 0x7fa9b529f35a in PyEval_EvalCode Python/ceval.c:731; #41 0x7fa9b52db3b1 in run_mod Python/pythonrun.c:1025; #42 0x7fa9b52db3b1 in PyRun_FileExFlags Python/pythonrun.c:978; #43 0x7fa9b52db516 in PyRun_SimpleFileExFlags Python/pythonrun.c:419; #44 0x7fa9b52f7b0c in run_file Modules/main.c:340; #45 0x7fa9b52f7b0c in Py_Main Modules/main.c:810; #46 0x400bbb in main Programs/python.c:69; #47 0x7fa9b422cfe9 in __libc_start_main (/lib64/libc.so.6+0x20fe9); #48 0x400c7c (/home/raimis/opt/conda/envs/psi4/bin/python3.6+0x400c7c). 0x60800007a380 is located 0 bytes to the right of 96-byte region [0x60800007a320,0x60800007a380); allocated by thread T0 here:; #0 0x7fa9b5721e10 in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_new_delete.cc:80; #1 0x7fa9944a3281 in __gnu_cxx::new_allocator<psi::cctriples::thread_data>::allocate(unsigned long, void const*) /usr/include/c++/7/ext/new_allocator.h:111; #2 0x7fa9944a2ba8 in std::allocator_traits<std::allocator<psi::cctriples::thread_data> >::allocate(std::allocator<psi::cctriples::thread_data>&, unsigned long) /usr/include/c++/7/bits/alloc_traits.h:436; #3 0x7fa9944a2892 in std::_Vector_base<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::_M_allocate(unsigned long) /usr/include/c++/7/bits/stl_vector.h:172; #4 0x7fa9944a2506 in std::_Vector_base<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::_M_create_storage(unsigned long) (/home/raimis/prj/psi4.git/linux_build/stage/lib/psi4/core.cpython-36m-x86_64-linux-gnu.so+0xcf0a506); #5 0x7fa9944a1e64 in std",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1438:6313,allocate,allocated,6313,https://psicode.org,https://github.com/psi4/psi4/pull/1438,1,['allocate'],['allocated']
Energy Efficiency,"bly Occupied:. 1A -9.811979 2A -9.811957 3A -0.686974; 4A -0.549234 5A -0.403737 6A -0.403737; 7A -0.338480 8A -0.310133 9A -0.310133. Virtual:. 10A 0.023031 11A 0.076058 12A 0.080886; 13A 0.080887 14A 0.110657 15A 0.110658; 16A 0.173580 17A 0.360176 18A 0.370157; 19A 0.370158 20A 0.455135 21A 0.455137; 22A 0.543892 23A 0.571369 24A 0.610757; 25A 0.610759 26A 0.613674 27A 0.623635; 28A 0.623637 29A 0.682101 30A 0.875957; 31A 1.031832 32A 1.031833 33A 1.292103; 34A 1.292104 35A 1.442476 36A 1.448632; 37A 1.662612 38A 1.675074 39A 1.675078; 40A 1.685189 41A 1.685192 42A 1.745843; 43A 1.745846 44A 1.748838 45A 1.953626; 46A 1.953628 47A 2.104265 48A 2.256310; 49A 2.256312 50A 2.286838 51A 2.457344; 52A 2.457345 53A 2.522627 54A 2.738613; 55A 2.803606 56A 2.803611 57A 2.896284; 58A 2.896288 59A 5.038202 60A 5.264241. Final Occupation by Irrep:; A; DOCC [ 9 ]; NA [ 9 ]; NB [ 9 ]. @DF-RKS Final Energy: -79.32647565991985. => Energetics <=. Nuclear Repulsion Energy = 42.0362430486042129; One-Electron Energy = -188.7935335064416904; Two-Electron Energy = 79.9597081286466675; DFT Exchange-Correlation Energy = -12.5288933307290371; Empirical Dispersion Energy = 0.0000000000000000; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -79.3264756599198506. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : 0.0000185 -0.0000189 -0.0000004; Dipole Y : -0.0000204 0.0000189 -0.0000015; Dipole Z : -0.0000155 0.0000189 0.0000034; Magnitude : 0.0000037. ------------------------------------------------------------------------------------. *** tstop() called on baldr at Tue Mar 2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:8563,Energy,Energy,8563,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['Energy'],['Energy']
Energy Efficiency,"buntu machine, where `multiprocessing` uses `fork` to start new processes - it just dies silently partway through starting out. . Here's the output: ; ```; $ python mp_test.py; start. Scratch directory: /tmp/; => Libint2 <=. Primary basis highest AM E, G, H: 6, 6, 3; Auxiliary basis highest AM E, G, H: 7, 7, 4; Onebody basis highest AM E, G, H: -, -, -; Solid Harmonics ordering: Gaussian. *** tstart() called on 4f210325e2d9; *** at Tue Jul 2 19:27:19 2024. => Loading Basis Set <=. Name: STO-3G; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 81 file /opt/conda/share/psi4/basis/sto-3g.gbs; atoms 2-3 entry H line 19 file /opt/conda/share/psi4/basis/sto-3g.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.065775570547 15.994914619570; H 0.000000000000 -0.759061990794 0.521953018286 1.007825032230; H 0.000000000000 0.759061990794 0.521953018286 1.007825032230. Running in c2v symmetry. Rotational constants: A = 27.26297 B = 14.51533 C = 9.47217 [cm^-1]; Rotational constants: A = 817323.21126 B = 435158.60141 C = 283968.37536 [MHz]; Nuclear repulsion = 9.168193296424349. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: STO-3G; Blend: STO-3G; Number of shells: 5; Number of basis functions: 7; Number of Cartesian functions: 7; Spherical Harmonics?: true; Max ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3189:1400,charge,charge,1400,https://psicode.org,https://github.com/psi4/psi4/issues/3189,1,['charge'],['charge']
Energy Efficiency,"c8033186fb3c68c1b96f19688a939#diff-9e8e3243e87430585c59e5a407f6bf69R654) when it was just defined up above [here](https://github.com/psi4/psi4/pull/339/commits/cfcbf085305c8033186fb3c68c1b96f19688a939#diff-9e8e3243e87430585c59e5a407f6bf69R603). Ok to delete 2nd definition as done in this PR?; - [x] minor ?: why is `bp86d1` building upon b3lyp as [here](https://github.com/psi4/psi4/pull/339/commits/cfcbf085305c8033186fb3c68c1b96f19688a939#diff-9e8e3243e87430585c59e5a407f6bf69R2114)? Ok to make it build upon bp86 as done in this PR?; ## Status; - [x] Ready to go. B3LYP3/5 test input. You'll need [this](https://raw.githubusercontent.com/drhaney/psi4/master/share/basis/6-31g_2df_p_.gbs) basis set. ```; # all non-psi4 references from http://forum.psicode.org/t/b3lyp-defect-compatibility-with-gamess-and-gaussian/193. # @jamont conditions. molecule {; 0 1; O; H 1 rOH; H 1 rOH 2 aHOH. rOH = 0.9622; aHOH = 103.84; }. set basis 6-311g(d); set scf_type pk; set e_convergence 9. e = energy('b3lyp'); compare_values(-76.4338100903, e, 7, 'b3lyp3 vs Gaussian'); compare_values(-76.4338100577, e, 7, 'b3lyp3 vs Gamess'). clean(). # @drhaney conditions. set basis 6-31G(2df,p); #set dft_spherical_points 590; #set dft_radial_points 99. e = energy('b3lyp'); compare_values(-76.4293315991, e, 5, 'b3lyp3 vs Gamess'); # GAMESS-VWNrpa_1 -76.4293 3159 91; # Psi4-VWNrpa_3 -76.4293 5426 98; # Gaussian-09 -76.4256 2566 74; # LAB psi4 -76.4293 4111 93 # large grid VWN3RPA_C VWN5RPA_C. e = energy('b3lyp5'); compare_values(-76.39221287, e, 5, 'b3lyp5 vs NWChem'); # GAMESS-VWN_5 -76.3922 0295 70; # Nchem-VWN_3 -76.3922 1287 ; # Psi4-VWN_3 -76.3922 2551 29; # LAB psi4 -76.3922 1237 09 # large grid VWN3_C VWN5_C. clean(). # @hokru conditions. molecule {; O -1.769142 -0.076181 0.000000; H -2.065745 0.837492 0.000000; H -0.809034 0.001317 0.000000; }. ### e = energy('b3lyp'); ### compare_values(-76.46290368244, e, 5, 'b3lyp3 vs Turbomole'); ### #For VWN3 (same as Gaussian) I get; ### #-76.46290368244 (Turb",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/339:2108,energy,energy,2108,https://psicode.org,https://github.com/psi4/psi4/pull/339,1,['energy'],['energy']
Energy Efficiency,"ced. All its contents should be considered experimental and subject to change.; - [x] Dipole derivatives through finite difference of dipoles added, so IR intensities available; - [x] The dummy wavefunctions returned from wrappers always had some questionable properties (e.g., single method for mixed method, largeset HF basis for cbs wavefunction) can be even less realistic (e.g., always def2-svp basis for cbs).; - [x] n-body qcvars renamed (grace period applies); ```; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE TOTAL ENERGY"": (""VALIRON-MAYER FUNCTION COUNTERPOISE TOTAL ENERGY"", 1.7), # note misspelling; ""VALIRON-MAYER FUNCTION COUTERPOISE INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY"", 1.7),; ``` ; - [x] added managed mode for scf gradient. it's not wholly effective at consolidating code, though, since only triggers for `gradient(""hf"")`, not `gradient(correlated)`. digits to compare has to be relaxed, but this has been seen with other qc programs, too.; - [x] Distributed driver should not be advertised for use with QCFractal at this time. It hasn't been tested in a while, and mem, cores, etc. setting may need tweaking in a non-continuous mode. Use it experimentally and report back.; - [x] n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:6515,ENERGY,ENERGY,6515,https://psicode.org,https://github.com/psi4/psi4/pull/2575,2,['ENERGY'],['ENERGY']
Energy Efficiency,"ch I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:3930,ENERGY,ENERGY,3930,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['ENERGY'],['ENERGY']
Energy Efficiency,"changes suggested by the modern C++ best-practices and are explained in detail in Scott Meyers' [Effective Modern C++]. . ## Why?; #### Prefer `std::make_shared` to direct use of `new`; Using `std::make_shared`:; 1. Reduces code verbosity, especially when coupled with `auto`:; ```; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); // Type information written down 3 TIMES!!!; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!!!!; ```; 2. Ensures exception safety and prevents resource leaks.; 3. Improves efficiency:; ```; // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); ; // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); ; ```. _Reference_: Item 21 in [Effective Modern C++].; #### Prefer `auto` to explicit type declarations; Using `auto` reduces and/or avoids:; 1. Verbosity in variable declarations:; ```; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type; ```; _Reference_: Items 2 and 5 in [Effective Modern C++].; #### Prefer `null",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/836:1365,reduce,reduces,1365,https://psicode.org,https://github.com/psi4/psi4/pull/836,1,['reduce'],['reduces']
Energy Efficiency,"ck with one of the basis sets that has already worked, it will run. However if I try it with one of the basis sets that did not work, it will raise the RuntimeError shown below. I have tried placing inside the loop all combinations of `psi4.core.clean()`, `psi4.core.clean_variables()`, and `psi4.core.clean_options()`, but it still does not work. I believe my installation to be fine, as I can manually restart the kernel and obtain all the basis sets required, albeit only after restarting the kernel each time. #### Version; `psi4.__version__`: '1.4a2.dev313'. ```python; --------------------------------------------------------------------; RuntimeError Traceback (most recent call last); <ipython-input-7-95f03e942086> in <module>; 9 ; 10 psi4.set_options({'reference': 'uhf','basis': basis_set}); ---> 11 e, wfn = psi4.energy('hf',return_wfn=True); 12 ; 13 print(""energy ="",e,"" and number of basis functions ="", wfn.basisset().nbf()). /usr/local/psi4/lib/psi4/driver/driver.py in energy(name, **kwargs); 568 shutil.copy(item, targetfile); 569 ; --> 570 wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); 571 ; 572 for postcallback in hooks['energy']['post']:. /usr/local/psi4/lib/psi4/driver/procrouting/proc.py in run_scf(name, **kwargs); 2180 ; 2181 ; -> 2182 scf_wfn = scf_helper(name, post_scf=False, **kwargs); 2183 returnvalue = scf_wfn.energy(); 2184 . /usr/local/psi4/lib/psi4/driver/procrouting/proc.py in scf_helper(name, post_scf, **kwargs); 1511 ); 1512 ; -> 1513 e_scf = scf_wfn.compute_energy(); 1514 for obj in [core, scf_wfn]:; 1515 for pv in [""SCF TOTAL ENERGY"", ""CURRENT ENERGY"", ""CURRENT REFERENCE ENERGY""]:. /usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py in scf_compute_energy(self); 81 self.initialize_jk(self.memory_jk_); 82 else:; ---> 83 self.initialize(); 84 ; 85 try:. /usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py in scf_initialize(self); 195 mints.set_rel_basisset(self.get_basisset('BASIS_RELA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1794:1603,energy,energy,1603,https://psicode.org,https://github.com/psi4/psi4/issues/1794,1,['energy'],['energy']
Energy Efficiency,"ckport of dftd3-running tech from qcdb. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] libdisp's -D2 made more flexible so it can use same s6/alpha6/sr6 params as Grimme's -D2. existing D2 dict defs needed filling in further; - [x] no more d2p4/d2gr. that choice now made through `energy(..., engine='dftd3|libdisp')`; - [x] _all_ dispersions served out of dashparam for dftd3/libdisp/nl. accordingly much of the metadata from EmpiricalDispersion moved to dashcoeff.; - [x] EmpiricalDispersion much reduced, sorry. On the other hand, I suspect it's now the slim unification class DGAS actually wanted, if it hadn't needed to contort around run_dftd3.; - [x] All the different combos of fctl/dash/fctl-dash/params/default-params/partial-user-params sorted out in `dashparam.from_arrays()`. This is used as the backend to everything. `qcdb.Molecule.run_dftd3()`, `psi4.core.Molecule.run_dftd3()`, `qcdb.energy('b3lyp-d3')`, `psi4.energy('b3lyp-d3')`, `EmpiricalDispersion.compute_energy()`; - [x] Use QCJson_Schema model to drive and harvest from dftd3 rather than one big function.; - [x] This passes all existing tests. However, I've devised one it doesn't pass (user-def fctl incl. disp). Working on that.; - [x] Not yet begun to trace how citations are passed around.; - [x] Yes, I need to rebase to get Jonathan's findif changes incorporated.; - [x] Bump pylibefp to 0.4 and finish its c->py transition in build paraphernalia.; - [x] current commits are rich in docstrings but actual docs need a pass. some stuff, notably DFT_DISPERSION_PARAMETERS is out of date. ## Questions; - [ ] This touches a lot of people's code. I'm fairly happy that this is a simplification and a workable design. But it's just a better starting point, and others may have new ideas and improvements. Or see holes in my logic and planning. ## Checklist; - [x] Tests added for any new features; - [x] All full tests run. ## Status; - [x] Ready for review; - [x] Ready fo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1151:1431,energy,energy,1431,https://psicode.org,https://github.com/psi4/psi4/pull/1151,1,['energy'],['energy']
Energy Efficiency,concerning http://forum.psicode.org/t/fatal-error-a-matrix-is-not-spd/1471. Decent looking results are obtained with `guess huckel` and no extra options. Instability analysis shows the SCF lands in a minimum.; For `SAP` the SCF does not land SCF in a minimum. However there are differences between `SAD+instability analysis` and `huckel` (see induction energy).; Possibly an issue with a bugged instability following (suggested by @JonathonMisiewicz ). [huckel.txt](https://github.com/psi4/psi4/files/3798367/huckel.txt); [huckel_stability.txt](https://github.com/psi4/psi4/files/3798368/huckel_stability.txt); [sap_stability.txt](https://github.com/psi4/psi4/files/3798380/sap_stability.txt); [sap.txt](https://github.com/psi4/psi4/files/3798381/sap.txt),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1747:353,energy,energy,353,https://psicode.org,https://github.com/psi4/psi4/issues/1747,1,['energy'],['energy']
Energy Efficiency,"conda binary, for an executable, and as a shared library that can be imported from Python. There was a ton of redundancy between the latter two and I consolidated them into one. Now all builds that are not making the conda binary, also produce callable Python bindings and an executable. This is simply done by packaging Psi4 up into a giant .so that we then link psi4.cc against. Because I am liable to forget here is an example of using Psi4 from python now, assuming `${CMAKE_INSTALL_PREFIX}/psi4/lib/psi4.so` is in your `PYTHONPATH`:. ``` .py; from psi4 import *; initialize(); #This has to come after initialize or else the global variables aren't right; import driver; set_global_option('BASIS', 'CC-PVDZ'); xyzstring = """"""; units angstrom; O 0.0000000000 0.0000000000 -0.0711762954; H 0.0000000000 -0.8916195680 0.5648097613; H 0.0000000000 0.8916195680 0.5648097613; """"""; efp_init(); my_mol = Molecule.create_molecule_from_string(xyzstring); my_mol.update_geometry(); driver.energy('scf',molecule=my_mol); ```. It would be nice to consolidate this somewhat, but I'll leave that for later. The segfault discussed on the forums is still present with this.; ## Fortran Name Mangling. This is a perpetual problem. The previous CMake build relied on the Fortran/C interface capabilities of CMake to generate a header. This seemed to work well, but as I understand it, it assumes that the Fortran compiler CMake is currently using is the one that compiled all Fortran libraries. Consequentially this does _NOT_ necessarily provide you with the correct mangling for externally compiled Fortran libraries. For Fortran libraries that we may are building, like ERD, DKH, etc. the name mangling should go through the CMake mangling detection mechanisms and the resulting header file included with the library. This allows other projects to link to these libraries without having to know the mangling scheme.; ## BLAS and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:8932,energy,energy,8932,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['energy'],['energy']
Energy Efficiency,"conda release: py36hf231b52_0 ; Psi4 1.2.1 ; Rev {HEAD} 406f4de . The DF-CCSD iterations with the FNOCC and DFOCC modules diverge for a repulsive, C2-symmetric methanol dimer depending on how I read the geometry (it seems).; The first CCSD energy is already completely wrong. ```; Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 28.8732411379 28.8732411379 7.9419493294 0; 1 1 1 -305.0567532225 -333.9299943603 62248.5081330950 2; 2 2 1 -392.6124818532 -87.5557286307 1852579.6071174063 3; 3 3 1 -337.1095996214 55.5028822317 1639881736.6452949047 2; ```. The conventional CCSD shows no problems (fnocc/ccenergy tested). The (assumed) dependence on the input revealed itself while making a clean input for reporting.; The SCF part does not show anything odd. Geometry is correctly recognized. Attached tgz file contains the working and faulting input/output.; [tball.tar.gz](https://github.com/psi4/psi4/files/2240627/tball.tar.gz)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1110:240,energy,energy,240,https://psicode.org,https://github.com/psi4/psi4/issues/1110,3,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"convergence 10; basis_guess True; max_force_g_convergence 1e-7; freeze_core True; }. E = energy('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z'); H = frequency('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1; --------------------------------------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:1202,ENERGY,ENERGY,1202,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['ENERGY'],['ENERGY']
Energy Efficiency,"ction object is now returnable for all psi4 methods. This Wavefunction object can be passed to other codes or directly manipulated; - Driver has been refactored into a new recursive scheme (as opposed to the previous nested scheme) to better facilitate more complex calls; - The MOLDEN writer now accepts density matrices for writing natural orbitals; - Added command-line arguments -l to specify PSIDATADIR (for developers) and -s to specify location of scratch directories (overrides PSI_SCRATCH); - Internal upgrades to the direct product decomposition library, libdpd, especially regarding density fitting; - All code improvements now go through a review process on `github.com/psi4/psi4` in addition to a continuous integration server to ensure code quality; ## New methods; - Added quadratic convergence algorithms for RHF, UHF, ROHF; - Added DF-CCSD gradients (RHF references); - Added conventional and DF RASSCF and CASSCF energies; - Added X2C scalar relativistic corrections; - Added QM/MM computations with MM point charges: energies and gradients; - Added UHF/UHF stability analysis for non-PK integrals; - Added density cumulant functional theory methods DC-12, ODC-12, and ODC-13; - Added UHF DF-MP2 gradients and DF-MP3 energies; - Added CCD treatment of dispersion in SAPT; - Added DF orbital-optimized MP2.5 energies and gradients; - Added GUESS_MIX keyword to UHF/UKS to generate broken-symmetry guesses; - Added STO-3G, 3-21G, and def2 basis sets through radon; - Added DF (O)MP2/2.5/3 energies and gradients; ## Geometry optimization; - Improved support for frozen coordinates and fixed coordinates; - Dynamic level algorithm tries increasingly robust optimization approaches for difficult systems; - Added Cartesian coordinate optimizations; - Ability to freeze selected Cartesian coordinates; - Added iterative, restricted-step method to RFO geometry optimizations; - Added delocalized internal coordinate optimizations; ## External features; - Added EFP energies added via libEF",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367:2413,charge,charges,2413,https://psicode.org,https://github.com/psi4/psi4/issues/367,1,['charge'],['charges']
Energy Efficiency,"da3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; __________________________________________________________________ test_psi4_cc __________________________________________________________________. def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule; ; h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""); ; psi4.set_options({""basis"": '6-31G**'}); ; > psi4.optimize('ccsd'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:63: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:1050: in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:697: in gradient; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:752: in select_ccsd; return func(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2953: in run_detci; ref_wfn = scf_helper(name, **kwargs) # C1 certified; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4a59eb8>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds th",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:28942,energy,energy,28942,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"dded QM/MM computations with MM point charges: energies and gradients; - Added UHF/UHF stability analysis for non-PK integrals; - Added density cumulant functional theory methods DC-12, ODC-12, and ODC-13; - Added UHF DF-MP2 gradients and DF-MP3 energies; - Added CCD treatment of dispersion in SAPT; - Added DF orbital-optimized MP2.5 energies and gradients; - Added GUESS_MIX keyword to UHF/UKS to generate broken-symmetry guesses; - Added STO-3G, 3-21G, and def2 basis sets through radon; - Added DF (O)MP2/2.5/3 energies and gradients; ## Geometry optimization; - Improved support for frozen coordinates and fixed coordinates; - Dynamic level algorithm tries increasingly robust optimization approaches for difficult systems; - Added Cartesian coordinate optimizations; - Ability to freeze selected Cartesian coordinates; - Added iterative, restricted-step method to RFO geometry optimizations; - Added delocalized internal coordinate optimizations; ## External features; - Added EFP energies added via libEFP; - Added PCM implicit solvent added for SCF; - Added interface to DMRG-CI and DMRG-SCF code in CheMPS2; - Added code to do potential energy scans via the WebMO interface; ## Performance optimization; - Sped up integrals computation by optimizing lib mints layer; - The PK JK builder has received significant performance improvements; - SAD guess has been improved dramatically, now default for all RHF computations; ## Bug fixes; - Various bug fixes and improvements to optimizer and IRC code; - Fixed a bug with DF-K in systems with only one occupied orbital; - Fixed an integer overflow bug in DF-CCSD(T); - Fixed modules that crashed when not finding full integral files available (because DF-HF was run instead of conventional HF); - Fixed problem with double hybrid DFT total energies not being printed; - Fixed crash caused by changing number of MO's during optimization (changes in number of MO's dropped due to linear dependencies); - Innumerable additional bug fixes and tweaks",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367:3522,energy,energy,3522,https://psicode.org,https://github.com/psi4/psi4/issues/367,1,['energy'],['energy']
Energy Efficiency,"ddress)` |. - [x] Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - [x] A Logging file has been introduced. All its contents should be considered experimental and subject to change.; - [x] Dipole derivatives through finite difference of dipoles added, so IR intensities available; - [x] The dummy wavefunctions returned from wrappers always had some questionable properties (e.g., single method for mixed method, largeset HF basis for cbs wavefunction) can be even less realistic (e.g., always def2-svp basis for cbs).; - [x] n-body qcvars renamed (grace period applies); ```; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE TOTAL ENERGY"": (""VALIRON-MAYER FUNCTION COUNTERPOISE TOTAL ENERGY"", 1.7), # note misspelling; ""VALIRON-MAYER FUNCTION COUTERPOISE INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY"", 1.7),; ``` ; - [x] added managed mode for scf gradient. it's not wholly effective at consolidating code, though, since only triggers for `gradient(""hf"")`, not `gradient(correlated)`. digits to compare has to be relaxed, but this has been seen with other qc programs",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:6135,ENERGY,ENERGY,6135,https://psicode.org,https://github.com/psi4/psi4/pull/2575,2,['ENERGY'],['ENERGY']
Energy Efficiency,"e 21 file /home/filip/software/psi4-1.4rc/share/psi4/basis/3-21g.gbs . ---------------------------------------------------------; SCF Castup computation ; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 976 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; Gh(LI) 0.000000000000 0.000000000000 -1.000000000000 7.016003436600; H 0.000000000000 0.000000000000 1.000000000000 1.007825032230. Running in c1 symmetry. Rotational constants: A = ************ B = 2.10095 C = 2.10095 [cm^-1]; Rotational constants: A = ************ B = 62984.77227 C = 62984.77227 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 3-21G; Blend: 3-21G; Number of shells: 7; Number of basis function: 11; Number of Cartesian functions: 11; Spherical Harmonics?: false; Max angular momentum: 1. => Loading Basis Set <=. Name: (3-21G AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1 entry LI line 59 file /home/filip/software/psi4-1.4rc/share/psi4/basis/def2-svp-jkfit.gbs ; atoms 2 entry H line 23 file /home/filip/software/psi4-1.4rc/share/psi4/basis/def2-svp-jkfit.gbs . ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 11 11 0 0 0 0; -------------------------------------------------------; Total 11 11 1 0 0 1;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:1913,Charge,Charge,1913,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Charge'],['Charge']
Energy Efficiency,"e bug is there with both methods, and also CCSD. I haven't checked other DF methods. ```; #! DF-MP2 cc-pVDZ energy for the H2O molecule. molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776 ; }. set {; basis cc-pvdz; df_basis_scf cc-pvdz-jkfit; df_basis_cc cc-pvdz-ri; scf_type df; guess sad ; freeze_core true; cc_type df; qc_module occ ; }. frequencies('mp2', dertype=0); ```; The crash gives the following error message:; ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1774, in frequency; H, wfn = hessian(lowername, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1595, in hessian; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1608, in run_dfocc; ""RIFIT"", core.get_global_option(""BASIS"")); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py"", line 99, in pybuild_basis; psibasis = core.BasisSet.construct_from_pydict(mol, basisdict, puream). RuntimeError: ; Fatal Error: CoordEntry::basisset: Basisset not set for O and type of DF_BASIS_CC; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 134; ```; My own investigations have partially uncovered the",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1093:1281,energy,energy,1281,https://psicode.org,https://github.com/psi4/psi4/issues/1093,1,['energy'],['energy']
Energy Efficiency,"e issue presented in https://github.com/psi4/psi4/issues/2760 disappears. Additionally, with these changes, the PK option produces the same answer as the DIRECT algorithm for the system in question (the H atom):. ```; (p4dev) dpoole34@ds6:~$ cat minimal_example.py ; import psi4; import argparse. parser = argparse.ArgumentParser(); parser.add_argument('--num_threads', type=int, default=1); parser.add_argument('--scf_type', type=str, default='DF'); parser.add_argument('--element', type=int, default=1); parser.add_argument('--multiplicity', type=int, default=2); args = parser.parse_args(). psi4.core.be_quiet() # Silence output for clarity.; psi4.set_num_threads(args.num_threads, quiet=True); psi4.set_options({; 'REFERENCE': 'UHF',; 'SCF_TYPE': args.scf_type,; }). for i in range(10):; energy = psi4.energy(; 'pbe0/sto-3g',; molecule=psi4.core.Molecule.from_arrays(; geom=[0, 0, 0],; elez=[args.element],; molecular_charge=0,; molecular_multiplicity=args.multiplicity)); print(energy); (p4dev) dpoole34@ds6:~$ python3 minimal_example.py --num_threads 6 --scf_type PK --element 1 --multiplicity 2; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; (p4dev) dpoole34@ds6:~$ python3 minimal_example.py --num_threads 6 --scf_type DIRECT --element 1 --multiplicity 2; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; ```; ## User API & Changelog headlines. ## Dev notes & details; - [x] Fix bug present within PK calculations executed on small systems with small basis sets, wherein random energies would result from the calculation. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_plan",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2763:2082,energy,energy,2082,https://psicode.org,https://github.com/psi4/psi4/pull/2763,1,['energy'],['energy']
Energy Efficiency,"e orientations. It's not corruption associated; # with wavefunction pass, as I've tested an older version. It's not a local ; # minimum as the total gradient wouldn't be so large. It's not too distorted a ; # starting structure, as q-chem and molpro converge to the real minimum promptly. It's not; # symmetry constrained, as it's c1. I'm at a loss. # for oddz; # start; # 25.7790013416; # -139.174980786; # 0.0581560524872; # Optimizer: Optimization complete!; # opt; # 33.8382916197; # -139.301327453; # 0.0422103431176; #gradient = [; # [ -0.01135649578523, -0.02871892445843, -0.05475995417434],; # [ 0.00216387360216, 0.04113784938512, 0.07821983299617],; # [ 0.00215642675781, 0.04114952366672, 0.07824201651882],; # [ 0.00563414370780, -0.03413386327141, -0.06481576207381],; # [ 0.00140205171291, -0.01943458532669, -0.03688613326736]]. # --------------------------------------------------------------------------------------------------------------- ~; # Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; # --------------------------------------------------------------------------------------------------------------- ~; # 1 -139.174980785934 -139.174980785934 0.08977532 0.06906505 0.39164409 0.25000003 ~; # 2 -139.237253751032 -0.062272965098 0.08963832 0.05551392 0.44053120 0.25000000 ~; # 3 -139.282037341604 -0.044783590572 0.06072927 0.03180855 0.57480436 0.30215430 ~; # 4 -139.291415380240 -0.009378038636 0.07020602 0.04747338 0.40870734 0.23074492 ~; # 5 -139.289103767764 0.002311612476 0.06272061 0.03636254 0.31265835 0.16807142 ~; # 6 -139.299937489944 -0.010833722180 0.02206926 0.01444069 0.08604223 0.05017704 ~; # 7 -139.301130513523 -0.001193023579 0.00601199 0.00414213 0.03851787 0.02297290 ~; # 8 -139.301272108227 -0.000141594704 0.00392137 0.00273882 0.01100483 0.00820114 ~; # 9 -139.301322123849 -0.000050015621 0.00099031 0.00070170 0.00667642 0.00454418 ~; # 10 -139.301327446273 -0.000005322424 0.00004217 0.00002303 0.00027466 0.00017580 ~; #",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:7840,Energy,Energy,7840,https://psicode.org,https://github.com/psi4/psi4/issues/310,1,['Energy'],['Energy']
Energy Efficiency,"e the definition of each basis set. The basis sets specified; # using either basis <opt_name> {...} are utilized first (in the order specified; # in the input file). Any remaining basis sets required are extracted from the built-in library,; # if they exist, or an error message is printed.; psi4.basis_helper(""""""; #; # We start by assigning basis sets to atoms. These commands can go anywhere in the basis block; #; # First, assign DZ to all atoms; assign DZ; # Now, assign 3-21G to all carbon atoms; assign C my3-21G; # The two atoms labelled H1 get a STO-3G basis two; assign H1 sto-3g; # Carbons 3 and 5 get a STO-3G basis, too; assign C1 sto-3g; # With all these in place, the symmetry is lowered to C2v automatically; # The commands are applied in order i.e., adding a line like; # assign cc-pvtz; # here would override all of the above and assign cc-pvtz to all atoms. #; # Now we define the basis sets. N.B. Indentation does not matter; it just looks prettier.; #; [my3-21G] #This is really the standard 3-21G basis, but with a different name; cartesian; ****; H 0; S 2 1.00; 5.4471780 0.1562850; 0.8245470 0.9046910; S 1 1.00; 0.1831920 1.0000000; ****; C 0; S 3 1.00; 172.2560000 0.0617669; 25.9109000 0.3587940; 5.5333500 0.7007130; SP 2 1.00; 3.6649800 -0.3958970 0.2364600; 0.7705450 1.2158400 0.8606190; SP 1 1.00; 0.1958570 1.0000000 1.0000000; ****; [DZ]; spherical; ****; H 0 ; S 3 1.00; 19.2406000 0.0328280 ; 2.8992000 0.2312080 ; 0.6534000 0.8172380 ; S 1 1.00; 0.1776000 1.0000000 ; ****; """"""). psi4.set_options({; 'd_convergence': 11,; 'e_convergence': 11,; 'scf_type': 'pk'}); ; bz.update_geometry(); bz.print_out(); psi4.compare_strings(""c2v"", bz.schoenflies_symbol(), ""Point group"") #TEST; psi4.compare_values(refnuc, bz.nuclear_repulsion_energy(), 10, ""Nuclear repulsion energy"") #TEST; ```. ## Questions; - [ ] I've no immediate thoughts of merging this. Just wanted it to be available to others and off my computer. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1178:3867,energy,energy,3867,https://psicode.org,https://github.com/psi4/psi4/pull/1178,1,['energy'],['energy']
Energy Efficiency,"e). That is, `-d3` is still an alias to `-d3zero` which is now an alias to a new extension `-d3zero2b`, which can now be given explicitly disallow 3-body as a tweakable parameter (internally, `s9:=0.0`). When `s-dftd3` is the engine, another set of new extensions, e.g., `-d3atm` alias of `-d3zeroatm` turns on 3-body (`s9=1.0`) and allows user tweaks. This latter is the same behavior as -D4, which turns on 3-body by default. If this seems confusing, state what calc you want — e.g., `energy(""b3lyp-d3atm"")` — and Psi4 will figure out if you have the right engine to do the job.; - [x] Previous to QCEngine v0.26.0 (required by this Psi4 PR), the pairwise dispersion analysis returned by executable/classic/psi4-channel `dftd3` was scaled differently from that by `s-dftd3` and `dftd4` (any channel). This has been fixed. However, one must be consistent about QCEngine/Psi4/fsapt.py versions. A consistent set are QCEngine >=0.26.0 and `Empirical_Disp.dat` file generated in the course of `energy(""fisapt0-d"")` by this PR or later Psi4 (approx. v1.7.0 Psi4) and script `fsapt.py` released with Psi4 v1.7.0 or later. This is semi-enforced since v1.7 requires v0.26 (`fsapt.py` is a free agent). Another consistent set is QCEngine <0.26.0 and Psi4 and `fsapt.py` <v1.7. Mixing old Psi4 or fsapt.py with new QCEngine and classic dftd3 can yield wrong fisapt analysis, and this isn't trapped.; - [x] `psi4.core.Molecule.run_dftd3` and `qcdb.Molecule.run_dftd3` don't work with `s-dftd3`. Please file an issue if you really want this capability. `run_gcp` will use classic `gcp` or `mctc-gcp` interchangeably, whichever you have available. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] first look at `_engine_can_do` and observe that compared to good ol' dftd3, s-dftd3 (aka simple-dftd3) _can't_ do d2 and by",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2791:2347,energy,energy,2347,https://psicode.org,https://github.com/psi4/psi4/pull/2791,1,['energy'],['energy']
Energy Efficiency,"e, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01845040 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. -------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:4121,ENERGY,ENERGY,4121,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['ENERGY'],['ENERGY']
Energy Efficiency,e-02 1.10466e-03 ADIIS/DIIS; @DF-RKS iter 4: -43.39730753466733 -9.96916e-03 3.77682e-04 ADIIS/DIIS; @DF-RKS iter 5: -43.39937943728395 -2.07190e-03 2.05445e-04 ADIIS/DIIS; @DF-RKS iter 6: -43.40044782166130 -1.06838e-03 1.11750e-04 ADIIS/DIIS; @DF-RKS iter 7: -43.40150886235944 -1.06104e-03 1.08271e-04 ADIIS/DIIS; @DF-RKS iter 8: -43.40259319327883 -1.08433e-03 1.03266e-04 ADIIS/DIIS; @DF-RKS iter 9: -43.40562867052822 -3.03548e-03 8.61300e-05 DIIS; @DF-RKS iter 10: -43.40705815490672 -1.42948e-03 4.81672e-05 DIIS; @DF-RKS iter 11: -43.40726807149662 -2.09917e-04 3.05961e-05 DIIS; @DF-RKS iter 12: -43.40746692997944 -1.98858e-04 1.72184e-05 DIIS; @DF-RKS iter 13: -43.40747472236222 -7.79238e-06 6.59771e-06 DIIS; @DF-RKS iter 14: -43.40748116314034 -6.44078e-06 3.82428e-06 DIIS; @DF-RKS iter 15: -43.40748185746369 -6.94323e-07 1.86119e-06 DIIS; @DF-RKS iter 16: -43.40748201260618 -1.55142e-07 1.54127e-06 DIIS; @DF-RKS iter 17: -43.40748214051649 -1.27910e-07 7.09491e-07 DIIS; Energy and wave function converged. ==> Post-Iterations <==. Electrons on quadrature grid:; Ntotal = 32.0000039846 ; deviation = 3.985e-06 . Orbital Energies [Eh]; ---------------------. Doubly Occupied: . 1A -1.094498 2A -1.062498 3A -1.041834 ; 4A -1.016695 5A -0.963137 6A -0.898331 ; 7A -0.834072 8A -0.703197 9A -0.700832 ; 10A -0.661618 11A -0.660116 12A -0.605235 ; 13A -0.596357 14A -0.526703 15A -0.507419 ; 16A -0.419207 . Virtual: . 17A -0.218606 18A -0.112811 19A -0.091525 ; 20A 0.037195 21A 0.048637 22A 0.051338 ; 23A 0.054059 24A 0.105612 25A 0.106004 ; 26A 0.174431 27A 0.193680 28A 0.196900 ; 29A 0.211551 30A 0.216394 31A 0.278756 ; 32A 0.285132 33A 0.285433 34A 0.307461 ; 35A 0.324830 36A 0.340649 37A 0.340734 ; 38A 0.350696 39A 0.410719 40A 0.411116 ; 41A 0.412113 42A 0.412296 43A 0.475230 ; 44A 0.475508 45A 0.504350 46A 0.504767 ; 47A 0.605740 48A 0.607010 49A 0.653648 ; 50A 0.665432 51A 0.712798 52A 0.728207 ; 53A 0.728722 54A 0.731604 55A 0.750409 ; 56A 0.785076 57A 0.814891 58A ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:11879,Energy,Energy,11879,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"e-06 ; 3 -75.7907190240 -1.60e-05 4.26e-04 1.69e-03 5.72e-07 ; 4 -75.7907244154 -5.39e-06 2.25e-04 1.39e-03 2.96e-07 ; 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; Alpha-Alpha Contribution (a.u.) : -0.02415964277065; Alpha-Beta Contribution (a.u.) : -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509:2299,Energy,Energy,2299,https://psicode.org,https://github.com/psi4/psi4/issues/1509,1,['Energy'],['Energy']
Energy Efficiency,"e. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Turning off gnu C++ extensions. This means that `-std=gnu++11` will never get passed, even if CMake can detect that your compiler supports it. Instead will get a `-std=c++11` from pybind11 and possibly another `-std=c++11` if cmake detects that your compiler supports.; - [x] Put docs in order wrt threading; - [x] Make `psi4/__init__.py` pay attention to `PSI_SCRATCH`. Otherwise scratch is non-adjustible in PsiAPI mode.; - [x] Default to serial execution in `psi4/__init__.py`. Can be overruled in Psithon mode through `-nN` or `set_num_threads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to the",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:1053,adapt,adapted,1053,https://psicode.org,https://github.com/psi4/psi4/pull/627,1,['adapt'],['adapted']
Energy Efficiency,"ear developers,. I am currently running SA-CASSCF calculations on the formaldimine molecule. I am particularly interested by the determinant decomposition of the ground and first excited state of the molecule (singlet symmetry). However, I think I have noticed a pb concerning the sign of the determinants in the output. First, I give you my INPUT in python : . pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; variables = pes_origin[:] + [90, 90]; psi4.geometry(; """"""; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables) ); ; psi4.set_options({ 'basis': 'cc-pvdz',; 'DETCI_FREEZE_CORE' : False,; 'reference': 'RHF',; 'num_roots': 2,; 'frozen_docc':[0],; 'restricted_docc': [6],; 'active': [3],; 'restricted_uocc': [11], ; 'frozen_uocc': [23],; 'mcscf_maxiter': 1000, ; 'avg_states' : [ 0, 1],; 'avg_weights' : [ 0.5, 0.5 ]; }); ; sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY') . Then, I give you from the OUTPUT FILE the decomposition I obtain : . *******************************************************************; *******************************************************************; ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -93.931448649953467. Active Space Natural occupation numbers:. A 2.000000 A 1.000000 A 1.000000. The 9 most important determinants:. * 1 0.691216 ( 0, 1) 7AX 8AA 9AB ; * 2 0.691216 ( 1, 0) 7AX 8AB 9AA ; * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX ; * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX ; * 5 0.000000 ( 0, 0) 7AX 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.29114",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008:1000,ENERGY,ENERGY,1000,https://psicode.org,https://github.com/psi4/psi4/issues/2008,1,['ENERGY'],['ENERGY']
Energy Efficiency,"eavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00134025 xtpl_highest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ----------------------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:3571,ENERGY,ENERGY,3571,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['ENERGY'],['ENERGY']
Energy Efficiency,"ecule {; H; H 1 0.60; }. set basis cc-pVDZ; set docc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; # STO-3G active space; set active [1, 0, 0, 0, 0, 1, 0, 0 ]; energy('casscf'); ```; fails with the up-to-date master branch with the error message; ```; Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 387, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 519, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 5483, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 153, in mcscf_solver; nci_iter = ciwfn.diag_h(abs(ediff) * 1.e-2, orb_grad_rms * 1.e-3). RuntimeError: ; Fatal Error: DSYEV diagonalizer failed in DETCI SEM!; Error occurred in file: /home/work/psi4/psi4/src/psi4/detci/sem.cc on line: 561; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; """"""); core.IO.set_default_namespace(""""); core.set_global_option(""BASIS"", ""cc-pVDZ""); core.set_global_option(""DOCC"", [ 1, 0, 0, 0, 0, 0, 0, 0 ]); core.set_global_option(""ACTIVE"", [1, 0, 0, 0, 0, 1, 0, 0 ]); --> energy('casscf'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: DSYEV diagonalizer failed in DETCI SEM! !; ! Error occurred in file: /home/work/psi4/psi4/src/psi4/detci/sem.cc on line: 561 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! !; !----------------------------------------------------------------------------------!. ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3096:1488,energy,energy,1488,https://psicode.org,https://github.com/psi4/psi4/issues/3096,1,['energy'],['energy']
Energy Efficiency,"ed here, and for generating the third-order induction amplitudes that are reused here. However, unlike most of the stuff in `libsapt_solver`, the code is AO-based and the two-electron integrals enter only via generalized J/K matrices. Therefore, I had to export some additional AO quantities in `libsapt_solver/sapt.h` and I don't know if I did this in an optimal way.; - [x] Note to self: frozen core still needs to be checked. ## Design (Big-Picture) Questions - input from @CDSherrill @dgasmith @loriab and others will be highly beneficial!; - [ ] The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require `energy('sapt(dft)')` and the last one `energy('sapt2+3')`. That's quite unfortunate and we need a better workflow, possibly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of `energy('sapt0')`.; - [ ] What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?; - [ ] Finally, the option names such as `do_ind30_exch_sinf` are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. **Nonapproximated**, **Nonexpanded**, and **beyond-S^2** are all formally more correct names than S^infinity. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2314:2125,energy,energy,2125,https://psicode.org,https://github.com/psi4/psi4/pull/2314,2,"['energy', 'power']","['energy', 'power']"
Energy Efficiency,"ed: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0.013096; 4A 0.031501 5A 0.060513 6A 0.060513; 7A 0.069525 8A 0.095086 9A 0.095086; 10A 0.137869 11A 0.165536 12A 0.208043; 13A 0.433342 14A 0.433342 15A 0.441856; 16A 0.441856 17A 0.448174 18A 0.472941; 19A 1.496359 20A 1.532476 21A 2.670316; 22A 2.670316 23A 2.674872 24A 2.674872; 25A 2.681167 26A 2.694559. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @UHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594355422; Two-Electron Energy = 1.0674974882236108; Total Energy = -4.3332496681624875. ```; **output ROHF**; ```; ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. Singly Occupied:. 1A -1.100095 2A -1.099427 3A -0.089533; 4A -0.038589. Virtual:. 5A 0.029531 6A 0.035908 7A 0.035908; 8A 0.073244 9A 0.073244 10A 0.106854; 11A 0.112697 12A 0.153001 13A 0.409470; 14A 0.409470 15A 0.418444 16A 0.418444; 17A 0.422709 18A 0.447857 19A 1.338927; 20A 1.377853 21A 2.585893 22A 2.585893; 23A 2.590572 24A 2.590572 25A 2.596665; 26A 2.610180. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @ROHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594321973; Two-Electron Energy = 1.0674974882202668; Total Energy = -4.3332496681624875; ```. EDIT: there was a typo in SAPT0(ROHF) E20exch-ind comparision, current input is correct to reproduce it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1975:3138,Energy,Energy,3138,https://psicode.org,https://github.com/psi4/psi4/issues/1975,8,['Energy'],['Energy']
Energy Efficiency,"ed: 6.000000000E+00; @S Expected: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0.013096; 4A 0.031501 5A 0.060513 6A 0.060513; 7A 0.069525 8A 0.095086 9A 0.095086; 10A 0.137869 11A 0.165536 12A 0.208043; 13A 0.433342 14A 0.433342 15A 0.441856; 16A 0.441856 17A 0.448174 18A 0.472941; 19A 1.496359 20A 1.532476 21A 2.670316; 22A 2.670316 23A 2.674872 24A 2.674872; 25A 2.681167 26A 2.694559. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @UHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594355422; Two-Electron Energy = 1.0674974882236108; Total Energy = -4.3332496681624875. ```; **output ROHF**; ```; ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. Singly Occupied:. 1A -1.100095 2A -1.099427 3A -0.089533; 4A -0.038589. Virtual:. 5A 0.029531 6A 0.035908 7A 0.035908; 8A 0.073244 9A 0.073244 10A 0.106854; 11A 0.112697 12A 0.153001 13A 0.409470; 14A 0.409470 15A 0.418444 16A 0.418444; 17A 0.422709 18A 0.447857 19A 1.338927; 20A 1.377853 21A 2.585893 22A 2.585893; 23A 2.590572 24A 2.590572 25A 2.596665; 26A 2.610180. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @ROHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594321973; Two-Electron Energy = 1.0674974882202668; Total Energy = -4.3332496681624875; ```. EDIT: there was a typo in SAPT0(ROHF) E20exch-ind comparision, current inp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1975:3096,Energy,Energy,3096,https://psicode.org,https://github.com/psi4/psi4/issues/1975,1,['Energy'],['Energy']
Energy Efficiency,"eference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). ecp = {}. for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). cf = psi4.geometry(cf_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; psi4.core.clean(); ```. The error message I got is:. ```; Traceback (most recent call last):; File ""/home/sanctus/psi4conda/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 46, in <module>; File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5424, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1437, in scf_wavefunction_factory; wfn = core.ROHF(ref_wfn, superfunc). RuntimeError:; Fatal Error: Input DOCC array ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181:1199,ENERGY,ENERGY,1199,https://psicode.org,https://github.com/psi4/psi4/issues/3181,1,['ENERGY'],['ENERGY']
Energy Efficiency,"ema(conformer=0); psi4.set_num_threads(4); psi4.set_memory(5e+9). xtb_opt = xtb_ff_opt(qc_mol=qc_mol); opt_molecule = Molecule.from_qcschema(xtb_opt); conformer_Ang = opt_molecule.conformers[0].to(unit.angstrom).m. #Generate Grid to calculate properties to; grid = generate_grid(molecule = molecule, ; conformer= opt_molecule.conformers[0].to(unit.bohr), ; grid_settings=grid_settings); grid = grid.to(unit.angstrom).m; numpy.savetxt(""grid.dat"", grid, delimiter="" "", fmt=""%16.10f""). psi4.set_options({""ddx"": ""true"",; ""DDX_SOLVENT_EPSILON"": 70.84,; ""DDX_RADII_SET"": ""uff"",; ""DDX_MODEL"": ""PCM""}). conformer_Ang_string = ""nocom\nnoreorient\n""; for index, atom in enumerate(opt_molecule.atoms):; conformer_Ang_string += f""{SYMBOLS[atom.atomic_number]}\t{conformer_Ang[index, 0]}\t{conformer_Ang[index, 1]}\t{conformer_Ang[index, 2]}\n"". molecule_psi4 = psi4.geometry(conformer_Ang_string.strip()); print(molecule_psi4); molecule_psi4.set_units(GeometryUnits.Angstrom). E, wfn = psi4.energy('PBE0-D3BJ/def2-TZVPPD', molecule = molecule_psi4, return_wfn = True); psi4.oeprop(wfn,""GRID_ESP"",""GRID_FIELD"",""MULLIKEN_CHARGES"", ""LOWDIN_CHARGES"", ""DIPOLE"",""QUADRUPOLE"", ""MBIS_CHARGES""); print( wfn.variable(""MULLIKEN_CHARGES"")); log_memory_usage(); #very basic error handling; except Exception as e:; continue. if __name__ == ""__main__"":; main(); ```. For the minimal example above, memory usage slowly rises too (I have checked the QCEngine tools and this is not occurring here):. ```; Memory Usage: 484.4296875 MB; Memory Usage: 632.46875 MB; Memory Usage: 634.3203125 MB; Memory Usage: 635.75390625 MB; Memory Usage: 636.6015625 MB; Memory Usage: 676.36328125 MB; Memory Usage: 676.7109375 MB; Memory Usage: 676.7421875 MB; Memory Usage: 676.77734375 MB; Memory Usage: 676.8046875 MB; Memory Usage: 676.890625 MB; Memory Usage: 676.921875 MB; Memory Usage: 676.98828125 MB; Memory Usage: 677.015625 MB; Memory Usage: 677.03125 MB; ```. Apologies for the long post but I wanted to add as much info as possible!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3146:8309,energy,energy,8309,https://psicode.org,https://github.com/psi4/psi4/issues/3146,1,['energy'],['energy']
Energy Efficiency,"en a while that I looked into this. I managed to write post-SCF natural orbitals to a molden file, but there is still a problem with documentation (http://www.psicode.org/psi4manual/1.2/molden.html):. This is a fully working example:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }; set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); nmopi = wfn.nmopi(); Da_so = wfn.Da(); Ca_inv = core.Matrix(""CA inv"", nmopi, nmopi); Ca_inv.copy(wfn.Ca()); Ca_inv.general_invert(); Da_mo = Matrix.triplet(Ca_inv, Da_so, Ca_inv, False, False, True); # Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False) # line from documentation; molden(wfn, 'ccsd_no.molden', density_a=Da_mo); ```. Loading this into Molden gives normals results:. ```. COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ```. When following the documentation, I got:. ```; COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -94.4305; H -12.0740; H -12.0736; ; Sum of Mulliken Charges: ********; ```. (FYI: my actual intention is not to visualize in Molden, but this is just an easy check.). Besides the documentation, there are some additional minor issues. I'll make a list here:. - [ ] Fix docs.; - [ ] When running the input for a second time, the new output is appended to the existing molden file, which is never useful.; - [ ] The current approach is not the most efficient, nor convenient: the user first has to compute a pseudo-inverse and then in the `molden` function a matrix is diagonalized. This can be done in one step by performing a generalized eigenvalue decomposition. This could happen inside the `molden` functio",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1485:1029,Charge,Charges,1029,https://psicode.org,https://github.com/psi4/psi4/issues/1485,1,['Charge'],['Charges']
Energy Efficiency,"en using H+ as the compound in a SAPT calculation it crashes with a divide by zero error:. ```; File ""/var/spool/slurm/d/job333055/slurm_script"", line 21, in <module>; myener = psi4.energy(""sapt2+(ccd)dmp2""); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/driver.py"", line 525, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 4581, in run_sapt; monomerA_wfn = scf_helper('RHF', molecule=monomerA, **kwargs); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1887, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 99, in scf_compute_energy; scf_energy = self.finalize_energy(); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 692, in scf_finalize_energy; self.print_energies(); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 804, in scf_print_energies; self.set_variable(""HF VIRIAL RATIO"", - potential / ke) # P::e SCF; ZeroDivisionError: float division by zero; ```. The script to reproduce this is below. ```; #!/usr/bin/env python3; import os; import numpy as np; import psi4 as psi4; psi4.core.set_num_threads(4); psi4.set_options({""cachelevel"": 1, ""print"": 1}); psi4.set_memory(12000000000); psi4_io = psi4.core.IOManager.shared_object(); psi4.core.set_output_file('hcl-sapt.log', False); geometry= """"""; 1 1; H -0.0 0.0 -1.36; --; -1 1; Cl 0.0 0.0 1; """"""; geom = psi4.geometry(geometry); psi4.basis_helper(""""""; assign aug-cc-pvtz; """"""); myener = psi4.energy(""sapt2+(ccd)dmp2""); for ener in [ 'SAPT ELST ENERGY', 'SAPT EXCH ENERGY', 'SAPT IND ENERGY', 'SAPT DISP ENERGY', 'SAPT TOTAL ENERGY' ]:; print(""%s %g"" % ( ener, psi4.variable(ener) )); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3156:1807,energy,energy,1807,https://psicode.org,https://github.com/psi4/psi4/issues/3156,6,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"end = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; __________________________________________________________________ test_simint ___________________________________________________________________. @using_simint; def test_simint():; """"""simint/scf5""""""; ; psi4.set_options({'integral_package': 'simint'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:625: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4b93fc0>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISP",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:11624,energy,energy,11624,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"ent but experimental (require `set qc_module occ`) until further optimized); - [x] uhf cd-ccd E; - [x] uhf cd-ccsd E; - [x] uhf cd-ccsd(t) E (present but experimental (require `set qc_module occ`) until further optimized); - [x] uhf cd a-ccsd(t) E (present but experimental (require `set qc_module occ`) until further optimized). ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] pick over canonical methods and run some basic timings tests; - [x] TODO: kill `new` pass; - [x] TODO: there might be UHF CCD in there, too.; - [x] TODO: merge #2731 first. it has a lot of stdsuite changes that I don't want to rebase through. nevertheless, stdsuite on the new methods is working fine locally. the azure errors are that uhf cc methods are running rather than throwing NYI as it expects.; - [x] TODO: df ccsd(t) gradients need to be marked experimental and semi-hidden until optimization. REVISED 25 Oct; ```; Module comparison timings [s] for CCSD & CCSD(T) energy & gradient; * Benzene, C6H6; * Either aug-cc-pVDZ (192 nbf) or cc-pVDZ (119 nbf); all-electron; * Same singlet system run as RHF & UHF; * CC converged to 1e-7; * 20 GiB, 8 threads. GRADIENT ENERGY; symm c1 symm c1; ---- ---- ---- ----; <<< CCSD/aug-cc-pVDZ >>>. cfour (vcc) rhf conv 132 1650 52 1202 ; ccenergy rhf conv 266 2037 92 1099; dfocc rhf df n/a 420 n/a 230; fnocc rhf df n/a 149. cfour uhf conv 225 3473 90 2413 ; ccenergy uhf conv 463 5196 222 2576; dfocc uhf df n/a 1545 n/a 826. cfour u/r ratio 1.7 2.1 1.7 2.0 ; ccenergy u/r ratio 1.7 2.5 2.4 2.3; dfocc u/r ratio n/a 3.7 n/a 3.6; ```. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2739:1813,energy,energy,1813,https://psicode.org,https://github.com/psi4/psi4/pull/2739,2,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"ent vec, rotation mat, and atom map to get best Kabsch overlap (@dsirianni code) between two molecules. Uses Hungarian algorithm+ for atom shuffling. In that case, required `hungarian` and `networkx` add'l packages. Handles shuffled atoms up to at least benzene trimer and more if haven't too many symmetry-equivalent atoms. Really good for perfect matches, fine but untuned for imperfect matches. Also provides functions that use that return set to properly manipulate list, vec, mol, grad, hess (hess untested). Upon request, also tests mirror-image alignment.; - Remove everything beyond constructing the Cartesian Hessian from findif, including VIBRATION class; - Remove the c-side thermo module ; - Adds extensive vib test on HOOH-TS, CO2, ethene, H2CO, methane that checks freqs _and_ normco of each mol vs. Cfour output for following conditions; - Cfour Hessian (tests harmonic analysis machinery); - Psi freq by grad; - Psi freq by energy; - Psi freq by analytic ~(only methane and ammonia pass)~ All pass now, thanks to @andysim ; - [x] fix the embarrassing bug (I'll do you a coding favor if you spot it, but I'm not admitting it otherwise); - [x] better handle non-stationary. probably need an option to force-rot-space-inclusion but by default, `frequency()` does a gradient to determine if rotational projection is safe, then another flag to query external field and company to see if even translational projection is appropriate. ; - [x] more testing of isotopic, partial, non-stationary, etc., particularly wrt normco not just freq; - Add `compare_dicts` and `compare_molrecs` comparison functions. Former uses `deepdiff` module and does recursive comparison (sensitive to types). Can exempt fields with `forgive` arg. Latter makes use of former and also allows geoms to change if warranted by fix_com/orientation (checks via aligner).; - convert qcdb test suite from GnuMake (yes, that old) to pytest. switch compare_* fns to raise `TestComparisonError`, not `sys.exit(1)`.; - have to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:11323,energy,energy,11323,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['energy'],['energy']
Energy Efficiency,"equency calculations becoming exceedingly slow and I wonder what is the reason if there is something wrong with my setup. . **Question 1**. The molecule I am working with is private but I have provided a z-matrix of methanol as a test:. ```python. methanol = """"""\; O11; H11 O11 0.9316; C11 O11 1.4349 H11 107.5890; H12 C11 1.1029 O11 111.8699 H11 0.0000; H13 C11 1.1029 O11 111.8699 H11 122.9683; H14 C11 1.1029 O11 111.8699 H11 -118.5158; """"""; ```. Picture:. <img width=""413"" alt=""Screenshot 2024-01-23 at 4 48 12 PM"" src=""https://github.com/psi4/psi4/assets/11812946/0b006708-ebaf-45f4-af19-bb5c9f80b513"">. Here's the full script:. ```python. import psi4; import numpy as np. psi4.set_options({; 'scf_type': 'df',; 'g_convergence': 'gau_loose',; 'freeze_core': 'true',; 'reference': 'rhf',; 'save_jk': True,; 'geom_maxiter': 50,; }). psi4.set_output_file('free_energy_run.out'); psi4.set_num_threads(8); psi4.set_memory('8 GB'). universe = psi4.geometry(methanol); universe.update_geometry(); universe.print_in_input_format(). energy, wave_function = psi4.freq(; 'hf/6-31G*',; return_wfn=True,; molecule=universe,; dertype='gradient'; ). ```. So this calculation happens pretty rapidly with methanol but as I get to a system of 50ish atoms and 193 displacements needed it takes more than 24 hours so I was thinking there was a convergence problem somewhere or perhaps it's taking a really long time for those calculations? . **Analysis**. I was looking at the time for the calculations of the gradient. ```python. Module time:; user time = 0.37 seconds = 0.01 minutes; system time = 0.02 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; ```. it's pretty fast for a small system. However, for my system it's pretty slow per iteration. ```python. Module time:; 	user time = 738.22 seconds = 12.30 minutes; 	system time = 17.29 seconds = 0.29 minutes; 	total time = 99 seconds = 1.65 minutes. ```. This is probably why it's taking so long, any thoughts as to that other than it's bigger?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3125:1158,energy,energy,1158,https://psicode.org,https://github.com/psi4/psi4/issues/3125,1,['energy'],['energy']
Energy Efficiency,"er 21: -49.76413449146133 3.79833e+01 2.29697e+01; 23A 4.230928 24A 4.338550 25A 32.834338	 |	 @DF-RHF iter 22: -77.94619510085352 -2.81821e+01 6.69706e+00; Final Occupation by Irrep:						 |	 @DF-RHF iter 23: -80.45392024701042 -2.50773e+00 4.59655e+00; A								 |	 @DF-RHF iter 24: -76.07267063391218 4.38125e+00 9.18998e+00; DOCC [ 4 ]							 |	 @DF-RHF iter 25: -61.85382425940151 1.42188e+01 1.05928e+01; NA [ 4 ]							 |	 @DF-RHF iter 26: -86.77218963929283 -2.49184e+01 2.75808e+00; NB [ 4 ]							 |	 @DF-RHF iter 27: -77.43543931232399 9.33675e+00 3.96819e+00; @DF-RHF Final Energy: -35.61046747457991				 |	 @DF-RHF iter 28: -83.24663680738689 -5.81120e+00 3.02602e+00; => Energetics <=							 |	 @DF-RHF iter 29: -84.59007629023938 -1.34344e+00 2.49302e+00; Nuclear Repulsion Energy = 0.0000000000000000		 |	 @DF-RHF iter 30: -86.14724570488455 -1.55717e+00 1.56145e+00; One-Electron Energy = -54.3510785737621944		 |	 @DF-RHF iter 31: -78.57013959925717 7.57711e+00 2.04327e+00; Two-Electron Energy = 18.7406110991822779		 |	 @DF-RHF iter 32: -85.83622153869187 -7.26608e+00 3.17187e+00; Total Energy = -35.6104674745799201		 |	 @DF-RHF iter 33: -87.27348788185634 -1.43727e+00 1.46175e+00; Computation Completed							 |	 @DF-RHF iter 34: -76.35072049818045 1.09228e+01 3.97637e+00; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0	 |	 @DF-RHF iter 35: -70.56903511141743 5.78169e+00 1.24567e+01; Properties computed using the SCF density matrix			 |	 @DF-RHF iter 36: -75.56024107699382 -4.99121e+00 7.54313e+00; Multipole Moments:							 |	 @DF-RHF iter 37: 153.64365441909877 2.29204e+02 6.36152e+01; ---------------------------------------------------------------------	 |	 @DF-RHF iter 38: -73.57749835218766 -2.27221e+02 1.31647e+01; Multipole Electronic (a.u.) Nuclear (a.u.) 	 |	 @DF-RHF iter 39: -85.87858242035303 -1.23011e+01 1.51536e+00; ---------------------------------------------------------------------	 |	 @DF-RHF iter 40: -74.81783048435938 1.10608e+",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3072:10299,Energy,Energy,10299,https://psicode.org,https://github.com/psi4/psi4/issues/3072,1,['Energy'],['Energy']
Energy Efficiency,"er_xtpl_function; - [x] CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - [x] no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass ref_gradient array to test on or `set findif fd_project` T/F explicitly to control.; - [x] `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. json_ret is now an object, so `.` access, not dictionary. The old schema runner uses a schema circa pre-2018 and we've warned it's deprecated for about a year, so I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. - [x] Output ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:4113,energy,energy,4113,https://psicode.org,https://github.com/psi4/psi4/pull/2575,2,['energy'],['energy']
Energy Efficiency,"erence; 1 Threads, 256 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H -0.000000000000 0.980353033500 -0.849954236217 1.007825032070; O -0.000000000000 0.698854518800 0.053554843883 15.994914619560; O 0.000000000000 -0.698854518800 0.053554843883 15.994914619560; H 0.000000000000 -0.980353033500 -0.849954236217 1.007825032070. Running in c2v symmetry. Rotational constants: A = 10.89064 B = 0.95995 C = 0.88219 [cm^-1]; Rotational constants: A = 326493.09066 B = 28778.51563 C = 26447.33310 [MHz]; Nuclear repulsion = 37.887601626303692. Charge = 0; Multiplicity = 1; Electrons = 18; Nalpha = 9; Nbeta = 9. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: DZP; Number of shells: 20; Number of basis function: 42; Number of Cartesian functions: 42; Spherical Harmonics?: false; Max angular momentum: 2. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A1 16 16 0 0 0 0; A2 5 5 0 0 0 0; B1 5 5 0 0 0 0; B2 16 16 0 0 0 0; -------------------------------------------------------; Total 42 42 9 9 9 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 183; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: ; Number of shells: 62; Number of basis function: 226; Number ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/463:3525,Energy,Energy,3525,https://psicode.org,https://github.com/psi4/psi4/issues/463,1,['Energy'],['Energy']
Energy Efficiency,"ergy = energy('fci'). ---. Input file to run:; from psi4 import *; from p4const import *; from p4util import *; from molutil import *; from aliases import *; psi4_io = psi4.IOManager.shared_object(); psi4.efp_init(); psi4_io.set_default_path(""/tmp""); geometry(""""""; 0 1; H; H 1 0.74; """""",""blank_molecule_psi4_yo""). psi4.set_memory(48000000000). psi4.efp_init(); h2o = geometry(""""""; -1 1; F .0000000000 .0000000000 -.000000000; units bohr; """""",""h2o""); psi4.IO.set_default_namespace(""h2o""); psi4.set_global_option(""BASIS"", ""aug-cc-pVTZ""); psi4.set_global_option(""ICORE"", 0); thisenergy = energy('fci'). Memory set to 48.000 GiB by Python script. **\* tstart() called on node5-027-06; **\* at Fri Jan 8 13:56:53 2016. ```; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 12 Threads, 48000 MiB Core; ---------------------------------------------------------; ```. ==> Geometry <==. ```; Molecular point group: d2h; Geometry (in Bohr), charge = -1, multiplicity = 1:. Center X Y Z; ------------ ----------------- ----------------- -----------------; F 0.000000000000 0.000000000000 0.000000000000; ```. Running in d2h symmetry. Rotational constants: A = ***********\* B = ***********\* C = ***********\* [cm^-1]; Rotational constants: A = ***********\* B = ***********\* C = ***********\* [MHz]; Nuclear repulsion = 0.000000000000000. Charge = -1; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: AUG-CC-PVTZ; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 55; Spherical Harmonics?: true; Max angular momentum: 3. ==> Pre-Iterations <==. ---. ```; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; ```. ---. ```; Ag 11 11 0 0 0 0; B1g 3 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:3184,charge,charge,3184,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['charge'],['charge']
Energy Efficiency,"ergy = energy('scf'); ```. A simple expansion of the final COSX grid compared to default. This calculation breaks upon entering the final SCF iteration (where the tight grid is used) with the following error:; ```; !----------------------------------------------------------------------------------!; ! !; ! ADIIS minimization failed. File a bug, and include your entire input and output !; ! files. !; ! !; !----------------------------------------------------------------------------------!; ```. The following input, an expansion of both the initial and final grids, also fails:; ```; molecule mol {; 0 1; O; H 1 0.96; H 1 0.96 2 104.5; symmetry c1; no_reorient; no_com; }. set {; scf_type cosx; df_scf_guess false; basis aug-cc-pVDZ; e_convergence 1.0e-10; incfock true; incfock_full_fock_every 4; ints_tolerance 1.0e-12; cosx_spherical_points_initial 146 ; cosx_radial_point_initial 50 ; cosx_spherical_points_final 302; cosx_radial_points_final 75 ; cosx_pruning_scheme robust; }. energy = energy('scf'); ```. This one fails in the SAD-guess iteration, with the following error:; ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Matrix::diagonalize: DSYEV failed! !; ! Error occurred in file: !; ! /theoryfs2/ds/dpoole34/Documents/Codes/psi4/psi4/src/psi4/libmints/matrix.cc !; ! on line: 1715 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::Matrix::diagonalize(psi::Matrix&, psi::Vector&, psi::diagonalize_order) !; ! !; !----------------------------------------------------------------------------------!; ```. Various things can be switched, with equally varying effects:; * Switching the COSX_PRUNING_SCHEME from ROBUST to TREUTLER fixes these calculations.; * Switching from 146 spherical points to either 110 or 170 fixes these calculations.; * Switching from 50 radial points to ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890:1702,energy,energy,1702,https://psicode.org,https://github.com/psi4/psi4/issues/2890,2,['energy'],['energy']
Energy Efficiency,"erhaul.; This is another shard of the https://github.com/psi4/psi4/pull/2642 mega-PR that can be merged after PR #2678 and #2738 are in. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement two new wrapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; Please note that unlike `sq_rsp(...)`, the new functions do not take a ""tolarence"" value, but this is actually a null change as that parameter has been set-but-unused in `sq_rsp(...)` since ~forever ago when `sq_rsp(...)` switched to calling DSYEV internally.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure and guard against non-square matrices.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure. Add a sanity checks for non-square matrices and illegal values of ""diagonalization order"".; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with ne",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2686:1654,energy,energy,1654,https://psicode.org,https://github.com/psi4/psi4/pull/2686,1,['energy'],['energy']
Energy Efficiency,"es; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 14; Integrals threads: 14; Memory [MiB]: 337; Algorithm: Disk; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (DEF2-TZVPPD AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 372; Number of basis functions: 1116; Number of Cartesian functions: 1308; Spherical Harmonics?: true; Max angular momentum: 4. Cached 0.1% of DFT collocation blocks in 0.036 [GiB]. Minimum eigenvalue in the overlap matrix is 7.2890634209E-11.; Reciprocal condition number of the overlap matrix is 1.8442944048E-12.; Using canonical orthogonalization.; Overall, 27 of 648 possible MOs eliminated. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 648 621 ; -------------------------; Total 648 621; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -212.57868470845432 -2.12579e+02 0.00000e+00 ; @DF-RKS iter 1: -74.64880419187541 1.37930e+02 2.89342e-02 DIIS/ADIIS; @DF-RKS iter 2: -104.73618075758787 -3.00874e+01 2.89040e-02 DIIS/ADIIS. Traceback (most recent call last):; File ""[REMOVED BASE DIRECTORY]/bin/psi4"", line 347, in <module>; exec(content); File ""<string>"", line 66, in <module>; File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File [REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/proc.py"", line 2455, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/proc.py"", line 1670, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641:11089,Energy,Energy,11089,https://psicode.org,https://github.com/psi4/psi4/issues/2641,1,['Energy'],['Energy']
Energy Efficiency,"es\psi4\driver\p4util\util.py"", line 37, in <module>; from psi4.driver.procrouting import *; File ""Path\psi4conda\envs\psi16\lib\site-packages\psi4\driver\procrouting\__init__.py"", line 29, in <module>; from .proc_table import procedures, hooks, energy_only_methods, integrated_basis_methods; File ""Path\psi4conda\envs\psi16\lib\site-packages\psi4\driver\procrouting\proc_table.py"", line 32, in <module>; from . import sapt; File ""Path\psi4conda\envs\psi16\lib\site-packages\psi4\driver\procrouting\sapt\__init__.py"", line 29, in <module>; from .sapt_proc import run_sapt_dft, sapt_dft, run_sf_sapt; File ""Path\psi4conda\envs\psi16\lib\site-packages\psi4\driver\procrouting\sapt\sapt_proc.py"", line 36, in <module>; from psi4.driver.procrouting.proc import scf_helper; File ""Pathpsi4conda\envs\psi16\lib\site-packages\psi4\driver\procrouting\proc.py"", line 55, in <module>; from . import proc_util; File ""Path\psi4conda\envs\psi16\lib\site-packages\psi4\driver\procrouting\proc_util.py"", line 38, in <module>; from psi4.driver.procrouting.sapt import fisapt_proc; File ""Path\psi4conda\envs\psi16\lib\site-packages\psi4\driver\procrouting\sapt\fisapt_proc.py"", line 34, in <module>; from .. import empirical_dispersion; File ""Path\psi4conda\envs\psi16\lib\site-packages\psi4\driver\procrouting\empirical_dispersion.py"", line 38, in <module>; from psi4.driver import driver_findif; File ""Path\psi4conda\envs\psi16\lib\site-packages\psi4\driver\driver_findif.py"", line 153, in <module>; from psi4.driver.task_base import AtomicComputer, BaseComputer, EnergyGradientHessianWfnReturn; File ""Path\psi4conda\envs\psi16\lib\site-packages\psi4\driver\task_base.py"", line 67, in <module>; class AtomicComputer(BaseComputer):; File ""Path\psi4conda\envs\psi16\lib\site-packages\psi4\driver\task_base.py"", line 75, in AtomicComputer; keywords: Dict[str, Any] = Field(default_factory=dict, description=""The keywords to use in the computation.""); TypeError: Field() missing 1 required positional argument: 'default'",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614:2890,Energy,EnergyGradientHessianWfnReturn,2890,https://psicode.org,https://github.com/psi4/psi4/issues/2614,1,['Energy'],['EnergyGradientHessianWfnReturn']
Energy Efficiency,"esolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems to converge in just one step for c1 and c2v. I suppose it's possible the guess space just isn't grabbing roots for all symmetries, but increasing the number of roots to 30 doesn't change the results. perhaps more disturbing, though, is that the in-core diagonization routine `RSP` gives yet another set of results:; ```; Psi4 LiCN/6-31G* (symmetry c1, RSP solver); CI ROOT 1 TOTAL ENERGY:-99.58887523722994; CI ROOT 2 TOTAL ENERGY:-99.56069933848028; CI ROOT 3 TOTAL ENERGY:-99.56069933848008; CI ROOT 4 TOTAL ENERGY:-99.53483755106353; CI ROOT 5 TOTAL ENERGY:-99.53483755106343; CI ROOT 6 TOTAL ENERGY:-99.53418772103414; ```; here, we find 3 roots lower in energy than either GAMESS or the default Psi4 routines, and we also recover the -99.534837 E_h root, but this time as a doubly-degenerate state. the other routines mentioned in [the manual; ](https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html#term-DIAG_METHOD-DETCI) are deprecated kwargs (see also: #2640 ), so I can't test them. . given [`np.linalg.eigh`](https://numpy.org/doc/stable/reference/generated/numpy.linalg.eigh.html) just uses LAPACK's syevd/heevd, and `RSP` is just supposed to be LAPACK's dsyev, this result is very perturbing. . I've attached output files for the [Davidson](https://github.com/psi4/psi4/files/13431543/output_dav.txt) and [RSP](https://github.com/psi4/psi4/files/13431545/output_rsp.txt) schemes, as well as [GAMESS](https://github.com/psi4/psi4/files/13431555/output_gms.txt).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:2512,ENERGY,ENERGY,2512,https://psicode.org,https://github.com/psi4/psi4/issues/3083,4,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"est_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In actual `driver.py`, the function calls have been switched out, but it's only using half the info due to differences in non-ddd driver code routing. To mirror ddd behavior, the function is called even for energy() and properties(), mostly to take the place of `_method_exists()`. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2536:2205,energy,energy,2205,https://psicode.org,https://github.com/psi4/psi4/pull/2536,1,['energy'],['energy']
Energy Efficiency,est_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz]; reason: RKS Vx kernel ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:6507,Adapt,Adapted,6507,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['Adapt'],['Adapted']
Energy Efficiency,"et to 256.000 MB; ```. ==> Input File <==. ---; # Finding of 30 higher roots(i.e excited states) and then finding transition dipole moment from ground state to these excited states; # for Graphyne using basis cc-pvdz. psi4_io.set_default_path('./'). memory 5000 mb. molecule Graphyne {; 0 1; C 1.396 0.000 0.000; C 0.698 1.209 0.000; C -0.698 1.209 0.000; C -1.396 0.000 0.000; C -0.698 -1.209 0.000; C 0.698 -1.209 0.000; H 1.240 2.147 0.000; H -1.240 2.147 0.000; H -2.479 0.000 0.000; H -1.240 -2.147 0.000; H 1.240 -2.147 0.000; C 2.798 0.000 0.000; C 4.020 0.000 0.000; C 5.422 0.000 0.000; C 8.214 0.000 0.000; C 7.516 1.209 0.000; C 6.120 1.209 0.000; C 6.120 -1.209 0.000; C 7.516 -1.209 0.000; H 8.058 2.147 0.000; H 5.578 2.147 0.000; H 9.297 0.000 0.000; H 5.578 -2.147 0.000; H 8.058 -2.147 0.000. symmetry c1; units angstrom; }. set globals {; reference rhf; basis cc-pvdz ; freeze_core true; scf_type out_of_core; dipmom true; num_roots 10; }. set scf d_convergence 10; set detci e_convergence 8; ## thisenergy = energy('detci'). Memory set to 5.000 GiB by Python script. **\* tstart() called on shukla-pc.localdomain; **\* at Thu Oct 16 11:06:57 2014. ```; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 5000 MiB Core; ---------------------------------------------------------; ```. ==> Geometry <==. ```; Molecular point group: c1; Full point group: D2h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z ; ------------ ----------------- ----------------- -----------------; C -2.013000000000 0.000000000000 0.000000000000; C -2.711000000000 1.209000000000 0.000000000000; C -4.107000000000 1.209000000000 0.000000000000; C -4.805000000000 0.000000000000 0.000000000000; C -4.107000000000 -1.209000000000 0.000000000000; C -2.711000000000 -1.209000000000 0.000000000000; H -2.169000000000 2.147000000000 0.000000000000; H -4.649000000000 2.147000000000 0.000000000000; H -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:2089,energy,energy,2089,https://psicode.org,https://github.com/psi4/psi4/issues/62,1,['energy'],['energy']
Energy Efficiency,"et {; basis cc-pvdz; df_basis_scf cc-pvdz-jkfit; df_basis_cc cc-pvdz-ri; scf_type df; guess sad ; freeze_core true; cc_type df; qc_module occ ; }. frequencies('mp2', dertype=0); ```; The crash gives the following error message:; ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1774, in frequency; H, wfn = hessian(lowername, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1595, in hessian; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1608, in run_dfocc; ""RIFIT"", core.get_global_option(""BASIS"")); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py"", line 99, in pybuild_basis; psibasis = core.BasisSet.construct_from_pydict(mol, basisdict, puream). RuntimeError: ; Fatal Error: CoordEntry::basisset: Basisset not set for O and type of DF_BASIS_CC; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 134; ```; My own investigations have partially uncovered the cause of this. During basis set construction, [basis set labels are set on all atoms](https://github.com/psi4/psi4/blob/master/psi4/src/export_mints.cc#L101). This occurs by [iterating over all atom",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1093:1457,energy,energy,1457,https://psicode.org,https://github.com/psi4/psi4/issues/1093,2,['energy'],['energy']
Energy Efficiency,ex integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2784. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -4.157303195170. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 678; Number of virtual orbitals in truncated space: 640. ==> Memory <==. Total memory requirements: 78825.79 mb; 3-index integrals: 10109.75 mb; CCSD intermediates: 68716.04 mb. <<< warning! >>> switched to low-memory (t) algorithm. memory requirements for CCSD(T): 36451.32 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 26; Number of active occupied orbitals: 74; Number of active virtual orbitals: 640; Number of frozen virtual orbitals: 38. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 393. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -3.045395864164; SS MP2 FNO correction: -1.111907331006; MP2 FNO correction: -4.157303195170. OS MP2 correlation energy: -3.045395864164; SS MP2 correlation energy: -1.111907331006; MP2 correlation energy: -4.157303195170; * MP2 total energy: -1500.355601695273. OS CCSD correlation energy: -3.045395864164; SS CCSD correlation energy: -1.111907331006; CCSD correlation energy: -4.157303195170; * CCSD total energy: -1500.355601695273. Total time for CCSD iterations: 3404.15 s (user); 270.93 s (system); 607 s (total). Time per iteration: inf s (user); inf s (system); inf s (total). *** tstop() called on r3546 at Mon Feb 10 14:43:17 2014; Module time:; user time = 31046.70 seconds = 517.45 minutes; system time = 945.63 seconds = 15.76 minutes; total time = 5144 seconds = 85.73 minutes; Total time:; user time = 3320,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34:1749,Energy,Energy,1749,https://psicode.org,https://github.com/psi4/psi4/issues/34,2,['Energy'],['Energy']
Energy Efficiency,"extern.addCharge(0.417,0.544757019107,0.0,-0.912085762652); psi4.set_global_option_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. 2) A helium atom with a point charge (q=-1) 1 Angstrom away. ```; memory 1 gb; set reference rks; set basis 6-31G*; set guess sad; set scf_type df. molecule QMregion {; 0 1; He 0.0 0.0 0.0; symmetry c1; no_reorient; no_com; }. gradient(""PBE0""). Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1,0.0,0.0,1.8897261245650618); psi4.set_global_option_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. For test 1, the gradient from the water and the water+charges are different, but they do not agree with the forces returned by an equivalent calculation with Gaussian. The isolated water molecule has gradients that agree with the Gaussian forces, but once the charges are added the Gaussian and PSI4 calculations return different results. For test 2, the PSI4 gradient is zero for the for the helium with and without the point charge. The charge has no effect on the results. When I repeated the calculation with Gaussian, there was a finite force on the helium atom when a charge was included. Here are the gradient results I pulled from the output files:. ```; Water+Charges (TIP3P charges: O->-0.834, H->0.417). PSI4 gradient without charges:; 1 -0.000345685156 -0.000000503248 -0.001768512746; 2 0.000171019827 0.000099064969 0.000874930893; 3 0.000170945942 -0.000098562011 0.000874553581. Gaussian forces without charges:; 1 8 0.000342119 0.000000502 0.001755656; 2 1 -0.000171096 -0.000103970 -0.000878017; 3 1 -0.000171022 0.000103468 -0.000877640. PSI4 gradient with charges:; 1 0.001872262723 -0.000000506498 -0.002344911788; 2 -0.000937982580 -0.003306842432 0.001163140925; 3 -0.000938055973 0.003307348640 0.001162761678. Gaussian forces with charges:; 1 8 0.002079660 0.000000498 -0.002984605; 2 1 0.000413259 0.000612887 -0.001458686; 3 1 0.000413331 -0.000613388 -0.001458305. --------------------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/184:1736,charge,charge,1736,https://psicode.org,https://github.com/psi4/psi4/issues/184,1,['charge'],['charge']
Energy Efficiency,external charge field interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1541:9,charge,charge,9,https://psicode.org,https://github.com/psi4/psi4/issues/1541,1,['charge'],['charge']
Energy Efficiency,"ey. Calculation information:; Number of atoms: 24; Number of AO shells: 114; Number of SO shells: 114; Number of primitives: 358; Number of atomic orbitals: 260; Number of basis functions: 246. ```; Number of irreps: 1; Number of functions per irrep: [ 246 ]. Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35.; ```. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 3576; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12; ```. => Auxiliary Basis Set <=. Basis Set: CC-PVDZ-JKFIT; Number of shells: 426; Number of basis function: 1210; Number of Cartesian functions: 1384; Spherical Harmonics?: true; Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 5.4113217503E-05.; Using Symmetric Orthogonalization.; SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. ```; Total Energy Delta E RMS |[F,P]|; ```. @DF-RHF iter 1: -408.79982050244575 -4.08800e+02 3.62257e-02 ; @DF-RHF iter 2: -355.09647973838037 5.37033e+01 4.41837e-02 DIIS; @DF-RHF iter 3: -503.82195227745933 -1.48725e+02 2.30091e-02 DIIS; @DF-RHF iter 4: -521.88187925370471 -1.80599e+01 1.74498e-02 DIIS; @DF-RHF iter 5: -531.29208625948809 -9.41021e+00 8.08186e-03 DIIS; @DF-RHF iter 6: -532.44139866705314 -1.14931e+00 8.76099e-03 DIIS; @DF-RHF iter 7: -535.74682110801427 -3.30542e+00 2.34149e-03 DIIS; @DF-RHF iter 8: -535.91483791718110 -1.68017e-01 1.17738e-03 DIIS; @DF-RHF iter 9: -535.96873759197706 -5.38997e-02 3.40983e-04 DIIS; @DF-RHF iter 10: -535.97325006729534 -4.51248e-03 1.04940e-04 DIIS; @DF-RHF iter 11: -535.97364955471517 -3.99487e-04 1.97794e-05 DIIS; @DF-RHF iter 12: -535.97366979229014 -2.02376e-05 5.39642e-06 DIIS; @DF-RHF iter 13: -535.97367245741657 -2.66513e-06 2.45749e-06 DIIS; @DF-RHF iter 14: -535.97367296799007 -5.10573e-07 1.28273e-06 DIIS; @DF-RHF iter 15: -535.97367316735676 -1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:5614,Energy,Energy,5614,https://psicode.org,https://github.com/psi4/psi4/issues/62,1,['Energy'],['Energy']
Energy Efficiency,"ey. Calculation information:; Number of atoms: 24; Number of AO shells: 114; Number of SO shells: 114; Number of primitives: 358; Number of atomic orbitals: 260; Number of basis functions: 246. ```; Number of irreps: 1; Number of functions per irrep: [ 246 ]. Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35.; ```. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 3576; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12; ```. => Auxiliary Basis Set <=. Basis Set: CC-PVDZ-JKFIT; Number of shells: 426; Number of basis function: 1210; Number of Cartesian functions: 1384; Spherical Harmonics?: true; Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 5.4113217503E-05.; Using Symmetric Orthogonalization.; SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. ```; Total Energy Delta E RMS |[F,P]|; ```. @DF-RHF iter 1: -408.79982050385229 -4.08800e+02 3.62257e-02 ; @DF-RHF iter 2: -355.09647973844881 5.37033e+01 4.41837e-02 DIIS; @DF-RHF iter 3: -503.82195227805050 -1.48725e+02 2.30091e-02 DIIS; @DF-RHF iter 4: -521.88187925493912 -1.80599e+01 1.74498e-02 DIIS; @DF-RHF iter 5: -531.29208626043282 -9.41021e+00 8.08186e-03 DIIS; @DF-RHF iter 6: -532.44139862133784 -1.14931e+00 8.76099e-03 DIIS; @DF-RHF iter 7: -535.74682106965861 -3.30542e+00 2.34149e-03 DIIS; @DF-RHF iter 8: -535.91483788818550 -1.68017e-01 1.17738e-03 DIIS; @DF-RHF iter 9: -535.96873745368225 -5.38996e-02 3.40988e-04 DIIS; @DF-RHF iter 10: -535.97324997051101 -4.51252e-03 1.04954e-04 DIIS; @DF-RHF iter 11: -535.97364951295322 -3.99542e-04 1.98119e-05 DIIS; @DF-RHF iter 12: -535.97366972710233 -2.02141e-05 5.56774e-06 DIIS; @DF-RHF iter 13: -535.97367232462670 -2.59752e-06 2.92530e-06 DIIS; @DF-RHF iter 14: -535.97367292863373 -6.04007e-07 1.33844e-06 DIIS; @DF-RHF iter 15: -535.97367316705004 -2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61:6987,Energy,Energy,6987,https://psicode.org,https://github.com/psi4/psi4/issues/61,1,['Energy'],['Energy']
Energy Efficiency,"e{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; _________________________________________________________________ test_psi4_cas __________________________________________________________________. def test_psi4_cas():; """"""casscf-sp""""""; #! CASSCF/6-31G** energy point; ; geom = psi4.geometry(""""""; O; H 1 1.00; H 1 1.00 2 103.1; """"""); ; psi4.set_options({; ""basis"" : '6-31G**',; ""reference"" : 'rhf',; ""scf_type"" : 'pk',; ""mcscf_algorithm"" : 'ah',; ""qc_module"" : 'detci',; ""nat_orbs"" : True}); ; > cisd_energy, cisd_wfn = psi4.energy(""CISD"", return_wfn=True). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:38: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:947: in select_cisd; return func(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2953: in run_detci; ref_wfn = scf_helper(name, **kwargs) # C1 certified; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:24840,energy,energy,24840,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"f mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'DFMP2']:; func = run_dfmp2; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference in ['RKS', 'UKS']:; if mtd_type == 'DF':; if module in ['', 'DFMP2']:; func = run_dfmp2; ; if func is None:; > raise ManagedMethodError(['select_mp2', name, 'MP2_TYPE', mtd_type, reference, module]); E psi4.driver.p4util.exceptions.ManagedMethodError: select_mp2: Method 'mp2' with MP2_TYPE 'DF' and REFERENCE 'RHF' not directable to QC_MODULE 'DETCI'. /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:121: ManagedMethodError; _________________________________________________________________ test_psi4_sapt _________________________________________________________________. def test_psi4_sapt():; """"""sapt1""""""; #! SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF; #! and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates.; ; Eref = [ 85.189064196429101, -0.00359915058, 0.00362911158,; -0.00083137117, -0.00150542374, -0.00230683391 ]; ; ethene_ethyne = psi4.geometry(""""""; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom; """"""); ; # this molecule will crash test if molecule passing broken; barrier = psi4.geometry(""""""; 0 1; He; """"""); ; psi4.set_options({; ""basis"": ""cc-pvdz"",; ""guess"": ""sad"",; ""scf_type"": ""df"",; ""sad_print"": 2,; ""d_convergence"": 11,; ""puream"": True,; ""print"": 1}); ; > psi4.energy('sapt0', molecule=ethene_ethyne). /home/joao/miniconda3/lib/python3.6/site-packa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:36219,energy,energy,36219,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,f the iterations. . ```; 0 0 1 82301976411.2597808838 82301976411.2597808838 180071.6863671333 79; 1 1 1 -11765764147947413438464.0000000000 -11765764148029716168704.0000000000 5189755552069629.0000000000 1039; 2 2 1 18577504081805034984135645462528.0000000000 18577504093570799348831936839680.0000000000 13953090784875981570048.0000000000 1042; 3 3 1 -10975754574997206597632.0000000000 -18577504092780789161197672857600.0000000000 2850375421929338594918400.0000000000 1058; ```. ```; memory 120 GB; molecule {; 0 1; C 3.269671140 0.262382661 0.000000000; C -1.638988443 0.201021220 2.834237354; C -1.638988443 0.201021220 -2.834237354; H 3.645686428 1.289803000 0.000000000; H -1.846170088 1.221151217 3.170972567; C 1.219967165 -0.666672220 0.713456211; C 0.020624067 -0.681664789 1.405951372; C 0.020624067 -0.681664789 -1.405951372; C 1.219967165 -0.666672220 -0.713456211; C -1.215021798 -0.697111167 -0.692495161; C -1.215021798 -0.697111167 0.692495161; C 2.350712693 -0.010518009 1.202305693; C -0.133462307 -0.041571814 2.636656855; C -0.133462307 -0.041571814 -2.636656855; C 2.350712693 -0.010518009 -1.202305693; C -2.215754163 -0.067601818 -1.434351162; C -2.215754163 -0.067601818 1.434351162; C 2.253218542 0.518128480 2.489250128; C 1.019790334 0.502709825 3.201425874; C 1.019790334 0.502709825 -3.201425874; C 2.253218542 0.518128480 -2.489250128; C -3.291380529 0.448817382 -0.712175746; C -3.291380529 0.448817382 0.712175746; H 3.077229877 1.077986926 2.924280546; H 0.974199492 1.051697677 4.138560570; H 0.974199492 1.051697677 -4.138560570; H 3.077229877 1.077986926 -2.924280546; H -4.090407292 0.988386795 -1.214280023; H -4.090407292 0.988386795 1.214280023; H 4.154760170 -0.387272435 0.000000000; H -2.069145762 -0.465075312 3.593654516; H -2.069145762 -0.465075312 -3.593654516; H -1.846170088 1.221151217 -3.170972567; }. set {; basis aug-cc-pvdz; guess sad; reference rhf; scf_type DF; cc_type DF; freeze_core true; OCC_TOLERANCE 1.0e-5; }. energy('fno-ccsd(t)'); ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1545:2277,energy,energy,2277,https://psicode.org,https://github.com/psi4/psi4/issues/1545,1,['energy'],['energy']
Energy Efficiency,"f-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:3875,ENERGY,ENERGY,3875,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['ENERGY'],['ENERGY']
Energy Efficiency,"f69R2114)? Ok to make it build upon bp86 as done in this PR?; ## Status; - [x] Ready to go. B3LYP3/5 test input. You'll need [this](https://raw.githubusercontent.com/drhaney/psi4/master/share/basis/6-31g_2df_p_.gbs) basis set. ```; # all non-psi4 references from http://forum.psicode.org/t/b3lyp-defect-compatibility-with-gamess-and-gaussian/193. # @jamont conditions. molecule {; 0 1; O; H 1 rOH; H 1 rOH 2 aHOH. rOH = 0.9622; aHOH = 103.84; }. set basis 6-311g(d); set scf_type pk; set e_convergence 9. e = energy('b3lyp'); compare_values(-76.4338100903, e, 7, 'b3lyp3 vs Gaussian'); compare_values(-76.4338100577, e, 7, 'b3lyp3 vs Gamess'). clean(). # @drhaney conditions. set basis 6-31G(2df,p); #set dft_spherical_points 590; #set dft_radial_points 99. e = energy('b3lyp'); compare_values(-76.4293315991, e, 5, 'b3lyp3 vs Gamess'); # GAMESS-VWNrpa_1 -76.4293 3159 91; # Psi4-VWNrpa_3 -76.4293 5426 98; # Gaussian-09 -76.4256 2566 74; # LAB psi4 -76.4293 4111 93 # large grid VWN3RPA_C VWN5RPA_C. e = energy('b3lyp5'); compare_values(-76.39221287, e, 5, 'b3lyp5 vs NWChem'); # GAMESS-VWN_5 -76.3922 0295 70; # Nchem-VWN_3 -76.3922 1287 ; # Psi4-VWN_3 -76.3922 2551 29; # LAB psi4 -76.3922 1237 09 # large grid VWN3_C VWN5_C. clean(). # @hokru conditions. molecule {; O -1.769142 -0.076181 0.000000; H -2.065745 0.837492 0.000000; H -0.809034 0.001317 0.000000; }. ### e = energy('b3lyp'); ### compare_values(-76.46290368244, e, 5, 'b3lyp3 vs Turbomole'); ### #For VWN3 (same as Gaussian) I get; ### #-76.46290368244 (Turbomole ""B3LYP_Gaussian""); ### #-76.46290355576 (psi4 energy('b3lyp')); ### #-76.46290344335 (nwchem default vnw-1-rpa); ### #VNW-1-rpa in nwchem seems to be VWN3 in Turbomole/Gaussian; ### ; ### e = energy('b3lyp5'); ### compare_values(-76.42582290565, e, 5, 'b3lyp5 vs Turbomole'); ### #and VWN5; ### #-76.42582290565 (Turbomole default ); ### #-76.42582303608 (psi4 energy('b3lyp5') with VWN5_C not VWN5RPA_C , needs to be changed!); ### #-76.42582292329 (nwchem VWN_5); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/339:2604,energy,energy,2604,https://psicode.org,https://github.com/psi4/psi4/pull/339,5,['energy'],['energy']
Energy Efficiency,f[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:6874,Adapt,Adapted,6874,https://psicode.org,https://github.com/psi4/psi4/pull/1349,4,['Adapt'],['Adapted']
Energy Efficiency,"failure. Based on how _early_ minimization is failing, this looks like something other than numerical finickiness of the underlying numpy algorithm. The ADIIS problem is either 1-by-1 or 2-by-2 (I'd need to check which), and surely we can handle a 2D constrained optimization. ```; memory 5 gb. molecule dimer {; O -2.37598501 -5.25644515 4.84543259; H -2.38171765 -4.38257907 4.44628561; H -2.48821382 -4.94837176 5.80344789; --; @Br 2.24215713 -6.77867982 5.71107037; @Br 0.05511550 -6.05660413 5.30313985; units angstrom; }. set {; basis aug-cc-pvdz; scf_type pk ; sapt_dft_grac_shift_a 0.05731; sapt_dft_grac_shift_b 0.01680; SAPT_DFT_FUNCTIONAL REVSCAN; }. energy('revscan'); ```. ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo; -------------------------; A 113 113; -------------------------; Total 113 113; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RKS iter SAD: -76.04124004396280 -7.60412e+01 0.00000e+00. Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin//psi4"", line 338, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2455, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1670, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", l",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2609:1095,Energy,Energy,1095,https://psicode.org,https://github.com/psi4/psi4/issues/2609,1,['Energy'],['Energy']
Energy Efficiency,"fix Eco (W) GHA by recognizing that updating the setup-miniconda version changed the environment path, so the find-the-iomp5-lib cmake cmd needed to change, too, for sapt.cc to compile.; - [x] wow, fixing Eco (M) GHA was not what I expected. To recap, without psi4 code changing or the binaries of any of our QC dependencies changing, Mac builds (Intel or Silicon) started issuing ""Illegal Instruction"" on Hartree--Fock water. :-( This affected any fresh conda env; for instance updating a ""working"" python 3.12.3 env to 3.12.4 was accompanied by many other package updates and led to a ""illegal instruction"" env upon recompiling psi. I know c-f has been updating how they handle the c stdlib (https://github.com/conda-forge/conda-forge.github.io/issues/2102). New environments apparently hit the new fundamental libraries, and those insert a breakpoint if you try to access out of bounds. So fixed the bounds error. :-). ```; (lldb) settings set -- target.run-args ""stage/bin/psi4"" ""../tests/tu1-h2o-energy/input.dat""; (lldb) run; Process 22217 launched: '/Users/loriab/linux/miniconda-silicon/envs/p4dev312cf_clone/bin/python' (arm64); Process 22217 stopped; * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BREAKPOINT (code=1, subcode=0x11819b7e4); frame #0: 0x000000011819b7e4 core.cpython-312-darwin.so`std::__1::vector<double, std::__1::allocator<double> >::operator[][abi:fe180100](this=0x00000001013e5378 size=27, __n=27) at vector:1393:3; 1390	template <class _Tp, class _Allocator>; 1391	_LIBCPP_CONSTEXPR_SINCE_CXX20 inline _LIBCPP_HIDE_FROM_ABI typename vector<_Tp, _Allocator>::reference; 1392	vector<_Tp, _Allocator>::operator[](size_type __n) _NOEXCEPT {; -> 1393	 _LIBCPP_ASSERT_VALID_ELEMENT_ACCESS(__n < size(), ""vector[] index out of bounds"");; 1394	 return this->__begin_[__n];; 1395	}; 1396	; Target 0: (python) stopped.; (lldb) bt; * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BREAKPOINT (code=1, subcode=0x11819b7e4); * frame #0: 0x00000001181",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3194:1321,energy,energy,1321,https://psicode.org,https://github.com/psi4/psi4/pull/3194,1,['energy'],['energy']
Energy Efficiency,fix failing test case fd-freq-energy-large,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/123:30,energy,energy-large,30,https://psicode.org,https://github.com/psi4/psi4/issues/123,1,['energy'],['energy-large']
Energy Efficiency,"for df-mp2, these are the cases:; uhf energy: good, this is is Rob's code (we're pretty sure; test); rohf energy: we think this may be in Rob's code, but not verified vs other codes ; uhf grad: we think this may be in Rob's code, but not verified vs other codes ; rohf grad: no good. Ugur doesn't support rohf scf being fed into his omp2 w/o subsequent opt. ticket task: verify the above with the code and with the authors. if needed, re-route in driver (see mp2_type as example in `proc.py`. If anything looks to hard or want to defer, create a new ticket for it, and do all you can to close out this one. After discussion below, consolidated tasks:; - [x] re-route uhf grad through Ugur's code; - [x] make rohf grad fail gracefully; - [x] test all four cases; - [x] for uhf, make sure findif of Rob == Ugur; - [ ] comment `dfmp2/corr_grad.cc` stubs according to below",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/107:38,energy,energy,38,https://psicode.org,https://github.com/psi4/psi4/issues/107,2,['energy'],['energy']
Energy Efficiency,forum requested feature: http://forum.psicode.org/t/print-out-virial-ratio/1398. * print out the virial ratio and kinetic and potential energy components for all wave functions.; * write the virial ratio to the fchk file in this format: `Virial Ratio R 2.000693879856458E+00`,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1653:136,energy,energy,136,https://psicode.org,https://github.com/psi4/psi4/issues/1653,1,['energy'],['energy']
Energy Efficiency,"found an issue when using DETCI to compute roots of LiCN with CIS/6-31G*, which may have uncovered some deeper problems. the main issue: the lowest-energy solution as predicted by GAMESS (and my own code, which diagonalizes the Hamiltonian by simply calling `np.linalg.eigh`) is completely skipped by Psi4, despite the following roots being the same. GAMESS predicts the following first six excited state energies (the RHF energy matching to 6 decimals):; ```; GAMESS LiCN/6-31G*; CONVERGED STATE 1 ENERGY= -99.5348374214; CONVERGED STATE 2 ENERGY= -99.5315000308; CONVERGED STATE 3 ENERGY= -99.5315000308; CONVERGED STATE 4 ENERGY= -99.5258078193; CONVERGED STATE 5 ENERGY= -99.5258078193; CONVERGED STATE 6 ENERGY= -99.5095744807; ```; while Psi4 predicts:; ```; Psi4 LiCN/6-31G* (symmetry c1, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.5315015582624; CI ROOT 2 TOTAL ENERGY:-99.53150155297872; CI ROOT 3 TOTAL ENERGY:-99.52581092386518; CI ROOT 4 TOTAL ENERGY:-99.52581092379563; CI ROOT 5 TOTAL ENERGY:-99.5096013650753; CI ROOT 6 TOTAL ENERGY:-99.48378441050741; ````; this result doesn't change with or without frozen core, but the results are fine with STO-3G, as well as water with 6-31G*. the results also match GAMESS if I perturb the linear geometry of LiCN, as suggested by @psi-rking , which suggests maybe an issue with finding roots of whatever symmetry the first excited state is; however, adding more roots (or running with/without symmetry) doesn't resolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems to converg",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:1022,ENERGY,ENERGY,1022,https://psicode.org,https://github.com/psi4/psi4/issues/3083,1,['ENERGY'],['ENERGY']
Energy Efficiency,"fting"", we're losing some keywords. I don't know how to deprecate these. If they're provided as module-level keywords, then I don't know the technical details of how you would raise a warning message. The bigger problem is when they're global keywords. DFOCC still uses ""level shifting"", so I can only raise a warning when I know what module the user is in. Thoughts on how to handle this?; * Should we be losing ""level shifting""? We can add _damping_ to `libdiis` if there's demand for it. I think there are better things to do with my time. ## Quick Test Status; * Switching out the DIIS version caused the `omp2p5-2` test's OMP2.5 energy to fall outside convergence criteria, again emphasizing how unstable orbital convergence in OCC is. We'll find out what the actual value is by the time I'm done.; * Losing ""level shifting"" was enough to break the `ocepa-grad2` test. This test asks for a higher-than-normal convergence from OCC, so that's no surprise. (I imagine Psi ups the energy convergence default when the user requests a gradient.) As a temp fix, I lowered the demanded energy convergence from 8 to 7. Even after that, we're outside the test tolerance, so I changed the value to boot. If anybody is dying to know the correct answer, I can run it on my Python code.; * `omp2-2` encountered oscillatory convergence, and I responded by lowering the convergence we seek. Again, coupling amplitude and orbital DIIS will break the oscillations and render this test hack unnecessary.; * We may have lost other full tests, but we'll get them back at the end. ## So Lori Knows What to Put in Changelog; - [x] Overhauled orbital convergence in the OCC module. As a result, the `level_shift` and `do_level_shift` keywords have been removed. Contact the developers if you've found a case where the new convergence is worse than old!. ## Checklist; - [x] [Quick tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x]",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783:3489,energy,energy,3489,https://psicode.org,https://github.com/psi4/psi4/pull/1783,1,['energy'],['energy']
Energy Efficiency,"g in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: No; wK tasked: No; OpenMP threads: 8; Memory [MiB]: 85706; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 0.0000; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: DEF2-UNIVERSAL-JFIT; Blend: DEF2-UNIVERSAL-JFIT; Number of shells: 60; Number of basis functions: 194; Number of Cartesian functions: 194; Spherical Harmonics?: false; Max angular momentum: 4. Cached 100.0% of DFT collocation blocks in 0.121 [GiB]. Minimum eigenvalue in the overlap matrix is 4.2926659058E-03.; Reciprocal condition number of the overlap matrix is 5.8671564054E-04.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo; -------------------------; A 60 60; -------------------------; Total 60 60; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -78.86898106418064 -7.88690e+01 0.00000e+00; @DF-RKS iter 1: -78.88636762953359 -1.73866e-02 1.49756e-02 DIIS; @DF-RKS iter 2: -78.27124917688414 6.15118e-01 2.18391e-02 DIIS; @DF-RKS iter 3: -79.32381221986704 -1.05256e+00 1.08985e-03 DIIS; @DF-RKS iter 4: -79.32638959495554 -2.57738e-03 2.16014e-04 DIIS; @DF-RKS iter 5: -79.32647363265359 -8.40377e-05 3.30059e-05 DIIS; @DF-RKS iter 6: -79.32647565598309 -2.02333e-06 1.23652e-06 DIIS; @DF-RKS iter 7: -79.32647565991985 -3.93676e-09 7.27369e-08 DIIS; Energy and wave function converged. ==> Post-Iterations <==. Electrons on quadrature grid:; Ntotal = 18.0000006848 ; deviation = 6.848e-07. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. 1A -9.811979 2A -9.811957 3A -0.686974; 4A -0.549234 5A -0.403737 6A -0.403737; 7A -0.338480 8A -0.310133 9A -0.310133. Virtual:. 10A 0.023031 11A 0.076058 12A 0.080886; 13A 0.080887 14A 0.110657 15A 0.110658; 16A 0.173580 17A 0.360176 18A 0.370157; 19A ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:6813,Energy,Energy,6813,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['Energy'],['Energy']
Energy Efficiency,"g-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:1396,ENERGY,ENERGY,1396,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['ENERGY'],['ENERGY']
Energy Efficiency,"ge. ## Notes; - Iterative Diagonalization methods have been generalized to work with an `engine` which is an object that must provide a particular API (documented). The `engine` provides the relevant Matrix x trial vector functions and a series of methods that allow the engine to perform standard operations on the trial vectors without needing to know what data structure is used for a trial vector. ; - Two engines have been implemented that provide the products required for TDHF/TDDFT. A flag passed to the engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ; - The tests do not use symmetry because with these small systems the savings due to PG symmetry are negligible and finding roots that transform as different irrep require multiple passes through the solver. So turning symmetry on makes each test take abou",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:1761,adapt,adapted,1761,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['adapt'],['adapted']
Energy Efficiency,"gh the diff, I don't think I can answer close questioning on all the pieces. So I'm going to try to pick off some topics for coherent discussion. This is No. 1 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] New `psi4.set_output_file` function to both set up a logger and call `psi4.core.set_output_file`; - [x] Added some brief logging in the driver. This doesn't look much like DDD, but it's something to work with.; - [x] output file naming has been changed up. outputs may have double extension (e.g., myfile.log.out) to cope with the oddity of two extensions. Mostly, something.in creates something.out and something.log.; - [x] docs. Below is an example of output set at DEBUG with an extra `gradient()` call added to tu1; `>>> psi4 ../tests/tu1-h2o-energy/input.dat --loglevel=10 && cat ../tests/tu1-h2o-energy/input.log`; ```; 2022-03-28:21:06:46,635 INFO [psi4.driver.driver:603] Compute energy(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:46,644 DEBUG [psi4.driver.driver:604] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Compute gradient(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2512:1048,energy,energy,1048,https://psicode.org,https://github.com/psi4/psi4/pull/2512,1,['energy'],['energy']
Energy Efficiency,"ghest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:3693,ENERGY,ENERGY,3693,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['ENERGY'],['ENERGY']
Energy Efficiency,"har> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: ERD; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:26 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constant",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:9216,energy,energy,9216,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"hare/psi4/basis/def2-tzvppd.gbs ; atoms 34-89 entry H line 14 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 90-101 entry N line 181 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 102-106 entry O line 218 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs . => WB97M-D3BJ: Empirical Dispersion <=. Grimme's -D3 (BJ-damping) Dispersion Correction; Grimme S.; Ehrlich S.; Goerigk L. (2011), J. Comput. Chem., 32: 1456; Parametrisation from: A. Najib, L. Goerigk, J. Comput. Theory Chem.,14, 5725, 2018. s6 = 1.000000; s8 = 0.390800; a1 = 0.566000; a2 = 3.128000. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 4 Threads, 7629 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; C -3.986536731580 -1.858264338730 0.058762714511 12.000000000000; C 0.798074669820 0.990515156370 -3.875762257089 12.000000000000; C 0.017832511920 -3.811459520430 -1.287345979189 12.000000000000; C 0.173626034620 2.867679137670 -2.668652350389 12.000000000000; C 1.516908962420 -3.483999515230 -1.216553356289 12.000000000000; C 5.992839611420 -1.026305827230 -0.727874868189 12.000000000000; C 3.017409895220 -3.046872095730 0.725792373811 12.000000000000; C -1.125684508680 2.202468723670 -2.198266685089 12.000000000000; C 3.752417747320 -2.017670362830 -0.145942986389 12.000000000000; C 2.625927257520 -0.162195960130 1.108527837311 12.000000000000; C 2.049668656220 1.018254628770 0.683856523611 12.000000000000; C 1.406278426320 2.114882744470 1.477238232711 12.000000000000; C -0.252334991380 -4.016660671530 1.099960464211 12.000000000000; C 2.325525208620",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:2829,charge,charge,2829,https://psicode.org,https://github.com/psi4/psi4/issues/2970,1,['charge'],['charge']
Energy Efficiency,"hare/psi4/basis/sto-3g.gbs; atoms 2-3 entry H line 19 file /opt/conda/share/psi4/basis/sto-3g.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.065775570547 15.994914619570; H 0.000000000000 -0.759061990794 0.521953018286 1.007825032230; H 0.000000000000 0.759061990794 0.521953018286 1.007825032230. Running in c2v symmetry. Rotational constants: A = 27.26297 B = 14.51533 C = 9.47217 [cm^-1]; Rotational constants: A = 817323.21126 B = 435158.60141 C = 283968.37536 [MHz]; Nuclear repulsion = 9.168193296424349. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: STO-3G; Blend: STO-3G; Number of shells: 5; Number of basis functions: 7; Number of Cartesian functions: 7; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (STO-3G AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1 entry O line 318 file /opt/conda/share/psi4/basis/def2-universal-jkfit.gbs; atoms 2-3 entry H line 18 file /opt/conda/share/psi4/basis/def2-universal-jkfit.gbs; ```. If I add `mp.set_start_method('spawn', force=True)`, I can get this to work - or I can run this script on macOS, for which `mp` uses `spawn` by default. This code also runs if I uncomment `proc.run()`, which runs the function in the same process instead of creating a new process. . Any advice he",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3189:1941,Charge,Charge,1941,https://psicode.org,https://github.com/psi4/psi4/issues/3189,1,['Charge'],['Charge']
Energy Efficiency,"he most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: ERD; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:26 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.00000000000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:9066,energy,energy,9066,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"he potential energy curve for the CF molecule and I got this error message: . ```; import psi4; import numpy as np. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). ecp = {}. for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). cf = psi4.geometry(cf_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; psi4.core.clean(); ```. The error message I got is:. ```; Traceback (most recent call last):; File ""/home/sanctus/psi4conda/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 46, in <module>; File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5424, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packag",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181:1012,energy,energy,1012,https://psicode.org,https://github.com/psi4/psi4/issues/3181,1,['energy'],['energy']
Energy Efficiency,"hells: 81; Number of basis functions: 336						 Number of basis functions: 336; Number of Cartesian functions: 336						 Number of Cartesian functions: 336; Spherical Harmonics?: false							 Spherical Harmonics?: false; Max angular momentum: 4							 Max angular momentum: 4; 									 >; Minimum eigenvalue in the overlap matrix is 3.6155256748E-02.			 Minimum eigenvalue in the overlap matrix is 3.6155256748E-02.; Reciprocal condition number of the overlap matrix is 1.1026908875E-0		 Reciprocal condition number of the overlap matrix is 1.1026908875E-0; Using symmetric orthogonalization.						 Using symmetric orthogonalization.; 									 >; ==> Pre-Iterations <==							 ==> Pre-Iterations <==; 									 >; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic U		 SCF Guess: Superposition of Atomic Densities via on-the-fly atomic U; 									 >; -------------------------							 -------------------------; Irrep Nso Nmo								 Irrep Nso Nmo; -------------------------							 -------------------------; A 25 25							 A 25 25; -------------------------							 -------------------------; Total 25 25							 Total 25 25; -------------------------							 -------------------------; 									 >; ==> Iterations <==								 ==> Iterations <==; 									 >; Total Energy Delta E MAX |[F,P]|		 Total Energy Delta E MAX |[F,P]|; @DF-RHF iter SAD: -36.21394595952589 -3.62139e+01 0.00000e+00	 |; @DF-RHF iter 1: -35.60922177916374 6.04724e-01 1.68980e-02	 |	 @DF-RHF iter SAD: -57.13350802568045 -5.71335e+01 0.00000e+00; @DF-RHF iter 2: -35.61045354738020 -1.23177e-03 1.67646e-03	 |	 @DF-RHF iter 1: -53.28609137605913 3.84742e+00 7.61225e+00; @DF-RHF iter 3: -35.61046745904237 -1.39117e-05 7.33996e-05	 |	 @DF-RHF iter 2: -28.24435069753500 2.50417e+01 7.83254e+00; @DF-RHF iter 4: -35.61046747456783 -1.55255e-08 1.52836e-06	 |	 @DF-RHF iter 3: -62.28763326354083 -3.40433e+01 4.30703e+00; @DF-RHF iter 5: -35.61046747457986 -1.20366e-11 1.13726e-07	 |	 @DF-RHF iter 4: 445.8713966",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3072:6849,Energy,Energy,6849,https://psicode.org,https://github.com/psi4/psi4/issues/3072,2,['Energy'],['Energy']
Energy Efficiency,how to get the gradient of external point charges,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2244:42,charge,charges,42,https://psicode.org,https://github.com/psi4/psi4/issues/2244,1,['charge'],['charges']
Energy Efficiency,"http://forum.psicode.org/t/scf-problems-please-help/765/14. ```; First ROHF (DZ):; Computing 2-order Douglas-Kroll-Hess integrals.; Adding Douglas-Kroll-Hess corrections to the potential integrals.; …; @ROHF Final Energy: -1271.85284181863290. Second ROHF (pwCVTZ):; Computing 2-order Douglas-Kroll-Hess integrals.; Adding Douglas-Kroll-Hess corrections to the potential integrals.; …; SCF Guess: Orbitals guess was supplied from a previous computation.; @ROHF Final Energy: -1267.93014988281766; ```. Even though converged docc and socc are the same, we get a difference of 4 Hartrees in the initial versus final ROHF. . Below is a simpler input that shows the problem. ```; molecule {; 0 4; Fe; H 1 1.566665; }. set {; reference rohf; docc [7, 0, 3, 2]; socc [1, 1, 0, 1]; scf_type pk; relativistic dkh; dkh_order 2; print_mos true; maxiter=500; freeze_core false; }. basis mine2{; spherical; ****; Fe 0; S 20 1.00; 4.316265E+06 8.048803E-06; 6.463424E+05 6.258306E-05; 1.470897E+05 3.290239E-04; 4.166152E+04 1.387355E-03; 1.359077E+04 5.023256E-03; 4.905750E+03 1.610140E-02; 1.912746E+03 4.590034E-02; 7.926043E+02 1.136154E-01; 3.448065E+02 2.283869E-01; 1.558999E+02 3.221159E-01; 7.223091E+01 2.383661E-01; 3.272506E+01 7.404667E-02; 1.566762E+01 9.214197E-02; 7.503483E+00 9.339790E-02; 3.312223E+00 1.573965E-02; 1.558471E+00 -4.186682E-04; 6.839140E-01 5.376318E-05; 1.467570E-01 -3.816654E-05; 7.058300E-02 4.319603E-05; 3.144900E-02 -3.401019E-06; S 20 1.00; 4.316265E+06 -4.155954E-06; 6.463424E+05 -3.231401E-05; 1.470897E+05 -1.699525E-04; 4.166152E+04 -7.171369E-04; 1.359077E+04 -2.603625E-03; 4.905750E+03 -8.399109E-03; 1.912746E+03 -2.434109E-02; 7.926043E+02 -6.251948E-02; 3.448065E+02 -1.365929E-01; 1.558999E+02 -2.312707E-01; 7.223091E+01 -2.383734E-01; 3.272506E+01 3.123837E-02; 1.566762E+01 5.086818E-01; 7.503483E+00 4.987695E-01; 3.312223E+00 9.033552E-02; 1.558471E+00 -6.005337E-03; 6.839140E-01 2.312454E-04; 1.467570E-01 -5.643680E-04; 7.058300E-02 4.992260E-04; 3.1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/899:214,Energy,Energy,214,https://psicode.org,https://github.com/psi4/psi4/issues/899,2,['Energy'],['Energy']
Energy Efficiency,"http://sirius.chem.vt.edu/psi4manual/latest/basissets_byelement.html#apdx-basiselement. my molecule complex have 'I' atom, ; the complex was optimized by g09 at MP2/AUG-CC-PVDZ,and the 'I' (AUG-CC-PVDZ-PP),. NOW I want to decompose the interact energy by the psi4 software,but it didn't have basis set support the 'I' element. can you give me some suggestions?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/76:245,energy,energy,245,https://psicode.org,https://github.com/psi4/psi4/issues/76,1,['energy'],['energy']
Energy Efficiency,"https://github.com/psi4/psi4/pull/760/files#diff-aac3b6c47032ba056103b4f355643ca7R3113 makes a lot of sense and eliminates a pit that's easy to fall into. But need to revisit its impact on properties of charged molecules. Basically, props2 is currently broken, and need to figure out if the recent PR was too aggressive in `no_reorient`ing or if `props2` has been falling into the aforementioned pit all along.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/782:203,charge,charged,203,https://psicode.org,https://github.com/psi4/psi4/issues/782,1,['charge'],['charged']
Energy Efficiency,"https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectabili",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:2786,efficient,efficient,2786,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['efficient'],['efficient']
Energy Efficiency,"i4/driver/procrouting/proc.py:1289: in scf_helper; old_wfn = core.Wavefunction.from_file(read_filename); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/p4util/python_helpers.py:156: in _core_wavefunction_from_file; wfn_data = np.load(wfn_data).item(); miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/npyio.py:447: in load; pickle_kwargs=pickle_kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. fp = <_io.BufferedReader name='/tmp/pytest_output.default.14086.180.npy'>, allow_pickle = False; pickle_kwargs = {'encoding': 'ASCII', 'fix_imports': True}. def read_array(fp, allow_pickle=False, pickle_kwargs=None):; """"""; Read an array from an NPY file. Parameters; ----------; fp : file_like object; If this is not a real file object, then this may take extra memory; and time.; allow_pickle : bool, optional; Whether to allow writing pickled data. Default: False. .. versionchanged:: 1.16.3; Made default False in response to CVE-2019-6446. pickle_kwargs : dict; Additional keyword arguments to pass to pickle.load. These are only; useful when loading object arrays saved on Python 2 when using; Python 3. Returns; -------; array : ndarray; The array from the data on disk. Raises; ------; ValueError; If the data is invalid, or allow_pickle=False and the file contains; an object array. """"""; version = read_magic(fp); _check_version(version); shape, fortran_order, dtype = _read_array_header(fp, version); if len(shape) == 0:; count = 1; else:; count = numpy.multiply.reduce(shape, dtype=numpy.int64). # Now read the actual data.; if dtype.hasobject:; # The array contained Python objects. We need to unpickle the data.; if not allow_pickle:; > raise ValueError(""Object arrays cannot be loaded when ""; ""allow_pickle=False""); E ValueError: Object arrays cannot be loaded when allow_pickle=False. miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/format.py:692: ValueError; ```. Just a report.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:6335,reduce,reduce,6335,https://psicode.org,https://github.com/psi4/psi4/issues/1611,1,['reduce'],['reduce']
Energy Efficiency,"idson] solver); CI ROOT 1 TOTAL ENERGY:-99.5315015582624; CI ROOT 2 TOTAL ENERGY:-99.53150155297872; CI ROOT 3 TOTAL ENERGY:-99.52581092386518; CI ROOT 4 TOTAL ENERGY:-99.52581092379563; CI ROOT 5 TOTAL ENERGY:-99.5096013650753; CI ROOT 6 TOTAL ENERGY:-99.48378441050741; ````; this result doesn't change with or without frozen core, but the results are fine with STO-3G, as well as water with 6-31G*. the results also match GAMESS if I perturb the linear geometry of LiCN, as suggested by @psi-rking , which suggests maybe an issue with finding roots of whatever symmetry the first excited state is; however, adding more roots (or running with/without symmetry) doesn't resolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems to converge in just one step for c1 and c2v. I suppose it's possible the guess space just isn't grabbing roots for all symmetries, but increasing the number of roots to 30 doesn't change the results. perhaps more disturbing, though, is that the in-core diagonization routine `RSP` gives yet another set of results:; ```; Psi4 LiCN/6-31G* (symmetry c1, RSP solver); CI ROOT 1 TOTAL ENERGY:-99.58887523722994; CI ROOT 2 TOTAL ENERGY:-99.56069933848028; CI ROOT 3 TOTAL ENERGY:-99.56069933848008; CI ROOT 4 TOTAL ENERGY:-99.53483755106353; CI ROOT 5 TOTAL ENERGY:-99.53483755106343; CI ROOT 6 TOTAL ENERGY:-99.53418772103414; ```; here, we find 3 roots lower in energy than either GAMESS or the default Psi4 routines, and we also recover the -99.534837 E_h root, but this time as a doubly-degenerate state. the other rout",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:1830,ENERGY,ENERGY,1830,https://psicode.org,https://github.com/psi4/psi4/issues/3083,1,['ENERGY'],['ENERGY']
Energy Efficiency,"ifferent answer when the unused molecules are commented out (not only molecules, but irrelevant keywords can cause the problem, too). The problem shows up in the final output as correlation energy has wrong sign and not matching sum of aa, ab, bb contributions. At first I though it was because you're setting `EcorlL` but printing `Ecorl`, @bozkaya , but that turns out to be innocent. I've got a valgrind if that'll help. ```; molecule methane {; C 0.0000000 0.0000000 3.0826195; H 0.5868776 0.8381742 3.4463772; H -1.0193189 0.0891638 3.4463772; H 0.0000000 0.0000000 1.9966697; H 0.4324413 -0.9273380 3.4463772; }. molecule hf {; H; F 1 0.917; }. molecule bh_h2p {; 1 2; B 0.10369114 0.00000000 0.00000000; H -1.13269886 0.00000000 0.00000000; H 3.00000000 0.37149000 0.00000000; H 3.00000000 -0.37149000 0.00000000; }. set basis cc-pvdz; set scf_type df; set guess sad; set freeze_core true; set e_convergence 8; set d_convergence 7. set reference uhf; set mp2_type cd; energy('mp2'); print_variables(). compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST. ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914741; REF Energy (a.u.) : -25.94513055914741; Alpha-Alpha Contribution (a.u.) : -0.00171224403804; Alpha-Beta Contribution (a.u.) : -0.05664223456972; Beta-Beta Contribution (a.u.) : -0.00005535856885; Scaled_SS Correlation Energy (a.u.): -0.00058920086896; Scaled_OS Correlation Energy (a.u.): -0.06797068148366; CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150004; CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408805; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973553; CD-MP2 Correlation Energy (a.u.) : 0.02352520344587; CD-MP2 Total Energy (a.u.) : -25.92160535570154; ======================================================================= ; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244:1240,energy,energy,1240,https://psicode.org,https://github.com/psi4/psi4/issues/244,12,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"iirc, @jeffschriber is going to take up bridging between psiapi tddft by @robertodr (atop QC guts by various) and ~`energy(""tddft"")` for users.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1836:116,energy,energy,116,https://psicode.org,https://github.com/psi4/psi4/issues/1836,1,['energy'],['energy']
Energy Efficiency,"il_on_maxiter false; dft_nuclear_scheme SBECKE; dft_radial_scheme EM; dft_radial_points 99; dft_spherical_points 590; dft_vv10_radial_points 50; dft_vv10_spherical_points 194; dft_pruning_scheme robust; dft_vv10_postscf False; wcombine False; }; molecule mol {; 0 1; C 0.9314972462818318 9.553873448534286 1.4618215727211896; C 0.407816021141855 8.469506309378442 2.18786320317928; C 0.8158282265296265 7.159078273321417 1.778073368593668; C 1.6705486753474763 6.941146237307343 0.7209312466052733; C 2.2362488662446047 8.008509869086277 0.003971742160492786; C 1.911850027633602 9.341079539288122 0.4146901215657727; H 0.614495362639488 10.566900793575911 1.4754165926364617; H -0.36704844148631577 8.614110059906363 3.04421928826377; H 0.4567894628980789 6.157197048912012 2.369426098541459; H 1.8364925212621395 5.872552432013023 0.3910028702339573; H 2.9471948988553818 7.873466587177986 -0.782748863606265; H 2.4659886000145983 10.188822366489614 -0.03294075189628659; units angstrom; no_reorient; no_com; symmetry c1; }; energy('pbe'); ```. And below is the full file that is an example of one I ran into the hang with (note that if I run it again, it usually runs just fine... I have only noticed this horrible hang behavior because I am running a _very large_ number of calcs on a daily basis, and eventually get unlucky!). Note that when things hang, they hang on the very first step of the first SCF run and _only_ there. I think that is because if you aren't unlucky and `lebedev_mapping_` gets successfully populated, there's no more hangs that can happen. (Sorry the below is LONG, I wanted to reproduce exactly all settings that went into a run, in case they are important. It is hard to figure out the ""minimal example"" as the crashes are rare _enough_ to make it very hard to reproduce them ""in captivity""). ```; np.set_printoptions(threshold=sys.maxsize); set DF_INTS_NUM_THREADS = 16; set freeze_core 1; set {; basis def2-tzvppd; guess sad; fail_on_maxiter false; dft_nuclear_scheme ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735:4387,energy,energy,4387,https://psicode.org,https://github.com/psi4/psi4/issues/2735,1,['energy'],['energy']
Energy Efficiency,"ill a problem with documentation (http://www.psicode.org/psi4manual/1.2/molden.html):. This is a fully working example:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }; set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); nmopi = wfn.nmopi(); Da_so = wfn.Da(); Ca_inv = core.Matrix(""CA inv"", nmopi, nmopi); Ca_inv.copy(wfn.Ca()); Ca_inv.general_invert(); Da_mo = Matrix.triplet(Ca_inv, Da_so, Ca_inv, False, False, True); # Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False) # line from documentation; molden(wfn, 'ccsd_no.molden', density_a=Da_mo); ```. Loading this into Molden gives normals results:. ```. COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ```. When following the documentation, I got:. ```; COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -94.4305; H -12.0740; H -12.0736; ; Sum of Mulliken Charges: ********; ```. (FYI: my actual intention is not to visualize in Molden, but this is just an easy check.). Besides the documentation, there are some additional minor issues. I'll make a list here:. - [ ] Fix docs.; - [ ] When running the input for a second time, the new output is appended to the existing molden file, which is never useful.; - [ ] The current approach is not the most efficient, nor convenient: the user first has to compute a pseudo-inverse and then in the `molden` function a matrix is diagonalized. This can be done in one step by performing a generalized eigenvalue decomposition. This could happen inside the `molden` function, but then the API would need to change, because that would require the density matrix in the AO basis as input.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1485:1298,Charge,Charges,1298,https://psicode.org,https://github.com/psi4/psi4/issues/1485,3,"['Charge', 'efficient']","['Charges', 'efficient']"
Energy Efficiency,"ils; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Unused function `MOInfoBase::correlate` is removed; - [x] The only thing the `MOInfoBase` dtor does is call `MOInfoBase::cleanup()`, an empty function. Removed both.; - [x] Moved the contents of `MOInfo::free_memory()` into its only caller, the `MOInfo` dtor; - [x] Added a lot of new machine-readable docstrings, moved some existing ones; - [x] Some ""obsolete code"", commented out a long time ago is deleted from `moinfo_mappings.cc`; - [x] Moved the `double** scf` MO array and the `get_scf_mos()` getter from `MOInfoBase` to `MOInfo` and made the array private; - [x] Moved the contents of `MOInfoBase::startup()` into its only caller, the `MOInfoBase` ctor; - [x] Moved `MOInfoBase::nmo` to `MOInfo` and made it private; - [x] Made the molecular charge `const` and private in `MOInfoBase`; - [x] Made `MOInfoBase::sopi` private, added a protected getter fn to give access in derived classes; - [x] Made `MOInfoBase::nso`, `MOInfoBase::nuclear_energy` and `MOInfoBase::irr_labs` private; - [x] All functions in `MOInfoBase` that have previously returned copies of `std::vector` members now return `const&` to the vector in the object, avoiding a potential copy.; - [x] Since `MOInfoBase::silent` is only used in the ctor of `MOInfo,`, I removed it from `MOInfoBase` and `MOInfoSCF`; - [x] Inlined `MOInfo::get_actv(size_t i)` and `MOInfo::get_docc(size_t i)` as both were only called once. Since these overloads are now gone from `MOInfo`, it can now just use `get_docc()` and `get_actv()` from `MOInfoBase` instead of having to reimplement or explicitly inherit them. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing; - [x] Errors in the full test suite appear to be unrelated to `libmoinfo`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3155:2392,charge,charge,2392,https://psicode.org,https://github.com/psi4/psi4/pull/3155,1,['charge'],['charge']
Energy Efficiency,"ime = 594 seconds = 9.90 minutes. **\* tstart() called on shukla-pc.localdomain; **\* at Thu Oct 16 11:16:51 2014. ```; **************************************************; * TRANSQT2: Program to transform integrals from *; * the SO basis to the MO basis. *; * *; * Daniel, David, & Justin *; **************************************************. Input parameters:; -----------------; Wave function = SCF; Backtransform = No; Print Level = 1; Print TEIs = No; Reference wfn = RHF; Derivative = None; Delete TEI File = Yes; Memory (Mbytes) = 5000.0; Cache Level = 2; Cache Type = LRU; Chkpt Parameters:; --------------------; Number of irreps = 1; Number of SOs = 246; Number of MOs = 246; Number of active MOs = 246. Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; A 246 14 33 0 199 0. Nuclear Rep. energy (chkpt) = 697.11317829643781; SCF energy (chkpt) = -535.97469065986911. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 2; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on shukla-pc.localdomain at Thu Oct 16 11:29:13 2014; Module time:; user time = 259.08 seconds = 4.32 minutes; system time = 51.47 seconds = 0.86 minutes; total time = 742 seconds = 12.37 minutes; Total time:; user time = 781.49 seconds = 13.02 minutes; system time = 67.06 seconds = 1.12 minutes; total time = 1336 seconds = 22.27 minutes. **\* tstart() called on shukla-pc.localdomain; **\* at Thu Oct 16 11:29:13 2014. ---. ```; D E T C I . C. David Sherrill; Matt L. Leininger; 18 June 1999; ```. ---. PARAMETERS: ; EX LEVEL = 2 H0 BLOCKSIZE = 400; VAL EX LEVEL = 0 H0 GUESS SIZE= 400; H0COUPLINGSIZE= 0 H0 COUPLING = no; NUM PRINT = 20; MAXITER = 12 FREEZE CORE = yes; NUM ROOTS = 10 ICORE = 1; PRINT = 1 FCI = no; R CONV = 1.00e-04 MIXED = yes; E CONV = 1.00",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:14440,energy,energy,14440,https://psicode.org,https://github.com/psi4/psi4/issues/62,1,['energy'],['energy']
Energy Efficiency,implement adaptable reference for closed/open-shell,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/118:10,adapt,adaptable,10,https://psicode.org,https://github.com/psi4/psi4/issues/118,1,['adapt'],['adaptable']
Energy Efficiency,inconsistent cd-mp2 energy,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244:20,energy,energy,20,https://psicode.org,https://github.com/psi4/psi4/issues/244,1,['energy'],['energy']
Energy Efficiency,"indow computer to debug, since it's likely a scratch/PSIO issue; * the answers in sapt-ecp test are probably themselves wrong b/c of #1968 ; * further implications for sapt probably need to be thought through like for frozen core, esp for Ca2+ type monomers; * any fixes should be rolled out to all three SAPT codes -- I bet the FC is only for Ed's, too. mac vs win here; ```; ---------------------------------------------------------		 ---------------------------------------------------------; SCF						 SCF; by Justin Turney, Rob Parrish, Andy Simmonett			 by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith				 and Daniel G. A. Smith; RHF Reference					 RHF Reference; 1 Threads, 500 MiB Core				 1 Threads, 500 MiB Core; ---------------------------------------------------------		 ---------------------------------------------------------; 									 >; ==> Geometry <==								 ==> Geometry <==; 									 >; Molecular point group: c1							 Molecular point group: c1; Full point group: C1							 Full point group: C1; 									 >; Geometry (in Angstrom), charge = 2, multiplicity = 1:			 Geometry (in Angstrom), charge = 2, multiplicity = 1:; 									 >; Center X Y Z 		 Center X Y Z ; ------------ ----------------- ----------------- -------------		 ------------ ----------------- ----------------- -------------; Gh(H) -2.335920635844 1.120167395493 0.00039069		 Gh(H) -2.335920635844 1.120167395493 0.00039069; Gh(H) -2.452373635844 -1.068291604507 0.00055169		 Gh(H) -2.452373635844 -1.068291604507 0.00055169; Gh(O) -1.568456635844 -0.046200604507 0.00024869		 Gh(O) -1.568456635844 -0.046200604507 0.00024869; CA 0.748527364156 0.017183395493 -0.00012330		 CA 0.748527364156 0.017183395493 -0.00012330; 									 >; Running in c1 symmetry.							 Running in c1 symmetry.; 									 >; Rotational constants: A = 6.96289 B = 0.22986 C = 0		 Rotational constants: A = 6.96289 B = 0.22986 C = 0; Rotational constants: A = 208742.34059 B = 6890.97828 C = 6670		 Rotational ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3072:1580,charge,charge,1580,https://psicode.org,https://github.com/psi4/psi4/issues/3072,2,['charge'],['charge']
Energy Efficiency,"ine in the code). PKJK has some amount of control over which subalgorithm is utilized already - the `PK_ALGO` keyword specifies whether the Reorder or Yoshimine out-of-core algorithm is to be used, if an out-of-core algorithm is used; while the `PK_NO_INCORE` keyword disables the InCore PK algorithm and forces one of the out-of-core algorithms to be used. If the functionality of `PK_NO_INCORE` seems familiar, that's because it is - it is effectively the _exact_ same thing as `SCF_SUBTYPE=OUT_OF_CORE` for MemDFJK (in https://github.com/psi4/psi4/pull/2848) and DiskDFJK (in https://github.com/psi4/psi4/pull/2924). The goal of this PR is to clean that up; `PK_NO_INCORE` is replaced by `SCF_SUBTYPE` for PKJK. `SCF_SUBTYPE=OUT_OF_CORE` has the exact same effect that `PK_NO_INCORE=TRUE` had previously. `SCF_SUBTYPE=AUTO` has PKJK select in-core or out-of-core by default, as per usual. Finally, `SCF_SUBTYPE=INCORE` allows PKJK to force-execute its in-core algorithm, a new functionality for PKJK as far as I am aware. As usual with `SCF_SUBTYPE`, setting it to `INCORE` without allocating sufficient memory to Psi4 will throw an exception. ## User API & Changelog headlines; - [X] The `PK_NO_INCORE` keyword has been removed.; - [X] The `SCF_SUBTYPE` keyword has been added for PKJK. `SCF_SUBTYPE=AUTO` has PKJK select the subalgorithm by default. `SCF_SUBTYPE=OUT_OF_CORE` forces PKJK to use one of the two out-of-core algorithms (equivalent to `PK_NO_INCORE=TRUE` previously). `SCF_SUBTYPE=INCORE` forces PKJK to use its in-core algorithm, and throws an exception if insufficient memory is allocated. ## Dev notes & details; - [X] The `PK_NO_INCORE` keyword for PKJK has been replaced with the new `SCF_SUBTYPE` keyword. ## Questions; -N/A. ## Checklist; - [X] Tests added for any. new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2926:2221,allocate,allocated,2221,https://psicode.org,https://github.com/psi4/psi4/pull/2926,1,['allocate'],['allocated']
Energy Efficiency,"ing some keywords. I don't know how to deprecate these. If they're provided as module-level keywords, then I don't know the technical details of how you would raise a warning message. The bigger problem is when they're global keywords. DFOCC still uses ""level shifting"", so I can only raise a warning when I know what module the user is in. Thoughts on how to handle this?; * Should we be losing ""level shifting""? We can add _damping_ to `libdiis` if there's demand for it. I think there are better things to do with my time. ## Quick Test Status; * Switching out the DIIS version caused the `omp2p5-2` test's OMP2.5 energy to fall outside convergence criteria, again emphasizing how unstable orbital convergence in OCC is. We'll find out what the actual value is by the time I'm done.; * Losing ""level shifting"" was enough to break the `ocepa-grad2` test. This test asks for a higher-than-normal convergence from OCC, so that's no surprise. (I imagine Psi ups the energy convergence default when the user requests a gradient.) As a temp fix, I lowered the demanded energy convergence from 8 to 7. Even after that, we're outside the test tolerance, so I changed the value to boot. If anybody is dying to know the correct answer, I can run it on my Python code.; * `omp2-2` encountered oscillatory convergence, and I responded by lowering the convergence we seek. Again, coupling amplitude and orbital DIIS will break the oscillations and render this test hack unnecessary.; * We may have lost other full tests, but we'll get them back at the end. ## So Lori Knows What to Put in Changelog; - [x] Overhauled orbital convergence in the OCC module. As a result, the `level_shift` and `do_level_shift` keywords have been removed. Contact the developers if you've found a case where the new convergence is worse than old!. ## Checklist; - [x] [Quick tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783:3590,energy,energy,3590,https://psicode.org,https://github.com/psi4/psi4/pull/1783,1,['energy'],['energy']
Energy Efficiency,"ing to narrow the points of data transfer. again, there's an outline at the top of the file.; * `driver_nbody.py` — big modifications, might be net deletion of code lines. Lots of renaming of variables. Some bugs fixed -- I can only hope more than were added. Docstrings and code outline should be current. I didn't rework multilevel (separate file) except to make gradient run and allow different order of keys in user `levels` kwarg. I wouldn't bother with the diff. . ## Todos. - [x] `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - [x] any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - [x] extrapolation functions for composite need to be registered with register_xtpl_function; - [x] CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - [x] no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass ref_gradient array to test on or `set findif fd_project` T/F explicitly to control.; - [x] `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. json_ret is now an object, so `.` access, not dictionary. The old schema runner uses a schema circa pre-2018 and we've warned it's deprecated for about a year, so I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:3265,energy,energy,3265,https://psicode.org,https://github.com/psi4/psi4/pull/2575,2,['energy'],['energy']
Energy Efficiency,"input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location. This will allow all current Psi4 input files to be run normally. **History rewrite:**; Over time the Psi4 git repository has accumulated many large files (mostly boost binaries) that are not currently used; however, they still exists within the repository and are downloaded every time the repository is cloned. This has caused Psi4 to balloon to approximately 650MB, while only about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff be",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:2432,reduce,reduce,2432,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['reduce'],['reduce']
Energy Efficiency,"input.dat --loglevel=10 && cat ../tests/tu1-h2o-energy/input.log`; ```; 2022-03-28:21:06:46,635 INFO [psi4.driver.driver:603] Compute energy(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:46,644 DEBUG [psi4.driver.driver:604] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Compute gradient(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:47,86 DEBUG [psi4.driver.driver:749] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,455 INFO [psi4.driver.driver:751] Return gradient(): -76.02663273512434; 2022-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2512:1917,energy,energy,1917,https://psicode.org,https://github.com/psi4/psi4/pull/2512,1,['energy'],['energy']
Energy Efficiency,"interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `psi4/src/psi4/adc/diagonalize.cc` with new wrapper. Add check for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `dfoccwave::Tensor2d::diagonalize` with new wrapper. Add check for diagonalization failure.; - [x] Remove vestiges of the diagonalization cutoff from `dfocc`. `dfoccwave::Tensor2d::diagonalize` used to take a ""diagonalization cutoff"" argument, which was passed down to `sq_rsp(...)`. This used to be hardcoded to 1E-10, but went completely defunct when `sq_rsp(...)` started using DSYEV internally (~forever ago",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:2615,allocate,allocates,2615,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['allocate'],['allocates']
Energy Efficiency,"ion by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 7, 2, 2, 2, 0, 5, 4, 5 ] . @DF-RHF iter 2: -5.42420113211885 6.17113e+01 6.71875e-01 DIIS; @DF-RHF iter 3: -208.00917694080209 -2.02585e+02 3.53265e-01 DIIS; Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 8, 2, 2, 3, 0, 4, 4, 4 ] . @DF-RHF iter 4: -213.73836050769307 -5.72918e+00 3.05852e-01 DIIS; @DF-RHF iter 5: -229.29046486569237 -1.55521e+01 1.60752e-01 DIIS; @DF-RHF iter 6: -231.83352362698204 -2.54306e+00 8.54643e-02 DIIS; @DF-RHF iter 7: -233.14739556085581 -1.31387e+00 1.00459e-02 DIIS; @DF-RHF iter 8: -233.26115993293257 -1.13764e-01 6.01984e-03 DIIS; @DF-RHF iter 9: -233.30679760470645 -4.56377e-02 2.25206e-03 DIIS; @DF-RHF iter 10: -233.31593146369286 -9.13386e-03 6.80191e-04 DIIS; @DF-RHF iter 11: -233.31660737631540 -6.75913e-04 2.28951e-04 DIIS; @DF-RHF iter 12: -233.31678610778147 -1.78731e-04 1.58902e-04 DIIS; @DF-RHF iter 13: -233.31696020659965 -1.74099e-04 1.02174e-04 DIIS; @DF-RHF iter 14: -233.31707462571032 -1.14419e-04 1.37466e-05 DIIS; @DF-RHF iter 15: -233.31707485378129 -2.28071e-07 3.16438e-06 DIIS; @DF-RHF iter 16: -233.31707486465362 -1.08723e-08 5.35650e-07 DIIS; Energy converged.; ```. (Are ECP electrons supposed to be included in DOCC?). The listed doubly occupied orbitals are; ```; Doubly Occupied:. 1Ag -1.892135 1B1u 0.256341 1B3u 0.256341; 1B2u 0.256341 2B1u 2.685551 2B3u 2.685551; 2B2u 2.685551 2Ag 3.556568 1B3g 3.556568; 1B2g 3.561885 3Ag 3.561885 1B1g 3.561885; 4Ag 3.830228 5Ag 3.956522 2B2g 3.956522; 2B1g 3.956522 2B3g 3.967605 6Ag 3.967605; 3B1u 4.573133 3B3u 4.573133 3B2u 4.573133; 7Ag 4.839905 4B1u 5.327348 4B3u 5.327348; 4B2u 5.327348 8Ag 5.637776 3B3g 5.637776; ```. (Surely ECP electrons shouldn't be included here?). Switching out the ECP-containing basis for a manually defined Pople basis set resolved all strangeness. Needless to say, basis guess and ECP really don't play nicely. I'll leave it to the people working on ECPs to decide what the right fix is.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1439:1839,Energy,Energy,1839,https://psicode.org,https://github.com/psi4/psi4/issues/1439,1,['Energy'],['Energy']
Energy Efficiency,"ional debug printout is; ```; ============================================================================== ; ================ Performing DF-OREMP iterations... =========================== ; ============================================================================== ; Minimizing DF-REMP-L Functional ; ------------------------------ ; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2 ; ---- --------------- ---------- ----------- ----------- ---------- ; 1 -2211.6030242185 -2.21e+03 1.77e-04 4.91e-03 2.60e-06 ; 2 -2211.6180646887 -1.50e-02 9.31e-05 3.61e-03 1.12e-06 ; Matrix::vector_dot: Size of vector 1: 124357188 ; Matrix::vector_dot: Size of vector 2: 4419324484 . Traceback (most recent call last):; File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 81, in <module>; File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/driver.py"", line 548, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/proc.py"", line 685, in select_lccd; return func(name, **kwargs); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/proc.py"", line 2095, in run_dfocc; dfocc_wfn = core.dfocc(ref_wfn); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/diis.py"", line 375, in extrapolate; coeffs = self.diis_coefficients(); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/diis.py"", line 254, in diis_coefficients; B[i, j] = self.get_dot_product(i, j); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/diis.py"", line 198, in get_dot_product; dot_product += Rix.vector_dot(Rjx). RuntimeError: ; Fatal Error: Matrix::vector_dot: Dimensions do not match!. Error occurred in file: /home/tu/tu_tu/tu_ctibc01/prog/psi4/psi4/psi4/src/psi4/libmints/matrix.cc on line: 1703; The most recent 5 func",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2591:1121,energy,energy,1121,https://psicode.org,https://github.com/psi4/psi4/issues/2591,2,['energy'],['energy']
Energy Efficiency,irtual orbitals in original space: 678; Number of virtual orbitals in truncated space: 640. ==> Memory <==. Total memory requirements: 78825.79 mb; 3-index integrals: 10109.75 mb; CCSD intermediates: 68716.04 mb. <<< warning! >>> switched to low-memory (t) algorithm. memory requirements for CCSD(T): 36451.32 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 26; Number of active occupied orbitals: 74; Number of active virtual orbitals: 640; Number of frozen virtual orbitals: 38. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 393. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -3.045395864164; SS MP2 FNO correction: -1.111907331006; MP2 FNO correction: -4.157303195170. OS MP2 correlation energy: -3.045395864164; SS MP2 correlation energy: -1.111907331006; MP2 correlation energy: -4.157303195170; * MP2 total energy: -1500.355601695273. OS CCSD correlation energy: -3.045395864164; SS CCSD correlation energy: -1.111907331006; CCSD correlation energy: -4.157303195170; * CCSD total energy: -1500.355601695273. Total time for CCSD iterations: 3404.15 s (user); 270.93 s (system); 607 s (total). Time per iteration: inf s (user); inf s (system); inf s (total). *** tstop() called on r3546 at Mon Feb 10 14:43:17 2014; Module time:; user time = 31046.70 seconds = 517.45 minutes; system time = 945.63 seconds = 15.76 minutes; total time = 5144 seconds = 85.73 minutes; Total time:; user time = 33202.74 seconds = 553.38 minutes; system time = 990.31 seconds = 16.51 minutes; total time = 5317 seconds = 88.62 minutes. *** tstart() called on r3546; *** at Mon Feb 10 14:57:28 2014. *******************************************************; * *; * CCSD(T) *; * *; *************************,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34:2055,energy,energy,2055,https://psicode.org,https://github.com/psi4/psi4/issues/34,1,['energy'],['energy']
Energy Efficiency,"is is a draft of the DLPNO-CCSD PR that will be coming in the next few months. The purpose of this is for the developers and research groups to be able to run and test DLPNO-CCSD before it is officially part of the code. . Credit to @JoseMadriaga for the derivations ; [LocalCCSD1to10.pdf](https://github.com/psi4/psi4/files/11114337/LocalCCSD1to10.pdf). Useful References:; [Original DLPNO-CCSD Paper](https://aip.scitation.org/doi/full/10.1063/1.47735); [Sparse Maps II Paper](https://aip.scitation.org/doi/10.1063/1.4939030). Example Input File; ```; memory 20 GB. molecule mol {; 0 1; O 0.705 0.744 0.16; H -0.071 0.264 0.45; H 1.356 0.064 -0.014; symmetry c1; }. set {; basis cc-pVDZ; scf_type df; freeze_core true; pno_convergence normal; }; energy('dlpno-ccsd'); ```. ### Results (Waterclusters in TZ); [Speedups, relative to DF-CCSD]; ![wc_tz_speedups](https://user-images.githubusercontent.com/60559795/228892229-c3269bf9-3386-4861-8660-92a6dcc3685e.jpeg). [Percent Correlation Energy Recovered, relative to DF-CCSD, all >= 99.9%]; ![wc_tz_percent_corr_recovered](https://user-images.githubusercontent.com/60559795/228892322-7c968c62-f874-496c-84e3-06b65c84803d.jpeg). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Implement the DLPNO-CCSD algorithm. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feel free to use this code, it is not fully tested yet, but preliminary tests show encouraging results, and is MUCH faster than conventional CCSD; - [ ] If you benchmark my code, please post results in the thread. ## Questions; - [ ] Question1. ## Checklist; - [ ] Add documentation; - [ ] Add references to terms and equations; - [ ] Tests added for any new features; - [ ]",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2915:1019,Energy,Energy,1019,https://psicode.org,https://github.com/psi4/psi4/pull/2915,1,['Energy'],['Energy']
Energy Efficiency,"is sets that did not work, it will raise the RuntimeError shown below. I have tried placing inside the loop all combinations of `psi4.core.clean()`, `psi4.core.clean_variables()`, and `psi4.core.clean_options()`, but it still does not work. I believe my installation to be fine, as I can manually restart the kernel and obtain all the basis sets required, albeit only after restarting the kernel each time. #### Version; `psi4.__version__`: '1.4a2.dev313'. ```python; --------------------------------------------------------------------; RuntimeError Traceback (most recent call last); <ipython-input-7-95f03e942086> in <module>; 9 ; 10 psi4.set_options({'reference': 'uhf','basis': basis_set}); ---> 11 e, wfn = psi4.energy('hf',return_wfn=True); 12 ; 13 print(""energy ="",e,"" and number of basis functions ="", wfn.basisset().nbf()). /usr/local/psi4/lib/psi4/driver/driver.py in energy(name, **kwargs); 568 shutil.copy(item, targetfile); 569 ; --> 570 wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); 571 ; 572 for postcallback in hooks['energy']['post']:. /usr/local/psi4/lib/psi4/driver/procrouting/proc.py in run_scf(name, **kwargs); 2180 ; 2181 ; -> 2182 scf_wfn = scf_helper(name, post_scf=False, **kwargs); 2183 returnvalue = scf_wfn.energy(); 2184 . /usr/local/psi4/lib/psi4/driver/procrouting/proc.py in scf_helper(name, post_scf, **kwargs); 1511 ); 1512 ; -> 1513 e_scf = scf_wfn.compute_energy(); 1514 for obj in [core, scf_wfn]:; 1515 for pv in [""SCF TOTAL ENERGY"", ""CURRENT ENERGY"", ""CURRENT REFERENCE ENERGY""]:. /usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py in scf_compute_energy(self); 81 self.initialize_jk(self.memory_jk_); 82 else:; ---> 83 self.initialize(); 84 ; 85 try:. /usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py in scf_initialize(self); 195 mints.set_rel_basisset(self.get_basisset('BASIS_RELATIVISTIC')); 196 ; --> 197 mints.one_electron_integrals(); 198 self.initialize_jk(self.memory_jk_, jk=jk);",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1794:1694,energy,energy,1694,https://psicode.org,https://github.com/psi4/psi4/issues/1794,2,['energy'],['energy']
Energy Efficiency,"it off completely past a certain convergence of the density matrix. This PR refactors the inc. Fock framework in the `DFJCOSK` class with the inc. Fock framework from #2155. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Replace old inc. fock. code from `DFJCOSK` PR with the one from #2155; - [x] Move incfock logic from DirectJK to JK; - [x] Cleans up incfock logic by removing extraneous variables like `initial_iteration_`. ## Questions; - [x] What is the best way to handle JK classes that should never use `incfock` (i.e. `MemDFJK`, `CDJK`, etc.) What I currently do is to just set incfock to false in those cases no matter what. Is there a better way?; - [x] Should DirectJK use `incfock` by default or not?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge. Example of incfock use in with refactor (Hexane/jun-cc-pVDZ):; Iterations in which inc. Fock is performed has `INCFOCK` appended to the end.; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -234.79902648013046 -2.34799e+02 0.00000e+00; @RHF iter 1: -235.11334205670366 -3.14316e-01 3.59965e-03 DIIS/ADIIS; @RHF iter 2: -235.33614986245553 -2.22808e-01 1.58174e-03 DIIS/ADIIS/INCFOCK; @RHF iter 3: -235.38008939725930 -4.39395e-02 2.83807e-04 DIIS/ADIIS/INCFOCK; @RHF iter 4: -235.38291465805983 -2.82526e-03 4.64337e-05 DIIS/INCFOCK; @RHF iter 5: -235.38297663987922 -6.19818e-05 1.50376e-05 DIIS/INCFOCK; @RHF iter 6: -235.38298211805841 -5.47818e-06 2.18669e-06 DIIS; @RHF iter 7: -235.38298224217732 -1.24119e-07 6.25234e-07 DIIS; Energy and wave function converged with early screening.; Performing final iteration with tighter screening. @RHF iter 8: -235.38489215328417 -1.90991e-03 8.02480e-05 DIIS; Energy and wave function converged.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682:1628,Energy,Energy,1628,https://psicode.org,https://github.com/psi4/psi4/pull/2682,3,['Energy'],['Energy']
Energy Efficiency,"iter': 1000, ; 'avg_states' : [ 0, 1],; 'avg_weights' : [ 0.5, 0.5 ]; }); ; sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY') . Then, I give you from the OUTPUT FILE the decomposition I obtain : . *******************************************************************; *******************************************************************; ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -93.931448649953467. Active Space Natural occupation numbers:. A 2.000000 A 1.000000 A 1.000000. The 9 most important determinants:. * 1 0.691216 ( 0, 1) 7AX 8AA 9AB ; * 2 0.691216 ( 1, 0) 7AX 8AB 9AA ; * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX ; * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX ; * 5 0.000000 ( 0, 0) 7AX 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB ; * 3 -0.291143 ( 2, 0) 7AB 8AX 9AA ; * 4 0.206936 ( 2, 2) 8AX 9AX ; * 5 0.015212 ( 1, 1) 7AX 9AX ; * 6 0.000000 ( 1, 0) 7AX 8AB 9AA ; * 7 0.000000 ( 0, 1) 7AX 8AA 9AB ; * 8 -0.000000 ( 1, 2) 7AA 8AB 9AX ; * 9 -0.000000 ( 2, 1) 7AB 8AA 9AX ; *******************************************************************; *******************************************************************. As you can see, there is typically the same kind of sign for some determinants sharing a similar coefficient. For example, for the groundstate we have : 0.691216 ( 0, 1) 7AX 8AA 9AB and 0.691216 ( 1, 0) 7AX 8AB 9AA. However, in the context of a singlet spin symmetry, these determinants should present opposite signs. To check this, I used a personal code to build up from scratch the frozen core Hamiltonian ass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008:1816,energy,energy,1816,https://psicode.org,https://github.com/psi4/psi4/issues/2008,1,['energy'],['energy']
Energy Efficiency,"l Energies (a.u.); -----------------------. Doubly Occupied:. 1Ag -25.833682 2Ag -1.076019 1B3u -0.180947; 1B2u -0.180947 1B1u -0.180947. Virtual:. 2B2u 0.442532 2B3u 0.442532 2B1u 0.442532; 3Ag 0.485648 4Ag 1.228480 1B3g 1.228480; 5Ag 1.228480 1B2g 1.228480 1B1g 1.228480; 3B3u 1.526002 3B2u 1.526002 3B1u 1.526002; 6Ag 2.051155 7Ag 3.283338 2B2g 3.283338; 2B3g 3.283338 2B1g 3.283338 8Ag 3.283338; 4B2u 3.331721 4B3u 3.331721 1Au 3.331721; 4B1u 3.331721 5B3u 3.331721 5B2u 3.331721; 5B1u 3.331721 6B2u 5.672254 6B1u 5.672254; 6B3u 5.672254 7B1u 9.267994 7B2u 9.267994; 7B3u 9.267994 8B1u 9.267994 8B3u 9.267994; 2Au 9.267994 8B2u 9.267994 9Ag 9.745165; 3B2g 9.745165 3B1g 9.745165 3B3g 9.745165; 10Ag 9.745165 11Ag 10.965644. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; ```. Energy converged. @RHF Final Energy: -99.45080702230226. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -143.9965313656634294; Two-Electron Energy = 44.5457243433611438; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -99.4508070223022855. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-06 at Fri Jan 8 13:56:55 2016; Module time:; user time = 10.33 seconds = 0.17 minutes; system time = 0.28 seconds = 0.00 minutes; total time = 2 seconds = 0.03 minutes; Total time:; user t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:7977,Energy,Energy,7977,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['Energy'],['Energy']
Energy Efficiency,"l bring it to fruition within the Python-side SCF iteration scheme. The `PCM` object wraps the PCMSolver library and offers one method: `compute_PCM_terms` to calculate the polarization energy **and** the Fock matrix contributions due to the continuum. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); - [x] Moved `HF::print_energies()` Py-side; - [x] Mirror changes introduced in #896 ; - [x] Add tests for density-fitted SCFs (thanks @CDSherrill for pointing this out); * **User-Facing for Release Notes**; - [x] Exposing the `PCM` object to Python.; - [x] Restoring PCM functionality with Py-side iterations.; - [ ] Document behavior for gradients (see question). ## Questions; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?; - The electrostatic potential and apparent surface charge vectors are now dimensioned using a `Dimension` object that keeps track of how many cavity points per irrep there are. This is one step to get PCM fully functional with point group symmetry. It seems to me the integrals are always calculated using C1. How can I get them to be calculated with symmetry?; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a request is made or should the code be routed to use a numerical gradient?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/878:1529,charge,charge,1529,https://psicode.org,https://github.com/psi4/psi4/pull/878,1,['charge'],['charge']
Energy Efficiency,"l). That module can write psi4 header files, which are what's copied here. #### stages; - [x] c-side `physconst.h` updated here CODATA 2010 (Andy c.2012) --> CODATA 2014; - [x] py-side `psi4.driver.constants.physconst.py` updated here, through autogeneration from c-side; - [x] qcdb-side `psi4.driver.qcdb.physconst.py` updated here, through copying and prefixing from py-side; - [x] c-side `masses.h` updated here from undated NIST document (that includes through element 117, so it can't be too old). changing this alone has no effect on the tests.; - [ ] py-side `psi4.driver.qcdb.periodictable` NOT updated here. (so effectively masses are unchanged in this PR.) Later, py-side psi4 will import this new module to get its periodictable data.; - [x] Implications to the test suite:; - [x] lots of nuclear repulsion energies wanted changing. I took them at their word; - [x] wherever we tested SCF or SCF+ to 9+ decimals, comparisons failed. I've copied in the new values. energy figures tended to be good beyond 6 decimals. #### PT changes; * Main major change is to Krypton, where the generic (non-isotope) element had been assigned to the wrong isotope. Then there's lots of unstable elements that had the same thing wrong, so the below generic elements differ by 1–13 [u]. Only other element to differ by > 1.e-5 is Darmstadtium.; ```; Checking z2el vs. Psi4 ... Checking el2z vs. Psi4 ... Checking (1e-05) el2mass vs. Psi4 ...; Element Kr differs by 1.99911300: 83.9114977282 (this) vs 85.910610729 (psi); Element Tc differs by 0.99904235: 97.9072124 (this) vs 98.906254747 (psi); Element At differs by 1.00034837: 209.9871479 (this) vs 210.987496271 (psi); Element Fr differs by 1.00218427: 223.0197360 (this) vs 222.01755173 (psi); Element Ra differs by 2.00565999: 226.0254103 (this) vs 228.031070292 (psi); Element Pu differs by 2.00546269: 244.0642053 (this) vs 242.058742611 (psi); Element No differs by 4.00778887: 259.10103 (this) vs 255.093241131 (psi); Element Lr differs by 6.014326",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1213:1602,energy,energy,1602,https://psicode.org,https://github.com/psi4/psi4/pull/1213,1,['energy'],['energy']
Energy Efficiency,"ld be a conventional mp2 calculation afaik; ```; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // DFMP2 //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: (HEAVY-AUG-CC-PV(D+D)Z AUX); Role: RIFIT; Keyword: DF_BASIS_MP2; atoms 1-2 entry O line 208 file /opt/psi/4/master/share/psi4/basis/heavy-aug-cc-pvdz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; ROHF-MBPT(2) Wavefunction, 4 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 144; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 2 9 7 37 37 0; BETA 2 7 5 39 39 0; --------------------------------------------------------. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -149.6217688382015183 [Eh]; Singles Energy = -0.0130981432734322 [Eh]; Same-Spin Energy = -0.1180463523157988 [Eh]; Opposite-Spin Energy = -0.2655370704826780 [Eh]; Correlation Energy = -0.3966815660719090 [Eh]; Total Energy = -150.0184504042734375 [Eh]; -----------------------------------------------------------; ================> DF-SCS-MP2 Energies <==================; -----------------------------------------------------------; SCS Same-Spin Scale = 0.3333333333333333 [-]; SCS Opposite-Spin Scale = 1.2000000000000000 [-]; SCS Same-Spin Energy = -0.0393487841052663 [Eh]; SCS Opposite-Spin Energy = -0.3186444845792136 [Eh]; SCS Correlation Energy = -0.3710914119579120 [Eh]; SCS Total Energy = -149.9928602501594241 [Eh]; -----------------------------------------------------------; ```. I haven't run any other CBS hessians to see if the issue appears where psi4 might have analytic gradient",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:7271,Energy,Energy,7271,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['Energy'],['Energy']
Energy Efficiency,"le = False; pickle_kwargs = {'encoding': 'ASCII', 'fix_imports': True}. def read_array(fp, allow_pickle=False, pickle_kwargs=None):; """"""; Read an array from an NPY file. Parameters; ----------; fp : file_like object; If this is not a real file object, then this may take extra memory; and time.; allow_pickle : bool, optional; Whether to allow writing pickled data. Default: False. .. versionchanged:: 1.16.3; Made default False in response to CVE-2019-6446. pickle_kwargs : dict; Additional keyword arguments to pass to pickle.load. These are only; useful when loading object arrays saved on Python 2 when using; Python 3. Returns; -------; array : ndarray; The array from the data on disk. Raises; ------; ValueError; If the data is invalid, or allow_pickle=False and the file contains; an object array. """"""; version = read_magic(fp); _check_version(version); shape, fortran_order, dtype = _read_array_header(fp, version); if len(shape) == 0:; count = 1; else:; count = numpy.multiply.reduce(shape, dtype=numpy.int64). # Now read the actual data.; if dtype.hasobject:; # The array contained Python objects. We need to unpickle the data.; if not allow_pickle:; > raise ValueError(""Object arrays cannot be loaded when ""; ""allow_pickle=False""); E ValueError: Object arrays cannot be loaded when allow_pickle=False. miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/format.py:692: ValueError; _____________________________________________________ test_psi4_cc _____________________________________________________. @pytest.mark.smoke; def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psi4.core.clean(); h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""). psi4.set_options({""basis"": '6-31G**'}). > psi4.optimize('ccsd'). miniconda3/envs/psi/lib/python3.6/site-packages/psi4/tests/test_psi4.py:39:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; miniconda3/envs/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:2935,reduce,reduce,2935,https://psicode.org,https://github.com/psi4/psi4/issues/1611,1,['reduce'],['reduce']
Energy Efficiency,"led); 	263 - omp2-3 (Failed); 	274 - omp3-3 (Failed); ```. The error message for `pywrap-checkrun-rhf` is also consistent with convergence issues:; ```; 45 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 3.01e-15; 46 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 1.73e-15; 47 -75.0144633211 -1.42e-14 1.85e-05 1.42e-04 9.95e-16; 48 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 5.65e-16; 49 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 3.27e-16; 50 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 1.88e-16; ======================== OCEPA IS NOT CONVERGED IN 50 ITERATIONS ============; Traceback (most recent call last):; File ""/Users/fevange/Source/psi4/objdir-Debug/stage/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 54, in <module>; File ""/Users/fevange/Source/psi4/objdir-Debug/stage/lib/psi4/driver/driver.py"", line 711, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/fevange/Source/psi4/objdir-Debug/stage/lib/psi4/driver/procrouting/proc.py"", line 752, in select_olccd_gradient; return func(name, **kwargs); File ""/Users/fevange/Source/psi4/objdir-Debug/stage/lib/psi4/driver/procrouting/proc.py"", line 2147, in run_occ_gradient; occ_wfn = core.occ(ref_wfn); RuntimeError:; Fatal Error: OCC iterations did not converge; Error occurred in file: /Users/fevange/Source/psi4/psi4/src/psi4/occ/occ_iterations.cc on line: 363; The most recent 5 function calls were:; Printing out the relevant lines from the Psithon --> Python processed input file:; for method in Earray:; water.reset_point_group(sym); water.fix_orientation(True); water.update_geometry(); banner('Testing %s' % (method)); --> G, wfn = gradient(method, return_wfn=True); ans = wfn.energy(); print('%16s\t%s\t%s\t%s' % (method, water.schoenflies_symbol(), variable('CURRENT ENERGY') - ans, ans)); clean(); print(' Checking gradient methods (excited state) ...'); Earray = [; Psi4 stopped on: Friday, 31 January 2020 05:10PM; Psi4 wall time for execution: 0:00:06.47; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1793:2203,energy,energy,2203,https://psicode.org,https://github.com/psi4/psi4/issues/1793,2,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"les and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 393. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -3.045395864164; SS MP2 FNO correction: -1.111907331006; MP2 FNO correction: -4.157303195170. OS MP2 correlation energy: -3.045395864164; SS MP2 correlation energy: -1.111907331006; MP2 correlation energy: -4.157303195170; * MP2 total energy: -1500.355601695273. OS CCSD correlation energy: -3.045395864164; SS CCSD correlation energy: -1.111907331006; CCSD correlation energy: -4.157303195170; * CCSD total energy: -1500.355601695273. Total time for CCSD iterations: 3404.15 s (user); 270.93 s (system); 607 s (total). Time per iteration: inf s (user); inf s (system); inf s (total). *** tstop() called on r3546 at Mon Feb 10 14:43:17 2014; Module time:; user time = 31046.70 seconds = 517.45 minutes; system time = 945.63 seconds = 15.76 minutes; total time = 5144 seconds = 85.73 minutes; Total time:; user time = 33202.74 seconds = 553.38 minutes; system time = 990.31 seconds = 16.51 minutes; total time = 5317 seconds = 88.62 minutes. *** tstart() called on r3546; *** at Mon Feb 10 14:57:28 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 16; available memory = 83711.64 mb; memory requirements = 36451.32 mb. ```. PSIO error (from stderr). ```; PSIO_ERROR: unit = 260, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); Traceback (most recent call last):; File ""<string>"", line 77, in <module>; File ""/apps/psicode/4.0b5.1/share/psi/python/driver.py"", line 570, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/apps/psicode/4.0b5.1/share/psi/python/proc.py"", line 2289, in run_fnodfcc; psi4.fnocc(); RuntimeError: PSIO Error; file: /short/z00/cyl900/psi4/psi4public/src/lib/libpsio/error.cc; line: 1p; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34:3432,energy,energy,3432,https://psicode.org,https://github.com/psi4/psi4/issues/34,2,['energy'],['energy']
Energy Efficiency,"lete 2nd definition as done in this PR?; - [x] minor ?: why is `bp86d1` building upon b3lyp as [here](https://github.com/psi4/psi4/pull/339/commits/cfcbf085305c8033186fb3c68c1b96f19688a939#diff-9e8e3243e87430585c59e5a407f6bf69R2114)? Ok to make it build upon bp86 as done in this PR?; ## Status; - [x] Ready to go. B3LYP3/5 test input. You'll need [this](https://raw.githubusercontent.com/drhaney/psi4/master/share/basis/6-31g_2df_p_.gbs) basis set. ```; # all non-psi4 references from http://forum.psicode.org/t/b3lyp-defect-compatibility-with-gamess-and-gaussian/193. # @jamont conditions. molecule {; 0 1; O; H 1 rOH; H 1 rOH 2 aHOH. rOH = 0.9622; aHOH = 103.84; }. set basis 6-311g(d); set scf_type pk; set e_convergence 9. e = energy('b3lyp'); compare_values(-76.4338100903, e, 7, 'b3lyp3 vs Gaussian'); compare_values(-76.4338100577, e, 7, 'b3lyp3 vs Gamess'). clean(). # @drhaney conditions. set basis 6-31G(2df,p); #set dft_spherical_points 590; #set dft_radial_points 99. e = energy('b3lyp'); compare_values(-76.4293315991, e, 5, 'b3lyp3 vs Gamess'); # GAMESS-VWNrpa_1 -76.4293 3159 91; # Psi4-VWNrpa_3 -76.4293 5426 98; # Gaussian-09 -76.4256 2566 74; # LAB psi4 -76.4293 4111 93 # large grid VWN3RPA_C VWN5RPA_C. e = energy('b3lyp5'); compare_values(-76.39221287, e, 5, 'b3lyp5 vs NWChem'); # GAMESS-VWN_5 -76.3922 0295 70; # Nchem-VWN_3 -76.3922 1287 ; # Psi4-VWN_3 -76.3922 2551 29; # LAB psi4 -76.3922 1237 09 # large grid VWN3_C VWN5_C. clean(). # @hokru conditions. molecule {; O -1.769142 -0.076181 0.000000; H -2.065745 0.837492 0.000000; H -0.809034 0.001317 0.000000; }. ### e = energy('b3lyp'); ### compare_values(-76.46290368244, e, 5, 'b3lyp3 vs Turbomole'); ### #For VWN3 (same as Gaussian) I get; ### #-76.46290368244 (Turbomole ""B3LYP_Gaussian""); ### #-76.46290355576 (psi4 energy('b3lyp')); ### #-76.46290344335 (nwchem default vnw-1-rpa); ### #VNW-1-rpa in nwchem seems to be VWN3 in Turbomole/Gaussian; ### ; ### e = energy('b3lyp5'); ### compare_values(-76.42582290565, e",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/339:2361,energy,energy,2361,https://psicode.org,https://github.com/psi4/psi4/pull/339,1,['energy'],['energy']
Energy Efficiency,"libpsiutil and libparallel2 may be compiled as dynamic libraries. Attached patch solves the issue. diff -up psi4public-1881450f30d3bd2ac91dbc4fc6a4eaa5c9f03ae5/src/lib/libparallel2/CMakeLists.txt.staticlib psi4public-1881450f30d3bd2ac91dbc4fc6a4eaa5c9f03ae5/src/lib/libparallel2/CMakeLists.txt; --- psi4public-1881450f30d3bd2ac91dbc4fc6a4eaa5c9f03ae5/src/lib/libparallel2/CMakeLists.txt.staticlib 2015-08-05 10:37:14.000000000 -0700; +++ psi4public-1881450f30d3bd2ac91dbc4fc6a4eaa5c9f03ae5/src/lib/libparallel2/CMakeLists.txt 2015-09-08 13:11:35.454250886 -0700; @@ -14,7 +14,7 @@ add_subdirectory(CommEnvGuts); add_subdirectory(Schedulers); add_subdirectory(TaskJobGuts); add_subdirectory(Util); -add_library(parallel2 ${LPSRC} ${CEGSRC} ${SSRC} ${TJGSRC} ${UTILSRC}); +add_library(parallel2 STATIC ${LPSRC} ${CEGSRC} ${SSRC} ${TJGSRC} ${UTILSRC}); set_property(GLOBAL APPEND PROPERTY LIBLIST parallel2); if(BUILD_CUSTOM_BOOST); add_dependencies(parallel2 custom_boost); diff -up psi4public-1881450f30d3bd2ac91dbc4fc6a4eaa5c9f03ae5/src/lib/libPsiUtil/CMakeLists.txt.staticlib psi4public-1881450f30d3bd2ac91dbc4fc6a4eaa5c9f03ae5/src/lib/libPsiUtil/CMakeLists.txt; --- psi4public-1881450f30d3bd2ac91dbc4fc6a4eaa5c9f03ae5/src/lib/libPsiUtil/CMakeLists.txt.staticlib 2015-08-05 10:37:14.000000000 -0700; +++ psi4public-1881450f30d3bd2ac91dbc4fc6a4eaa5c9f03ae5/src/lib/libPsiUtil/CMakeLists.txt 2015-09-08 13:11:06.531702529 -0700; @@ -16,7 +16,7 @@ set(SRC ProgressBar.h; Implementations/ProgressBar.cc; Implementations/Exception2.cc; ); -add_library(PsiUtil ${SRC}); +add_library(PsiUtil STATIC ${SRC}); add_dependencies(PsiUtil parallel2); include_directories(libparallel2); set_property(GLOBAL APPEND PROPERTY LIBLIST PsiUtil)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/178:629,Schedul,Schedulers,629,https://psicode.org,https://github.com/psi4/psi4/issues/178,1,['Schedul'],['Schedulers']
Energy Efficiency,"lip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz.gbs ; atoms 2 entry H line 40 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 976 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; Gh(LI) 0.000000000000 0.000000000000 -1.000000000000 7.016003436600; H 0.000000000000 0.000000000000 1.000000000000 1.007825032230. Running in c1 symmetry. Rotational constants: A = ************ B = 2.10095 C = 2.10095 [cm^-1]; Rotational constants: A = ************ B = 62984.77227 C = 62984.77227 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is MEM_DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: AUG-CC-PVDZ; Blend: AUG-CC-PVDZ; Number of shells: 14; Number of basis function: 32; Number of Cartesian functions: 34; Spherical Harmonics?: true; Max angular momentum: 2. => Loading Basis Set <=. Name: (AUG-CC-PVDZ AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1 entry LI line 59 file /home/filip/software/psi4-1.4rc/share/psi4/basis/def2-qzvpp-jkfit.gbs ; atoms 2 entry H line 70 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz-jkfit.gbs . Computing basis projection from 3-21G to AUG-CC-PVDZ. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 32 32 0 0 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:6674,Charge,Charge,6674,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Charge'],['Charge']
Energy Efficiency,"lowing total energies, where _opt refers to the neutral GS RHF molecule and +_homo-i refers to the UHF cation, on the GS RHF geometry, with the hole in the homo-ith MO. [psi4_11.tar.gz](https://github.com/psi4/psi4/files/3469634/psi4_11.tar.gz). (PSI4 1.1); water_opt -7.606667516613838e+01; water+_homo -7.566072290801020e+01; water+_homo-1 -7.558091679634278e+01; water+_homo-2 -7.541230326047109e+01; water+_homo-3 -7.423771580655676e+01; water+_homo-4 -5.571830715553878e+01. Noticeably, pulling an electron from the homo-3 and homo-4 require some crafty work, but **I have managed to converge this calculations with several basis sets and in DFT, too, using damping and other tricks, all in PSI4 1.1. Energies are qualitatively the same alway**s. All the output files are attached, in psython mode (I could not make MOM to work from python). Now then, I wanted to check some things, so I printed the density matrices from .fchk files and plugged them to PySCF, projecting them properly and so on, just to evaluate the energy with UHF on top of those density matrices. I get the same energies for the neutral molecule and the homo, homo-1 and homo-2 cations. I get VERY different energies from the homo-3 and homo-4 states. Now thats weird, because the energies above make sense. So I assumed, okay, maybe there's something odd with the .fchk writer module. I've seen its been updated, so lets try a newer version of PSI4. So I got the 1.4a2.dev78 and tried to run my calculations using the newest available dev release, from scratch. I get exactly the same energies, except for the homo-4 state, for which I get some very funky results:. [psi4_14.tar.gz](https://github.com/psi4/psi4/files/3469641/psi4_14.tar.gz). (Psi4 1.4a2...); water_opt -7.606667516615393e+01; water+_homo -7.566072290809453e+01; water+_homo-1 -7.558091679647397e+01; water+_homo-2 -7.541230326053801e+01; water+_homo-3 -7.423771580754870e+01; water+_homo-4 **9.360901611130924e+00**. And that's the story! I would try to r",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1692:1350,energy,energy,1350,https://psicode.org,https://github.com/psi4/psi4/issues/1692,1,['energy'],['energy']
Energy Efficiency,"luser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_convergence to 1e-8 instead of 1e-6; 'num_roots': 2,; #'frozen_docc':[2],; 'active':[16]}); E0_casci = psi4.energy('fci'); E1_casci = psi4.variable('CI ROOT 1 TOTAL ENERGY'); return E0_casci, E1_casci. output = open(""formaldimine_CASCI-16e-16o.dat"", ""w""). phi = 90; start_angle = 90; end_angle = 160; number_of_steps = abs(end_angle - start_angle) + 1; print(""{:10s} {:10s} {:10s}"".format(""alpha"",""E0"",""E1""), file = output); for alpha in np.linspace(start_angle,end_angle,number_of_steps):; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci)); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci), file = output); ```. does anyone understand the error ? Again, replacing active = 16 by active = 14 works just fine, so I first assumed that it was a memory issue but the error does not mention anything about memory. Note that I ask for 16gb memory on the cluster for this calculation.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959:2109,energy,energy,2109,https://psicode.org,https://github.com/psi4/psi4/issues/1959,2,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"m trying to use the orbitals from one SCF as the guess for computations on similar structures. I'm trying to follow this procedure: [https://psicode.org/psi4manual/master/scf.html#restarting-the-scf](https://psicode.org/psi4manual/master/scf.html#restarting-the-scf). I'm using Psi4 1.5 e9f4d6d on windows subsystem linux. The input file for the initial energy is:; ```py; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C 1.13408 -0.39513 0.82671; C 0.24384 -0.10727 1.77918; C 1.25947 0.48184 -0.37564; C -1.70320 -0.60897 -0.07371; C -1.08313 0.35853 -0.75350; O 0.15798 0.21455 -1.28105; H 1.61155 -1.37871 0.79725; H -0.00411 -0.81057 2.57479; H -0.26633 0.85763 1.80344; H 2.16195 0.28247 -0.96305; H 1.24281 1.54792 -0.09693; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; }. nrg, wfn = energy('M06-2X', return_wfn=True); wfn.to_file(""test_restart""); ```. This creates a ""test_restart.npy"" file. I then try to compute the energy for the same molecule using this test_restart.npy file and a different input file:. ```py; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C 1.13408 -0.39513 0.82671; C 0.24384 -0.10727 1.77918; C 1.25947 0.48184 -0.37564; C -1.70320 -0.60897 -0.07371; C -1.08313 0.35853 -0.75350; O 0.15798 0.21455 -1.28105; H 1.61155 -1.37871 0.79725; H -0.00411 -0.81057 2.57479; H -0.26633 0.85763 1.80344; H 2.16195 0.28247 -0.96305; H 1.24281 1.54792 -0.09693; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; }. nrg, wfn = energy('M06-2X', return_wfn=True, restart_file=""test_restart""); ```. However, I get the following error :. ```; Traceback (most recent call last):; File ""/home/tony/psi4conda/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kw",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2571:989,energy,energy,989,https://psicode.org,https://github.com/psi4/psi4/issues/2571,1,['energy'],['energy']
Energy Efficiency,"mal (internal) energy at 298.15 [K] -76.00118645 [Eh]. Enthalpy, H_trans = E_trans + k_B * T = E_trans + P * V; Electronic contrib to H beyond E_e 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational contrib to H 1.481 [kcal/mol] 6.197 [kJ/mol] 0.00236046 [Eh]; Rotational contrib to H 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational contrib to H 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301373 [Eh]; Correction H 16.811 [kcal/mol] 70.338 [kJ/mol] 0.02679047 [Eh]; Total H, Enthalpy at 298.15 [K] -76.00024226 [Eh]; *** Absolute enthalpy, not an enthalpy of formation ***. Gibbs free energy, G = H - T * S; Electronic contrib to G beyond E_e 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational contrib to G -8.837 [kcal/mol] -36.975 [kJ/mol] -0.01408304 [Eh]; Rotational contrib to G -2.205 [kcal/mol] -9.226 [kJ/mol] -0.00351383 [Eh]; Vibrational contrib to G 14.440 [kcal/mol] 60.418 [kJ/mol] 0.02301201 [Eh]; Correction G 3.398 [kcal/mol] 14.217 [kJ/mol] 0.00541514 [Eh]; Total G, Gibbs energy at 298.15 [K] -76.02161759 [Eh]; *** Absolute Gibbs energy, not a free energy of formation ***; ```. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Vibrational analysis printing is overhauled for clarity. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] These changes should fend off some problems seen by users. Feel free to suggest edits based on problems that have come your way. ## Checklist; - [x] ~Tests added for any new features~ It's only printing; - [x] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2969:2119,energy,energy,2119,https://psicode.org,https://github.com/psi4/psi4/pull/2969,3,['energy'],['energy']
Energy Efficiency,"mic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 111 111 ; -------------------------; Total 111 111; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -40.20742626722070 -4.02074e+01 0.00000e+00 ; @DF-RKS iter 1: -41.85372076056422 -1.64629e+00 4.64946e-03 DIIS/ADIIS; @DF-RKS iter 2: -42.00985523463992 -1.56134e-01 2.18407e-03 DIIS/ADIIS; @DF-RKS iter 3: -42.04248981983608 -3.26346e-02 7.08822e-04 DIIS/ADIIS; @DF-RKS iter 4: -42.04528563064348 -2.79581e-03 3.01721e-04 DIIS/ADIIS; @DF-RKS iter 5: -42.04589556301210 -6.09932e-04 8.40052e-05 DIIS; @DF-RKS iter 6: -42.04594641312401 -5.08501e-05 2.29544e-05 DIIS; @DF-RKS iter 7: -42.04595101061475 -4.59749e-06 8.73466e-06 DIIS; @DF-RKS iter 8: -42.04595193846246 -9.27848e-07 1.83903e-06 DIIS; @DF-RKS iter 9: -42.04595197043621 -3.19738e-08 1.16291e-06 DIIS; @DF-RKS iter 10: -42.04595197988089 -9.44468e-09 3.03360e-07 DIIS; Energy and wave function converged. ==> Post-Iterations <==. Electrons on quadrature grid:; Ntotal = 31.9999968368 ; deviation = -3.163e-06 . Orbital Energies [Eh]; ---------------------. Doubly Occupied: . 1A -0.966068 2A -0.941808 3A -0.903357 ; 4A -0.853002 5A -0.775302 6A -0.704610 ; 7A -0.641487 8A -0.595780 9A -0.563657 ; 10A -0.563636 11A -0.491248 12A -0.491246 ; 13A -0.424650 14A -0.424646 15A -0.331443 ; 16A -0.331440 . Virtual: . 17A 0.011949 18A 0.011950 19A 0.074448 ; 20A 0.093735 21A 0.124628 22A 0.124636 ; 23A 0.164111 24A 0.164124 25A 0.219904 ; 26A 0.229389 27A 0.270058 28A 0.300970 ; 29A 0.300989 30A 0.319492 31A 0.330008 ; 32A 0.369535 33A 0.369543 34A 0.380424 ; 35A 0.399089 36A 0.423400 37A 0.423423 ; 38A 0.446420 39A 0.446494 40A 0.494266 ; 41A 0.508497 42A 0.508502 43A 0.538949 ; 44A 0.538953 45A 0.610836 46A 0.610855 ; 47A 0.630158 48A 0.718603 49A 0.718620 ; 50A 0.736912 51A 0.819908 52A 0.820049 ; 53A 0.841985 54A 0.842142 55A 0.861839 ; 56A 0.915524 57A 0.915721 58A 0.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:23781,Energy,Energy,23781,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"mize()` function. In addition, a dictionary of GeomeTRIC-specific keywords and options (like constraints) may be passed to the optimizer. The `test_h2o_constrained` pytest demonstrates how this is done. . ```; e = optimize(..., engine=`geometric`, optimizer_keywords={...}); ```; Output is consistent with Psi4's default geometry optimization:; <details><summary>Example result </summary>; <p>. ```; >>> grep ""~"" output.dat. ==> GeomeTRIC Optimizer <== ~; Psi4 convergence criteria QCHEM not recognized by GeomeTRIC, switching to GAU_TIGHT ~; Measures of convergence in internal coordinates in au. ~; Criteria marked as inactive (o), active & met (*), and active & unmet ( ). ~; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 1.50e-05 1.00e-05 6.00e-05 4.00e-05 ~; --------------------------------------------------------------------------------------------- ~; 0 -7.64427364e+01 -------- 5.01e-02 4.03e-02 -------- -------- ~; 1 -7.64446505e+01 -1.91e-03 2.68e-03 1.95e-03 3.06e-02 2.16e-02 ~; 2 -7.64446681e+01 -1.77e-05 5.27e-04 4.17e-04 4.22e-03 3.98e-03 ~; 3 -7.64446684e+01 -3.06e-07 * 2.27e-05 2.03e-05 4.11e-04 2.93e-04 ~; 4 -7.64446684e+01 6.91e-10 * 3.28e-06 * 2.74e-06 * 1.78e-05 * 1.49e-05 * ~; Optimization converged! ~. ```. </p>; </details>. ## Todos; - [x] Working GeomeTRIC interface; - [x] Improved printing and error handling; - [x] Pytest(s); - [x] Constrained optimizations; - [x] Process GeomeTRIC keywords in Psi4 input; - [x] Composite energy calls (CBS, etc.); - [x] Documentation. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813:1919,energy,energy,1919,https://psicode.org,https://github.com/psi4/psi4/pull/1813,1,['energy'],['energy']
Energy Efficiency,"mmy wavefunctions returned from wrappers always had some questionable properties (e.g., single method for mixed method, largeset HF basis for cbs wavefunction) can be even less realistic (e.g., always def2-svp basis for cbs).; - [x] n-body qcvars renamed (grace period applies); ```; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE TOTAL ENERGY"": (""VALIRON-MAYER FUNCTION COUNTERPOISE TOTAL ENERGY"", 1.7), # note misspelling; ""VALIRON-MAYER FUNCTION COUTERPOISE INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY"", 1.7),; ``` ; - [x] added managed mode for scf gradient. it's not wholly effective at consolidating code, though, since only triggers for `gradient(""hf"")`, not `gradient(correlated)`. digits to compare has to be relaxed, but this has been seen with other qc programs, too.; - [x] Distributed driver should not be advertised for use with QCFractal at this time. It hasn't been tested in a while, and mem, cores, etc. setting may need tweaking in a non-continuous mode. Use it experimentally and report back.; - [x] n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `embedding_charges` kwarg.; - [x] stdsuite: consolidated the caller fn to remove duplicate code. added HF Hessian testing, through DF can't be uncommented until refs released in qcng.; - [x] t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:6699,ENERGY,ENERGY,6699,https://psicode.org,https://github.com/psi4/psi4/pull/2575,2,['ENERGY'],['ENERGY']
Energy Efficiency,"most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: SIMINT; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:27 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.00000000000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:14578,energy,energy,14578,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"mp2 _________________________________________________________________. def test_psi4_dfmp2():; """"""dfmp2-1""""""; #! Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy; #! using automatic counterpoise correction. Monomers are specified using Cartesian coordinates.; ; Enuc = 235.946620315069168; Ecp = -0.0224119246; ; formic_dim = psi4.geometry(""""""; 0 1; C -1.888896 -0.179692 0.000000; O -1.493280 1.073689 0.000000; O -1.170435 -1.166590 0.000000; H -2.979488 -0.258829 0.000000; H -0.498833 1.107195 0.000000; --; 0 1; C 1.888896 0.179692 0.000000; O 1.493280 -1.073689 0.000000; O 1.170435 1.166590 0.000000; H 2.979488 0.258829 0.000000; H 0.498833 -1.107195 0.000000; units angstrom; no_reorient; """"""); ; psi4.set_options({; 'basis': 'cc-pvdz',; 'df_basis_scf': 'cc-pvdz-jkfit',; 'df_basis_mp2': 'cc-pvdz-ri',; # not necessary to specify df_basis* for most basis sets; 'scf_type': 'df',; 'guess': 'sad',; 'd_convergence': 11,; }); ; > e_cp = psi4.energy('mp2', bsse_type='cp'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:112: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:415: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver_nbody.py:303: in nbody_gufunc; ptype_dict[pair] = func(method_string, molecule=current_mol, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . name = 'mp2', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f6fc9d20298>}, reference = 'RHF', mtd",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:32987,energy,energy,32987,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"mpty. -->; - [x] MRCC now called with `set qc_module mrcc` rather than ""mr"" prefix onto method; - [x] Many NYI messages, whether from ManagedMethodError, MissingMethodError, or plain ValidationError from run_* fns have changed their wording and added content. On the whole, this should be helpful, but if you're searching for particular phrasing, you'll likely need to adjust regexes.; - [x] New tables in the docs with details on accessible methods.; - [x] Arbitrary-order MPn no longer runable with ROHF. Arbitrary-order ZAPTn no longer runable with RHF.; - [x] Running DF through CCENERGY (experimental, expert only) may now require `set qc_module ccenergy`. ## Dev notes & details; - [x] running stdsuite writes a storage file, and a new document_capabilities script turns the storage file into various tables that newly (1) include all-electron/frozen-core info (notated ""aefc"" in places), (2) show default modules and default e.g., mp2_type, (3) cover most single-ref ground-state total-energy methods, (4) are proven to honor return val and qcvar contracts. details of how and why this works are at [psi4/share/psi4/scripts/merge_stdsuite.py](https://github.com/psi4/psi4/pull/2731/files#diff-4a81ee0fb4705fe6acd6ac7f6417f5a899437a93780329a5f647a94eea425c24R8) . If you want to suggest changes to notation, keep in mind that main-body cell contents must be expressible in a single unicode character width, otherwise the table gets far too wide; layering allowed. Several tables are produced:; - [x] an all-methods, one row per method table for the front page: introduction.rst#capabilities . this table complements the comprehensive hand-written one. [summary](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_summary.rst); - [x] an all-methods, one row per module per method table for the ""Alternate Implementations"" page: [details](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_details.rs",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:1600,energy,energy,1600,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['energy'],['energy']
Energy Efficiency,"ms there is a weird bug in Psi4 version 1.6.1 when using multithreading and PK as SCF algorithm, which results in essentially random results. I've attached a minimal example python script that runs the same calculation 10 times and prints the results to console. minimal_example.py:; ```; import psi4; import argparse. parser = argparse.ArgumentParser(); parser.add_argument('--num_threads', type=int, default=1); parser.add_argument('--scf_type', type=str, default='DF'); parser.add_argument('--element', type=int, default=1); parser.add_argument('--multiplicity', type=int, default=2); args = parser.parse_args(). psi4.core.be_quiet() # Silence output for clarity.; psi4.set_num_threads(args.num_threads, quiet=True); psi4.set_options({; 'REFERENCE': 'UHF',; 'SCF_TYPE': args.scf_type,; }). for i in range(10):; energy = psi4.energy(; 'pbe0/sto-3g',; molecule=psi4.core.Molecule.from_arrays(; geom=[0, 0, 0],; elez=[args.element],; molecular_charge=0,; molecular_multiplicity=args.multiplicity)); print(energy); ```. To reproduce the behaviour, run; `python minimal_example.py --num_threads 6 --scf_type PK --element 1 --multiplicity 2`. For me, the output of this is (the exact numbers change on re-runs):; > -0.41204465858903644; -0.18510932345625386; 0.18101301722463536; -0.17603191005094254; -0.1034126028084521; -0.04894812237658419; -0.2577286306987443; -0.3757350049677912; -0.26680604410405556; -0.26680604410405556. Interestingly, the issue is not present when using PK and a single thread,; `python test.py --num_threads 1 --scf_type PK --element 1 --multiplicity 2`. nor when using multiple threads, but DIRECT instead of PK; `python test.py --num_threads 6 --scf_type DIRECT --element 1 --multiplicity 2`. In both of these cases, I always get the same output:; > -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424. Als",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2760:1011,energy,energy,1011,https://psicode.org,https://github.com/psi4/psi4/issues/2760,1,['energy'],['energy']
Energy Efficiency,"must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: ERD; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:26 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, mul",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:8991,energy,energy,8991,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"n fixed, full tests should be clean again. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] the nbody-vmfc-hessian has one element of value 0.85 above reference by 1.2e-8 caused by adiis. not a big deal, so convcrit loosened from 1e-8 to 2e-8.; - [x] the new molden writer tests are nicely structured, but they use r_convergence=12 a lot for SCF, which doesn't tighten the criteria for SCF. so the new adiis tipped one test over the failure limit. (see below the original (r_conv=12) and tight (e_conv=12) SCF cycles w/ diis and adiis.) I've regenerated the reference molden.refs with e_convergence 12 and plain diis, then relaxed the convergence for normal running. no trouble with adiis. sound ok, @sgoodlett?; - [ ] @hokru, on the new dft_blocking_schemes test, I'm getting `OCTREE GRID POINTS:: computed value (293260.0) does not match (293259) by difference (1.0).` Is it reasonable to test for 293259 +/- 2 or so?. ```. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5.52535e-04 DIIS; @RHF iter 4: -672.74452788784220 -7.31047e-04 1.91489e-04 DIIS; @RHF iter 5: -672.74459677446487 -6.88866e-05 5.52833e-05 DIIS; @RHF iter 6: -672.74460689141483 -1.01169e-05 1.01025e-05 DIIS; @RHF iter 7: -672.74460730536885 -4.13954e-07 1.76374e-06 DIIS; @RHF iter 8: -672.74460731378190 -8.41305e-09 7.61045e-07 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5.52535e-04 DIIS; @RHF iter 4: -672.74452788784220 -7.31047e-04 1.91489e-04 DIIS; @RHF iter 5: -672.74459677446487 -6.88866e-05 5.52833e-0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2446:1128,Energy,Energy,1128,https://psicode.org,https://github.com/psi4/psi4/pull/2446,1,['Energy'],['Energy']
Energy Efficiency,"n psi. Also, separate a set of references that can reside in qcng for common testing btwn p4/qcng/qcdb. This runs several classes of tests --; * can each mp2-capable module do something sensible with each scf_type?; * can each mp2-capable module return the same right answer for each capable scf_type/mp2_type?; * can each mp2_type returns something good w/o the user knowing about modules?; * all above for gradient, plus check against findif; * for all these, is the full qcvars, return values, `CURRENT ENERGY`, etc. contract fulfilled for both P::e and wfn? . ## Todos; - [x] check mp2 fundamentals from mp2 energy targets (e.g., `MP2 TOTAL ENERGY` from `energy('mp2')`; - [x] check mp2 fundamentals from mp2 gradient targets (e.g., `MP2 TOTAL ENERGY` from `gradient('mp2')`; - [ ] check scs mp2 from mp2 targets (e.g., `CUSTOM SCS-MP2 TOTAL ENERGY` from `energy('mp2')`; - [x] check mp2 fundamentals from post-mp2 targests (e.g., `MP2 TOTAL ENERGY`) from `energy('fnoccsd')`; - [x] routing; - [x] I think we got the logic of `check_disk_df` off a little in proc.py in that we were checking if correlated method type was `DISK_DF` (my fault) and along the way forbidding `PK` refs with `DF` correlated. I think I fixed this for dfocc but haven't done df with fnocc yet.; - [x] Also corrected logic that was letting through mixed ref+corl derivatives (e.g., pk+df) that had gotten lost. See #245 for much discussion. tl;dr we have none, so let's not continue to let psi proceed with calculations that give beer + wrong answers; - [x] CISD is a poor way to calculate MP2, and it's not like we don't have other modules for RHF & ROHF besides DETCI. And @CDSherrill has allowed that we're unlikely to get to the bottom of it, so closes #311 . And the mp2 detci code is unsteady for multiple-detci-single-psi4 calcs, so it's not smooth to test.; - [x] qcvars; - [x] Newly sets `<mtd> TOTAL GRADIENT` from findif in driver on wfn and P::e; - [x] Newly sets `MP2 SINGLES ENERGY` and `MP2 DOUBLES ENERGY`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850:1034,ENERGY,ENERGY,1034,https://psicode.org,https://github.com/psi4/psi4/pull/1850,2,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"n the method). Meanwhile, `test_erisieve.py`, after the updates introduced in https://github.com/psi4/psi4/pull/2973, tests a wide variety of screening types, but with limited testing in conjunction with different JK builds (the only tests that don't use the Python interface of `TwoBodyAOInt` directly, use `SCF_TYPE=DIRECT` or `DF` as the JK method for screening comparisons). This leaves a lot of untested JK build+screening combos, which may be potentially broken and uncaught by the CI as a result. As a matter of fact, such cases actually do exist in the code currently (e.g., CompositeJK methods + no screening). This PR adds a new pytest module, `test_comprehensive_jk_screening.py`. It is effectively an expanded version of the scf5 test module, testing one of the scf5 systems (singlet oxygen) with the same basis set, but also including different screening methods and algorithmic subtypes available in Psi4. Screening is assumed to have an insignificant impact on energy within the tolerance used, so all screening types for a given method use the same reference energy. Some combinations of method and screening type throw an exception by design; this is accounted for in the test by testing that such combinations do indeed throw an exception as expected. Other combinations of method and algorithm are broken at the moment and error out; these are simply skipped for now. They are all logged in the same spot, and can and will be addressed in future PRs. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new pytest module to Psi4, `test_comprehensive_jk_screening.py` , to test different combinations of JK build algorithms and ERI screening methods. ## Questions; - [x] Would the test in `test_comprehensive_jk_screening.py` be better placed in `test_erisieve.py`? I placed the test in the former because I considered it large enough to warrant not having the quick pytest mark, but I'm ambivalent about where the test goes between those two test modu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2978:1296,energy,energy,1296,https://psicode.org,https://github.com/psi4/psi4/pull/2978,2,['energy'],['energy']
Energy Efficiency,"n(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: ERD; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:26 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational const",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:9141,energy,energy,9141,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"nd is the root cause of the issue brought up regarding the PKJK algorithm. To address this issue, the buffer size per thread is always set to have at least a value of 1. When a minimum buffer size is enforced, the issue presented in https://github.com/psi4/psi4/issues/2760 disappears. Additionally, with these changes, the PK option produces the same answer as the DIRECT algorithm for the system in question (the H atom):. ```; (p4dev) dpoole34@ds6:~$ cat minimal_example.py ; import psi4; import argparse. parser = argparse.ArgumentParser(); parser.add_argument('--num_threads', type=int, default=1); parser.add_argument('--scf_type', type=str, default='DF'); parser.add_argument('--element', type=int, default=1); parser.add_argument('--multiplicity', type=int, default=2); args = parser.parse_args(). psi4.core.be_quiet() # Silence output for clarity.; psi4.set_num_threads(args.num_threads, quiet=True); psi4.set_options({; 'REFERENCE': 'UHF',; 'SCF_TYPE': args.scf_type,; }). for i in range(10):; energy = psi4.energy(; 'pbe0/sto-3g',; molecule=psi4.core.Molecule.from_arrays(; geom=[0, 0, 0],; elez=[args.element],; molecular_charge=0,; molecular_multiplicity=args.multiplicity)); print(energy); (p4dev) dpoole34@ds6:~$ python3 minimal_example.py --num_threads 6 --scf_type PK --element 1 --multiplicity 2; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; (p4dev) dpoole34@ds6:~$ python3 minimal_example.py --num_threads 6 --scf_type DIRECT --element 1 --multiplicity 2; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; ```; ## User API & Changelog headlines. ## Dev notes & details; - [x] Fix bug present within PK calculations executed on small systems with small basis sets, wherein rand",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2763:1891,energy,energy,1891,https://psicode.org,https://github.com/psi4/psi4/pull/2763,1,['energy'],['energy']
Energy Efficiency,"nergy (a.u.) : -129.54016619495539; =======================================================================. Number of alpha independent-pairs:172; Number of beta independent-pairs :157. ==============================================================================; ================ Performing CD-OMP2 iterations... ============================; ==============================================================================; Minimizing CD-MP2-L Functional; ------------------------------; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2; ---- --------------- ---------- ----------- ----------- ----------; 1 2171897840405125233095316875881590551467307175332860142219670350830780702696283291230457729657914921746891661667264776735054294112163359650172177568018543474023361651834998812756231127668278305330007498940536320077394375160362584676926576578513365418212288803914428069938462720.0000000000 2.17e+276 inf 1.41e+183 8.10e+89; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 40, in <module>. File ""/build/psi4-lIOjn9/psi4-1.0~rc/share/python/driver.py"", line 444, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/build/psi4-lIOjn9/psi4-1.0~rc/share/python/procedures/proc.py"", line 223, in select_omp2; return func(name, **kwargs). File ""/build/psi4-lIOjn9/psi4-1.0~rc/share/python/procedures/proc.py"", line 1308, in run_dfocc; dfocc_wfn = psi4.dfocc(ref_wfn). RuntimeError:; Fatal Error: DF-OCC iterations are diverging; Error occurred in file: /build/psi4-lIOjn9/psi4-1.0~rc/src/bin/dfocc/occ_iterations.cc on line: 263; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::dfoccwave::DFOCC::occ_iterations(); psi::dfoccwave::DFOCC::cd_omp2_manager(); psi::dfoccwave::DFOCC::compute_energy(); psi::dfoccwave::dfoccwave(boost::shared_ptr<psi::Wavefunction>, psi::Options&); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391:1954,energy,energy,1954,https://psicode.org,https://github.com/psi4/psi4/issues/391,2,['energy'],['energy']
Energy Efficiency,"niel, David, & Justin *; **************************************************. Input parameters:; -----------------; Wave function = DETCI; Backtransform = No; Print Level = 1; Print TEIs = No; Reference wfn = RHF; Derivative = None; Delete TEI File = Yes; Memory (Mbytes) = 48000.0; Cache Level = 2; Cache Type = LRU; Chkpt Parameters:; --------------------; Number of irreps = 8; Number of SOs = 46; Number of MOs = 46; Number of active MOs = 46. Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; Ag 11 0 2 0 9 0; B1g 3 0 0 0 3 0; B2g 3 0 0 0 3 0; B3g 3 0 0 0 3 0; Au 2 0 0 0 2 0; B1u 8 0 1 0 7 0; B2u 8 0 1 0 7 0; B3u 8 0 1 0 7 0. DOCC = 2 0 0 0 0 1 1 1; SOCC = 0 0 0 0 0 0 0 0. FROZEN DOCC = 0 0 0 0 0 0 0 0; RESTR DOCC = 0 0 0 0 0 0 0 0; RAS 1 = 2 0 0 0 0 1 1 1; RAS 2 = 0 0 0 0 0 0 0 0; RAS 3 = 9 3 3 3 2 7 7 7; RAS 4 = 0 0 0 0 0 0 0 0; RESTR UOCC = 0 0 0 0 0 0 0 0; FROZEN UOCC = 0 0 0 0 0 0 0 0. Nuclear Rep. energy (chkpt) = 0.00000000000000; SCF energy (chkpt) = -99.45080702230226. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 1; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on node5-027-06 at Fri Jan 8 13:56:55 2016; Module time:; user time = 1.16 seconds = 0.02 minutes; system time = 0.06 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 11.55 seconds = 0.19 minutes; system time = 0.35 seconds = 0.01 minutes; total time = 2 seconds = 0.03 minutes. **\* tstart() called on node5-027-06; **\* at Fri Jan 8 13:56:55 2016. ---. ```; D E T C I. C. David Sherrill; Matt L. Leininger; 18 June 1999; ```. ---. Note: Calculation requested is a full CI.; Resetting EX_LEVEL to 10 and turning on all excitations. DETCI PARAMETERS:; EX LEVEL = 10 H0 BLOCKSIZE = 400; VAL EX LEVEL = 0 H0 GUESS",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:10309,energy,energy,10309,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['energy'],['energy']
Energy Efficiency,"nment variable or in; PSIO_ERROR: the $HOME/.psi4rc file.; PSIO_ERROR:; PSIO_ERROR: Please note that the scratch directory must exist and be; PSIO_ERROR: writable by Psi4; ```; Thats one example input:; ```; molecule {; 0 1; N -1.4457680611716 -1.1047188295845 0.49148092386593; C -0.19168175766337 -0.75584211512691 0.20898275954952; S 1.16737932640644 -1.82766284403922 0.14616844519932; C 2.16597045357598 -0.42448441793899 -0.26698146976982; N 1.54724741904672 0.67798068286713 -0.34204940942266; C 0.21550144939676 0.55519535899526 -0.0839857520715; C -0.70195776564886 1.65045791061703 -0.10441352532731; O -1.89802765802088 1.54782198311403 0.1259571991072; H -2.11563998092643 -0.33690782979021 0.4823163098176; H -1.71164622110861 -2.0497008550553 0.69762302601465; H 3.21537348272138 -0.55453850454389 -0.43220307841028; H -0.24675068660743 2.6223994604856 -0.34875937387462. no_reorient; no_com; }. # Set the basis set; set {; basis sdzhf; }. # Compute the energy and return the wavefunction; E, wfn = energy('WB97X-D', return_wfn=True). # Save the wavefunction to a file; wfn.to_file(""mol.wfn""); ```; and thats the last portion of the out:; ```; ==> Integral Setup <==. Traceback (most recent call last):; File ""/software/all/PSI4/1.3.2-foss-2020b/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 38, in <module>; File ""/software/all/PSI4/1.3.2-foss-2020b/lib//python3.8/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/software/all/PSI4/1.3.2-foss-2020b/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2002, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/software/all/PSI4/1.3.2-foss-2020b/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/software/all/PSI4/1.3.2-foss-2020b/lib//python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_ite",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3069:1419,energy,energy,1419,https://psicode.org,https://github.com/psi4/psi4/issues/3069,2,['energy'],['energy']
Energy Efficiency,"not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - [x] no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass ref_gradient array to test on or `set findif fd_project` T/F explicitly to control.; - [x] `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. json_ret is now an object, so `.` access, not dictionary. The old schema runner uses a schema circa pre-2018 and we've warned it's deprecated for about a year, so I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. - [x] Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:4358,energy,energy,4358,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['energy'],['energy']
Energy Efficiency,"nput wavefunction. Here is an example:. ```; import psi4; molecule_string = """"""; O 1.56850 0.10589 0.00001; N -1.39559 -0.02156 0.00004; H -1.62981 0.96110 -0.10622; H -1.86277 -0.51254 -0.75597; H -1.83355 -0.33077 0.86231; H 0.60674 -0.03396 -0.00063; H 1.94052 -0.78000 0.00022; """"""; add_input = ""\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molecule_string + add_input); N_active = 11 # Define the total number of active MOs.; N_frozen = 4 # Define the number of frozen occupied MO; N_virtual = 30 # Define the total number of virtual MOs that will be discarded; psi4.set_options({ 'ACTIVE' : [ N_active ],\; 'FROZEN_DOCC' : [ N_frozen ],\; 'FROZEN_UOCC' : [ N_virtual],\; 'DIAG_METHOD' : 'DAVIDSON',\; 'CI_MAXITER' : 200\; }). # assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 480",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1871:1173,energy,energy,1173,https://psicode.org,https://github.com/psi4/psi4/issues/1871,2,['energy'],['energy']
Energy Efficiency,"ns in the units of the molecule. For consistency for functions on the class, it translates the internal data to bohr before computing. This printing label https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L70 is wrong (for positions; ok for charges). These comments suggest this might not have been clear in the earlier PR https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L414-L416 and might have ramifications here https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fisapt/fisapt.cc#L730-L735 . When I rewrite the fsapt-ext-abc test case so that the molecule and charges are again consistent in Bohr (below), the overall passes but the fragments don't. Also below is the fsapt.dat differences. Again, I can well believe that I'm doing something wrong or that the `fsapt.py` machinery has some built-in unit assumptions, but I'm glad of any input or we-checked-that information. The reason it's coming up now is that DDD ""fixes"" this peculiarity of `ExternalPotential` and _only_ stores the charge positions in Bohr. ```; memory 1 GB. # water prism: https://science.sciencemag.org/content/sci/suppl/2012/05/16/336.6083.897.DC1/Perez_SM.pdf; # Table S43. #mol = psi4.core.Molecule.from_arrays(; # elez=[1, 8, 1, 1, 8, 1, 1, 8, 1],; # fragment_separators=[3, 6],; # fix_com=True,; # fix_orientation=True,; # fix_symmetry='c1',; # geom=np.array([; # 0.0290, -1.1199, -1.5243,; # 0.9481, -1.3990, -1.3587,; # 1.4371, -0.5588, -1.3099,; # 1.0088, -1.5240, 0.5086,; # 1.0209, -1.1732, 1.4270,; # 1.5864, -0.3901, 1.3101,; # -1.0231, 1.6243, -0.8743,; # -0.5806, 2.0297, -0.1111,; # -0.9480, 1.5096, 0.6281])/psi_bohr2angstroms,; # units=""Bohr""); #activate(mol). # above and below equivalent. molecule mol {; units au; H 0.054802057638 -2.116304287900 -2.880509533035; O 1.791649339547 -2.643726849516 -2.567570886660; H 2.715725414895 -1.055978958906 -2.475352251737; --; H 1.906355715362 -2.879942615198 0.961114707408; O 1.929221401480 -2.217026690387",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2330:1446,charge,charge,1446,https://psicode.org,https://github.com/psi4/psi4/issues/2330,1,['charge'],['charge']
Energy Efficiency,"ns, I tried to collect CD Hessians for HF and SVWN by FD of energies. They failed the per-element CD result ~= CONV result check. Not surprising since CD thresh is set at 1e-4. I didn't do anything about the failure (ref values deleted and tests are not active), so this is just to bring up that CD threshold is untuned for dertype or E_/D_/R_CONVERGENCE.; * refuted first two thirds of a prominent footnote: `DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented.`; - [x] upgraded stdsuite runner to catch up with qcdb and qcengine last year by (1) implementing per-dertype and abs/rel comparison checks (nothing is actually loosened) and (2) dropping a dict summary of each test to a record file.; - [x] arranged for available `td-{dft}` calls to show up in the energy table, https://psicode.org/psi4manual/master/energy.html; - [x] fixed `energy(""psimrcc_scf"")` to use regular SCF as ref for PSIMRCC and added a test; - [x] rehabilitated `energy(""qchf"")` (which never had its initialism expanded in the whole of the codebase, btw) so it runs. added a test. it probably ought to be better integrated with regular SCF module. Regular SCF has a qchf option that is unused.; - [x] adjusted some qcvars in FNOCC to collect more components from cepa-like methods and to collect different perturbative triples for qcisd.; - [x] collected qcvars correctly in DFOCC for CCD and QCHF. (It was harvesting the CCD method that tipped me into the rabbit-hole that became this PR.). - [x] TODO `pytest -m quick` is still friendly to run (CI finished in reasonable time), but the additions to stdsuite have make ordinary full pytests expensive. I need to manipulate default marks so folks don't inadvertently start hours of tests. `pytest -v ../tests/pytests/test_standard_suite.py -m ""not noci"" -n auto --durations 100 --durations-min 60.0` runs in 25 minutes on a 20-core machine with no individual test over 4m. That's not reasonable for a lapt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:11708,energy,energy,11708,https://psicode.org,https://github.com/psi4/psi4/pull/2731,2,['energy'],['energy']
Energy Efficiency,"nstructs `libtrans` on what back-transformations to do directly, or the integral transformation object remains in `deriv.cc`, and the caller code passes information on what back-transformations need to be done. I'm leaning more towards the first option.; * Off-diagonal blocks can be marked as Hermitian, in which case both the AO-transform of the block and the transpose of the AO-transform will be added to the running AO basis density matrix. This, prevents, for example, transforming the `ov` and the `vo` blocks.; * Density-fitted gradients will behave quite similarly to the refactored correlated derivatives. The two particle-density matrix is just replaced with the intermediates from Equation 79 of [Ugur's paper](https://aip.scitation.org/doi/10.1063/1.4896235): the thing you contract against the metric derivative and the thing you contract against the density fitted-integral derivative.; * At present, I envision the caller being responsible for supplying the object contracted against the overlap derivatives: orbital Lagrangian, energy-weighted density matrix, or possibly other names. It's always possible to determine this from the other intermediates needed for gradients. (At least for conventional integrals, and probably for density-fitted as well.) It may be worth coding for the transformation to do this.; * While solving response equations is common to many derivative methods, it's counterproductive to generalize this beyond providing a common conjugate gradient solver (which is outside my role here). For example, consider the orbital response term of MP2 between Ugur's MP2 paper, [Francesco's DSRG (regularized MP2) paper](https://aip.scitation.org/doi/10.1063/1.5100175), and the [DiStasio/Head-Gordon MP2 paper](https://onlinelibrary.wiley.com/doi/full/10.1002/jcc.20604) behind Rob's implementation. All three codes will get the same relaxed PDMs and solve orbital response terms by conjugate gradients, but they do not agree on which terms should be called orbital ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:5920,energy,energy-weighted,5920,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['energy'],['energy-weighted']
Energy Efficiency,"ntain 1.000E+00 electron.; Alpha orbital 4 will contain 1.000E+00 electron.; Alpha orbital 5 will contain 1.000E+00 electron.; Beta orbital 3 will contain 6.667E-01 electron.; Beta orbital 4 will contain 6.667E-01 electron.; Beta orbital 5 will contain 6.667E-01 electron. @UHF iter 1: -85.83418494087701 -8.58342e+01 1.47308e-01 DIIS; Occupation by irrep:; A ; DOCC [ 5 ]; SOCC [ 0 ]. @UHF iter 2: -86.90714628725982 -1.07296e+00 4.33630e-02 FRAC; @UHF iter 3: -96.04326201435347 -9.13612e+00 5.10365e-02 DIIS/FRAC; @UHF iter 4: -95.69273858723787 3.50523e-01 3.47534e-02 DIIS/FRAC; @UHF iter 5: -98.96468336105178 -3.27194e+00 1.08919e-02 DIIS/FRAC; @UHF iter 6: -99.16143874023540 -1.96755e-01 9.82232e-04 DIIS/FRAC; @UHF iter 7: -99.16448800785139 -3.04927e-03 2.62203e-04 DIIS/FRAC; @UHF iter 8: -99.16466805777382 -1.80050e-04 9.94209e-05 DIIS/FRAC; @UHF iter 9: -99.16470603597492 -3.79782e-05 8.45894e-06 DIIS/FRAC; @UHF iter 10: -99.16470620018562 -1.64211e-07 6.74767e-07 DIIS/FRAC; Energy and wave function converged.; ```; and the final energy is close to my fully numerical value `-99.164711346`. However, if you remove `symmetry c1`, it is not using fractional occupations at all:; ```; ==> Fractionally-Occupied SCF Iterations <==. Alpha orbital 3 will contain 1.000E+00 electron.; Alpha orbital 4 will contain 1.000E+00 electron.; Alpha orbital 5 will contain 1.000E+00 electron.; Beta orbital 3 will contain 6.667E-01 electron.; Beta orbital 4 will contain 6.667E-01 electron.; Beta orbital 5 will contain 6.667E-01 electron. @UHF iter 1: -85.83418494094745 -8.58342e+01 2.89307e-01 DIIS; Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]. @UHF iter 2: -87.14703249342156 -1.31285e+00 8.61028e-02 FRAC; @UHF iter 3: -94.44949400540921 -7.30246e+00 1.33943e-01 DIIS/FRAC; @UHF iter 4: -88.66303583515608 5.78646e+00 7.46716e-02 DIIS/FRAC; @UHF iter 5: -97.45982782482486 -8.79679e+00 7.49420e-02 DIIS/FRAC; @UHF ite",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1673:3392,Energy,Energy,3392,https://psicode.org,https://github.com/psi4/psi4/issues/1673,1,['Energy'],['Energy']
Energy Efficiency,"nts; B[i, j] = self.get_dot_product(i, j); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/diis.py"", line 198, in get_dot_product; dot_product += Rix.vector_dot(Rjx). RuntimeError: ; Fatal Error: Matrix::vector_dot: Dimensions do not match!. Error occurred in file: /home/tu/tu_tu/tu_ctibc01/prog/psi4/psi4/psi4/src/psi4/libmints/matrix.cc on line: 1703; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Matrix::vector_dot(psi::Matrix const*). Printing out the relevant lines from the Psithon --> Python processed input file:; energy('scf',write_orbitals='scf_mos'); Avals=[0.00, 0.05, 0.10, 0.12, 0.15, 0.20, 0.21, 0.22, 0.23, 0.24, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50, 0.55, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 1.00]; for A in Avals:; psi4.core.print_out(""running step %5.2f"" % A); core.set_global_option(""REMP_A"", A); --> energy('oremp',restart_file='scf_mos'); core.set_global_option(""MO_READ"", ""true""); psi4.core.print_out(""""). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Matrix::vector_dot: Dimensions do not match! !; ! Error occurred in file: !; ! /home/tu/tu_tu/tu_ctibc01/prog/psi4/psi4/psi4/src/psi4/libmints/matrix.cc on !; ! line: 1703 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::Matrix::vector_dot(psi::Matrix const*) !; ! !; !----------------------------------------------------------------------------------!; ```; (the example uses a custom method but the problem should be reproducible with DF-OMP2).; The molecule in question has 86 occupied and 773 virtual correlated orbitals, giving rise to (depending on the storage scheme) ~2.2E9 amplitudes. The root cause of the issue seems to be missing typ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2591:2765,energy,energy,2765,https://psicode.org,https://github.com/psi4/psi4/issues/2591,1,['energy'],['energy']
Energy Efficiency,"nutes on a 20-core machine with no individual test over 4m. That's not reasonable for a laptop. Blame the slow-to-converge oo methods, and it's going to get worse with occd and friends.; - [ ] TODO https://github.com/MolSSI/QCEngine/pull/376 and a new version of QCEngine are a prereq.; - [x] https://github.com/qcdb/qcdb/pull/57 is associated QCDB PR (psi4 PR is a prereq to it); - [ ] TODO full stdsuite in the presence of MRCC will have a couple faults of the ""not NYI"" variety after the MRCC defaulting logic switch from Q. I haven't decided how to remedy this, but it's unlikely to be hit, so I'll defer. ## Questions; - [ ] My version of Psi4+MRCC doesn't run CC2. Anyone else see this? (Just curious, not really needed for PR.); - [ ] I don't think the original module authors will find issues, but if you want to look over pertinent docs and capabilities tables, please do so.; - [x] [ADDED from #2737 For methods (or methods in certain circumstances, say reference or conv/df) only available through an external add-on, do we want those opt-in? That is, certainly the external must be (1) installed and detectable. But do we also want to (2) require the user to set qc_module=mrcc|adcc|chemps2 ? CheMPS2 has a long history of not requiring (2). ADCC has a shorter history of being the preferred backend and automatic choice, if present. @maxscheurer prefers not requiring (2). In this PR, I just switched MRCC syntax to yes require (2). That was in keeping with the user opt-ing in via energy(""mrccsd""). I can go either way, and I guess I'm now leaning toward not requiring (2) and adjusting MRCC accordingly. But it seems like something to discuss and settle on a consistent treatment. EDIT: ok, MRCC can be a default. above section edited. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:14203,energy,energy,14203,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['energy'],['energy']
Energy Efficiency,"nutes; Total time:; user time = 522.41 seconds = 8.71 minutes; system time = 15.59 seconds = 0.26 minutes; total time = 594 seconds = 9.90 minutes. **\* tstart() called on shukla-pc.localdomain; **\* at Thu Oct 16 11:16:51 2014. ```; **************************************************; * TRANSQT2: Program to transform integrals from *; * the SO basis to the MO basis. *; * *; * Daniel, David, & Justin *; **************************************************. Input parameters:; -----------------; Wave function = SCF; Backtransform = No; Print Level = 1; Print TEIs = No; Reference wfn = RHF; Derivative = None; Delete TEI File = Yes; Memory (Mbytes) = 5000.0; Cache Level = 2; Cache Type = LRU; Chkpt Parameters:; --------------------; Number of irreps = 1; Number of SOs = 246; Number of MOs = 246; Number of active MOs = 246. Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; A 246 14 33 0 199 0. Nuclear Rep. energy (chkpt) = 697.11317829643781; SCF energy (chkpt) = -535.97469065986911. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 2; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on shukla-pc.localdomain at Thu Oct 16 11:29:13 2014; Module time:; user time = 259.08 seconds = 4.32 minutes; system time = 51.47 seconds = 0.86 minutes; total time = 742 seconds = 12.37 minutes; Total time:; user time = 781.49 seconds = 13.02 minutes; system time = 67.06 seconds = 1.12 minutes; total time = 1336 seconds = 22.27 minutes. **\* tstart() called on shukla-pc.localdomain; **\* at Thu Oct 16 11:29:13 2014. ---. ```; D E T C I . C. David Sherrill; Matt L. Leininger; 18 June 1999; ```. ---. PARAMETERS: ; EX LEVEL = 2 H0 BLOCKSIZE = 400; VAL EX LEVEL = 0 H0 GUESS SIZE= 400; H0COUPLINGSIZE= 0 H0 COUPLING = no; NUM PRINT = 20; MAXITER",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:14301,energy,energy,14301,https://psicode.org,https://github.com/psi4/psi4/issues/62,1,['energy'],['energy']
Energy Efficiency,"ny as .3-.4 kJ/mol, depending on the dimer, which is a large percent error. One test case is summarized below:. | Program | Monomer A (H) | Monomer B (H) | Dimer AB (H)| $E_{int}$ (kcal/mol)| ; |---------|-------------|-------------|-----------|-----------|; | Psi4 | -453.84229689692728 | -453.84229689783353 | -907.68447385499462 | 0.075263339533 |; |Orca | -453.842841688023 | -453.842841698644 | -907.685688152560 | -0.002990642998 |. | Program | $E_{int}$ (kJ/mol)| Notes|; |---------|-------------| ----|; | Psi4 | 0.31490181 | |; |Orca | -0.01251285 | |; | Benchmark | -0.00315431 | Focal Point CCSD(T)/CBS with Psi4 |. I have noticed this warning in all of my Psi4 hexamine/PBEh-3c files:; `Warning: Molecule has a spherically-symmetric moment of charge but lacks icosahedral, octahedral, and tetrahedral symmetry.` . CDS figures this has something to do with the grid placement. Any ideas of how to alleviate this warning while keeping the same geometries and/or what the energy difference could be attributed to? I've tried different basis sets, different number of grid points, `symmetry c1`, `molecule.symmetrize(1e-3)`, no pruning scheme (rather than `robust`). The only time I have been able to get the warning to go away is when I use `bsse_type='cp'`, but I really shouldn't be running the calculation with cp correction because that is already included in the PBEh-3c calculation. Output files for the above example are attached, as well as a graph of Psi4 and Orca interaction energies for all dimers tested. . [Psi4-214-int.txt](https://github.com/psi4/psi4/files/9200713/Psi4-214-int.txt); [Orca-214-monA.txt](https://github.com/psi4/psi4/files/9200765/Orca-214-monA.txt); [Orca-214-monB.txt](https://github.com/psi4/psi4/files/9200766/Orca-214-monB.txt); [Orca-214-dimerAB.txt](https://github.com/psi4/psi4/files/9200767/Orca-214-dimerAB.txt). [hexamine-compare.pdf](https://github.com/psi4/psi4/files/9200777/hexamine-compare.pdf); Image of hexamine: ; ![hexamine](https://user-i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2647:1364,energy,energy,1364,https://psicode.org,https://github.com/psi4/psi4/issues/2647,1,['energy'],['energy']
Energy Efficiency,"o I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. - [x] Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - [x] A Logging file has been introduced. All its contents should be considered experimental and subject to change.; - [x] Dipole derivatives through finite difference of dipoles added, so IR intensities available; - [x] The dummy wavefunctions returned from wrappers always had some questionable properties (e.g., single method for mixed method, largeset HF basis for cbs wavefunction) can be even less realistic (e.g., always def2-svp basis for cbs).; - [x] n-body",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:4889,energy,energy,4889,https://psicode.org,https://github.com/psi4/psi4/pull/2575,4,['energy'],['energy']
Energy Efficiency,"o""); psi4.IO.set_default_namespace(""h2o""); psi4.set_global_option(""BASIS"", ""aug-cc-pVTZ""); psi4.set_global_option(""ICORE"", 0); thisenergy = energy('fci'). Memory set to 48.000 GiB by Python script. **\* tstart() called on node5-027-06; **\* at Fri Jan 8 13:56:53 2016. ```; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 12 Threads, 48000 MiB Core; ---------------------------------------------------------; ```. ==> Geometry <==. ```; Molecular point group: d2h; Geometry (in Bohr), charge = -1, multiplicity = 1:. Center X Y Z; ------------ ----------------- ----------------- -----------------; F 0.000000000000 0.000000000000 0.000000000000; ```. Running in d2h symmetry. Rotational constants: A = ***********\* B = ***********\* C = ***********\* [cm^-1]; Rotational constants: A = ***********\* B = ***********\* C = ***********\* [MHz]; Nuclear repulsion = 0.000000000000000. Charge = -1; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: AUG-CC-PVTZ; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 55; Spherical Harmonics?: true; Max angular momentum: 3. ==> Pre-Iterations <==. ---. ```; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; ```. ---. ```; Ag 11 11 0 0 0 0; B1g 3 3 0 0 0 0; B2g 3 3 0 0 0 0; B3g 3 3 0 0 0 0; Au 2 2 0 0 0 0; B1u 8 8 0 0 0 0; B2u 8 8 0 0 0 0; B3u 8 8 0 0 0 0; ```. ---. ```; Total 46 46 5 5 5 0; ```. ---. Starting with a DF guess... OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 12; Integrals threads: 12; Memory (",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:3583,Charge,Charge,3583,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['Charge'],['Charge']
Energy Efficiency,"ock to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; ________________________________________________________________ test_psi4_basic _________________________________________________________________. def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); > psi4.energy('scf'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:15: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:21687,energy,energy,21687,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"od, largeset HF basis for cbs wavefunction) can be even less realistic (e.g., always def2-svp basis for cbs).; - [x] n-body qcvars renamed (grace period applies); ```; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE TOTAL ENERGY"": (""VALIRON-MAYER FUNCTION COUNTERPOISE TOTAL ENERGY"", 1.7), # note misspelling; ""VALIRON-MAYER FUNCTION COUTERPOISE INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY"", 1.7),; ``` ; - [x] added managed mode for scf gradient. it's not wholly effective at consolidating code, though, since only triggers for `gradient(""hf"")`, not `gradient(correlated)`. digits to compare has to be relaxed, but this has been seen with other qc programs, too.; - [x] Distributed driver should not be advertised for use with QCFractal at this time. It hasn't been tested in a while, and mem, cores, etc. setting may need tweaking in a non-continuous mode. Use it experimentally and report back.; - [x] n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `embedding_charges` kwarg.; - [x] stdsuite: consolidated the caller fn to remove duplicate code. added HF Hessian testing, through DF can't be uncommented until refs released in qcng.; - [x] the addition of ccsd iterations qcvar to dfocc could maybe be reverted. ## Questions; - [x] Any critical eye or indep",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:6835,ENERGY,ENERGY,6835,https://psicode.org,https://github.com/psi4/psi4/pull/2575,2,['ENERGY'],['ENERGY']
Energy Efficiency,"of DFT energies through the CBS interface. The implementation is based on [my paper in JCTC](https://pubs.acs.org/doi/10.1021/acs.jctc.0c00684), however an update to that is currently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests added for any new features; - [x] [All or releva",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132:981,energy,energy,981,https://psicode.org,https://github.com/psi4/psi4/pull/2132,2,['energy'],['energy']
Energy Efficiency,"of the relevant matrix elements. 1. Starting from the UKS RPA/TDA matrices when Ca = Cb, we can do a similarity transformation to obtain the singlet and triplet RKS matrices. The new basis elements for the singlet block all take the form (i->a α + i->a β) / sqrt(2), while the new basis elements for the triplet block take form (i->a α - i->a β) / sqrt(2).; 2. The electron potential is spin-free. Because the coulomb J and exchange K terms are expectation values of this, the associated integrals are spin free, assuming spin does not integrate to zero. For J, spin only integrates to zeroes if there is a spin mismatch in either the bra or the ket. Because we only consider Sz preserving excitations, no spin mismatches are possible. For K, a bra orbital needs to have the same spin as a ket orbital. Because both bra orbitals have the same spin, and both ket orbitals have the same spin, this requires that _all_ orbitals have the same spin. Meanwhile, the DFT V terms are second derivatives of the DFT energy with respect to orbital rotation generators. These are not spin-free.; 3. Now let's combine the two above facts. After performing the spin-integration in the triplet case, you end up with [(α|α) - (α|β) - (β|α) + (β|β)]. Upon exploiting spin-restriction, this reduces to [(α|α) - (α|β)]. For J, the second term is equal to the first, so the two cancel. For K, the second term is zero, so you have the first integral. For V, the two terms are neither equal nor zero. The V term cannot be neglected, even though it's normally added to the J term, which here is zero. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] V is still bundled with J, but the RSCF products now mark that they may need to get a J-like term. This is no longer equivalent to being singlet or not.; - [x] Several methods have be",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2885:2087,energy,energy,2087,https://psicode.org,https://github.com/psi4/psi4/pull/2885,1,['energy'],['energy']
Energy Efficiency,"ollowing input:; ```; molecule benzene {; C 0.710500000000 0.000000000000 -1.230622098778; C 1.421000000000 0.000000000000 0.000000000000; C 0.710500000000 0.000000000000 1.230622098778; C -0.710500000000 0.000000000000 1.230622098778; C -0.710500000000 0.000000000000 -1.230622098778; C -1.421000000000 0.000000000000 0.000000000000; H 1.254500000000 0.000000000000 -2.172857738095; H -1.254500000000 0.000000000000 2.172857738095; H 2.509000000000 0.000000000000 0.000000000000; H 1.254500000000 0.000000000000 2.172857738095; H -1.254500000000 0.000000000000 -2.172857738095; H -2.509000000000 0.000000000000 0.000000000000; }. set basis sto-3g. energy('cisd', molecule=benzene); ```; Psi4 returned the following error:; ```; Traceback (most recent call last):; File ""/usr/local/psi4/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/usr/local/psi4/lib/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 949, in select_cisd; return func(name, **kwargs); File ""/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 4238, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn). RuntimeError: ; Fatal Error: ndocc must be less than nvirt; Error occurred in file: /home/shouck/psi4/psi4/src/psi4/fnocc/ccsd.cc on line: 142; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::fnocc::CoupledCluster::common_init(); psi::fnocc::CoupledCluster::CoupledCluster(std::shared_ptr<psi::Wavefunction>, psi::Options&); psi::fnocc::CoupledPair::CoupledPair(std::shared_ptr<psi::Wavefunction>, psi::Options&); psi::fnocc::fnocc(std::shared_ptr<psi::Wavefunction>, psi::Options&); ```; The CISDT and CISDTQ methods run with no problems, so it seems like the issue is just in the CISD method. The exception appea",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828:1117,energy,energy,1117,https://psicode.org,https://github.com/psi4/psi4/issues/828,2,['energy'],['energy']
Energy Efficiency,"olved for CASSCF calculations, as I get the following error when performing a CASSCF calculation with a given input wavefunction. Here is an example:. ```; import psi4; molecule_string = """"""; O 1.56850 0.10589 0.00001; N -1.39559 -0.02156 0.00004; H -1.62981 0.96110 -0.10622; H -1.86277 -0.51254 -0.75597; H -1.83355 -0.33077 0.86231; H 0.60674 -0.03396 -0.00063; H 1.94052 -0.78000 0.00022; """"""; add_input = ""\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molecule_string + add_input); N_active = 11 # Define the total number of active MOs.; N_frozen = 4 # Define the number of frozen occupied MO; N_virtual = 30 # Define the total number of virtual MOs that will be discarded; psi4.set_options({ 'ACTIVE' : [ N_active ],\; 'FROZEN_DOCC' : [ N_frozen ],\; 'FROZEN_UOCC' : [ N_virtual],\; 'DIAG_METHOD' : 'DAVIDSON',\; 'CI_MAXITER' : 200\; }). # assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); Fi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1871:1120,energy,energy,1120,https://psicode.org,https://github.com/psi4/psi4/issues/1871,1,['energy'],['energy']
Energy Efficiency,"om/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_summary.rst); - [x] an all-methods, one row per module per method table for the ""Alternate Implementations"" page: [details](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_details.rst) now contains info on all stdsuite-tested methods, not just those implemented in more than one module; - [x] various tables of specific-module-methods, one row per method for the individual module pages:; - [x] [ccenergy](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_ccenergy.rst) pre-approved by TDC in #2708 ; - [x] [fnocc](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_fnocc.rst) this replaces a hand-generated table, but a broader hand-generated table is also present for (1) method names and (2) FNO functionality (not yet covered by stdsuite). the fnocc table is energy (E) only, whereas most are E/G; - [x] [scf](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_scf.rst) the only E/G/H table. this includes HF and some representative DFTs: LSDA, GGA, Hybrid, LRC, DH; - [x] [occ_nonoo](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_occ_nonoo.rst) replaces a hand-generated table, but a broader hand-gen table is also present for (1) method names and (2) in anticipation of FNO.; - [x] [occ_oo](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_occ_oo.rst) replaces a hand-generated table, but a broader hand-gen table is also present for (1) method names. closes #1863 ; - [x] [dfmp2](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_dfmp2.rst) pretty simple, so why not; - [x] Other changes to docs contents:; - [x] instead of detailed capabilities getting lost under notes in the ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:3285,energy,energy,3285,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['energy'],['energy']
Energy Efficiency,"omposite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is ex",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351:2060,energy,energy,2060,https://psicode.org,https://github.com/psi4/psi4/pull/1351,2,['energy'],['energy']
Energy Efficiency,"on, why the job fails? What can I do to make it work?. Thank you in advance. Best regards,; Michael Medvedev. ---. The full output:; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 (no tag) Driver. ```; Git: Rev {(no tag)}. J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; and T. D. Crawford, WIREs Comput. Mol. Sci. 2, 556-565 (2012); (doi: 10.1002/wcms.93). Additional Contributions by; A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; -----------------------------------------------------------------------. Psi4 started on: Fri Jan 8 13:56:46 2016. Process ID: 11885; PSI4DATADIR: ./lib; Memory level set to 256.000 MB; ```. ==> Input File <==. ---; # ! 6-31G H2O Test FCI Energy Point. memory 48000 mb. molecule h2o {; -1 1; F .0000000000 .0000000000 -.000000000; units bohr; }. set globals {; basis aug-cc-pVTZ; icore 0; }. thisenergy = energy('fci'). ---. Input file to run:; from psi4 import *; from p4const import *; from p4util import *; from molutil import *; from aliases import *; psi4_io = psi4.IOManager.shared_object(); psi4.efp_init(); psi4_io.set_default_path(""/tmp""); geometry(""""""; 0 1; H; H 1 0.74; """""",""blank_molecule_psi4_yo""). psi4.set_memory(48000000000). psi4.efp_init(); h2o = geometry(""""""; -1 1; F .0000000000 .0000000000 -.000000000; units bohr; """""",""h2o""); psi4.IO.set_default_namespace(""h2o""); psi4.set_global_option(""BASIS"", ""aug-cc-pVTZ""); psi4.set_global_option(""ICORE"", 0); thisenergy = energy('fci'). Memory set to 48.000 GiB by Python script. **\* tstart() called on node5-027-06; **\* at Fri Jan 8 13:56:53 2016. ```; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:2013,Energy,Energy,2013,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['Energy'],['Energy']
Energy Efficiency,"on_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. 2) A helium atom with a point charge (q=-1) 1 Angstrom away. ```; memory 1 gb; set reference rks; set basis 6-31G*; set guess sad; set scf_type df. molecule QMregion {; 0 1; He 0.0 0.0 0.0; symmetry c1; no_reorient; no_com; }. gradient(""PBE0""). Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1,0.0,0.0,1.8897261245650618); psi4.set_global_option_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. For test 1, the gradient from the water and the water+charges are different, but they do not agree with the forces returned by an equivalent calculation with Gaussian. The isolated water molecule has gradients that agree with the Gaussian forces, but once the charges are added the Gaussian and PSI4 calculations return different results. For test 2, the PSI4 gradient is zero for the for the helium with and without the point charge. The charge has no effect on the results. When I repeated the calculation with Gaussian, there was a finite force on the helium atom when a charge was included. Here are the gradient results I pulled from the output files:. ```; Water+Charges (TIP3P charges: O->-0.834, H->0.417). PSI4 gradient without charges:; 1 -0.000345685156 -0.000000503248 -0.001768512746; 2 0.000171019827 0.000099064969 0.000874930893; 3 0.000170945942 -0.000098562011 0.000874553581. Gaussian forces without charges:; 1 8 0.000342119 0.000000502 0.001755656; 2 1 -0.000171096 -0.000103970 -0.000878017; 3 1 -0.000171022 0.000103468 -0.000877640. PSI4 gradient with charges:; 1 0.001872262723 -0.000000506498 -0.002344911788; 2 -0.000937982580 -0.003306842432 0.001163140925; 3 -0.000938055973 0.003307348640 0.001162761678. Gaussian forces with charges:; 1 8 0.002079660 0.000000498 -0.002984605; 2 1 0.000413259 0.000612887 -0.001458686; 3 1 0.000413331 -0.000613388 -0.001458305. --------------------------------------------------------------------; He+Charge (q = -1.0, r = 1.0 Ang.). PSI4 gradient without charges:; 1 0.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/184:1871,charge,charge,1871,https://psicode.org,https://github.com/psi4/psi4/issues/184,1,['charge'],['charge']
Energy Efficiency,"ons <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 11 11 0 0 0 0; -------------------------------------------------------; Total 11 11 1 0 0 1; -------------------------------------------------------. ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory [MiB]: 732; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (3-21G AUX); Blend: DEF2-SVP-JKFIT; Number of shells: 23; Number of basis function: 80; Number of Cartesian functions: 80; Spherical Harmonics?: false; Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 1.9324024167E-01.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter SAD: -0.34299486696379 -3.42995e-01 0.00000e+00 ; @DF-UHF iter 1: -0.48778126858064 -1.44786e-01 7.18202e-03 DIIS; @DF-UHF iter 2: -0.49627418123381 -8.49291e-03 2.58017e-03 DIIS; @DF-UHF iter 3: -0.49762079007351 -1.34661e-03 1.09982e-04 DIIS; @DF-UHF iter 4: -0.49762397190176 -3.18183e-06 1.60614e-05 DIIS; @DF-UHF iter 5: -0.49762403062183 -5.87201e-08 1.47415e-06 DIIS; @DF-UHF iter 6: -0.49762403115935 -5.37526e-10 6.69153e-08 DIIS; @DF-UHF iter 7: -0.49762403116031 -9.60343e-13 2.69685e-09 DIIS; @DF-UHF iter 8: -0.49762403116031 -7.77156e-16 2.10910e-10 DIIS; @DF-UHF iter 9: -0.49762403116032 -8.88178e-16 2.91582e-11 DIIS; @DF-UHF iter 10: -0.49762403116032 -6.66134e-16 1.10373e-14 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 7.500000000E-01; @S^2 Observed: 7.500000000E-01; @S Expected: 5.000000000E-01; @S Observed: 5.000000000E-01. Orbital Energies [Eh]; ---------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:3679,Energy,Energy,3679,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Energy'],['Energy']
Energy Efficiency,ons.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kern,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:5999,Adapt,Adapted,5999,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['Adapt'],['Adapted']
Energy Efficiency,"ooks pretty good to the eye; # zmat version, normz. molecule normz {; C; H 1 1.2; H 1 1.2 2 104; H 1 1.2 2 105 3 120; F 1 1.3 2 106 4 121; }. # reference start NRE, E, G. norm_nre_start = 37.6824945882 # Q-Chem; norm_e_start = -139.5307182946 # Q-Chem; norm_g_start = psi4.Matrix(5, 3) # Q-Chem; contents = [ # have to swap x & y, and -x; [ -0.07990533, -0.00642920, -0.00348020, 0.04874047, 0.04107426],; [ -0.04900557, -0.00240633, 0.05677652, -0.03006882, 0.02470420],; [ -0.06715450, 0.05113530, -0.00508959, -0.00643364, 0.02754243]]; norm_g_start.set(zip(*contents)); norm_rmsg_start = 0.041309 # Q-Chem; # Full Analytical Gradient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 -0.04900557 -0.00240633 0.05677652 -0.03006882 0.02470420; # 2 0.07990533 0.00642920 0.00348020 -0.04874047 -0.04107426; # 3 -0.06715450 0.05113530 -0.00508959 -0.00643364 0.02754243. # reference optimized NRE, E (G should be 0). nre_opt = 37.5276022922 # Q-Chem; e_opt = -139.5573922 # Q-Chem; #norm_g_opt # Q-Chem; # Full Analytical Gradient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 0.00000025 -0.00000001 -0.00000021 -0.00000007 0.00000005; # 2 0.00000010 0.00000008 0.00000000 0.00000001 -0.00000020; # 3 0.00000038 -0.00000005 -0.00000006 -0.00000023 -0.00000003. def test_norm_start(mol):; g0 = gradient('mp2', molecule=mol); compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(norm_g_start, g0, 3, 'start grad'). def test_zero_grad(mol):; e, wfn = optimize('mp2', return_wfn=True, molecule=mol); g = wfn.gradient(); g.print_out(); compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); compare_matrices(zerograd, g, 3, 'opt ZERO grad'). def test_odd_start(mol):; g0 = gradient('mp2', molecule=mol); compare_values(odd_nre_start, mol.nuclear_r",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:1718,Energy,Energy,1718,https://psicode.org,https://github.com/psi4/psi4/issues/310,1,['Energy'],['Energy']
Energy Efficiency,"or Specific Modules; https://github.com/psi4/psi4/blob/master/codemeta.json; https://github.com/psi4/psi4/graphs/contributors; http://psicode.org/psi4manual/master/introduction.html#citing-psifour. -----------------------------------------------------------------------. Psi4 started on: Tuesday, 26 September 2023 11:04AM. Process ID: 419; Host: ...; PSIDATADIR: ...; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; set {; freeze_core true; basis def2-tzvppd; guess sad; }; molecule mol {; -1 1; @O -2.9015 2.0339 4.0653; @H -3.02228 2.5785 4.8759; @H -2.16632 1.41862 4.28713; O 0.0 0.0 0.0; C -0.67479 0.41341 -1.01466; O -0.87615 -0.42222 -1.96207; C -1.21823 1.79557 -1.10284; C -0.61745 2.829 -0.07843; H -1.1042 2.21706 -2.12009; H -2.30161 1.7313 -0.88466; H 0.4692 2.99187 -0.17478; H -0.84409 2.57987 0.97189; H -1.13803 3.76616 -0.33793; units angstrom; no_reorient; no_com; symmetry c1; }; energy('wb97m-v'); --------------------------------------------------------------------------. Scratch directory: /tmp/. *** tstart() called on ...; *** at Tue Sep 26 11:04:21 2023. => Loading Basis Set <=. Name: DEF2-TZVPPD; Role: ORBITAL; Keyword: BASIS; atoms 1, 4, 6 entry O line 218 file .../share/psi4/basis/def2-tzvppd.gbs ; atoms 2-3, 9-13 entry H line 14 file .../share/psi4/basis/def2-tzvppd.gbs ; atoms 5, 7-8 entry C line 144 file .../share/psi4/basis/def2-tzvppd.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = -1, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; Gh(O) -2.901500000000 2.033900000000 4.065300000000 15.994914619570; Gh(",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051:2904,energy,energy,2904,https://psicode.org,https://github.com/psi4/psi4/issues/3051,1,['energy'],['energy']
Energy Efficiency,"orl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00134025 xtpl_highest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:2858,energy,energy,2858,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['energy'],['energy']
Energy Efficiency,"ort dftd4` | nyi | preferred; (dep) `conda-forge::dftd4` | `bin/dftd4` | ; GCP; `psi4::gcp` | `bin/gcp` | preferred | works; `conda-forge::gcp-correction` | `bin/mctc-gcp` | nyi | preferred. - [x] Capabilities changed slightly between `dftd3` and `s-dftd3`. In particular, the former can also do -D2 and the latter can do 3-body -D3 in the same call as 2-body -D3. All Psi4 calls will continue to do only 2-body -D3 as default (regardless of `dftd3` or `s-dftd3` engine). That is, `-d3` is still an alias to `-d3zero` which is now an alias to a new extension `-d3zero2b`, which can now be given explicitly disallow 3-body as a tweakable parameter (internally, `s9:=0.0`). When `s-dftd3` is the engine, another set of new extensions, e.g., `-d3atm` alias of `-d3zeroatm` turns on 3-body (`s9=1.0`) and allows user tweaks. This latter is the same behavior as -D4, which turns on 3-body by default. If this seems confusing, state what calc you want — e.g., `energy(""b3lyp-d3atm"")` — and Psi4 will figure out if you have the right engine to do the job.; - [x] Previous to QCEngine v0.26.0 (required by this Psi4 PR), the pairwise dispersion analysis returned by executable/classic/psi4-channel `dftd3` was scaled differently from that by `s-dftd3` and `dftd4` (any channel). This has been fixed. However, one must be consistent about QCEngine/Psi4/fsapt.py versions. A consistent set are QCEngine >=0.26.0 and `Empirical_Disp.dat` file generated in the course of `energy(""fisapt0-d"")` by this PR or later Psi4 (approx. v1.7.0 Psi4) and script `fsapt.py` released with Psi4 v1.7.0 or later. This is semi-enforced since v1.7 requires v0.26 (`fsapt.py` is a free agent). Another consistent set is QCEngine <0.26.0 and Psi4 and `fsapt.py` <v1.7. Mixing old Psi4 or fsapt.py with new QCEngine and classic dftd3 can yield wrong fisapt analysis, and this isn't trapped.; - [x] `psi4.core.Molecule.run_dftd3` and `qcdb.Molecule.run_dftd3` don't work with `s-dftd3`. Please file an issue if you really want this c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2791:1842,energy,energy,1842,https://psicode.org,https://github.com/psi4/psi4/pull/2791,1,['energy'],['energy']
Energy Efficiency,"orted during the DFT calculation with dispersion correction and crashes Psi4 if `pytest` is missing. It can be fixed simply by installing the missing module, but I thought that it's worth reporting still in order to patch the packaging. Psi4: v.1.8 from `conda-forge` (installed in a clean env using ` conda install psi4 python=3.10 -c conda-forge/label/libint_dev -c conda-forge `). Code to reproduce:. ```python; molecule {; 0 1; O 0.0 0.5 0.0; H 0.5 0.0 0.0; H -0.5 0.0 0.0. no_reorient; symmetry c1; }. memory 8GB; set_num_threads(2); set freeze_core True. E, wfn = energy('wb97x-d/6-311g**',return_wfn=True); ```. Fails with the following error:. ```; Traceback (most recent call last):; File ""/home/q-posev/miniconda3/envs/psi4-v18/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 2574, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 1430, in scf_wavefunction_factory; superfunc, _disp_functor = build_functional_and_disp(name, restricted=(reference in [""RKS"", ""RHF""]), **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 1407, in build_functional_and_disp; _disp_functor = empirical_dispersion.EmpiricalDispersion(name_hint=superfunc.name(),; File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/sit",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3003:979,energy,energy,979,https://psicode.org,https://github.com/psi4/psi4/issues/3003,2,['energy'],['energy']
Energy Efficiency,"overlap matrix is 4.2926659058E-03.; Reciprocal condition number of the overlap matrix is 5.8671564054E-04.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo; -------------------------; A 60 60; -------------------------; Total 60 60; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -78.86898106418064 -7.88690e+01 0.00000e+00; @DF-RKS iter 1: -78.88636762953359 -1.73866e-02 1.49756e-02 DIIS; @DF-RKS iter 2: -78.27124917688414 6.15118e-01 2.18391e-02 DIIS; @DF-RKS iter 3: -79.32381221986704 -1.05256e+00 1.08985e-03 DIIS; @DF-RKS iter 4: -79.32638959495554 -2.57738e-03 2.16014e-04 DIIS; @DF-RKS iter 5: -79.32647363265359 -8.40377e-05 3.30059e-05 DIIS; @DF-RKS iter 6: -79.32647565598309 -2.02333e-06 1.23652e-06 DIIS; @DF-RKS iter 7: -79.32647565991985 -3.93676e-09 7.27369e-08 DIIS; Energy and wave function converged. ==> Post-Iterations <==. Electrons on quadrature grid:; Ntotal = 18.0000006848 ; deviation = 6.848e-07. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. 1A -9.811979 2A -9.811957 3A -0.686974; 4A -0.549234 5A -0.403737 6A -0.403737; 7A -0.338480 8A -0.310133 9A -0.310133. Virtual:. 10A 0.023031 11A 0.076058 12A 0.080886; 13A 0.080887 14A 0.110657 15A 0.110658; 16A 0.173580 17A 0.360176 18A 0.370157; 19A 0.370158 20A 0.455135 21A 0.455137; 22A 0.543892 23A 0.571369 24A 0.610757; 25A 0.610759 26A 0.613674 27A 0.623635; 28A 0.623637 29A 0.682101 30A 0.875957; 31A 1.031832 32A 1.031833 33A 1.292103; 34A 1.292104 35A 1.442476 36A 1.448632; 37A 1.662612 38A 1.675074 39A 1.675078; 40A 1.685189 41A 1.685192 42A 1.745843; 43A 1.745846 44A 1.748838 45A 1.953626; 46A 1.953628 47A 2.104265 48A 2.256310; 49A 2.256312 50A 2.286838 51A 2.457344; 52A 2.457345 53A 2.522627 54A 2.738613; 55A 2.803606 56A 2.803611 57A 2.896284; 58A 2.896288 59A 5.038202 60A 5.2642",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:7365,Energy,Energy,7365,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['Energy'],['Energy']
Energy Efficiency,"ow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location. This will allow all current Psi4 input files to be run normally. **History rewrite:**; Over time the Psi4 git repository has accumulated many large files (mostly boost binaries) that are not currently used; however, they still exists within the repository and are downloaded every time the repository is cloned. This has caused Psi4 to balloon to approximately 650MB, while only about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:2644,Schedul,Schedule,2644,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['Schedul'],['Schedule']
Energy Efficiency,"ow, U. Bozkaya, A. Yu. Sokolov; -----------------------------------------------------------------------. Psi4 started on: Fri Jan 8 13:56:46 2016. Process ID: 11885; PSI4DATADIR: ./lib; Memory level set to 256.000 MB; ```. ==> Input File <==. ---; # ! 6-31G H2O Test FCI Energy Point. memory 48000 mb. molecule h2o {; -1 1; F .0000000000 .0000000000 -.000000000; units bohr; }. set globals {; basis aug-cc-pVTZ; icore 0; }. thisenergy = energy('fci'). ---. Input file to run:; from psi4 import *; from p4const import *; from p4util import *; from molutil import *; from aliases import *; psi4_io = psi4.IOManager.shared_object(); psi4.efp_init(); psi4_io.set_default_path(""/tmp""); geometry(""""""; 0 1; H; H 1 0.74; """""",""blank_molecule_psi4_yo""). psi4.set_memory(48000000000). psi4.efp_init(); h2o = geometry(""""""; -1 1; F .0000000000 .0000000000 -.000000000; units bohr; """""",""h2o""); psi4.IO.set_default_namespace(""h2o""); psi4.set_global_option(""BASIS"", ""aug-cc-pVTZ""); psi4.set_global_option(""ICORE"", 0); thisenergy = energy('fci'). Memory set to 48.000 GiB by Python script. **\* tstart() called on node5-027-06; **\* at Fri Jan 8 13:56:53 2016. ```; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 12 Threads, 48000 MiB Core; ---------------------------------------------------------; ```. ==> Geometry <==. ```; Molecular point group: d2h; Geometry (in Bohr), charge = -1, multiplicity = 1:. Center X Y Z; ------------ ----------------- ----------------- -----------------; F 0.000000000000 0.000000000000 0.000000000000; ```. Running in d2h symmetry. Rotational constants: A = ***********\* B = ***********\* C = ***********\* [cm^-1]; Rotational constants: A = ***********\* B = ***********\* C = ***********\* [MHz]; Nuclear repulsion = 0.000000000000000. Charge = -1; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional oc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:2757,energy,energy,2757,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['energy'],['energy']
Energy Efficiency,"pherical Harmonics?: false; Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 1.9324024167E-01.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter SAD: -0.34299486696379 -3.42995e-01 0.00000e+00 ; @DF-UHF iter 1: -0.48778126858064 -1.44786e-01 7.18202e-03 DIIS; @DF-UHF iter 2: -0.49627418123381 -8.49291e-03 2.58017e-03 DIIS; @DF-UHF iter 3: -0.49762079007351 -1.34661e-03 1.09982e-04 DIIS; @DF-UHF iter 4: -0.49762397190176 -3.18183e-06 1.60614e-05 DIIS; @DF-UHF iter 5: -0.49762403062183 -5.87201e-08 1.47415e-06 DIIS; @DF-UHF iter 6: -0.49762403115935 -5.37526e-10 6.69153e-08 DIIS; @DF-UHF iter 7: -0.49762403116031 -9.60343e-13 2.69685e-09 DIIS; @DF-UHF iter 8: -0.49762403116031 -7.77156e-16 2.10910e-10 DIIS; @DF-UHF iter 9: -0.49762403116032 -8.88178e-16 2.91582e-11 DIIS; @DF-UHF iter 10: -0.49762403116032 -6.66134e-16 1.10373e-14 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 7.500000000E-01; @S^2 Observed: 7.500000000E-01; @S Expected: 5.000000000E-01; @S Observed: 5.000000000E-01. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.497624 . Alpha Virtual: . 2A 0.048719 3A 0.066612 4A 0.066612 ; 5A 0.098792 6A 0.253872 7A 0.387743 ; 8A 0.387743 9A 0.427498 10A 1.213680 ; 11A 3.852115 . Beta Occupied: . . Beta Virtual: . 1A 0.020894 2A 0.058417 3A 0.068354 ; 4A 0.068354 5A 0.183800 6A 0.269157 ; 7A 0.391375 8A 0.391375 9A 0.451441 ; 10A 1.378124 11A 3.853058 . Final Occupation by Irrep:; A ; DOCC [ 0 ]; SOCC [ 1 ]. @DF-UHF Final Energy: -0.49762403116032. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -0.4976240311603163; Two-Electron Energy = 0.0000000000000000; Total Energy = -0.4976240311603163. UHF NO Occupations:; HONO-0 : 1 A 1.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; L",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:4421,Energy,Energy,4421,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Energy'],['Energy']
Energy Efficiency,"placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python3.7"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/runtest.py"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/sapt-exch-disp-inf/input.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/testresults.log"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf/output.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL.; Traceback (most recent call last):; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-package",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2178:1605,ENERGY,ENERGY,1605,https://psicode.org,https://github.com/psi4/psi4/issues/2178,1,['ENERGY'],['ENERGY']
Energy Efficiency,"pole derivatives through finite difference of dipoles added, so IR intensities available; - [x] The dummy wavefunctions returned from wrappers always had some questionable properties (e.g., single method for mixed method, largeset HF basis for cbs wavefunction) can be even less realistic (e.g., always def2-svp basis for cbs).; - [x] n-body qcvars renamed (grace period applies); ```; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE TOTAL ENERGY"": (""VALIRON-MAYER FUNCTION COUNTERPOISE TOTAL ENERGY"", 1.7), # note misspelling; ""VALIRON-MAYER FUNCTION COUTERPOISE INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY"", 1.7),; ``` ; - [x] added managed mode for scf gradient. it's not wholly effective at consolidating code, though, since only triggers for `gradient(""hf"")`, not `gradient(correlated)`. digits to compare has to be relaxed, but this has been seen with other qc programs, too.; - [x] Distributed driver should not be advertised for use with QCFractal at this time. It hasn't been tested in a while, and mem, cores, etc. setting may need tweaking in a non-continuous mode. Use it experimentally and report back.; - [x] n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `embedding_charges` kwarg.; - [x] stdsuite: consolidated the caller fn to remove duplicat",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:6603,ENERGY,ENERGY,6603,https://psicode.org,https://github.com/psi4/psi4/pull/2575,2,['ENERGY'],['ENERGY']
Energy Efficiency,"psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2330:4491,ENERGY,ENERGY,4491,https://psicode.org,https://github.com/psi4/psi4/issues/2330,5,['ENERGY'],['ENERGY']
Energy Efficiency,"pt there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - [x] A Logging file has been introduced. All its contents should be considered experimental and subject to change.; - [x] Dipole derivatives through finite difference of dipoles added, so IR intensities available; - [x] The dummy wavefunctions returned from wrappers always had some questionable properties (e.g., single method for mixed method, largeset HF basis for cbs wavefunction) can be even less realistic (e.g., always def2-svp basis for cbs).; - [x] n-body qcvars renamed (grace period applies); ```; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE TOTAL ENERGY"": (""VALIRON-MAYER FUNCTION COUNTERPOISE TOTAL ENERGY"", 1.7), # note misspelling; ""VALIRON-MAYER FUNCTION COUTERPOISE INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY"", 1.7),; ``` ; - [x] added managed mode for scf gradient. it's not wholly effective at consolidating code, though, since only triggers for `gradient(""hf"")`, not `gradient(correlated)`. digits to compare has to be relaxed, but this has been seen with other qc programs, too.; - [x] Distributed driver should not be advertised for use with QCFractal at this time. It hasn't been ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:6245,ENERGY,ENERGY,6245,https://psicode.org,https://github.com/psi4/psi4/pull/2575,2,['ENERGY'],['ENERGY']
Energy Efficiency,"py --num_threads 6 --scf_type PK --element 1 --multiplicity 2`. For me, the output of this is (the exact numbers change on re-runs):; > -0.41204465858903644; -0.18510932345625386; 0.18101301722463536; -0.17603191005094254; -0.1034126028084521; -0.04894812237658419; -0.2577286306987443; -0.3757350049677912; -0.26680604410405556; -0.26680604410405556. Interestingly, the issue is not present when using PK and a single thread,; `python test.py --num_threads 1 --scf_type PK --element 1 --multiplicity 2`. nor when using multiple threads, but DIRECT instead of PK; `python test.py --num_threads 6 --scf_type DIRECT --element 1 --multiplicity 2`. In both of these cases, I always get the same output:; > -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424. Also, the issue is not present when using PK in multi-threaded environments, but using a different input, e.g.; `python test.py --num_threads 6 --scf_type PK --element 6 --multiplicity 3`; >-37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675. After digging a bit deeper, it seems like the difference between results stems from the entry for TWO ELECTRON ENERGY, which is essentially random (at least for single electron systems). It seems weird to me that this entry is non-zero at all for a single hydrogen atom, even for presumably correct results (i.e. when using DIRECT instead of PK), but I am no DFT expert. Note that when changing the method from PBE0 to HF, the random results problem persists, but correct results will have a TWO ELECTRON ENERGY of zero (as expected), whereas wrong results will have a non-zero entry. . [minimal_example.py.zip](https://github.com/psi4/psi4/files/9867943/minimal_example.py.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2760:2515,ENERGY,ENERGY,2515,https://psicode.org,https://github.com/psi4/psi4/issues/2760,2,['ENERGY'],['ENERGY']
Energy Efficiency,"py as np. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). ecp = {}. for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). cf = psi4.geometry(cf_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; psi4.core.clean(); ```. The error message I got is:. ```; Traceback (most recent call last):; File ""/home/sanctus/psi4conda/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 46, in <module>; File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5424, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1437, in scf_wavefunction_factory; wfn = core.ROHF(ref_wfn, supe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181:1147,ENERGY,ENERGY,1147,https://psicode.org,https://github.com/psi4/psi4/issues/3181,1,['ENERGY'],['ENERGY']
Energy Efficiency,"py"", line 2095, in run_dfocc; dfocc_wfn = core.dfocc(ref_wfn); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/diis.py"", line 375, in extrapolate; coeffs = self.diis_coefficients(); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/diis.py"", line 254, in diis_coefficients; B[i, j] = self.get_dot_product(i, j); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/diis.py"", line 198, in get_dot_product; dot_product += Rix.vector_dot(Rjx). RuntimeError: ; Fatal Error: Matrix::vector_dot: Dimensions do not match!. Error occurred in file: /home/tu/tu_tu/tu_ctibc01/prog/psi4/psi4/psi4/src/psi4/libmints/matrix.cc on line: 1703; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Matrix::vector_dot(psi::Matrix const*). Printing out the relevant lines from the Psithon --> Python processed input file:; energy('scf',write_orbitals='scf_mos'); Avals=[0.00, 0.05, 0.10, 0.12, 0.15, 0.20, 0.21, 0.22, 0.23, 0.24, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50, 0.55, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 1.00]; for A in Avals:; psi4.core.print_out(""running step %5.2f"" % A); core.set_global_option(""REMP_A"", A); --> energy('oremp',restart_file='scf_mos'); core.set_global_option(""MO_READ"", ""true""); psi4.core.print_out(""""). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Matrix::vector_dot: Dimensions do not match! !; ! Error occurred in file: !; ! /home/tu/tu_tu/tu_ctibc01/prog/psi4/psi4/psi4/src/psi4/libmints/matrix.cc on !; ! line: 1703 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::Matrix::vector_dot(psi::Matrix const*) !; ! !; !---------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2591:2456,energy,energy,2456,https://psicode.org,https://github.com/psi4/psi4/issues/2591,1,['energy'],['energy']
Energy Efficiency,"r 22: -77.94619510085352 -2.81821e+01 6.69706e+00; Final Occupation by Irrep:						 |	 @DF-RHF iter 23: -80.45392024701042 -2.50773e+00 4.59655e+00; A								 |	 @DF-RHF iter 24: -76.07267063391218 4.38125e+00 9.18998e+00; DOCC [ 4 ]							 |	 @DF-RHF iter 25: -61.85382425940151 1.42188e+01 1.05928e+01; NA [ 4 ]							 |	 @DF-RHF iter 26: -86.77218963929283 -2.49184e+01 2.75808e+00; NB [ 4 ]							 |	 @DF-RHF iter 27: -77.43543931232399 9.33675e+00 3.96819e+00; @DF-RHF Final Energy: -35.61046747457991				 |	 @DF-RHF iter 28: -83.24663680738689 -5.81120e+00 3.02602e+00; => Energetics <=							 |	 @DF-RHF iter 29: -84.59007629023938 -1.34344e+00 2.49302e+00; Nuclear Repulsion Energy = 0.0000000000000000		 |	 @DF-RHF iter 30: -86.14724570488455 -1.55717e+00 1.56145e+00; One-Electron Energy = -54.3510785737621944		 |	 @DF-RHF iter 31: -78.57013959925717 7.57711e+00 2.04327e+00; Two-Electron Energy = 18.7406110991822779		 |	 @DF-RHF iter 32: -85.83622153869187 -7.26608e+00 3.17187e+00; Total Energy = -35.6104674745799201		 |	 @DF-RHF iter 33: -87.27348788185634 -1.43727e+00 1.46175e+00; Computation Completed							 |	 @DF-RHF iter 34: -76.35072049818045 1.09228e+01 3.97637e+00; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0	 |	 @DF-RHF iter 35: -70.56903511141743 5.78169e+00 1.24567e+01; Properties computed using the SCF density matrix			 |	 @DF-RHF iter 36: -75.56024107699382 -4.99121e+00 7.54313e+00; Multipole Moments:							 |	 @DF-RHF iter 37: 153.64365441909877 2.29204e+02 6.36152e+01; ---------------------------------------------------------------------	 |	 @DF-RHF iter 38: -73.57749835218766 -2.27221e+02 1.31647e+01; Multipole Electronic (a.u.) Nuclear (a.u.) 	 |	 @DF-RHF iter 39: -85.87858242035303 -1.23011e+01 1.51536e+00; ---------------------------------------------------------------------	 |	 @DF-RHF iter 40: -74.81783048435938 1.10608e+01 4.48340e+00; L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]		 |	 @DF-RHF iter 41: -84.711",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3072:10401,Energy,Energy,10401,https://psicode.org,https://github.com/psi4/psi4/issues/3072,1,['Energy'],['Energy']
Energy Efficiency,"r 9: -0.49762403116032 -8.88178e-16 2.91582e-11 DIIS; @DF-UHF iter 10: -0.49762403116032 -6.66134e-16 1.10373e-14 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 7.500000000E-01; @S^2 Observed: 7.500000000E-01; @S Expected: 5.000000000E-01; @S Observed: 5.000000000E-01. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.497624 . Alpha Virtual: . 2A 0.048719 3A 0.066612 4A 0.066612 ; 5A 0.098792 6A 0.253872 7A 0.387743 ; 8A 0.387743 9A 0.427498 10A 1.213680 ; 11A 3.852115 . Beta Occupied: . . Beta Virtual: . 1A 0.020894 2A 0.058417 3A 0.068354 ; 4A 0.068354 5A 0.183800 6A 0.269157 ; 7A 0.391375 8A 0.391375 9A 0.451441 ; 10A 1.378124 11A 3.853058 . Final Occupation by Irrep:; A ; DOCC [ 0 ]; SOCC [ 1 ]. @DF-UHF Final Energy: -0.49762403116032. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -0.4976240311603163; Two-Electron Energy = 0.0000000000000000; Total Energy = -0.4976240311603163. UHF NO Occupations:; HONO-0 : 1 A 1.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SCF //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: AUG-CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry LI line 68 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz.gbs ; atoms 2 entry H line 40 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 976 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ---------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:5307,Energy,Energy,5307,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Energy'],['Energy']
Energy Efficiency,"ral major performance enhancements are included as well as well. This is also one of the primary patches for the Psi4 1.2 release. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. This functionality supports non-totally symmetric tensors.; - [x] The DFT V Potential object now has Hessian-Vector functionality.; - [x] Added many C++ calls to the Python interface.; - [x] Reworked the building of superfunctionals. Note that the coefficients set when building a functional are no longer modified by exact exchange or MP2 correlation factors.; - [x] DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - [x] Added generalized solvers in `p4util/solvers.py`. These include DIIS, CG, BiCGSTAB, and Davidson.; - [x] New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order SCF convergence to DFT Wavefunctions.; - [x] Adds the gradient regularized asymptotic correction (GRAC) to DFT through the option `DFT_GRAC_SHIFT`.; - [x] Adds a densi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698:1114,efficient,efficient,1114,https://psicode.org,https://github.com/psi4/psi4/pull/698,1,['efficient'],['efficient']
Energy Efficiency,ransformation.; Two-electron integral transformation complete.; (OO|VV)...; Starting second half-transformation.; Two-electron integral transformation complete.; (OV|OO)...; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; (OV|OV)...; Starting second half-transformation.; Two-electron integral transformation complete.; (OV|VV)...; Starting second half-transformation.; Two-electron integral transformation complete.; (VV|OO)...; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; (VV|OV)...; Starting second half-transformation.; Two-electron integral transformation complete.; (VV|VV)...; Starting second half-transformation.; Two-electron integral transformation complete.; Frozen core energy = 0.00000000000000. Size of irrep 0 of <ab|cd> integrals: 0.017 (MW) / 0.135 (MB); Size of irrep 1 of <ab|cd> integrals: 0.005 (MW) / 0.041 (MB); Size of irrep 2 of <ab|cd> integrals: 0.006 (MW) / 0.049 (MB); Size of irrep 3 of <ab|cd> integrals: 0.014 (MW) / 0.115 (MB); Total: 0.043 (MW) / 0.341 (MB). Size of irrep 0 of <ia|bc> integrals: 0.005 (MW) / 0.037 (MB); Size of irrep 1 of <ia|bc> integrals: 0.001 (MW) / 0.009 (MB); Size of irrep 2 of <ia|bc> integrals: 0.002 (MW) / 0.012 (MB); Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); Total: 0.011 (MW) / 0.086 (MB). Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); Total: 0.003 (MW) / 0.022 (MB); ```. Output from running coupled cluster tests:. ```; Start 9: cc1; 1/79 Test #9: cc1 ..............................***Faile,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230:2148,energy,energy,2148,https://psicode.org,https://github.com/psi4/psi4/issues/230,1,['energy'],['energy']
Energy Efficiency,"rd; -----------------------------------------------------------------------. Psi4 started on: Mon Aug 22 01:48:05 2016. Process ID: 28503; PSI4DATADIR: /usr/local/psi4/share/psi4; Memory level set to 256.000 MB. ==> Input File <==. --------------------------------------------------------------------------; #! Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. ; # Print; # the path to a trajectory file for visualization; # in Jmol.; # grep '@IRC' on the output to see a nice printout; # of the progress of your IRC computation. molecule h2o2 {; H 0.0000000000 0.9803530335 -0.8498671785; O 0.0000000000 0.6988545188 0.0536419016; O 0.0000000000 -0.6988545188 0.0536419016; H 0.0000000000 -0.9803530335 -0.8498671785; }. # g_convergence needs to be tight for IRCs:; set g_convergence gau_verytight. set {; basis dzp; opt_type irc; geom_maxiter 50; irc_direction backward; }. frequencies('scf'). # Lower point group from C2v to C2; h2o2.reset_point_group('c2'). energy = optimize('scf'). compare_values(-150.8200278868627, energy, 5, ""Energy of last IRC point"") #TEST; --------------------------------------------------------------------------; hessian() will perform analytic frequency computation.; There are an even number of electrons - assuming singlet.; Specify the multiplicity in the molecule input block. *** tstart() called on mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 256 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H -0.000000000000 0.980353033500 -0.849954236217 1.007825032070; O -0.000000000000 0.698854518800 0.053554843883 15.994914619560; O 0.00000000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/463:1986,energy,energy,1986,https://psicode.org,https://github.com/psi4/psi4/issues/463,1,['energy'],['energy']
Energy Efficiency,"re faster than the old OS integrals (191.7s) by almost a factor of two, which is to be expected. Part of the reason for deprecating the old, hand-coded integral code for the libint2 interface is that libint2 is a specialized library and therefore should have more efficient routines. The integral routine using the old OS code scales almost perfectly all the way through 18 cores. This is also to be expected: the work being done in the integral routine is embarrassingly parallel, and threads don't share any information or intermediates. Surprisingly, when the same integrals are computed with libint2 instead of the old OS code, the parallel scaling suffers drastically. We see no benefit gained from using more than two cores, and even a calculation with two cores only achieves a 1.45x speedup. When I use all 18 cores on my workstation, the new libint2 integrals are nearly 7(!) times slower than the old OS code. What makes this particularly confusing is that none of the usual culprits associated with poor parallel scaling (bad scheduling/work balance, high overhead, etc.) apply here. This is because we see perfect parallel scaling with the old OS code using all of the same conditions. The only difference between the two computations is that I've switched the source of the integrals. The only explanation for this behavior I can come up with is that the libint2 library might have some kind of global lock that prevents independent threads (with their own independent `ElectrostaticInt` objects) from computing integrals in parallel. I don't know enough about how libint2 works to justify this idea. I'm very curious to hear other thoughts on this scaling issue. ### Plugin. The plugin (attached) requires adding `PSI_API` to a few classes (DFTGrid, MultipolePotentialInt). The following function is also necessary in `psi4/libmints/electrostatic.cc`:; ```; void ElectrostaticInt::set_origin(const Vector3& _origin) {; origin_ = _origin;; std::vector<std::pair<double, std::array<double",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491:3527,schedul,scheduling,3527,https://psicode.org,https://github.com/psi4/psi4/issues/2491,1,['schedul'],['scheduling']
Energy Efficiency,"re.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Nuclear repulsion energy..........................................PASSED; =============================================================== 1 tests deselected ===============================================================; =================================== 10 failed, 4 passed, 4 skipped, 1 deselected, 1 xpassed in 193.31 seconds ====================================; ```. I excluded the `test_gdma` there because it's even weirder, as it crashes without output (`pytest -v -k 'test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`):. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../cur",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:43343,energy,energy,43343,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"read(). psi4_geo = psi4.core.Molecule.from_string(xyz_string, dtype='xyz',fix_symmetry='c1', fix_orientation=True,fix_com=True). # run psi4 calculation ; psi4.core.set_num_threads(ncores); psi4.set_options(; {; ""scf__reference"": ""rks"",; ""scf_type"": ""df"",; ""scf__maxiter"": 50,; ""basis"": 'def2-svp',; ""df_basis_scf"": 'def2-universal-jfit',; ""puream"":False,; ""guess"": ""sad"",; ""SCF_INITIAL_ACCELERATOR"":""none"",; ""dft_spherical_points"":434, ; ""dft_radial_points"" :88, ; ""diis_max_vecs"" : 6; }; ); energy = psi4.energy(name=""scf"", dft_functional=""svwn"", molecule=psi4_geo, return_wfn=False). # run PySCF calculation; mol = pyscf.M(; atom=xyzFilename, ; basis=""def2-svp"",; symmetry=False,; verbose=4,; cart=True,; ); # mol.max_memory = 10_000; mf = dft.rks.RKS(mol, xc=""svwn"").density_fit(auxbasis='def2-universal-jfit'); mf.init_guess = 'vsap'; mf.grids.level = 7; mf.conv_tol = 1e-7; mf.kernel(); print('Nuc-Nuc PySCF= ', mol.energy_nuc()); print('One electron integrals energy',mf.scf_summary['e1']); print('Coulomb energy ',mf.scf_summary['coul']); print('EXC ',mf.scf_summary['exc']); ```; The XYZ file for ethane is here; ```; 8; Ethane; C -0.759130 0.027045 -0.000000; C 0.759130 -0.027045 -0.000000; H -1.125990 0.306235 1.010150; H -1.171340 -0.966695 -0.274750; H -1.109050 0.781825 -0.735390; H 1.109040 -0.781815 0.735390; H 1.171340 0.966695 0.274760; H 1.125990 -0.306235 -1.010150; ```; The following is my output:; Psi4; ```; Memory set to 111.759 GiB by Python driver.; Threads set to 8 by Python driver. Scratch directory: /tmp/. *** tstart() called on xxx; *** at Tue Mar 28 17:20:51 2023. => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry C line 90 file /home/manas/psi4conda/share/psi4/basis/def2-svp.gbs; atoms 3-8 entry H line 15 file /home/manas/psi4conda/share/psi4/basis/def2-svp.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 8 Threads",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:2008,energy,energy,2008,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['energy'],['energy']
Energy Efficiency,reduce sapt6 test for travis's sake,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/435:0,reduce,reduce,0,https://psicode.org,https://github.com/psi4/psi4/pull/435,1,['reduce'],['reduce']
Energy Efficiency,"ree(!) other experienced Psi developers and borrowing code from a fourth because the assumptions of the `libmints/libtrans` machinery are undocumented and confusing.; * At University of Georgia, the DCT code currently has to go through several contortions to be compatible with the gradient code. It has to [rewrite part of libtrans for RHF gradients](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_sort_mo_tpdm.cc) because the developer could not figure out what to send libtrans otherwise. It has to [convert LibDPD buffers into LibIWL](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L4815) buffers so `libtrans` can [convert those back to LibDPD buffers](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/integraltransform_sort_mo_tpdm.cc), but sorted differently. It also has to [re-index](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L3839) its own 1PDM and energy-weighted density matrix, and merge [density matrix blocks into a single density matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L3789). These tasks shouldn't be necessary.; * @edeprince3 has also [rewritten parts of libtrans](https://github.com/edeprince3/v2rdm_casscf/blob/master/backtransform_tpdm.cc) to get V2RDM CASSCF gradients. As best as I can tell, the rewrite just changes orbital indexing conventions, but I could be mistaken.; * There is currently no general machinery for density-fitted correlated gradients. There are three(!) different modules with their own correlated gradient procedure: `dfmp2`, `dfocc`, and `dct`. `dfocc` [gradient technology](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/dfgrad.cc) does not make method-specific assumptions but cannot be used by other modules because it [uses](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/tei_grad_corr.cc#L181) [custom tensor machinery](https://github.com/psi4/psi4/blob/master/psi4/src/psi4",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:1686,energy,energy-weighted,1686,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['energy'],['energy-weighted']
Energy Efficiency,"reference RHF; e_convergence 12; }. energy('scf'); ```. ```; ==> Primary Basis <==. Basis Set: 3-21G; Number of shells: 32; Number of basis function: 48; Number of Cartesian functions: 48; Spherical Harmonics?: false; Max angular momentum: 1. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A1 21 21 8 8 8 0; A2 4 4 1 1 1 0; B1 8 8 2 2 2 0; B2 15 15 5 5 5 0; -------------------------------------------------------; Total 48 48 16 16 16 0; -------------------------------------------------------. ==> Integral Setup <==. Batch 1 pq = [ 0, 397] index = [ 0,79003]; ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory (MB): 715; Schwarz Cutoff: 1E-12. Minimum eigenvalue in the overlap matrix is 1.5083126009E-02.; Using Symmetric Orthogonalization.; SCF Guess: Generalized Wolfsberg-Helmholtz. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter 1: -187.27391666424671 -1.87274e+02 1.12539e-01; @RHF iter 2: -180.35110679174790 6.92281e+00 1.03058e-01 DIIS; @RHF iter 3: -189.00974758567247 -8.65864e+00 7.17009e-02 DIIS; @RHF iter 4: -190.36715264104453 -1.35741e+00 3.48777e-02 DIIS; @RHF iter 5: -190.83292951413978 -4.65777e-01 9.44992e-03 DIIS; @RHF iter 6: -190.87826214635624 -4.53326e-02 3.45136e-03 DIIS; @RHF iter 7: -190.88536867922011 -7.10653e-03 1.16084e-03 DIIS; @RHF iter 8: -190.88604640793187 -6.77729e-04 4.28749e-04 DIIS; @RHF iter 9: -190.88629946742424 -2.53059e-04 1.44181e-04 DIIS; @RHF iter 10: -190.88631371439720 -1.42470e-05 1.90608e-05 DIIS; @RHF iter 11: -190.88631410792334 -3.93526e-07 2.23723e-06 DIIS; @RHF iter 12: -190.88631411317886 -5.25552e-09 2.76348e-07 DIIS; @RHF iter 13: -190.88631411323206 -5.32054e-11 5.21575e-08 DIIS; @RHF iter 14: -190.88631411323365 -1.59162e-12 7.78940e-09 DIIS; @RHF iter 15: -190.88631411323342 2.27374e-13 9.99506e-10 DIIS. DF guess converged. ==>",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/281:1589,Energy,Energy,1589,https://psicode.org,https://github.com/psi4/psi4/issues/281,1,['Energy'],['Energy']
Energy Efficiency,"reference rks; set basis 6-31G*; set guess sad; set scf_type df. molecule QMregion {; 0 1; He 0.0 0.0 0.0; symmetry c1; no_reorient; no_com; }. gradient(""PBE0""). Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1,0.0,0.0,1.8897261245650618); psi4.set_global_option_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. For test 1, the gradient from the water and the water+charges are different, but they do not agree with the forces returned by an equivalent calculation with Gaussian. The isolated water molecule has gradients that agree with the Gaussian forces, but once the charges are added the Gaussian and PSI4 calculations return different results. For test 2, the PSI4 gradient is zero for the for the helium with and without the point charge. The charge has no effect on the results. When I repeated the calculation with Gaussian, there was a finite force on the helium atom when a charge was included. Here are the gradient results I pulled from the output files:. ```; Water+Charges (TIP3P charges: O->-0.834, H->0.417). PSI4 gradient without charges:; 1 -0.000345685156 -0.000000503248 -0.001768512746; 2 0.000171019827 0.000099064969 0.000874930893; 3 0.000170945942 -0.000098562011 0.000874553581. Gaussian forces without charges:; 1 8 0.000342119 0.000000502 0.001755656; 2 1 -0.000171096 -0.000103970 -0.000878017; 3 1 -0.000171022 0.000103468 -0.000877640. PSI4 gradient with charges:; 1 0.001872262723 -0.000000506498 -0.002344911788; 2 -0.000937982580 -0.003306842432 0.001163140925; 3 -0.000938055973 0.003307348640 0.001162761678. Gaussian forces with charges:; 1 8 0.002079660 0.000000498 -0.002984605; 2 1 0.000413259 0.000612887 -0.001458686; 3 1 0.000413331 -0.000613388 -0.001458305. --------------------------------------------------------------------; He+Charge (q = -1.0, r = 1.0 Ang.). PSI4 gradient without charges:; 1 0.000000000000 0.000000000000 0.000000000000. Gaussian forces without charges:; 1 2 0.000000000 0.000000000 0.000000000. PSI4 gradient with charg",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/184:1966,Charge,Charges,1966,https://psicode.org,https://github.com/psi4/psi4/issues/184,2,"['Charge', 'charge']","['Charges', 'charges']"
Energy Efficiency,"regenerated the reference molden.refs with e_convergence 12 and plain diis, then relaxed the convergence for normal running. no trouble with adiis. sound ok, @sgoodlett?; - [ ] @hokru, on the new dft_blocking_schemes test, I'm getting `OCTREE GRID POINTS:: computed value (293260.0) does not match (293259) by difference (1.0).` Is it reasonable to test for 293259 +/- 2 or so?. ```. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5.52535e-04 DIIS; @RHF iter 4: -672.74452788784220 -7.31047e-04 1.91489e-04 DIIS; @RHF iter 5: -672.74459677446487 -6.88866e-05 5.52833e-05 DIIS; @RHF iter 6: -672.74460689141483 -1.01169e-05 1.01025e-05 DIIS; @RHF iter 7: -672.74460730536885 -4.13954e-07 1.76374e-06 DIIS; @RHF iter 8: -672.74460731378190 -8.41305e-09 7.61045e-07 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5.52535e-04 DIIS; @RHF iter 4: -672.74452788784220 -7.31047e-04 1.91489e-04 DIIS; @RHF iter 5: -672.74459677446487 -6.88866e-05 5.52833e-05 DIIS; @RHF iter 6: -672.74460689141483 -1.01169e-05 1.01025e-05 DIIS; @RHF iter 7: -672.74460730536885 -4.13954e-07 1.76374e-06 DIIS; @RHF iter 8: -672.74460731378190 -8.41305e-09 7.61045e-07 DIIS; @RHF iter 9: -672.74460731474380 -9.61904e-10 2.09614e-07 DIIS; @RHF iter 10: -672.74460731487704 -1.33241e-10 6.64041e-08 DIIS; @RHF iter 11: -672.74460731489182 -1.47793e-11 1.26692e-08 DIIS; @RHF iter 12: -672.74460731489194 -1.13687e-13 2.66098e-09 DIIS; @RHF iter 13: -672.74460731489341 -1.47793e-12 6.52605e-10 DIIS; @RHF iter 14: -672.74460731489307 3.41061e-13 2.24066e-10 DIIS; @RHF iter 15:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2446:1729,Energy,Energy,1729,https://psicode.org,https://github.com/psi4/psi4/pull/2446,1,['Energy'],['Energy']
Energy Efficiency,requirements: 78825.79 mb; 3-index integrals: 10109.75 mb; CCSD intermediates: 68716.04 mb. <<< warning! >>> switched to low-memory (t) algorithm. memory requirements for CCSD(T): 36451.32 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 26; Number of active occupied orbitals: 74; Number of active virtual orbitals: 640; Number of frozen virtual orbitals: 38. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 393. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -3.045395864164; SS MP2 FNO correction: -1.111907331006; MP2 FNO correction: -4.157303195170. OS MP2 correlation energy: -3.045395864164; SS MP2 correlation energy: -1.111907331006; MP2 correlation energy: -4.157303195170; * MP2 total energy: -1500.355601695273. OS CCSD correlation energy: -3.045395864164; SS CCSD correlation energy: -1.111907331006; CCSD correlation energy: -4.157303195170; * CCSD total energy: -1500.355601695273. Total time for CCSD iterations: 3404.15 s (user); 270.93 s (system); 607 s (total). Time per iteration: inf s (user); inf s (system); inf s (total). *** tstop() called on r3546 at Mon Feb 10 14:43:17 2014; Module time:; user time = 31046.70 seconds = 517.45 minutes; system time = 945.63 seconds = 15.76 minutes; total time = 5144 seconds = 85.73 minutes; Total time:; user time = 33202.74 seconds = 553.38 minutes; system time = 990.31 seconds = 16.51 minutes; total time = 5317 seconds = 88.62 minutes. *** tstart() called on r3546; *** at Mon Feb 10 14:57:28 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 16; available memory = 83711.64 mb; memory requirements = 36451.32 mb. ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34:2177,energy,energy,2177,https://psicode.org,https://github.com/psi4/psi4/issues/34,1,['energy'],['energy']
Energy Efficiency,"rfunc); E MemoryError: std::bad_alloc. /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: MemoryError; _____________________________________________________________ test_psi4_scfproperty ______________________________________________________________. def test_psi4_scfproperty():; """"""scf-property""""""; #! UFH and B3LYP cc-pVQZ properties for the CH2 molecule.; ; with open('grid.dat', 'w') as handle:; handle.write(""""""\; 0.0 0.0 0.0; 1.1 1.3 1.4; """"""); ; ch2 = psi4.geometry(""""""; 0 3; c; h 1 b1; h 1 b1 2 a1; ; b1 = 1.0; a1 = 125.0; """"""); ; # Get a reasonable guess, to save some iterations; psi4.set_options({; ""scf_type"": ""pk"",; ""basis"": ""6-31G**"",; ""e_convergence"": 8,; ""docc"": [2, 0, 0, 1],; ""socc"": [1, 0, 1, 0],; ""reference"": ""uhf""}); ; ch2.update_geometry(); assert psi4.compare_values(6.648418918908746, ch2.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy""); ; props = ['DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES', 'LOWDIN_CHARGES',; 'WIBERG_LOWDIN_INDICES', 'MAYER_INDICES', 'MAYER_INDICES',; 'MO_EXTENTS', 'GRID_FIELD', 'GRID_ESP', 'ESP_AT_NUCLEI',; 'MULTIPOLE(5)', 'NO_OCCUPATIONS']; ; > psi4.property('scf', properties=props). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:211: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:823: in property; wfn = procedures['property'][lowername](lowername, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2370: in run_scf_property; scf_wfn = run_scf(name, scf_do_dipole=False, do_timer=False, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:39957,energy,energy,39957,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"rgies [Eh]; ---------------------. Doubly Occupied:. 1A -9.811979 2A -9.811957 3A -0.686974; 4A -0.549234 5A -0.403737 6A -0.403737; 7A -0.338480 8A -0.310133 9A -0.310133. Virtual:. 10A 0.023031 11A 0.076058 12A 0.080886; 13A 0.080887 14A 0.110657 15A 0.110658; 16A 0.173580 17A 0.360176 18A 0.370157; 19A 0.370158 20A 0.455135 21A 0.455137; 22A 0.543892 23A 0.571369 24A 0.610757; 25A 0.610759 26A 0.613674 27A 0.623635; 28A 0.623637 29A 0.682101 30A 0.875957; 31A 1.031832 32A 1.031833 33A 1.292103; 34A 1.292104 35A 1.442476 36A 1.448632; 37A 1.662612 38A 1.675074 39A 1.675078; 40A 1.685189 41A 1.685192 42A 1.745843; 43A 1.745846 44A 1.748838 45A 1.953626; 46A 1.953628 47A 2.104265 48A 2.256310; 49A 2.256312 50A 2.286838 51A 2.457344; 52A 2.457345 53A 2.522627 54A 2.738613; 55A 2.803606 56A 2.803611 57A 2.896284; 58A 2.896288 59A 5.038202 60A 5.264241. Final Occupation by Irrep:; A; DOCC [ 9 ]; NA [ 9 ]; NB [ 9 ]. @DF-RKS Final Energy: -79.32647565991985. => Energetics <=. Nuclear Repulsion Energy = 42.0362430486042129; One-Electron Energy = -188.7935335064416904; Two-Electron Energy = 79.9597081286466675; DFT Exchange-Correlation Energy = -12.5288933307290371; Empirical Dispersion Energy = 0.0000000000000000; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -79.3264756599198506. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : 0.0000185 -0.0000189 -0.0000004; Dipole Y : -0.0000204 0.0000189 -0.0000015; Dipole Z : -0.0000155 0.0000189 0.0000034; Magnitude : 0.0000037. ------------------------------------------------------------------------------------. **",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:8520,Energy,Energy,8520,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['Energy'],['Energy']
Energy Efficiency,"right now, one gets (wfn) sapt0-inf through sapt(dft). in light of that new addition, plus outright sapt(dft) plus sapt0-d, take a wholistic looks at the arguments to `energy(sapt*)`. EDIT: sf-sapt, too",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1835:168,energy,energy,168,https://psicode.org,https://github.com/psi4/psi4/issues/1835,1,['energy'],['energy']
Energy Efficiency,"ring the HF energy of the first Brueckner iteration as `SCF TOTAL ENERGY` and the quantities from the final B iteration as `CCSD TOTAL ENERGY`, `CCSD(T) TOTAL ENERGY`, and `(T) CORRECTION ENERGY`. In the below, I've reworked it so:; * final B energies get their own qcvars `(BCCD|BCCD(T)) (TOTAL|CORRELATION) ENERGY` in accordance with the principle that `energy(mtd)` should set `mtd TOTAL ENERGY`; * MP2 and CCSD qcvars are now collected from the first B iteration, not the last, so they have canonical values. `SCF TOTAL ENERGY` still from first B iteration.; * `(BCCD|BCCD(T)) CORRELATION ENERGY` now defined as total E of last B iteration minus HF of first B iteration. This is in accordance with the pattern that `mtd CORRELATION ENERGY` = `mtd TOTAL ENERGY` - `SCF TOTAL ENERGY`, but it is admittedly wacky when applied to Brueckner. It is, however, the same way the orbital-optimized methods of occ/dfocc have been handled. The OO methods additionally set a `mtd REFERENCE CORRECTION ENERGY` so that one can recover the ref/corl split of the final OO iteration. That could be added to the BCCD methods. Does the above sound ok, or does it need further reworking? I also tightened up the B r_conv formula a bit because the standard tests (not shown in PR) weren't matching (to 1.e-6) the highly converged values under default conditions (e_conv = 6 --> brueckner_r_conv =4). I've also been on a rampage of late to better (and automatically) document what methods are available under what detailed conditions (e.g., dertype, reference, conv/df/cd type, all-electron/frozen-core). I'd like to add the table snapshotted below to the main [CC docs page](https://psicode.org/psi4manual/master/cc.html). Unfortunately, it doesn't cover excited states or properties, so it can't replace the existing summary table, but it does provide more detail. Does it look ok, and are there any cc* capabilities in the ground-state realm that I've missed?. **Note:** No worries if the CI on this fails. I've copi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2708:1111,ENERGY,ENERGY,1111,https://psicode.org,https://github.com/psi4/psi4/pull/2708,1,['ENERGY'],['ENERGY']
Energy Efficiency,"rint(psi4.energy('scf/cc-pvdz')); ```. ### Complete traceback :; ```; /Users/vandanrevanur/anaconda3/envs/psi4_env_36/bin/python /Users/vandanrevanur/personal/codes/chemistry/psi4_stuff/psi4_testing.py . Memory set to 476.837 MiB by Python driver. Scratch directory: /tmp/. Scratch directory: /tmp/. *** tstart() called on Temps-MacBook-Pro.local; *** at Mon Apr 24 13:23:21 2023. => Loading Basis Set <=. Name: CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 198 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz.gbs ; atoms 2-3 entry H line 22 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RHF Reference; 1 Threads, 476 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.065775570547 15.994914619570; H 0.000000000000 -0.759061990794 0.521953018286 1.007825032230; H 0.000000000000 0.759061990794 0.521953018286 1.007825032230. Running in c2v symmetry. Rotational constants: A = 27.26297 B = 14.51533 C = 9.47217 [cm^-1]; Rotational constants: A = 817323.21126 B = 435158.60141 C = 283968.37536 [MHz]; Nuclear repulsion = 9.168193296424349. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: CC-PVDZ; Blend: CC-PVDZ; Number of shells: 12; Number of basis functions: 24; Number of Cartesian functions: 25; Spherical Harmonics?: true",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2930:1549,charge,charge,1549,https://psicode.org,https://github.com/psi4/psi4/issues/2930,1,['charge'],['charge']
Energy Efficiency,"rocedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File [REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/proc.py"", line 2455, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/proc.py"", line 1670, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 412, in scf_iterate; for engine_used in self.diis(Dnorm):; File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/scf_proc/subclass_methods.py"", line 111, in _RHF_diis; return self.diis_manager_.extrapolate(self.Fa(), Dnorm=Dnorm); File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/diis.py"", line 407, in extrapolate; coeffs = m * initial_coefficient_function() + (1 - m) * self.diis_coefficients(); File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/diis.py"", line 288, in adiis_coefficients; raise Exception(""ADIIS minimization failed. File a bug, and include your entire input and output files.""). Exception: ADIIS minimization failed. File a bug, and include your entire input and output files. Printing out the relevant lines from the Psithon --> Python processed input file:; no_com; symmetry c1; """""",""mol""); core.IO.set_default_namespace(""mol""); mol.update_geometry(); --> e, wf = energy('wb97m-v',return_wfn=True,). !----------------------------------------------------------------------------------!; ! !; ! ADIIS minimization failed. File a bug, and include your entire input and output !; ! files. !; ! !; !----------------------------------------------------------------------------------!. Psi4 stopped on: Friday, 22 July 2022 01:19PM; Psi4 wall time for execution: 0:02:55.44. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641:13051,energy,energy,13051,https://psicode.org,https://github.com/psi4/psi4/issues/2641,1,['energy'],['energy']
Energy Efficiency,"roots of LiCN with CIS/6-31G*, which may have uncovered some deeper problems. the main issue: the lowest-energy solution as predicted by GAMESS (and my own code, which diagonalizes the Hamiltonian by simply calling `np.linalg.eigh`) is completely skipped by Psi4, despite the following roots being the same. GAMESS predicts the following first six excited state energies (the RHF energy matching to 6 decimals):; ```; GAMESS LiCN/6-31G*; CONVERGED STATE 1 ENERGY= -99.5348374214; CONVERGED STATE 2 ENERGY= -99.5315000308; CONVERGED STATE 3 ENERGY= -99.5315000308; CONVERGED STATE 4 ENERGY= -99.5258078193; CONVERGED STATE 5 ENERGY= -99.5258078193; CONVERGED STATE 6 ENERGY= -99.5095744807; ```; while Psi4 predicts:; ```; Psi4 LiCN/6-31G* (symmetry c1, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.5315015582624; CI ROOT 2 TOTAL ENERGY:-99.53150155297872; CI ROOT 3 TOTAL ENERGY:-99.52581092386518; CI ROOT 4 TOTAL ENERGY:-99.52581092379563; CI ROOT 5 TOTAL ENERGY:-99.5096013650753; CI ROOT 6 TOTAL ENERGY:-99.48378441050741; ````; this result doesn't change with or without frozen core, but the results are fine with STO-3G, as well as water with 6-31G*. the results also match GAMESS if I perturb the linear geometry of LiCN, as suggested by @psi-rking , which suggests maybe an issue with finding roots of whatever symmetry the first excited state is; however, adding more roots (or running with/without symmetry) doesn't resolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems to converge in just one step for c1 and c2v. I suppo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:1064,ENERGY,ENERGY,1064,https://psicode.org,https://github.com/psi4/psi4/issues/3083,1,['ENERGY'],['ENERGY']
Energy Efficiency,"ry installers](https://psicode.netlify.com/installs/v14/); * Span: [437 PRs](https://github.com/psi4/psi4/milestone/5?closed=1), roughly 1559-2264. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: deepdiff, Libint1; - Added dependencies: QCEngine, Libint2. ## New Methods; - Add ability to call Axilrod-Teller-Muto (ATM) 3-body dispersion correction from Grimme's DFTD3. Note that this is for dftd3 call, not energy call (#1491); - MP2D energies and gradients with help of external program (#1661); - SCAN functionals – SCAN0, revSCAN0, SCAN, revSCAN, BMK, revM06-L (#1597); - hybrid LDA functionals – CAM-LDA0, LDA0 (when Libxc puts them in a release) (#1645); - FISAPT-D (#1670); - Superposition of atomic potentials (SAP) guess (#1665, #1700); - Implementation of partial Cholesky orthogonalization (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349, #1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) . ## New External Libraries; - [QCEngine](https://github.com/MolSSI/QCEngine) - A QCSchema runner is now a required dependency since we use it for several interfaces (#1577); - DFTD3; - MP2D; - gCP; - CPPE - Polarizable embedding with environment modeled by multi-center multipole expansion with dipole-dipole polarizabilities at the expansion sites (#1401) ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Int",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:729,energy,energy,729,https://psicode.org,https://github.com/psi4/psi4/issues/1562,2,"['charge', 'energy']","['charge', 'energy']"
Energy Efficiency,"s I get the following error when performing a CASSCF calculation with a given input wavefunction. Here is an example:. ```; import psi4; molecule_string = """"""; O 1.56850 0.10589 0.00001; N -1.39559 -0.02156 0.00004; H -1.62981 0.96110 -0.10622; H -1.86277 -0.51254 -0.75597; H -1.83355 -0.33077 0.86231; H 0.60674 -0.03396 -0.00063; H 1.94052 -0.78000 0.00022; """"""; add_input = ""\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molecule_string + add_input); N_active = 11 # Define the total number of active MOs.; N_frozen = 4 # Define the number of frozen occupied MO; N_virtual = 30 # Define the total number of virtual MOs that will be discarded; psi4.set_options({ 'ACTIVE' : [ N_active ],\; 'FROZEN_DOCC' : [ N_frozen ],\; 'FROZEN_UOCC' : [ N_virtual],\; 'DIAG_METHOD' : 'DAVIDSON',\; 'CI_MAXITER' : 200\; }). # assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Gi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1871:1142,energy,energy,1142,https://psicode.org,https://github.com/psi4/psi4/issues/1871,1,['energy'],['energy']
Energy Efficiency,"s a cutoff for small weights. The grid points with small weights are not included in the final grid. Such a cutoff is a standard procedure in many programs. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] expert option `DFT_WEIGHTS_TOLERANCE` keyword (current default `1e-14`).; - [x] small error overview added; - [x] together with pruning ca. 40% faster calculation for C60 compared to `v1.3` :-); - [x] simple test added. ## Questions; - [x] which default value? -> `1e-15` conservative or `1e-14` like in ORCA. ## Checklist; - [x] all `ctest -L dft` pass. ## Status; - [x] Ready for review; - [x] Ready for merge. ------; water dimer (RKS total energy): `PBE/aug-cc-pVTZ (99,520)` econv=1e-10 dconv=1e-8. | tolerance | error | #points |; | --- | --- | ---|; | off | 0.0 | 350460 | ; | 1e-30 | 1.36e-12 | 349417 |; | 1e-25 | 1.65e-12 | 348670 |; | 1e-20 | 1.65e-12 | 346918 |; | 1e-18 | 1.68e-12 | 345747 |; | 1e-16 | 1.63e-11 | 340646 |; | 1e-15 | 2.74e-11 | 339647|; | 1e-14 | 5.73e-09 | 335089 |; | 1e-13 | 3.65e-08 | 331285 |; | 1e-12 | 3.18e-07 | 326462 |. c2 sym. C60 isomer (RKS total energy): `PBE/aug-cc-pVDZ (75,302)` econv=1e-10 dconv=1e-8. | tolerance | error | #points |; | --- | --- | ---|; | off | 0.0 | 1359000 | ; | 1e-30 -| 3.17e-10| 1229846|; | 1e-25 | -5.34e-10| 1209622|; | 1e-20 | 5.94e-10 |1183674|; | 1e-18 | 5.41e-10 |1171102|; | 1e-16 | -6.25e-10 |1156776|; | 1e-15 | 2.48e-09| 1131228|; | 1e-14 | 3.54e-09| 1123018|; | 1e-13 | 1.25e-07 |1110668 |; | 1e-12 |1.07e-06 |1085824 |. -----. *further timings*; C60 fullerene (C2h) :PBE/aug-cc-pVDZ with grid (434,75); 16 Threads; comparison to `v1.3.1`; * pruning `ROBUST`=1.33 // `1361880/1953000` grid points // dE=2E-11; * pruning `TREUTLER=1.36`// `1064520/1953000` grid points // dE=-4E-05; * pruning `ROBUST` + `screening(1e-14)` = 1.39; `1070388/1953000` grid points //dE=-2E-09; * pruning `TREUTLER` + `screening(1e-14)` = 1.44; `773028/1953000` grid points //dE=-4E-05",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1581:1267,energy,energy,1267,https://psicode.org,https://github.com/psi4/psi4/pull/1581,1,['energy'],['energy']
Energy Efficiency,"s true for SAPT(UHF/ROHF). **Observed behavior**: second-order SAPT0 corrections are different for ROHF, although first order and total HF energies for UHF and ROHF are exactly the same. . **Suspicion**: orbital energies in ROHF are not correctly set, thus second-order amplitudes are malformed. One can easily verify that molpro's ROHF gives the same orbital energies as Psi4's UHF. **input**; ```; #! rohf bug (?) with metastable helium dimer. memory 1024 MB. molecule dimer {; 0 3; He 0.000 0.000 +1.9315; --; 0 3; He 0.000 0.000 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1975:1013,ENERGY,ENERGY,1013,https://psicode.org,https://github.com/psi4/psi4/issues/1975,6,['ENERGY'],['ENERGY']
Energy Efficiency,"s: 95; Spherical Harmonics?: true; Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 3.7125823143E-03.; Using Symmetric Orthogonalization. SCF Guess: Orbitals guess was supplied from a previous computation. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 0: -0.49904529387990 -4.99045e-01 5.81466e-04 ; @DF-UHF iter 1: -0.49933835527994 -2.93061e-04 9.46849e-05 DIIS; @DF-UHF iter 2: -0.49935062691594 -1.22716e-05 2.23284e-05 DIIS; @DF-UHF iter 3: -0.49935159814175 -9.71226e-07 4.41164e-06 DIIS; @DF-UHF iter 4: -0.49935164375895 -4.56172e-08 5.33254e-07 DIIS; @DF-UHF iter 5: -0.49935164423349 -4.74539e-10 5.00344e-08 DIIS; @DF-UHF iter 6: -0.49935164423748 -3.99308e-12 6.43193e-09 DIIS; @DF-UHF iter 7: -0.49935164423756 -8.04357e-14 8.07626e-10 DIIS; @DF-UHF iter 8: -0.49935164423756 -5.55112e-16 3.13992e-11 DIIS; @DF-UHF iter 9: -0.49935164423756 -5.55112e-17 4.79952e-12 DIIS; @DF-UHF iter 10: -0.49935164423756 7.21645e-16 2.32387e-13 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 7.500000000E-01; @S^2 Observed: 7.500000000E-01; @S Expected: 5.000000000E-01; @S Observed: 5.000000000E-01. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.499352 . Alpha Virtual: . 2A 0.012936 3A 0.013757 4A 0.013757 ; 5A 0.015378 6A 0.063621 7A 0.068900 ; 8A 0.068900 9A 0.086764 10A 0.103920 ; 11A 0.198954 12A 0.198954 13A 0.208977 ; 14A 0.208977 15A 0.256823 16A 0.270230 ; 17A 0.318044 18A 0.318044 19A 0.402166 ; 20A 0.450346 21A 0.450346 22A 0.540514 ; 23A 0.606544 24A 0.606544 25A 0.613724 ; 26A 0.613724 27A 0.838452 28A 1.281252 ; 29A 1.826605 30A 1.826605 31A 1.850798 ; 32A 4.179388 . Beta Occupied: . . Beta Virtual: . 1A 0.006309 2A 0.013514 3A 0.013821 ; 4A 0.013821 5A 0.037931 6A 0.065570 ; 7A 0.070561 8A 0.070561 9A 0.090473 ; 10A 0.171679 11A 0.207466 12A 0.207466 ; 13A 0.209492 14A 0.209492 15A 0.257933 ; 16A 0.287508 17A 0.331720 18A 0.3317",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:9346,Energy,Energy,9346,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Energy'],['Energy']
Energy Efficiency,"scf_e_A, wfnA = psi4.energy(""SCF"", return_wfn=True, molecule=monomerA); scf_e_B, wfnB = psi4.energy(""SCF"", return_wfn=True, molecule=monomerB). ```; Runned as; ```bash; python minimal.py; ```; the output is; ```python; Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: -5.6000. Electronic Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: 5.5998. Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: -0.0002 Total: 0.0002. Dipole Moment: [D]; X: -0.0000 Y: -0.0000 Z: -0.0005 Total: 0.0005. /home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/npyio.py:538: FutureWarning: Object arrays will not be saved by default in the future because `allow_pickle` will default to False. You should add `allow_pickle=True` explicitly to elminate this warning.; pickle_kwargs=pickle_kwargs); Traceback (most recent call last):; File ""minimal.py"", line 34, in <module>; scf_e_A, wfnA = psi4.energy(""SCF"", return_wfn=True, molecule=monomerA); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/procrouting/proc.py"", line 2058, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/procrouting/proc.py"", line 1423, in scf_helper; scf_wfn.to_file(write_filename); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/p4util/python_helpers.py"", line 303, in _core_wavefunction_to_file; np.save(filename, wfn_data); File ""/home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/npyio.py"", line 538, in save; pickle_kwargs=pickle_kwargs); File ""/home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/format.py"", line 637, in write_array; raise ValueError(""Object arrays cannot be saved when ""; ValueError: Object arrays canno",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706:1717,energy,energy,1717,https://psicode.org,https://github.com/psi4/psi4/pull/1706,1,['energy'],['energy']
Energy Efficiency,"scribed [here](https://www.sciencedirect.com/science/article/pii/S0301010408005089). ### Results. Below are timings of the naive semi-numerical integral loop using both the old psi4 integrals and the new libint2 integrals. This benchmark was performed on a butane molecule in a cc-pVDZ basis set and a standard 302/75 quadrature grid. Wall times are the minimum of five trials. | Cores | Old Integral<br/>Wall Time (s) | Old Integral<br/>Parallel Speedup | New Integral<br/>Wall Time (s) | New Integral<br/>Parallel Speedup |; | :--- | :--- | :--- | :--- | :--- |; | 1 | 191.7 | --- | 105.3 | --- |; | 2 | 96.1 | x2.00 | 72.6 | x1.45 |; | 4 | 48.4 | x3.96 | 71.5 | x1.47 |; | 8 | 24.3 | x7.88 | 74.5 | x1.41 |; | 18 | 11.5 | x16.62 | 72.8 | x1.45 |. Note that with one core, the new libint2 integrals (105.3s) are faster than the old OS integrals (191.7s) by almost a factor of two, which is to be expected. Part of the reason for deprecating the old, hand-coded integral code for the libint2 interface is that libint2 is a specialized library and therefore should have more efficient routines. The integral routine using the old OS code scales almost perfectly all the way through 18 cores. This is also to be expected: the work being done in the integral routine is embarrassingly parallel, and threads don't share any information or intermediates. Surprisingly, when the same integrals are computed with libint2 instead of the old OS code, the parallel scaling suffers drastically. We see no benefit gained from using more than two cores, and even a calculation with two cores only achieves a 1.45x speedup. When I use all 18 cores on my workstation, the new libint2 integrals are nearly 7(!) times slower than the old OS code. What makes this particularly confusing is that none of the usual culprits associated with poor parallel scaling (bad scheduling/work balance, high overhead, etc.) apply here. This is because we see perfect parallel scaling with the old OS code using all of the same cond",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491:2754,efficient,efficient,2754,https://psicode.org,https://github.com/psi4/psi4/issues/2491,1,['efficient'],['efficient']
Energy Efficiency,"se are separate entries (away from qcng) in `standard_suite_ref_local.py`; * In filling out the capabilities tables for Hessians, I tried to collect CD Hessians for HF and SVWN by FD of energies. They failed the per-element CD result ~= CONV result check. Not surprising since CD thresh is set at 1e-4. I didn't do anything about the failure (ref values deleted and tests are not active), so this is just to bring up that CD threshold is untuned for dertype or E_/D_/R_CONVERGENCE.; * refuted first two thirds of a prominent footnote: `DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented.`; - [x] upgraded stdsuite runner to catch up with qcdb and qcengine last year by (1) implementing per-dertype and abs/rel comparison checks (nothing is actually loosened) and (2) dropping a dict summary of each test to a record file.; - [x] arranged for available `td-{dft}` calls to show up in the energy table, https://psicode.org/psi4manual/master/energy.html; - [x] fixed `energy(""psimrcc_scf"")` to use regular SCF as ref for PSIMRCC and added a test; - [x] rehabilitated `energy(""qchf"")` (which never had its initialism expanded in the whole of the codebase, btw) so it runs. added a test. it probably ought to be better integrated with regular SCF module. Regular SCF has a qchf option that is unused.; - [x] adjusted some qcvars in FNOCC to collect more components from cepa-like methods and to collect different perturbative triples for qcisd.; - [x] collected qcvars correctly in DFOCC for CCD and QCHF. (It was harvesting the CCD method that tipped me into the rabbit-hole that became this PR.). - [x] TODO `pytest -m quick` is still friendly to run (CI finished in reasonable time), but the additions to stdsuite have make ordinary full pytests expensive. I need to manipulate default marks so folks don't inadvertently start hours of tests. `pytest -v ../tests/pytests/test_standard_suite.py -m ""not noci"" -n auto --durations 100 --",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:11682,energy,energy,11682,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['energy'],['energy']
Energy Efficiency,separate reference from method in energy arguments,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/117:34,energy,energy,34,https://psicode.org,https://github.com/psi4/psi4/issues/117,1,['energy'],['energy']
Energy Efficiency,"shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; ________________________________________________________________ test_psi4_basic _________________________________________________________________. def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); > psi4.energy('scf'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:15: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4ccd780>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_f",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:22172,energy,energy,22172,https://psicode.org,https://github.com/psi4/psi4/issues/820,2,['energy'],['energy']
Energy Efficiency,"shift"" in OCC. ""Level shift"" is a misnomer and actually refers to scaling the diagonal elements of the DIIS B-matrix. When I'm done, the orbital convergence will be so much better that we won't notice it's gone. In the short term, this does cause more test failures. ## Questions; * Because we're losing ""level shifting"", we're losing some keywords. I don't know how to deprecate these. If they're provided as module-level keywords, then I don't know the technical details of how you would raise a warning message. The bigger problem is when they're global keywords. DFOCC still uses ""level shifting"", so I can only raise a warning when I know what module the user is in. Thoughts on how to handle this?; * Should we be losing ""level shifting""? We can add _damping_ to `libdiis` if there's demand for it. I think there are better things to do with my time. ## Quick Test Status; * Switching out the DIIS version caused the `omp2p5-2` test's OMP2.5 energy to fall outside convergence criteria, again emphasizing how unstable orbital convergence in OCC is. We'll find out what the actual value is by the time I'm done.; * Losing ""level shifting"" was enough to break the `ocepa-grad2` test. This test asks for a higher-than-normal convergence from OCC, so that's no surprise. (I imagine Psi ups the energy convergence default when the user requests a gradient.) As a temp fix, I lowered the demanded energy convergence from 8 to 7. Even after that, we're outside the test tolerance, so I changed the value to boot. If anybody is dying to know the correct answer, I can run it on my Python code.; * `omp2-2` encountered oscillatory convergence, and I responded by lowering the convergence we seek. Again, coupling amplitude and orbital DIIS will break the oscillations and render this test hack unnecessary.; * We may have lost other full tests, but we'll get them back at the end. ## So Lori Knows What to Put in Changelog; - [x] Overhauled orbital convergence in the OCC module. As a result, the `level",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783:3141,energy,energy,3141,https://psicode.org,https://github.com/psi4/psi4/pull/1783,1,['energy'],['energy']
Energy Efficiency,"solved Issues; - [x] There's certainly room for code cleanup.; - [x] I think `libsapt_solver` is the most logical home for this code and `energy('sapt2+3')` its most logical invocation - after all, this correction forms a part of SAPT2+3 only, not the lower SAPT levels. The E(30)ind correction needs to be calculated beforehand, both for subtracting its value from the total (ind+ex-ind) calculated here, and for generating the third-order induction amplitudes that are reused here. However, unlike most of the stuff in `libsapt_solver`, the code is AO-based and the two-electron integrals enter only via generalized J/K matrices. Therefore, I had to export some additional AO quantities in `libsapt_solver/sapt.h` and I don't know if I did this in an optimal way.; - [x] Note to self: frozen core still needs to be checked. ## Design (Big-Picture) Questions - input from @CDSherrill @dgasmith @loriab and others will be highly beneficial!; - [ ] The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require `energy('sapt(dft)')` and the last one `energy('sapt2+3')`. That's quite unfortunate and we need a better workflow, possibly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of `energy('sapt0')`.; - [ ] What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?; - [ ] Finally, the option names such as `do_ind30_exch_sinf` are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of e",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2314:1859,energy,energy,1859,https://psicode.org,https://github.com/psi4/psi4/pull/2314,2,['energy'],['energy']
Energy Efficiency,space: 640. ==> Memory <==. Total memory requirements: 78825.79 mb; 3-index integrals: 10109.75 mb; CCSD intermediates: 68716.04 mb. <<< warning! >>> switched to low-memory (t) algorithm. memory requirements for CCSD(T): 36451.32 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 26; Number of active occupied orbitals: 74; Number of active virtual orbitals: 640; Number of frozen virtual orbitals: 38. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 393. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -3.045395864164; SS MP2 FNO correction: -1.111907331006; MP2 FNO correction: -4.157303195170. OS MP2 correlation energy: -3.045395864164; SS MP2 correlation energy: -1.111907331006; MP2 correlation energy: -4.157303195170; * MP2 total energy: -1500.355601695273. OS CCSD correlation energy: -3.045395864164; SS CCSD correlation energy: -1.111907331006; CCSD correlation energy: -4.157303195170; * CCSD total energy: -1500.355601695273. Total time for CCSD iterations: 3404.15 s (user); 270.93 s (system); 607 s (total). Time per iteration: inf s (user); inf s (system); inf s (total). *** tstop() called on r3546 at Mon Feb 10 14:43:17 2014; Module time:; user time = 31046.70 seconds = 517.45 minutes; system time = 945.63 seconds = 15.76 minutes; total time = 5144 seconds = 85.73 minutes; Total time:; user time = 33202.74 seconds = 553.38 minutes; system time = 990.31 seconds = 16.51 minutes; total time = 5317 seconds = 88.62 minutes. *** tstart() called on r3546; *** at Mon Feb 10 14:57:28 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 16; available memory = 83711.64 mb,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34:2140,energy,energy,2140,https://psicode.org,https://github.com/psi4/psi4/issues/34,1,['energy'],['energy']
Energy Efficiency,"st add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: SIMINT; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:27 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:14503,energy,energy,14503,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"stand the problem, it's easiest to work with a toy system. I'm choosing the following:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. mtd = ""hf/sto-6g"". set tdscf_tda true; set reference uks ; set tdscf_states [0, 0, 2, 0]. energy(""td-"" + mtd). set reference rks ; set tdscf_states [0, 0, 1, 0]; energy(""td-"" + mtd). set tdscf_triplets only; energy(""td-"" + mtd); ```. Within the TDA approximation, we need to find the roots of a Hermitian matrix. This matrix has the structure J + V + X. J consists of _Coulomb integrals_, V consists of _the exchange correlation second derivative elements_, and X is everything else - it's not relevant for this problem. Because of the spin-properties of the Hamiltonian (and approximate DFT functionals), the matrix becomes block-diagonal upon transforming the basis states (i-a) α and (i-a) β into their normalized plus and minus combinations. The plus eigenvectors correspond to singlets, and the negative eigenvectors to triplets. Matrix elements take the form 1/2 * [(α|α) ± (α|β) ± (β|α) + (β|β)], where parentheses denote a spin-dependent matrix element. Upon exploiting spin-restriction, this reduces to [(α|α) ± (α|β)]. Now, J matrix elements are spinfree, i.e., the Coulomb integral (pq|pq) doesn't care whether the bra and the ket have the same spin-index or not, so long as p and q have the same spinindex. Therefore, the plus spin combination reduces to 2 * (pq|pq), and the minus spin combination reduces to 0. The V matrix elements are not spinfree. Whether you differentiate with respect to an alpha excitation twice or an alpha followed by a beta produces different integrals. The formula [(α|α) ± (α|β)] does not simplify. Unfortunately, Psi combines the V terms into the J terms. Psi currently computes the + case of the V terms with no mechanism to request the - terms. _This_ is why we can't do triplets. This should be fixed, once the code is better organized and commented so it's clear exactly which terms need the freedom to change sign.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2841:1357,reduce,reduces,1357,https://psicode.org,https://github.com/psi4/psi4/issues/2841,3,['reduce'],['reduces']
Energy Efficiency,"stroms). Chrgfield_B = QMMM(); Chrgfield_B.extern.addCharge( 0.417, -2.5628 / psi_bohr2angstroms, -0.8269 / psi_bohr2angstroms, -1.6696 / psi_bohr2angstroms); Chrgfield_B.extern.addCharge(-0.834, -1.7899 / psi_bohr2angstroms, -0.4027 / psi_bohr2angstroms, -1.2768 / psi_bohr2angstroms); Chrgfield_B.extern.addCharge( 0.417, -1.8988 / psi_bohr2angstroms, -0.4993 / psi_bohr2angstroms, -0.3072 / psi_bohr2angstroms). Chrgfield_C = QMMM(); Chrgfield_C.extern.addCharge( 0.417, 1.1270 / psi_bohr2angstroms, 1.5527 / psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = [",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2330:4023,energy,energy,4023,https://psicode.org,https://github.com/psi4/psi4/issues/2330,1,['energy'],['energy']
Energy Efficiency,"symmetry, switch symmetry off and check if I'm still at a stable solution. However, I find I'm unable to change my molecule for symmetry constraints (or charge/multiplicity for that matter). The following input; ```; molecule sym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set basis STO-3G; energy('scf'). molecule nosym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set scf guess read; energy('scf'); ```; runs the first SCF, but crashes on the second with; ```; RuntimeError: ; Fatal Error: SCF guess was set to SAD, but sad_basissets_ was empty!. Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/sad.cc on line: 659; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::scf::HF::compute_SAD_guess(); psi::scf::HF::guess(); psi::scf::HF::initialize(); psi::scf::HF::compute_energy(); ```; Oddly, it appear that while in the second run; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is READ.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00; ```; the initialization uses; ```; ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: file /home/work/psi4/install/share/psi4/basis/def2-svp-jkfit.gbs; Number of shells: 12; Number of basis function: 36; Number of Cartesian functions: 40; Spherical Harmonics?: true; Max angular momentum: 2. Minimum eigenvalue in the overlap matrix is 2.8114045453E-01.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.; ```; followed by the crash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/586:1361,Energy,Energy,1361,https://psicode.org,https://github.com/psi4/psi4/issues/586,1,['Energy'],['Energy']
Energy Efficiency,"t be empty"" when calling fchk() after the method and basis are defined in the energy() function call.; This problem is found in the latest development version 1.4rc2.dev97.; v1.3.x did not have this problem. ```; molecule {; 0 1; O 3.031916 1.669683 2.276015; H 2.818359 1.127467 3.035217; H 2.894980 2.585172 2.519181; }; E, wfn = energy('mp2/6-311G**',properties=['dipole'],return_wfn=True); fchk(wfn, ""test4-dma.fchk""); clean(); ```. ```; Traceback (most recent call last):; File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/bin/psi4"", line 332, in <module>; exec(content); File ""<string>"", line 69, in <module>; File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1993, in fchk; wfn_ = core.Wavefunction.build(wfn.molecule(), core.get_global_option('BASIS')); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 125, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 90, in _pybuild_basis; return_atomlist=return_atomlist); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 646, in pyconstruct; raise ValidationError(""""""Orbital basis argument must not be empty.""""""). psi4.driver.qcdb.exceptions.ValidationError: Orbital basis argument must not be empty. Printing out the relevant lines from the Psithon --> Python processed input file:; H 2.818359 1.127467 3.035217; H 2.894980 2.585172 2.519181; """"""); core.IO.set_default_namespace(""""); E, wfn = energy('mp2/6-311G**',properties=['dipole'],return_wfn=True); --> fchk(wfn, ""test4-dma.fchk""); clean(). !--------------------------------------------!; ! !; ! Orbital basis argument must not be empty. !; ! !; !--------------------------------------------!. ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2177:1790,energy,energy,1790,https://psicode.org,https://github.com/psi4/psi4/issues/2177,1,['energy'],['energy']
Energy Efficiency,"t ene'); compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(norm_g_start, g0, 3, 'start grad'). def test_zero_grad(mol):; e, wfn = optimize('mp2', return_wfn=True, molecule=mol); g = wfn.gradient(); g.print_out(); compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); compare_matrices(zerograd, g, 3, 'opt ZERO grad'). def test_odd_start(mol):; g0 = gradient('mp2', molecule=mol); compare_values(odd_nre_start, mol.nuclear_repulsion_energy(), 1, 'start nre'); compare_values(odd_e_start, get_variable('CURRENT ENERGY'), 3, 'start ene'); compare_values(odd_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(odd_g_start, g0, 3, 'start grad'). def test_badodd_grad(mol):; e, wfn = optimize('mp2', return_wfn=True, molecule=mol); g = wfn.gradient(); g.print_out(); compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); compare_values(odd_rmsg_opt, g.rms(), 4, 'opt grad nogood'). test_norm_start(normz); test_zero_grad(normz). # And behold, the initial gradient matches Q-Chem, the optimization; # progresses nicely, the RMS Force column goes to zero, and the gradient; # at the end is zero. # start nre.........................................................PASSED; # start ene.........................................................PASSED; # start rms grad....................................................PASSED; # start grad........................................................PASSED; #Optimizer: Optimization complete!; # opt nre...........................................................PASSED; # opt ene...........................................................PASSED; # opt ZERO grad.....................................................PASSED. # ------------------------------------------------------------------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:3166,ENERGY,ENERGY,3166,https://psicode.org,https://github.com/psi4/psi4/issues/310,1,['ENERGY'],['ENERGY']
Energy Efficiency,"t parser (#1743); - In `-o stdout` mode, `core.be_quiet()` followed by `core.reopen_outfile()` no longer petulantly deprives you of output (#1735); - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.6.0 (#2028) ; - Fix memory bug in libtrans (#2027) ; - Fix to large DF-MP2 (#",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:13051,charge,charges,13051,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['charge'],['charges']
Energy Efficiency,t symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). # Developer Interests; - Now uses LibXC for DFT XC kernels (#698); - Reworked the building of superfunctionals to use dictionaries (#922); - SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. (#760); - The DFT V Potential object now has Hessian-Vector functionality. (#698); - DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient; - New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - ECP SCF energies.; - ECP gradients by finite differences in Python.; - DFT is now has several hundred tests against Psi4 and other implementations; - Shared pointers were rewritten to use `std::make_shared`. (#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:4592,efficient,efficient,4592,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['efficient'],['efficient']
Energy Efficiency,"t this error message: . ```; import psi4; import numpy as np. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). ecp = {}. for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). cf = psi4.geometry(cf_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; psi4.core.clean(); ```. The error message I got is:. ```; Traceback (most recent call last):; File ""/home/sanctus/psi4conda/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 46, in <module>; File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5424, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1437, in scf",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181:1095,ENERGY,ENERGY,1095,https://psicode.org,https://github.com/psi4/psi4/issues/3181,1,['ENERGY'],['ENERGY']
Energy Efficiency,"t w/o extensive testing and/or it was easier to glide over details. The hand-gen table has been replaced to be more general listing maximum capabilities, the parallelism column has been removed, and the complementary auto-gen summary table has been added; - [x] the main hand-generated capabilities table in introduction.rst and the docstring methods table in driver.py (shows up in https://psicode.org/psi4manual/master/energy.html etc.) have been reconciled with the current state of the procedures table. Devs are now admonished to update all three concurrently :-); - [x] Some investigation and searching of CDS's memory and comparison to GAMESS concluded that for arbitrary-order MPn and ZAPTn through DETCI that the written docs were right (MPn for RHF only and ZAPTn for ROHF only) and what was allowed was wrong (both for both). This has been reworked to match the written docs and various UpgradeHelpers have been positioned. Some tests had to change. Note that ZAPTn reduces to MPn for RHF, and DETCI was producing that correctly. However, DETCI MPn for ROHF wasn't producing anything we had confidence in, so it's good to get that disabled. Ugur's ROHF MP2 matches GAMESS `ospt=rmp` and DETCI's ROHF ZAPT2 matches GAMESS `ospt=zapt`, so I think this puts #311 to rest.; - [x] As reported in #2634, MRCC wasn't playing nicely with distributed driver due to the two-stage call-with-mrmtd then intercept-and-replace-mtd-with-dict. This scheme is replaced by an ordinary method call with MRCC backend indicated by `set qc_program mrcc`, just like intra-psi modules. Psi4 won't just default to MRCC if available; it must be specified. An UpgradeHelper has been deployed. The MRCC definition dictionary has been moved from driver_util.py (in a fn) to a raw dict in procrouting/proc_data.py. Collection of qcvars has been maximized. closes #2634. replaces and closes #2638 EDIT: after discussion below, MRCC _will_ be defaulted to if available. Practically, the only confusion should arise for a-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:5608,reduce,reduces,5608,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['reduce'],['reduces']
Energy Efficiency,"t. First, I give you my INPUT in python : . pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; variables = pes_origin[:] + [90, 90]; psi4.geometry(; """"""; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables) ); ; psi4.set_options({ 'basis': 'cc-pvdz',; 'DETCI_FREEZE_CORE' : False,; 'reference': 'RHF',; 'num_roots': 2,; 'frozen_docc':[0],; 'restricted_docc': [6],; 'active': [3],; 'restricted_uocc': [11], ; 'frozen_uocc': [23],; 'mcscf_maxiter': 1000, ; 'avg_states' : [ 0, 1],; 'avg_weights' : [ 0.5, 0.5 ]; }); ; sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY') . Then, I give you from the OUTPUT FILE the decomposition I obtain : . *******************************************************************; *******************************************************************; ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -93.931448649953467. Active Space Natural occupation numbers:. A 2.000000 A 1.000000 A 1.000000. The 9 most important determinants:. * 1 0.691216 ( 0, 1) 7AX 8AA 9AB ; * 2 0.691216 ( 1, 0) 7AX 8AB 9AA ; * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX ; * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX ; * 5 0.000000 ( 0, 0) 7AX 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB ; * 3 -0.291143 ( 2, 0) 7AB 8AX 9AA ; * 4 0.206936 ( 2, 2) 8AX 9AX ; * 5 0.015212 ( 1, 1) 7AX 9AX ; * 6 0.000000 ( 1, 0) 7AX 8AB 9AA ; * 7 0.000000 ( 0, 1) 7AX 8AA 9AB ; * 8 -0.000000 ( 1, 2) 7AA 8AB 9AX ; * 9 -0.000000 ( 2, 1) 7AB 8AA 9AX ; ******************************************************",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008:1320,energy,energy,1320,https://psicode.org,https://github.com/psi4/psi4/issues/2008,1,['energy'],['energy']
Energy Efficiency,"ta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00134025 xtpl_highest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:3633,ENERGY,ENERGY,3633,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['ENERGY'],['ENERGY']
Energy Efficiency,"tal time = 594 seconds = 9.90 minutes; Total time:; user time = 522.41 seconds = 8.71 minutes; system time = 15.59 seconds = 0.26 minutes; total time = 594 seconds = 9.90 minutes. **\* tstart() called on shukla-pc.localdomain; **\* at Thu Oct 16 11:16:51 2014. ```; **************************************************; * TRANSQT2: Program to transform integrals from *; * the SO basis to the MO basis. *; * *; * Daniel, David, & Justin *; **************************************************. Input parameters:; -----------------; Wave function = SCF; Backtransform = No; Print Level = 1; Print TEIs = No; Reference wfn = RHF; Derivative = None; Delete TEI File = Yes; Memory (Mbytes) = 5000.0; Cache Level = 2; Cache Type = LRU; Chkpt Parameters:; --------------------; Number of irreps = 1; Number of SOs = 246; Number of MOs = 246; Number of active MOs = 246. Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; A 246 14 33 0 199 0. Nuclear Rep. energy (chkpt) = 697.11317829643781; SCF energy (chkpt) = -535.97469065986911. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 2; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on shukla-pc.localdomain at Thu Oct 16 11:29:13 2014; Module time:; user time = 259.08 seconds = 4.32 minutes; system time = 51.47 seconds = 0.86 minutes; total time = 742 seconds = 12.37 minutes; Total time:; user time = 781.49 seconds = 13.02 minutes; system time = 67.06 seconds = 1.12 minutes; total time = 1336 seconds = 22.27 minutes. **\* tstart() called on shukla-pc.localdomain; **\* at Thu Oct 16 11:29:13 2014. ---. ```; D E T C I . C. David Sherrill; Matt L. Leininger; 18 June 1999; ```. ---. PARAMETERS: ; EX LEVEL = 2 H0 BLOCKSIZE = 400; VAL EX LEVEL = 0 H0 GUESS SIZE= 400; H0COUPLINGSIZE= 0 H0 COUPLI",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:14260,energy,energy,14260,https://psicode.org,https://github.com/psi4/psi4/issues/62,1,['energy'],['energy']
Energy Efficiency,"tangle. This is a redesign and a backport of dftd3-running tech from qcdb. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] libdisp's -D2 made more flexible so it can use same s6/alpha6/sr6 params as Grimme's -D2. existing D2 dict defs needed filling in further; - [x] no more d2p4/d2gr. that choice now made through `energy(..., engine='dftd3|libdisp')`; - [x] _all_ dispersions served out of dashparam for dftd3/libdisp/nl. accordingly much of the metadata from EmpiricalDispersion moved to dashcoeff.; - [x] EmpiricalDispersion much reduced, sorry. On the other hand, I suspect it's now the slim unification class DGAS actually wanted, if it hadn't needed to contort around run_dftd3.; - [x] All the different combos of fctl/dash/fctl-dash/params/default-params/partial-user-params sorted out in `dashparam.from_arrays()`. This is used as the backend to everything. `qcdb.Molecule.run_dftd3()`, `psi4.core.Molecule.run_dftd3()`, `qcdb.energy('b3lyp-d3')`, `psi4.energy('b3lyp-d3')`, `EmpiricalDispersion.compute_energy()`; - [x] Use QCJson_Schema model to drive and harvest from dftd3 rather than one big function.; - [x] This passes all existing tests. However, I've devised one it doesn't pass (user-def fctl incl. disp). Working on that.; - [x] Not yet begun to trace how citations are passed around.; - [x] Yes, I need to rebase to get Jonathan's findif changes incorporated.; - [x] Bump pylibefp to 0.4 and finish its c->py transition in build paraphernalia.; - [x] current commits are rich in docstrings but actual docs need a pass. some stuff, notably DFT_DISPERSION_PARAMETERS is out of date. ## Questions; - [ ] This touches a lot of people's code. I'm fairly happy that this is a simplification and a workable design. But it's just a better starting point, and others may have new ideas and improvements. Or see holes in my logic and planning. ## Checklist; - [x] Tests added for any new features; - [x] All full tests run. ## Status; - [x",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1151:1404,energy,energy,1404,https://psicode.org,https://github.com/psi4/psi4/pull/1151,1,['energy'],['energy']
Energy Efficiency,"td::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: SIMINT; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:27 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational const",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:14653,energy,energy,14653,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"ted stdsuite testing and attendant qcvar fixups for existing occ/dfocc methods and new methods remp2 and categories (1) and (2) from dfocc2 branch. That mega-changeset lives at #2633 for now. This PR breaks off the `occ` portion for review. ## Todos; - [x] @behnle added REMP2 and OREMP2 hybrid perturbation theories (https://doi.org/10.1063/1.5086168) with conventional integrals added to `occ` module, as originally proposed in #2354; - [ ] note that this uses a specialty QCEngine for reference values. https://github.com/MolSSI/QCEngine/pull/375 It'll build by itself. I'll need to mint a QCEngine patch release before building conda packages with this PR in master.; - [x] docs-wise, I picked off a bit and included it in this PR. on the whole, let's defer docs edits until the dfocc PR; - [x] reworked the run_occ* driver functions a bit so that method defs are localized and there's less risk of missing an internal setting when adding new methods.; - [x] added stdsuite testing for new methods remp2 energy and oremp2 energy and gradient. added stdsuite testing for existing E & G for omp2, omp2.5, omp3, oremp2, olccd and filled in some gaps for ccsd, ccsd(t), a-ccsd(t). all conventional ints. fixed up some mis-set byproducts uncovered by stdsuite testing: OO ROHF was printing and setting wrong plain MP2 energies, OMP3 & OMP2.5 wasn't setting right `Wfn.energy_`, stop setting ROHF MP3 and MP2.5 out of caution.; - [x] tightened the min rms_mograd_convergence from 6.0 to 6.5 so that stdsuite (3 mol/basis sets) could reliably compute energies, gradients, and findif gradients to 1e-6. ## Questions; - [x] sometimes the non-OO value (e.g., MP2, LCCD) is available as an early byproduct of the OO calc (e.g., OMP2, OLCCD). this wasn't the case with REMP, and some QCVariables that stored a purported non-OO REMP had to be removed. @behnle, please confirm that this sounds right.; - @behnle, sorry for the long delay and scrambling of your PR. please feel free to comment and PR to this to ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653:1742,energy,energy,1742,https://psicode.org,https://github.com/psi4/psi4/pull/2653,2,['energy'],['energy']
Energy Efficiency,"ted to break down, but this hasn't been tried.; - [x] A Logging file has been introduced. All its contents should be considered experimental and subject to change.; - [x] Dipole derivatives through finite difference of dipoles added, so IR intensities available; - [x] The dummy wavefunctions returned from wrappers always had some questionable properties (e.g., single method for mixed method, largeset HF basis for cbs wavefunction) can be even less realistic (e.g., always def2-svp basis for cbs).; - [x] n-body qcvars renamed (grace period applies); ```; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE TOTAL ENERGY"": (""VALIRON-MAYER FUNCTION COUNTERPOISE TOTAL ENERGY"", 1.7), # note misspelling; ""VALIRON-MAYER FUNCTION COUTERPOISE INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY"", 1.7),; ``` ; - [x] added managed mode for scf gradient. it's not wholly effective at consolidating code, though, since only triggers for `gradient(""hf"")`, not `gradient(correlated)`. digits to compare has to be relaxed, but this has been seen with other qc programs, too.; - [x] Distributed driver should not be advertised for use with QCFractal at this time. It hasn't been tested in a while, and mem, cores, etc. setting may need tweaking in a non-continuous mode. Use it experimentally and report back.; - [x] n-body wrapper can no longer do embed",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:6429,ENERGY,ENERGY,6429,https://psicode.org,https://github.com/psi4/psi4/pull/2575,2,['ENERGY'],['ENERGY']
Energy Efficiency,"ter 17: -86.99766298311712 -7.48444e+00 1.95566e+00; 11A -0.145050 12A -0.078975 13A 0.025729	 |	 @DF-RHF iter 18: -67.01020411750814 1.99875e+01 1.12449e+01; 14A 0.109066 15A 0.126537 16A 0.296366	 |	 @DF-RHF iter 19: -88.09037476426056 -2.10802e+01 1.29834e+00; 17A 0.348237 18A 1.842526 19A 1.911753	 |	 @DF-RHF iter 20: -87.74745909582182 3.42916e-01 1.57938e+00; 20A 2.235682 21A 2.639750 22A 4.068870	 |	 @DF-RHF iter 21: -49.76413449146133 3.79833e+01 2.29697e+01; 23A 4.230928 24A 4.338550 25A 32.834338	 |	 @DF-RHF iter 22: -77.94619510085352 -2.81821e+01 6.69706e+00; Final Occupation by Irrep:						 |	 @DF-RHF iter 23: -80.45392024701042 -2.50773e+00 4.59655e+00; A								 |	 @DF-RHF iter 24: -76.07267063391218 4.38125e+00 9.18998e+00; DOCC [ 4 ]							 |	 @DF-RHF iter 25: -61.85382425940151 1.42188e+01 1.05928e+01; NA [ 4 ]							 |	 @DF-RHF iter 26: -86.77218963929283 -2.49184e+01 2.75808e+00; NB [ 4 ]							 |	 @DF-RHF iter 27: -77.43543931232399 9.33675e+00 3.96819e+00; @DF-RHF Final Energy: -35.61046747457991				 |	 @DF-RHF iter 28: -83.24663680738689 -5.81120e+00 3.02602e+00; => Energetics <=							 |	 @DF-RHF iter 29: -84.59007629023938 -1.34344e+00 2.49302e+00; Nuclear Repulsion Energy = 0.0000000000000000		 |	 @DF-RHF iter 30: -86.14724570488455 -1.55717e+00 1.56145e+00; One-Electron Energy = -54.3510785737621944		 |	 @DF-RHF iter 31: -78.57013959925717 7.57711e+00 2.04327e+00; Two-Electron Energy = 18.7406110991822779		 |	 @DF-RHF iter 32: -85.83622153869187 -7.26608e+00 3.17187e+00; Total Energy = -35.6104674745799201		 |	 @DF-RHF iter 33: -87.27348788185634 -1.43727e+00 1.46175e+00; Computation Completed							 |	 @DF-RHF iter 34: -76.35072049818045 1.09228e+01 3.97637e+00; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0	 |	 @DF-RHF iter 35: -70.56903511141743 5.78169e+00 1.24567e+01; Properties computed using the SCF density matrix			 |	 @DF-RHF iter 36: -75.56024107699382 -4.99121e+00 7.54313e+00; Multipole Moments:							 |	 @DF-RH",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3072:9879,Energy,Energy,9879,https://psicode.org,https://github.com/psi4/psi4/issues/3072,1,['Energy'],['Energy']
Energy Efficiency,"tern.addCharge(0.417,0.544757019107,0.0,-3.799961446760); Chrgfield.extern.addCharge(0.417,0.544757019107,0.0,-0.912085762652); psi4.set_global_option_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. 2) A helium atom with a point charge (q=-1) 1 Angstrom away. ```; memory 1 gb; set reference rks; set basis 6-31G*; set guess sad; set scf_type df. molecule QMregion {; 0 1; He 0.0 0.0 0.0; symmetry c1; no_reorient; no_com; }. gradient(""PBE0""). Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1,0.0,0.0,1.8897261245650618); psi4.set_global_option_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. For test 1, the gradient from the water and the water+charges are different, but they do not agree with the forces returned by an equivalent calculation with Gaussian. The isolated water molecule has gradients that agree with the Gaussian forces, but once the charges are added the Gaussian and PSI4 calculations return different results. For test 2, the PSI4 gradient is zero for the for the helium with and without the point charge. The charge has no effect on the results. When I repeated the calculation with Gaussian, there was a finite force on the helium atom when a charge was included. Here are the gradient results I pulled from the output files:. ```; Water+Charges (TIP3P charges: O->-0.834, H->0.417). PSI4 gradient without charges:; 1 -0.000345685156 -0.000000503248 -0.001768512746; 2 0.000171019827 0.000099064969 0.000874930893; 3 0.000170945942 -0.000098562011 0.000874553581. Gaussian forces without charges:; 1 8 0.000342119 0.000000502 0.001755656; 2 1 -0.000171096 -0.000103970 -0.000878017; 3 1 -0.000171022 0.000103468 -0.000877640. PSI4 gradient with charges:; 1 0.001872262723 -0.000000506498 -0.002344911788; 2 -0.000937982580 -0.003306842432 0.001163140925; 3 -0.000938055973 0.003307348640 0.001162761678. Gaussian forces with charges:; 1 8 0.002079660 0.000000498 -0.002984605; 2 1 0.000413259 0.000612887 -0.001458686; 3 1 0.000413331 -0.000613388 -0.0014",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/184:1724,charge,charge,1724,https://psicode.org,https://github.com/psi4/psi4/issues/184,1,['charge'],['charge']
Energy Efficiency,"test using ctest.; I have one test ""dft-custom-gga"" failed. And I wonder how I can do to pass. I upload the log file below:. ```; 373/405 Testing: dft-custom-gga; 373/405 Test: dft-custom-gga; Command: ""/usr/bin/python2.7"" ""/root/psi4/tests/runtest.py"" ""/root/psi4/tests/dft-custom-gga/input.dat"" ""/root/psi4/build/testresults.log"" ""false"" ""/root/psi4"" ""false"" ""/root/psi4/build/tests/dft-custom-gga/output.dat"" ""/root/psi4/build/stage/share/psi4/bin/psi4"" ""/root/psi4/build/stage/share/psi4/share/psi4"" ""/root/psi4/build/stage/share/psi4/lib/""; Directory: /root/psi4/build/tests/dft-custom-gga; ""dft-custom-gga"" start time: Jun 09 20:39 CDT; Output:; ----------------------------------------------------------; Ne: PBE...........................................................PASSED; Ne: BLYP..........................................................PASSED; Traceback (most recent call last):; File ""/root/psi4/build/stage/share/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 2009, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: Iterations did not converge.; Error occurred in file: /root/psi4/psi4/src/psi4/libpsi4util/process.cc on line: 112; The most recent 5 function calls were:; psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 23.66 sec; ----------------------------------------------------------; Test Failed.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038:1212,energy,energy,1212,https://psicode.org,https://github.com/psi4/psi4/issues/1038,2,['energy'],['energy']
Energy Efficiency,"the `HF::form_H()` routine every time, which results in inaccurate EMBPOT matrices being added to the core Hamiltonian. In order to correct this in the current version of Psi4, I have removed the AO to SO transformation and call `BasisSet::compute_phi()` on an appropriately sized vector. I have also added numerical gradients over the EMBPOT potential using the gau2grid library. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The user may supply an arbitrary potential evaluated on a numerical quadrature grid to an SCF calculation by saving the x, y, z, w, and v values to a human-readable `EMBPOT` file. The first line of the `EMBPOT` file must have the number of points inside of the file. The user must also include `set perturb_h true` and `set perturb_with embpot` in the Psi4 input. The potential will then be evaluated and included in the core Hamiltonian construction, and energy and gradient calculations. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fixed the EMBPOT functionality in `HF::form_H()` by removing AO to SO transformation and supplying an appropriately sized vector to the `BasisSet::compute_phi()` call.; - [x] Added function `MintsHelper::embpot_grad()` to calculate the component of the gradient from the EMBPOT perturbation. ## Checklist; - [x] Added test `embpot1` to compare energies and gradients computed by including embedded point charges analytically, through the `external_potentials` keyword, and numerically, through the EMBPOT functionality.; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3239:2583,charge,charges,2583,https://psicode.org,https://github.com/psi4/psi4/pull/3239,1,['charge'],['charges']
Energy Efficiency,"the above. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Notes; - Iterative Diagonalization methods have been generalized to work with an `engine` which is an object that must provide a particular API (documented). The `engine` provides the relevant Matrix x trial vector functions and a series of methods that allow the engine to perform standard operations on the trial vectors without needing to know what data structure is used for a trial vector. ; - Two engines have been implemented that provide the products required for TDHF/TDDFT. A flag passed to the engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:1460,adapt,adapted,1460,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['adapt'],['adapted']
Energy Efficiency,"the snsmp2 plugin (https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/wavefunctioncache.py) is a big user of the npz format for file 180 before wavefunction serialization to a npy file. (Probably the only external user.) Moreover, they both use them and write out new ones for consumption. They also modify and store `Ca_occ` in their exchange files. (Looks like npz did this: https://github.com/psi4/psi4/commit/e5b12a40c8c2d65a5e59f758df871407afdc544c#diff-dbf22cd80d16f6d8ef8250145a6d91bf) For those from a psi4 run, the Ca_occ can just be extracted by API from the deserialized wfn. But is there any facility for storing extra items in the npy?. There's some lengthy workarounds for issues since resolved (custom cast-up) but the guess of dimer from stack of monomer isn't in psi4 and the plugin isn't being actively developed (to my knowledge), so I suggest a minimal patch-up rather than thorough update. The way to run this is to build an up-to-date psi, edit it to apply #1508, then clone the snsmp2 repo (above), navigate to `<sns-mp2-repo>/tests/` and run an input with `PYTHONPATH=../ <path-to-psi4-objdir>/stage/bin/psi4 simple.in`. If this doesn't get taken up, we'll tackle it next Wednesday the @CDSherrill group programming. In the meantime, snsmp2 is getting dropped from `psi4-rt`. FYI @rmcgibbo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1514:287,consumption,consumption,287,https://psicode.org,https://github.com/psi4/psi4/issues/1514,1,['consumption'],['consumption']
Energy Efficiency,"ting the build system, removing Boost from Psi4, the ""inversion"", and a history rewrite. Read below for summaries of each step and where to find more detailed information. If you have any questions please ask them here or email us directly.; ## Steps. **Build system:**; The build system has moved to a ""super build"" strategy which reduces total compilation time and makes it much easier to add additional external libraries in the future. Developers will also see a reduction in the amount of time it takes to compile internal Psi4 changes and Psi4 can now link all external dependancies (libint for examples). Note that much of the github wiki on building psi4 is now plain wrong. Consult the top-level CMakeLists.txt to get building again. See [here](https://github.com/psi4/psi4/pull/442) for more information. . **Boost:**; Much of the Boost functionality that we have depended on in Psi4 has been implemented in C++11. In order to keep Psi4 up to date with best C++11 practices, reduce complexity, and generally remove several headaches, Boost has been removed from Psi4. The C++ Python bindings have been moved to PyBind11. See [here](https://github.com/psi4/psi4/issues/450) for more information. **Inversion:**; Currently the hybrid Python/C++ architecture of Psi4 is in an odd spot where Psi4 itself is a C++ program that calls an input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location. This will allow all current Psi4 input files to be run normally. **History rewrite:**; Over time the Psi4 git reposit",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:1104,reduce,reduce,1104,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['reduce'],['reduce']
Energy Efficiency,"tions with the aug-cc-PV5Z bases set for the interaction between helium gas and ammonia. However, getting the error describe below. Memory set to 26.077 GiB by Python driver.; Threads set to 12 by Python driver. QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 5 for key JKFIT among:; Shell Entries: ['HE']; Basis Sets: [('aug-cc-pv5z-jkfit', 'aug-cc-pv5z-jkfit', None)]; File Path: /home/sandro/Desktop/teste_He-aug-cc-pv5z, /home/sandro/Desktop/teste_He-aug-cc-pv5z, /home/sandro/miniconda3/envs/venv_psi4/share/psi4/basis; Input Blocks: . Traceback (most recent call last):; File ""run_GN_NH3_inter_var.py"", line 402, in <module>; eel = calcula_energia(metodo, base, dimero, fator_conv)[0]; File ""run_GN_NH3_inter_var.py"", line 73, in calcula_energia; psi4.energy(f'{metodo}/{base}'); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 4394, in run_sapt; dimer_wfn = scf_helper('RHF', molecule=sapt_dimer, **kwargs); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1576, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1231, in scf_wavefunction_factory; aux_basis = core.BasisSet.build(wfn.molecule(), ""DF_BASIS_SCF"",; File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/p4util/python_helpers.py"", line 85, in _pybuild_basis; bs, basisdict = qcdb.BasisSet.pyconstruct(mol.to_dict(),; File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 696, in pyconstruct; bs,",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2989:971,energy,energy,971,https://psicode.org,https://github.com/psi4/psi4/issues/2989,2,['energy'],['energy']
Energy Efficiency,"to a missing ECP projector:. ```; !----------------------------------------------------------------------; ! Basis Set Exchange; ! Version v0.9.1+53.gf8c059b.dirty; ! https://www.basissetexchange.org; !----------------------------------------------------------------------; ! Basis set: vDZP; ! Description: Small basis set used in wB97X-3c method; ! Role: orbital; ! Version: 1 (); ! From SuppMat of https://doi.org/10.1063/5.0133026; ! then converted with https://github.com/MolSSI-BSE/basis_set_exchange-historical/commit/f84314b31bc0e30e5a29c274684d6e9ff612466a#diff-7686a8c951e2392d87a59f8d89e5c75f18d2d35c60683ed5b52910076840569c; ! then removed Fluorine b/c the ECP lacks a projector; ! then added with basis_set_exchange.curate.add_basis(name=""vDZP"") to a local repo; ! then converted with `bse get-basis vDZP psi4`; !----------------------------------------------------------------------; ```. Marcel Muller (@marcelmbn), the original author of the wB97X-3c paper, wrote in [an analogous PySCF issue](https://github.com/pyscf/pyscf/pull/2085#issuecomment-1951321264) (pyscf/pyscf#2085) that this issue can be resolved:. > There are two ways to solve this problem (at least as far as I can see):; > Add a ""dummy"" d-type projector with coefficient 0.0, so that the ascending order of projectors up to f can be retained.; > Just remove the f projector as it has a 0.0 coefficient. IMHO, this would be the correct option, as a projector with a coefficient of 0.0 is only a technical remnant from the development process.; > I quickly tested both approaches with both TURBOMOLEv7.7.1 and ORCAv5.0.4 and in all cases, the same single-point energy and properties resulted for a simple F_2 molecule. Would it be possible to update the wB97X-3c basis set included in Psi4 to allow F-containing molecules to run? I'm happy to make the PR myself if that would be useful. For reference, here's my HF structure:; ```; 2; title; F 0.48776591 0.00000000 0.00000000; H -0.48776591 0.00000000 0.00000000; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3205:2351,energy,energy,2351,https://psicode.org,https://github.com/psi4/psi4/issues/3205,1,['energy'],['energy']
Energy Efficiency,"tr(ncores) # export VECLIB_MAXIMUM_THREADS=4; os.environ[""NUMEXPR_NUM_THREADS""] = str(ncores) # export NUMEXPR_NUM_THREADS=4; # Set the max memory for PySCF; os.environ[""PYSCF_MAX_MEMORY""] = str(120000). import psi4; psi4.set_memory(int(120000*1e6)); numpy_memory = 40; import pyscf; from pyscf import dft; # pyscf.lib.misc.num_threads(n=8). xyzFilename = 'Ethane.xyz'. #psi4_geo = psi4.geometry(geo_txt); with open(xyzFilename,""r"") as f:; xyz_string = f.read(). psi4_geo = psi4.core.Molecule.from_string(xyz_string, dtype='xyz',fix_symmetry='c1', fix_orientation=True,fix_com=True). # run psi4 calculation ; psi4.core.set_num_threads(ncores); psi4.set_options(; {; ""scf__reference"": ""rks"",; ""scf_type"": ""df"",; ""scf__maxiter"": 50,; ""basis"": 'def2-svp',; ""df_basis_scf"": 'def2-universal-jfit',; ""puream"":False,; ""guess"": ""sad"",; ""SCF_INITIAL_ACCELERATOR"":""none"",; ""dft_spherical_points"":434, ; ""dft_radial_points"" :88, ; ""diis_max_vecs"" : 6; }; ); energy = psi4.energy(name=""scf"", dft_functional=""svwn"", molecule=psi4_geo, return_wfn=False). # run PySCF calculation; mol = pyscf.M(; atom=xyzFilename, ; basis=""def2-svp"",; symmetry=False,; verbose=4,; cart=True,; ); # mol.max_memory = 10_000; mf = dft.rks.RKS(mol, xc=""svwn"").density_fit(auxbasis='def2-universal-jfit'); mf.init_guess = 'vsap'; mf.grids.level = 7; mf.conv_tol = 1e-7; mf.kernel(); print('Nuc-Nuc PySCF= ', mol.energy_nuc()); print('One electron integrals energy',mf.scf_summary['e1']); print('Coulomb energy ',mf.scf_summary['coul']); print('EXC ',mf.scf_summary['exc']); ```; The XYZ file for ethane is here; ```; 8; Ethane; C -0.759130 0.027045 -0.000000; C 0.759130 -0.027045 -0.000000; H -1.125990 0.306235 1.010150; H -1.171340 -0.966695 -0.274750; H -1.109050 0.781825 -0.735390; H 1.109040 -0.781815 0.735390; H 1.171340 0.966695 0.274760; H 1.125990 -0.306235 -1.010150; ```; The following is my output:; Psi4; ```; Memory set to 111.759 GiB by Python driver.; Threads set to 8 by Python driver. Scratch directory: /tmp/. *** t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:1502,energy,energy,1502,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['energy'],['energy']
Energy Efficiency,"tr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; _________________________________________________________________ test_psi4_cas __________________________________________________________________. def test_psi4_cas():; """"""casscf-sp""""""; #! CASSCF/6-31G** energy point; ; geom = psi4.geometry(""""""; O; H 1 1.00; H 1 1.00 2 103.1; """"""); ; psi4.set_options({; ""basis"" : '6-31G**',; ""reference"" : 'rhf',; ""scf_type"" : 'pk',; ""mcscf_algorithm"" : 'ah',; ""qc_module"" : 'detci',; ""nat_orbs"" : True}); ; > cisd_energy, cisd_wfn = psi4.energy(""CISD"", return_wfn=True). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:38: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:947: in select_cisd; return func(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2953: in run_detci; ref_wfn = scf_helper(name, **kwargs) # C1 certified; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fef0343b8>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SC",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:25451,energy,energy,25451,https://psicode.org,https://github.com/psi4/psi4/issues/820,2,['energy'],['energy']
Energy Efficiency,"trib to E beyond E_e 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational contrib to E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational contrib to E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational contrib to E 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301373 [Eh]; Correction E 16.219 [kcal/mol] 67.859 [kJ/mol] 0.02584628 [Eh]; Total E, Thermal (internal) energy at 298.15 [K] -76.00118645 [Eh]. Enthalpy, H_trans = E_trans + k_B * T = E_trans + P * V; Electronic contrib to H beyond E_e 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational contrib to H 1.481 [kcal/mol] 6.197 [kJ/mol] 0.00236046 [Eh]; Rotational contrib to H 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational contrib to H 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301373 [Eh]; Correction H 16.811 [kcal/mol] 70.338 [kJ/mol] 0.02679047 [Eh]; Total H, Enthalpy at 298.15 [K] -76.00024226 [Eh]; *** Absolute enthalpy, not an enthalpy of formation ***. Gibbs free energy, G = H - T * S; Electronic contrib to G beyond E_e 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational contrib to G -8.837 [kcal/mol] -36.975 [kJ/mol] -0.01408304 [Eh]; Rotational contrib to G -2.205 [kcal/mol] -9.226 [kJ/mol] -0.00351383 [Eh]; Vibrational contrib to G 14.440 [kcal/mol] 60.418 [kJ/mol] 0.02301201 [Eh]; Correction G 3.398 [kcal/mol] 14.217 [kJ/mol] 0.00541514 [Eh]; Total G, Gibbs energy at 298.15 [K] -76.02161759 [Eh]; *** Absolute Gibbs energy, not a free energy of formation ***; ```. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Vibrational analysis printing is overhauled for clarity. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] These changes should fend off",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2969:1702,energy,energy,1702,https://psicode.org,https://github.com/psi4/psi4/pull/2969,1,['energy'],['energy']
Energy Efficiency,"troduction.html#citing-psifour. -----------------------------------------------------------------------. Psi4 started on: Monday, 16 September 2024 10:17PM. Process ID: 23320; Host: agincourt.lan; PSIDATADIR: /Users/cwagen/.../.pixi/envs/dev/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; C -2.556271805455 -0.181690364655 -0.026620796492 ; C -1.282011805455 -0.085620364655 -0.016410796492 ; C -0.000441805455 0.006819635345 -0.003870796492 ; C 1.281348194545 0.095909635345 0.010599203508 ; C 2.556298194545 0.180969635345 0.026599203508 ; C 3.872538194545 0.268679635345 0.044049203508 ; H 4.487898194545 -0.251640364655 -0.694370796492 ; H 4.393828194545 0.864729635345 0.797449203508; C -3.871661805455 -0.281870364655 -0.036170796492 ; H -4.492551805455 0.418709635345 -0.600540796492 ; H -4.386761805455 -1.069870364655 0.519199203508 ; }. energy(""wb97x-3c""); --------------------------------------------------------------------------. Scratch directory: /tmp/; => Libint2 <=. Primary basis highest AM E, G, H: 6, 6, 3; Auxiliary basis highest AM E, G, H: 7, 7, 4; Onebody basis highest AM E, G, H: -, -, -; Solid Harmonics ordering: Gaussian. *** tstart() called on agincourt.lan; *** at Mon Sep 16 22:17:28 2024. => Loading Basis Set <=. Name: VDZP; Role: ORBITAL; Keyword: BASIS; atoms 1-6, 9 entry C line 117 (ECP: line 2345) file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/vdzp.gbs ; atoms 7-8, 10-11 entry H line 22 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/vdzp.gbs . !!! WARNING: ECP capability is in beta. Please check occupations closely. !!!. => WB97X3C: Empirical Dispersion <=. Grimme's -D4 (BJ-damping) Dispersion Correction with ATM; Caldeweyher, E.; Ehlert, S.; Hansen, A.; Neugebauer, H.; Spicher, S.; Bannwarth, C.; Grimmme, S., J. Chem. Phys. 150, 154122 (2019). a1 = 0.246400; a2 = 4.737000; alp = 16.000000; s6 = 1.000000; s8 = 0.000000; s9 = 1.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:5108,energy,energy,5108,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['energy'],['energy']
Energy Efficiency,"tted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 1; Integrals threads: 1; Memory [MiB]: 243; Algorithm: Disk; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (DEF2-TZVPPD AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 192; Number of basis functions: 582; Number of Cartesian functions: 686; Spherical Harmonics?: true; Max angular momentum: 4. Cached 2.7% of DFT collocation blocks in 0.139 [GiB]. Minimum eigenvalue in the overlap matrix is 7.9030311415E-06.; Reciprocal condition number of the overlap matrix is 5.7126628552E-07.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 350 350 ; -------------------------; Total 350 350; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -266.76788027937141 -2.66768e+02 0.00000e+00 ; @DF-RKS iter 1: -267.44459096234198 -6.76711e-01 2.70804e-03 DIIS/ADIIS; @DF-RKS iter 2: -266.62712078236223 8.17470e-01 4.29888e-03 DIIS/ADIIS; @DF-RKS iter 3: 222.21931934020711 4.88846e+02 3.68763e-02 DIIS/ADIIS; @DF-RKS iter 4: -220.14524491052583 -4.42365e+02 1.39645e-02 DIIS/ADIIS; @DF-RKS iter 5: 105.97080762091727 3.26116e+02 3.43637e-02 DIIS/ADIIS; @DF-RKS iter 6: -197.93937468185686 -3.03910e+02 1.64483e-02 DIIS/ADIIS; @DF-RKS iter 7: 56.14560413977465 2.54085e+02 3.25972e-02 DIIS/ADIIS; @DF-RKS iter 8: -171.65878493154480 -2.27804e+02 1.92639e-02 DIIS/ADIIS; @DF-RKS iter 9: 53.90807327580846 2.25567e+02 3.33501e-02 DIIS/ADIIS; @DF-RKS iter 10: -172.20635649564989 -2.26114e+02 1.94991e-02 DIIS/ADIIS. Traceback (most recent call last):; File "".../bin/psi4"", line 349, in <module>; exec(content); File ""<string>"", line 42, in <module>; File "".../lib/psi4/driver/driver.py"", line 526, in energy; wfn ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051:7853,Energy,Energy,7853,https://psicode.org,https://github.com/psi4/psi4/issues/3051,1,['Energy'],['Energy']
Energy Efficiency,"ttings.ddx_model,; ""DDX_SOLVENT"":""water""}) #without this calculation fails with psi4.driver.p4util.exceptions.ValidationError: Required option 'DDX_SOLVENT' is missing.; else:; print('ddx solvent option'); psi4.set_options({""ddx"": ""true"",; ""DDX_SOLVENT"": settings.ddx_settings.solvent,; ""DDX_RADII_SET"": settings.ddx_settings.radii_set,; ""DDX_MODEL"": settings.ddx_settings.ddx_model}); ```; However, when I run a testcase when inspecting the output file, the solvent_epsilon is printed out as 78.3553 not the test value 4 which I used in my test run. . It appears the issue lies in the if else statement in psi4/driver/procrouting/solvent/ddx.py, where the if statement core.has_option_changed(""DDX"", ""DDX_SOLVENT_EPSILON"") is not assigned as true (I added print statements to validate this):; ```; solvent = core.get_option(""DDX"", ""DDX_SOLVENT"").lower(); print(f'solvent option chosen is {solvent}') ; if core.has_option_changed(""DDX"", ""DDX_SOLVENT_EPSILON""): #this given as false; solvent_epsilon = core.get_option(""DDX"", ""DDX_SOLVENT_EPSILON""); print(f'epsilon option {solvent_epsilon}'); elif solvent == """":; raise ValidationError(""Required option 'DDX_SOLVENT' is missing.""); elif solvent not in pyddx.data.solvent_epsilon:; raise ValidationError(""Unknown solvent {solvent}.""); else:; solvent_epsilon = pyddx.data.solvent_epsilon[solvent]; ```; I have built a minimal worked example of the problem below where the issue is again replicated where the solvent_epsilon is set to that of water, and the DDX_SOLVENT_EPSILON option is ignored: ; ```; import psi4. h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""). psi4.set_options({""ddx"": ""true"", #supply a solvent here to see if epsilon then gets picked up; ""DDX_SOLVENT_EPSILON"":'5',; ""DDX_RADII_SET"": 'uff',; ""DDX_MODEL"": 'PCM',; ""DDX_SOLVENT"":""water""}) #without this calculation fails with psi4.driver.p4util.exceptions.ValidationError: Required option 'DDX_SOLVENT' is missing. psi4.set_memory('500mb'). psi4.energy('scf/sto-3g'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3119:3046,energy,energy,3046,https://psicode.org,https://github.com/psi4/psi4/issues/3119,1,['energy'],['energy']
Energy Efficiency,"ty. The new output for tu4 is below. ; ``` ; ==> Thermochemistry Energy Analysis <==. Raw electronic energy, E_e; Total E_e, Electronic energy at well bottom -76.02703273 [Eh]. Zero-point vibrational energy, ZPVE = Sum_i omega_i / 2, E_0 = E_e + ZPVE; Vibrational ZPVE 14.440 [kcal/mol] 60.419 [kJ/mol] 0.02301219 [Eh] 5050.592 [cm^-1]; Correction ZPVE to E_e 14.440 [kcal/mol] 60.419 [kJ/mol] 0.02301219 [Eh] 5050.592 [cm^-1]; Total E_0, Enthalpy at 0 [K] -76.00402054 [Eh]; *** Absolute enthalpy, not an enthalpy of formation ***. Thermal (internal) energy, E (includes ZPVE and finite-temperature corrections); Electronic contrib to E beyond E_e 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational contrib to E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational contrib to E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational contrib to E 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301373 [Eh]; Correction E 16.219 [kcal/mol] 67.859 [kJ/mol] 0.02584628 [Eh]; Total E, Thermal (internal) energy at 298.15 [K] -76.00118645 [Eh]. Enthalpy, H_trans = E_trans + k_B * T = E_trans + P * V; Electronic contrib to H beyond E_e 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational contrib to H 1.481 [kcal/mol] 6.197 [kJ/mol] 0.00236046 [Eh]; Rotational contrib to H 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational contrib to H 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301373 [Eh]; Correction H 16.811 [kcal/mol] 70.338 [kJ/mol] 0.02679047 [Eh]; Total H, Enthalpy at 298.15 [K] -76.00024226 [Eh]; *** Absolute enthalpy, not an enthalpy of formation ***. Gibbs free energy, G = H - T * S; Electronic contrib to G beyond E_e 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational contrib to G -8.837 [kcal/mol] -36.975 [kJ/mol] -0.01408304 [Eh]; Rotational contrib to G -2.205 [kcal/mol] -9.226 [kJ/mol] -0.00351383 [Eh]; Vibrational contrib to G 14.440 [kcal/mol] 60.418 [kJ/mol] 0.02301201 [Eh]; Correction G 3.398 [kcal/mol] 14.217 [kJ/mol] 0.00541514 [",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2969:1113,energy,energy,1113,https://psicode.org,https://github.com/psi4/psi4/pull/2969,1,['energy'],['energy']
Energy Efficiency,"u.); -----------------------. Doubly Occupied: . 1A1 -20.621389 1B2 -20.621057 2A1 -1.500485 ; 2B2 -1.213674 3A1 -0.787485 1B1 -0.638605 ; 4A1 -0.611527 3B2 -0.571415 1A2 -0.448360 . Virtual: . 5A1 0.196427 4B2 0.233677 5B2 0.363534 ; 6B2 0.797460 2B1 0.838809 6A1 0.844012 ; 7A1 0.899194 2A2 0.923759 8A1 1.027087 ; 7B2 1.058856 9A1 1.124050 8B2 1.149224 ; 9B2 1.493845 3B1 1.719758 10A1 1.729020 ; 3A2 1.885626 4B1 1.905688 10B2 2.114549 ; 11A1 2.362681 12A1 2.530729 11B2 2.768793 ; 13A1 2.777858 5B1 2.778067 4A2 2.804070 ; 5A2 2.974845 12B2 3.002608 13B2 3.319351 ; 14A1 3.594108 14B2 3.777164 15A1 4.062330 ; 15B2 4.514378 16A1 45.233612 16B2 45.429678 . Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 4, 1, 1, 3 ]. Energy converged. @DF-RHF Final Energy: -150.80654620986098. => Energetics <=. Nuclear Repulsion Energy = 37.8876016263036917; One-Electron Energy = -283.3602994176750940; Two-Electron Energy = 94.6661515815104053; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -150.8065462098609828. Saving occupied orbitals to File 180. *** tstop() called on mrabsence-Ubuntu at Mon Aug 22 01:48:07 2016; Module time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.5931. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.2113. Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.3818 Total: 1.3818. Dipole Moment: (Debye); X: 0.0000 Y: -0.0000 Z: -3.5122 Total: 3.5122. *** tstart() called on mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/463:6699,Energy,Energy,6699,https://psicode.org,https://github.com/psi4/psi4/issues/463,1,['Energy'],['Energy']
Energy Efficiency,"u_verytight; set scf_type pk; set mp2_type conv; set guess sad; set freeze_core false. # the gradient that any fully optimized molecule should match, more or less. zerograd = psi4.Matrix(5,3); refgrad = [; [ 0.0, 0.0, 0.0],; [ 0.0, 0.0, 0.0],; [ 0.0, 0.0, 0.0],; [ 0.0, 0.0, 0.0],; [ 0.0, 0.0, 0.0]]; zerograd.set(refgrad). # this is the first system, a fluoromethane that looks pretty good to the eye; # zmat version, normz. molecule normz {; C; H 1 1.2; H 1 1.2 2 104; H 1 1.2 2 105 3 120; F 1 1.3 2 106 4 121; }. # reference start NRE, E, G. norm_nre_start = 37.6824945882 # Q-Chem; norm_e_start = -139.5307182946 # Q-Chem; norm_g_start = psi4.Matrix(5, 3) # Q-Chem; contents = [ # have to swap x & y, and -x; [ -0.07990533, -0.00642920, -0.00348020, 0.04874047, 0.04107426],; [ -0.04900557, -0.00240633, 0.05677652, -0.03006882, 0.02470420],; [ -0.06715450, 0.05113530, -0.00508959, -0.00643364, 0.02754243]]; norm_g_start.set(zip(*contents)); norm_rmsg_start = 0.041309 # Q-Chem; # Full Analytical Gradient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 -0.04900557 -0.00240633 0.05677652 -0.03006882 0.02470420; # 2 0.07990533 0.00642920 0.00348020 -0.04874047 -0.04107426; # 3 -0.06715450 0.05113530 -0.00508959 -0.00643364 0.02754243. # reference optimized NRE, E (G should be 0). nre_opt = 37.5276022922 # Q-Chem; e_opt = -139.5573922 # Q-Chem; #norm_g_opt # Q-Chem; # Full Analytical Gradient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 0.00000025 -0.00000001 -0.00000021 -0.00000007 0.00000005; # 2 0.00000010 0.00000008 0.00000000 0.00000001 -0.00000020; # 3 0.00000038 -0.00000005 -0.00000006 -0.00000023 -0.00000003. def test_norm_start(mol):; g0 = gradient('mp2', molecule=mol); compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(norm_g_start, g0, 3, 'start grad'). def test_zero_grad(mol):; e, wfn = optimi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:1333,Energy,Energy,1333,https://psicode.org,https://github.com/psi4/psi4/issues/310,1,['Energy'],['Energy']
Energy Efficiency,"ue with `method_algorithm_type(mtd).keyword` and `method_algorithm_type(mtd).now`, respectively. This helps clean up proc.py and allows the controlling keyword to be linked for each method in the generated tables.; - [x] in proc.py, ; - [x] select_* functions have been made more boilerplate and elsewhere-mentioned DETCI and MRCC changes integrated in.; - [x] CCD is given select_ccd* functions to raise a sensible error message since the default (cc_type=CONV) isn't implemented. ; - [x] CC2 and CC3 are given select_* functions since now CCENERGY and MRCC cover them. This led to controversy (unresolved) over whether DF-CC2 is RTG, see #2710. A result is that you need to `set qc_module ccenergy` explicitly to use DF for CC2 -- a test case edit was needed.; - [x] `run_dfocc`, `run_dfocc_gradient` fns were simplified by using the `method_algorithm_type` fn; - [x] `run_fnodfcc`, `run_fnocc`, `run_cepa` were simplified by using the `method_algorithm_type` fn and the ""director"" dictionary syntax; - [x] some impossibilities fended off rather than being silently ignored: non-df-mp2 in dhdft, non-conv detci; - [x] The involved which-do-I-run--energy-gradient-or-hessian logic in `negotiate_derivative_type` and friends in driver_util.py does a great job at its task, but its error messages have been wanting, being hampered by being generated by exceptions. In particular, they give no clue how close you are to a working method -- do you need to tweak aefc or uhf/rohf or is this method nowhere in psi or have you misspelled it? Now, the ManagedMethodsError exception has been reworked to return current conditions data (to be caught and reformatted) and the error message itself (usually not seen directly) has been reworked to provide more conditions and a link to the table row in the docs where one can see what _would_ run. Back at driver_util.py, these errors are reformatted according to whether managed or plain method, whether deriv isn't available at all or just not demanded deriv, e",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:8894,energy,energy-gradient-or-hessian,8894,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['energy'],['energy-gradient-or-hessian']
Energy Efficiency,"uggested by @psi-rking , which suggests maybe an issue with finding roots of whatever symmetry the first excited state is; however, adding more roots (or running with/without symmetry) doesn't resolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems to converge in just one step for c1 and c2v. I suppose it's possible the guess space just isn't grabbing roots for all symmetries, but increasing the number of roots to 30 doesn't change the results. perhaps more disturbing, though, is that the in-core diagonization routine `RSP` gives yet another set of results:; ```; Psi4 LiCN/6-31G* (symmetry c1, RSP solver); CI ROOT 1 TOTAL ENERGY:-99.58887523722994; CI ROOT 2 TOTAL ENERGY:-99.56069933848028; CI ROOT 3 TOTAL ENERGY:-99.56069933848008; CI ROOT 4 TOTAL ENERGY:-99.53483755106353; CI ROOT 5 TOTAL ENERGY:-99.53483755106343; CI ROOT 6 TOTAL ENERGY:-99.53418772103414; ```; here, we find 3 roots lower in energy than either GAMESS or the default Psi4 routines, and we also recover the -99.534837 E_h root, but this time as a doubly-degenerate state. the other routines mentioned in [the manual; ](https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html#term-DIAG_METHOD-DETCI) are deprecated kwargs (see also: #2640 ), so I can't test them. . given [`np.linalg.eigh`](https://numpy.org/doc/stable/reference/generated/numpy.linalg.eigh.html) just uses LAPACK's syevd/heevd, and `RSP` is just supposed to be LAPACK's dsyev, this result is very perturbing. . I've attached output files for the [Davidson](https://github.com/psi4/ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:2383,ENERGY,ENERGY,2383,https://psicode.org,https://github.com/psi4/psi4/issues/3083,1,['ENERGY'],['ENERGY']
Energy Efficiency,"ught up regarding the PKJK algorithm. To address this issue, the buffer size per thread is always set to have at least a value of 1. When a minimum buffer size is enforced, the issue presented in https://github.com/psi4/psi4/issues/2760 disappears. Additionally, with these changes, the PK option produces the same answer as the DIRECT algorithm for the system in question (the H atom):. ```; (p4dev) dpoole34@ds6:~$ cat minimal_example.py ; import psi4; import argparse. parser = argparse.ArgumentParser(); parser.add_argument('--num_threads', type=int, default=1); parser.add_argument('--scf_type', type=str, default='DF'); parser.add_argument('--element', type=int, default=1); parser.add_argument('--multiplicity', type=int, default=2); args = parser.parse_args(). psi4.core.be_quiet() # Silence output for clarity.; psi4.set_num_threads(args.num_threads, quiet=True); psi4.set_options({; 'REFERENCE': 'UHF',; 'SCF_TYPE': args.scf_type,; }). for i in range(10):; energy = psi4.energy(; 'pbe0/sto-3g',; molecule=psi4.core.Molecule.from_arrays(; geom=[0, 0, 0],; elez=[args.element],; molecular_charge=0,; molecular_multiplicity=args.multiplicity)); print(energy); (p4dev) dpoole34@ds6:~$ python3 minimal_example.py --num_threads 6 --scf_type PK --element 1 --multiplicity 2; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; (p4dev) dpoole34@ds6:~$ python3 minimal_example.py --num_threads 6 --scf_type DIRECT --element 1 --multiplicity 2; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; ```; ## User API & Changelog headlines. ## Dev notes & details; - [x] Fix bug present within PK calculations executed on small systems with small basis sets, wherein random energies would result from the calc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2763:1905,energy,energy,1905,https://psicode.org,https://github.com/psi4/psi4/pull/2763,1,['energy'],['energy']
Energy Efficiency,"un_mod Python/pythonrun.c:1025; #42 0x7fa9b52db3b1 in PyRun_FileExFlags Python/pythonrun.c:978; #43 0x7fa9b52db516 in PyRun_SimpleFileExFlags Python/pythonrun.c:419; #44 0x7fa9b52f7b0c in run_file Modules/main.c:340; #45 0x7fa9b52f7b0c in Py_Main Modules/main.c:810; #46 0x400bbb in main Programs/python.c:69; #47 0x7fa9b422cfe9 in __libc_start_main (/lib64/libc.so.6+0x20fe9); #48 0x400c7c (/home/raimis/opt/conda/envs/psi4/bin/python3.6+0x400c7c). 0x60800007a380 is located 0 bytes to the right of 96-byte region [0x60800007a320,0x60800007a380); allocated by thread T0 here:; #0 0x7fa9b5721e10 in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_new_delete.cc:80; #1 0x7fa9944a3281 in __gnu_cxx::new_allocator<psi::cctriples::thread_data>::allocate(unsigned long, void const*) /usr/include/c++/7/ext/new_allocator.h:111; #2 0x7fa9944a2ba8 in std::allocator_traits<std::allocator<psi::cctriples::thread_data> >::allocate(std::allocator<psi::cctriples::thread_data>&, unsigned long) /usr/include/c++/7/bits/alloc_traits.h:436; #3 0x7fa9944a2892 in std::_Vector_base<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::_M_allocate(unsigned long) /usr/include/c++/7/bits/stl_vector.h:172; #4 0x7fa9944a2506 in std::_Vector_base<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::_M_create_storage(unsigned long) (/home/raimis/prj/psi4.git/linux_build/stage/lib/psi4/core.cpython-36m-x86_64-linux-gnu.so+0xcf0a506); #5 0x7fa9944a1e64 in std::_Vector_base<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::_Vector_base(unsigned long, std::allocator<psi::cctriples::thread_data> const&) /usr/include/c++/7/bits/stl_vector.h:138; #6 0x7fa9944a18a0 in std::vector<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::vector(unsigned long, std::allocator<psi::cctriples::thread_data> const&) /usr/include/c++/7/bits/stl_vector.h",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1438:6760,allocate,allocate,6760,https://psicode.org,https://github.com/psi4/psi4/pull/1438,1,['allocate'],['allocate']
Energy Efficiency,"urrently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132:1590,ENERGY,ENERGY,1590,https://psicode.org,https://github.com/psi4/psi4/pull/2132,4,['ENERGY'],['ENERGY']
Energy Efficiency,using libERD leads to 2e-int energy = 0,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/173:29,energy,energy,29,https://psicode.org,https://github.com/psi4/psi4/issues/173,1,['energy'],['energy']
Energy Efficiency,"ut more uses can follow.; - [x] add in-repo `conda/psi4-path-advisor.py` script to serve as build helper. this is the main point of the PR. will elaborate more in future.; - [x] there's a tidy new way of defining flags that are essential for the compiler _with_ the compiler in `CMAKE_<LANG>_COMPILER` instead of cluttering up the user choice var `CMAKE_<LANG>_FLAGS`. This is especially relevant for intel compilers that need gcc passed. There's something that's not set up right yet for Intel Clang. Thus, we need to pass `CMAKE_<LANG>_COMPILER_ARG1` through to psi4 subproject and all other externals.; - [x] let ctest tests run whether old or new d3 and gcp implementations present.; - [x] don't expect a pylibefpConfig.cmake for libefp detection. this is the case with the c-f package -- I'll probably put it back later when libefp/pylibefp repos combine.; - [x] I was using inconsistent naming for basis_set_exchange detection/import, so fix that.; - [x] adapt docs build so that it can use Ninja (or presumably any non-Makefiles) generator. The special thing about Makefiles is that it works as expected for glob depends. So we can tell the basis table to regenerate if any of the gbs files change. Other generators won't understand this. But most docs builds are one-off, not continuous development anyways, so it's worth no globs and yes flexibility. ADDED: switched to ninja for docs and docs-pr (ok memory-wise at max parallelism b/c debug build). ADDED 12 Nov; - [x] update ecosystem and docs GHA and linux azure to use the path-advisor env/cache procedure. this helps keep the path-advisore procedure tested and keeps testing envs up-to-date. alternate testing can still be imposed by `sed`ing the envs.; - [x] in azure linux, use the three testing lanes to go beyond quicktests. apart from some longer tests, we're now hitting all but stdsuite non-quick. ; - [x] fixed the windows nightly build through azure, which was many layers of bugs. the improved path handling in psi4 & psi4/__i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:3203,adapt,adapt,3203,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['adapt'],['adapt']
Energy Efficiency,"uts aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - [x] A Logging file has been introduced. All its contents should be considered experimental and subject to change.; - [x] Dipole derivatives through finite difference of dipoles added, so IR intensities available; - [x] The dummy wavefunctions returned from wrappers always had some questionable properties (e.g., single method for mixed method, largeset HF basis for cbs wavefunction) can be even less realistic (e.g., always def2-svp basis for cbs).; - [x] n-body qcvars renamed (grace period applies); ```; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE TOTAL ENERGY"": (""VALIRON-MAYER FUNCTION COUNTERPOISE TOTAL ENERGY"", 1.7), # note misspelling; ""VALIRON-MAYER FUNCTION COUTERPOISE INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY"", 1.7),; ``` ; - [x] added managed mode for scf gradient. it's not wholly effective at consolidating code, though, since only triggers for `gradient(""hf"")`, not `gradient(correlated)`. digits to compare has to be relaxed, but this has been seen with other qc programs, too.; - [x] Distributed driver should not be advertised for use with QCFractal at this time. It hasn't been tested in a while, and mem, cores, etc. setting may need tweaking in a non-continuous mode. U",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:6347,ENERGY,ENERGY,6347,https://psicode.org,https://github.com/psi4/psi4/pull/2575,2,['ENERGY'],['ENERGY']
Energy Efficiency,"v2rdm_casscf/v2rdm7: mismatched marks ctest (opt;v2rdm) and pytest (opt). `vi v2rdm_casscf/v2rdm7/CMakeLists.txt v2rdm_casscf/v2rdm7/test_input.py`; - [ ] 74. x2c-perturb-h: mismatched directory (x2c-perturb-h) and ctest registration name (x2c-perturb_h). `vi x2c-perturb-h/CMakeLists.txt`; ```; - [x] Filled in the rest of the test_input's as generated from script. There's ~3 hidden, but otherwise, the full test suite can be run from pytest. On 20 cores, I get `0 failed, 3660 passed, 96 skipped, 272 xfailed, 4 xpassed, 312 warnings in 2011.32s (0:33:31)`. For interest, the culprits over 2 minutes are:; ```; =========================================================================================================== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmark",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2549:3261,energy,energy-large,3261,https://psicode.org,https://github.com/psi4/psi4/pull/2549,1,['energy'],['energy-large']
Energy Efficiency,"values. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; Please note that unlike `sq_rsp(...)`, the new functions do not take a ""tolarence"" value, but this is actually a null change as that parameter has been set-but-unused in `sq_rsp(...)` since ~forever ago when `sq_rsp(...)` switched to calling DSYEV internally.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure and guard against non-square matrices.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure. Add a sanity checks for non-square matrices and illegal values of ""diagonalization order"".; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure. ## Questions; - [x] Is `libciomr` a good place for the new wrappers to live in? The one they are replacing is there, so it seemed like as good of a place as any. ## Checklist; - [x] No new features; - [x] 503/503 ctests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2686:2441,allocate,allocates,2441,https://psicode.org,https://github.com/psi4/psi4/pull/2686,1,['allocate'],['allocates']
Energy Efficiency,"vd(a, full_matrices=False, hermitian=hermitian); File ""<__array_function__ internals>"", line 6, in svd; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 1661, in svd; u, s, vh = gufunc(a, signature=signature, extobj=extobj); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 97, in _raise_linalgerror_svd_nonconvergence; raise LinAlgError(""SVD did not converge""). numpy.linalg.LinAlgError: SVD did not converge. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DO_DISP_EXCH_SINF"", ""true""); energy('sapt(dft)', molecule=hcn_dimer); compare_values(0.00271925, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); energy('sapt(dft)', molecule=hf_dimer); compare_values(0.00211996, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); --> energy('sapt(dft)', molecule=h2o_dimer); compare_values(0.00324766, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""). !--------------------------------!; ! !; ! SVD did not converge !; ! !; !--------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.69 sec; ----------------------------------------------------------; Test Failed.; ""sapt-exch-disp-inf"" end time: May 10 14:45 EDT; ""sapt-exch-disp-inf"" time elapsed: 00:00:29; ----------------------------------------------------------; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2178:4895,energy,energy,4895,https://psicode.org,https://github.com/psi4/psi4/issues/2178,9,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"ve affected this test case, and so I wonder if it is a problem with the test case. I recall that at one time we had removed testing of CUKS because we found it to be numerically unstable and Rob wasn't able to remove the numerical instability. But we decided to leave in CUKS as a feature because it worked most of the time and therefore could be helpful to users. This particular test case is a bit strange ... we are testing O2 for a singlet with CUKS? While one *can* run CUKS on a singlet, this seems like a really odd thing to do... What seems to be happening is that the guess orbitals are core Hamiltonian, and they are high-spin open-shell. This being the case, the CUHF runs and happily leaves the computation high-spin open-shell. Then obviously the triplet state obtained has a different energy than the singlet state energy that is being compared. I am not sure why we are getting a high-spin open-shell guess, since the computation knows it's a singlet. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE. ... Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ]. @CUHF iter 1: -129.99407460698782 -1.29994e+02 3.58550e-01; @CUHF iter 2: -138.94369344094056 -8.94962e+00 1.91667e-01 DIIS; @CUHF iter 3: -149.19229734982372 -1.02486e+01 5.23276e-02 DIIS; @CUHF iter 4: -149.61401801756168 -4.21721e-01 8.25602e-03 DIIS; @CUHF iter 5: -149.62784456434520 -1.38265e-02 7.20728e-04 DIIS; @CUHF iter 6: -149.62803800931584 -1.93445e-04 1.87787e-04 DIIS; @CUHF iter 7: -149.62804359068420 -5.58137e-06 2.42248e-05 DIIS; @CUHF iter 8: -149.62804290255499 6.88129e-07 3.86408e-06 DIIS; @CUHF iter 9: -149.62804316316681 -2.60612e-07 2.79748e-07 DIIS. ==> Post-Iterations <==. @Spin Contamination Metric: 1.00000; @S^2 Expected: 0.00000; @S^2 Observed: 1.00000. In the reference [correc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/738:1108,Charge,Charge,1108,https://psicode.org,https://github.com/psi4/psi4/issues/738,1,['Charge'],['Charge']
Energy Efficiency,"vergence threshold). In contrast, DFJCOSK is the template IncFock upon which the two previous PRs were based; however, DFJCOSK does not have the IncFock bells and whistles that DirectJK and DFJLinK had. Unmitigated, the incremental Fock procedure can actually significantly increase the number of SCF iterations needed to converged; and the IncFock bells and whistles in DirectJK and DFJLinK notably mitigate the effect of IncFock on SCF convergence counts. Without these bells and whistles, DFJCOSK runs the significant risk of excessive SCF iterations needed to converge when IncFock is enabled, an issue I have run into in my own calculations. This PR seeks to rectify the aforementioned issue by implementing the IncFock bells and whistles of DirectJK and DFJLinK into DFJCOSK. With these extra features, DFJCOSK can now recompute the full Fock matrix every n iterations, or disable IncFock past a given convergence threshold, at the will of the end user. These features can notably reduce the amount of SCF iterations needed to converge. This PR is also the continued effort to standardize IncFock among all integral-direct SCF algorithms in Psi4. With this PR, DirectJK, DFJLinK, and DFJCOSK will have effectively the exact same incremental Fock schemes, each featuring the lower memory usage of DFJCOSK's former IncFock scheme, and the bells and whistles of DirectJK and DFJLinK's former IncFock schemes. The final step to the IncFock standardization process, then, is the movement of the IncFock scheme of these algorithms into the base JK class itself - the final step of the PR scheme discussed in the comments in https://github.com/psi4/psi4/pull/2682. It is worth noting for the reviewers that, since this PR more closely matches the IncFock of DFJCOSK to that of DFJLinK, it should be considered relevant to the CompositeJK PR chain as well, as it smooths the combination of DFJLinK and DFJCOSK into a single class as planned in the next CompositeJK step. ## User API & Changelog headline",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2816:1746,reduce,reduce,1746,https://psicode.org,https://github.com/psi4/psi4/pull/2816,1,['reduce'],['reduce']
Energy Efficiency,"vs/dev/lib/python3.12/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 1570, in update_geometry; self.set_point_group(self.find_point_group()); ^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 2423, in find_point_group; pg = self.find_highest_point_group(tol) # D2h subgroup; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 2523, in find_highest_point_group; return PointGroup(pg_bits); ^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1530, in __init__; self.constructor_bits(*args); File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1573, in constructor_bits; self.symb = self.bits_to_basic_name(self.PYbits); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1755, in bits_to_basic_name; raise ValidationError('Unrecognized point group bits: %d\n' % (bits)). psi4.driver.qcdb.exceptions.ValidationError: Unrecognized point group bits: 80. Printing out the relevant lines from the Psithon --> Python processed input file:; H -0.3913180530 -0.8282585144 -0.5761431456; H 0.0839750469 -0.2910425067 1.0389058590; H 0.9764814973 0.2730248868 -0.3781855106; """"""); core.IO.set_default_namespace(""""); --> energy(""BP86/sto-3g""). !------------------------------------!; ! !; ! Unrecognized point group bits: 80 !; ! !; !------------------------------------!. Psi4 stopped on: Friday, 30 August 2024 04:55PM; Psi4 wall time for execution: 0:00:00.03. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3213:5170,energy,energy,5170,https://psicode.org,https://github.com/psi4/psi4/issues/3213,1,['energy'],['energy']
Energy Efficiency,wb97X-V with density threshold of 1e-10 stops before printing the first SCF/SAD energy in the SCF iteration output. I dont have access to gcc5 and I cannot reproduce the error otherwise for now. e.g.:; https://dev.azure.com/psi4/psi4/_build/results?buildId=2170&view=logs&j=96451287-da82-57a8-2c11-8da7db9ab71a&t=895e49e6-cad9-5b25-6d66-c0b61859d928&l=801,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1943:80,energy,energy,80,https://psicode.org,https://github.com/psi4/psi4/issues/1943,1,['energy'],['energy']
Energy Efficiency,"where there's only one potential and both charges and locations are specified. Additionally, there's two related categories. F-SAPT can put _different_ external potentials on any of fragments A, B, C, which have been passed in as `energy(""fisapt"", external_potentials={""A"": extern, ...}, ...)`. Also nbody can take an array of charges (not locations) that replace fragments when the fragments are ghosted. These are passed as `energy(..., bsse_type=..., embedding_charges=[monoAchg, ...])`. Problems:; * formation of Python objects in the input file and special options setting doesn't translate to QCSchema, which is the sole means of communication for many calcs in DDD.; * the most common calc, the simple single extern has no kwarg-to-energy way to set; * the uncertainty in units of ExternalPotential can be confusing and has led to bugs. Also, in DDD, the spec order of mol and extern may not be so clear to set the units. This is No. 2 of the DDD series, #1351. ## Todos; - [x] Replace `QMMM()` with `QMMMbohr()` and issue an update guide if the former is called.; - [x] For the common single-extern case, switch to `energy(..., external_potentials=array` instead of `QMMM()` object. This tests whether the `external_potentials` value is an array for a single extern, which gets processed and set immediately, or a dict of externs, which gets handled by the run_fsapt later on.; - [x] relaxed the array spec by which externs are initialized. instead of `q, [x, y, z]` also allow `q, x, y, z`, which makes for very easy numpy processing for units transofmation.; - [x] removed all the units handling around ExternalPotential; - [x] docs . ## Questions; - [ ] ok to use external_potentials kwarg for both simple and fsapt multi frags use cases?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2515:1522,energy,energy,1522,https://psicode.org,https://github.com/psi4/psi4/pull/2515,1,['energy'],['energy']
Energy Efficiency,"x] Format output; * **Test and debug**; - [x] Debug; * **Clean up**; - [x] Clean up. ## Questions; - [x] Is there a way to get correct thread rank in `timer_on` and `timer_off` functions rather than introducing an extra arg. ## Status; - [x] Ready to go. ## Note; The signature of timer operations are:; (1) `void timer_on(const std::string& key)`; (2) `void timer_off(const std::string& key)`; (3) `void parallel_timer_on(const std::string& key, int thread_rank)`; (4) `void parallel_timer_off(const std::string& key, int thread_rank)`. In order to run timer correctly in parallel, (1) and (2) should only be called in seriel part of code and (3) and (4) should only be called in OpenMP parallel sections. Calling to (3) and (4) requires to pass an additional arg `thread_rank` unique to every thread. Generally, call; - `parallel_timer_on(""your_key_string"", omp_get_thread_num());`; - `parallel_timer_off(""your_key_string"", omp_get_thread_num());`; will work. ## An example code; ```; double SCF::compute_energy(); {; timer_on(""energy"");. #pragma omp parallel; for (int a = 0; a < 100; a++); {; parallel_timer_on(""inner"",omp_get_thread_num());; // some running code; parallel_timer_off(""inner"",omp_get_thread_num());; } . timer_off(""energy"");; return 0.0;; }; ```. ## An example output; ```; Host: DESKTOP-JOFFIR0. Timers On : Fri Jul 7 15:47:10 2017; Timers Off: Fri Jul 7 15:47:13 2017. Wall Time: 3.50 seconds. V: Grid : 0.333u 0.000s 0.209w 2 calls; JK: (A|mn) : 0.000u 0.000s 0.004w 2 calls; JK: (A|Q)^-1/2 : 0.783u 0.000s 0.256w 2 calls; JK: (Q|mn) : 0.000u 0.000s 0.001w 2 calls; HF: Form H : 0.150u 0.017s 0.007w 2 calls; HF: Form S/X : 0.000u 0.000s 0.000w 2 calls; HF: Guess : 0.000u 0.000s 0.001w 2 calls; HF: Form G : 18.817u 0.017s 1.883w 24 calls; RKS: Form V : 16.567u 0.017s 1.265w 24 calls; V: Properties : 2.047p 14064 calls; V: Functional : 6.249p 14064 calls; V: V_XC : 0.532p 14064 calls; V: LSDA : 0.182p 28128 calls; V: GGA : 0.218p 14064 calls; JK: D : 0.000u 0.000s 0.000w 2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/743:1631,energy,energy,1631,https://psicode.org,https://github.com/psi4/psi4/pull/743,1,['energy'],['energy']
Energy Efficiency,"x] Ready to go. ## Note; The signature of timer operations are:; (1) `void timer_on(const std::string& key)`; (2) `void timer_off(const std::string& key)`; (3) `void parallel_timer_on(const std::string& key, int thread_rank)`; (4) `void parallel_timer_off(const std::string& key, int thread_rank)`. In order to run timer correctly in parallel, (1) and (2) should only be called in seriel part of code and (3) and (4) should only be called in OpenMP parallel sections. Calling to (3) and (4) requires to pass an additional arg `thread_rank` unique to every thread. Generally, call; - `parallel_timer_on(""your_key_string"", omp_get_thread_num());`; - `parallel_timer_off(""your_key_string"", omp_get_thread_num());`; will work. ## An example code; ```; double SCF::compute_energy(); {; timer_on(""energy"");. #pragma omp parallel; for (int a = 0; a < 100; a++); {; parallel_timer_on(""inner"",omp_get_thread_num());; // some running code; parallel_timer_off(""inner"",omp_get_thread_num());; } . timer_off(""energy"");; return 0.0;; }; ```. ## An example output; ```; Host: DESKTOP-JOFFIR0. Timers On : Fri Jul 7 15:47:10 2017; Timers Off: Fri Jul 7 15:47:13 2017. Wall Time: 3.50 seconds. V: Grid : 0.333u 0.000s 0.209w 2 calls; JK: (A|mn) : 0.000u 0.000s 0.004w 2 calls; JK: (A|Q)^-1/2 : 0.783u 0.000s 0.256w 2 calls; JK: (Q|mn) : 0.000u 0.000s 0.001w 2 calls; HF: Form H : 0.150u 0.017s 0.007w 2 calls; HF: Form S/X : 0.000u 0.000s 0.000w 2 calls; HF: Guess : 0.000u 0.000s 0.001w 2 calls; HF: Form G : 18.817u 0.017s 1.883w 24 calls; RKS: Form V : 16.567u 0.017s 1.265w 24 calls; V: Properties : 2.047p 14064 calls; V: Functional : 6.249p 14064 calls; V: V_XC : 0.532p 14064 calls; V: LSDA : 0.182p 28128 calls; V: GGA : 0.218p 14064 calls; JK: D : 0.000u 0.000s 0.000w 24 calls; JK: USO2AO : 0.000u 0.000s 0.000w 24 calls; JK: JK : 2.250u 0.000s 0.616w 24 calls; JK: J : 0.000u 0.000s 0.000w 16 calls; JK: J1 : 0.000u 0.000s 0.000w 16 calls; JK: J2 : 0.000u 0.000s 0.000w 16 calls; JK: K : 0.000u 0.000s 0.00",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/743:1836,energy,energy,1836,https://psicode.org,https://github.com/psi4/psi4/pull/743,1,['energy'],['energy']
Energy Efficiency,"xperimental and are not generally recommendable. ----; **errors in absolute and relative energies**; Based on S22 benchmark set. no CP correction. Absolute energies for dimers only.; level of theory: PBE/aug-cc-pVTZ with grid (434,75); _grid point reduction_; * ``ROBUST = 30.3 %``; * ``TREUTLER = 45.5 %``. _interaction energies_; * MAD old BS to new BS: 0.002 kcal/mol; * MAD old BS to newBS + ``ROBUST``: 0.002 kcal/mol (yay!); * MAD old BS to newBS + ``TREUTLER``: 0.021 kcal/mol. _absolute energies_; * MAD old BS to new BS: 2.9E-06 au; * MAD old BS to newBS + ``ROBUST``: 2.9E-06 au; * MAD old BS to newBS + ``TREUTLER``: 4.5E-05; * (newBS) MAD ``NONE`` to ``ROBUST`` pruning: 1.4E-10 au; * (newBS) MAD ``NONE`` to ``TREUTLER`` pruning: 4.6E-05 au. ----; **timings** (speed ups); * benzene dimer : `ROBUST=1.16`; `TREUTLER=1.22`; PBE/aug-cc-pVTZ with grid (434,75); 16 Threads; . * C60 fullerene (C2h) : `ROBUST=1.33`; `TREUTLER=1.36`; PBE/aug-cc-pVDZ with grid (434,75); 16 Threads; . ----; **tough case**; Molecule 35 from the MB16-43 ('mindless benchmarking') benchmark set. Modelling following reaction:; `2x 35 + 20x H2 -> 2x LIH + 4x BH4 + 4x CH4 + O2 + 4x AlH4 + 2x SiH4 + P2 + CL2`; In essence, a diverse inorganic, main group chemistry reaction.; level of theory: PBE/def2-TZVP with (434,85) grid.; link to input file: https://gist.github.com/hokru/408873d71efb522f7de1f0cfe0cf9da0. _reaction energy_ ; * dev. old BS to new BS: -0.0011 kcal/mol ; * (newBS) `NONE` to `ROBUST`: -0.0003 kcal/mol; * (newBS) `NONE` to `TREUTLER`: 0.94978 kcal/mol (0.5 % of a reaction energy of 188 kcal/mol !); * speed-ups: `ROBUST=1.33 `; `TREULTER=1.36`. _absolute energy molecule 35_; * dev. old BS to new BS: 3.41e-07; * (newBS) `NONE` to `ROBUST`: 4.93e-07; * (newBS) `NONE` to `TREUTLER`: 1.46E-04. _gradient energy molecule 35_; * (newBS) MAD `NONE` to `ROBUST`: ~ 1E-7; * (newBS) MAD `NONE` to `TREUTLER`: ~ 1E-05. _grid point reduction molecue 35_; * ``ROBUST = 30.9 %``; * ``TREUTLER = 45.8 %``",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591:4753,energy,energy,4753,https://psicode.org,https://github.com/psi4/psi4/pull/1591,3,['energy'],['energy']
Energy Efficiency,"y = optimize('b3lyp'); ```. The problem is in the following snippet of output:; ```; @IRC; @IRC Point Sphere Step Energy DE MAX Force RMS Force MAX Disp RMS Disp; @IRC -----------------------------------------------------------------------------------------------------------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analytic gradient computation. ... ==> Geometry <==. Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -3.024634427518 15.994914619560; H 0.000000000000 -0.753936469287 -2.421595936667 1.007825032070; O 0.000000000000 0.000000000000 0.097932947678 15.994914619560; H 0.000000000000 0.753936469287 -2.421595936667 1.007825032070; S 0.000000000000 0.000000000000 1.616830836315 31.972070999000; ```. Even though the step clearly lowers my symmetry to the expected Cs, I get back to C2v symmetry in my subsequent computation. _NOTE: This geometry is optimized at CCSD(T), and the ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1126:1760,charge,charge,1760,https://psicode.org,https://github.com/psi4/psi4/issues/1126,1,['charge'],['charge']
Energy Efficiency,"y Occupied:. 1Ag -25.833682 2Ag -1.076019 1B3u -0.180947; 1B2u -0.180947 1B1u -0.180947. Virtual:. 2B2u 0.442532 2B3u 0.442532 2B1u 0.442532; 3Ag 0.485648 4Ag 1.228480 1B3g 1.228480; 5Ag 1.228480 1B2g 1.228480 1B1g 1.228480; 3B3u 1.526002 3B2u 1.526002 3B1u 1.526002; 6Ag 2.051155 7Ag 3.283338 2B2g 3.283338; 2B3g 3.283338 2B1g 3.283338 8Ag 3.283338; 4B2u 3.331721 4B3u 3.331721 1Au 3.331721; 4B1u 3.331721 5B3u 3.331721 5B2u 3.331721; 5B1u 3.331721 6B2u 5.672254 6B1u 5.672254; 6B3u 5.672254 7B1u 9.267994 7B2u 9.267994; 7B3u 9.267994 8B1u 9.267994 8B3u 9.267994; 2Au 9.267994 8B2u 9.267994 9Ag 9.745165; 3B2g 9.745165 3B1g 9.745165 3B3g 9.745165; 10Ag 9.745165 11Ag 10.965644. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; ```. Energy converged. @RHF Final Energy: -99.45080702230226. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -143.9965313656634294; Two-Electron Energy = 44.5457243433611438; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -99.4508070223022855. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-06 at Fri Jan 8 13:56:55 2016; Module time:; user time = 10.33 seconds = 0.17 minutes; system time = 0.28 seconds = 0.00 minutes; total time = 2 seconds = 0.03 minutes; Total time:; user time = 10.33 seconds = 0.17 minutes; system time ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:8032,Energy,Energy,8032,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['Energy'],['Energy']
Energy Efficiency,"y('hf', return_wfn=True, molecule=h2o). psi4.oeprop(wfn, ""MBIS_VOLUME_RATIOS""); ```. Error:; ```; QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['H']; Basis Sets: [('BASISSPEC_PSI4_MYBASIS', 'BASISSPEC_PSI4_MYBASIS', None)]; File Path: /home/jevandezande/tmp/psi4/basis, /home/jevandezande/tmp/psi4/basis, /home/jevandezande/progs/mamba/envs/peregrine/share/psi4/basis; Input Blocks:. Traceback (most recent call last):; File ""/home/jevandezande/tmp/psi4/basis/a.py"", line 18, in <module>; psi4.oeprop(wfn, ""MBIS_VOLUME_RATIOS""); File ""/home/jevandezande/progs/mamba/envs/peregrine/lib/python3.11/site-packages/psi4/driver/p4util/util.py"", line 85, in oeprop; free_atom_volumes(wfn); File ""/home/jevandezande/progs/mamba/envs/peregrine/lib/python3.11/site-packages/psi4/driver/p4util/prop_util.py"", line 119, in free_atom_volumes; at_e, at_wfn = psi4.energy(method, return_wfn=True); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/progs/mamba/envs/peregrine/lib/python3.11/site-packages/psi4/driver/driver.py"", line 525, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/progs/mamba/envs/peregrine/lib/python3.11/site-packages/psi4/driver/procrouting/proc.py"", line 2588, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/progs/mamba/envs/peregrine/lib/python3.11/site-packages/psi4/driver/procrouting/proc.py"", line 1778, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/progs/mamba/envs/peregrine/lib/python3.11/site-packages/psi4/driver/p4util/python_helpers.py"", line 217, in _core_wavefunction_build; basis = core.BasisSet.build(",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3240:1500,energy,energy,1500,https://psicode.org,https://github.com/psi4/psi4/issues/3240,1,['energy'],['energy']
Energy Efficiency,"y-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00134025 xtpl_highest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:3511,ENERGY,ENERGY,3511,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['ENERGY'],['ENERGY']
Energy Efficiency,"{; 1 1; noreorient; nocom; symmetry c1; C 0.000000 0.000000 -0.170000; C 0.007000 1.210000 0.523000; C 0.000000 1.205000 1.904000; C 0.000000 0.000000 2.592000; C 0.000000 -1.205000 1.904000; C -0.007000 -1.210000 0.523000; C 0.000000 0.000000 -1.643000; H -0.019000 2.146000 -0.006000; H -0.011000 2.134000 2.442000; H 0.000000 0.000000 3.666000; H 0.011000 -2.134000 2.442000; H 0.019000 -2.146000 -0.006000; N -0.741000 -0.864000 -2.296000; N 0.741000 0.864000 -2.296000; H 0.721000 0.947000 -3.291000; H 1.404000 1.427000 -1.808000; H -1.404000 -1.427000 -1.808000; H -0.721000 -0.947000 -3.291000; }. set optking { dynamic_level = 1; geom_maxiter = 250; print_trajectory_xyz_file = True }. set { scf_type direct }; energy, wfn = optimize('SCF', dft_functional='wB97X-D', dertype='gradient', return_wfn=True). import os; os.chdir(os.environ['HTMD_PSI4_WORKDIR']). oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES'). with open('psi4out.xyz', 'w') as f:; f.write('18 ' ); f.write('%.12f\n' % energy); f.write(MOL.save_string_xyz()); ```. This errors with:. ```; Traceback (most recent call last):; File ""/home/damasj02/software/psi4dev/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 55, in <module>; File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1054, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/driver.py"", line 606, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2051, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 1989, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/damasj02/software/ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948:3186,energy,energy,3186,https://psicode.org,https://github.com/psi4/psi4/issues/948,1,['energy'],['energy']
Energy Efficiency,"…on the external point charges of the ExternalPotential. ## Description; Provides a way to get the gradient of the potential between a Wavefunction object and an ExternalPotential object on the external point charges. These gradients are collected and stored in a protected SharedMatrix object of the ExternalPotnetial during the ExternalPotential.computePotentialGradients() routine, and they are accessible through a ExternalPotential.gradient() method which is bound to a corresponding method in the Python API. ## User API & Changelog headlines; - [ ] Given a Wavefunction object with an ExternalPotential for which a gradient call has been made, the corresponding gradient on the embedded point charges represented by the ExternalPotential can be retrieved by calling gradient() on the ExternalField. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3087:23,charge,charges,23,https://psicode.org,https://github.com/psi4/psi4/pull/3087,3,['charge'],['charges']
Integrability,"	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 2.124830 0.072797 0.020582 2.145412; 	 2 R(1,3) = 2.128962 0.068599 0.020146 2.149109; 	 3 R(1,4) = 2.024461 0.069553 17.524433 19.548895; 	 4 R(1,5) = 2.028397 0.066233 17.556204 19.584601; 	 5 R(1,6) = 2.024305 0.070720 17.517231 19.541535; 	 6 L(2,1,3) = 179.431194 0.000053 -1.744105 177.687089; 	 7 l(2,1,3) = 180.000000 -0.000770 0.000000 180.000000; 	 8 B(2,1,4) = 90.533252 -0.000595 -1.113535 89.419717; 	 9 B(2,1,5) = 89.845687 -0.000107 -1.005547 88.840140; 	 10 B(2,1,6) = 89.819597 0.000658 1.944389 91.763985; 	 11 B(3,1,4) = 89.828837 -0.000257 2.088415 91.917251; 	 12 B(3,1,5) = 89.592600 -0.000007 -0.737452 88.855147; 	 13 B(3,1,6) = 90.389033 0.000309 -1.148076 89.240958; 	 14 B(4,1,5) = 120.478052 -0.000026 0.003564 120.481615; 	 15 B(4,1,6) = 118.946205 0.000056 0.000429 118.946634; 	 16 B(5,1,6) = 120.575361 -0.000030 -0.003611 120.571750; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F4BEF0B510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F4C029A7FB0 Unknown Unknown Unknown; libc-2.27.so 00007F4C0260DEAB gsignal Unknown Unknown; libc-2.27.so 00007F4C025F85B9 abort Unknown Unknown; core.cpython-36m- 00007F4BF2B2E25A Unknown Unknown Unknown; core.cpython-36m- 00007F4BF15542FD Unknown Unknown Unknown; core.cpython-36m- 00007F4BF1570541 Unknown Unknown Unknown; core.cpython-36m- 00007F4BF0FFE806 Unknown Unknown Unknown; python3.6 0000556FBA8799E4 _PyCFunction_Fast Unknown Unknown; python3.6 0000556FBA906DFC Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA900206 Unknown Unknown Unknown; python3.6 0000556FBA9011CF Unknown Unknown Unknown; python3.6 0000556FBA906ED5 Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA901CB9 PyEval_EvalCodeEx Unknown Unknown; python3.6 0000556FBA902A4C PyEval_Eval",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265:3717,Rout,Routine,3717,https://psicode.org,https://github.com/psi4/psi4/issues/1265,1,['Rout'],['Routine']
Integrability," (including simple things like `energy(""mp2/cc-pvdz"")` parsing) has landed here. at least it's no longer repeated in several functions. the main goal is to take user info from where user is accustomed to supplying it (options or kwargs) and use it to initialize a tree of ""computers"" whose leaves are all AtomicComputers (analytic single-points). you can see some examples of the planner's work in `tests/pytests/test_task_planner.py`; * `task_base.py` — new file. fairly simple. how to store the pieces of a single job in a qcschema AtomicInput and how to call qcengine to run psi4 (in api, not cli, mode) to turn that into an AtomicResult. all jobs that aren't analytic single-points pass through this file.; * `driver_findif.py` — moderately modified, mostly additions. this is the least-changed wrapper. a pydantic class has been added to link the planning and assembly steps instead of a function and code that used to live in driver.py. the main idea for wrappers is that everything should be generic python except for translation from qcschema to psi4.wfn at the end (finidf does poorly in this b/c salcs call libmints). at the top of the file is a docstring outlining the procedure. all the wrappers have a mix of class and free functions for historical reasons. this can certainly be refactored once rebasing isn't an issue.; * `driver_cbs.py` — big modifications, mostly additions, but changes are mostly moving code around and renaming big dicts (`need` isn't too informative) and trying to narrow the points of data transfer. again, there's an outline at the top of the file.; * `driver_nbody.py` — big modifications, might be net deletion of code lines. Lots of renaming of variables. Some bugs fixed -- I can only hope more than were added. Docstrings and code outline should be current. I didn't rework multilevel (separate file) except to make gradient run and allow different order of keys in user `levels` kwarg. I wouldn't bother with the diff. . ## Todos. - [x] `msgpack-python` ad",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:1818,wrap,wrappers,1818,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['wrap'],['wrappers']
Integrability," 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Compute gradient(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:47,86 DEBUG [psi4.driver.driver:749] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,455 INFO [psi4.driver.driver:751] Return gradient(): -76.02663273512434; 2022-03-28:21:06:47,455 INFO [psi4.driver.driver:752] [[-0. 0. -0.01764163]; [ 0. -0.01243841 0.00882081]; [-0. 0.01243841 0.00882081]]; ```. ## Questions; - [x] What should default loglevel be? Py default is WARN=30. That presently will produce an empty log file since psi4 starts with INFO=20. Present setup is 20 for psithon and 30 for psiapi. ANSWER: going with 20. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2512:2688,rout,routine,2688,https://psicode.org,https://github.com/psi4/psi4/pull/2512,1,['rout'],['routine']
Integrability," = {}; json_data[""molecule""] = """"""He 0 0 0\n--\nHe 0 0 1""""""; json_data[""driver""] = ""gradient""; json_data[""args""] = 'SCF'; json_data[""kwargs""] = {}; json_data[""options""] = {""BASIS"": ""STO-3G""}; json_data[""return_output""] = True; ; psi4.json_wrapper.run_json(json_data); ; assert psi4.compare_strings(""STO-3G"", json_data[""options""][""BASIS""], ""Options test""); > assert psi4.compare_integers(True, json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . expected = True, computed = False, label = 'Success'. def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite.; ; """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	Success: computed value (0) does not match (1). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/p4util/util.py:244: TestComparisonError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Options test......................................................PASSED; ____________________________________________________________________ test_dkh ____________________________________________________________________. @using_dkh; def test_dkh():; """"""dkh/molpro-2order""""""; ; Ne = psi4.geometry(""""""; 0 1; Ne; """"""); ; psi4.set_options({; 'reference': 'rhf',; 'basis': 'cc-pvtz-dk',; 'relativistic': 'dkh',; 'dkh_order': 2,; 'print': 2,; 'scf_type': 'pk'}); ; > e = psi4.energy('scf'). /home/joao/miniconda3/lib/python3.6/site-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:17760,message,message,17760,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['message'],['message']
Integrability," DETCI. Add functional-including qcvars for DFT (#1570, #1445); - Add option `PARENT_SYMMETRY` to replace a global. Don't use it directly (#1575); - Driver sow/reap for optimize, database which never worked for py3 removed (#1583); - Add 6-311G(2df, <any>) for 2nd row atoms (#1531); - Improve printing and guess for r_e for the `diatomic` procedure (#1601); - Response code cleaned to use Hessian-vector products (#1550); - Enable running pytest in parallel via `psi4 --test -n<N>` if package `pytest-xdist` installed (#1612); - Considerable code-cleanup at LGTM's prompting (#1618, #1633, #1631, #1616, #1617, #1624, #1620, #1622, #1627, #1639, #1630, #1629, #1636, #1632, #1626, #1619, #1625, #1623, #1634, #1650, #1651, #1621, #1655); - Considerable memory-leak cleanup at CPPCHECK's prompting (#1534) and a bit more at valgrind's prompting (#1755); - moved code to QCA; - molecule alignment code (#1644); - `QCAspect` refined into `qcel.Datum` (#1654); - use code from QCA; - testing functions dropped in favor of wrapping qcelemental testing functions. also, can choose between conventional Psi4 testing API and QCA API (#1644); - Windows testing and build (#1648); - Add CSAM screening to ERISieve as alternative to Schwarz. Turn on with `set screening csam` (#1499); - New Bragg-Slater (BS) radii change DFT total energies slightly (#1591); - Extend `SAD_SCF_TYPE` to all usual `SCF_TYPE` types by using exact or DF integrals under the hood (#1477).; - Implement quadrature weights cutoff at 1.e-15, which together with pruning makes DFT on C_60 40% faster (#1581); - Compute multipole potential integrals to arbitrary order, replacing code for EFP that was fixed at octupole (#1657); - Allow external potentials in FISAPT (#1608); - Speed up electric field integrals (25x) (#1671); - Implement SAD natural orbitals guess (#1672); - Analytic Hessians for LSDA functionals (#1664); - Add qc2p basis set from CFOUR (#1718); - Update to g2g v2 API (#1718); - Density cumulant functional theory (",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:5644,wrap,wrapping,5644,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['wrap'],['wrapping']
Integrability," [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order SCF convergence to DFT Wavefunctions.; - [x] Adds the gradient regularized asymptotic correction (GRAC) to DFT through the option `DFT_GRAC_SHIFT`.; - [x] Adds a density-fitted second-order Electron Propagator code. ; - [x] Adds the density-fitted SAPT(DFT) code.; - [x] Adds linear response DFT.; - [ ] Adds TDDFT methodologies.; - [x] To avoid conflict the function `property` was renamed to `properties`.; - [x] More involved JSON input/output interface.; - [x] Effective Core Potentials available for SCF energies and gradients, as well as post-SCF energies.; - [x] Def2 family of basis sets available for all atoms supported by those basis sets. * **Bug Fixes**; - [x] wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did *not* effect wB97X-D.; - [x] Memory limitations are better adhered to for very large MCSCF computations. * **TODO**; - [ ] Run `sed` commands from https://github.com/psi4/psi4/pull/690; - [x] Pull in ECPs #681 ; - [ ] Rebase in current master to resolve conflicts; - [x] Closes #39 ; - [x] Closes #40 ; - [ ] New Hessian/Frequency analysis code.; - [ ] Fill out remaining DFT documentations; - [ ] Polish new DF JK/Transformer technology; - [ ] Triple check UKS GGA Hessian-vector code; - [ ] Finished DFT Hessian functionality (skeleton terms); - [ ] Rebase in License/1.1 changes; - [ ] Rebase in ECP changes (#681); - [ ] Re-examine VV10 default grid size; - [ ] Imp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698:2449,interface,interface,2449,https://psicode.org,https://github.com/psi4/psi4/pull/698,1,['interface'],['interface']
Integrability," `Array2d::diagonalize, Array2d::davidson, Array2d::cdsyev, Array2d::cdgesv, Array2d::lineq_flin, Array2d::lineq_pople` and `Tensor2d::davidson, Tensor2d::cdsyev, Tensor2d::cdgesv, Tensor2d::lineq_flin, Tensor2d::lineq_pople` (PR #2684); - [x] Delete unused function overloads from `libmints`: `Matrix::diagonalize` (PR #2693); - [x] Delete commented out code, an unused `extern FILE*` and unused `#include`s from `mcscf::SCF::energy` (PR #2678). ### New DSYEV wrappers, anti-`sq_rsp(...)` crusade; - [x] Implement two new wrapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:2012,wrap,wrapper,2012,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['wrap'],['wrapper']
Integrability," `compute_df` function separate from `compute` for gradients?; **A:** I'd say yes, for two reasons. First, in the DF case, it's not obvious which DF integrals you're using (`df_basis_scf` is probably one, but is the other `df_basis_mp`, `df_basis_dct`, `df_basis_cc`?), so you need to explicitly supply this. One can imagine ways to circumvent this, but those require other infrastructure changes. Second, the `compute` function is rather complicated due to its use of three different ""algorithms"". Combining the two functions would make them more complicated. Simplifying the `compute` function, while an important task and one I will probably need to do before I can fully put my graduate projects behind me, is outside of the scope of this PR. Do you _really_ want to review something even larger?. **Q:** How stable is the interface?; **A:** Changes aren't _necessary_, and I plan to keep this stable at least until after the `dfocc` resync. However, I may make some interface changes if I find they're convenient for non-`dfocc` modules that use this. The big change I'm considering is taking the `dfmp2` approach of including back-transforming the 3-Center density intermediate in the main loop. In that case, the calling code doesn't even need to back-transform the density. If this change works, we can eliminate some code duplication in `dfmp2`, for an added bonus. In this case, all `dfocc` would need to do is stash intermediates it already computes in a place where my code can find them and then delete its back-transformation code. **Q:** What's this about adding a new block algorithm?; **A:** For large systems, you may not be able to assume that the three-center intermediate (naux*nmo^2) fits in memory. To remedy this, `dfmp2` uses a block algorithm, where it reads only ""blocks"" of this intermediate at a time. The old DF gradient code was based on Rob's `dfmp2` but in simplifying from Rob's code, had a block algorithm that used unnecessarily many blocks and incurred no memory s",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2079:1861,interface,interface,1861,https://psicode.org,https://github.com/psi4/psi4/pull/2079,1,['interface'],['interface']
Integrability," a `SplitJK` instance, sn-LinK can be called within Psi4 via `SCF_TYPE = J_ALGO+SNLINK`, with `J_ALGO` being the J construction algorithm of choice (currently only `DFDIRJ`). If GPU support is enabled, the `SNLINK_USE_GPU` keyword can be turned on to run the sn-LinK algorithm using GPUs. Construction of the GauXC interface is specified at compile-time, using the `ENABLE_gauxc` flag. Psi4 can either build an internal instance of GauXC, or hook up to an external GauXC install specified by `gauxc_DIR`. If `ENABLE_gauxc` is turned off, the `snLinK` class will instead throw an exception upon construction. For GPU support, there is the `gauxc_ENABLE_GPU` keyword, which ensures that the Psi4/GauXC interface supports GPU execution. For testing, `test_compositejk.py` and `test_comprehensive_jk_screening.py` both now include sn-LinK tests, conditional on the sn-LinK interface being built. Finally, a `gauxc_writer.py` file has been added, enabling construction of HDF5 reference files via the Psi4/GauXC interface, to be used in GauXC's `standalone_driver` for debugging purposes. The `test_gauxc_writer.py` file has been added to test this writer against reference HDF5 files. . ## User API & Changelog headlines; - [X] Psi4 has been interfaced to the GauXC standalone library, specifically the sn-LinK exact exchange algorithm present within GauXC. Construction of the interface is specified at compile-time with the compile-time flag `ENABLE_gauxc`, and GPU support is specified with the `gauxc_ENABLE_GPU` compile-time flag. Once installed, `SCF_TYPE=J_ALGO+SNLINK` can be used to call GauXC within Psi4. A large number of keywords have been added for controlling the behavior of `SNLINK`. For controlling the GauXC grid, `SNLINK_RADIAL_POINTS`, `SNLINK_SPHERICAL_POINTS`, and `SNLINK_RADIAL_SCHEME` control the GauXC radial point count, spherical point count, and radial quadrature, respectively. `SNLINK_USE_GPU` controls GPU execution of GauXC. Finally, `SNLINK_INTS_TOLERANCE` controls the",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:2745,interface,interface,2745,https://psicode.org,https://github.com/psi4/psi4/pull/3150,1,['interface'],['interface']
Integrability," after #2388 introduces segfaults (details see below), which so far I have not yet been able to trace down. Any help on that would be much appreciated. ## User API & Changelog headlines; - Implementation of PCM and COSMO solvation models based on the ddx library. ## Dev notes & details; - Introduction of a NumIntHelper class to compute some integrals numerically using a DFT grid; - Introduction of ddx solvation model and new ddx options. ## Reproducer for the mysterious segfault; As part of rebasing against the current master I encountered a really strange segfault. I managed to produce a minimal example, which has really nothing to do with ddx and only adds a python interface to a simple numerical electrostatic integral. See here for a [trimmed-down diff](https://github.com/psi4/psi4/compare/master...mfherbst:psi4:segfault). On my machine checking out this `segfault` branch with `0_configure.sh`, building and running the `mytests/runtests.sh` script gives a segfault inside the numerical integration in the `PCMPotentialInt` class. Note that the code I added *is not even called*, the call to `PCMPotentialInt` happens from the pcm code *which I have not modified*. Now, commenting out; ```c++; PrintIntegralsFunctor printer;; potential_integrals_->compute(printer);; ```; the segfault disappears. I'm getting the weird feeling I'm doing something really stupid here and I just missed it. ## Questions; - [x] Thoughts on the NumIntHelper?; - [x] Is D -> D_cart needed or not ([this stuff](https://github.com/psi4/psi4/pull/2767/commits/108b6bb1a53cdc428933475dea991e08a3330d98#diff-48947c7a095c933d6843e0564043f051b0e54dff111fff222bf25cd968f6f9daR1769-R1780)); - [x] Any idea on the segfault when rebasing against master?. ## Checklist; - [x] Find and fix segfaults when using psi4 master; - [x] Remove debug restriction to one thread in numerical integrals; - [x] Documentation; - [x] Bring forward more options to change numerical grid details for DDX solvation models; - [x] ~~Merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767:1523,integrat,integration,1523,https://psicode.org,https://github.com/psi4/psi4/pull/2767,1,['integrat'],['integration']
Integrability," and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangling for LAPACK and BLAS. All distributions of BLAS have a header `cblas.h` (or `mkl-cblas.h` if you are using MKL), which does this for you. Similarly, all versions of LAPACK provide `lapacke.h` (again MKL makes things difficult and calls the header `mkl-lapacke.h`). Hence we really should be using these headers and not the stuff in `libqt` (or we should rewrite `libqt` in terms of those header files). One of the other gotchas of BLAS/LAPACK is detecting the actual libraries. The names are non-standardized and the CMake find_package for them is archaic. For the moment I am using the scripts the old build used to find BLAS/LAPACK. They are somewhat touchy, and overly verbose for my liking, but better than me having to write my own. ~~To my knowledge they don't worry about the Mac Accelerate framework so this is again an issue.~~ @jturney and @dgasmith have both independently confirmed that enabling accelerate is not necessary, because the BLAS and LAPACK the math detection finds on Mac are actually (static links to?) the libraries behind the accelerate framework.; ## Minor Points Not Worth a Paragraph; - exception.h has been moved into libpsi4util to be with its source file; - process.h has been moved into libparallel to be with its source file; - `src/bin/psi4` is now `src/bin/psi4_main` to avoid name conflicts; - `src/bin/efp` is now `src/bin/efp_interface` to avoid name conflicts; - Most ConfigX files are gone. From what I can tell, these files are what should be in the CMakeLists.txt wrapping project X. That's where they now reside. ; - Some options are now gone; - ENABLE_MPI Psi4 proper contains no MPI now, if external projects want to include it that's fine; - ENABLE_OMP I never understood this one, just make it not required; - ~~ENABLE_ACCELERATE FindLAPACK knows about accelerate, if you want to use it ensure it is in your `CMAKE_PREFIX_PATH` variable~~; - Accomplishes #355",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:11462,wrap,wrapping,11462,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['wrap'],['wrapping']
Integrability," and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `psi4/src/psi4/adc/diagonalize.cc` with new wrapper. Add check for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `dfoccwave::Tensor2d::diagonalize` with new wrapper. Add check for diagonalization failure.; - [x] Remove vestiges of the diagonalization cutoff from `dfocc`. `dfoccwave::Tensor2d::diagonalize` used to take a ""diagonalization cutoff"" argument, which was passed down to `sq_rsp(...)`. This used to be hardcoded to 1E-10, but went completely defunct when `sq_rsp(...)` started using DSYEV internally (~forever ago), as LAPACK offers no such parameter to adjust and always diagonalizes down to ~machine precision. ### New sanity checks; - [x] Add a sanity check for non-square matrices in `mcscf::MatrixBase::diagonalize`; - [x] Add a sanity check for non-square matrices in `dfoccwave::Tensor2d::diagonalize`; - [x] Add a sanity checks for non-square matrices and illegal values of ""di",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:2967,wrap,wrapper,2967,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['wrap'],['wrapper']
Integrability," and an executable. This is simply done by packaging Psi4 up into a giant .so that we then link psi4.cc against. Because I am liable to forget here is an example of using Psi4 from python now, assuming `${CMAKE_INSTALL_PREFIX}/psi4/lib/psi4.so` is in your `PYTHONPATH`:. ``` .py; from psi4 import *; initialize(); #This has to come after initialize or else the global variables aren't right; import driver; set_global_option('BASIS', 'CC-PVDZ'); xyzstring = """"""; units angstrom; O 0.0000000000 0.0000000000 -0.0711762954; H 0.0000000000 -0.8916195680 0.5648097613; H 0.0000000000 0.8916195680 0.5648097613; """"""; efp_init(); my_mol = Molecule.create_molecule_from_string(xyzstring); my_mol.update_geometry(); driver.energy('scf',molecule=my_mol); ```. It would be nice to consolidate this somewhat, but I'll leave that for later. The segfault discussed on the forums is still present with this.; ## Fortran Name Mangling. This is a perpetual problem. The previous CMake build relied on the Fortran/C interface capabilities of CMake to generate a header. This seemed to work well, but as I understand it, it assumes that the Fortran compiler CMake is currently using is the one that compiled all Fortran libraries. Consequentially this does _NOT_ necessarily provide you with the correct mangling for externally compiled Fortran libraries. For Fortran libraries that we may are building, like ERD, DKH, etc. the name mangling should go through the CMake mangling detection mechanisms and the resulting header file included with the library. This allows other projects to link to these libraries without having to know the mangling scheme.; ## BLAS and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangling for LAPACK and BLAS. All distributions of BLAS have a header `cblas.h` (or `mkl-cblas.h` if you are using MKL), which does this for you. Similarly, all versions of LAPACK provide `lapacke.h` (again MKL makes things difficult and calls the header `mkl-lapacke.h`). ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:9216,interface,interface,9216,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['interface'],['interface']
Integrability," appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prevents Psi4 proper from having to know about `MyGreatMatrix`. ; ## Libraries that are not part of Psi4 core are now in external. Although allowed by the more permissive licenses, it is somewhat dubious to mix external libraries in with ones own source code. Separating them makes it clear to others that these are not our codes, but used with (implicit) permission. It also keeps the core free of the exter",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:3467,depend,dependencies,3467,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['depend'],['dependencies']
Integrability," calculation crashes, with the following output at the end of the log file (I have attached the full log file to the issue.):; ```; Wfn Parameters:; --------------------; Wavefunction = CCSD_T; Number of irreps = 1; Number of MOs = 275; Number of active MOs = 275; AO-Basis = NONE; Semicanonical = false; Reference = RHF; Print Level = 1. IRREP # MOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; A 275 0 9 0 266 0; Transforming integrals...; IWL integrals will be deleted.; (OO|OO)...; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Constructing frozen core operators; Row and column block dimensions of A; (n = 1): 275 ; (n = 1): 275 ; Row and column block dimensions of B; (n = 1): 276 ; (n = 1): 275 ; Row and column block dimensions of C; (n = 1): 275 ; (n = 1): 275 ; Asym: 0, Bsym: 0, Csym: 0; Mismatch in index Ha = 0; ```. Additionally, the following error message is given:; ```; Traceback (most recent call last):; File ""/oasis/tscc/scratch/ebullvul/projects/POPC/timings/debug/psi4test/psi4_ccsdt.py"", line 28, in <module>; e = psi4.energy(model, molecule=mol); File ""/home/ebullvul/anaconda3/envs/psi4/lib/python3.10/site-packages/psi4/driver/driver.py"", line 526, in energy wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/ebullvul/anaconda3/envs/psi4/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 989, in select_ccsd_t_ return func(name, **kwargs); File ""/home/ebullvul/anaconda3/envs/psi4/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 2898, in run_ccenergy core.cctransort(ref_wfn); RuntimeError: ; Fatal Error: Matrix::gemm error: Number of rows and columns do not match.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1670993662927/work/psi4/src/psi4/libmints/matrix.cc on line: 1389The most recent 5 function calls were:. psi::Matrix::gemm(bool, bool, double, psi::Matrix const*, psi::Mat",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2916:1888,message,message,1888,https://psicode.org,https://github.com/psi4/psi4/issues/2916,1,['message'],['message']
Integrability," first look at `_engine_can_do` and observe that compared to good ol' dftd3, s-dftd3 (aka simple-dftd3) _can't_ do d2 and by default does d3 variants with ATM dispersion built in (s9=1.0); - [x] in contrast, mctc-gcp is a drop-in replacement for good ol' gcp (probably b/c I stuck with cmdline and didn't write an elaborate interface on top of it :-); - [x] this goes with https://github.com/MolSSI/QCEngine/pull/385; - [x] I didn't think we could just drop the most popular psi4 addon and demand replacement, so all of dftd3/s-dftd3/gcp/mctc-gcp work with psi4. s-dftd3 and mctc-gcp are preferred if present; - [x] need docs; - [x] status (special qcng = v0.26.0 unreleased at time of writing); - [x] PR psi4 with special qcng and dftd3 and gcp and psi4-channel dftd4 all work; - [x] PR psi4 with special qcng and s-dftd3 and mctc-gcp and c-f-channel dftd4 all work ~except for test_dftd3_mp2d~; - [x] old psi4 with special qcng ~doesn't work at all -- WIP~ now works; - old psi4 running fisapt-d then fsapt.py with special qcng gives wrong answer for emp disp; - run_dftd3 is used a lot in the tests as a qcengine wrapper around psi4 molecules. because dftd3 and s-dftd3 handle defaulting so differently, I can't easily make the fn call either/or. I'm tempted to (a) drop the capability or (b) have a run_sdftd3 that is a thin wrapper like run_dftd4 but won't be a drop-in replacement or (c) deprecate run_dftd3/run_dftd4/run_gcp in favor of a run_dispersion that hooks up to the psi EmpiricalDispersion class and _can_ provide a uniform interface (same logic for disp level hints, tweaked parameters, etc. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). For development, I've had two objdirs with two conda envs, one with psi4 disp packages and one with c-f disp packages, and run tests on each. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2791:4347,wrap,wrapper,4347,https://psicode.org,https://github.com/psi4/psi4/pull/2791,3,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability," flag `ENABLE_gauxc`, and GPU support is specified with the `gauxc_ENABLE_GPU` compile-time flag. Once installed, `SCF_TYPE=J_ALGO+SNLINK` can be used to call GauXC within Psi4. A large number of keywords have been added for controlling the behavior of `SNLINK`. For controlling the GauXC grid, `SNLINK_RADIAL_POINTS`, `SNLINK_SPHERICAL_POINTS`, and `SNLINK_RADIAL_SCHEME` control the GauXC radial point count, spherical point count, and radial quadrature, respectively. `SNLINK_USE_GPU` controls GPU execution of GauXC. Finally, `SNLINK_INTS_TOLERANCE` controls the integral screening threshold used by GauXC's sn-LinK algorithm. ## Dev notes & details; - [X] Adds a new new Psi4 compile-time option, `ENABLE_gauxc`. When set to `ON`, `ENABLE_gauxc` will build Psi4 with support for GauXC. The Psi4 build system has been adjusted so that Psi4 can either build an internal instance of GauXC, or hook up to an external GauXC instance defined by `gauxc_DIR`. The `gauxc_ENABLE_GPU` keyword builds the Psi4/GauXC interface to support GPU execution. Additionally, for internally-build GauXC instances, setting `gauxc_ENABLE_GPU` to `ON` will build the internal GauXC install with GPU support. For external GauXC installs, `gauxc_ENABLE_GPU` will ensure that the external GauXC install supports GPU execution. ; - [X] Adds a new `SplitJK` derived class, `snLinK`. When Psi4 is built with GauXC support, `snLinK` contains the implementation of the details of the Psi4/GauXC interface, and is responsible for calling GauXC within Psi4. When Psi4 is not built with GauXC support, snLinK will instead throw an exception upon construction, as implemented in a stub class. The `snLinK` class supports both CPU and GPU execution of GauXC, controllable at runtime via the `SNLINK_USE_GPU` keyword. Additionally, the `snLinK` class operates correctly regardless of the value of `psi4_SHGAUSS_ORDERING`, as well as for both Spherical and Cartesian basis sets. ; - [X] Updates the `test_compositejk.py` and `test_comp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:4182,interface,interface,4182,https://psicode.org,https://github.com/psi4/psi4/pull/3150,1,['interface'],['interface']
Integrability," fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351:1986,wrap,wrapper,1986,https://psicode.org,https://github.com/psi4/psi4/pull/1351,1,['wrap'],['wrapper']
Integrability," gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - A Logging file has been introduced. All its contents should be considered experimental and subject to change. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351:2518,wrap,wraps,2518,https://psicode.org,https://github.com/psi4/psi4/pull/1351,1,['wrap'],['wraps']
Integrability," here. -->; For some poorly understood confluence of reasons, for some users error messages can _sometimes_ get completely lost when Psi4 exits with a `PSIEXCEPTION`, especially when a PSIO error happens.; This can be observed in recent bug reports, see:. - https://github.com/psi4/psi4/issues/2970; - https://forum.psicode.org/t/sapt0-calculation-crashes-pointer-error/2839. In both of these cases the users were only seeing the error message that has been written to `cerr`, but not the string that `PSIEXCEPTION` should have printed. IIRC when I tried to research this quite a while ago, I have found this may be a bug in some versions of libstdc++. This PR adds a simple workaround: the exception message is also printed to `cerr` in `psio_error`. The only side effect, is that some users, who are currently not affected by the lost message problem, may start getting the same error message twice when a PSIO error happens. Spammy error exits are not great, but PSIO errors are not supposed to happen too often, and when they do loosing the error message is more annoying than having it be duplicated. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] PSIO error messages are now also printed to `cerr`, fixing an issue where (under some circumstances) large parts of the error message would never reach the user, . ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] The same error message that gets passed to `PSIEXCEPTION` is now printed to `cerr` before throwing in `psio_error`. ## Checklist; - [x] There is no easy way to add tests for ""are error messages getting delivered or not?""; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2997:1119,message,message,1119,https://psicode.org,https://github.com/psi4/psi4/pull/2997,5,['message'],"['message', 'messages']"
Integrability," in Wfn. Then `driver.frequency()`; - extracts the frequencies from Wfn; - passes Wfn and Wfn.frequencies into thermo. Then `psi4.thermo()`; - extracts Molecule and E0 from Wfn; - uses those and frequencies to do the thermodynamic analysis. Key lines from driver below (note order of execution). ```; 1 frequency(name):; 2 H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs) # send away for hessian; 7 psi4.thermo(wfn, wfn.frequencies()) # pass frequencies into thermo analysis. 3 hessian(name): ; 4 H = psi4.fd_freq_1(molecule, gradients, irrep) # stores freq in global psi4.frequencies(), returns H; 5 wfn.set_hessian(H) # store H in fresh wfn; 6 wfn.set_frequencies(psi4.get_frequencies()) # store freq in fresh wfn; ```. So there are three stages: ""assemble H"", ""vibrational analysis"", & ""thermo analysis"". Keeping in mind that the nmw Hessian is isotope-independent while freqs are isotope-dependent, you'll notice that the present arrangement of groups (1, 2) and (3) with frequencies as intermediate are such that can't reuse H for vibrational analysis of different isotopes (though it does allow for reuse of freq for thermo analysis at diff T, P).; ### Future. assemble H; - this is doing just fine c-side in `psi4.fd_freq_0/1`; - should focus on returning nmw Hessian (as currently) does and trim out the vibrational analysis part; - @psi-rking, I don't remember seeing any projection of rot/trans out of Hessian. Is this just because by using SALCs you're assured of only displacements in vib-active directions? Assuming we someday get an analytic Hessian mtd, projection would be needed, right? I'm inclined to group projection with the vib analysis for comparison of proj and unproj freqs, so psi4.fd module needn't be involved.; - [ ] signature `SharedMatrix fd_freq_1(boost::shared_ptr<Molecule> mol, Options &options, const boost::python::list& grad_list, int freq_irrep_only)` (just like at present); - [ ] remove communication with globals (`Process`); - [ ] return",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/347:1498,depend,dependent,1498,https://psicode.org,https://github.com/psi4/psi4/issues/347,1,['depend'],['dependent']
Integrability," iter 9: -535.96873745368225 -5.38996e-02 3.40988e-04 DIIS; @DF-RHF iter 10: -535.97324997051101 -4.51252e-03 1.04954e-04 DIIS; @DF-RHF iter 11: -535.97364951295322 -3.99542e-04 1.98119e-05 DIIS; @DF-RHF iter 12: -535.97366972710233 -2.02141e-05 5.56774e-06 DIIS; @DF-RHF iter 13: -535.97367232462670 -2.59752e-06 2.92530e-06 DIIS; @DF-RHF iter 14: -535.97367292863373 -6.04007e-07 1.33844e-06 DIIS; @DF-RHF iter 15: -535.97367316705004 -2.38416e-07 5.52742e-07 DIIS; @DF-RHF iter 16: -535.97367321567344 -4.86234e-08 2.27016e-07 DIIS; @DF-RHF iter 17: -535.97367322279683 -7.12339e-09 4.03379e-08 DIIS; @DF-RHF iter 18: -535.97367322291711 -1.20281e-10 1.51493e-08 DIIS; @DF-RHF iter 19: -535.97367322293508 -1.79625e-11 3.82698e-09 DIIS; @DF-RHF iter 20: -535.97367322293599 -9.09495e-13 1.05449e-09 DIIS; @DF-RHF iter 21: -535.97367322293462 1.36424e-12 2.43431e-10 DIIS; @DF-RHF iter 22: -535.97367322293553 -9.09495e-13 9.68772e-11 DIIS. DF guess converged. ==> Integral Setup <==. MINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of atoms: 24; Number of AO shells: 114; Number of SO shells: 114; Number of primitives: 358; Number of atomic orbitals: 260; Number of basis functions: 246. ```; Number of irreps: 1; Integral cutoff 0.00e+00; Number of functions per irrep: [ 246 ]. Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. Computing two-electron integrals...done; Computed 238922952 non-zero two-electron integrals.; Stored in file 33.; ```. ==> DiskJK: Disk-Based J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; Memory (MB): 3576; Schwarz Cutoff: 1E-12; ```. @RHF iter 23: -535.97469002803746 -1.01681e-03 4.55914e-06 DIIS; @RHF iter 24: -535.97469062826895 -6.00231e-07 9.20453e-07 DIIS; @RHF iter 25: -535.97469065540940 -2.71405e-08 3.52409e-07 DIIS; @RHF iter 26: -535.97469065965606 -4.24666e-09 6.17974e-08 DIIS; @RHF iter 27: -535.97469065985069 -1.94632e-10 2.04842e-08 DIIS; @RHF iter 28: -535.9",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61:8552,Wrap,Wrapper,8552,https://psicode.org,https://github.com/psi4/psi4/issues/61,1,['Wrap'],['Wrapper']
Integrability," iter 9: -535.96873759197706 -5.38997e-02 3.40983e-04 DIIS; @DF-RHF iter 10: -535.97325006729534 -4.51248e-03 1.04940e-04 DIIS; @DF-RHF iter 11: -535.97364955471517 -3.99487e-04 1.97794e-05 DIIS; @DF-RHF iter 12: -535.97366979229014 -2.02376e-05 5.39642e-06 DIIS; @DF-RHF iter 13: -535.97367245741657 -2.66513e-06 2.45749e-06 DIIS; @DF-RHF iter 14: -535.97367296799007 -5.10573e-07 1.28273e-06 DIIS; @DF-RHF iter 15: -535.97367316735676 -1.99367e-07 5.79818e-07 DIIS; @DF-RHF iter 16: -535.97367321444040 -4.70836e-08 2.30170e-07 DIIS; @DF-RHF iter 17: -535.97367322170135 -7.26095e-09 4.11055e-08 DIIS; @DF-RHF iter 18: -535.97367322182868 -1.27329e-10 1.54464e-08 DIIS; @DF-RHF iter 19: -535.97367322184778 -1.90994e-11 3.80847e-09 DIIS; @DF-RHF iter 20: -535.97367322185005 -2.27374e-12 1.03188e-09 DIIS; @DF-RHF iter 21: -535.97367322185050 -4.54747e-13 2.30705e-10 DIIS; @DF-RHF iter 22: -535.97367322184755 2.95586e-12 9.09269e-11 DIIS. DF guess converged. ==> Integral Setup <==. MINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of atoms: 24; Number of AO shells: 114; Number of SO shells: 114; Number of primitives: 358; Number of atomic orbitals: 260; Number of basis functions: 246. ```; Number of irreps: 1; Integral cutoff 0.00e+00; Number of functions per irrep: [ 246 ]. Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. Computing two-electron integrals...done; Computed 238922952 non-zero two-electron integrals.; Stored in file 33.; ```. ==> DiskJK: Disk-Based J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; Memory (MB): 3576; Schwarz Cutoff: 1E-12; ```. @RHF iter 23: -535.97469002803700 -1.01681e-03 4.55914e-06 DIIS; @RHF iter 24: -535.97469062826895 -6.00232e-07 9.20453e-07 DIIS; @RHF iter 25: -535.97469065540758 -2.71386e-08 3.52409e-07 DIIS; @RHF iter 26: -535.97469065965811 -4.25052e-09 6.17975e-08 DIIS; @RHF iter 27: -535.97469065984956 -1.91449e-10 2.04843e-08 DIIS; @RHF iter 28: -535.9",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:7179,Wrap,Wrapper,7179,https://psicode.org,https://github.com/psi4/psi4/issues/62,1,['Wrap'],['Wrapper']
Integrability," lot do with Prop itself. This commit makes using Prop inside the code a ton easier.; This was done in commit ; 528c0d7 : https://github.com/psi4/psi4/commit/528c0d719e8bb49b12652417b00db506241a4bee. 2.) Split OEProp in three distinct classes:; - - MultipolePropCalc: This class calculates all multipole properties and mo extents in commit: ; 59005ee https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e; - - PopulationAnalysisCalc: This class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directly without any interference from Python and C++. The reason they were split this way: ESPPropCalc and PopulationAnalysisCalc and MultipolePropCalc do not share any members or variables. Example: only MPC requires an explicit origin to be set. ## Questions; - [x] I changed a return type to const & to avoid a large copy: https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1#r30055651; - [x] The return type in compute_mo_extents is an actual vector instead of a Shared pointer. It contains maximum three elements, so I left it at that: https://github.com/psi4/psi4/commit/5900",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1133:1580,rout,routine,1580,https://psicode.org,https://github.com/psi4/psi4/pull/1133,1,['rout'],['routine']
Integrability," manually. They could be written to one or more external; # files and included by adding the directory to environment variable PSIPATH; #; # The format of these external files follows the same format as those below, where there's a [name]; # tag before the standard G94 basis set specification:. # [DZ]; # spherical; # ****; # H 0 ; # S 3 1.00; # 19.2406000 0.0328280 ; # 2.8992000 0.2312080 ; # 0.6534000 0.8172380 ; # S 1 1.00; # 0.1776000 1.0000000 ; # ****; # C 0; # definition of carbon atom DZ basis...; # ****; # Any more atoms needed...; # ****. # The keywords cartesian or spherical are optional and provide default behavior if the; # puream keyword is not set. In basis strings, like below, multiple basis sets can appear, as long; # as there is a [name] tag above the definition of each basis set. The basis sets specified; # using either basis <opt_name> {...} are utilized first (in the order specified; # in the input file). Any remaining basis sets required are extracted from the built-in library,; # if they exist, or an error message is printed.; psi4.basis_helper(""""""; #; # We start by assigning basis sets to atoms. These commands can go anywhere in the basis block; #; # First, assign DZ to all atoms; assign DZ; # Now, assign 3-21G to all carbon atoms; assign C my3-21G; # The two atoms labelled H1 get a STO-3G basis two; assign H1 sto-3g; # Carbons 3 and 5 get a STO-3G basis, too; assign C1 sto-3g; # With all these in place, the symmetry is lowered to C2v automatically; # The commands are applied in order i.e., adding a line like; # assign cc-pvtz; # here would override all of the above and assign cc-pvtz to all atoms. #; # Now we define the basis sets. N.B. Indentation does not matter; it just looks prettier.; #; [my3-21G] #This is really the standard 3-21G basis, but with a different name; cartesian; ****; H 0; S 2 1.00; 5.4471780 0.1562850; 0.8245470 0.9046910; S 1 1.00; 0.1831920 1.0000000; ****; C 0; S 3 1.00; 172.2560000 0.0617669; 25.9109000 0.3587940; 5.533",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1178:2341,message,message,2341,https://psicode.org,https://github.com/psi4/psi4/pull/1178,1,['message'],['message']
Integrability," not compatible with the production psi4-1.3.2+ecbda83 version(Tested under Win10 WSL Ubuntu1804). ```; Traceback (most recent call last):; File ""/root/miniconda3/envs/psi/bin/psi4"", line 177, in <module>; import psi4; File ""/root/miniconda3/envs/psi/lib//python3.6/site-packages/psi4/__init__.py"", line 82, in <module>; from .driver import endorsed_plugins; File ""/root/miniconda3/envs/psi/lib//python3.6/site-packages/psi4/driver/endorsed_plugins.py"", line 33, in <module>; import v2rdm_casscf; File ""/root/miniconda3/envs/psi/lib//python3.6/site-packages/v2rdm_casscf/__init__.py"", line 45, in <module>; psi4.core.plugin_load(sofile); RuntimeError:; Fatal Error: load_plugin: Cannot open library: core.so: cannot open shared object file: No such file or directory; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 52; The most recent 5 function calls were:. forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source; libgdma.so 00007F0370F460DC for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F03763F2890 Unknown Unknown Unknown; ld-2.27.so 00007F0376616A31 Unknown Unknown Unknown; libc-2.27.so 00007F03761472DF _dl_catch_excepti Unknown Unknown; libc-2.27.so 00007F037614736F _dl_catch_error Unknown Unknown; libdl-2.27.so 00007F0375DD1735 Unknown Unknown Unknown; libdl-2.27.so 00007F0375DD10B3 dlclose Unknown Unknown; core.cpython-36m- 00007F0371E280E7 Unknown Unknown Unknown; core.cpython-36m- 00007F037202C9B2 Unknown Unknown Unknown; core.cpython-36m- 00007F03720539F6 Unknown Unknown Unknown; core.cpython-36m- 00007F0371AFD0D6 Unknown Unknown Unknown; python3.6 00007F03769C4B36 PyCFunction_Call Unknown Unknown; python3.6 00007F03769C1A5E PyObject_Call Unknown Unknown; python3.6 00007F0376AC1834 Unknown Unknown Unknown; python3.6 00007F0376ABF37F Py_FinalizeEx Unknown Unknown; python3.6 00007F0376AC957E Py_Main Unknown Unknown; python3.6 00007F037699",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1775:1081,Rout,Routine,1081,https://psicode.org,https://github.com/psi4/psi4/issues/1775,1,['Rout'],['Routine']
Integrability," reconstruction every iteration. The VV10 gradient is on hold until I build a new Grid that uses only atom-centered blocks rather than blocks that possibly contain functions from multiple centers. This is due to the fact that the VV10 nuclear gradient has a component which requires a gradient with respect to centers and not just with respect to the density as there are explicit `1/r` dependance in the VV10 energy. ## Todos; - [x] Cache collocation matrices to remove DFT bottleneck for small molecules.; - [x] Figure out how many blocks to store based on available memory.; - [ ] Implement VV10 gradients; - [x] Orbital VV10 gradient piece implemented; - [ ] Nuclear VV10 gradient piece implemented; - [ ] A DFT Grid that uses only Atom centered blocks. ## Questions; - [ ] Anyone have thoughts on how to figure out how much memory JK and grid caching should receive?. Timing for a small molecule without a cache using TPSS (a MGGA):; ```; | UV: Form V : 22.583u 1.117s 13.702w 15 calls; | | Properties : 12.333u 0.883s 7.756w 10530 calls; | | Functional : 5.617u 0.033s 3.217w 10530 calls; | | V_xc : 4.400u 0.117s 2.567w 10530 calls; ```. With a cache:; ```; | UV: Form V : 13.750u 0.967s 8.316w 15 calls; | | Properties : 4.083u 0.783s 2.422w 10530 calls; | | Functional : 4.950u 0.000s 3.186w 10530 calls; | | V_xc : 4.383u 0.100s 2.564w 10530 calls; ```. Note DFT V matrix takes a good portion of JK time up to ~2k basis functions with our DF code, though this depends on the density of the grid. Cache sizes:. Grid (99, 302); ```; LDA - 6MB/atom; GGA - 24MB/atom; MGGA - 60MB/atom; ```. Grid (120, 590); ```; LDA - 16MB/atom; GGA - 48MB/atom; MGGA - 160MB/atom; ```. A cache of every block point seems to make the computation 40-80% faster. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1233:1575,depend,depends,1575,https://psicode.org,https://github.com/psi4/psi4/pull/1233,1,['depend'],['depends']
Integrability," test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. - [x] Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - [x] A Logging file has been introduced. All its contents should be considered experimental and subject to change.; - [x] Dipole derivatives through finite difference of dipoles added, so IR intensities available; - [x] The dummy wavefunctions returned from wrappers always had some questionable properties (e.g., single method for mixed method, largeset HF basis for cbs wavefunction) can be even less realistic (e.g., always def2-svp basis for cbs).; - [x] n-body qcvars renamed (grace period applies); ```; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:5739,wrap,wrappers,5739,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['wrap'],['wrappers']
Integrability," the third column, the parser fails. This is because `psi4/driver/qcdb/libmintsbasissetparser.py` limits the number of replacements of ""D"" with ""e"" to two per line. Is there a particular reason for this limit? Otherwise I'm happy to submit a PR fixing this. Fails:; ```; molecule mol {; N 0.0 0.0 0.0; N 0.0 0.0 1.0; 0 1; }. basis {; assign genbas; [genbas]; cartesian. ****; N 0; S 6 1.00; 0.4173511460D+04 0.1834772160D-02; 0.6274579110D+03 0.1399462700D-01; 0.1429020930D+03 0.6858655181D-01; 0.4023432930D+02 0.2322408730D+00; 0.1282021290D+02 0.4690699481D+00; 0.4390437010D+01 0.3604551991D+00; SP 3 1.00; 0.1162636186D+02 -0.1149611817D+00 0.6757974388D-01; 0.2716279807D+01 -0.1691174786D+00 0.3239072959D+00; 0.7722183966D+00 0.1145851947D+01 0.7408951398D+00; SP 1 1.00; 0.2120314975D+00 0.1000000000D+01 0.1000000000D+01; ****. }; e, wfn = energy('scf', return_wfn=True); ```; with message:; ```; Traceback (most recent call last):; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Use",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1996:1069,message,message,1069,https://psicode.org,https://github.com/psi4/psi4/issues/1996,1,['message'],['message']
Integrability," to lose. The Jensen pc basis sets [1-7] are analogous to the Dunning cc basis sets and may be used in their place. They were designed to converge monotonically to the HF basis set limit, and have been shown to do so faster than the cc basis sets for molecular and spectroscopic properties. [8]. Confusingly, the name pc-n actually refers to an n+1-zeta basis set, that is pc-2 is a triple-zeta basis set. aug-pc-n includes diffuse functions. pcseg-n is a segmented version of the pc-n basis sets, thus more computationally expensive. [9]. pcSseg-n is an even larger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also confirm that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/475:1561,wrap,wrapper,1561,https://psicode.org,https://github.com/psi4/psi4/pull/475,1,['wrap'],['wrapper']
Integrability," was at http://www.psicode.org/psi4manual/master/basissets.html#sec-basisuserdefined. Step 2 is where things fall over. First of all, the correct syntax seems to be ; assign df_basis_scf/mp2 <aux basis>; There seems to be an error on the wiki page shown above. . This syntax works as it allows me to define a specific auxiliary basis for *all* atoms. If I wish to define a specific aux basis for a particular atom (as needs to be done when using mid-bonds) then the command should be; assign Rn df_basis_scf mb-set-ri; This fails in inputparser.py with the following error:. Traceback (most recent call last):; File ""/home/alston/Psi4/psi4conda/share/psi4/python/inputparser.py"", line 734, in process_input; temp = re.sub(basis_block, process_basis_block, temp); File ""/home/alston/Psi4/psi4conda/lib/python2.7/re.py"", line 155, in sub; return _compile(pattern, flags).sub(repl, string, count); File ""/home/alston/Psi4/psi4conda/share/psi4/python/inputparser.py"", line 357, in process_basis_block; raise TestComparisonError(message); p4util.exceptions.TestComparisonError: Conflicting basis set specification: assign lines present but shells have no [basname] label. It seems like the line ""assign Rn df_basis_scf mb-set-ri"" cannot be correctly parsed by inputparser.py. It seems to think this line is part of the basis set specification. . The complete Psi4 command file for this calculation is:; [Ar2_input.txt](https://github.com/psi4/psi4/files/787318/Ar2_input.txt). And the two basis set files are here:; [mb-set.txt](https://github.com/psi4/psi4/files/787319/mb-set.txt); [mb-set-ri.txt](https://github.com/psi4/psi4/files/787320/mb-set-ri.txt). I can get this to work by including the aux basis for ""Rn"" in one of the fitting basis files that Psi4 would normally read. But this is not ideal and it would be great to be able to specify the fitting basis in the input file using the ''assign'' command. How can this be fixed?. Additionally, the information on the wiki dealing with user-defined",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/626:1934,message,message,1934,https://psicode.org,https://github.com/psi4/psi4/issues/626,1,['message'],['message']
Integrability," would love to get `conda` support working on our end.; - [x] Tests and examples; - [x] Test install process; - [x] Documentation. ## Questions; - [x] How to best branch between the builtin module and adcc? The two implementations share some features, but use different approaches to solve ADC, which can in some cases lead to differing results (related to #1033 ); - [x] How to best direct options and configurables from Psi4 and adcc? The current solution I see is to add basically everything to the big `read_options.cc`, which is pretty inflexible and could lead to a lot of duplicated information being necessary. Is there some better way to do this?; - [x] What to do with the calculation results? Right now only the MP2 ground state energy is returned to the python world in ADC calculations of Ps4 if I understand this right. Our [ExcitedStates](https://adc-connect.org/reference.html#adcc.ExcitedStates) object, however, is capable of returning more results, most importantly oscillators strengths, or the complete excitation vector. I tried to understand what was done in the eom-cc case and as far as I can judge, the `CCEnergyWavefunction` seems at least related. In principle it should be possible to do something similar for ADC inside the Psi4 code base. Another option is also to just blindly reduce the object we produce in `adcc`, which of course could be considered leaking out interface details from adcc into Psi4.; - Are the tests copied to samples automatically?. ## Checklist; - [x] Tests added for any new features; - [x] ADC(1); - [x] ADC(2); - [x] ADC(2)-x; - [x] ADC(3); - [x] CVS-ADC(1); - [x] CVS-ADC(2); - [x] CVS-ADC(2)-x; - [x] CVS-ADC(3); - [x] Frozen core variant; - [x] Frozen virtual variant; - [x] singlet and triplet states; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. Thanks in advance for your help :smile:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744:2720,interface,interface,2720,https://psicode.org,https://github.com/psi4/psi4/pull/1744,1,['interface'],['interface']
Integrability,# Description; Fixes warning message described on slack by iwatobipen:; ```; /home/user/anaconda3/envs/chemo37/lib/python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py:854: ResourceWarning: unclosed file <_io.TextIOWrapper name='/home/user/anaconda3/envs/chemo37/share/psi4/basis/aug-cc-pvdz.gbs' mode='r' encoding='UTF-8'>; names[index] = parser.load_file(fullfilename); ```; as suggested by @loriab . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1687:29,message,message,29,https://psicode.org,https://github.com/psi4/psi4/pull/1687,1,['message'],['message']
Integrability,"# Description; Substantial changes to the Psi4 DFT infrastructure to add several hundred new DFT functional forms. In addition, adds the SAPT(DFT) and EP2 methods. Several major performance enhancements are included as well as well. This is also one of the primary patches for the Psi4 1.2 release. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. This functionality supports non-totally symmetric tensors.; - [x] The DFT V Potential object now has Hessian-Vector functionality.; - [x] Added many C++ calls to the Python interface.; - [x] Reworked the building of superfunctionals. Note that the coefficients set when building a functional are no longer modified by exact exchange or MP2 correlation factors.; - [x] DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - [x] Added generalized solvers in `p4util/solvers.py`. These include DIIS, CG, BiCGSTAB, and Davidson.; - [x] New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698:681,interface,interface,681,https://psicode.org,https://github.com/psi4/psi4/pull/698,1,['interface'],['interface']
Integrability,"## DESCRIPTION; Using `DF_Helper`'s density fitting technology, both integral and exchange matrix computations can be sped up for in-core investigations. I have created a `JK` derived class, `symm_JK`, which wraps the technology of `DF_Helper` and enables its use for J/K building in Psi4. ## RESULTS; Here are some timing results for entire SCF procedures across various systems, using two different architectures. Notice that relative speedup between `symm_JK` and `DFJK` improves for non-uniform memory access (NUMA) architectures. ![april research update](https://user-images.githubusercontent.com/19575820/38739410-de32a49c-3f02-11e8-9512-c4edc165f259.png). ![april research update-1](https://user-images.githubusercontent.com/19575820/38739454-f5f0a6e2-3f02-11e8-9196-cdcd97cdcd34.png). ## TODO; The new JK building object, `symm_JK`, will be faster than DFJK for in-core implementations. However, it will be slower for disk-based implementations. ; - [x] Add check to figure out which object to use for J/K building. (in-core vs disk)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961:208,wrap,wraps,208,https://psicode.org,https://github.com/psi4/psi4/pull/961,1,['wrap'],['wraps']
Integrability,"## Description. A series of updates to the Psi4 driver. Very large PR's is not my favorite thing to do on git, but unfortunately driver changes are complex and strongly tied together. Putting this up now as a way to help track everything this fixes.; ## Todos; - [x] General cleanup and reorganization of the driver.; - [x] Reorganized procedures into a single folder.; - [x] Reworking CBS and N-Body wrappers for easier use.; - [x] Above changes broke some of pywrap, need to get these fixed.; - [x] More canonical python raise error printing.; - [x] Reorganizes OEProp to use `D_subset_helper` instead of `Da_subset` to avoid pulling density matrices from multiple sources. Closes #193; - [x] Reworks how OEProp is called for SCF, DFT, DF-MP2, CI, and MCSCF. The full OEProp suite works for these now through the properties driver.; - [x] New test case for the above OEProp (scf_properties, mp2_properties, ci_properties), closes #356.; - [x] Freeze COM/ORIENT for FREEZE COORDINATE option and closes #179 ; ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/365:401,wrap,wrappers,401,https://psicode.org,https://github.com/psi4/psi4/pull/365,1,['wrap'],['wrappers']
Integrability,"## Description. Add Jensen [aug-]pc[[s][seg]-N basis sets; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Add the segmented Jensen basis sets; - [x] Fix up some default auxilliary fns for them; - [x] Need to adapt CBS wrapper [here](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/python/driver_cbs.py#L59-L73); ## Questions; - [ ] @jvansan should look it over, particularly the default auxiliary basis sets I chose; ## Status; - [x] Ready to go; ## Other good stuff provided by @jvansan that we don't want to lose. The Jensen pc basis sets [1-7] are analogous to the Dunning cc basis sets and may be used in their place. They were designed to converge monotonically to the HF basis set limit, and have been shown to do so faster than the cc basis sets for molecular and spectroscopic properties. [8]. Confusingly, the name pc-n actually refers to an n+1-zeta basis set, that is pc-2 is a triple-zeta basis set. aug-pc-n includes diffuse functions. pcseg-n is a segmented version of the pc-n basis sets, thus more computationally expensive. [9]. pcSseg-n is an even larger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also confirm that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/475:260,wrap,wrapper,260,https://psicode.org,https://github.com/psi4/psi4/pull/475,1,['wrap'],['wrapper']
Integrability,"## Description. Adds the ability to use delta corrections for the CBS Wrapper's string-based input. For example, the following now works:. ``` python; energy('MP2/cc-pV[TQ]Z + D:CCSD(T)/cc-pVDZ'); gradient('MP2/cc-pV[TQ]Z + D:MP3/cc-pV[DT]Z'); opt('CISD/cc-pV[TQ]Z + D:CISDTQ/cc-pVDZ'); etc; ```. Note that only a single delta is currently supported. We can consider multiple delta's in a string representation if there is an obvious way to do it. Ultimately, there is some notion that the string based parser should be fairly bare bones due to the relative inflexibility of the input. If required, the user can always use the `cbs` function directly for exactly control over the computation.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/374:70,Wrap,Wrapper,70,https://psicode.org,https://github.com/psi4/psi4/pull/374,1,['Wrap'],['Wrapper']
Integrability,"## Description. Attaches `to_array` and `from_array` NumPy interfaces to the `Matrix` and `Vector` class and includes irrep support. ; ## Questions; - [x] NumPy does not handle ""irreps"" well as all internal dimensions of nd-array's must have the same shape. Best solution that I have come up with is to convert a Psi4 object with irreps to a list of NumPy arrays. Zero dimensional irreps are support by empty NumPy arrays so that circular converting works. This does make things somewhat awkward as your return datatype depends on the irreps of the Psi4 object. The other option is to remove the irreps from the Psi4 object so that all Psi4 Matrices are dense 2D and all Vectors are dense 1D. Wastes some space, but anything handled by NumPy should be small anyways.; - [x] Adds `to_array` and `from_array` to `Matrix` and `Vector` objects.; - [x] Adds `to_list` and `from_list` to `Dimension` objects.; - [x] Looks like CI Natural orbitals from user densities was accidentally here as well.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/373:59,interface,interfaces,59,https://psicode.org,https://github.com/psi4/psi4/pull/373,2,"['depend', 'interface']","['depends', 'interfaces']"
Integrability,"## Description. Converts Psi4 from a binary that calls Python to a Python module that calls a shared object as discussed in #468. ; ## Features; - ""psi4"" is now a python module, the entire driver and suite of C++ functions is now behind this interface.; - The ""bin/psi4"" binary is now a python script that parses Psithon input to support the current Psi4 interface.; - For any conventional python script the following now works: `import psi4`.; - C++ no longer calls python, all python objects must be passed in from the driver.; - BasisSet objects are the primary objects effected here. The Wavefunction now stores BasisSets constructed by python and can be accessed by `wfn->get_basis(*basis*)`.; - The C++ side of psi4 is now compiled to the a shared library with python access named ""core.so"".; ## Remaining issues; - There are several outstanding issues, a list of which can be found [here](https://github.com/dgasmith/psi4/projects/1). All issues may not be cleaned up by the time this PR goes through, current full suite coverage of 99%.; - HF: Broken Symmetry guess is currently broken, apparently no test case for this.; - BasisSet is not final with regard to construct_combined and handling of user defined basis sets.; - SAD does not work due to basis set creation.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/481:242,interface,interface,242,https://psicode.org,https://github.com/psi4/psi4/pull/481,2,['interface'],['interface']
Integrability,## Description. Extends DDX interface to support SCF response and TDSCF. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [X] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2967:28,interface,interface,28,https://psicode.org,https://github.com/psi4/psi4/pull/2967,1,['interface'],['interface']
Integrability,"## Description. Finally, some modernization of the PK JK object. I coded everything trying to maximize code reuse and using polymorphism where it would be good, but if you have any suggestions on the code organization please let me know.; Traditionally, PK denotes the integral supermatrices stored on disk. Here I use it more generally for the class of algorithm storing integrals somewhere instead of recomputing them.; ## Caution:. Some older commits contain additional attempts at algorithms that were deleted since (for being inefficient). You may want to review the most recent commits only.; ## Todos. Notable points that this PR has accomplished:; - [x] In-core PK algorithm when enough memory is available; - [x] ""Reorder"" PK algorithm: the PK supermatrices are directly written on file without any intermediates by reordering the integral computation (thanks to @dgasmith for discussion), good for large to medium memory; - [x] ""Yoshimine"" PK algorithm: pre-sorts integrals on disk, similar to more traditional algorithm. Best for low memory, otherwise quite slow.; - [x] Automatic selection of the algorithm depending on available memory; - [x] wK long-range integrals are also handled; - [x] Non-symmetric density matrices are handled ; ## Questions; - [x] I'd like this pull request to stay unmerged for a few days so everyone who wants to have a look at it has some time to do so. (@andysim, @jturney ?); ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/387:1119,depend,depending,1119,https://psicode.org,https://github.com/psi4/psi4/pull/387,1,['depend'],['depending']
Integrability,## Description. If Matrix::gemm was called with matrices of different point group size the routine did not fail and returned erroneous results.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Checks the nirrep variable on each matrix of the gemm and throws if they are different.; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/276:91,rout,routine,91,https://psicode.org,https://github.com/psi4/psi4/pull/276,1,['rout'],['routine']
Integrability,"## Description. If a DFT functional gives `NaN` when we attempt to numerically integrate it, throw the functional under the bus immediately instead of leaving my ADIIS code to take the blame, i.e., give a better error message. Closes #2609. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2611:79,integrat,integrate,79,https://psicode.org,https://github.com/psi4/psi4/pull/2611,2,"['integrat', 'message']","['integrate', 'message']"
Integrability,"## Description. Modernization, efficiency, and flexibility improvements for the CI code.; ## Todos; - [x] RSP Diagonalization now writes out CIVectors for OPDM, TPDM, etc uses. Fixes #83.; - [x] Removes several deprecated features such as exporting of CI Vectors in an old format.; - [x] The Numpy interface has been updated. Now uses a single `std::vector` instead of a `double *`. This change has been propagated throughout the entire code.; - [x] More CI routines have been exported to the python layer allowing the creation of complex python-based CI methods.; - [x] Adds a new Matrix routine that removes irreps.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/372:298,interface,interface,298,https://psicode.org,https://github.com/psi4/psi4/pull/372,3,"['interface', 'rout']","['interface', 'routine', 'routines']"
Integrability,"## Description. Reduces the minimum overlap between atoms to fix issue #195. Reductions to this tolerance in the future would likely have to be for ghost atoms only. A downside to this is linear depends will pop up much more often when two atoms are this close together, especially in highly symmetric molecules.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/283:195,depend,depends,195,https://psicode.org,https://github.com/psi4/psi4/pull/283,1,['depend'],['depends']
Integrability,## Description. Removes `sointegral_twobody.h`'s dependence on `mpi_wrapper.h` and `local.h`. Also removes some MADNESS stuff that was missed originally.; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/369:49,depend,dependence,49,https://psicode.org,https://github.com/psi4/psi4/pull/369,1,['depend'],['dependence']
Integrability,"## Description. This PR fixes thread synchronization in AIOHandler after KTB. The std::thread in C++11 must not be joinable when it is destroyed, or it calls terminate(). Before destroying every thread created in AIOHandler, it is thus joined. In addition, a thread must not be joined twice, thus the synchronization step now checks whether the thread is joinable before joining. Fixes #596 and should definitely fix errors in tests cubeprop, sapt2, sapt3 and sapt6 that appeared in KTB and for which @loriab had a workaround. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixed thread management in AIOHandler. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/609:37,synchroniz,synchronization,37,https://psicode.org,https://github.com/psi4/psi4/pull/609,2,['synchroniz'],['synchronization']
Integrability,"## Description. This is the second PR of the M-D series, this time replacing the OS code for arbitrary-order multipole integrals.; Some notable points:. - I added a new routine `ao_multipoles` to the Py API to conveniently call those integrals.; - There's also a new `multipole_grad` which computes first derivatives of arbitrary-order multipole integrals (new feature!).; - The dipole derivative code in `DipoleInt` (which uses l2 for dipole ints, used OS86 for derivs) is removed.; - To keep the API stable, the `dipole_grad` is hard-wired to `multipole_grad` with the appropriate arguments.; - ➡️ more features, less code 💡. ## ToDos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement arbitrary-order multipole integrals using M-D; - [x] first derivatives; - [x] finite-difference tests; - [x] more equation numbers; - [x] small benchmark against OS86 implementation. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for **SQUASH-merge** (wait for @andysim and @loriab approval)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2496:169,rout,routine,169,https://psicode.org,https://github.com/psi4/psi4/pull/2496,1,['rout'],['routine']
Integrability,"## Description. housekeeping; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] enables plugins to access wfn python only (w/o `psi4.wavefunction()`), if they're not needing it c-side; - [x] removes pyparsing.py that was pcmsolver legacy and cleans up a few wrappers refs; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/377:297,wrap,wrappers,297,https://psicode.org,https://github.com/psi4/psi4/pull/377,1,['wrap'],['wrappers']
Integrability,"## Description; #2476 and #2594 indicate a major problem in Psi's SCF code: the simplistic formula `nalphapi = doccpi + soccpi` and `nbetapi = doccpi` is incapable of describing references where there are more beta than alpha orbitals of a given irrep. This occurs in MOM (where we instead use ugly hacks) and in UHF (where we crash). Furthermore, storing all of these irrep quantities is redundant. This PR remedies the situation by only storing `nalphapi` and `nbetapi`. `doccpi` and `soccpi` can be computed from these when needed. The Py-side API is unchanged `doccpi(), soccpi()`, while the C-side API changes from `doccpi_, soccpi_` to `doccpi(), soccpi()`. While we are doing some extra work to compute docc and socc every time they're needed, the computational cost is negligible in comparison to Fock diagonalizations, integral transforms, and tensor contractions. . To prevent scope creep, this PR aims solely to change the wavefunction. **This is a major undertaking and should not be done lightly.** A subsequent PR will fix the linked issues (if not fixed by this PR) and add them as test cases once the fix is confirmed. Obligatory @susilehtola ping. ## Todos; - [x] DOCC and SOCC are now computed rather than stored; - [x] MOM simplified; - [x] Lots of docc/socc replaced with alphapi/betapi where more appropriate; - [x] More auto; - [x] More dimension, fewer raw arrays . ## Checklist; - [x] Passes ctest and pytest (all, except addons). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2619:860,contract,contractions,860,https://psicode.org,https://github.com/psi4/psi4/pull/2619,1,['contract'],['contractions']
Integrability,"## Description; **Currently a work-in-progress**. **Currently requires intel compiler**. Implements the simint two-electron integral library into Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] Implement ENABLE_SIMINT option; - [X] Download & build via ExternalProject_Add; - [ ] Download & use precompiled library; - [X] Simint is being used rather than libint; - [ ] Batching interface to interface classes in libmints (partially done); - [ ] Use batching in JK objects (partially done); - [ ] Fix some GCC issues in simint; - [ ] Port new batching interface to libint & erd; - [ ] Higher AM, or split between simint and erd; - [ ] Derivatives (WIP in simint...). * **User-Facing for Release Notes**; - [ ] Hmmm. ## Questions; - [ ] Where to put tarballs (that is more permanent for psi4). Git is probably not a good idea. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/533:451,interface,interface,451,https://psicode.org,https://github.com/psi4/psi4/pull/533,3,['interface'],['interface']
Integrability,"## Description; **What?** This PR creates the `IrrepedVector` class template. The `Vector` and `IntVector` classes now inherit from this, adding on methods that only make sense for that particular template instance. **Why?** During a refactor of the MOM code, I had to use `Vector` and `IntVector` features heavily and found this synchronization of the classes necessary to keep my sanity. **Who cares?** Obligatory pings to @hokru (who may want to create `FloatVector` for faster `dfocc` operations) and @lothian (who may want to create `ComplexVector` for magnetic spectroscopies). No reviews required. **How do I review this?** The changes to `export_mints.cc`, `vector.h`, `vector.cc`, `intvector.cc`, and `test_vector.py` are the heart of this PR. The rest are either compatibility changes or general code cleanup. Be warned that `iota` and the `sort` functions are needed for my upcoming MOM changes and are currently unused, and I've changed some functions to not use pointers. ## Todos; - [x] Created `IrrepedVector<T>`; - [x] `Vector` and `IntVector` inherit from `IrrepedVector<T>`; - [x] `Vector` and `IntVector` now have identical code logic; - [x] `iota` and `sort` methods are added; - [x] `IntVector` now has more functionality; - [x] Added bounds checking to several `IrrepedVector<T>` methods.; - [x] Increased test coverage of `Vector`; - [x] Added test coverage of `IntVector`; - [x] Silenced compiler warning about missing override; - [x] Removed several pointers from parameter types; - [x] Removed several pointers from return types; - [x] Changed convention from ""irreped"" to ""irrepped"". ## Checklist; - [x] Full ctest passed (before some trivial edits); - [x] `test_vector.py` passed . ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**; Jet approval **required** before merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2628:330,synchroniz,synchronization,330,https://psicode.org,https://github.com/psi4/psi4/pull/2628,1,['synchroniz'],['synchronization']
Integrability,## Description; - Update to adcc 0.15.0 and adapt interface (plural forms of keys have been deprecated).; - Add PE-ADC test as adcc now automatically detects PE ground states and includes appropriate corrections. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1914:50,interface,interface,50,https://psicode.org,https://github.com/psi4/psi4/pull/1914,1,['interface'],['interface']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->. - [x] fix Eco (W) GHA by recognizing that updating the setup-miniconda version changed the environment path, so the find-the-iomp5-lib cmake cmd needed to change, too, for sapt.cc to compile.; - [x] wow, fixing Eco (M) GHA was not what I expected. To recap, without psi4 code changing or the binaries of any of our QC dependencies changing, Mac builds (Intel or Silicon) started issuing ""Illegal Instruction"" on Hartree--Fock water. :-( This affected any fresh conda env; for instance updating a ""working"" python 3.12.3 env to 3.12.4 was accompanied by many other package updates and led to a ""illegal instruction"" env upon recompiling psi. I know c-f has been updating how they handle the c stdlib (https://github.com/conda-forge/conda-forge.github.io/issues/2102). New environments apparently hit the new fundamental libraries, and those insert a breakpoint if you try to access out of bounds. So fixed the bounds error. :-). ```; (lldb) settings set -- target.run-args ""stage/bin/psi4"" ""../tests/tu1-h2o-energy/input.dat""; (lldb) run; Process 22217 launched: '/Users/loriab/linux/miniconda-silicon/envs/p4dev312cf_clone/bin/python' (arm64); Process 22217 stopped; * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BREAKPOINT (code=1, subcode=0x11819b7e4); frame #0: 0x000000011819b7e4 core.cpython-312-darwin.so`std::__1::vector<double, std::__1::allocator<double> >::operator[][abi:fe180100](this=0x00000001013e5378 size=27, __n=27) at vector:1393:3; 1390	template <class _Tp, class _Allocator>; 1391	_LIBCPP_CONSTEXPR_SINCE_CXX20 inline _LIBCPP_HIDE_FROM_ABI typename vector<_Tp, _Allocator>::reference; 1392	vector<_Tp, _Allocator>::operator[](size_type __n) _NOEXCEP",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3194:632,depend,dependencies,632,https://psicode.org,https://github.com/psi4/psi4/pull/3194,1,['depend'],['dependencies']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Some setups were using a BLAS that doesn't support the extension AXPBY, so #2887 caused runtime can't-find-symbol errors. Most notably, this occurred for Mac users linking to Accelerate. This bypasses the trouble by rerouting to dscal+daxpy; - [x] clarifies who's getting scaled in the export docs.; - Note that the CI error was due to ongoing changes in QCArchive `next` branch. I've pinned the dep back a release so that psi4's interface to it can be fixed later. ## Questions; - [ ] Can someone confirm this works with the Accelerate setup? Below is a quick test.; ```; import psi4; import numpy as np. vecX = np.array([1., 1., 1.]); pvecX = psi4.core.Vector.from_array(vecX); print(pvecX.np) # 1. vecY = np.array([5., 5., 5.]); pvecY = psi4.core.Vector.from_array(vecY); print(pvecY.np) # 5. pvecX2 = pvecX.clone(); pvecX2.axpy(2.0, pvecY); print(pvecX2.np) # 11. pvecX2 = pvecX.clone(); pvecX2.axpby(2.0, 1.0, pvecY); print(pvecX2.np) # 11. pvecX2 = pvecX.clone(); pvecX2.axpby(2.0, 3.0, pvecY); print(pvecX2.np) # 13; ```. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2895:750,interface,interface,750,https://psicode.org,https://github.com/psi4/psi4/pull/2895,1,['interface'],['interface']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; - [x] Psi doesn't use ambit directly so never has required a version. Now that it's had its python interface updated (kill the boost!), most uses in the presence of Psi4 will need the new version, so let's not let lingering old versions pass.; - [x] The ecosystem GHA seems to have settled in nicely to testing addons, so let's remove that responsibility from the Azure CI lanes.; - leaving dftd3 and gcp since they're fast, easy, and important; - now addons tested with less compiler variety on Linux, but I don't think that's too big a problem. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2546:189,interface,interface,189,https://psicode.org,https://github.com/psi4/psi4/pull/2546,1,['interface'],['interface']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; - [x] Something about how CMake detects NumPy during FindPython is different between NumPy 1.22 and 1.23; only on Windows. No apparent changes in CMake FindPython. No apparent changes in conda NumPy recipe. All header files in the same places in a Windows c-f 1.22 and 1.23 NumPy distribution. Linux builds fine with a c-f NumPy 1.23. I don't know what's the real change, so we'll tell CMake where to look in the Azure recipe and pass the hint on to psi4/CM for the second `find_package(Python ...)`.; - [x] My other theory for solving the Azure problem was that my patched `anaconda-client` was behind the times. That wasn't the problem, but it's updated to v1.10.0 anyways.; - [x] Pinned qcelemental and qcengine in Windows recipe; * There's upcoming changes to those packages such that all of psi4 should be pinned and then advanced with the changes. This does that for the Windows recipe.; * fixes #2614 where Windows conda package had _no_ qcel pinning, so depending on channel order, sometimes took a really old qcel and pydantic. after this, channel order shouldn't matter. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2624:1052,depend,depending,1052,https://psicode.org,https://github.com/psi4/psi4/pull/2624,1,['depend'],['depending']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Collect enough extra docstrings and tweak enough references to functions so that all the links in the docs resolve.; - [x] Ended up needing mild to moderate docs renovation through whole QCA stack; - [x] Now can turn on Sphinx warnings-to-errors and nitpicky so that docs remain healthy; - [x] Added new doc extension dependency, https://github.com/mansenfranzen/autodoc_pydantic, so that Pydantic models (as introduced in #2575) now get superior, rather than inferior, autodoc compared to classes.; - [x] Add in a few more `__all__`s to driver files. ## Checklist; - ~Tests added for any new features~; - [x] Full tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2597:505,depend,dependency,505,https://psicode.org,https://github.com/psi4/psi4/pull/2597,1,['depend'],['dependency']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Nowadays, ctest (quick) followed by pytest (quick) runs a lot of duplicate tests (unless the latter uses ""quick and api""). Let's not do that. This switches Azure to ctest(smoke) followed by pytest (quick).; - before: ; - W: 1h30m; - L: 41-57m; - after:; - W: 1h5m; - L: 34-38m; - In working on dfocc, I found some stdsuite updates that hadn't been ported from qcng to psi4 and some general improvements.; - [x] better check expected vs intended modules. (can catch if the default compute module for a method+circs changes.); - [x] `test_*_default` in stdsuite changed meaning slightly. now PASSED means get final method answer correctly and XFAIL means known NYI. formerly, inputs that got the final method answer correctly but were not able to supply some submethod (like same-spin mp2 for ccsd) also got the XFAIL result.; - [x] have a mini ref file so can add reference data w/o waiting for a new qcengine release; - [x] regex and human-directed error messages to simplify and consolidate NYI methods testing. ## Checklist; - [x] Tests added for any new features; - [x] full stdsuite runs. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2632:1142,message,messages,1142,https://psicode.org,https://github.com/psi4/psi4/pull/2632,1,['message'],['messages']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switch gcp interface to QCEngine; - [x] add dftd4 interface calling QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] more tests -- psiapi, parameters extend func; - [x] add docs; - [x] note min qcng version, prob. v0.19; - [x] this passes cleanly locally but that's with custom engine and dftd4, so several PRs ahead of this one; - [x] allow doi as citations for dft; - [x] note that for `Mol.run_dftd4`, func overrides parameters in keeping with dftd4 API behavior, whereas in dftd3, parameters extend or override func. ## Questions; - [x] @jeffschriber should fisapt grab 2-body disp analysis or total disp analysis; - [x] a couple of the interface updates should be in v1.4 but d4 itself can be in v1.5. so this can get split after upstream settles down. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Aug 2021 Notes; - [x] rebased. the only thing that's left of the original PR checklist is dftd4 itself. gcp and dftd3 updates were pulled in in #2180.; - [x] note that it's not the dftd4 exe that this (that is, qcng) needs; rather, it's the dftd4 pymod that's needed.; - [x] one _can_ use the c-f `dftd4-python` conda package if you know how to set up your env to install both it and psi4 deps. But for linux only, I've prepared a `dftd4` conda package (not in final build form) off `-c psi4/label/dev`. ## Status; - [x] Ready for review; - [x] Ready for merge. EDIT: closes #1710",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2142:198,interface,interface,198,https://psicode.org,https://github.com/psi4/psi4/pull/2142,3,['interface'],['interface']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; - [x] Upstream maintained and developed software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks maintained by Psi4 folks still work and will be maintained until there's a reason not to. All are still run through QCEngine. Psi4 chooses automatically based on what's detected, so no change to input files needed. Package names and locations are a little different -- see table below. package | provides | pre-PR | post-PR; ---- | ---- | ---- | ----; D3; `psi4::dftd3` | `bin/dftd3` | preferred | works; `conda-forge::dftd3-python` | `import dftd3` | nyi | preferred; (dep) `conda-forge::simple-dftd3` | `bin/simple-dftd3` |; D4; `psi4::dftd4` | `bin/dftd4`, `import dftd4` | preferred | works; `conda-forge::dftd4-python` | `import dftd4` | nyi | preferred; (dep) `conda-forge::dftd4` | `bin/dftd4` | ; GCP; `psi4::gcp` | `bin/gcp` | preferred | works; `conda-forge::gcp-correction` | `bin/mctc-gcp` | nyi | preferred. - [x] Capabilities changed slightly between `dftd3` and `s-dftd3`. In particular, the former can also do -D2 and the latter can do 3-body -D3 in the same call as 2-body -D3. All Psi4 calls will continue to do only 2-body -D3 as default (regardless of `dftd3` or `s-dftd3` engine). That is, `-d3` is still an alias to `-d3zero` which is now an alias to a new extension `-d3zero2b`, which can now be given explicitly disallow 3-body as a tweakable parameter (internally, `s9:=0.0`). When `s-dftd3` is the engine, another set of new extensions, e.g., `-d3atm` alias of `-d3zeroatm` turns on 3-body (`s9=1.0`) and allows user tweaks. This latter is the same behavior as -D4, which turns on 3-body by default. If this seems confusing, state what calc you want — e.g., `energy(""b3lyp-d3atm"")` — and Psi4 will figure out if you have the right engine to do the job.; - [x] Previous to QCEngine v0.26.0 (required by this Psi4 PR), t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2791:215,interface,interfaced,215,https://psicode.org,https://github.com/psi4/psi4/pull/2791,1,['interface'],['interfaced']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `samples/` changes are autogenerated -- don't read them; - [x] update docs env to use psi4-path-advisor; - [x] the old versions of `variable`/`set_variable` fns on core and wfn have been warning-and-forwarding since v1.4 . we had a debugging case where that forward was the problem, so it's time to actually disable them. they'll still give upgrade advice but won't run; - [x] allow running a a GRID_ESP or GRID_FIELD property through qcschema. need to pass in grid.dat contents through `atin.extras[""extra_infiles""] = {""grid.dat"": <contents>}` and be sure to `atin.protocols.native_files = ""all""`, then one can retrieve through `atres.native_files[""grid_esp.dat""]` or `""grid_field.dat""` closes #2307 . ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3095:1077,protocol,protocols,1077,https://psicode.org,https://github.com/psi4/psi4/pull/3095,1,['protocol'],['protocols']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. The purpose of this PR is the following:; - Fix #2871 . The bug observed when optimizing a molecule containing `Cl` atom using `geometric` via Psi4. . ## User API & Changelog headlines. - [x] Fixing compatibility with geometric 1.0. ## Dev notes & details. - [x] The atom list in Psi4 is upper-cased while geometric expects a capitalized one. This is not a problem for atom symbols containing a single letter like `H`, `C` etc. but becomes a problem for `Cl`, `Br` etc. ## Questions; - [x] Are there any tests of the Psi4/geometric interface?. ## Checklist; - [x] Tests added for any new features -> not a new feature; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2872:612,interface,interface,612,https://psicode.org,https://github.com/psi4/psi4/pull/2872,1,['interface'],['interface']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. `Molecule::atom_at_position` is supposed to return the index of the atom found in a specified radius of a specified point in 3D space, or -1 if no atom is found in the radius. The current implementation assumes there is never more than one atom within the given radius, and returns the index of the first atom found to be within the tolerance.; This can hypothetically happen in two ways: the atoms are either extremely close, or the tolerance is set to a large value. The new implementation behaves more like one would expect it to behave: under the aforementioned extreme circumstances it throws an exception and informs the user with an error message. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Detect corner case and throw error if encountered; - [x] Update docstrings to better describe implementation. ## Questions; - [x] Apparently, `qcdb.Molecule` has its own independent Python implementation of `atom_at_position`. As is, this PR means that calling `qcdb.Molecule.atom_at_position` and `psi4.core.Molecule.atom_at_position` from a Python program may return different results for the same geometry, if the aforementioned corner case happens.; Not sure what to do about this, at first glance it would be neater if both `qcdb.Molecule.atom_at_position` and `psi4.core.Molecule.atom_at_position` ended up calling the same C++ implementation, but I am not sure how feasible that would be.; Thoughts?. ## Checklist; - [x] No new features; - [x] `ctest -j24` and `make pytest` both passed locally. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465:726,message,message,726,https://psicode.org,https://github.com/psi4/psi4/pull/2465,1,['message'],['message']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; @carolinesargent identified a bug where running FSAPT with an external potential w/o having frozen the orientation with no_com + no_reorient would run but give the wrong answer. :-(. External potentials has long been one of those cases where we required the user to freeze the orientation at molecule creation time so that the potential could be set in the same frame. This couldn't be fixed driver-side because as soon as the `core.Mol` builds w/o freeze directives, it loses the original Cartesian coordinates. (The clone, set_nocom, set_noreorient calls in the driver allow _regular_ sapt to forego user setting by preventing the dimer, monoA, monoB from having different frames.). Happily, in the intervening period, @maxscheurer ran into exactly this problem for polarizable embedding potentials and solved it by tacking a copy of the original Cartesians onto the molecule. So we're applying this to FSAPT also. . I've been getting some segfaults that I think are a quirk of my directory, hence the cc31 testing. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixes bug where FSAPT with an external potential and without no_com/no_reorient set would return wrong answer. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Let's use this route to accommodate aux info in the frame of the Cartesianmol. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2934:1637,rout,route,1637,https://psicode.org,https://github.com/psi4/psi4/pull/2934,1,['rout'],['route']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; A lot of error exits in `libdpd` are implemented with `exit(1)` or equivalent. This makes debugging harder, and results in less informative error messages when a test fails in the CI environment. This PR modernizes all `exit(1)` error exits in `libdpd` into `throw PSIEXCEPTION`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Psi4 now prints more detailed error messages if an error happens in its DPD module. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] All `exit(1)` and `exit(PSI_RETURN_FAILURE)` calls in `libdpd` have been replaced with a `throw PSIEXCEPTION`. ## Checklist; - [x] No new features; - [x] CI tests are failing only due to libint being in flux. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3117:226,message,messages,226,https://psicode.org,https://github.com/psi4/psi4/pull/3117,2,['message'],['messages']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds SAPT0-D and FISAPT-D routines, continuation of #1786. This code only works with the latest QCEngine commit, so it will fail the tests until the next QCEngine release. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Add SAPT0-D and FISAPT0-D, for any -D variant available to HF; - [X] Enable access to pairwise dispersion decomposition from dftd3; - [x] Adapt fsapt.py analysis to use -D dispersion info. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Test fsaptdiff.py. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2081:106,rout,routines,106,https://psicode.org,https://github.com/psi4/psi4/pull/2081,1,['rout'],['routines']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; After the removal of `sem_test` in #2776, the only remaining internal user of `libqt/schmidt_add.cc` is `libqt/david.cc`. That too is destined for removal, if its only user in `dfocc` is removed by #2684. So it looks like `schmidt_add` could be removed in the future, when all of its callers are gone. To keep the promise of not randomly breaking API without fair warning, this PR deprecates the function, setting up its eventual removal. Note that this `schmidt_add` is not the same function as the `schmidt_add` in `cceom` or `detci`, even though the name is the same. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `PSI_API` function `int schmidt_add(double** A, int rows, int cols, double* v)` is deprecated and 1.7 will be the last release with it present. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Deprecation message is added to `schmidt_add` in `libqt`. ## Questions; - [ ] This function was tagged as `PSI_API` in #1077 by @raimis, do we know why it was necessary back then?. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2822:1220,message,message,1220,https://psicode.org,https://github.com/psi4/psi4/pull/2822,1,['message'],['message']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Around the time when the Boost dependency was being removed, some `PRAGMA_WARNING` manipulations were inserted, presumably to reduce warning noise during builds.; The Boost includes have since been removed and these are no longer necessary. `#include <memory>` thankfully does not require such guarding. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] No user visible changes. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Stop unnecessarily guarding `#include <memory>` with `PRAGMA_WARNING_IGNORE_DEPRECATED_DECLARATIONS` . ## Checklist; - [x] No new features; - [ ] CI tests are passing. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3088:111,depend,dependency,111,https://psicode.org,https://github.com/psi4/psi4/pull/3088,1,['depend'],['dependency']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; As discussed in #2997 and #3117, no debugging information is produced in many places in Psi4. I believe this is because of improper calls to `exit()`, which is a remnant of the C history of Psi. #3117 replaces the calls to `exit()` with `throw`s in libdpd. This PR replaces the calls in the rest of Psi4. Sorry for the verbose changes; I ran clang-format on the files since my editor's indentation doesn't match that in Psi4. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Obsoleted calls to `exit()` have been replaced by exceptions, which should better guarantee the passing of error messages to the end user. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Spurious calls to `exit()` have been removed in favor of exceptions, which should better guarantee error messages getting through to the user. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3118:792,message,messages,792,https://psicode.org,https://github.com/psi4/psi4/pull/3118,2,['message'],['messages']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Detci still has a few places where error termination is effected through printf+abort(). This PR replaces the calls to abort() in with `throw PSIEXCEPTION(msg)`. The rest of the codebase has more of this pattern, those are subject to future PRs to keep this one small. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] A few error terminations in the detci module now print a more detailed error information to the console, instead of just the error message in the output file. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Calls to `abort()` in detci are replaced with `throw PSIEXCEPTION(msg)`, where `msg` is the relevant error message taken from the context of the `abort()`. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3168:653,message,message,653,https://psicode.org,https://github.com/psi4/psi4/pull/3168,2,['message'],['message']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; For some poorly understood confluence of reasons, for some users error messages can _sometimes_ get completely lost when Psi4 exits with a `PSIEXCEPTION`, especially when a PSIO error happens.; This can be observed in recent bug reports, see:. - https://github.com/psi4/psi4/issues/2970; - https://forum.psicode.org/t/sapt0-calculation-crashes-pointer-error/2839. In both of these cases the users were only seeing the error message that has been written to `cerr`, but not the string that `PSIEXCEPTION` should have printed. IIRC when I tried to research this quite a while ago, I have found this may be a bug in some versions of libstdc++. This PR adds a simple workaround: the exception message is also printed to `cerr` in `psio_error`. The only side effect, is that some users, who are currently not affected by the lost message problem, may start getting the same error message twice when a PSIO error happens. Spammy error exits are not great, but PSIO errors are not supposed to happen too often, and when they do loosing the error message is more annoying than having it be duplicated. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] PSIO error messages are now also printed to `cerr`, fixing an issue where (under some circumstances) large parts of the error message would never reach the user, . ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] The same error message that gets passed to `PSIEXCEPTION` is now printed to `cerr` before throwing in `psio_error`. ## Checklist; - [x] There is no easy way to add tests for ""are error messages getting delivered or not?""; - [x] Tests run by the CI ar",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2997:151,message,messages,151,https://psicode.org,https://github.com/psi4/psi4/pull/2997,5,['message'],"['message', 'messages']"
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; GT will trial this before it's ready for merging, but it's good to get eyes on it and to not lose track of the changes. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Users of QCFractal `next` can now customize protocols, tags, priorities, and owner_groups. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Allow psi4 to turn all the knobs qcportal allows: https://github.com/MolSSI/QCFractal/blob/next/qcportal/qcportal/client.py#L903-L915. ## Questions; - [x] @bennybp look ok? Ben has looked this over and approved. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3013:417,protocol,protocols,417,https://psicode.org,https://github.com/psi4/psi4/pull/3013,1,['protocol'],['protocols']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; I have added an option to compute the necessary GRAC shifts for SAPT(DFT) automatically. I added a little extra logic to ""try harder"" at converging cations to hopefully fail less often if this option is specified. These changes will enable more users to call SAPT(DFT) more routinely in their workflows without having to consider acquiring GRAC shifts externally through their own logic or tabulated sources. . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Automatically computes SAPT(DFT) GRAC shifts for monomer A and/or B; - [ ] Logic for trying extra options with level shifts to attempt to converge more cations in approximating the ionization potential. ## Questions; - [ ] Perhaps I should add a more challenging pytest in which the first cation SCF convergence attempt fails but the iterative options approach succeeds. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3232:354,rout,routinely,354,https://psicode.org,https://github.com/psi4/psi4/pull/3232,1,['rout'],['routinely']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; I was looking through the source code to understand what the `DFT_REMOVE_DISTANT_POINTS` keyword does, and realized I could not understand what the `remove_distant_points` function was doing. I also suspect that that code was partly wrong. This PR cleans up that function so that it now does what it should. However, it is also evident that the logic of this function is not optimal. Instead of checking if any nucleus is within the maximal spatial extent of the basis set, one should check if any nucleus is within the extent of that nucleus' basis functions. This is just a drive-by commit, as I don't think it's worthwhile to spend time on Psi4's quadrature code, since [IntegratorXX](https://github.com/wavefunction91/IntegratorXX/) and [GauXC](https://github.com/wavefunction91/GauXC) offer a reusable solution that could be used also in Psi4 with significant negative LOCs. . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3012:754,Integrat,IntegratorXX,754,https://psicode.org,https://github.com/psi4/psi4/pull/3012,2,['Integrat'],['IntegratorXX']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; It is done. The beast lays slain.; This PR replaces the last calls of the `sq_rsp` function in the `dfoccwave::Tensor2d::diagonalize` overloads with the new DSYEV wrappers, and removes the function and its file. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Deprecated `PSI_API` function `void sq_rsp(int nm, int n, double **array, double *evals, int matz, double **evecs, double toler)` has been removed. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Merge `dfoccwave::Tensor2d::diagonalize` overloads to minimize code dupliaction; - [x] Add machine-readable docstrings in the header file; - [x] `dfoccwave::Tensor2d::diagonalize` overloads now throw on non-square matrices or diagonalizer failure; - [x] Replace calls of `sq_rsp` with `DSYEV_ascending` and `DSYEV_descending`; - [x] Delete `sq_rsp` function and file. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2928:243,wrap,wrappers,243,https://psicode.org,https://github.com/psi4/psi4/pull/2928,1,['wrap'],['wrappers']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Psi4 has wrappers for seven LAPACK functions which have been marked as deprecated by the LAPACK devs for a long time. These functions have also been marked as deprecated within Psi4. Luckily they are not marked as `PSI_API`, nor are they used by Psi4. This PR removes them. Note that the default git diff algorithm is getting confused by the repetitive text in `lapack_intfc.cc` and incorrectly indicates that some lines were added. The correct diff can be obtained with `--diff-algorithm=minimal` :; ```; $ git diff --stat --diff-algorithm=minimal master remove_deprecated_lapack; psi4/src/export_blas_lapack.cc | 7 -; psi4/src/psi4/libmints/psimath.cc | 50 --; psi4/src/psi4/libmints/psimath.h | 27 -; psi4/src/psi4/libqt/CMakeLists.txt | 19 -; psi4/src/psi4/libqt/lapack_intfc.cc | 1021 -----------------------------; psi4/src/psi4/libqt/lapack_intfc_mangle.h | 35 -; psi4/src/psi4/libqt/qt.h | 25 -; 7 files changed, 1184 deletions(-); ```. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Psi4 now requires the LAPACK library to provide `DGGSVD3` and `DGGSVP3`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fortran, C and C++ style wrappers for `DGEGS`, `DGEGV,` `DGELSX,` `DGEQPF,` `DGGSVD,` `DGGSVP` and `DTZRQF` are removed.; - [x] CMake checks for the availability of `DGGSVD3` and `DGGSVP3` are removed. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2823:89,wrap,wrappers,89,https://psicode.org,https://github.com/psi4/psi4/pull/2823,2,['wrap'],['wrappers']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The `-H<path>` option for CMake is technically not part of the CMake public interface, it is not documented and was never meant for public use. Since CMake 3.13 there is a proper alternative, `-S<path>`, so Psi4 should use that and stop suggesting users to use `-H<path>`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Psi4 no longer suggests users to use the undocumented `-H<path>` CMake option when building from source. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Replace `-H<path>` with `-S<path>` in CMake invokations. ## Questions; - [ ] I have no idea where to make a PR for fixing this in psi4-path-advisor. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2797:156,interface,interface,156,https://psicode.org,https://github.com/psi4/psi4/pull/2797,1,['interface'],['interface']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The common thread of this PR is be more explicit in what calculations Psi4 can do and conveying that to the user at runtime and through the docs. In practice, this involves expanding the coverage of stdsuite, using those results to autogenerate docs tables, reconciling hand-generated docs tables, referring to all in runtime errors, and cleaning stuff up along the way. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] MRCC now called with `set qc_module mrcc` rather than ""mr"" prefix onto method; - [x] Many NYI messages, whether from ManagedMethodError, MissingMethodError, or plain ValidationError from run_* fns have changed their wording and added content. On the whole, this should be helpful, but if you're searching for particular phrasing, you'll likely need to adjust regexes.; - [x] New tables in the docs with details on accessible methods.; - [x] Arbitrary-order MPn no longer runable with ROHF. Arbitrary-order ZAPTn no longer runable with RHF.; - [x] Running DF through CCENERGY (experimental, expert only) may now require `set qc_module ccenergy`. ## Dev notes & details; - [x] running stdsuite writes a storage file, and a new document_capabilities script turns the storage file into various tables that newly (1) include all-electron/frozen-core info (notated ""aefc"" in places), (2) show default modules and default e.g., mp2_type, (3) cover most single-ref ground-state total-energy methods, (4) are proven to honor return val and qcvar contracts. details of how and why this works are at [psi4/share/psi4/scripts/merge_stdsuite.py](https://github.com/psi4/psi4/pull/2731/files#diff-4a81ee0fb4705fe6acd6ac7f6417f5a899437a93780329a5f647a94eea425c24R8) . If you want to suggest changes to notation, keep in mind that main-body cell contents must be expressible in a single unicod",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:718,message,messages,718,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['message'],['messages']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The version of ADCC that the Psi4 CMake system currently requires (and tries to build if not found) is incompatible with C++17, and thus always fails to build. See https://github.com/adc-connect/adcc/issues/131 for the error message. This error was also mentioned in issue #2572.; This has been resolved by the ADCC/libtensor devs since, so bumping the required/built ADCC version to the latest release should fix _this particular_ issue with the ADCC build process. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Psi4 now requires ADCC version 0.15.13 or newer.; - [x] Fixed issue where building Psi4 from source with the ADCC plugin enabled-but-not-found resulted in a build failure with the error message `ISO C++17 does not allow dynamic exception specifications`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] CMake now looks for ADCC 0.15.13 or newer, if not found the 0.15.13 tarball is downloaded and built. ## Checklist; - [x] No new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2785:305,message,message,305,https://psicode.org,https://github.com/psi4/psi4/pull/2785,2,['message'],['message']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; These functions are relics from Psi3 (or before?) and they have many issues, unfortunately one of them is their function signature. Stemming from the awful interface, users of `rsp(...)` and `sq_rsp(...)` never check if the diagonalization failed, because they _cannot_. To keep the promise of not randomly breaking API without fair warning, this PR deprecates said functions but keeps them usable. After #2776, `rsp(...)` has no internal callers left. As for `sq_rsp(...)`:. - many former callers of `sq_rsp(...)` have turned out to be unused functions and have been removed; - If #2686 is merged the vast majority of remaining callers are migrated to a new wrapper around DSYEV; - The remaining call sites of `sq_rsp(...)` will all be in `dfocc`, which is not touched for the time being to avoid causing merge conflicts for the many pending PRs for that module. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `PSI_API` function `void rsp(int nm, int n, int nv, double *array, double *evals, int matz, double **evecs, double toler)` is deprecated and 1.7 will be the last release with it present.; - [x] `PSI_API` function `void sq_rsp(int nm, int n, double **array, double *evals, int matz, double **evecs, double toler)` is deprecated and 1.7 will be the last release with it present. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Added deprecation notices to `rsp(...)` and `sq_rsp(...)`. ## Checklist; - [x] No new features; - [x] Tests pass as per Lori. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2798:236,interface,interface,236,https://psicode.org,https://github.com/psi4/psi4/pull/2798,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR allows for using basis sets from the Basis Set Exchange library (https://github.com/MolSSI-BSE/basis_set_exchange) directly in psi4. To use a basis set from the BSE, you prefix the name of the basis set with `bse:`. Optionally, you can specify the version with a suffix (like `:1`). ```; # use most recent def2-tzvp version; set basis bse:def2-tzvp. # specifically use version 0 of sto-3g; set basis bse:sto-3g:0; ```. Also can be used with `assign`. ```; basis {; assign DZ; assign C bse:sto-3g:0; }; ```. Using these of course requires that the BSE be installed. This should be accessible from both schema/json and psithon. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] Add capability to use basis sets from the Basis Set Exchange. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Adds optional dependency to basis_set_exchange; - [x] Adds handling for basis sets that start with `bse:`; - [ ] Modifies some regexes to allow for colons in basis set names. ## Questions; None. ## Checklist; - [x] Optional dependency added to build chain; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2905:1203,depend,dependency,1203,https://psicode.org,https://github.com/psi4/psi4/pull/2905,2,['depend'],['dependency']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR builds upon the functions added in #2711 and #2700 to provide more informative error messages if a `SYSTEM_READ`, `SYSTEM_WRITE` or `SYSTEM_LSEEK` fails, including the OS-provided error message, which may have clues for the cause of the error (disk is full, no permission, etc). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] Error messages related to some IO errors are now more specific and detailed. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] New function: `psio_compose_err_msg`. This helps composing PSIO error messages without too much code duplication. It can optionally take an errno value and tack on the error message provided by the OS.; - [x] `psio_volseek` has been reworked to handle any errors internally by calling `psio_error`, instead of returning -1 on error. Appropriate error message generation and some `const` qualifiers were added.; - [x] `PSIO::rw` has been adapted to the changes to `psio_volseek` and error message generation was added after each read/write/seek.; - [x] Functions in `toclen.cc` are now also using `psio_compose_err_msg` to generate messages. ## Checklist; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756:173,message,messages,173,https://psicode.org,https://github.com/psi4/psi4/pull/2756,8,['message'],"['message', 'messages']"
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is an implementation of the fitted version of the SAP guess, described in [J. Chem. Phys. 152, 144105 (2020)](https://doi.org/10.1063/5.0004046). The repulsive potential on every atom is fit in terms of error function potentials, which means that the guess can be evaluated with few two-electron integrals; namely. $$ {\bf F}^\text{SAP} = {\bf H} + {\bf V}^\text{SAP} $$. $$ V_{\mu \nu}^\text{SAP} = \sum_{A} (A|\mu \nu) $$. where $A$ is a fully contracted $1s$ function on each atom. I have no idea how the integrals work in Psi4. I followed [a Psi4Numpy example](https://github.com/psi4/psi4numpy/blob/master/Moller-Plesset/DF-MP2_NAF.py) @loriab hinted me at. The appears to compile; the only problem being the final assembly, i.e. the sum over the 3-center integrals. If anyone can tell me what I should be doing, help would be appreciated... Closes #2054 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Implement scheme and get something that matches ERKALE; - [ ] Use optimal storage. ## Questions; - [ ] Is the basis build call correct? Should I also add a new basis role somewhere?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3036:531,contract,contracted,531,https://psicode.org,https://github.com/psi4/psi4/pull/3036,1,['contract'],['contracted']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is an implementation of the fitted version of the SAP guess, described in [J. Chem. Phys. 152, 144105 (2020)](https://doi.org/10.1063/5.0004046). The repulsive potential on every atom is fit in terms of error function potentials, which means that the guess can be evaluated with few two-electron integrals; namely. $$ {\bf F}^\text{SAP} = {\bf H} + {\bf V}^\text{SAP} $$. $$ V_{\mu \nu}^\text{SAP} = \sum_{A} (A|\mu \nu) $$. where $A$ is a fully contracted $1s$ function on each atom. The implementation is not optimal, since I use `ao_eri` to compute the integrals. An optimal implementation would accumulate the auxiliary functions' integrals on-the-fly; however, optimization can be safely left to a later stage... Closes #2054 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Implement scheme and get something that matches ERKALE. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3039:531,contract,contracted,531,https://psicode.org,https://github.com/psi4/psi4/pull/3039,1,['contract'],['contracted']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is picked out of #2413 as independent. Depending on the version of l2, this'll either issue warnings (psi4 l2 fork where `INT_NCART` is still macro) or errors (l2 master where `INT_NCART` now inline fn) when building psi4. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2429:124,Depend,Depending,124,https://psicode.org,https://github.com/psi4/psi4/pull/2429,1,['Depend'],['Depending']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This pull request adds electrostatic embedding capabilities to the F-SAPT code. Previously, the point charges could only be assigned to the environment. Now point charges can be included with either the interacting fragments A and B or the external environment C. This PR adds support only for point charges. Future PRs can potentially add support for more complex external potentials but this is not intended here. The external potential interface is currently under revision in #2069. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Add electrostatic embedding to the F-SAPT code. ## Questions; - [ ] . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2131:519,interface,interface,519,https://psicode.org,https://github.com/psi4/psi4/pull/2131,1,['interface'],['interface']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This pull request fixes the functionality of the EMBPOT perturbation to the core Hamiltonian in SCF calculations and adds appropriate gradients for the EMBPOT potential. The EMBPOT perturbation works by reading x, y, z, w, and v coordinates from a file (`EMBPOT`) during the call to `HF::form_H()`. The core Hamiltonian of the `HF` object is then modified to include a contribution that is calculated by performing numerical integration of the basis over the EMBPOT coordinates, weights, and potentials. This functionality assumed that the values of phi calculated in the `BasisSet::compute_phi()` routine are always in a cartesian basis and not in a spherical basis, which was true up until the fix in #2210, which was included in the 1.4 release. Accordingly, an unnecessary AO to SO transformation is applied in the `HF::form_H()` routine every time, which results in inaccurate EMBPOT matrices being added to the core Hamiltonian. In order to correct this in the current version of Psi4, I have removed the AO to SO transformation and call `BasisSet::compute_phi()` on an appropriately sized vector. I have also added numerical gradients over the EMBPOT potential using the gau2grid library. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The user may supply an arbitrary potential evaluated on a numerical quadrature grid to an SCF calculation by saving the x, y, z, w, and v values to a human-readable `EMBPOT` file. The first line of the `EMBPOT` file must have the number of points inside of the file. The user must also include `set perturb_h true` and `set perturb_with embpot` in the Psi4 input. The potential will then be evaluated and included in the core Hamiltonian construction, and energy and gradient calculations. ## Dev notes & details; <!-- A bullet-point format description",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3239:505,integrat,integration,505,https://psicode.org,https://github.com/psi4/psi4/pull/3239,3,"['integrat', 'rout']","['integration', 'routine']"
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; To implement the SAP guess (#3036), I need to toy with the contraction coefficients. Currently, there is duplicated data in BasisSet, as the Libint2 shells are built alongside the basis set itself. The idea of this PR is to modularize the Libint2 shell data creation so that the data can be refreshed based on the data in the BasisSet. The PR also fixes an issue in that the `n_prim_per_shell_` member of BasisSet was never populated. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3037:139,contract,contraction,139,https://psicode.org,https://github.com/psi4/psi4/pull/3037,1,['contract'],['contraction']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; `Matrix::swap_rows` and `Matrix::swap_columns` do no seem to have any internal users, but since `Matrix` as a whole is `PSI_API`, it would be rude to suddenly remove them. This PR adds deprecation notices. The motivation for removal is that these two functions are the only internal users of the DSWAP BLAS interface. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `PSI_API` functions `Matrix::swap_rows` and `Matrix::swap_columns` are now deprecated due to a lack of users. Unless someone speaks up, 1.8 will be the last release to have them. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Deprecation notices added to `matrix.h`. ## Checklist; - [x] No new features; - [ ] CI tests are passing. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909:387,interface,interface,387,https://psicode.org,https://github.com/psi4/psi4/pull/2909,1,['interface'],['interface']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; closes #3016 (supersedes); closes #3084 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] For users, replaces the `psi4-dev` conda package that brought psi4 build dependencies and a ""psi4-path-adivsor.py` script that produced cmake configure lines. Now, that script is in-repo at `conda/psi4-path-advisor.py` and running the help menu provides the following. This should be more configurable for folks who like to choose all conda or byo.; ```; =========================================; (A) black-box usage (copy/paste-able); =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2) generate env spec file from codedeps.yaml. ""eval $(...)"" creates and activates conda env.; eval $(conda/psi4-path-advisor.py env); # (3) generate cmake cache file from conda env. ""eval $(...)"" configures and builds with cmake.; eval $(conda/psi4-path-advisor.py cmake); shows up in p4dev; =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; ```; - [x] For packagers or other high-level what-does-it-need folks, dependency info is programmatically available ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:368,depend,dependencies,368,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['depend'],['dependencies']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; ~Ignore this for now. This is so I can get a build snapshot.~ It might well fail tests b/c needs qcel and qcng snapshots. Full tests is clean locally. Changes for the most part are RTG except for two lines noted below. UPDATE: go ahead and review, please. I'll take out the 2 improper lines noted below before merge. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] report FD G & H more fully in core and wfn vars; - [x] add MP2 Hessian testing to stdsuite; - [x] I guess the a-ccsd(t) docs changes didn't make it into #2241 ?; - [x] some cfour interface expansions that are really only useful for internal debugging. use the regex harvesting from qcng, not here; - [x] this bit https://github.com/psi4/psi4/compare/master...loriab:sept21qcdb?expand=1#diff-3abbb4f37a59cc2e6cfbff3f4cb73b312dfd94044a19f38b00bf7ae140db13e7R540-R541 needs removing before actual merge is considered. proper way to handle would be if the select_ccsd_gradient was smart enough to say ""can't do"" to FC gradients, so it'd fall back to FD by ene. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2293:683,interface,interface,683,https://psicode.org,https://github.com/psi4/psi4/pull/2293,1,['interface'],['interface']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; ~for now must enable with `-D ENABLE_IntegratorXX=ON`. recc installing catch2 first to avoid downloading each time.~. ~CI will fail because I added a integratorxx header to a file for trial, but haven't enabled the addon in the buildsys everywhere.~. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] optionally build integratorXX with `-D ENABLE_IntegratorXX=ON`. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3041:230,integrat,integratorxx,230,https://psicode.org,https://github.com/psi4/psi4/pull/3041,2,['integrat'],"['integratorXX', 'integratorxx']"
Integrability,"## Description; @hokru recently reported that when he attempted to use `dfomp2` through `dfocc` to compute dipoles, he was not able to reproduce ORCA's RI-OMP2 to within even 0.01 a.u. I determined by comparison to my own Psi4Numpy implementation of DF-OMP2 that this was an error in the `dfocc` module and eventually tracked it down to `dfocc` sending the wrong orbitals to `OEProp`. The primary purpose of this PR was to fix that and get density-fitted orbital optimized properties hooked up to the driver. ...Unfortunately, adding a test that the remaining dipoles are correct required me to fix some other standing `dfocc` issues that prevent users from setting tight convergence (#1143). That in turn required quite a few test changes. While working through that, I also solved #1509. The 0.7 mHartree difference I was seeing was due to another bug in `dfocc`. It computed the MP2.5/MP3 energy by adding to the _SCF reference_ and not the current determinant. Those are different things in orbital-optimized methods. When you add in the correct reference energy, the disagreement reported in #1509 goes away. In brief, this PR fixes #1143 and fixed #1509. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a bug where `dfocc` properties were incorrect; - [x] Add a test that the `dfocc` properties are now correct; - [x] Hook up `dfocc` properties to the driver; - [x] Fix a bug where DFOMP2.5/DFOMP3 energies could be incorrect depending on convergence settings; - [x] Simplified/Sanitized handling of convergence criteria in `dfocc`; - [x] Modified `dfocc` tests due to above. ## Checklist; - [x] `ctest -L dfo` and `ctest -L cdo` pass; - [x] `test_dipole.py` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1772:1486,depend,depending,1486,https://psicode.org,https://github.com/psi4/psi4/pull/1772,1,['depend'],['depending']
Integrability,"## Description; A few testing bugs and completing the pytest access route. Nothing controversial. Most of this PR is autogenerated. Due diligence on review can be achieved by examining:; * `empirical_dispersion.py`; * `addons.py`; * `extern1/input.dat`; * `tester.py`; * `test_addons.py`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fixed bug that wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2549:68,rout,route,68,https://psicode.org,https://github.com/psi4/psi4/pull/2549,1,['rout'],['route']
Integrability,"## Description; A step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; - [x] removes or py3-izes scripts; - [x] addresses the floats part of #1375 by; - expanding the variable operations on `Wavefunction`; - making their storage always uppercase and their access case-insensitive; - dev alert: any code that wrote to wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needed to be changed to `wfn.set_variable`; - [x] adds runtime FutureWarning to renamed fns: `psi4.core.get_variable`, psi4.core.get_variables`, `Wavefunction.get_variable`; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on `wfn` c-side, then just copy into `P::e.globals` in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS8; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables_`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`; - `core.variable` now throws when you access a key not set. This is what `Wavefunction.variable` did before, but `core.variable` used to just create the key and set to 0. ## Questions; - [ ] FutureWarning provides the offending line. However, this is complicated by our promoting the get_variable namespace and the PsiAPI and Psithon calling routes. It's going to be hard to get this offending line printing universally right. It's hit and miss now. ## Checklist; - [x] full tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1381:1610,rout,routes,1610,https://psicode.org,https://github.com/psi4/psi4/pull/1381,1,['rout'],['routes']
Integrability,"## Description; A typo in the overlap integral second derivatives caused errors in the analytic hessians. The error seems to be confined to one of the three contributions to matrix elements where the angular momentum in the bra and ket differ, and only when the derivatives both refer to the same perturbation; which is why the code made it through the initial tests. I'm still trying to wrap my head around exactly why those tests work, so I'd like a day or two before this is ready to merge. My sincere apologies to all whom this bug inconvenienced. Fixes #791 and #901. ## Todos; Notable points that this PR has either accomplished or will accomplish. * **User-Facing for Release Notes**; - [ ] Fixed a bug in the analytic Hessian code. ## Questions; - [x] Which extra tests do you have in mind, @loriab?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/903:388,wrap,wrap,388,https://psicode.org,https://github.com/psi4/psi4/pull/903,1,['wrap'],['wrap']
Integrability,"## Description; Accumulating changes here. ## Todos; * **Developer Interest**; - [x] AddOns: make resp an endorsed plugin; - [x] CMake: fix OMP option name. add `otool -L` parsing; - [x] CMake: refactoring this to psi4-dev, which it approximately depends on. Current is one layer of templating too many. ## Questions; - [x] Name & home of RESP plugin - shall be GH:cdsgroup/resp and `import resp`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1039:247,depend,depends,247,https://psicode.org,https://github.com/psi4/psi4/pull/1039,1,['depend'],['depends']
Integrability,"## Description; Add HF- and PBEh-3c capabilities, now that the former have been verified from Orca and the latter through S. Grimme private communications. ## Todos; * **Developer Interest**; - [x] gcp smoke tests going to pytest PR; - [x] write a bit of docs; - [x] So this is where my compare_values improvements ran off to. Now have a toggle to fail or not and can check mismatch by val, not just by order of magnitude value.; - [x] Add `gcp` interface, but not as advanced as `dftd3` b/c not writing to a file, just takes one of the pre-def values. ; * **User-Facing for Release Notes**; - [x] Semi-semiempirical methods HF-3c and PBEh-3c of Grimme can now be accessed (with `dftd3` and `gcp` executables detectable in PATH). Access through `energy('hf3c')` and `energy('pbeh3c')`. Can run with or without preferred basis set specified (minix and def2-msvp, respectively). ## Questions; * @dgasmith, this'll need a little adaption for 1.2. ## Status; - [x] Ready to go. Not averse to a squash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/630:446,interface,interface,446,https://psicode.org,https://github.com/psi4/psi4/pull/630,1,['interface'],['interface']
Integrability,"## Description; Added a dictionary-based method for implementing density functionals. All non-dispersion versions of original functionals are working with some exceptions, the new definition of functionals has ""TEST-"" prefix for now. Not working functionals are: HF+D and HJS-B88 which do not run, HF3C for unknown reason, B97-D which should be -D2 not -D3 corrected in master. Some dispersion corrected methods already implemented - all BLYP functionals, for example. Script used for testing attached:; [test.dat.txt](https://github.com/psi4/psi4/files/1735039/test.dat.txt). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix for Issue #920 ; - [x] Easy implementation of new functionals; - [x] LibXC parameters (ALPHA, BETA, OMEGA) now exposed to python; - [x] Check functionals against Q-Chem; - [ ] oPBE-D, oTPSS-D, oPWLYP-D ,oBLYP-D, TPSSh-D3BJ - not included in PR #880 ; - [x] B97-D; - [x] wB97X-D3 - needs tweaks - was disabled.; - [x] DSD-***; - [x] [PBE]HF3C; * **User-Facing for Release Notes**; - [ ] Eventually: let user pass a dict to psi4 with custom functionals? . ## Questions; - [ ] What do you think about the current interface?. ## Status; - [x] Dashparams for functionals need to be migrated too.; - [x] Ready to go - from my PoV at least.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922:1206,interface,interface,1206,https://psicode.org,https://github.com/psi4/psi4/pull/922,1,['interface'],['interface']
Integrability,"## Description; Added the one line `ao_multipole_potential` function to `export_mints.cc`. This allows the user to access one-center integrals from the python interface. The most common use case for this is to calculate electrostatic potential and field from an auxiliary basis set expansion of the electron density. ## User API & Changelog headlines; - added `ao_multipole_potential` to `export_mints.cc`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - Makes no changes to existing `export_mints.cc`; - Adds a function to grab One Body Integrals for a given basis set. ## Checklist; - [x] [All or relevant fraction of full tests run]. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2744:159,interface,interface,159,https://psicode.org,https://github.com/psi4/psi4/pull/2744,1,['interface'],['interface']
Integrability,"## Description; Adds Python interfaces and code to semicanonicalize MCSCF orbitals. ## Todos; * **Developer**; - [x] Tested to make sure resulting orbitals diagonalize docc, actv, and virt blocks of average Fock matrix. ## Questions; - [x] By default MCSCF orbitals are semicanonicalized, unless user requests natural orbitals. This seems the most sensible choice, OK with other devs?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722:28,interface,interfaces,28,https://psicode.org,https://github.com/psi4/psi4/pull/722,1,['interface'],['interfaces']
Integrability,"## Description; Adds ability to call Axilrod-Teller-Muto (ATM) 3-body dispersion correction from Grimme's DFTD3. Fixes #1407 . ## Todos; - [x] Callable ATM correction from DFTD3 using `<func-name>-atmgr`; - [x] Moves all the dftd3 interface stuff out of psi and now calls qcengine MolSSI/QCEngine#46; - [x] Adds mp2d energies, also through qcengine. ## Questions; - [x] I've added QCEngine as if it were a required dependency. This is debatable, but there'll be lots of things we'll want to run this way, possibly efp/efp, geometric, pyoptking, etc. Let's debate. ## Notices; - For this month as things move quickly, I'm not copying (light py) packages over from conda-forge to psi4 channels. You'll have to `-c psi4/label/dev -c conda-forge` during `conda install` at times. (drat, there's a libxc on c-f and old qcel on psi4, which means that there's not a good channel ordering ...). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1491:231,interface,interface,231,https://psicode.org,https://github.com/psi4/psi4/pull/1491,2,"['depend', 'interface']","['dependency', 'interface']"
Integrability,"## Description; Adds capabilities for magnetic dipole derivative integrals and exports them to Python side for use in calculating VCD. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds origin dependence to electric dipole derivatives in `compute_pair_deriv1()` function in `psi4/src/psi4/libmints/dipole.cc`; - [x] Implements `compute_pair_deriv1()` function in `psi4/src/psi4/libmints/angularmomentum.cc`; - [x] Adds `.def(""ao_ang_mom_deriv1"")` and `.def(""mo_ang_mom_deriv1"")` binding to `psi4/src/export_mints.cc`; - [x] Adds `ao_ang_mom_deriv1()` and `mo_ang_mom_deriv1()` definition/declaration to `psi4/src/psi4/libmints/mintshelper.cc(h)`; - [x] Adds `ao_ang_mom_deriv1_helper()` helper function to `psi4/src/psi4/libmints/mintshelper.cc(h)`. ## Questions; - [x] Ideas on how to test these once implemented? Considering using finite difference to check my implementation rather than comparing to another code. Thoughts?. ## Checklist; - [ ] Add test in `/tests/pytests/test_mints.py`; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1852:245,depend,dependence,245,https://psicode.org,https://github.com/psi4/psi4/pull/1852,1,['depend'],['dependence']
Integrability,"## Description; Adds hostname printing to output file header, and stop time to output file ""footer"" before success/failure beer/coffee message. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/947:135,message,message,135,https://psicode.org,https://github.com/psi4/psi4/pull/947,1,['message'],['message']
Integrability,"## Description; Adds the DLPNO-MP2 method to Psi4. Callable as `energy('dlpno-mp2')`. DLPNO-MP2 (or domain-based local pair natural orbital MP2) is the method described in the following paper:. [Pinski, Peter, et al. ""Sparse maps—A systematic infrastructure for reduced-scaling electronic structure methods. I. An efficient and simple linear scaling local MP2 method that uses an intermediate basis of pair natural orbitals."" The Journal of chemical physics 143.3 (2015): 034108](https://doi.org/10.1063/1.4926879); ; DLPNO-MP2 recovers about 99.9% of the DF-MP2 correlation energy, and scales much better in both time and memory. The following graph compares this implementation with Psi4's DF-MP2 code on linear alkanes (18 core i9-10980XE, 200 GB, cc-pVTZ basis):. ![alkanes](https://user-images.githubusercontent.com/16376046/105784584-b38e7180-5f3e-11eb-97ce-9e5d05896d82.png). ## Todos; - [x] Implement DLPNO-MP2; - [x] Add tests; - [x] Add docs. ## Questions; - [x] Are there any other ways that this calculation should be routed? In particular, should `DLPNO` be an option for the `MP2_TYPE` keyword? Should DLPNO be an option for `QC_MODULE`?; - [x] Related to the previous question, suppose a user wants to run a SCS DLPNO-MP2 calculation. How should that be parsed? Not a big deal if that isn't supported.; - [x] How best to handle DLPNO options? There are many thresholds associated with this method, but the error and cost of the method are primarily controlled by just two of them: `T_CUT_DO` and `T_CUT_PNO`. Should the other options be user-facing at all? For now, I've marked them expert. Opinions from anyone with experience running local correlation methods are welcome here. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2093:1030,rout,routed,1030,https://psicode.org,https://github.com/psi4/psi4/pull/2093,1,['rout'],['routed']
Integrability,"## Description; Adds the tensors generated from the CC response code to the reference wave function, eventually to be included in the JSON output for a [QCEng](https://github.com/molssi/qcengine) run. Also patched CC-level dipoles and (static) quadrupoles in `proc.py` to be consistent with other naming conventions, allowing them to pass through `schema_wrapper.py`. This means that all (ground state, static) CC one-electron properties should follow the naming convention used on wfn. Old excited state (EOM) and dynamic property variables remain unchanged. . Updates to the schema wrapper to allow the other tensors though are coming in a separate PR. . ## Todos; - [x] Electric dipole polarizability tensor; - [x] Optical rotation (electric-dipole/magnetic-dipole) tensor; - [x] Electric dipole-quadrupole polarizability tensor (stored as three 3x3 components) (calculated through `roa.cc`); - [x] Patch CC dipole and (static) quadrupole QCVars; - [x] New pytest for all new QCVars; - [x] Update `cc46` to adhere to new ground state `psi4.core.variables()` names. ## Questions; - [x] `tests/pytests/test_qcschema.py` doesn't include any properties (yet). Are the existing returns of dipoles / quadrupoles in `schema_wrapper` tested anywhere? @loriab . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) `ctest -L cc` comes clean.; - [x] New pytest `test_ccresponse.py` comes clean. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2022:584,wrap,wrapper,584,https://psicode.org,https://github.com/psi4/psi4/pull/2022,1,['wrap'],['wrapper']
Integrability,## Description; Allows optking to take gradients from the nbody wrapper. Fix VMFC gradient and Hessian and CP total data. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Connect optking with nbody gradient.; - [x] Add VMFC gradient and Hessian.; - [x] Correct CP-corrected total data.; - [x] Fix a few bugs.; - [x] Add electrostatic embedding.; - [x] Add multi-level many-body expansion. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1042:64,wrap,wrapper,64,https://psicode.org,https://github.com/psi4/psi4/pull/1042,1,['wrap'],['wrapper']
Integrability,"## Description; As the title says, plus some preparatory work for solvated response (but not yet implemented or tested). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The interface towards the pyddx library for continuum solvation is extended by support for the linearized Poisson-Boltzmann model (LPB). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2918:298,interface,interface,298,https://psicode.org,https://github.com/psi4/psi4/pull/2918,1,['interface'],['interface']
Integrability,"## Description; At long last, kill the Fork!. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adjust LibxcFunctional for new tweakers interface. Have to pad tweakers array sometimes; - [x] ~Any fctl involving PW91 is failing. Keeps segfaulting when I uncomment that block~. ## Questions; - [ ] Need to find out from M. Oliveira if there's a released version with this interface. tagged 5.0.0; - [ ] https://gitlab.com/libxc/libxc/issues/61. ## Checklist; - [ ] ~Tests added for any new features~; - [x] Any fctl involving PW91 is failing. Keeps segfaulting when I uncomment that block; ```; 	372 - dft-custom-dhdf (Failed); 	373 - dft-custom-hybrid (Failed); 	376 - dft-bench-ionization (Failed); 	377 - dft-bench-interaction (Failed); ```; - [x] All tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge. closes #2057",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101:201,interface,interface,201,https://psicode.org,https://github.com/psi4/psi4/pull/1101,2,['interface'],['interface']
Integrability,"## Description; At long, long, long last fixes #1777 and fixes #1793. We now DIIS on the combined vector of orbital rotation amplitudes and T2 amplitudes. This is the approach taken by the orbital-optimized DCT code, which has not had nearly the problems that the `occ` module has had with orbital convergence. `occ` should now have much more robust convergence and _not_ be one of the banes of the test suite. In addition, full tests now pass, minus things involving conda dependencies. `v2rdm_casscf` was (unsurprisingly) segfaulting, and I was getting an error with `mp2d` that seems to trace back to me having an outdated version of QCEngine. I had to make some changes to `opt-irc-2` to get the test suite working. See #1793 for my diagnosis of the problem. In brief, the IRC in Psi can overshoot the endpoint, causing some numerical instability in the steps post-overshoot. This is a problem to fix in PyOptking, so I just changed the test value. This concludes the OCC's Open-Heart Surgery series. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Coupled orbital and amplitude DIIS for improved convergence in `occ`; - [x] Validated every `occ` test with OMP2, OMP3, OMP2.5, OCEPA that uses no spin-scaling against Psi4Numpy implementations converged with obsessive tightness. ## Checklist; - [x] Full tests pass, except for conda dependencies. That means `ctest` and `pytest`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1846:474,depend,dependencies,474,https://psicode.org,https://github.com/psi4/psi4/pull/1846,2,['depend'],['dependencies']
Integrability,"## Description; At the risk of gaining a reputation for single-character PR's, I think I have a fix for #1596. The extra character in the error message looked suspicious, so I nuked it and the `adc` tests still pass. I'll show the output of the OP's calculation below. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a probable typo in ADC, which introduced a bug. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1599:144,message,message,144,https://psicode.org,https://github.com/psi4/psi4/pull/1599,1,['message'],['message']
Integrability,"## Description; Ben Pritchard has been extensively revamping QCFractal/QCArchive. It has reached the point that the QCFractal `master` branch (latest release v0.15.8) will get no more support, and the `next` branch (no releases or conda packages) is in beta testing. This PR switches Psi4 distributed driver from `master` to `next` interfaces. It shouldn't affect many, if any. Only affects ppl running Psi4 and have `client = FractalClient(...)` in their inputs. User-side, was:; ```; from qcfractal.interface import FractalClient; client = FractalClient(""localhost:7777"", verify=False); ...; plan = gradient('scf', dertype=0, return_plan=True); plan.compute(client); ret = plan.get_results(client); ```. User-side, now:; ```; from qcportal import PortalClient; client = PortalClient(""http://localhost:7777"", verify=False); ...; plan = gradient('scf', dertype=0, return_plan=True); plan.compute(client); ret = plan.get_results(client); ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Updates interface for QCFractal `next`. Core snippet written by Ben.; - [x] ADDED: Also, updated to `task_config` from `local_options`. This isn't urgently needed, but it'll silence a repeated warning, at the cost of requiring latest qcng and hence latest qcel. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] I've tested it on GT cluster. Various calls were changed out for new ones. I'm not sure if error handling is any worse or better. ## Status; - [x] Ready for review; - [ ] Ready for merge, no particular hurry",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2645:332,interface,interfaces,332,https://psicode.org,https://github.com/psi4/psi4/pull/2645,3,['interface'],"['interface', 'interfaces']"
Integrability,## Description; Breaks off documentation and `.travis.yml` linting off of #809. I have added a `.pre-commit-config.yaml` that will check for:; - Filenames that would conflict on a case-insensitive filesystem; - Files that contain merge conflict strings.; - Python formatting with YAPF.; - C++ formatting with clang-format. Hooks are **opt-in** and require you to install [`pre-commit`](https://pre-commit.com/) (with pip or conda) and then run `pre-commit install` to integrate the actual hooks. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Document code style and how to enforce it.; - [x] Add `.pre-commit-config.yaml` and explain how to use it.; - [x] Use build stages on Travis and lint/clean up `.travis.yml` . ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1594:468,integrat,integrate,468,https://psicode.org,https://github.com/psi4/psi4/pull/1594,1,['integrat'],['integrate']
Integrability,"## Description; Bump some dependencies. Update psi to pybind11 2.2.1. Deal accompanying visibility issues through Jet's `PSI_API` macro. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CheMPS2 to 1.8.4; - [x] ~Libint to latest v1 head~ (RDR already covered this); - [x] Pybind11 to 2.2.1; - [x] had to add some psio unsavoriness (recomputing integrals whether present or not) since pb11-221 won't seem to give me my `None` for `nullptr`. This only affects stability analyses, and I figure they're due for an overhaul anyways.; - [x] add enough `PSI_API` to get shipped plugins to work.; * **User-Facing for Release Notes**. ## Questions; - [ ] Big question here is do we want to make the pybind jump?. * Not immediately until https://github.com/pybind/pybind11/issues/1121 is cleared up; * Likely to cause some building headaches and entanglements of 200 and 221 versions at build-time, no matter how tightly I try to instruct CMake where to find it.; * Pybind folks are [pretty adamant about symbol visibility](http://pybind11.readthedocs.io/en/stable/upgrade.html#stricter-enforcement-of-hidden-symbol-visibility-for-pybind11-modules). We do something they truly disapprove of and use pb as a plain dependency rather than their (very nice) module maker, so I think our plugins (double use of `core.so` as python module and ordinary Linux lib) should be fine, but we'll want to test Forte, @fevangelista.; * Can take a look at the [Changelog](http://pybind11.readthedocs.io/en/stable/changelog.html) for new goodies. Note that Psi4 is currently pinned at v2.0.0 (1 Jan 2017).; * When @ryanmrichard was dealing with two pybind projects (Psi4, Pulsar), he came to the conclusion that it was very important to have all pybind projects on exactly the same version. Right now we control all ecosystem projects using pybind (Psi4, Forte, PylibEFP (which needs >=2.2.0, incidentally)) so can just made decisions in consensus. That may not a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/814:26,depend,dependencies,26,https://psicode.org,https://github.com/psi4/psi4/pull/814,1,['depend'],['dependencies']
Integrability,"## Description; Bump the QCA stack. qcng 0.6.3 is minted but doesn't exist on c-f yet, so this'll be a nice test of does it do internal build. Some tools (LGTM) won't `git clone`, so switching remaining upstreams to URL, which thanks to GH is as flexible as `GIT_TAG`. Also, fix some cfour interface issues, fix some deprecationwarnings, and add mp2d to smoke tests. ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1577:290,interface,interface,290,https://psicode.org,https://github.com/psi4/psi4/pull/1577,1,['interface'],['interface']
Integrability,"## Description; CI updates. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] geometric 1.0 compatible. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] update interface to geometric for 1.0 release; - [x] closes #2749 . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2750:473,interface,interface,473,https://psicode.org,https://github.com/psi4/psi4/pull/2750,1,['interface'],['interface']
Integrability,"## Description; Calculates exchange terms in a single tensor rather than contracting and adding. Reduces the cost of contractions against SCF coefficients in range separated DFT. Changes the working equation for calculating the coulomb matrix in range separated DFT calculations. This lowers the number of tensors that Psi4 needs to store, reducing memory costs and extending the number of cases operable by DFHelper. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Extend formulations to DiskDFJK. ## Questions; - [ ] Question1. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1911:73,contract,contracting,73,https://psicode.org,https://github.com/psi4/psi4/pull/1911,2,['contract'],"['contracting', 'contractions']"
Integrability,"## Description; Change of FINDIF to be metadata based per #1148, task one, and qcdb molecule compatibility per #1148, task two. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change finite difference code to use metadata.; - [x] Fixes bugs #1296 and #1306.; - [x] Reap/Sow code removed. ## Questions; - [x] How should I document that a functions takes as an argument or returns the metadata dictionary? That needs to be specified somewhere.; - [x] Are we all agreed on the metadata style? The things I've left undone are going to depend heavily on any additional metadata changes. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Implement the changes to all four finite difference functions: empirical dispersion, hessian by gradients, hessian by energies, gradient by energies.; - [x] Polish the resulting code. In particular, there are a few variables taken from the initialization `data` that should probably be taken from `metadict` instead. For the compute functions, it should only need the barest skeleton of the current initialization call. Depending on other revisions, I may want to create a separate initialization function for the compute functions.; - [x] Modify the reap/sow cookbooks to work.; - [x] Make this compatible with QCDB molecules. To do this _correctly_, we need CdSalc tech reproduced in QCDB. Better to just coerce the QCDB molecule for now.; - [x] Remove the optimization side reap/sow code. ## Status; - [x] Ready for review; - [x] Ready for merge.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1289:581,depend,depend,581,https://psicode.org,https://github.com/psi4/psi4/pull/1289,2,"['Depend', 'depend']","['Depending', 'depend']"
Integrability,"## Description; Change the Psi4 driver from being recursive to being based on compute classes that have planning, computing and querying functions. Then, integrate the new driver with the QCArchive project for parallelizing nbody, CBS and findif. Don't panic -- 55k of the lines added are an output.ref. See #1351 for history and bite-sized extractions. What's left here is the gory core. Because code is moving around, there's no good way to review it. The plain code file is often easier to read than the diff. Below are the 6 key files.; * `driver.py` — mostly deletions. notice that the main e/g/h functions instead of having several layers when you enter and ""bounce"" to other fns now have a single plan/compute/proceed-to-analytic decision step.; * `task_planner.py` — new file. all that complexity of figuring out which of cbs/findif/nbody are active (including simple things like `energy(""mp2/cc-pvdz"")` parsing) has landed here. at least it's no longer repeated in several functions. the main goal is to take user info from where user is accustomed to supplying it (options or kwargs) and use it to initialize a tree of ""computers"" whose leaves are all AtomicComputers (analytic single-points). you can see some examples of the planner's work in `tests/pytests/test_task_planner.py`; * `task_base.py` — new file. fairly simple. how to store the pieces of a single job in a qcschema AtomicInput and how to call qcengine to run psi4 (in api, not cli, mode) to turn that into an AtomicResult. all jobs that aren't analytic single-points pass through this file.; * `driver_findif.py` — moderately modified, mostly additions. this is the least-changed wrapper. a pydantic class has been added to link the planning and assembly steps instead of a function and code that used to live in driver.py. the main idea for wrappers is that everything should be generic python except for translation from qcschema to psi4.wfn at the end (finidf does poorly in this b/c salcs call libmints). at the top of th",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:154,integrat,integrate,154,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['integrat'],['integrate']
Integrability,"## Description; Changes to psi4 for MDT interface. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - [x] adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.; - [x] Adds handling of several one-electron properties to the API and saves them to the wavefunction. ## Status; - [ ] Ready for comment but not for final merge.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/772:40,interface,interface,40,https://psicode.org,https://github.com/psi4/psi4/pull/772,1,['interface'],['interface']
Integrability,"## Description; Cleans up CMake so that external dependencies can be linked to libraries in `psi4/src/psi4` and then inherited by `core` without invoking `target_link_libraries`/`target_include_directories` again. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Bump CMake minimum requirement to 3.8; - [x] Rewrote `psi4_add_module` CMake macro. Now it takes `bin` or `lib` argument, name of module, and list of sources. Note that the macro:; - Now defines **two** global lists of libraries `core` will link to, one for `bin`s and one for `lib`s. This is needed because `lib`s need to appear last in the link line to avoid missing symbols.; - Sets source file properties to generate position-independent code with symbols hidden by default.; - [x] Rewrote downstream `CMakeLists.txt` so that: ; - Sources are in a list, with one source file per line, for easier diff inspection.; - External dependencies are linked where they are used first.; - [x] Reordered `include`s in _some_ files according to the hierarchy: ; - For class implementation sources: header corresponding to current source file first (_.i.e._ `#include ""myself.h""` in `myself.cc`); - C++ standard headers, including `<omp.h>`; - Psi4 higher-level headers, _i.e._ `psi4/psifiles.h` &co.; - Psi4 headers in subdirectories _i.e._ `psi4/libmints/matrix.h` &co.; - Headers in current directory _without full path_.; - [x] `psi4/src/psi4/liboptions/liboptions_python.h` moved to `psi4/src/python_data_type.h` and ; `psi4/src/psi4/liboptions/python.cc` moved to `psi4/src/python_data_type.cc`. These are now compiled and linked as part of `core`, rather than `liboptions`. ## Questions; I note that `mrcc.cc` and `civect.h` include `pybind11.h`. It might be a good idea to move those bindings one level up, directly into `core` without spreading the dependency too deep in the code. Opinions?. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1358:49,depend,dependencies,49,https://psicode.org,https://github.com/psi4/psi4/pull/1358,2,['depend'],['dependencies']
Integrability,"## Description; Closes #2310 - an error message is more helpful than a segfault, in my opinion. ## Checklist; - [x] Tests added for any newly trapped keywords; - [x] cc test still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2450:40,message,message,40,https://psicode.org,https://github.com/psi4/psi4/pull/2450,1,['message'],['message']
Integrability,"## Description; Completely changes the algorithm used for fitting diatomic potentials from Lagrange interpolations (was tens of thousands of lines of Python) to using [weighted least squares](http://dx.doi.org/10.1063/1.4862157), which can be implemented with a couple of lines of Python. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] Remove the old interpolation code.; - [x] Add weighted least squares routine.; - [x] Add exception to handle non-convergent cases.; - [x] Document changes.; - [x] New function to plot the fit to screen/file using matplotlib. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/515:447,rout,routine,447,https://psicode.org,https://github.com/psi4/psi4/pull/515,1,['rout'],['routine']
Integrability,"## Description; Continues from #1120. pyoptking largely plumbed in. ## Todos. Failing tests from full suite. These will definitely include (a) functions to opt, (b) mixed basis sets, an odd thing in fnocc2 where I can't get the wfn to freeze core.; - [ ]	 17 - cbs-xtpl-opt (Failed); - [ ]	 18 - cbs-xtpl-func (Failed); - [ ]	 20 - cbs-xtpl-wrapper (Failed); - [ ]	114 - dcft5 (Failed); - [ ]	204 - fnocc2 (Failed); - [ ]	267 - opt-lindep-change (Failed); - [ ]	277 - opt8 (Failed); - [ ]	281 - opt13 (Failed); - [ ]	282 - opt14 (Failed); - [ ]	283 - opt-irc-1 (Failed); - [ ]	284 - opt-irc-2 (Failed); - [ ]	285 - opt-irc-3 (Failed); - [ ]	301 - pubchem1 (Failed); - [ ]	304 - pywrap-all (Failed); - [ ]	393 - python-pubchem (Failed); - [ ]	419 - gcp-pbeh3c (Failed); - [ ]	428 - pcmsolver-opt-fd (Failed). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for preliminary review. hopefully the optking team can work off this.; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1335:341,wrap,wrapper,341,https://psicode.org,https://github.com/psi4/psi4/pull/1335,1,['wrap'],['wrapper']
Integrability,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/865:64,integrat,integrated,64,https://psicode.org,https://github.com/psi4/psi4/pull/865,3,"['depend', 'integrat']","['dependency', 'dependent', 'integrated']"
Integrability,## Description; Corrects additional JK logic edge cases found and increases the verbosity of the error messages. At the same time we should continuously discourage users to set a `SCF_TYPE` to anything besides `DF`. `MEM_DF` and `DISK_DF` are truly expert user options and I believe have been marked as such in a variety of places. Also added a throw if someone requests dlDF+D gradients as these have never been implemented. . Fixes #1021. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1023:103,message,messages,103,https://psicode.org,https://github.com/psi4/psi4/pull/1023,1,['message'],['messages']
Integrability,"## Description; Coupled Cluster methods in general do not compute the OPDM unless necessary, however when they do need to compute the OPDM they do not communicate that back to the wfn object. This has led to some confusion on the part of users trying to access CC density matrices. (see #504 ). . ~~The ccdensity module will now set `ref_wfn.arrays[""CC_OPDM_A""/""CC_OPDM_B""] ` with the ground state opdm.~~. CCdensity does the MO/AO transformation and sets the ref_wfn Da/Db members internally, no python, and no longer using the `arrays` map. ; ## Features; - CC OPDM can be accessed via wfn object returned from a property calculation that constructs it.; - eom root psivars for dipole/quadrupole components are now properly assigned.; ## Todos; - [x] ~~Python-side code to convert arrays[""CC_OPDM_A/B""] to ref_wfn.Da()/Db()~~; - [x] fix assignment of root psivars for cc routines ; - [x] add tests to check OPDM assignment in wfn through OEProps; ## Questions; - [x] @dgasmith re the suggestion you made in #504 : would that not give us a ref_wfn with two copies of the same data? One held in `ref_wfn.arrays[""CC_OPDM_A""]` and the second in `ref_wfn.Da` ? I think we would want the entry in the arrays table to be freed? . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506:873,rout,routines,873,https://psicode.org,https://github.com/psi4/psi4/pull/506,1,['rout'],['routines']
Integrability,"## Description; DCT's `cepa0` capabilities are removed. Per #1872, Psi has a problem with being consistent about what `cepa0` is. DCT has `cepa0` and is contributing to the problem. The best option is to just get rid of it. We only have it for testing purposes, but that's a Psi4Numpy task nowadays. The documentation even said don't use it for production. Besides, `cepa0`'s days as a useful point of comparison to `dct` are numbered. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Removed `cepa0` functionality from `dct` module. Use `occ`, `dfocc`, or `fnocc` instead.; - [x] Removed test checking for consistency between `fnocc` and `dct` CEPA because `dct` no longer has `CEPA`. ## Questions; - [ ] One procedural concern: At what point are we pulling the plug on getting new PRs into 1.4? I do not want keeping up with my PRs to take time that core devs should be spending moving 1.4 forward. ## Checklist; - [x] `ctest -L quick` passes; - [x] `ctest -L dct` passes; - [x] Documentation updated; - [x] Error message added. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1873:1065,message,message,1065,https://psicode.org,https://github.com/psi4/psi4/pull/1873,1,['message'],['message']
Integrability,"## Description; DFT-NL (=non-local) adds the VV10 correlation energy to arbitrary DFT functionals using functional specific vv10_b parameter. Conceptually similar to DFT-D. DOI: 10.1021/ct200644w. Fixes https://github.com/psi4/psi4/issues/870. * **User-Facing for Release Notes**; - [x] SCF option `DFT_VV10_B` enables and adds VV10 correlation according to DFT-NL scheme (fixed `vv10_c`, user-supplied `vv10_b`). ; - [x] `DFT_VV10_C` also gives access to the C parameter.; - [x] `NL_DISPERSION_PARAMETERS` similar to `DFT_DISPERSION_PARAMETERS`; - [x] `energy('functional-nl')` sets pre-defined vv10_b parameters for over 15 functionals. Recommended usage for most users.; - [X] `DFT_VV10_POSTSCF` enables a post-scf VV10 calculation. Large gain in speed with minimal loss of VV10 correlation energy.; - [x] added documentation. . * **Developer notes**; - [x] rebase+adjustment to PR https://github.com/psi4/psi4/pull/922; - [x] figure out DSD variant and param citations; - [x] re-integrate tests. * ** Notes**; * forcing pure HF with VV10 will seg. fault. (no integration grid). Only `energy('hf')` with `set DFT_VV10_B` is caught, not `energy('scf')` to allow custom access to the scf.; * NL parameters were entered manually, someone please check over them for strange values or typos; * tests are kept short, but we also don't test every dispersion dash parameter out there.; * for double-hybrids with multiple versions, the frozen core and/or D3BJ parent variant was chosen for a sensible consistency. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914:983,integrat,integrate,983,https://psicode.org,https://github.com/psi4/psi4/pull/914,2,['integrat'],"['integrate', 'integration']"
Integrability,"## Description; Described in great detail [here](https://github.com/psi4/psi4/issues/1736). ## Todos; I see this PR occurring in six major stages.; - [x] Introducing the OPDM/Lagrangian Tech; - [ ] Introducing the Conventional TPDM Tech; - [ ] Migrating Psi to new-style gradients; - [ ] Adding deprecation warnings for old-style gradients; - [ ] Miscellaneous revision corrections. ## Technical Discussions: May be tl;dr. ### Step One: OPDM/Lagrangian Tech; This PR introduces a new file, `integraltransform_opdm_lagrangian.cc`, to perform this backtransformation. This was previously done by `integraltransform_oei.cc:trans_one`. As this function has other responsibilities, `trans_one` is preserved. Compared to the previous interface, there are three key changes.; 1. Callers can pass in blocks of the OPDM/Lagrangian. This gives callers flexibility to pass in `oo` and `vv` and `ov` and `vo` blocks separately if available, and to not pass in a block that is conjugate to another block already passed in. This is frequently the case.; 2. Callers pass in these blocks as a map from orbital space labels to a SharedMatrix containing the relevant block and are responsible for attaching this to the wavefunction object via the `Da`, `Db`, and `X` member variables. This is the most important point for this section! All codes except `cc` already store the OPDM/Lagrangian as `SharedMatrix` objects, so this is the path of least resistance. The one holdout predates `libmints` and instead uses a `libmints` `Matrix`-like structure. (See discussion in Step Four.) Existing code had to perform many an astounding number of type conversions to ultimately convert back to the type we had originally. `dct`, for instance, went `SharedMatrix` -> `file2` -> QTOrdered Block Matrix -> PSIO Entry -> Lower Triangle -> Block Matrix -> Lower Triangle -> PSIO Entry -> `SharedMatrix`. We now stay in a `SharedMatrix` the entire time. This type change is why `integraltransform_oei.cc:trans_one` is not used in th",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1745:728,interface,interface,728,https://psicode.org,https://github.com/psi4/psi4/pull/1745,1,['interface'],['interface']
Integrability,"## Description; During the 'inversion' we accumulated some duplicate machinery for handling basis sets in the C++ and Python sections of the code; this PR aims to streamline the process. My goal is to keep the flexible Python parser, have it create a Python ShellInfo object, and use that to pass fixed-format information into the C++ basis set construction routines. The superfluous code in the Python and C++ layers should then be nuked. I also want to clean up the horrible mess I made when implementing ECPs. Very much a work in progress with feedback welcomed, especially from @loriab, @jturney and @rmcgibbo. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Pass pre-formatted data structure to C++ basis set constructor.; - [x] Get rid of unused `center` info from ShellInfo and GShell.; - [x] Remove unneeded code:-; - [x] C++ basis set parser.; - [x] Python GaussianShell.; - [x] C++ ShellInfo.; - [x] Tolerate integers where floats are expected in basis set input.; - [x] Fold ECPs into BasisSet objects.; * **User-Facing for Release Notes**; - [x] Fixed bug that prevented integers in basis set exponents/coefficients from being handled correctly, and another that truncated them to 8 digits after the decimal. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/734:358,rout,routines,358,https://psicode.org,https://github.com/psi4/psi4/pull/734,1,['rout'],['routines']
Integrability,"## Description; Enable mp2-d gradients (for dfmp2 only). ## Todos; - [x] interface and test mp2-d findif and analytic gradient code, calling QCEngine and a different version of the `mp2d` executable (was v0.1, now v1.1); - [x] `dashparam.py` moved in QCEngine https://github.com/MolSSI/QCEngine/pull/85 so changes needed to be made here, too; - [x] set disp qcvars on wfn, not core; - [x] separate processing of `_disp_functor` so it can work better with mp2.; - note that mp2d energies follow the ""dft"" pattern in `proc.py`, while gradients follow the ""mp2"" pattern. This is awkward but simplest until dft double-hybrid gradients pave the way.; - [ ] none of this is going to work until aforementioned PR is merged and qcng `v0.7.0` released. ## Checklist; - [x] Tests added for any new features; - [x] full tests is clean locally, except for `dft-pruning`. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1661:73,interface,interface,73,https://psicode.org,https://github.com/psi4/psi4/pull/1661,1,['interface'],['interface']
Integrability,"## Description; Enables screening of small densities using LibXC's built-in functionality. Enables user to set custom values. ; This fixes, e.g., issues with calculating the H-atom with many functionals. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] introduces `xc_func_set_dens_threshold`; - [x] `DFT_DENSITY_TOLERANCE` as a (expert) user option; - [x] related PsiAPI options for Functional/LibXCFunctional/Superfunctional. ## Questions; - [ ] `lsda/meta_cutoff` routines seem unused. Remove?; - [x] default is **off** . ## Checklist; - [x] Tests added for any new features; - [x] documentation added; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ----. Python API notes (as one would use in `superfunctionals.py`); It is recommend to set the threshold via the SuperFunctional class; e.g. `sup[0].set_density_tolerance(1e-10) `. Alternatively one can set the threshold also via the LibXCFunctional class, and potentially; set individual thresholds for the components. Below sets the same threshold for all XC kernels.; ```; dens_cut=core.get_option(""SCF"",""DFT_DENSITY_TOLERANCE""); if sup[0].is_libxc_func():; sup[0].c_functionals()[0].set_density_cutoff(dens_cut); # print(""screening python:"",sup[0].c_functionals()[0].density_tolerance()); else:; for x_func in sup[0].x_functionals():; x_func.set_density_cutoff(dens_cut); for c_func in sup[0].c_functionals():; c_func.set_density_cutoff(dens_cut); ```; ---. Tests concerning the threshold:; `1e-12` passes all tests without issues; `1e-10` fails only at `pcmsolver-dft` else everything passes. Testing meta-GGA TPSS/aug-pcseg-1 on the A24 benchmark set /w ghost-atoms (simple organic molecules):; [cut10_tpss.apc1.out.txt](https://github.com/psi4/psi4/files/4475320/cut10_tpss.apc1.out.txt); [cut12_tpss.apc1.out.txt](https://github.com/psi4/psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1860:516,rout,routines,516,https://psicode.org,https://github.com/psi4/psi4/pull/1860,1,['rout'],['routines']
Integrability,"## Description; Errors in PSIO should probably be handled by calling `psio_error(...)`, instead of printing the error messages from the function where the error happens. This PR renovates this function to something more C++-style, and adds a new string argument that defaults to the empty string. This allows the callers of the function to prepend their own error messages to the text that eventually ends up in the error box, such as OS supplied error messages when a read/write/lseek system call fails. This should make it easier to clean up `wt_toclen` etc. (see #2700). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `psio_error(...)` can now take a string argument that will be printed first; - [x] Unnecessary includes are removed; - [x] Fixed size char array and C-style string manipulation is gone. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2711:118,message,messages,118,https://psicode.org,https://github.com/psi4/psi4/pull/2711,3,['message'],['messages']
Integrability,"## Description; Even though Intel+defaults conda gcc7.3, azure gcc-s, and c-f conda gcc9 are perfectly fine with it, defaults conda gcc7.3 as primary compiler segfaults if the `py_psi_get_atomic_point_charges` fn is removed. I don't understand it, but I will appease it. All other changes are fixing stray non-ascii chars, since that's one of my routine steps when things don't make sense. Checking full tests locally. EDIT: full tests clean. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2175:346,rout,routine,346,https://psicode.org,https://github.com/psi4/psi4/pull/2175,1,['rout'],['routine']
Integrability,"## Description; Exports intermediate energies computed within N-Body driver to psivars named `N-BODY {cluster-identity} TOTAL ENERGY` for workflow incorporation and sanity-checking. Convention for `cluster-identity`: `(monomer_tuple)@(basis_tuple)` enumerates the particular monomers involved in the cluster computation in `monomer_tuple`, and enumerates the basis set used within the cluster computation in `basis_tuple`. In this way, ghost monomers are easily identified as any fragment with basis functions (included in `basis_tuple` not present in `monomer_tuple`. For example,; ```; ""N-BODY (1, 2)@(1, 2, 3) TOTAL ENERGY"" => -529.655058639489; ```; indicates that the total energy for the fragment (1, 2) in basis set (1, 2, 3) is -529.66 [Eh]. . ## Todos; - [x] Variable documentation (pending notation consensus, see questions below). Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psivar export of intermediate energies in N-Body for workflow integration. ## Questions; - [ ] Is the cluster identification syntax described above suitably intuitive? Should the `@` symbol be replaced with another, perhaps `:`, to remove potential confusion with ghost atoms notation in the molecule block?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/952:1020,integrat,integration,1020,https://psicode.org,https://github.com/psi4/psi4/pull/952,1,['integrat'],['integration']
Integrability,"## Description; Extracts the `Exception`-based error message and prints it out in an attention-seeking box. ## Checklist; - [x] few manual tests. ## Status; - [x] Ready for review; - [x] Ready for merge. ----; Example:; ```; Cleaning optimization helper files. PsiException: Could not converge geometry optimization in 1 iterations. Traceback (most recent call last):; File ""/Users/kruse/qc/psi4.bin/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 29, in <module>; File ""/Users/kruse/qc/psi4.bin/lib/psi4/driver/driver.py"", line 1201, in optimize; raise OptimizationConvergenceError(""""""geometry optimization"""""", n - 1, wfn). psi4.driver.p4util.exceptions.OptimizationConvergenceError: Could not converge geometry optimization in 1 iterations. Printing out the relevant lines from the Psithon --> Python processed input file:; """""",""LiF2m""); core.IO.set_default_namespace(""LiF2m""); core.set_global_option(""BASIS"", ""minix""); core.set_global_option(""SCF_TYPE"", ""pk""); core.set_global_option(""GEOM_MAXITER"", 1); --> optimize('hf'). !----------------------------------------------------------- !; ! !; ! Could not converge geometry optimization in 1 iterations. !; ! !; !----------------------------------------------------------- !. Psi4 stopped on: Thursday, 09 April 2020 10:17AM; Psi4 wall time for execution: 0:00:00.77. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862:53,message,message,53,https://psicode.org,https://github.com/psi4/psi4/pull/1862,1,['message'],['message']
Integrability,## Description; Fedora switched to the use of [FlexiBLAS](https://www.mpi-magdeburg.mpg.de/projects/flexiblas) in Fedora 33 as a unified interface to various BLAS/LAPACK implementations. This PR ports the patch by Björn Esser from Fedora to Psi4 per Fedora's guidelines of contributing any patches back upstream. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2246:137,interface,interface,137,https://psicode.org,https://github.com/psi4/psi4/pull/2246,1,['interface'],['interface']
Integrability,## Description; First look at psi4-optking3.0 interface. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] replaces optking 2.0 call with optking 3.0 (python). ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1120:46,interface,interface,46,https://psicode.org,https://github.com/psi4/psi4/pull/1120,1,['interface'],['interface']
Integrability,## Description; Fix an error message which I [invalidated](https://github.com/psi4/psi4/pull/1949) last year. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2358:29,message,message,29,https://psicode.org,https://github.com/psi4/psi4/pull/2358,1,['message'],['message']
Integrability,"## Description; Fixes #1290 by wrapping calls to deprecated (and removed in Netlib's LAPACK 3.8.0) with appropriate replacements. **UPDATE**; I have added a `PSI_DEPRECATED` macro in `pragma.h` to be used to deprecate functions, classes, variables. It will emit a warning at compile-time. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added a `PSI_DEPRECATED` macro; - [x] Wrap call to `DGEGS` with `DGGES`. Deprecate `C_DGEGS`.; - [x] Wrap call to `DTZRQF` with `DTZRZF`. Deprecate `C_DTZRQF`.; - [x] Wrap call to `DGEGV` with `DGGEV`. Deprecate `C_DGEGV`; - [x] Wrap call to `DGELSX` with `DGELSY`. Deprecate `C_DGELSX`; - [x] Wrap call to `DGEQPF` with `DGEQP3`. Deprecate `C_DGEQPF`; - [x] Check whether `DGGSVD3` and `DGGSVP3` are available in `tgt::lapack`. Fence off their use accordingly based on the `LAPACK_HAS_DGGSVD3` and `LAPACK_HAS_DGGSVP3` preprocessor variables, respectively. ; - [x] Wrap call to `DGGSVD` with `DGGSVD3`, if the latter is available. Deprecate `C_DGGSVD`.; - [x] Wrap call to `DGGSVP` with `DGGSVP3`, if the latter is available. Deprecate `C_DGGSVP`. ## Checklist; None of these subroutines were used in Psi4, so I only ran smoketests locally.; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1314:31,wrap,wrapping,31,https://psicode.org,https://github.com/psi4/psi4/pull/1314,8,"['Wrap', 'wrap']","['Wrap', 'wrapping']"
Integrability,"## Description; Fixes #1353 by raising an error that DF was never implemented with the QC algorithm in `dcft`. Per discussions with @ssh2, I also added a message that the QC algorithm employs the hessian for DC-06, as the others haven't been implemented yet. ## Checklist; - [x] `ctest -R dcft` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1518:154,message,message,154,https://psicode.org,https://github.com/psi4/psi4/pull/1518,1,['message'],['message']
Integrability,"## Description; Fixes #1370 and cleans up some code relating to orbital occupations. `scf_iterator.py` is yapf-ified, the occupation printing code is now Py-side, and two variables specifying the same thing (`nirreps` and `nirrep_`) in the HF initialization have been condensed into a single variable. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] An error message is now raised when the electron count from DOCC and SOCC is inconsistent with the molecule's electron count. ## Checklist; - [x] `scf` and `findif` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1637:409,message,message,409,https://psicode.org,https://github.com/psi4/psi4/pull/1637,1,['message'],['message']
Integrability,"## Description; Fixes #1698. Psi wasn't sending AOs normalized to unity, and NBO was correcting it by transforming the Fock matrix and the density matrix both _inversely_ to the overlap matrix. That's not how you want to do it! The Fock matrix transforms the same way, but the density matrix (and the AO index of C) transform inversely. Because NBO can't be trusted to do the transformation correctly, Psi does it itself. To make coding that easier, the NBO writing was moved to Python. The C-code still exists until 1.5, where it shall be ripped out of `libmints`. Deprecation warnings have been added. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes a bug causing incorrect Psi to produce incorrect NBO input files involving Cartesian basis sets with angular momentum of d or more (#1698).; - [x] Moved NBO Writing python-side.; - [x] Please use `wfn.write_nbo(name)` to write NBO files from now on. ## Checklist; - [x] Confirmed that the old and new NBO interfaces produce the same input.47 files for the current test case and a test case with linear dependencies.; - [x] Confirmed that the NAO populations and energies match with the 6-31+G(d) basis between QChem and Psi4. This confirms the accuracy of the overlap, AO density, and AO Fock matrices. The disagreements are either in the last decimal place or due to setting up coordinate systems.; - [x] Confirmed that the MOs in terms of AOs, as reported by NBO, match with the 6-31+G(d) basis between QChem and Psi4. This additionally checks the accuracy of the C matrix. Again, the order of the d matrices shifts due to different orientation systems in my test cases. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1790:1013,interface,interfaces,1013,https://psicode.org,https://github.com/psi4/psi4/pull/1790,2,"['depend', 'interface']","['dependencies', 'interfaces']"
Integrability,"## Description; Fixes a bug that occurs when one runs `psi4 --qcschema` and requests that the wavefunction is returned. . Before the orbitals / fock matrix / etc. are returned, all AO-indexed tensors are sorted according to CCA ordering: `Ca` and `Cb` are dimension [AO x MO], so their rows are sorted. `Fa`, `Fb`, `Da`, and `Db` are all dimension [AO x AO], so they are sorted by both row and column. `epsilon_a` and `epsilon_b` are not AO-indexed, so they shouldn't be sorted at all. As an example, the following HF calculation has fewer MOs than AOs because of linear dependencies, and Psi4 will throw an error when `epsilon_a` is treated as if it were of length AO:; ```; import psi4. ret = psi4.schema_wrapper.run_qcschema({; ""molecule"": {; ""geometry"": [; 0.0, 0.0, -0.1294769411935893,; 0.0, -1.494187339479985, 1.0274465079245698,; 0.0, 1.494187339479985, 1.0274465079245698; ], ; ""symbols"": [""O"", ""H"", ""H""],; }, ; ""driver"": ""energy"",; ""model"": {; ""method"": ""hf"",; ""basis"": ""d-aug-cc-pvqz"" # larger basis -> more lin deps; }, ; ""keywords"": {; ""scf_type"": ""df"",; ""s_tolerance"" : 1e-4, # loosen lin dep cutoff; }, ; ""protocols"": {; ""wavefunction"" : ""orbitals_and_eigenvalues"",; } ; ; }); print(ret.error); ```. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2112:571,depend,dependencies,571,https://psicode.org,https://github.com/psi4/psi4/pull/2112,2,"['depend', 'protocol']","['dependencies', 'protocols']"
Integrability,## Description; Fixes crash when the automatic Cholesky procedure is triggered by a linearly dependent basis set. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes a bug where the program crashes when the automatic Cholesky cleanup is triggered; - [x] Adds a test for the automatic Cholesky cleanup; - [x] Doesn't print out the Cholesky decomposed matrix any more; saving tens to hundreds of megabytes in log file size; - [x] Unifies printout between the partial Cholesky and other orthogonalization methods. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1817:93,depend,dependent,93,https://psicode.org,https://github.com/psi4/psi4/pull/1817,1,['depend'],['dependent']
Integrability,"## Description; Fixes some of the issues with ERD in Psi4. Moves a piece of the normalization from ERD to Psi4. This prevents multiplication by zero inside ERD, which results in incorrect integral values. Note that the multiplication by zero doesn't happen in Psi4, as the normalization routine doesn't get called for a ""zero"" basis set (ie, in density fitting). **Warning** I don't know how well-tested ERD in Psi4 is. I still get some failing tests, although there is certainly an improvement from before. Ideas for why this might be are welcome. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587:287,rout,routine,287,https://psicode.org,https://github.com/psi4/psi4/pull/587,1,['rout'],['routine']
Integrability,## Description; Fixes the DKH interface in Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [X] Test case added comparing to a Molpro calculation. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/702:30,interface,interface,30,https://psicode.org,https://github.com/psi4/psi4/pull/702,1,['interface'],['interface']
Integrability,"## Description; Fixes up the OpenMP problems. This still needs some tidying, but you can start to take a look. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Mostly this polishes the new OpenMP/Math interface/detection by expanding it to C/CXX/Fortran (thanks, v2rdm, for playing your persistent role of complicating things) and making sure vars are propagated among the externalprojects. Key cmake option is `OpenMP_LIBRARY_DIRS` which is a `;`-sep PATH-like var to search for omp libs if not naturally found. closes #1041 ; - [x] fix a few DISK_DF in driver and add some long-awaited (really, look at the milestone history for that ticket) freq docs in #350 ; - [x] fatal_error's ERD; - [x] bump various upstream/downstream; - [x] get ambit back (can't readily test it except by building plugin). ## Questions; - [x] Roberto and Radovan should look over the CMake. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1053:267,interface,interface,267,https://psicode.org,https://github.com/psi4/psi4/pull/1053,1,['interface'],['interface']
Integrability,"## Description; Furthers the generality of integral transformations and enables a special workflow, `DIRECT_iaQ`, to alleviate disk IO when transforming to `pqQ` forms. Timings comparing the `DIRECT_iaQ` and `DIRECT` methods are inbound. Edit: Here are some tests that (almost comically) display the efficacy of `DIRECT_iaQ` over `DIRECT` + `pqQ`. 1. Test1: ; [input.txt](https://github.com/psi4/psi4/files/1740970/input.txt); [timer.txt](https://github.com/psi4/psi4/files/1740977/timer.txt). 2. Test2: ; [input.txt](https://github.com/psi4/psi4/files/1740966/input.txt); [timer.txt](https://github.com/psi4/psi4/files/1740974/timer.txt). Notice the difference between the `DFH: MO to disk` timers. . Edit2: I added a reduction on `max_val` in `prepare_sparsity` to ensure thread safety. This was incorrect before. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - DF_Helper now has three methods for integral transformations:; `STORE`: Contracts metric with AO integrals, stores, then transforms.; `DIRECT`: Transforms integrals, contracts with metric.; `DIRECT_iaQ`: Optimized `DIRECT` workflow when using `pqQ` transformed integrals. - DF_Helper outputs any transformed integral form you want: `Qpq`, `pQq`, or `pqQ`. The following can be used for each of the respective methods listed above:; `STORE`: `Qpq`, `pQq`, or (ill-advised) `pqQ`; `DIRECT`: `Qpq`, `pQq`, or (ill-advised) `pqQ`; `DIRECT_iaQ`: `pqQ`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/913:999,Contract,Contracts,999,https://psicode.org,https://github.com/psi4/psi4/pull/913,2,"['Contract', 'contract']","['Contracts', 'contracts']"
Integrability,"## Description; GauXC is a standalone library developed by @wavefunction91, among others, with the purpose of computing XC terms within Density Functional Theory (DFT) calculations in a massively parallel fashion, including utilization of multiple nodes via MPI, and GPU support. Of more interest to this PR, GauXC contains an implementation of the sn-LinK algorithm, a seminumerical method very similar to COSX for computing the exact exchange term (i.e., the K matrix). Like the XC components of GauXC, sn-LinK also has support for GPU execution. At PsiCon 2023, it was noted that GauXC's sn-LinK algorithm could be interfaced to Psi4 through the `CompositeJK` framework. This would give Psi4 its first-ever instance of noncommercial GPU support for the JK construction process. And that is the goal of this PR - interfacing Psi4 to GauXC's sn-LinK code via `CompositeJK`. This interface is implemented primarily via a new `SplitJK` derived class, `snLinK`, which contains the guts of the interface to GauXC. The `snLinK` constructor parameterizes and constructs the `GauXC::XCIntegrator` object and all related objects (e.g., load balancer, molecular weights partitioner), as well as other auxiliary work such as defining the GauXC execution space. `snLinK::build_G_component` constructs the K matrix from the input density via the GauXC integrator's `eval_exx` function. `build_G_component` also handles fundamental pre- and post-processing required for the involved matrices - Spherical Harmonic integral reordering permutations if `psi4_SHGAUSS_ORDERING` is set to the default option of gaussian , and Spherical-to-Cartesian transforms, if required, to enable GPU support (also forcible via the `SNLINK_FORCE_CARTESIAN` keyword). As a `SplitJK` instance, sn-LinK can be called within Psi4 via `SCF_TYPE = J_ALGO+SNLINK`, with `J_ALGO` being the J construction algorithm of choice (currently only `DFDIRJ`). If GPU support is enabled, the `SNLINK_USE_GPU` keyword can be turned on to run the sn-L",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:618,interface,interfaced,618,https://psicode.org,https://github.com/psi4/psi4/pull/3150,3,['interface'],"['interface', 'interfaced']"
Integrability,"## Description; Get ready for CODATA 2018. I'm stashing this branch for now where I won't forget it. Not targeting v1.4. ## Todos; - [x] sometimes had been importing directly from qcel.constants, which has been always 2014 but in future could be 2014 or 2018 depending on qcel version. So now everyone's using the 2018 object set up as `psi4.driver.constants`; - [x] prepare c-side constants in physconst.h dumped by qcel; - [ ] heal tests from constants change. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1795:259,depend,depending,259,https://psicode.org,https://github.com/psi4/psi4/pull/1795,1,['depend'],['depending']
Integrability,"## Description; Honestly, this started as just updating pybind11 to detect via config. It got out of hand, but to good results. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/554:254,message,message,254,https://psicode.org,https://github.com/psi4/psi4/pull/554,1,['message'],['message']
Integrability,"## Description; I don't think its too much of an exaggeration to say that only psinet and I build the psi4 documentation. Since other projects package their documentation helpers, we, too, can spin off the derived psi4 sphinx theme (now at psi4/sphinx_psi_theme) and evict a lot of code from the repo and automatically take advantage of updates to our dependencies, rather than every two years when I get to a docs overhaul. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Removes all sphinx themes and autoapi helpers from repo; - [x] To fully build the docs, follow the prompt to `conda install sphinx-psi-theme cloud_sptheme astropy-helpers graphviz python-graphviz -c conda-forge -c astropy -c psi4`; - [x] To use the psi4 theme (or do variants, e.g. http://psicode.org/pylibefpmanual/master/index.html) or autoapi setup in another project, just copy and modify the `doc/CMakeLists.txt` and `doc/source/conf.py.in`; * **User-Facing for Release Notes**; - [x] Incidentally, psi4/psi4#792 now fixed. Needed to have dot/graphviz installed at build time. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/801:352,depend,dependencies,352,https://psicode.org,https://github.com/psi4/psi4/pull/801,1,['depend'],['dependencies']
Integrability,"## Description; I found a few classes that shouldn't be exported. From ecpint.h, `AngularIntegral` and `RadialIntegral` are only used internally and are implementation dependent. In potentialint.h, the functors reside fully in the header and thus don't need to be ""exported"". ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1415:168,depend,dependent,168,https://psicode.org,https://github.com/psi4/psi4/pull/1415,1,['depend'],['dependent']
Integrability,"## Description; I need to give `psimrcc` a wavefunction for the upcoming `libtrans` refactor. Step one is to take the existing `compute_energy`-like functions and make them conform to the normal `Wavefunction::compute_energy` API. No arguments. Returns a double. A follow-up PR will be needed to actually give `psimrcc` a wavefunction. I'm hopeful this will not be another long series like the `occ` one. I don't care whether this is in 1.4 or not. Pinging @fevangelista and @andysim, the two people who have some chance of remembering how this code works. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Conform `psimrcc`'s myriad `Wavefunction::compute_energy`-like functions to the `Wavefunction` interface, as prep for the next PR.; - [x] Removed unpublished ""perturbative CBS"" capabilities from `psimrcc` and adds appropriate warnings. ## Questions; - [x] @fevangelista, can you explain what the ""perturbative CBS"" is? Those should be added to the current energy somehow, but I can't tell which of the three flavors to add, or even what this is. ## Checklist; - [x] `ctest -R psimrcc` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1854:750,interface,interface,750,https://psicode.org,https://github.com/psi4/psi4/pull/1854,1,['interface'],['interface']
Integrability,"## Description; I originally had grand plans for a few of the base classes, but this turned out to be harder then expected so this PR kind of took a turn. Best description of this is perhaps ""general cleanup"". ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Might compile faster. As a note two libraries have moved:; ```; ""psi4/libparallelPsiOutStream.h"" -> ""psi4/libpsi4util/PsiOutStream.h""; ""psi4/libparallel/process.h"" -> ""psi4/libpsi4util/process.h""; ```; There is no longer a `""psi4/libparallel/libparallel.h""`, you may need to include one of the two above libraries. - [x] Removed several IWL functions; - [x] Removed some `libciomr` functions; - [x] Cleaned up `libparallel`; - [x] Fixed a few bugs and syntax issues in Wavefunction; - [x] Removed some headers from `Process` and `psi4-dec` which required a larger header shake up. I hope we are finally starting to peel away the points where we accidentally include too many headers and those headers go viral.; - [x] Still working to pull pybind11 out of a few layers; - [x] A GEMM routine with the tag line ""a reasonably fast matrix multiply (at least on the DEC3100)"" was removed.; - [x] `extern1` was temporarily removed from quickest. Still need to decided on what to do here. ## Questions; - [x] Anything else we can do?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/736:1108,rout,routine,1108,https://psicode.org,https://github.com/psi4/psi4/pull/736,1,['rout'],['routine']
Integrability,"## Description; I was investigating the ""memory not being released"" problem that @fevangelista brought up at the developer meeting. For the case of a simple HF energy, the wavefunction object indeed persisted after the energy call. Investigation showed its lifetime was controlled by the fact that we had the legacy wavefunction stored, and garbage collection didn't occur until the legacy wavefunction changed. Seeing as we don't actually use the legacy wavefunction machinery for anything in Psi, except part of a plugin interface where we tell people to prefer explicit wavefunction passing, this PR deprecates the commands for removal in 1.5, so we can collect garbage faster. This PR doesn't explain Francesco's reports of _increasing_ memory consumption for FINDIF, but it at least is a start. ## Todos; - [x] Deprecates `legacy_wavefunction` and `set_legacy_wavefunction`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2106:523,interface,interface,523,https://psicode.org,https://github.com/psi4/psi4/pull/2106,1,['interface'],['interface']
Integrability,"## Description; If we're going to check SCF-dependent quantities to 1e-9, let's converge our SCF that tightly. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2322:44,depend,dependent,44,https://psicode.org,https://github.com/psi4/psi4/pull/2322,1,['depend'],['dependent']
Integrability,"## Description; If you look closely, the driver structure and its autodoc are a little weird, as reviewed in #2166. Also, many driver functions are minimally documented or don't take advantage of typing to guide the developer. This PR considers only `driver/p4utils/` directory and fills in docstrings and typing while checking the built docs for maximum info and links. Even when I saw good things to change in code, for this most part, this PR leaves them be and focuses on docstrings. Piece 1 from the ""driver import"" series, #2166 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] add `__all__` to guide `from module import *`. This same effect can be had by `def _functionname` but the PEP https://peps.python.org/pep-0008/#public-and-internal-interfaces still recommends `__all__`.; - [x] a few things actually retired: ; - `PsiImportError`, `CSXError`, `Dftd3Error` -- not used since v1.4 at latest; - `fchkfile_to_string` hidden in fchk.py (just opening and reading a file); - `basname` hidden in python_helpers.py (one-liner); - `format_kwargs_for_input` (as soon as v1.4); - `extract_sowreap_from_output` (as soon as v1.4); - `format_currentstate_for_input` (as soon as v1.4); - `Table` (as soon as v1.4); - `print_stdout` (as soon as v1.4); - `print_stderr` (as soon as v1.4). ## Checklist; - Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2592:808,interface,interfaces,808,https://psicode.org,https://github.com/psi4/psi4/pull/2592,1,['interface'],['interfaces']
Integrability,"## Description; In accordance with https://github.com/MolSSI/QCElemental/pull/275, return certain files in qcschema to be pruned down by user protocols. Bump qcel to 0.24.0 (and qcng to 0.23.0 once it's minted). Note that this can't handle the wfn file b/c binary. And it can't handle `timer.dat` b/c there's no fixed place it lands (I can get it to save calling schema_wrapper directly but not for QCEngine calling psi4). ## Checklist; - [x] Tests added for any new features -- tested at qcengine test_canonical_fields; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2361:142,protocol,protocols,142,https://psicode.org,https://github.com/psi4/psi4/pull/2361,1,['protocol'],['protocols']
Integrability,"## Description; In master Psi, both the `Wavefunction` class and the `MintsHelper` class have their own copy of `basissets_`, a map from basis name to the actual `BasisSet`. There are `get_basisset`, `set_basisset`, and `basisset_exists` methods to manipulate `basissets_`, which are identical between the two classes. So `basissets_` and associated methods are functionally identical on the two classes. The problem is that every `Wavefunction` object is already guaranteed to have a `MintsHelper` object, there is no reason for the `Wavefunction` object to ever have a different `basissets_` from its `MintsHelper` (because `Wavefunction`’s only use for `basissets_` is aforementioned methods), but there is no mechanism to synchronize the `basissets_` variables of a `Wavefunction` and its `MintsHelper`. So we can have two sources disagreeing about the same information. This PR solves the problem by moving the responsibility for managing `basissets_` onto `MintsHelper`. The `Wavefunction` methods now just call the relevant `MintsHelper` methods. ~~I’m in favor of deprecating the offending `Wavefunction` methods, but I’ll open this to core developer discussion before adding that to the PR because I expect changing `Wavefunction` API will be controversial.~~. I’ve also marked some functions as override to silence annoying compiler warnings. Obligatory Pings: @jturney for `libmints` changes, @loriab for API changes. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Silences compiler warnings; - [x] Eliminates `wavefunction.basissets_` so that `wavefunction.mintshelper().basissets_` is the source of truth. ## Questions; ~~Do we want to deprecate `wavefunction.basissets()`, `wavefunction.get_basisset()`, `wavefunction.set_basisset()`, and `wavefunction.basisset_exists()` in favor of `wavefunction.mintshelper().method_name_here()`?~~. ## Checklist; - [x] Quick tests, dkh tests, and x2c tests all pass. ## Status; - [x] Ready for revie",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1970:726,synchroniz,synchronize,726,https://psicode.org,https://github.com/psi4/psi4/pull/1970,1,['synchroniz'],['synchronize']
Integrability,"## Description; In trying to make a good test case for #2068, I found some normalization problems that are fixed in this PR. Also, the analytic gradients were not implemented, has been addressed. The interface used here is terrible, but will eventually be merged with #1720 to give a better user experience; this test case will be helpful in making sure everything works correctly during that development. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Add a new feature to allow arbitrary order, arbitrary exponent multipoles to be defined.; - [x] Implement analytic gradients for the above.; - [x] New test case to make sure it all works and to demonstrate the current (terrible and to be replaced) syntax. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2069:200,interface,interface,200,https://psicode.org,https://github.com/psi4/psi4/pull/2069,1,['interface'],['interface']
Integrability,"## Description; Issue #846 has been fixed, so a contraction set where all primitives have a coefficient of 0 will remain untouched. While I was poking around the file, I decided to clean up some other things. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] 0 coefficient primitives will no longer be normalized. This should prove useful to planned ECP changes.; - [X] Miscellaneous code cleanup. ## Questions; - [ ] ECP team, I assume you're happy with this? ; - [ ] In the zero coefficient case, do we want to explicitly check this is an ECP by checking radial powers? If so, what would we do otherwise, raise some error?; - [ ] I also assume that I'm within the Psi4 coding style here?. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/849:48,contract,contraction,48,https://psicode.org,https://github.com/psi4/psi4/pull/849,1,['contract'],['contraction']
Integrability,"## Description; It seems that in the course of harmonizing dftd4 in QCEngine, I touched enough dftd3, gcp, and mp2d that #2142 (dftd4 and minor dftd3, gcp, mp2d) can't be put off after the QCEngine v0.19 release. So here's the non-dftd4 tweaks. ## Todos; - [x] switch gcp interface to QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] Note that this won't build until new QCEngine release. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2180:272,interface,interface,272,https://psicode.org,https://github.com/psi4/psi4/pull/2180,1,['interface'],['interface']
Integrability,"## Description; It would be nice to be able to pass in an external hamiltonian to be able to test-drive some code (e.g. for the calculation of external potentials) without always needing to recompile. This PR adds this possibilty. I am testing it by making a calculation without an external hamiltonian but with a potential (and saving the nuclear_repulsion addition, which is not mediated by the additional H term) and comparing it to a simulation without an external potential, but with the captured potential hamiltonian. FYI: This is on top of #3148 , because otherwise the tests don't pass.; Also fyi: I did not build the docs. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] Added possibility to pass in an external hamiltonian contribution via `energy(..., external_hamiltonian = np.array(...))`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Added possibility to pass in an external hamiltonian contribution via `energy(..., external_hamiltonian = np.array(...))`.; - [ ] Tested via simulation with external_potential and an equivalent external_hamiltonian. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3149:381,mediat,mediated,381,https://psicode.org,https://github.com/psi4/psi4/pull/3149,1,['mediat'],['mediated']
Integrability,"## Description; Legacy modules that were default in the past, but have been replaced will move to the [psi4pasture](http://github.com/psi4/psi4pasture) repo. The ccsort/transqt2 modules now live there. This PR introduces some machinery for installing them from psi4's build, and allowing them to be used in the driver at run-time if they are installed. ## Todo; - [x] cleanup history; - [x] find specific libs that have missing symbols + add `${PRE/POST_LIBRARY_OPTIONS}` to each not all.; - [x] Docs: Finalize build instructions for `PastureRequiredError`; - [x] Docs: Add transqt2/ccsort note to read_options.cc; - [x] Tests: add tests as lori mentioned . * **Developer Interest**; - I would say this functionality is experimental since pasture does not have any travis checks.; - I am not completely confident in the way I have ""injected"" pasture.addins.ccsort_transqt2 into proc.py, but it seems to work okay. See the code comments; - Does the pasture module even need to be installed w/in lib/psi4/driver?. * **User-Facing for Release Notes**; - ccsort/transqt2 are no longer part of psi4_core; - adds ENABLE_ccsort and ENABLE_transqt2 flags to optionally build/install them from pasture. * **Self imposed CI checks**; - [x] MacOS/clang/python2 build + use pasture ok; - [x] MacOS/clang/python3 build + use pasture ok; - [x] Linux/gcc/python2 build + use pasture ok; - [x] Linux/gcc/python3 build + use pasture ok. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/534:832,inject,injected,832,https://psicode.org,https://github.com/psi4/psi4/pull/534,1,['inject'],['injected']
Integrability,## Description; Libint2 and shell screening. ## Todos; - [x] initial cmake integration of fixed AM Libint2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721:75,integrat,integration,75,https://psicode.org,https://github.com/psi4/psi4/pull/1721,1,['integrat'],['integration']
Integrability,"## Description; Make `core.Matrix.np_write(filename=None)` safer. The method returns a `dict` whose values are `np.ndarray`s. Currently, those arrays are views of memory owned by the `core.Matrix`, which means code like this is actually broken:. ```; def function():; matrix = function_that_returns_a_core_Matrix(); return matrix.np_write(filename=None); ```. This PR changes `np_write` to return copies of the data when `filename=None`, so it's less of a footgun. Eventually the need for this might go away, once the numpy->core.Matrix reference counting integration is accomplished, but that's much tricker. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/750:556,integrat,integration,556,https://psicode.org,https://github.com/psi4/psi4/pull/750,1,['integrat'],['integration']
Integrability,"## Description; Make example 1 of #2231 at least _run_. I'm not quite sure it's correct just yet, though. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixed a bug causing crashes upon linearly dependent basis sets for some correlated methods. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] We're copying SO-basis data into this and then transforming to the MO-basis, so yes, I'm quite sure this is the correct dimension. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2857:321,depend,dependent,321,https://psicode.org,https://github.com/psi4/psi4/pull/2857,1,['depend'],['dependent']
Integrability,"## Description; Minor ECP fixes, so that more ECP's from EMSL Basis set exchange work out of the box. See issue #926 . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Extended naming tables to include H-shell (Stuttgart-Cologne ECP's eg. for Hg need it); - [x] Trapping ""0.0"" in contraction coefficients. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937:346,contract,contraction,346,https://psicode.org,https://github.com/psi4/psi4/pull/937,1,['contract'],['contraction']
Integrability,"## Description; Mostly, get psi4 up-to-date with pybind again, remove extraneous python linking, and sanitize chemps2 & pcmsolver test case names and ctest labels. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] add message-coloring module, useable by all, and used to warn about <4.9 GCC and highlight addon detection; - [x] make autodocing tools aware of the detci properties psivars that are now set py-side; - [x] re-work some list casting that (with pybind11 Nov 16 updates) broke our array options; - [x] dropped the versioned code object library in psi4/src/CM; - [x] documented python/pybind linking a bit; - [x] ctest `shorttests` gone and `minitests` in; * **User-Facing for Release Notes**; - [x] `dmrg` tests and label now accessed through `chemps2`; - [x] `pcmsolver` tests dropped ""pcm"" prefix; - [x] tests involving external code now accessible with label `addon` rather than `ext-exe-dep`; - [x] no longer linking to libpython. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/524:283,message,message-coloring,283,https://psicode.org,https://github.com/psi4/psi4/pull/524,1,['message'],['message-coloring']
Integrability,"## Description; Much misc. ## Todos; - [x] Better error msg for MathOpenMP, mostly when GCC+MKL and can't find iomp5; - [x] Fix items in p4c4 interface; - [x] ccsd(t) grad in cfour v1 (came down to an unneeded `\s*`). test-suite-wise, approx works equally well with v1 or v2; - [x] DROPMO handling; - [x] backport a lot of the parsing changes from github.com/qcdb/qcdb to here; - [x] modernize Molecult.init_with_xyz(); - [ ] @JonathonMisiewicz, if you hit can't-align errors, let me know, and I'll switch it out to new mech; - [x] I forgot to obfuscate the global variable names used in pylibefp in #953, so do that here; - [x] fix [forum 1009](http://forum.psicode.org/t/nameerror-name-wfn-is-not-defined/1009/2?u=loriab); - [x] update a bunch of docs items that had accumulated; - [x] officially make python 2.7 unacceptable to the build system. ## Checklist; - [ ] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1122:142,interface,interface,142,https://psicode.org,https://github.com/psi4/psi4/pull/1122,1,['interface'],['interface']
Integrability,"## Description; New MBIS functionality enables computation of atom-in-molecule (AIM) volumes (<r^3>). More often in force field development, a volume ratio between the AIM volume and the free atom is needed (basically describes the difference in atomic volume between a free atom and an atom in a molecule). This PR automates the computation of MBIS volume ratios by computing free-atom densities at the same level of theory as the molecule. The free-atom computations are on the ground state of a given atom, with the multiplicity taken from the SAD code. These free-atom densities are then run through the MBIS routine, and volumes are computed along with the desired volume ratios. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Automate computation of unique free-atom densities; - [X] Compute volume ratio in MBIS routine. ## Questions; - [ ] Running the MBIS code now causes many UHF computations to run, do we need all of the printing here?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127:613,rout,routine,613,https://psicode.org,https://github.com/psi4/psi4/pull/2127,2,['rout'],['routine']
Integrability,## Description; Non-urgent stuff I found this week. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Expand my collection of Windows problems and solutions after Tuesday's fun with #2624 ; - [x] Update supported Py versions in README; - [x] Fix a test that wasn't declaring its dependencies; - [x] Make non-optional the use of `git --atomic` for versions/tags/CI conda; - [x] Expand logic on whether to build conda-pkg or not to include the 1.N.x maintenance branches. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2629:336,depend,dependencies,336,https://psicode.org,https://github.com/psi4/psi4/pull/2629,1,['depend'],['dependencies']
Integrability,"## Description; Occasionally we had issues cropping up where users were assigning views that were not tied to the Matrix object. Consider the following:. ```; mat = Matrix(5, 5); view = mat.np; del mat; ```. Previously, `mat` and `view` lifetimes were not tied together. The NumPy array would point to deleted memory in the above example. With this PR, the object lifetime are tied together and `mat` is not actually deleted in this example (just a handle to it) so that the `view` remains valid. This also allows operations like `view = Matrix(5, 5).np` and `Cocc = wfn.Ca_subset(""AO"", ""OCC"").np` to work without issue. A small downside is that the views cannot be cached as this would lead to circular nurse/patient relationships and prevent the objects from ever being garbage collected. This makes the `.np` accessors take slightly more time (~2-5us depending on number of irreps vs 0.5us). However, unless you are looping over individual indices and setting values this really shouldn't matter and the `mat.get/mat.set` functionality can be used for this with the ~0.4us latency. There is a chance this is fixable and we can revisit if it comes an issue. I also was able to delete a great deal of rather hideous code which makes me quite happy. Special thanks to @rmcgibbo for poking me about this and helping with idea and also to the PyBind11 team for ""fixing"" this a few months ago (doh!). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Can now obtain stand-alone views with correct reference counting (`view = Matrix(5, 5).np`).; - [x] Dimension objects can now be built python-side from list `Dimension([5, 5, 5])`.; * **User-Facing for Release Notes**; - [x] The NumPy interface is now more robust. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/751:854,depend,depending,854,https://psicode.org,https://github.com/psi4/psi4/pull/751,2,"['depend', 'interface']","['depending', 'interface']"
Integrability,"## Description; PR 1 / ? of global diagonalizer cleanup (#2642); This is a subset of #2642, and the rest of #2642 will be broken up into new PRs after this is merged. `sq_rsp.cc` contained an entire commented out diagonalizer function, and some comments related to that, from 2010. (?); Deleted. rsp.cc still used its own implementation of a diagonalizer, now it has been rewritten to use the LAPACK routine instead.; This has allowed the deletion of tred2.cc and tqli.cc. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Remove unused code from sq_rsp.cc; - [x] Rewrite rsp.cc. ## Questions; - [ ] The **only** user of rsp(...) is fine with ascending order results: https://github.com/psi4/psi4/blob/ad2063594a88fd9f60d5a122398bf2f6ae2102a9/psi4/src/psi4/detci/diag_h.cc#L245; Based on this, I have not reimplemented the old function's support for reordering the results (`matz > 1`), so this will be a change in behaviour and rsp(...) is marked as `PSI_API`. Is this objectionable? It now fails with an error message if someone tries to ask for the eigenvalues in descending order.; - [x] It is not documented if the packed lower-triangular matrix on the input is supposed to be row-major-packed or column-major-packed. Based on the call site above, I guessed it is row-major packed. Is this correct? LAPACK expects column-major-packed, so I am transforming the array to be just so.; - [ ] I _think_ I got everything right, but I am not entirely sure if the DETCI test suite is thorough enough to find out if I did not. Codecov suggests the call site is not covered (https://app.codecov.io/gh/psi4/psi4/blob/master/psi4/src/psi4/detci/diag_h.cc), but the last coverage measurement seems to have been a year ago. ## Checklist; - [x] No new features; - [x] All or relevant fraction of full tests run, see [test.log](https://github.com/psi4/psi4/files/9162565/test.log). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2637:400,rout,routine,400,https://psicode.org,https://github.com/psi4/psi4/pull/2637,2,"['message', 'rout']","['message', 'routine']"
Integrability,"## Description; PSIO toclen errors are extremely cryptic, making them even more difficult to debug,; I have recently ran into another input that produces the error in #2261 so decided to try taking a look.; I have not debugged the actual issue, but made some changes to the function raising the error to hopefully make the error messages more informative. The `read`/`write`/`lseek` syscalls deposit an OS-defined error code in `errno`, which can be decoded to an OS-provided, human-readable (possibly non-English) error message. This should at least tell the person seeing it vaguely what is wrong, ie. is the disk full, does the file not exist, etc. The toclen functions have been renovated in general, `const` added where appropriate, common code factored out, etc. Error conditions now properly use `psio_error(...)` and pass the OS-provided message to it. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Error messages from `PSIO::rd_toclen` and `PSIO::wt_toclen` are now more informative; - [x] The new function `decode_errno(int)` is now available for use after system calls to decode `errno`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2700:329,message,messages,329,https://psicode.org,https://github.com/psi4/psi4/pull/2700,4,['message'],"['message', 'messages']"
Integrability,"## Description; Partial fix to #2634. thanks, @TiborGY, for that report. The mrcc interface beyond single-points was another casualty of distributed driver. The Allen test needs a further fix that involves moving a dictionary. In the meantime, this heals all the ctests. Update: I've got all parts fixed locally, and one of these changes is no longer necessary. I'll leave this open until the other PR available, in case someone needs a quick fix. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2638:82,interface,interface,82,https://psicode.org,https://github.com/psi4/psi4/pull/2638,1,['interface'],['interface']
Integrability,"## Description; Per discussion on the conference call, this PR gives some error messages for cases where using a serialized wavefunction would give a segfault. 1851 is still an issue, but one that shouldn't hold up 1.4 or eat my time to straighten out `dfocc`. I'm modernizing enough modules in Psi as it is... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Replace some segfaults from #1851 with actual error messages. ## Checklist; - [x] Tested that all four error modules used to segfault and now give an error message. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1858:80,message,messages,80,https://psicode.org,https://github.com/psi4/psi4/pull/1858,3,['message'],"['message', 'messages']"
Integrability,"## Description; Per issue #2374, this PR adds an interface to Yukawa ERIs from Libint2. ## Questions; - [x] How would I test my new code? (How are erf kernels tested?); - [x] Do I need to add functions in MintsHelper for the Yukawa kernel?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2386:49,interface,interface,49,https://psicode.org,https://github.com/psi4/psi4/pull/2386,1,['interface'],['interface']
Integrability,"## Description; Phase 1 in trying to be more systematic about checking consistency within psi. Also, separate a set of references that can reside in qcng for common testing btwn p4/qcng/qcdb. This runs several classes of tests --; * can each mp2-capable module do something sensible with each scf_type?; * can each mp2-capable module return the same right answer for each capable scf_type/mp2_type?; * can each mp2_type returns something good w/o the user knowing about modules?; * all above for gradient, plus check against findif; * for all these, is the full qcvars, return values, `CURRENT ENERGY`, etc. contract fulfilled for both P::e and wfn? . ## Todos; - [x] check mp2 fundamentals from mp2 energy targets (e.g., `MP2 TOTAL ENERGY` from `energy('mp2')`; - [x] check mp2 fundamentals from mp2 gradient targets (e.g., `MP2 TOTAL ENERGY` from `gradient('mp2')`; - [ ] check scs mp2 from mp2 targets (e.g., `CUSTOM SCS-MP2 TOTAL ENERGY` from `energy('mp2')`; - [x] check mp2 fundamentals from post-mp2 targests (e.g., `MP2 TOTAL ENERGY`) from `energy('fnoccsd')`; - [x] routing; - [x] I think we got the logic of `check_disk_df` off a little in proc.py in that we were checking if correlated method type was `DISK_DF` (my fault) and along the way forbidding `PK` refs with `DF` correlated. I think I fixed this for dfocc but haven't done df with fnocc yet.; - [x] Also corrected logic that was letting through mixed ref+corl derivatives (e.g., pk+df) that had gotten lost. See #245 for much discussion. tl;dr we have none, so let's not continue to let psi proceed with calculations that give beer + wrong answers; - [x] CISD is a poor way to calculate MP2, and it's not like we don't have other modules for RHF & ROHF besides DETCI. And @CDSherrill has allowed that we're unlikely to get to the bottom of it, so closes #311 . And the mp2 detci code is unsteady for multiple-detci-single-psi4 calcs, so it's not smooth to test.; - [x] qcvars; - [x] Newly sets `<mtd> TOTAL GRADIENT` from findif in",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850:608,contract,contract,608,https://psicode.org,https://github.com/psi4/psi4/pull/1850,1,['contract'],['contract']
Integrability,"## Description; Previously, the `dfocc`, `dfmp2` and `scfgrad` modules all had nearly identical code to compute the **metric term** of density fitted gradients, the contraction against the metric integral derivatives. `dfmp2` even did this _twice_ for a total of 4 times near identical logic appears. (It was 5 before #1953.) This PR consolidates those into a single `MintsHelper` method. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Various classes and functions now take in a `MintsHelper` rather than basis sets directly; - [x] Metric integral derivative contractions are consolidated into `MintsHelper`. ## Checklist; - [x] Timing tests show that with these changes, there's a slowdown of <0.1s, and scaling is effectively constant compared to the scaling of the much more expensive SCF iterations and the `Amn_x` term. I can live with this.; - [x] Quick tests and gradient tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1974:165,contract,contraction,165,https://psicode.org,https://github.com/psi4/psi4/pull/1974,2,['contract'],"['contraction', 'contractions']"
Integrability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; - [x] bump pb11 internal build to v2.5.0; - [x] bump ambit internal build to v0.4.1; - [x] update paper and acknowledge more folks in header; - [x] add extra arg to bindings of so_overlap/kinetic so p4n ref impl can run as-is; - [x] fix missing qcvars, wfn settings in fnocc and occ for conventional LCCD; - [x] add conventional LCCD tests to standard_suite courtesy of @JonathonMisiewicz reference implementation over at p4n, https://github.com/psi4/psi4numpy/tree/master/Coupled-Electron-Pair-Approximation; - [x] depends on https://github.com/MolSSI/QCEngine/pull/244 for data. Furthermore all standard_suite tests are presently suppressed until qcng v0.15 minted. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1913:596,depend,depends,596,https://psicode.org,https://github.com/psi4/psi4/pull/1913,1,['depend'],['depends']
Integrability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] renamed gtfock and erd. enable erd allowed w/o being default; - [x] add astropy docs dependence. all psi4.core and psi4.driver autodoc-ed w/o helper scripts; - [x] do absolute, not relative, imports in psi4.driver; - [x] replace cdict with variables and arrays in core.Wfn; - [x] reimplement versioning, at least internally. publish `v1.0` tag on top of `1.0`; - [x] 	Switched sto-3g and 3-21G DF fitting basis sets to def2-SVP; - [x]	Reword castup basis logic; - [x] **python 3 compatible**, now with testing!; - [x] numpy interface updates; - [x] effectively re-enable threaded MKL (build issue); - [x] reenable mostly static linked build; - [x] externals installed to `external/` not `external/{pkgname}`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/486:244,depend,dependence,244,https://psicode.org,https://github.com/psi4/psi4/pull/486,2,"['depend', 'interface']","['dependence', 'interface']"
Integrability,## Description; Provides serialized input and output capabilities through a JSON interface. This is an experimental feature and the JSON interface itself will likely evolve significantly over various iterations. ## Features; - `psi4 --json data.json` is now a valid Psi input.; - All python based exceptions (not just Psi exceptions) in Psithon should now be printed to the Psi output as well as stdout.; - Dimension objects now have an `__iter__` attribute. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/509:81,interface,interface,81,https://psicode.org,https://github.com/psi4/psi4/pull/509,2,['interface'],['interface']
Integrability,"## Description; REMP methods added to `occ` and attendant testing and routing. This is PR 1/? in the mega-dfocc-remp series. #### PR Background (not of general interest); There was https://github.com/loriab/psi4/tree/dfocc2 by @bozkaya and @yavuzalagoz that added to `dfocc` (1) non-oo uhf ccsd-level E & G, (2) oo ccd-level E & G, and (3) fno everything. Then, there was #2354 that added remp2 E & G to `occ` and `dfocc` and made extensive improvements to `dfocc` in the matter of combined DIIS (vital for convergence) and int overflows. All based on pre-DIIS overhaul #2369 . To untangle this, I started from master, cherry-picked the dfocc2 commits, cherry-picked the #2354 commits, modernized the DIIS calls, then added the neglected stdsuite testing and attendant qcvar fixups for existing occ/dfocc methods and new methods remp2 and categories (1) and (2) from dfocc2 branch. That mega-changeset lives at #2633 for now. This PR breaks off the `occ` portion for review. ## Todos; - [x] @behnle added REMP2 and OREMP2 hybrid perturbation theories (https://doi.org/10.1063/1.5086168) with conventional integrals added to `occ` module, as originally proposed in #2354; - [ ] note that this uses a specialty QCEngine for reference values. https://github.com/MolSSI/QCEngine/pull/375 It'll build by itself. I'll need to mint a QCEngine patch release before building conda packages with this PR in master.; - [x] docs-wise, I picked off a bit and included it in this PR. on the whole, let's defer docs edits until the dfocc PR; - [x] reworked the run_occ* driver functions a bit so that method defs are localized and there's less risk of missing an internal setting when adding new methods.; - [x] added stdsuite testing for new methods remp2 energy and oremp2 energy and gradient. added stdsuite testing for existing E & G for omp2, omp2.5, omp3, oremp2, olccd and filled in some gaps for ccsd, ccsd(t), a-ccsd(t). all conventional ints. fixed up some mis-set byproducts uncovered by stdsuite testing:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653:70,rout,routing,70,https://psicode.org,https://github.com/psi4/psi4/pull/2653,1,['rout'],['routing']
Integrability,## Description; Recent versions of MRCC are able to compute perturbative energies [e.g. CCSDT(Q)] with an ROHF reference wave function. This updates Psi4's interface to allow these methods to be performed. Credit goes to @bzloink for updating the interface. * **User-Facing for Release Notes**; - [x] Perturbative methods using MRCC with an ROHF reference are now supported. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/634:156,interface,interface,156,https://psicode.org,https://github.com/psi4/psi4/pull/634,2,['interface'],['interface']
Integrability,## Description; Redirects the PSIO errors from `stderr` to exception message (stderr and normal output).; Essentially addressing #2019 and #1965. Example print:. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 5 (open call failed) !; ! Check the location of your scratch directory which can be !; ! specified via the $PSI_SCRATCH environment variable or in !; ! the $HOME/.psi4rc file. !; ! Please note that the scratch directory must exist and be !; ! writable by Psi4 !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 133 !; ! The most recent 2 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. ## Feature; - [x] PSIO errors to stderr and normal output. ## Checklist; - [x] limited manual testing by deleting files; - tests not applicable . ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2030:69,message,message,69,https://psicode.org,https://github.com/psi4/psi4/pull/2030,1,['message'],['message']
Integrability,"## Description; Rehabilitates Cfour interface. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Interface working again for primary modes (~60 tests). Not yet for `vpt2()`; - [x] Test cases kw-7, kw-8, rohf-mp4 still failing for known reasons; * **User-Facing for Release Notes**; - [x] Cfour interface working again. Recc to use in communication with a developer. Cfour 2.00beta. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/730:36,interface,interface,36,https://psicode.org,https://github.com/psi4/psi4/pull/730,3,"['Interface', 'interface']","['Interface', 'interface']"
Integrability,"## Description; Requiring libefp was rather a holdover from the early days of code-in-repo add-ons. This PR makes it slightly easier on packagers and enables us to have only three required compile-in dependencies in the figure in the paper (libint, blas/lapack, pybind11). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `#ifdef`-ing the EFP code probably could have been done to varying degrees of thoroughness. But since EFP is tied into `P::e` _and_ Molecule _and_ it's own interface, none of which I wanted to rexamine, this is the one that requires a minimum of recompilation if you change `ENABLE_libefp` ON/OFF. When OFF, the EFP object still exists, but only the constructor, destructor, and nfragments method (that returns 0 fragments). This way the driver needs no mods (which is a good thing, since we can't `#ifdef` python).; - If you build w/o libefp and try an efp-containing molecule, throws a runtime error with text `EFP fragments detected but are not available`.; - [x] slight fix of passing `pybind11_DIR` to plugin cache. helps with mixed install/staged psi4/pybind11. we'll see how this goes, as I'm not sure it's the best fix.; - [x] more thoroughly test cmake variable for PCMSolver path (`if ""@ENABLE_PCMSolver@"".upper() in [""1"", ""ON"", ""YES"", ""TRUE"", ""Y""]`); - Hope this helps a bit on packaging, @susilehtola ; * **User-Facing for Release Notes**; - [x] Psi4 can be build without libefp add-on. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/623:200,depend,dependencies,200,https://psicode.org,https://github.com/psi4/psi4/pull/623,2,"['depend', 'interface']","['dependencies', 'interface']"
Integrability,"## Description; SCF convergence has only been reported with the message ""Energy converged."" which is missing out on the more important part, i.e. the convergence of the wave function. For pedagogical reasons, this PR changes the printout so that also the wave function is mentioned in the message. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1468:64,message,message,64,https://psicode.org,https://github.com/psi4/psi4/pull/1468,2,['message'],['message']
Integrability,"## Description; See #2608 for background. Fixes #2608. Recent emphasis has been on Cfour through QCEngine or QCDB, so the Psi4/Cfour test suite likely hasn't been checked since pre v1.4. Nevertheless, for things like cbs, Psi4/Cfour is still the right choice. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switching away from `molecule = geometry()` in `interface_cfour.py` below isn't strictly necessary, but it helps with some import stuff in a future PR; - [x] The main thing that the distributed driver broke is that non-set basis sets get set as `(auto)`, so the interface needed to learn that was the same as unset. Also, there isn't the continuous storage of qcvars in `P::e`, so those need to be reloaded from ""wfn"".; - [x] interface used to allow gradients with ghost atoms. dropping that here, but I did implement it in qcdb and qcengine.; - [x] it looks like I hacked up the tests until they passed. broadly, this is true, but removed things are singles and same- and opposite-spin energies. harvesting all these values is tested far more extensively and carefully now over at qcdb than here, so I am not discomfited.; - [x] all psi4/cfour tests pass. ## Checklist; - ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2615:629,interface,interface,629,https://psicode.org,https://github.com/psi4/psi4/pull/2615,2,['interface'],['interface']
Integrability,"## Description; Set the minimum required C++ standard to C++14. Lower bounds on compilers can be found [here](https://en.cppreference.com/w/cpp/compiler_support#cpp14). Also addresses a bug in the SAPT code that resulted in a double free. ## About the SAPT bug; The Iterator class in SAPT contained an `int *` array that was cleaned up by the class's destructor. Iterator objects are constructed by a builder routine that first creates a local Iterator object, fills it, then returns it by value. The C++98 behavior of this design is problematic; a copy of the local temp Iterator is made and that copy is returned to the caller. When that copy is made, both the local temp and its copy have `int *` pointers that point to the same pool of memory because no deep-copy copy constructor exists for Iterator. Upon returning, the local temp object is destroyed, triggering the memory pointed to by the `int *` to be freed, causing the returned object to point to freed memory which is undefined behavior. When that returned object eventually goes out of scope, it will try to free the memory again, leading to the double free memory error we observed. Because we use C++11 most compilers appear to be able to correctly elide the copy, by implementing move semantics, so we haven't seen this before. The switch to C++14 with GCC5.4 caused consistent segfaults, revealing the issue. The fix is simple; don't use raw `int *`, but `std::vector<int>` instead; the lifetime of these is correctly managed automatically and the various move constructor/copy constructor/destructor can be generated correctly by the compiler. RAII for the win!. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix C++14 compliance CMake-side; - [x] Fix memory bug in SAPT code; - [x] Move Travis to Xenial. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1398:409,rout,routine,409,https://psicode.org,https://github.com/psi4/psi4/pull/1398,1,['rout'],['routine']
Integrability,"## Description; Several general fixes, esp. for PsiAPI mode. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Turning off gnu C++ extensions. This means that `-std=gnu++11` will never get passed, even if CMake can detect that your compiler supports it. Instead will get a `-std=c++11` from pybind11 and possibly another `-std=c++11` if cmake detects that your compiler supports.; - [x] Put docs in order wrt threading; - [x] Make `psi4/__init__.py` pay attention to `PSI_SCRATCH`. Otherwise scratch is non-adjustible in PsiAPI mode.; - [x] Default to serial execution in `psi4/__init__.py`. Can be overruled in Psithon mode through `-nN` or `set_num_threads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:875,wrap,wrappers,875,https://psicode.org,https://github.com/psi4/psi4/pull/627,1,['wrap'],['wrappers']
Integrability,"## Description; Some Psi4-side fixes to getting @bennybp's simint AddOn added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (F",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625:324,integrat,integration,324,https://psicode.org,https://github.com/psi4/psi4/pull/625,1,['integrat'],['integration']
Integrability,"## Description; Some info about module-level provenance of a Wfn would be handy. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add `Wavefunction.module_` member data and export; - [x] add setting to most modules (not psimrcc or fockci); - [x] incorporate into stdsuite testing. ## Questions; - [x] @dgasmith I've given mcscf its own name. prefer ""detci""?; - [x] @maxscheurer I edited a couple error messages to ADCC from ADC. ok?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1935:451,message,messages,451,https://psicode.org,https://github.com/psi4/psi4/pull/1935,1,['message'],['messages']
Integrability,## Description; Switches off a few dependancies until they can be updated on the conda channel. Travis CI is hitting time limits fairly frequently when building these. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/930:35,depend,dependancies,35,https://psicode.org,https://github.com/psi4/psi4/pull/930,1,['depend'],['dependancies']
Integrability,## Description; T1 and D1 diagnostics computed by ccsd/df-ccsd routed through fnocc are added to psi4 global variables. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/712:63,rout,routed,63,https://psicode.org,https://github.com/psi4/psi4/pull/712,1,['rout'],['routed']
Integrability,"## Description; The Cholesky is now based on the Gershgorin theorem, which I describe in a note in the PRA article. The routines' accuracy has been benchmarked in the arXiv paper. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1842:120,rout,routines,120,https://psicode.org,https://github.com/psi4/psi4/pull/1842,1,['rout'],['routines']
Integrability,"## Description; The PCMsolver interface takes as input nuclear charges (`mol.Z(i)`) to identify the elements, but did not account for ghost atoms.; Change asks now for the atomic number and thus also avoids`mol.fZ(i)=0`. **This forms the cavity also around the ghost atoms**, which I think is the expected behaviour. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fixes #1656 . ## Checklist; - [x ] `ctest -R pcm` passes; - [x] The `charges` array no longer contains zeros for ghost atoms (manual inspection). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1977:30,interface,interface,30,https://psicode.org,https://github.com/psi4/psi4/pull/1977,1,['interface'],['interface']
Integrability,"## Description; The PK(reordered, disk) algorithm was using twice as much memory as it should.; This is due to not deleting integral and disk-space buffers correctly:; * During the pre-iterations the `batch size` buffer that prepares the disk space (""pre-striping"", within `zero_disk`) and used during the SCF for processing the integrals on disk is not released. ; * The `buffer size` buffer that is used to calculate the integrals is not released after the computation is done. Both buffers are actually the same size and effectively lead to a doubling of the memory demand. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] memory leaks in PK(reordered, disk) algorithm addressed; - [x] Likely solution to #1985 . ## Questions; - [ ] Is there a better solution to `AIO->synchronize()` in-between the `zero_disk` operations?; - [ ] Will there be an issue with: https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/PKmanagers.cc#L886 now that `buffer()` returns a reference?. ## Checklist; - [x] ctest -L quick/dft pass; - [x] memory usage on `top` eyeballed like a hawk. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1990:821,synchroniz,synchronize,821,https://psicode.org,https://github.com/psi4/psi4/pull/1990,1,['synchroniz'],['synchronize']
Integrability,"## Description; The QCSchema wrapper was lacking the capability to save the t-amplitudes and the one-electron density matrix, so this was added. ## Todos; This will add the ability to save the t-amplitudes using the new ""tamps"" driver. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2328:29,wrap,wrapper,29,https://psicode.org,https://github.com/psi4/psi4/pull/2328,1,['wrap'],['wrapper']
Integrability,"## Description; The UHF version of #2171. The open-shell DCT code now adds two terms before contracting them against the two-electron integrals, rather than after. Unfortunately, this change was tightly coupled to surrounding code, making it unnecessarily complicated. This PR also removes that complexity. Again, I'd expect this code to be faster due to reduced random access in `process_so_integrals`, but I haven't run timings. ## Todos; - [x] More transparent code; - [x] 100 less lines code; - [x] Four fewer global variables . ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2185:92,contract,contracting,92,https://psicode.org,https://github.com/psi4/psi4/pull/2185,1,['contract'],['contracting']
Integrability,"## Description; The first eight DDD extracts PRs reduced the delta from; 99 changed files, and 5,314 additions and 2,946 deletions. c. dgasmith:recursive to; 59 changed files, and 3,408 additions and 1,885 deletions. c. loriab:recursive62; so here's No. 9 of the DDD series, #1351. ## Todos; - [x] This is the non-class parts of changes to finite difference. Mostly; * using pieces from Mol, rather than mol, to reduce dependence on psi objects; * use more numpy, less Matrix; * consolidate printing so can go to logging; * start to pass finite difference options (points, steps, projection) as kwargs rather than having findif consult global options; - [x] added in the dipder from dipole but it's not used; - closes #1683; - [x] along the way, psimrcc-fd-freq1 failed. as far as I can judge now, this is an existing bug. part of the old output is below. psi is evaulating the gradient, finding it over the cutoff, and so recommending not projecting rotations. then, because of https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1613, that setting of FD_PROJECT gets tossed, and findif runs projecting rotations, and the test passes. I'm calling this a bug and setting fd_project in the input to force the array dimensions to match and the test to pass. glad to hear other interpretations. ```. Based on options and gradient (rms=3.60E-02), recommend projecting translations and not projecting rotations.; hessian() will perform frequency computation by finite difference of analytic energies. ----------------------------------------------------------; FINDIF; R. A. King and Jonathon Misiewicz; ---------------------------------------------------------. Using finite-differences of gradients to determine vibrational frequencies and; normal modes. Resulting frequencies are only valid at stationary points.; Generating geometries for use with 5-point formula.; Displacement size will be 1.00e-02.; Number of atoms is 2.; Number of irreps is 8.; Number of SALCs is 1.; Translations proj",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2552:419,depend,dependence,419,https://psicode.org,https://github.com/psi4/psi4/pull/2552,1,['depend'],['dependence']
Integrability,"## Description; The general idea is to allow more flexible definition of CBS functions, and clean up the `cbs()` function a little. The goal is to allow further corrections to the energy into CBS, eg differences of basis sets (eg. `\Delta E_{diff} = E(aug-cc-pvtz) - E(cc-pvtz)`) or frozen core corrections (`\Delta E_{ae} = E(freeze_core True) - E(freeze_core False)` or DKH ... Added `frequency` to cbs-compatible calls. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Simple, dict-based interface to CBS.; - [x] Handling of an arbitrary number of correction functions.; - [x] Support for passing of arbitrary options (such as `freeze_core`). ; - [x] Fix `pywrap-cbs1` which fails on `cbs_number` checks.; - [x] Documentation.; - [x] Frequency calculations via cbs are now possible. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1235:540,interface,interface,540,https://psicode.org,https://github.com/psi4/psi4/pull/1235,1,['interface'],['interface']
Integrability,"## Description; The number of electrons as integrated on the DFT quadrature is printed as ""Post-Iterations"" quantity. Current formatting:; ```; Energy and wave function converged. ==> Post-Iterations <==. electrons on quadrature grid:; NTotal = 2.0000000000 ; deviation = -7.638e-14. Orbital Energies [Eh]; ---------------------. --; electrons on quadrature grid:; Nalpha = 5.9997499893 ; deviation = -2.500e-04; Nbeta = 4.9997504300 ; deviation = -2.496e-04; NTotal = 10.9995004192 ; deviation = -4.996e-04. @Spin Contamination Metric: 2.559910084E-05; ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] NTotal/Nalpha/Nbeta electrons are printed as obtained from the grid as a health check; - [x] adds `psivars`: `GRID ELECTRONS TOTAL/ALPHA/BETA`. ## Questions; - [ ] Open to suggestions and opinions for naming and formatting. Especially regarding printing of decimals. ## Checklist; - [x] psivars doc string; - [ ] Tests?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2001:43,integrat,integrated,43,https://psicode.org,https://github.com/psi4/psi4/pull/2001,1,['integrat'],['integrated']
Integrability,## Description; The one electron hamiltonian is read from PSIF_OEI inside libtransform library. This ; leads to a loss of flexibility in adding external potentials to the wavefunction directly ; for post-scf methods through the python interface. This PR fixes this problem and makes sure the hamiltonian is read consistently from the wavefunction in all the modules. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/718:235,interface,interface,235,https://psicode.org,https://github.com/psi4/psi4/pull/718,1,['interface'],['interface']
Integrability,"## Description; The orthogonalization changes in the Cholesky pull #1760 broke `scf-guess-read2`. The problem is that I started to renormalize the overlap matrix before doing the eigendecomposition. However, it turns out that there's no (simple?) way to renormalize **and** still have a symmetric orthogonalizing matrix **X**. . Namely, the natural way to get the right normalization out is that you. 1. normalize `S`: `Snorm = diag(1.0/sqrt(S)) * S * diag(1.0/sqrt(S))`; 2. form `Xnorm` for `Snorm`; 3. form `X = diag(1.0/sqrt(S)) * Xnorm`. Trying to do step 3 in a way that maintains symmetricity of `X` would require much deeper linear algebra, as you need to know how the eigenvalues and eigenvectors change when you balance S to have a unit diagonal. (It may be that some old linear algebra textbooks show how this is done.). Anyway, IMHO there's nothing wrong with having an asymmetric `X`: if you have a linearly dependent basis, this is bound to happen, and so there's no reason to assume `X` is symmetric. All that matters in the end is the number of molecular orbitals you get from `X`, since the SCF (or even the core Hamiltonian) will give you a basis that is different from `X`. The asymmetric `X` revealed a problem in the initialization of the ROHF code, which is now fixed. ROHF should now also work for the case of canonical orthogonalization, I'm not sure why there ever was a stopping clause. A problem was also found in CUHF, which wasn't tested before. For some reason doing the natural orbitals in the alpha orbital basis made the calculation unstable; simply changing to using `X` to find the natural orbitals suddenly fixed everything. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] ROHF orbital guess read-in works; - [x] CUHF orbital guess read-in works; - [x] Orbital orthonormality is tested in the calculation; if the off-diagonal elements of the MO overlap sum to >= 1e-10 then the calculation crashes. ## Questions; - [",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1781:920,depend,dependent,920,https://psicode.org,https://github.com/psi4/psi4/pull/1781,1,['depend'],['dependent']
Integrability,"## Description; The purpose of this PR is to expose the wavefunction as well as access to all amplitudes from CC to the python side. This has the advantage to sort out the relationship of Wavefunction, CCEnergyWavefunction and CCLambdaWavefunction in a more natural C++ way through inheritance. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCLambdaWavefunction inherits from CCEnergyWavefunction to facilitate better runtime access from the python side.; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057.; * **User-Facing for Release Notes**; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057. ## Questions; - [ ] Does the more technical details from above (inheritance change and exposing of the amplitudes to python) require more text for the release notes?; - [ ] The python documentation should be automatically built, is there more documentation for this part required?. ## Checklist; - [x] Tests added for any new features (not required as no new functionality added); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1061:601,interface,interface,601,https://psicode.org,https://github.com/psi4/psi4/pull/1061,2,['interface'],['interface']
Integrability,"## Description; The purpose of this PR is to implement the first bits and pieces to connect psi to [i-pi](https://github.com/i-pi/i-pi) to enable molecular dynamics simulations with psi. For instance, it would be possible to carry out path integral molecular dynamics simulations such as [in this reference](https://doi.org/10.1039/C4CP05192K) with psi. It would be great to get a first review of the basic idea in the code and I can add some documentation of the above infrastructure after that as well. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Infrastructure to connect to [i-pi](https://github.com/i-pi/i-pi) is included in `broker.py`; * **User-Facing for Release Notes**; - [ ] Infrastructure to connect to [i-pi](https://github.com/i-pi/i-pi) is included (but not yet documented yet). ## Questions; - [ ] Is the dynamic dependency to [i-pi](https://github.com/i-pi/i-pi) to setup the interface on runtime fine? Or would you prefer to have the Client side implementation to have fully here in psi as well? If the latter is the case, this has the disadvantage, that the client side might need adjustments with a new version of i-pi, which is why I left the client implementation in i-pi for now. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057:900,depend,dependency,900,https://psicode.org,https://github.com/psi4/psi4/pull/1057,2,"['depend', 'interface']","['dependency', 'interface']"
Integrability,"## Description; The purpose of this PR is to integrate with [adc-connect/adcc](https://github.com/adc-connect/adcc/) inside Psi4 and allow Psi4 users to directly run the ADC calculations supported inside adcc. The opposite direction (i.e. using Psi4 SCF results in adcc) is already implemented and working, see the [adcc manual](https://adc-connect.org/calculations.html#general-adc-n-calculations), so this should mainly be an effort of connecting the strings together on the Psi4 side. Currently I am still very much in the planning phase of this PR, thankful for any early pointers or feedback to get me moving in a sensible direction. Since this is my first PR here I still feel a little lost inside the Psi4 source :smile:. My implementation so far hooks into the driver python code of Psi4 and branches out to either `adcc` or the built-in ADC module of Psi4. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Get ADC(2) calculation triggered in adcc from Psi4 (see `adcc_examples` subfolder).; - [x] Allow all ADC variants to be run in Psi4; - [x] Proper error handling of Psi4 SCF references not supported in adcc (symmetry, density-fitting, ...); - [x] Integration of adcc installation into Psi4 build system; - Currently adcc can only be installed via `pip`, but we would love to get `conda` support working on our end.; - [x] Tests and examples; - [x] Test install process; - [x] Documentation. ## Questions; - [x] How to best branch between the builtin module and adcc? The two implementations share some features, but use different approaches to solve ADC, which can in some cases lead to differing results (related to #1033 ); - [x] How to best direct options and configurables from Psi4 and adcc? The current solution I see is to add basically everything to the big `read_options.cc`, which is pretty inflexible and could lead to a lot of duplicated information being necessary. Is there some better way to do this?; - [x] What to do with",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744:45,integrat,integrate,45,https://psicode.org,https://github.com/psi4/psi4/pull/1744,1,['integrat'],['integrate']
Integrability,"## Description; The support for matrices with `symmetry() != 0` is flawed in several places in the matrix class. While *some* operations are only valid if the matrix is totally symmetric, most do not have this requirement. . These issues have long gone unnoticed because the majority of places where the object is used the quantity will be totally symmetric. I started noticing these flaws while working on TDDFT which will require most of the changes made here in order to work properly. ## FYI; - Comments/error messages/variables names have been updated to make meaning more precise.; - In general the non-zero block of the matrix found at `matrix_[h]` has shape `{rowspi_[h], colspi_[h^symmetry_]}` **not** `{rowspi_[h], colspi_[h]}`. The two are coincidentally the same when `symmetry_ == 0` (This was the cause of many segfaults/incorrectly raised errors).; - I have aggressively applied DRY to avoid issues. Example (`add`, `subtract`, and `axpy`) all lead to different calls to `C_DAXPY`, however `axpy` computed the size incorrectly and led to a segfault. ; - I have added unit tests for the matrix class to avoid reintroducing any of the bugs I root out. ## Todos; - [x] python bindings for non-totally symmetric constructor; - [x] consolidate `axpy` type operations, fix size issue; - [x] consolidate `gemm` type operations, fix A/B/C block logic. ## Questions; - [ ] If anyone has noticed problems, missing/bugged functionality that I have missed now is a good time to point them out. . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1383:514,message,messages,514,https://psicode.org,https://github.com/psi4/psi4/pull/1383,1,['message'],['messages']
Integrability,"## Description; The user-supplied occupation arrays weren't sanity checked, which caused segfaults. This PR makes psi4 give an error message instead. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/602:133,message,message,133,https://psicode.org,https://github.com/psi4/psi4/pull/602,1,['message'],['message']
Integrability,"## Description; These are the breaking, user-facing changes for cbs in DDD. That is, these changes aren't needed at present for the cbs back-end, but this is coercing the input front-end into the right syntax. This is No. 6 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] All `fn(cbs)` and passing to extrapolation functions are changed over to `fn(""cbs"")` and passing the _names_ of extrapolation functions. This is making cbs behave more like other wrappers: findif you don't call directly, you use kwarg dertype and nbody you don't call directly, you use bsse_type. Functions are trickier to keep imported and don't serialize well, so in ddd, they're registered and replaced by strings, akin to the procedures dictionary.; - [x] alias functions are replaced with dict specification instead of kwarg specification; - [x] UpdateHelpers are added so that if you feed an existing input, it prompts you to make the fn -> str changes.; - [x] Fix bug where allen_focal_point wasn't working b/c used kwargs, not dict, specification for cbs, so the higher deltas were getting lopped off. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2532:536,wrap,wrappers,536,https://psicode.org,https://github.com/psi4/psi4/pull/2532,1,['wrap'],['wrappers']
Integrability,"## Description; Think of the default orbital optimization algorithm in OCC with the following pseudocode:; ```; orbital_gradient = compute_orbital_gradient(); try:; orbital_step = compute_NR_step_via_PCG_with_HF_MO_hessian(orbital_gradient); except ConvergenceError:; orbital_step = compute_step_with_crude_diagonal_MO_hessian(orbital_gradient); diis_step(); ```. I traced a test failure in an upcoming PR (ocepa-grad2) to a failure in the approximate NR step. Five failures, in fact.; 1. The HF MO Hessian couples alpha and beta IDPs. You need a single alpha, not a different alpha for each spin.; 2. For the same reason, you need a single beta.; 3. The Fock term assumed semicanonical orbitals. OCC does not use semicanonical orbitals.; 4. The Fock matrix was acting on the wrong vector.; 5. One of the tensor contractions involving TEI was incorrect. After fixing those five bugs, I observed three things:; 1. After accounting for whether you index by (v,o) or (o, v), the matrix-vector products of the new occ implementation match those of the SOUHF P4N tutorials,; 2. The X (kappa) converged to does satisfy Ax=b; 3. The orbital equations refuse to converge. My conclusion is that the implementation of the algorithm is now correct, but it's not a good way to generate orbital steps. The off-diagonal terms can end up being significant for the open-shell systems that would lead you to use an orbital-optimized method. This didn't cause obvious problems before because the previous errors rendered the PCG procedure non-convergent, so you would always fall back to the crude diagonal step _unless_ your orbital gradient was so low that you didn't need to iterate at all. So what we expect to see from this bug is difficulties converging occ tightly, which has been my experience. To remedy the situation, the default orbital step is now the crude semicanonical step. The next PR should be the final one in the series. I'll just need to rebase it onto this one, repair the two tests I mentioned on",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1829:812,contract,contractions,812,https://psicode.org,https://github.com/psi4/psi4/pull/1829,1,['contract'],['contractions']
Integrability,"## Description; This PR ; (a) adds checks that alloc's have been succesful in optking; (b) rewrites detci's print_config routine to use dynamic memory allocation instead of static arrays, which I believe caused issue #606. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/607:121,rout,routine,121,https://psicode.org,https://github.com/psi4/psi4/pull/607,1,['rout'],['routine']
Integrability,"## Description; This PR adds a new psivar for the length gauge origin-dependence of the specific rotation, to aid in migration of the CC tests. `cc29` now tests this psivar. Once the psivar is accepted, I can resume porting tests over. This is PR 6 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian and @loriab ping for new `cc` psivars. For TDC's benefit, you can go to the ""Files changed"" tab, ""Review changes"", and then mark to approve if things look good to you. ## Checklist; - [x] Newly added psivar is tested. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2451:70,depend,dependence,70,https://psicode.org,https://github.com/psi4/psi4/pull/2451,1,['depend'],['dependence']
Integrability,"## Description; This PR adds a new psivariable, the overlap between the left and right CC eigenvectors. This was previously tested by `psitest.pl`, but promoting it to a psivar allows the standard `compare_values` machinery to test it. This PR integrates the new psivar into tests of `cc18`. This PR also removes the file `overlap_LAMPS.cc`, which was unused and differs from `overlap.cc` just by a search-replace on the name of the file to which quantities were being written. This is PR 4 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. **Do not merge until** we have approval from @loriab and @lothian, as we are adding a new psivar to the `cc` mega-module. The next stage will be to ensure all variables are set _on the wavefunction_, for testing purposes. This will proceed module-by-module, to minimize the chances of anything getting overlooked. ## Questions; - [x] Are there any Crawford group projects that need `overlap_LAMPS.cc`?; - [x] Please double-check that my assignments of method to ground state name are correct. ## Checklist; - [x] Tests added for any newly testable features; - [x] `cc` tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2443:244,integrat,integrates,244,https://psicode.org,https://github.com/psi4/psi4/pull/2443,1,['integrat'],['integrates']
Integrability,## Description; This PR adds functionality for frequency-dependent first hyperpolarizabilities using the CCSD quadratic response theory. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Implementation of left hand perturbed amplitudes.; - [ ] Implementation of quadratic response functions.; - [ ] Implementation of frequency-dependent first hyperpolarizabilities.; - [ ] Optimization and clean-up.; - [ ] Testing. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2043:57,depend,dependent,57,https://psicode.org,https://github.com/psi4/psi4/pull/2043,2,['depend'],['dependent']
Integrability,"## Description; This PR aims to improve the performance of electric field integrals for multiple; coordinates. These are needed, e.g., in EFP and Polarizable Embedding (PE, #1401) calculations, where the; integrals need to be evaluated at all sites in the environment. For large environments, the electric field integrals can become the bottleneck of the calculation. The code I've already implemented is quite ugly and mainly serves as a proof of principle.; Exposure to the Python layer is also not well done at the moment, but it made testing; super easy. In my current [test script](https://gist.github.com/maxscheurer/4736a100ff5de12190ef27f7bc2eaade), I computed integrals at 2000 random points for Water/cc-pVQZ, for which I get a 25x speed-up compared to the existing implementation. Tasks the implementation enables:; - compute field integrals on multiple points; - contract the integrals with a density matrix (for expectation values of the electric field at all points); - contract the integrals with a dipole moment (for building the induction operator for PE/EFP). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] hackish, preliminary version (proof of principle); - [x] cleanup `mintshelper` etc.; - [x] proper naming of new functions. ## Checklist; - [x] Tests added for any new features (`pytests/test_elec_fields.py`); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1671:875,contract,contract,875,https://psicode.org,https://github.com/psi4/psi4/pull/1671,2,['contract'],['contract']
Integrability,"## Description; This PR brings (hopefully!) to a close the PCM-changes-directory saga noted in issue #817 and partially alleviated in PR #818. ; This change needed an API update PCMSolver-side, hence the minimum required version bump to its 1.1.12 version. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] PCMSolver updated to its v1.1.12; * **User-Facing for Release Notes**; - [x] Parsing PCM directory _no longer_ changes directory. ## Questions; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a request is made or should the code be routed to use a numerical gradient?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/896:713,rout,routed,713,https://psicode.org,https://github.com/psi4/psi4/pull/896,1,['rout'],['routed']
Integrability,"## Description; This PR builds on the start that @PeterKraus made to get the libecpint library from @robashaw up and running as Psi4's ECP engine. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - Improve the speed and stability of the ECP integrals. ## Questions; - [ ] @robashaw are the derivative integrals ready to go in Libecpint yet? If not, do you have any idea how much work it will be to implement them?. ## Checklist; - [x] Make libecpint play nicely with our CMake infrastructure; - [ ] Write wrappers for ECP integral code, making the new code path optional for now; - [ ] Tests added for any new features. ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1340:548,wrap,wrappers,548,https://psicode.org,https://github.com/psi4/psi4/pull/1340,1,['wrap'],['wrappers']
Integrability,"## Description; This PR changes the code to fix the majority of combinations of `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` keywords which were previously broken. It was discovered that there were a lot of combinations of `SCF_TYPE`, `SCF_SUBTYPE`, and `SCREENING` keywords (e.g., `SCF_TYPE = {CompositeJK}` with `SCREENING = NONE`) that would break upon use, either with an exception or with a hard error such as a segfault. PR https://github.com/psi4/psi4/pull/2978 added testing to detect these broken combinations. This PR actually fixes the broken combinations detected through the added test. The most notable change as a result of fixing these issues is the handling of how certain variables within the `TwoBodyAOInt` class are initialized. To enable universal support of JK builds with `SCREENING = NONE`, an option has been added to manually call the `TwoBodyAOInt::create_sieve_pair_info()` function via the new wrapper function `TwoBodyAOInt::initialize_sieve()`. Multiple JK builds rely on values of variables initialized via `create_sieve_pair_info()` , and `initialize_sieve()` is now used to initialize the required variables if `SCREENING = NONE` is set. In this way, `SCREENING = NONE` can exist with the benefits it provides, while still working with all JK builds. Also, changes are made to ensure that no screening actually occurs in JK builds when `SCREENING` is set to `NONE`. In line with the above, some tests have been expanded. `test_comprehensive_jk_screening.py` has been changed to account for the `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` combinations that were fixed. `test_erisieve.py` has been updated to more thoroughly test `SCREENING=NONE`. It is worth noting that, unfortunately, `TwoBodyAOInt::initialize_sieve()` must be defined per integral engine, and so the fixes of this PR only work with Libint2. The issues this PR tries to fix, still persist if Simint is used instead. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new function to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3060:915,wrap,wrapper,915,https://psicode.org,https://github.com/psi4/psi4/pull/3060,1,['wrap'],['wrapper']
Integrability,"## Description; This PR clarifies the libxc interface code and function descriptions as to the meaning of the alpha and beta parameters in psi4 vs libxc. See #1258 . Also, the definition of wPBE0 is fixed. See #1259 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1260:44,interface,interface,44,https://psicode.org,https://github.com/psi4/psi4/pull/1260,1,['interface'],['interface']
Integrability,"## Description; This PR closes #2120. The user-side problem is that when there are linear dependencies in the molecule, `fnocc` reports uncontrolled energies, iteration-by-iteration. The mechanism for this is as follows:. * `run_fnocc` requests an SCF computation. `nmopi_ < nsopi_` due to linear dependencies.; * `fnocc` is incompatible with point group symmetry, so calls `c1_deep_copy` to transform the solution to a c1 solution. For concreteness, we'll assume RHF, although all HF subclasses have the same problem.; * `RHF::c1_deep_copy` calls `Wavefunction::c1_deep_copy`. The resulting wavefunction has `nmo_` equal to `nmopi_.sum()` of the previous wavefunction, as desired.; * `RHF::c1_deep_copy` calls the RHF constructor on the new wavefunction, which calls to `HF::common_init`, which initializes `nmopi_ = nsopi_`, under assumption that the subsequent SCF will call `form_Shalf`, which is _actually_ responsible for first eliminating linear dependencies and then determining `nmopi_`.; * There is no subsequent SCF, so `nmopi_ = nsopi_` at the time `fnocc` begins.; * Garbage In, Garbage Out. `fnocc` is given a garbage wavefunction and gives garbage energies. The remedy here is to no longer have `common_init` put suspect information on the wavefunction. Obligatory ping to @edeprince3. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `c1_deep_copy` no longer leads to a wrong `nmopi_` in case of linear dependency. This fixes problems with linear dependencies observed in the `fnocc` module. ## Questions; - [ ] What does this PR mean for #1545? Holger confirmed the bug there was symmetry related, and the system does have a linear dependency... It's probably worth re-investigating after this gets merged in. ## Checklist; - [x] Tests added for any newly working features; - [x] `ctest -j4` is 490/490. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2302:90,depend,dependencies,90,https://psicode.org,https://github.com/psi4/psi4/pull/2302,6,['depend'],"['dependencies', 'dependency']"
Integrability,"## Description; This PR contains a refactored version of the Dimension class in which data is no longer stored in a `int*` array but on `std::vector<int>`. This eliminates a potential bug of the old code (memory was potentially freed even for a zero-length vector). After working on this PR I realized that the dependency on `int*` runs pretty deep in Psi4. It affects major libraries (dpd, libtrans, libfock,...). So I still had to leave a way to get a `int*` to the data stored in the class member `std::vector<int>` object. Things are slightly complicated also by the fact that Wavefunction exposes Dimension objects via functions that return constant references. Some work was done to reduce the number of Dimension->int* casts. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] Modernize the Dimension class.; - [X] Fixes a potential problem with memory.; - [X] Adds exceptions to operations that could potentially involve Dimension objects of different dimensions.; - [X] Avoids exposing non-const Dimension objects.; - [X] Refactors MatrixFactory to use Dimension objects. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/571:311,depend,dependency,311,https://psicode.org,https://github.com/psi4/psi4/pull/571,1,['depend'],['dependency']
Integrability,"## Description; This PR enables Psi4 to interoperate on-the-fly with other codes via [The MolSSI Driver Interface (MDI)](https://github.com/MolSSI/MDI_Library). MDI is an effort of [The MolSSI](https://molssi.org/) to improve and standardize the process of interoperating codes within the computational molecular sciences domain. In particular, MDI supports interoperability within a driver-engine paradigm, in which a driver code controls the high-level operations of one or more engine codes, orchestrating complex calculations like QM/MM or advanced sampling. This PR provides all functionality required for Psi4 to act as an MDI engine. This makes it possible for external codes to exercise control over Psi4 in a manner similar to what is possible using Psi4’s existing API (albeit with a much smaller subset of the functionality), but with the advantage of cross-code generality (all MDI commands are defined by [The MDI Standard](https://molssi.github.io/MDI_Library/html/mdi_standard.html)) and the option of fast inter-code communication via the MPI or TCP/IP methods (selected by the user at runtime). The PR adds [The MDI Library](https://molssi.github.io/MDI_Library/html/index.html), which handles the details of inter-code communication, as an external dependency. The MDI Library compiles with CMake and has no additional requirements, although it will link to an MPI library if one is found. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Include the MDI Library as an external dependency; - [x] Add functionality for Psi4 to respond to MDI commands as defined by [The MDI Standard](https://molssi.github.io/MDI_Library/html/mdi_standard.html); - [x] Add the --mdi command-line option, which causes Psi4 to run as an MDI engine.; - [ ] Document the use of Psi4 as an MDI Engine. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_plannin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676:104,Interface,Interface,104,https://psicode.org,https://github.com/psi4/psi4/pull/1676,2,"['Interface', 'interoperab']","['Interface', 'interoperability']"
Integrability,"## Description; This PR fixes Example 1 of #2231, some GEMM errors in the DCT module in the presence of linear dependencies. There's more debugging to do, but this is a perfectly good standalone bugfix. I also refactored the offending function. Less code duplication, less gratuitous pointers, and eliminated an offset. This PR is anodyne, so getting this in for 1.4 would be appreciated. ## Checklist; - [x] No tests to add? The old code completed successfully because there was a back-up algorithm when the one that was acting up errored out.; - [x] `ctest -R dct` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2232:111,depend,dependencies,111,https://psicode.org,https://github.com/psi4/psi4/pull/2232,1,['depend'],['dependencies']
Integrability,"## Description; This PR fixes a bug causing TD-DFT and stability analysis to give incorrect results (or diverge) when used with density-fitting and symmetry : more generally, the bug occurs any time JK objects used back-transformed C matrices that weren't totally symmetric. This is ultimately an issue of orbital indexing. When the left index of the generalized C matrix is back-transformed from SO to AO, the blocks need to be flattened together. The code previously combined the blocks from smallest h to lowest h. So columns of irrep `h ^ symmetry_` appear _in order of h ascending_, with the left C assumed totally symmetric. The matrices have different orbital indexing if your right C `symmetry_` is not totally symmetric! This produced inconsistencies when contracting quantities against each other that inherited this indexing. The fix is simple: change the order we back-transform irreps of the right matrix, so the order of orbitals is consistent and `symmetry_`-independent. Closes #2122. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Bugfix: Can now converge TD-SCF with DF and symmetry; - [x] Bugfix: Can now get correct stability analysis with DF and symmetry. ## Checklist; - [x] Tests added for newly working TD-SCF - they pass; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2124:765,contract,contracting,765,https://psicode.org,https://github.com/psi4/psi4/pull/2124,1,['contract'],['contracting']
Integrability,"## Description; This PR fixes a bug introduced in #1749, where `MemDFJK` handling of range-separated functional was incorrect in the asymmetric case. This incorrect handling lead to incorrect TD-DFT excitation spectra for range-separated functionals when `MemDFJK` was used. This PR hence closes #2431. In the symmetric case, either swapping the contraction order had no effect, or it was corrected by a hermitivitize call later on, so no error was observed. I strongly recommend backporting this PR (or at least the two characters needed to fix the bug). The rest of the PR other than those two characters is tests and commenting. Credit to @hokru for tag-team debugging. . ## Checklist; - [x] Tests added for newly working features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2435:346,contract,contraction,346,https://psicode.org,https://github.com/psi4/psi4/pull/2435,1,['contract'],['contraction']
Integrability,"## Description; This PR fixes three bugs in Psi's NBOWriter.; 1. The AO->MO matrix was previously put in the transpose way to how NBO expected it.; 2. MO coefficients for non-totally symmetric irrep were transformed from SOs to AOs incorrectly, leading to #1566. Closes #1566.; 3. The map from angular momentum functions in Psi to labels for NBO was wrong. For instance, p0 was previously px instead of pz. Due to point 3, **all previous NBO computations from Psi-generated NBO files are suspect.** I very nearly published wrong results due to that, so I advocate backporting this to 1.3. **NEW**; Linear dependencies and angular momentum up to _h_ is now handled properly. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix critical errors in NBOWriter. ## Tests of Correctness; I compared the overlap, density, and Fock matrices for nearly-cis diazene from file47's from Psi and QChem. After accounting for the fact that they order the AOs differently, they match almost perfectly. The density matrix was off in the last decimal place for a few entries. The NAO energies, NAO occupations, and perturbative analysis matched as well. I repeated for my instigating case, cis-sulfurous acid. QChem matches Psi with symmetry matches Psi without symmetry for NAO energies, NAO occupations, and perturbative analysis. Finally, to verify the molecular orbitals, I had both QChem and Psi report the MOs in the basis of NBOs. Apart from ordering the NBOs differently, the two match to within the last decimal place. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1602:605,depend,dependencies,605,https://psicode.org,https://github.com/psi4/psi4/pull/1602,1,['depend'],['dependencies']
Integrability,"## Description; This PR has TDDFT triplets for LDA and GGA functionals. (Psi does not currently support any TDDFT for meta functionals.) This requires lots of moving parts, so this PR serves as a reference for how they all fit together. For ease of reviewing, I'll have smaller PRs that pull off independent pieces for analysis. While I'm waiting for reviews, I'll update comments to show exactly how I know these spin-integration formulae are correct, for the benefit of future debuggers. Closes #2841. ## Status. There are four parts that I can split into separate PRs for reviewer convenience. Then I can bring in this PR. - [x] #2886; - [x] #2887; - [x] #2888; - [x] #2889. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Triplet TDDFT excitations from RKS are now supported. ## Theoretical Analysis. Why were DFT triplets harder than HF triplets? To understand this, we need to understand both the origin of the triplet matrix and the spin properties of the relevant matrix elements. 1. Starting from the UKS RPA/TDA matrices when Ca = Cb, we can do a similarity transformation to obtain the singlet and triplet RKS matrices. The new basis elements for the singlet block all take the form (i->a α + i->a β) / sqrt(2), while the new basis elements for the triplet block take form (i->a α - i->a β) / sqrt(2).; 2. The electron potential is spin-free. Because the coulomb J and exchange K terms are expectation values of this, the associated integrals are spin free, assuming spin does not integrate to zero. For J, spin only integrates to zeroes if there is a spin mismatch in either the bra or the ket. Because we only consider Sz preserving excitations, no spin mismatches are possible. For K, a bra orbital needs to have the same spin as a ket orbital. Because both bra orbitals have the same spin, and both ket orbitals have the same spin, this requires that _all_ orbi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2885:419,integrat,integration,419,https://psicode.org,https://github.com/psi4/psi4/pull/2885,1,['integrat'],['integration']
Integrability,"## Description; This PR implements The Combined Schwarz Approximation Maximum (CSAM) estimate for prescreening two-electron integrals. CSAM was described in this paper by Thompson and Ochsenfeld: https://aip.scitation.org/doi/10.1063/1.4994190. In Psi4, TEIs are screened using the well-known Cauchy-Schwarz Inequality:; `(pq|rs)^2 <= (pq|pq)*(rs|rs)`; This type of screening is effective when the overlap between orbitals p and q (or r and s) is sufficiently small. However, it doesn't take into account the scenario in which the two orbital products pq and rs are individually significant, but very far apart. CSAM factors in this distance dependence. . The following benchmarks show modest improvements in efficiency with negligible loss in accuracy:; ![Screen Shot 2019-05-28 at 1 59 57 PM](https://user-images.githubusercontent.com/16376046/58500885-1c618d00-8151-11e9-82f8-ced6ce967483.png). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds CSAM screening to ERISieve ; - [x] Adds python binding for the ERISieve class; - [x] Adds a ERISieve PsiAPI test. ## Questions; - [ ] The `ERISieve` constructor now takes a boolean `do_csam` (which defaults to `false`). What's the best way to hook this up to the user interface?; - [x] The `ERISieve` class contains a partially-finished attempt at implementing a similar type of screening (QQR). Are their plans to finish this? Or implement other integral-related optimizations?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1499:642,depend,dependence,642,https://psicode.org,https://github.com/psi4/psi4/pull/1499,2,"['depend', 'interface']","['dependence', 'interface']"
Integrability,"## Description; This PR implements a Huckel guess, based on the routine I recently implemented in ERKALE and described in https://pubs.acs.org/doi/10.1021/acs.jctc.8b01089. The guess reproduces an idempotent density matrix, yielding a variational guess energy. It also appears to be an universal improvement over SAD: because the Huckel guess has energetics, it is able to e.g. adapt to different charge and spin states. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Guess works without symmetry; - [x] Guess works in all symmetries. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1498:64,rout,routine,64,https://psicode.org,https://github.com/psi4/psi4/pull/1498,1,['rout'],['routine']
Integrability,"## Description; This PR implements a semi-numerical algorithm for computing the exchange (K) matrix as described in [this paper](https://doi.org/10.1016/j.chemphys.2008.10.036) and [this paper](https://doi.org/10.1063/1.3646921) as ""Chain of Spheres"" exchange or COSK. The implementation is added to a new `JK` class, `DFJCOSK`, which combines COSK with a simple direct density-fitted J algorithm. COSK is easily parallelized, completely in-core, and has good scaling--between O(N^1) and O(N^2)--making it ideal for HF/DFT calculations on large systems, particularly calculations for which the `DF` algorithm must store integrals on disk. The low scaling comes at the cost of a large pre-factor, so it shouldn't be used on small systems. In my benchmarking, `DFJCOSK` is almost always faster than `DIRECT` (even with density screening and incremental fock construction). The crossover between `DFJCOSK` and `DF` is dependent on the system, basis, CPU, memory, etc. but I've observed it as early as <3000 basis functions. I've attached a performance comparison of the `DFJCOSK`, `DIRECT`, and `DF` algorithms on a set of linear alkanes in which it's clear that `DFJCOSK` outperforms the other two algorithms for large systems. ![alkanes](https://user-images.githubusercontent.com/16376046/166322946-172d8fee-3ce3-4811-9633-db094219d17e.png). An encouraging fact about these results is that this implementation is far from optimal. The cost of the COSK algorithm is dominated by the evaluation of one-electron integrals on a quadrature grid. Therefore, there are a number of improvements to be made, in order of increasing difficulty:. - Do a better job at screening small integrals before they're computed (like [these](https://aip.scitation.org/doi/pdf/10.1063/1.5048491)); - Use better grids (such as [here](https://aip.scitation.org/doi/full/10.1063/1.5049435)); - Compute individual integrals faster. This could be done by reusing intermediates in the recursion for integrals involving the same she",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567:915,depend,dependent,915,https://psicode.org,https://github.com/psi4/psi4/pull/2567,1,['depend'],['dependent']
Integrability,"## Description; This PR implements analytical nuclear gradients for Polarizable Embedding (PE). I've been messing with some integral routines, so now `ao_multipole_potential` and `ao_multipole_potential_gradient`; exist. I think we can also reconcile this and make it consistent (pass all moments and coordinates) throughout... I'm creating this PR as a preliminary draft for now so we can better coordinate. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] PE-SCF gradients; - [ ] some sort of dispersion/repulsion for optimizations (D3, LJ, ...); - [ ] Release and bump `cppe`; - [ ] add tests once new `cppe` is out; - [ ] consistent top-level integral routines. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2039:133,rout,routines,133,https://psicode.org,https://github.com/psi4/psi4/pull/2039,2,['rout'],['routines']
Integrability,"## Description; This PR implements extrapolation of DFT energies through the CBS interface. The implementation is based on [my paper in JCTC](https://pubs.acs.org/doi/10.1021/acs.jctc.0c00684), however an update to that is currently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132:81,interface,interface,81,https://psicode.org,https://github.com/psi4/psi4/pull/2132,1,['interface'],['interface']
Integrability,"## Description; This PR implements standard grid pruning techniques, where one assumes that the electron density is largely isotropic close to the atomic centre and thus coarse grids are sufficient. Typically the atomic integration sphere is divided into several (3-4) regions where the outer region gets the most accurate grid and the grid get step-wise more coarse towards the inner region(s). Additionally this PR changes the Bragg-Slater (BS) radii and completes the Treutler-Ahlrichs integration code with the recommended mapping values. Old radii were of unknown origin. _Because of the updated BS radii, this PR will impact the total energies of any DFT calculation and can change how many grid points are generated **even without pruning**._ . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] updated BS radii and extended to 104 elements; - [x] implementation of missing Treutler-Eta mapping parameter; - [x] `DFT_NUCLEAR_SCHEME=SBECKE` ('smooth Becke' after: 10.1063/1.5049435. Better for weak interactions, but no time savings/no screening); - [x] extends `DFT_PRUNING_SCHEME` keyword with:; - [x] Treutler grid pruning ``TREUTLER``; - [x] a more robust grid pruning variant of it ``ROBUST``; - [x] new variables: ``XC GRID TOTAL POINTS``, ``XC GRID SPHERICAL POINTS``, ``XC GRID RADIAL POINTS``; - [x] `print > 2` adds (existing but unused) debug grid print out; - [x] tight DFT tests are updated with new values due to the new Bragg-Slater radii used; - [x] testing and error overview; - [x] option to properly disable all pruning (currently only indirect way); - [x] tests below indicate a reduction of the grid size by 30 and 45% using `ROBUST` and `TREUTLER` pruning, respectively. This leads to a 15-20% speed up for small molecules.; - [x] the following tests have been updated because of the new BS radii: `dft-b3lyp`; `dft-custom-mgga`, `dft-grad-lr1`, `dft-grad-lr3`, `dft-grad-meta`, `dft-grad1`, `dft-grad2`, `dft-omega`, `dft-ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591:220,integrat,integration,220,https://psicode.org,https://github.com/psi4/psi4/pull/1591,2,['integrat'],['integration']
Integrability,"## Description; This PR implements the grid pruning scheme of Matthews (https://pubs.acs.org/doi/10.1021/acs.jctc.9b01205), applying a pivoted Cholesky decomposition to the S matrix to remove linear dependencies and drastically reduce the number of grid points. Per @PhillCli's comments on #3157, taking the pseudoinverse of the S matrix can be costly, and this PR fixes that problem! The final rank appears to be _mostly_ invariant to grid size, but only to the molecule/basis set (results in tables below). | System | Radial, Spherical Points | Initial Rank | Final Rank |; | ------------- | ------------- | ------------- | ------------- |; | Water/cc-pVDZ | (25, 50) | 2605 | 280 |; | Water/cc-pVDZ | (50, 86) | 8739 | 280 |; | Water/cc-pVTZ | (25, 50) | 2630 | 1184 |; | Water/cc-pVTZ | (50, 86) | 8774 | 1328 |; | Benzene/cc-pVDZ | (25, 50) | 9831 | 3124 |; | Benzene/cc-pVDZ | (50, 86) | 32588 | 3414 |. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Drastically reduction of the rank of the intermediates in a THC factorization. ## Questions; - [x] The pivoted Cholesky algorithm presented by Matthews requires the upper triangular form. I modified the algorithm in matrix.cc to the upper triangular form because `Matrix::pivoted_cholesky` is not called elsewhere. Is this okay?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3187:199,depend,dependencies,199,https://psicode.org,https://github.com/psi4/psi4/pull/3187,1,['depend'],['dependencies']
Integrability,"## Description; This PR implements the partial Cholesky orthogonalization procedure I've recently described in https://arxiv.org/abs/1911.10372, which can be used to avoid pathological linear dependencies in the basis set. This is the simple version of the algorithm which just hides the pathological functions; the more sophisticated one is already available in ERKALE but it is limited to fixed geometries. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Partial Cholesky decomposition implemented; - [x] Calculation of basis function extents via `r^2` value implemented; - [x] Basis functions sorted so that steep ones get treated first by the decomposition. ## Questions; - [x] How to handle the sorting of basis functions in the presence of symmetry? AFAIK each SO basis functions is a superposition of identical functions on different atoms; this means that the corresponding symmetry-blocked `r^2` values could just be one of these.; - [x] Although matrix.cc already implements pivoted Cholesky, it's also available in LAPACK as `dpstrf()`. Maybe the implementation should be replaced with a call to LAPACK?; - [ ] Would it be possible to make Psi4 drop the irrelevant shells altogether from the basis set to make calculations more efficient? This would need to be done at every geometry... ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1760:192,depend,dependencies,192,https://psicode.org,https://github.com/psi4/psi4/pull/1760,1,['depend'],['dependencies']
Integrability,"## Description; This PR introduces a new `DFTensor` class to DCT. This is a lightweight wrapper over Matrix which I use to get some extra dimension information, as well as to store the DF contraction functions which were previously cluttering DCT's wavefunction object. Accordingly, many objects which were previously a `Matrix` have been specialized to a `DFTensor`. This also allows more careful input validation for the functions of `DFTensor`, but my primary motivation is for **code organization for the sake of a future PR**. Although there's a large LoC change, most of this is just moving code around and the bare minimum changes needed to make the code compile. **Reviewers, the thing to look at is the header files.**. Also of note: `Matrix bQpqA_mo_;` was never actually used and is thus removed. That should be decent memory savings. Do **not** merge until 1.5. It is far too late in the game for PRs of this scope. ## Checklist; - [x] DCT test passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2250:88,wrap,wrapper,88,https://psicode.org,https://github.com/psi4/psi4/pull/2250,2,"['contract', 'wrap']","['contraction', 'wrapper']"
Integrability,## Description; This PR introduces an atomic blocking scheme for quadrature grid points. All grid points in a `BlockOPoints` object belong to a singular parent atom.; Part 1 contains just the basic feature to get it our for people depending on it. Optimization for speed is yet to come. ### New options:; - `DFT_BLOCK_SCHEME = ATOMIC` (unique blocks of grid points for each atom); - `DFT_REMOVE_DISTANT_POINTS` (new flag for existing functionality). ### primary C++ feature:; - `grid->atomic_blocks()[N_ATOM][N_BLOCKS]` additionally to `grid->blocks()[N_BLOCKS]` # provides all grid points for an atom; - `block->parent_atom()` # atom the current block belongs to. ### fixes; - collocation size estimate in naive gridblocker was wrong.; - removes unused `index` vector. #### note; - Automated formatting of the files with `clang-format` made unrelated changes. ## Questions; - [ ] The ugly code [here](https://github.com/hokru/psi4/blob/atomic_grid1/psi4/src/psi4/libfock/cubature.cc#L4630-L4641) is because of an issue with the `BlockOPoints` [object](https://github.com/hokru/psi4/blob/atomic_grid1/psi4/src/psi4/libfock/cubature.h#L179). I'd like advice how to handle this better. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge. ---. ## Usage. Normal loop structure; ```; for (size_t Q = 0; Q < grid_->blocks().size(); Q++) {; size_t parent_atom_ = grid_->blocks()[Q]->parent_atom();; .; .; .; }; ```. Looping over atoms and their blocks. ; ```; # openmp note: for best performance the atom and block loop could possibly; # be collapsed into a singular loop using `collapse(2)`; for (size_t i = 0; i < grids_.size(); i++) { # here size = number of atoms; for (size_t Q = 0; Q < grid_->atomic_blocks()[A].size(); Q++) {. // access a block; std::shared_ptr<BlockOPoints> block = grid_->atomic_blocks()[A][Q];; .; .; .; }; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2336:231,depend,depending,231,https://psicode.org,https://github.com/psi4/psi4/pull/2336,1,['depend'],['depending']
Integrability,"## Description; This PR introduces an option in the call to `Deriv::compute()` so that the user can specify the type of gradient computation. Currently, this class determines which procedure to follow using an internal logic that is not sufficiently flexible to accommodate plugins. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add deric_calc_type option to `Deriv::compute()`; - [x] Define enum and python interface. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1756:460,interface,interface,460,https://psicode.org,https://github.com/psi4/psi4/pull/1756,1,['interface'],['interface']
Integrability,"## Description; This PR is a reimplementation of https://github.com/psi4/psi4/pull/2933; but instead of entirely deleting the `ERISieve` class, it makes `ERISieve` inaccessible for use through the following:. - Using `core.ERISieve.build` now throws an `UpgradeHelper` exception when called, as compared to the previous behavior of giving a warning.; - Calling the `ERISieve` constructor C++-side now throws an exception, with the same message as the UpgradeHelper would give. Aside from that, this PR does the same things as https://github.com/psi4/psi4/pull/2933. `ERISieve` is replaced with `TwoBodyAOInt` in all use cases, with adjustments as necessary. Additionally, the new version of v2rdm_casscf is used, which also uses `TwoBodyAOInt` instead of `ERISieve`. ## User API & Changelog headlines; - [X] Calling `core.ERISieve.build` Py-side, or constructing an `ERISieve` object C++-side, now throws an exception. The removed functionalities, specifically `shell_significant`, can be accessed via the construction of a TwoBodyAOInt object. ## Dev notes & details; - [X] The `ERISieve` class in libmints has been made inaccessible, now throwing exceptions when constructed (with an UpgradeHelper Py-side, and a PSIEXCEPTION C++-side).; - [X] Functionalities in `ERISieve` that were not in `TwoBodyAOInt` and were required in the code, were added to `TwoBodyAOInt`.; - [X] The PKJK files have been adjusted as necessary to support the use of `TwoBodyAOInt`. ## TODO; - [X] Remove ERISieve from all other external plugins (currently focusing on v2rdm_casscf). ## Questions; - N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2974:436,message,message,436,https://psicode.org,https://github.com/psi4/psi4/pull/2974,1,['message'],['message']
Integrability,"## Description; This PR is designed to enable testing of a wide variety of combinations of `SCF_TYPE`, `SCF_SUBTYPE`, and `SCREENING` keywords available in Psi4. Of the currently-available JK tests, scf5 covers a wide variety of build methods, but only at a single screening type per method (density or csam, depending on the method). Meanwhile, `test_erisieve.py`, after the updates introduced in https://github.com/psi4/psi4/pull/2973, tests a wide variety of screening types, but with limited testing in conjunction with different JK builds (the only tests that don't use the Python interface of `TwoBodyAOInt` directly, use `SCF_TYPE=DIRECT` or `DF` as the JK method for screening comparisons). This leaves a lot of untested JK build+screening combos, which may be potentially broken and uncaught by the CI as a result. As a matter of fact, such cases actually do exist in the code currently (e.g., CompositeJK methods + no screening). This PR adds a new pytest module, `test_comprehensive_jk_screening.py`. It is effectively an expanded version of the scf5 test module, testing one of the scf5 systems (singlet oxygen) with the same basis set, but also including different screening methods and algorithmic subtypes available in Psi4. Screening is assumed to have an insignificant impact on energy within the tolerance used, so all screening types for a given method use the same reference energy. Some combinations of method and screening type throw an exception by design; this is accounted for in the test by testing that such combinations do indeed throw an exception as expected. Other combinations of method and algorithm are broken at the moment and error out; these are simply skipped for now. They are all logged in the same spot, and can and will be addressed in future PRs. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new pytest module to Psi4, `test_comprehensive_jk_screening.py` , to test different combinations of JK build algorithms and ERI ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2978:309,depend,depending,309,https://psicode.org,https://github.com/psi4/psi4/pull/2978,2,"['depend', 'interface']","['depending', 'interface']"
Integrability,"## Description; This PR is intended to implement VV10 gradients and cache collocation matrices to prevent reconstruction every iteration. The VV10 gradient is on hold until I build a new Grid that uses only atom-centered blocks rather than blocks that possibly contain functions from multiple centers. This is due to the fact that the VV10 nuclear gradient has a component which requires a gradient with respect to centers and not just with respect to the density as there are explicit `1/r` dependance in the VV10 energy. ## Todos; - [x] Cache collocation matrices to remove DFT bottleneck for small molecules.; - [x] Figure out how many blocks to store based on available memory.; - [ ] Implement VV10 gradients; - [x] Orbital VV10 gradient piece implemented; - [ ] Nuclear VV10 gradient piece implemented; - [ ] A DFT Grid that uses only Atom centered blocks. ## Questions; - [ ] Anyone have thoughts on how to figure out how much memory JK and grid caching should receive?. Timing for a small molecule without a cache using TPSS (a MGGA):; ```; | UV: Form V : 22.583u 1.117s 13.702w 15 calls; | | Properties : 12.333u 0.883s 7.756w 10530 calls; | | Functional : 5.617u 0.033s 3.217w 10530 calls; | | V_xc : 4.400u 0.117s 2.567w 10530 calls; ```. With a cache:; ```; | UV: Form V : 13.750u 0.967s 8.316w 15 calls; | | Properties : 4.083u 0.783s 2.422w 10530 calls; | | Functional : 4.950u 0.000s 3.186w 10530 calls; | | V_xc : 4.383u 0.100s 2.564w 10530 calls; ```. Note DFT V matrix takes a good portion of JK time up to ~2k basis functions with our DF code, though this depends on the density of the grid. Cache sizes:. Grid (99, 302); ```; LDA - 6MB/atom; GGA - 24MB/atom; MGGA - 60MB/atom; ```. Grid (120, 590); ```; LDA - 16MB/atom; GGA - 48MB/atom; MGGA - 160MB/atom; ```. A cache of every block point seems to make the computation 40-80% faster. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/bui",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1233:492,depend,dependance,492,https://psicode.org,https://github.com/psi4/psi4/pull/1233,1,['depend'],['dependance']
Integrability,## Description; This PR is meant to replace (now closed) PR #513. The overall goal is to build and install Psi4 in a manner that allows it to be included as a dependency in other packages. ## Todos; - [x] Get tests to pass. Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Supports externally built Pybind11; - [x] Required pulling in PR #557 (*i.e.* this PR includes that one); - [x] No more `LD_PRELOAD` required for MKL; - [x] Factored plugin copy/pasted code so that the next item need only be changed in one place; - [x] Plugins now respect `CMAKE_PREFIX_PATH` and do not clobber it; * **User-Facing for Release Notes**; - [x] `find_package(psi4 CONFIG REQUIRED)` works and respects externally built Pybind11. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/563:159,depend,dependency,159,https://psicode.org,https://github.com/psi4/psi4/pull/563,1,['depend'],['dependency']
Integrability,"## Description; This PR makes two small improvements to the `JK` class and SCF code. These improvements simplify the addition of new JK algorithms to Psi4, particularly an upcoming semi-numerical exchange. The first change is transferring the responsibility of zeroing out the `J`, `K`, and `wK` matrices from the parent `JK` class to each derived `JK` class. This makes it easier to implement JK algorithms which build the fock matrix incrementally. (i.e. use the difference in density between SCF iterations to compute differences in J/K). With this change, much of the incremental fock code in the `DirectJK` class can be simplified. The second change is the addition of an `early_screening_` member variable to the `JK`. The idea is that some future JK algorithms will increase performance by using looser screening procedures/thresholds in early SCF iterations. Screening is then tightened as the SCF approaches convergence. This logic was added to the SCF driver. The `early_screening_` variable defaults to false for all existing JK classes, so there is currently. no change in behavior. ## Todos; - [x] Derived `JK` classes are responsible for zeroing their matrices; - [x] JK screening is SCF iteration dependent. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2529:1212,depend,dependent,1212,https://psicode.org,https://github.com/psi4/psi4/pull/2529,1,['depend'],['dependent']
Integrability,"## Description; This PR moves the `dfocc` technology for density-fitted gradients out of `dfocc` and into the `libmints` module for use by other modules. Obligatory @jturney and @loriab pings. **Q:** Can other modules use this code?; **A:** I can personally promise that `dct` will be using this soon, and Forte can use this for its DF-CASSCF gradients. If you want to use this code, just send me a message! However, the other modules in Psi that currently support DF gradients shouldn't use this. The range-separated gradients mean that SCF can't use this, and DFT gradients are varied enough anyways that we shouldn't try to generalize them. Rob's DFMP2 implementation separates out the Coulomb and Exchange contributions from the derivative. The Coulomb terms allow a performance optimization which prevents this generalized solution from applying. **Q:** Do we _really_ need to create a `compute_df` function separate from `compute` for gradients?; **A:** I'd say yes, for two reasons. First, in the DF case, it's not obvious which DF integrals you're using (`df_basis_scf` is probably one, but is the other `df_basis_mp`, `df_basis_dct`, `df_basis_cc`?), so you need to explicitly supply this. One can imagine ways to circumvent this, but those require other infrastructure changes. Second, the `compute` function is rather complicated due to its use of three different ""algorithms"". Combining the two functions would make them more complicated. Simplifying the `compute` function, while an important task and one I will probably need to do before I can fully put my graduate projects behind me, is outside of the scope of this PR. Do you _really_ want to review something even larger?. **Q:** How stable is the interface?; **A:** Changes aren't _necessary_, and I plan to keep this stable at least until after the `dfocc` resync. However, I may make some interface changes if I find they're convenient for non-`dfocc` modules that use this. The big change I'm considering is taking the `dfmp2` a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2079:399,message,message,399,https://psicode.org,https://github.com/psi4/psi4/pull/2079,1,['message'],['message']
Integrability,"## Description; This PR perfects the `fcidump` interface by adding a field that stores the point group symmetry (`PNTGRP`, just to keep it in the FORTRAN spirit of ""Thou shall use no unnecessary vowels in variable names""). For example:; ```; ORBSYM=1,1,1,1,4,4,4,3,3,3,2,2,2,; ISYM=1,; PNTGRP=D2H,; ```; Why is this change necessary? In essence because with the current information it is impossible to restart a computation that uses symmetry. Without the point group information, one cannot determine the psi4 irrep labels of orbitals from the standard information contained in the FCIDUMP file (see issue #1431) because when the file is written the irreps are resorted in a way that depends on the point group. One potential issue: codes that consume FCIDUMP files produced by psi4 could encounter problems parsing the line that starts with `PNTGRP`. So I made this extra line optional via an argument passed to the `fcidump()` python function. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add point group information to fcidump files (enabled via bool argument); - [x] Fix a bug in the function that reads fcidump files when no orbital energies are present. ## Checklist; - [x] Updated `fcidump` test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1942:47,interface,interface,47,https://psicode.org,https://github.com/psi4/psi4/pull/1942,4,"['depend', 'interface']","['depends', 'interface']"
Integrability,"## Description; This PR provides a more useful error message when the issue described in https://github.com/psi4/psi4/issues/2890 is encountered. In short, the COSX K build method breaks with certain grid configurations - specifically, grid configurations which result in negative grid weights. How to best handle that issue - removing such grid configurations from Psi4 entirely, handling negative grid weights differently within COSX itself - is still under discussion, and this PR is _not_ meant to be a final fix to the aforementioned issue. Rather, this PR is meant to provide a more informative error message in the case that an end user _does_ encounter this error. Currently, when this error is encountered, it shows up as either a DGESV error (if the initial COSX grid has negative weights) or an ADIIS minimization error (if the final COSX grid has negative weights). These error outputs don't help the end user figure out what is wrong at all. So, what this PR does, is add sanity checks to ensure that the COSX grids don't have negative weights, and throw an exception if they do. The sanity check exceptions explain to the user what the error is and how they can fix it (i.e., changing the grid pruning scheme and/or number of spherical points). Again, I want to emphasize that this is _not_ intended to be a full fix to https://github.com/psi4/psi4/issues/2890. Rather, it is an intermediate step that is designed to better help end users avoid the problem if they run into it themselves. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Add sanity checks to COSX to ensure that neither of the COSX grids have negative grid weights. An exception is thrown if either of the grids do. ## Questions; - [x] Probably better discussed on https://github.com/psi4/psi4/issues/2890, but how do we want to officially solve this problem? There has been some discussion on simply removing grid configurations which lead to negative weights, as well as discussions on reformulati",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906:53,message,message,53,https://psicode.org,https://github.com/psi4/psi4/pull/2906,2,['message'],['message']
Integrability,## Description; This PR refactors EFP routines such that they use the mints functions I implemented for PE a while ago.; Less code and a significant speed-up for the electric field integral evaluations. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move `efp.py` to `solvent` folder; - [x] Refactor functions. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features (already present); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2111:38,rout,routines,38,https://psicode.org,https://github.com/psi4/psi4/pull/2111,1,['rout'],['routines']
Integrability,"## Description; This PR removes some convergence checks in the `dct` module that are redundant (when formulated correctly) and currently not implemented correctly. In the current `dct` code, my threaded computations with near linear dependencies were taking a variable number of iterations to converge, due to the condition `update_scf_density_RHF() < orbitals_threshold_` being false. That check is _intended_ to enforce convergence of the orbitals, which change iteration-to-iteration. `update_SCF_density_RHF` returns a measure of how much the reference density changed but does not treat it with an orthogonalizer, so in the near linearly-dependent case, numerical noise leads to the computation proceeding even after all other convergence metrics are flat. Given the choice between fixing the check or removing it, this PR removes it.; * In the case where orbitals are optimized to _satisfy a commutator equation_, all of our orbital convergence metrics are motivated by SCF. We already have the SCF check for small orbital residual elsewhere in the code. We don't check that the absolute change in the density is small in the SCF case, so we shouldn't check it here, either.; * In the case where orbitals are optimized to _minimize the energy_, there is no theoretical justification for this check. We have existing checks that the residual of the orbital gradient is small. ## Todos; - [x] Removes an unnecessary, buggy `dct` convergence metric. ## Checklist; - [x] `dct` tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2381:233,depend,dependencies,233,https://psicode.org,https://github.com/psi4/psi4/pull/2381,2,['depend'],"['dependencies', 'dependent']"
Integrability,"## Description; This PR removes some unused code from the `dct` module. Most importantly for me, this gets rid of a difficult-to-follow function and removes an IWL call. I count all three of those as victories for code cleanup. Expect another PR to replace some IWL in `dct` with `libdpd`, but that depends on the timing tests. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Removes unused code. ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2168:299,depend,depends,299,https://psicode.org,https://github.com/psi4/psi4/pull/2168,1,['depend'],['depends']
Integrability,"## Description; This PR strives to implement an interface of psi4 to the [ddX library](https://github.com/ACoM-Computational-Mathematics/ddX), which implements solvation models (COSMO, PCM, linearised Poisson-Boltzmann) following a domain-decomposition approach. At its current stage I open the PR to get some feedback from devs about the suggested changes and structure and to finalise the upstream python interface of ddX. Note that this PR Is currently deliberately done on top of an outdated master, since any commit after #2388 introduces segfaults (details see below), which so far I have not yet been able to trace down. Any help on that would be much appreciated. ## User API & Changelog headlines; - Implementation of PCM and COSMO solvation models based on the ddx library. ## Dev notes & details; - Introduction of a NumIntHelper class to compute some integrals numerically using a DFT grid; - Introduction of ddx solvation model and new ddx options. ## Reproducer for the mysterious segfault; As part of rebasing against the current master I encountered a really strange segfault. I managed to produce a minimal example, which has really nothing to do with ddx and only adds a python interface to a simple numerical electrostatic integral. See here for a [trimmed-down diff](https://github.com/psi4/psi4/compare/master...mfherbst:psi4:segfault). On my machine checking out this `segfault` branch with `0_configure.sh`, building and running the `mytests/runtests.sh` script gives a segfault inside the numerical integration in the `PCMPotentialInt` class. Note that the code I added *is not even called*, the call to `PCMPotentialInt` happens from the pcm code *which I have not modified*. Now, commenting out; ```c++; PrintIntegralsFunctor printer;; potential_integrals_->compute(printer);; ```; the segfault disappears. I'm getting the weird feeling I'm doing something really stupid here and I just missed it. ## Questions; - [x] Thoughts on the NumIntHelper?; - [x] Is D -> D_cart neede",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767:48,interface,interface,48,https://psicode.org,https://github.com/psi4/psi4/pull/2767,2,['interface'],['interface']
Integrability,## Description; This PR updates the MDI integration to support version 1.2 of the MDI Library. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2160:40,integrat,integration,40,https://psicode.org,https://github.com/psi4/psi4/pull/2160,1,['integrat'],['integration']
Integrability,"## Description; This PR updates the `cppe` interface code (including option handling) to the newest version `v0.2.1` (major performance improvement 🚀). . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Updated interface, options; - [x] Add options for Thole damping. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1922:43,interface,interface,43,https://psicode.org,https://github.com/psi4/psi4/pull/1922,2,['interface'],['interface']
Integrability,"## Description; This PR will expose the `PCM` object in Psi4 out to Python, similarly to #861, but will bring it to fruition within the Python-side SCF iteration scheme. The `PCM` object wraps the PCMSolver library and offers one method: `compute_PCM_terms` to calculate the polarization energy **and** the Fock matrix contributions due to the continuum. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); - [x] Moved `HF::print_energies()` Py-side; - [x] Mirror changes introduced in #896 ; - [x] Add tests for density-fitted SCFs (thanks @CDSherrill for pointing this out); * **User-Facing for Release Notes**; - [x] Exposing the `PCM` object to Python.; - [x] Restoring PCM functionality with Py-side iterations.; - [ ] Document behavior for gradients (see question). ## Questions; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?; - The electrostatic potential and apparent surface charge vectors are now dimensioned using a `Dimension` object that keeps track of how many cavity points per irrep there are. This is one step to get PCM fully functional with point group symmetry. It seems to me the integrals are always calculated using C1. How can I get them to be calculated with symmetry?; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a re",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/878:187,wrap,wraps,187,https://psicode.org,https://github.com/psi4/psi4/pull/878,1,['wrap'],['wraps']
Integrability,"## Description; This PR will expose the `PCM` object in Psi4 out to Python. The `PCM` object wraps the PCMSolver library and offers three methods:; 1. `compute_E` to calculate the polarization energy due to the continuum;; 2. `compute_E_electronic` to calculate the polarization energy due to the continuum, but only using the electron density;; 3. `compute_V` to calculate the PCM potential, which is added on top of the Fock matrix. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); * **User-Facing for Release Notes**; - [ ] Exposing the `PCM` object to Python. ## Questions; - The initialization of the `PCM` object requires a `BasisSet`. I am unsure what is the best way to grab that Python-side.; - Still regarding initialization, I think it can be done better. Meaning that after reading the user input, the `PCM` object can be initialized by passing the printlevel and the `BasisSet` _under the hood_. @loriab @dgasmith can you point me to existing examples in the codebase? I've looked around in `core.cc` but it's a bit daunting.; - I think this will be useful for the ongoing work on #847 ; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/861:93,wrap,wraps,93,https://psicode.org,https://github.com/psi4/psi4/pull/861,1,['wrap'],['wraps']
Integrability,## Description; This factors the code in the `CMakeLists.txt` of the various plugin templates into one function to avoid; copy/paste. Within this function it then ensures that `CMAKE_PREFIX_PATH` is properly passed to each build in turn allowing the user to build plugins and use externally built Psi4 dependencies. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adding additional plugin templates to the build system is dramatically simplified; * **User-Facing for Release Notes**; - [x] You can now use external versions of libraries that Psi4 normally compiles with plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/582:302,depend,dependencies,302,https://psicode.org,https://github.com/psi4/psi4/pull/582,1,['depend'],['dependencies']
Integrability,"## Description; This fixes Example 2 of #2231. DF-DCT no longer segfaults in the presence of linear dependencies. Even with this merged in, #2231 should stay open until I've had a chance to do some more thorough testing of the module. This is, once again, a stand-alone bugfix. ## Questions; - [x] Test case added! ~~It would be good for me to write a test case for everything I check as part of #2231. Should this live in ctests or pytests? I'm not clear on test best practices at this point in Psi development, since we want to mover over to pytests eventually. Even then, _right now_ is a bad time to write the test since #2232 will change the reference output.~~. ## Checklist; - [x] `ctest -R dct` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2233:100,depend,dependencies,100,https://psicode.org,https://github.com/psi4/psi4/pull/2233,1,['depend'],['dependencies']
Integrability,"## Description; This is No. 10 of the DDD series, #1351. ## Todos; - mostly a few little differences with ddd that will reduce the changed line overhead; - [x] add logging printing, minimize imports; - [x] `mol = core.Molecule.from_schema(molschemus, nonphysical=True)` allows freq-masses test to run in ddd. nonphysical flag allows user-set atomic masses outside the known isotope range. the schema runner shouldn't be the block to this.; - [x] in tests add some alternate ref values. sometimes these are conventional, which can be handy reusing a test in a non-df program; - [x] adding deprecation warnings is good, but we don't often actually delete the fn promptly at the version we say it will stop working at. this is harmless, in my opinion, as it gives people longer to adapt, and developers can clear away the old fns when they actually become inconvenient. to better reflect this state of affairs, the standard message ""Using blah is deprecated, and in version it will stop working"" has been changed to ""Using blah is deprecated, and as soon as version it will stop working"". this also removes the temptation to keep incrementing <version>, which gives a misleading impression about how long ago users were warned. have backtracked on run_json accordingly from 1.7 to 1.5. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2557:921,message,message,921,https://psicode.org,https://github.com/psi4/psi4/pull/2557,1,['message'],['message']
Integrability,"## Description; This is No. 5 of the DDD series, #1351. ## Todos; - [x] Add `psi4 --module` for find pymod. qcng already tries to use it; - [x] Add another mode to `prepare_options_for_modules` that instead of figuring out what options are active in a module (mediated mode, used previously for sow/reap, I think) now records the settings for reset (state mode, used in DDD). Added a context manager to ""hold and restore"" the options state.; - [x] Add `run_qcschema(..., postclean)` option that handles the trouble when this is called *from Psi4* of deleting the parent session's output file.; - [x] Be tolerant of missing files when cleaning numpy files. I don't remember why/if this was necessary, but on the whole, a missing numpy file isn't worth erroring on.; - [x] Aboid extra '/' in paths from psio. I don't remember if this was fixing an error or just aesthetic.; - [x] docstrings; - [x] ADDED: another attempt to fix Win conda package. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2530:260,mediat,mediated,260,https://psicode.org,https://github.com/psi4/psi4/pull/2530,1,['mediat'],['mediated']
Integrability,"## Description; This is No. 8 of the DDD series, #1351. ## Todos; - [x] qcvars `FINDIF NUMBER` and `NBODY NUMBER` are handy to confirm those wrappers are planning correctly. This PR forward-ports more tests of those vars; - [x] two more detailed nbody tests are forward-ported. one is a copy of a ctest only run through qcschema. the other checks the total vs ie return that was wrong in nbody for a while and solved by #2221.; - [x] add ""nbody"" label/mark to ctests and pytests systematically. make all nbody tests runable through pytest. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2544:141,wrap,wrappers,141,https://psicode.org,https://github.com/psi4/psi4/pull/2544,1,['wrap'],['wrappers']
Integrability,"## Description; This is a continuation of @bennybp's #587 that I'd like to wrap up, but the gdma Travis isssue needs fixing. We can work out merge order later. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] everything #587 does; - [x] changes the ERD warning, updates the docs, adds test case; * **User-Facing for Release Notes**; - [x] ERD integrals now work for far more types of systems. Previously it was only direct, conventional HF. Now works for most all energies (except LRC DFT). Does not work for gradients, but those are disabled. ## Questions; - [x] Waiting for a clean Travis test (gdma culprit), then ready to go. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/605:75,wrap,wrap,75,https://psicode.org,https://github.com/psi4/psi4/pull/605,1,['wrap'],['wrap']
Integrability,"## Description; This is a part of *Psi4* porting to Windows (#933). Add options to *Azure* pipeline to build a optimized *Psi4* with custom *Python* version. ~~**Depends on #1527**~~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add an option to trigger optimized builds; - [x] Add an option to choose *Python* version; - [x] https://dev.azure.com/psi4/psi4 pipeline have to be configured to provide the following variables:; - `cmake.build_type` with default `Debug` (settable at queuing time); - `python.version` with default `3.6` (settable at queuing time). ## Questions; - [x] For the optimized builds, `MAX_AM_ERI` is set 8. -- 8 is enough.; - [x] Python 3.5 isn't supported. Some dependencies are broken. -- Python 3.5 is dropped. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1539:162,Depend,Depends,162,https://psicode.org,https://github.com/psi4/psi4/pull/1539,2,"['Depend', 'depend']","['Depends', 'dependencies']"
Integrability,"## Description; This is a start to addressing #2272 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `MBIS_CHARGES` and `MBIS_VOLUME_RATIOS` are now separate oeprop tasks to the user but still reusing code.; - [ ] `oeprop(wfn, ""MBIS_VOLUME_RATIOS"")` should be fine (indep oeprop fn), but `set scf_properties mbis_volume_ratios; energy(""scf"")` will still fail as #2272 reported because those are `OEProp` class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to `OEProp`s in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests. probably some of the existing ones will break for only calling one mbis property but checking volrat. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2273:690,rout,routes,690,https://psicode.org,https://github.com/psi4/psi4/pull/2273,1,['rout'],['routes']
Integrability,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Create `%PREFIX%\Scripts` -- `conda` stopped doing it automatically.; - [x] Don't package `bin\psi4.bat` -- `conda` learnt to recognize *Python* scripts and generate wrappers for them, i.e. `%PREFIX%\Scripts\psi4.exe`, but it is still needed for local testing.; - [x] Pin LLVM 7.0.1 -- 8.0.0 fails to build the optimized libint. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) -- https://github.com/psi4/psi4/issues/933#issuecomment-494354023. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1648:330,wrap,wrappers,330,https://psicode.org,https://github.com/psi4/psi4/pull/1648,1,['wrap'],['wrappers']
Integrability,"## Description; This is part of *Psi4* porting to Windows (#933). From MKL 2019.0, the packaging of Windows packages has changed. Import libraries (.lib) have been moved to separate `mkl-devel` package (https://github.com/ContinuumIO/anaconda-issues/issues/10154), which follows the changes in Intel channel (https://anaconda.org/intel). The same happened to `intel-openmp`, but `intel-openmp-devel` package has not been created. *Clang* needs an import library `libiomp5md.lib` to link with `libiomp5md.dll`. Interestingly, MKL installer from *Intel* (https://software.intel.com/en-us/mkl/choose-download/windows) has that library. This obsoletes #1408 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix the missing Intel OpenMP import file; - [x] Update to MKL 2019.1; - [x] Improve CMake message. ## Questions; - [x] This is hackish, but makes things to work. Ideally, we need `intel-openmp-devel`, so hopefully *Intel* decides to make it. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1571:844,message,message,844,https://psicode.org,https://github.com/psi4/psi4/pull/1571,1,['message'],['message']
Integrability,"## Description; This is something I have been working on as part of the upcoming Psi4-GauXC interface; but it seems to be of interest for other use cases, so I will be adding it here as a separate PR. What this change does, is it adds two new member functions to the `Psi4::Matrix` class, `eigen_map()` and `eigen_maps()` . Both of these functions serve the same purpose - take the Psi4 matrix in question and return a representation of said matrix through Eigen's `Map` objects. The `Eigen::Map` class acts the same way as a normal `Eigen::Matrix` object, but uses an external array as its data buffer rather than an internal data buffer. The `eigen_map()` and `eigen_maps()` functions, then, return Eigen matrix-like objects that directly link with the Psi4 matrix data buffer of the Psi4 matrix for which the function was called. This provides an efficient fashion by which to utilize Psi4 matrices in contexts which require Eigen constructs, with no data deepcopying or Eigen-to-Psi4 back-conversions required. There is a key difference between the two functions. `eigen_map()` assumes that the matrix has a single irrep, and returns a single `Eigen::Map` object. `eigen_maps()` , on the other hand, is used for matrices with multiple irreps, and returns a `std::vector` of `Eigen::Map` objects, each `Map` in the `vector` corresponding to one irrep of the Psi4 matrix. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] Adds two new functions, `eigen_map()` and `eigen_maps()`, usable in Psi4 plugins and downstream programs, that return a formulation of the calling `Psi::Matrix` object, that is usable in contexts where `Eigen::Matrix` objects are required/desired. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3143:92,interface,interface,92,https://psicode.org,https://github.com/psi4/psi4/pull/3143,1,['interface'],['interface']
Integrability,"## Description; This produces a docs build with no warnings or errors, either overt (`make html -W`), external links (`make linkcheck`), or internal links (`make html -n`). requires a qcel docs update. hopefully this will provide a clean docs base moving forward. This PR is the controversial part of the docs technical refresh. I think there was some technical debt left over from the 2016 inversion in the module structure of the driver. What I think was happening was that the `psi4/driver/driver.py` was the nexus, and any wrappers or utilites that it happened to import became the API. The folder psi4/driver didn't really function as a module, and any `psi4.driver` was referring to driver.py, not psi4/driver/. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python finding it irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2166:527,wrap,wrappers,527,https://psicode.org,https://github.com/psi4/psi4/pull/2166,1,['wrap'],['wrappers']
Integrability,"## Description; This pull request aims to properly update energy, orbital energies, densities etc of the wave function for (conventional and density-fitted Mp2) and density-fitted CCSD calculations, so as to ensure proper checkpointing using FCHK interface. ; Also, there seems to be a problem in using FCHKWriter for conventional mp2 gradient calculations as I get a segmentation fault. This PR is meant to fix these problems which was pointed out by abdale on the psi4 forum. http://forum.psicode.org/t/problems-with-wavefunction-object-and-fchk-interface/532. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/747:247,interface,interface,247,https://psicode.org,https://github.com/psi4/psi4/pull/747,2,['interface'],['interface']
Integrability,"## Description; This will temporarily disable installation and testing of `adcc`.; Current `psi4` and `adcc` do not seem to like each other (dependency issues with MKL and HDF5). As discussed with @loriab, `adcc` will be re-enabled for tests upon reconciliation. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1848:141,depend,dependency,141,https://psicode.org,https://github.com/psi4/psi4/pull/1848,1,['depend'],['dependency']
Integrability,"## Description; This will upgrade our ECP engine from the native implementation to the superior [standalone library](https://github.com/robashaw/libecpint), also written by Rob Shaw. That library also provides gradient and Hessian terms, which will greatly improve performance. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Hook up external build; - [x] Get energies working; - [x] Get gradients working; - [x] Get Hessians working; - [x] Remove old native implementation; - [x] Make all tests / references to ECPs conditional depending on libECP activation. LAB: conditional build marked by `USING_ecpint` compile definition. This turned out uglier than should strictly be needed because as soon as you ifdef the ao_ecp declarations in integrals.cc, all calcs, w/ or w/o ecp segfault. Possibly I'm missing something, but present ifdef pattern is working stably.; - [x] Linux and Mac conda packages are available off psi4/label/dev. Windows untested. These packages have stylistic problems, but they'll do for now. There are also Linux and Mac conda packages off conda-forge. At least the Linux works fine. Installation is mildly involved with the mixed base channels, so the psi4 packages exist for simplicity of availability.; - [x] NYI message on stability code added to close #2577 ; - [ ] build docs will be in a separate PR. ## Questions; - Can anyone think of how one might access code with ecp ifdefs _without_ building a psi4 BasisSet (besides zerobasis)? Particularly though some non-driver mintshelper API call? This is important because the nearly sole whoa-your-mol+basis-needs-ecp-but-libecpint-not-built warning happens at the BasisSet build in export_mints. If users get around that, they'll be surprised by missing electrons b/c ecp code is deactivated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135:588,depend,depending,588,https://psicode.org,https://github.com/psi4/psi4/pull/2135,1,['depend'],['depending']
Integrability,## Description; Updates the Psi4 interface to the MolSSI QCSchema using canonical QCElemental objects. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Begins deprecation of the old JSON command line.; - [x] Validates and runs Psi4 via QCSchema conventions and objects.; - [x] Allows both JSON and Msgpack CLI execution. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1723:33,interface,interface,33,https://psicode.org,https://github.com/psi4/psi4/pull/1723,1,['interface'],['interface']
Integrability,"## Description; Updates the docs with any undocumented new features in 1.4. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] #1491 (ATM); - [x] #842 (UHF Hess); - [x] #1803 (E(30)ind bug fix); - [x] #2056 (MBIS volumes); - [x] #2081 (SAPT-D); - [x] #2127 (MBIS volume ratios). - [x] #1934 (cct3 plugin); - [x] #1661 (mp2-d gradients). I still have #1721 (Libint2 and shell screening), #1723 (QCSchema Interface), and #1728 (QCSchema Wavefunction Quantities) as being undocumented or incompletely documented. Let me know if I'm wrong here, and any suggestions (or volunteers) on how to complete them are welcome. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2205:459,Interface,Interface,459,https://psicode.org,https://github.com/psi4/psi4/pull/2205,1,['Interface'],['Interface']
Integrability,## Description; Uses the [new RESTful interface](https://pubchem.ncbi.nlm.nih.gov/pug_rest/PUG_REST.html#_Toc458584218) to get PubChem hits.; ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] Fixes PubChem tests with Python 3. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/507:38,interface,interface,38,https://psicode.org,https://github.com/psi4/psi4/pull/507,1,['interface'],['interface']
Integrability,"## Description; When trying to build from source, I had problems with Pybind11 headers not being found. This is most likely due to #2369 introducing new dependencies on PB11 being introduced that the build system is unaware of. This PR fixes the problem on my Linux/ICPC setup, but I'm open to suggestions if there's a more up to date way of telling CMake about these new dependencies. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2387:153,depend,dependencies,153,https://psicode.org,https://github.com/psi4/psi4/pull/2387,2,['depend'],['dependencies']
Integrability,"## Description; While working on a _different_ PR for the dcft code, I stumbled across a bug that I had accidentally introduced in #1310. DCFT previously allowed you to use the amplitudes from a previous computation as your guess for the next one by setting `dcft_guess dcft`. Key to this mechanism was the fact that the LibDPD files persisted after the computation... which is precisely what I changed in #1310 to fix #1309, where intermediate files would interfere with the amplitude guess. The primary purpose of this PR is to both keep the guess feature working and keep issue #1309 fixed. This is accomplished by checking if `dcft_guess` is `dcft` at the time of `compute_energy` and choosing whether or not to nuke previous files. So past intermediate files will interfere only when you want them to. There are also some related changes: adding a helpful error message to replace the PSIO error that appears when the past files don't exist, adding a test case to prevent a repeat of this little mess, removing some dead code, and per discussions with @jturney, moving some tensors from the libtrans libdpd to the dcft libdpd if they were more than integrals. The other `dcft` PR will be coming as soon as this one is merged in: another bugfix, and (finally!) the transition from `dcft` to `dct`. Obligatory @ssh2 notification. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Restore `dcft_guess dcft` functionality; - [x] Move tensors (DCT's amplitudes and ""generalized"" Fock matrix) from the `libtrans` dpd buffer to the `dcft` buffer; - [x] Add a test for `dcft_guess`; - [x] Eliminate one obnoxious PSIO_ERROR. ## Checklist; - [x] Tests added for any newly working features; - [x] All 14 `dcft` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1717:867,message,message,867,https://psicode.org,https://github.com/psi4/psi4/pull/1717,1,['message'],['message']
Integrability,"## Description; [My](https://github.com/psi4/psi4/pull/2824) [previous](https://github.com/psi4/psi4/pull/2832) [PRs](https://github.com/psi4/psi4/pull/2834) fixed the bugs making UKS TDDFT and stability analysis incorrect, so let's enable them. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Stability analysis is now supported for unrestricted GGAs.; - [x] TDDFT is now supported for unrestricted GGAs. . ## Dev notes & details; - [x] The prohibition against VV10 is not added to this PR, but its enforcement is. The old code would have given incorrect results. ## Checklist; - [x] Tests _mostly_ pass. `test_tdscf_excitations.py` has this PR covered. The one complication is that we're failing the TDA and RPA tests for CH2 with HCTH93. My investigations lead me to suspect the fault is bad reference data, probably involving pruned integration grids. @bgpeyton has confirmed pruning as the issue and volunteered to re-generate proper data. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2849:962,integrat,integration,962,https://psicode.org,https://github.com/psi4/psi4/pull/2849,1,['integrat'],['integration']
Integrability,"## Description; `cc` now uses `Matrix` rather than `block_matrix` for the OPDM and Lagrangian. During the course of this transition, I discovered an indexing bug in the conversion of the UHF densities to Matrix. This dates [back to 2016](https://github.com/psi4/psi4/commit/d4bbb98291afe4b500476d0d46c87ded3821bed6). As-is seen from the test values that had to change, this can lead to dramatic errors in properties. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixed a bug where UHF-CCSD properties were incorrect when some orbitals were singly occupied. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `cc` now stores its Lagrangian and OPDM as `Matrix` objects rather than block_matrices rather than write them to disk; - [x] `cc` now uses the wfn based interface, rather than the disk interface, to gradients ; - [x] Adds a finite difference correctness test to UHF-CCSD one-electron properties; - [x] Much heavier use of slice technology . ## Questions; - [x] Lori, does the test look okay to you?; - [x] Should I do another check on the dipole that changed the most in our test? That change is _massive_. ## Checklist; - [x] `cc` tests pass; - [x] Edited test with incorrect reference values . ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2818:1077,interface,interface,1077,https://psicode.org,https://github.com/psi4/psi4/pull/2818,2,['interface'],['interface']
Integrability,"## Description; `sq_rsp(...)` is an ancient diagonalizer function from Psi3 with many issues. While its innards could be improved, the function signature is horrid. It should be deprecated and replaced with something better.; Stemming from the awful interface, users of `sq_rsp(...)` never check if the diagonalization failed, because they _cannot_. This is now rectified by adding failure checks wherever the new DSYEV wrappers are called.; Checks against non-square matrices are also added where there is both a row and column count at the call site. Some of the call sites would be dfocc territory, this PR does not include them to avoid conflicts with the dfocc overhaul.; This is another shard of the https://github.com/psi4/psi4/pull/2642 mega-PR that can be merged after PR #2678 and #2738 are in. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement two new wrapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; Please note that unlike `sq_rsp(...)`, the new functions do not take a ""tolarence"" value, but this is actually a null change as that parameter has been set-but-unused in `sq_rsp(...)` since ~forever ago when `sq_rsp(...)` switched to calling DSYEV internally.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure and guard against non-square matrices.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2686:250,interface,interface,250,https://psicode.org,https://github.com/psi4/psi4/pull/2686,3,"['interface', 'wrap']","['interface', 'wrapper', 'wrappers']"
Integrability,"## Description; clang-format GDMA interface. ## Questions; - [ ] If merging this PR will hinder your research b/c you have local edits, protest here or in #1144. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1166:34,interface,interface,34,https://psicode.org,https://github.com/psi4/psi4/pull/1166,1,['interface'],['interface']
Integrability,## Description; fix up simint and erd. ~**Contains debug printing which should be removed before final merge**~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] stops if you try to build simint w/Intel2018; - [x] decouples simint and erd to reveal broken erd interface; - [x] passes extra flags the absence of which can lead to empty mangling header; - [ ] fix erd interface. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1037:326,interface,interface,326,https://psicode.org,https://github.com/psi4/psi4/pull/1037,2,['interface'],['interface']
Integrability,"## Description; https://github.com/psi4/psi4/issues/1439#issuecomment-455799123 is a good idea prototyped here. Instead of always defaulting the cast-up basis to 3-21g, choose from within family. Here, only def2 is rolled out. Also, not integrated with basis blocks, so active for `set basis def2-tzvpp`, not `basis {assign I def2-tzvppd}` in original example. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] basis guess default Dunning, Petersson (zapa), and Jensen families to `pcseg-0`, which is 3-21g sized. none of these are ECP; - [x] basis guess default Karlsruhe to `def2-sv(p)`, so that ECP present for both orbital and fitting; - [x] remainder (incl. Pople and any custom) default to 3-21g. EDIT: Pople explicitly defaulting to 3-21g; - [x] EDIT: replaced DUAL in [this table](http://psicode.org/psi4manual/master/basissets_byfamily.html) with GUESS. - [x] I got `str not a callable fn` in error handling, so fixed up the error/trackback handling a bit. now prints to screen, too. EDIT: I think this got added elsewhere. ### contains #1494 (urgent fixes from this PR) so will need rebasing before final consideration. ## Testing; - [x] full ctest and pytest passes (except for dcft8, but that's a known issue). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1484:237,integrat,integrated,237,https://psicode.org,https://github.com/psi4/psi4/pull/1484,1,['integrat'],['integrated']
Integrability,## Description; misc. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] one more nix py35; - [x] try to get around below in https://lgtm.com/projects/g/psi4/psi4/logs/languages/lang:cpp. ```; [2019-03-04 21:34:07] [build] Scanning dependencies of target libxc_external; [2019-03-04 21:34:07] [build] [ 2%] Creating directories for 'libxc_external'; [2019-03-04 21:34:07] [build] [ 4%] Performing download step (git clone) for 'libxc_external'; [2019-03-04 21:34:07] [build] Cloning into 'libxc_external'...; [2019-03-04 21:34:10] [build] fatal: could not read Username for 'https://gitlab.com': No such device or address; [2019-03-04 21:34:10] [build] fatal: The remote end hung up unexpectedly; [2019-03-04 21:34:10] [build] Cloning into 'libxc_external'...; [2019-03-04 21:34:11] [build] fatal: could not read Username for 'https://gitlab.com': No such device or address; [2019-03-04 21:34:12] [build] fatal: The remote end hung up unexpectedly; [2019-03-04 21:34:12] [build] Cloning into 'libxc_external'...; [2019-03-04 21:34:13] [build] fatal: could not read Username for 'https://gitlab.com': No such device or address; [2019-03-04 21:34:13] [build] fatal: The remote end hung up unexpectedly; [2019-03-04 21:34:13] [build] -- Had to git clone more than once:; [2019-03-04 21:34:13] [build] 3 times.; [2019-03-04 21:34:13] [build] CMake Error at /opt/src/_lgtm_build_dir/external/upstream/libxc/libxc_external-prefix/tmp/libxc_external-gitclone.cmake:66 (message):; [2019-03-04 21:34:13] [build] Failed to clone repository: 'https://gitlab.com/libxc/libxc.git'; ```. ## Checklist; - [ ] ~Tests added for any new features~; - [x] ran quicktests from libxc tarball. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1567:279,depend,dependencies,279,https://psicode.org,https://github.com/psi4/psi4/pull/1567,2,"['depend', 'message']","['dependencies', 'message']"
Integrability,"## Description; misc. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] MKL _can_ link with libgomp on Linux+Gnu, but it can link with libiomp5 everywhere, incl. Mac (icpc, g++, clang++) and Linux (icpc, g++). Moreover in practice, Mac+Gnu+MKL+gomp leads to n-thread-dependent energies (note that none of our testing can catch this). So switching clang and gnu to intel interface and thread libraries when built with MKL. Note that the `-fno-openmp` is b/c gnu takes that slight provocation as signal to link in libgomp, and then you get _two_ threading libraries!; * **User-Facing for Release Notes**. ## Questions; - [x] Notice to @robertodr that math detection getting shaken up again. ## Status; - [x] Ready to go --- Nope, I just want to see what CI thinks of this",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/767:332,depend,dependent,332,https://psicode.org,https://github.com/psi4/psi4/pull/767,2,"['depend', 'interface']","['dependent', 'interface']"
Integrability,## Description; move dft-bench and vibanalysis tests to pytest. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] move the 4 dft-bench tests to pytest with parameterization; - [x] move the vibanalysis test to pytest; - [x] add IR intensity benchmarks from Cfour so #1382 has something to test against; - [x] delete the ctest versions; - [x] add in `pytest.mark.long` to avoid running some bench routinely. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1414:443,rout,routinely,443,https://psicode.org,https://github.com/psi4/psi4/pull/1414,1,['rout'],['routinely']
Integrability,## Description; new multipole interface to replace `ExternalPotential`. ## Todos; - [x] `qcel.models.Singlepole` into c-side `BasisSet` plus coeff array. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1720:30,interface,interface,30,https://psicode.org,https://github.com/psi4/psi4/pull/1720,1,['interface'],['interface']
Integrability,"## Description; non-final PR while we work out merge order. this is a docs build with no warnings or errors, either overt (`make html -W`), external links (`make linkcheck`), or internal links (`make html -n`). requires a qcel docs update. hopefully this will provide a clean docs base moving forward. this would be non-controversial except that I think there was some technical debt left over from the 2016 inversion in the module structure of the driver. What I think was happening was that the `psi4/driver/driver.py` was the nexus, and any wrappers or utilites that it happened to import became the API. The folder psi4/driver didn't really function as a module. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python thinking it a little irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2162:544,wrap,wrappers,544,https://psicode.org,https://github.com/psi4/psi4/pull/2162,1,['wrap'],['wrappers']
Integrability,## Description; provide immediate warning of upstream or downstream integration failures. ## Todos; - [ ] Feature1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1555:68,integrat,integration,68,https://psicode.org,https://github.com/psi4/psi4/pull/1555,1,['integrat'],['integration']
Integrability,"## Description; ~Mostly a code demo, so I'll cancel the CI. upstream master isn't quite ready yet, but this works locally on linux.~. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Add Einsums as optional build dependency via the usual `-D ENABLE_Einsums=ON` arg.; - [x] Added a dummy module that uses Einsums both as a model and so we have something to check in tests w/o imposing on fnocc. Conda packages are available for Linux & Mac (Intel & Silicon); - [x] Tried some docs tweaks again. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3050:337,depend,dependency,337,https://psicode.org,https://github.com/psi4/psi4/pull/3050,1,['depend'],['dependency']
Integrability,"## Description; ~~Address some convergence issues brought up by @bwb314 in psi4/psi4#773 according to solutions advanced by @dgasmith~~ Tidies and patches some MKL and Cfour interface issues. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] tidies doc for `sad_frac_occ` ~~and turns it on by default~~; - [x] temporarily revert some MKL details that were preventing iomp5 from being found and possibly turning off threading (discovered by @andysim and @bennybp); - [x] allow Cfour interface to format ESTATE_SYM properly, convert DROPMO to array type; - [x] allow Cfour interface to properly write out exponents for very tight fns to GENBASE; * **User-Facing for Release Notes**. ## Questions; - ~~4 test cases failing, how to handle (see psi4/psi4#773)~~. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/777:174,interface,interface,174,https://psicode.org,https://github.com/psi4/psi4/pull/777,3,['interface'],['interface']
Integrability,"## OEProp bug fix. Some OEProp routines contracted Cartesian density matrices with spherical harmonic integrals, which is bad (and caused by me, I believe). Thanks to Coleman Howard in @lothian's group for pointing this out. For Cartesian basis sets, there was never a problem. For spherical harmonics, the multipoles were bad only if the origin was chosen such that it broke symmetry; spherical harmonic fields and ESPs were all wrong. I added a test for the multipoles, because they're available in Psi vars (reference values confirmed by Molpro). I also confirmed the ESP and Fields on a small grid against Molpro values, but they're not available in Psi vars, so are harder to test.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/447:31,rout,routines,31,https://psicode.org,https://github.com/psi4/psi4/pull/447,2,"['contract', 'rout']","['contracted', 'routines']"
Integrability,"## Todos; - [x] bump RESP interface from 0.8 to 1.0 (this will fix CI); - [x] add psixas (https://github.com/Masterluke87/psixas) ""testing"". output is a spectrum file, so hard to test beyond ""runs"". ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2065:26,interface,interface,26,https://psicode.org,https://github.com/psi4/psi4/pull/2065,1,['interface'],['interface']
Integrability,"## Todos; - [x] bump qcel, qcng. ; - [x] fix Mol.dftd3 interface for pydantic 1.0; - [x] try removing deepdiff. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1741:55,interface,interface,55,https://psicode.org,https://github.com/psi4/psi4/pull/1741,1,['interface'],['interface']
Integrability,"## Todos; - [x] internal builds on pybind11 with Intel atop non-system compilers would think compiler broken b/c can't find gcc guts. so we'll pass along the flags. way overkill considering that ""build"" is just a `cp`.; - [x] fix the Azure g2g header trouble; - [x] in the process, update to the new g2g 2.0 (unreleased) interface; - [x] all tests pass; - [x] CPPE testing -- fix ctest and add pytest (latter needed for`psi4-rt`); - [x] qz2p basis from CFOUR. - Q: imminence of g2g 2?. ## Status; - [x] Ready for review; - [x] Ready for merge (except for no packaged g2g)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1718:321,interface,interface,321,https://psicode.org,https://github.com/psi4/psi4/pull/1718,1,['interface'],['interface']
Integrability,"## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The Dimension C++ updating of #574 / #571 needed to be done for the CheMPS2 interface code also. This does it.; - [x] test `cbs-xtpl-func` was unsuccessfully comparing analytic- and findif-computed values (as found by Daniel) after analytic ccsd(t) grads available. This forces findif comparison.; - [x] fixed MRCC interface probably broken since CMR-KtB-INV. Looks like we don't have to close and reopen outfile anymore, so simplified procedure func. tested with normal and `-o stdout` operation under py27 and py35.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/576:191,interface,interface,191,https://psicode.org,https://github.com/psi4/psi4/pull/576,2,['interface'],['interface']
Integrability,"## User API & Changelog headlines; - [x] A segfault in `Matrix::transpose` for matrices that are not totally symmetric now performs the transpose.; - [x] A segfault in `Matrix::transpose_this` for matrices that are not totally symmetric now raises an error message. . ## Dev notes & details; - [x] All the above, plus...; - [x] Tests that the above works!; - [x] Removing variable declarations before initialization.; - [x] Reorganized logic in symmetric case for clarity. . ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2740:257,message,message,257,https://psicode.org,https://github.com/psi4/psi4/pull/2740,1,['message'],['message']
Integrability,"## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Provided a more informative error message when SAD crashes due to an atom having more core electrons than basis functions. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fixed typos in comments; - [x] Fixed buggy print information. ## Questions; - [ ] Is it worth testing for the error message explicitly?. ## Checklist; - [x] Confirmed I get the expected error message upon running the example from #2853. ## Status; - [x] Ready for review; - [x] Ready for merge upon @susilehtola approval",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2859:207,message,message,207,https://psicode.org,https://github.com/psi4/psi4/pull/2859,3,['message'],['message']
Integrability,"### Needs Py36. ## Description; Starting PR. Change the Psi4 driver from being recursive to being based on compute classes that have planning, computing and querying functions. Then, integrate the new driver with the QCArchive project for parallelizing nbody, CBS and findif. ## Deconstruction Progress; 99 changed files, and 5,314 additions and 2,946 deletions. c. dgasmith:recursive; - #2512; - #2515; - #2518; - #2526 ; - #2530 ; - #2532; - #2536 ; - #2544. 59 changed files, and 3,408 additions and 1,885 deletions. c. loriab:recursive62; - #2552 ; - #2557; - [ ] #2516. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Create compute classes for nbody, CBS and findif; - [ ] Integrate QCArchive. ## Release Notes; - `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - python 3.8 requires pint 0.10; - add a logging file, presently `file.log` that currently is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351:183,integrat,integrate,183,https://psicode.org,https://github.com/psi4/psi4/pull/1351,3,"['Integrat', 'depend', 'integrat']","['Integrate', 'dependency', 'integrate']"
Integrability,"#2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; - Add O24 database (#2252, #2154); - Move Molden writer to Python (#2229); - Make restarting SCF and saving orbitals easier (#2190). ## Bug Fixes; - Allow user derivative type to pass properly to some multi-step gradient and hessian procedures (#1551); - Fix `fort.56` printing for MRCC interface (#1606); - Several issues (transformations, AM map) fixed in exported NBO files (#1602); - Fix IRC not displacing initial geometry correctly so hard to follow shallow modes (#1663); - Fix segfault when basis sets have absent AM blocks (#1695); - Add missing MP3 psivars to occ and dfocc (#1707); - Can now have a `df_basis_sad <name> {...}` input block (#1715); - Re-allow DCT guess after breaking 1.3 (#1717); - Fix DFTD3 and MP2D not localizing their files within the Psi4 scratch space (#172",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:10157,interface,interface,10157,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['interface'],['interface']
Integrability,"(#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. # Documentation; - Additional Documentation Information (#787). # Miscelaneous; - Added N to ANO0 basis set (#825). # Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did not effect wB97X-D.; - Restricted-irrep finite-difference Hessians were only returning the totally symmetric portion of the Hessian ([in #834](https://github.com/psi4/psi4/pull/834/commits/67f536c720abf31040eaa933a12e26c207100b69)); - Analytic HF Hessians were wrong under particular circumstances (#903); - A bug causing IRCs to converge to the initial transition state was fixed (#882). # Conda changes since v1.1; - MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than statically",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:6035,wrap,wrapped,6035,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['wrap'],['wrapped']
Integrability,(this is a copy over from #1562 so that I can replace test there.). ## Major Points of Interest. * A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135). ## Obtaining. ## New Methods. ## New Methods (beta). ## New External Libraries. - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. ## First Time Contributors. ## Additional Non-Core Contributors to v1.4. ## Performance Optimizations. ## Psi Developer Upgrade Guide. ## Developer Interests. ## Bug Fixes. ## Known Bugs,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1768:167,depend,depending,167,https://psicode.org,https://github.com/psi4/psi4/issues/1768,1,['depend'],['depending']
Integrability,"* Advertised Version: 1.4; * Continuous Version: 1.4; * Release Date: 08 03 2021; * Documentation: http://psicode.org/psi4manual/1.4.0/; * Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v14/); * Span: [437 PRs](https://github.com/psi4/psi4/milestone/5?closed=1), roughly 1559-2264. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: deepdiff, Libint1; - Added dependencies: QCEngine, Libint2. ## New Methods; - Add ability to call Axilrod-Teller-Muto (ATM) 3-body dispersion correction from Grimme's DFTD3. Note that this is for dftd3 call, not energy call (#1491); - MP2D energies and gradients with help of external program (#1661); - SCAN functionals – SCAN0, revSCAN0, SCAN, revSCAN, BMK, revM06-L (#1597); - hybrid LDA functionals – CAM-LDA0, LDA0 (when Libxc puts them in a release) (#1645); - FISAPT-D (#1670); - Superposition of atomic potentials (SAP) guess (#1665, #1700); - Implementation of partial Cholesky orthogonalization (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349, #1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) . ## New External Libraries; - [QCEngine](https://github.com/MolSSI/QCEngine) - A QCSchema runner is now a required dependency since we use it for several interfaces (#1577); - DFTD3; - MP2D; - gCP; - CPPE - Polarizable embedding with environment modeled by multi-center multipole expansion w",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:503,depend,dependencies,503,https://psicode.org,https://github.com/psi4/psi4/issues/1562,2,['depend'],['dependencies']
Integrability,"**Note:** Migrated from my comment on #798 to expedite merging of that PR. When running OPTKING with the dynamic level turned on, i.e., with the module option:; ```; set optking {; dynamic_level = 1 # Can start dynamic level at any 1 - 7; }; ```; Optimization failure occurs if a bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; However, the error isn't translated to a PsiException, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` PsiException, so that the output does not fly under the radar as being successful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/800:835,message,message,835,https://psicode.org,https://github.com/psi4/psi4/issues/800,1,['message'],['message']
Integrability,"**psi4** uses the LAPACK routine `dtzrqf`. However, at least in the current LAPACK 3.8.0, the routine `dtzrqf` is marked as deprecated, the [suggested alternative](http://www.netlib.org/lapack/explore-html/da/dba/group__double_o_t_h_e_rcomputational_ga2d309addf953bcdd497d58608a7f7935.html) being `dtzrzf`. As a result, the default build of LAPACK 3.8.0 (<del>as well as of OpenBLAS 0.3.3</del> EDITED) does not contain `dtzrqf`anymore and fails to provide the necessary dependency. Perhaps **psi4** could use the alternative routine to avoid this problem?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1290:25,rout,routine,25,https://psicode.org,https://github.com/psi4/psi4/issues/1290,4,"['depend', 'rout']","['dependency', 'routine']"
Integrability,", `Array2d::cdgesv`, `Array2d::lineq_flin`, `Array2d::lineq_pople`, `SymBlockMatrix::davidson`, `SymBlockMatrix::diagonalize`, `SymBlockMatrix::cdsyev`, `SymBlockMatrix::cdgesv`, `SymBlockMatrix::lineq_flin`, `SymBlockMatrix::lineq_pople` (never called and not PSI_API) **(merged #2679)**; - [x] Delete unused functions/overloads from `dfocc`: `Array2d::diagonalize, Array2d::davidson, Array2d::cdsyev, Array2d::cdgesv, Array2d::lineq_flin, Array2d::lineq_pople` and `Tensor2d::davidson, Tensor2d::cdsyev, Tensor2d::cdgesv, Tensor2d::lineq_flin, Tensor2d::lineq_pople` (PR #2684); - [x] Delete unused function overloads from `libmints`: `Matrix::diagonalize` (PR #2693); - [x] Delete commented out code, an unused `extern FILE*` and unused `#include`s from `mcscf::SCF::energy` (PR #2678). ### New DSYEV wrappers, anti-`sq_rsp(...)` crusade; - [x] Implement two new wrapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deal",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:1564,wrap,wrappers,1564,https://psicode.org,https://github.com/psi4/psi4/pull/2642,2,"['interface', 'wrap']","['interface', 'wrappers']"
Integrability,", i, j) (((i) == (am)) ? 0 : (((((am) - (i) + 1) * ((am) - (i))) >> 1) + (am) - (i) - (j))); | ; In file included from build/stage/include/libint2/engine.h:1019,; from psi4/src/psi4/libmints/shellpair.h:8,; from psi4/src/psi4/libmints/eri.h:42,; from psi4/src/export_mints.cc:54:; build/stage/include/libint2/./engine.impl.h:35:11: fatal error: boost/preprocessor.hpp: No such file or directory; 35 | # include <boost/preprocessor.hpp>; | ^~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; [11/1097] Building CXX object src/CMakeFiles/core.dir/read_options.cc.o; ninja: build stopped: subcommand failed.; FAILED: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build ; cd build/psi4-core-prefix/src/psi4-core-build && /usr/bin/cmake --build .; ninja: build stopped: subcommand failed.; ```. https://github.com/psi4/psi4/blob/2e3b0f2039ff0e9a968f964ede868adf790ca54e/psi4/src/CMakeLists.txt#L55-L61. `build/external/upstream/libint2/libint2_external-prefix/src/libint2_external/CMakeLists.txt` has the following part:; ```cmake; if (BUILD_SHARED); add_library (int-shared SHARED $<TARGET_OBJECTS:int-obj>); target_link_libraries (int-shared INTERFACE Eigen3::Eigen); set_target_properties (int-shared PROPERTIES SOVERSION ${LIBINT_MAJOR_SOVERSION}; MACOSX_RPATH ON; OUTPUT_NAME ""int2""; EXPORT_NAME ""cxx""); target_include_directories(int-shared INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>); endif(). if (BUILD_STATIC); add_library (int-static STATIC $<TARGET_OBJECTS:int-obj>); target_link_libraries (int-static INTERFACE Eigen3::Eigen); set_target_properties (int-static PROPERTIES OUTPUT_NAME ""int2""; EXPORT_NAME ""cxx""); target_include_directories(int-static INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>); endif(); ```; which seems to come from https://github.com/loriab/libint/blob/6c3a9ce2ef01b6beb7c2804318699c8ba50065d6/src/lib/libint/CMakeLists.txt.export#L117-L133. Here, the dependency on Eigen is properly set, but that on boost is not, resulting in build failure.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2427:3514,INTERFACE,INTERFACE,3514,https://psicode.org,https://github.com/psi4/psi4/issues/2427,5,"['INTERFACE', 'depend']","['INTERFACE', 'dependency']"
Integrability,"- [ ] Strongly suspect ""def energy"" examples 4 & 5 in share/python/driver.py don't work or don't work as advertized. test. if fail, see if can get working by wfn-passing; - [ ] depending on previous findings, either document (example in previous would do) what used to be ""bypass_scf"" in action or purge it from docs and driver and create new ticket to make it work again.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/353:177,depend,depending,177,https://psicode.org,https://github.com/psi4/psi4/issues/353,1,['depend'],['depending']
Integrability,"- [x] apply decisions from http://forum.psicode.org/t/naming-considerations-for-cepa-0/156/5 to driver, managed methods; - [x] make sure to kill off `CEPA_TYPE`; - [x] adjust tables in occ.rst and fnocc.rst and capabilities table and proc_py.rst; - [x] adjust test cases. make analogous cepa-module to mp2-module for checking up on these things?; - [x] adjust methods dict in cbs wrapper; - [x] notify person I was corresponding with on forum about cepa about calling changes",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/293:380,wrap,wrapper,380,https://psicode.org,https://github.com/psi4/psi4/issues/293,1,['wrap'],['wrapper']
Integrability,"- [x] chemps2; - [x] erd; - [x] dkh; - [x] gdma; - [x] ambit; - [x] pcmsolver; - [ ] Get binary working (need help from @loriab); - [x] Test (and then most likely fix) plugin system; - [x] Move GTFock to external; - [x] Libint is now external, closes #355 ; ## Speed. By means of comparison, on my box the old build system took 34 minutes and this build took 14 minutes. Both build times are for a debug build, ignore the time to build Boost, use the default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:1695,depend,dependencies,1695,https://psicode.org,https://github.com/psi4/psi4/pull/442,2,"['depend', 'interface']","['dependencies', 'interfaces']"
Integrability,"- [x] integrate proper (non-WSL) Windows downloads; - [ ] integrate some options like base env/conda env and how-to-update instructions into guide so can retire reST docs; - [ ] reST docs should become like traditional `INSTALL` documents to be read only by ppl who want to build psi from source with their choice of compilers, etc. and who relish details, not by everyday user or dev.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1840:6,integrat,integrate,6,https://psicode.org,https://github.com/psi4/psi4/issues/1840,2,['integrat'],['integrate']
Integrability,"------ ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constants: A = ************ B = 52225.17395 C = 52225.17395 [MHz]; Nuclear repulsion = 30.788492136145454. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. -AO BASIS SET INFORMATION:; Name = CC-PVTZ; Blend = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; __________________________________________________________________ test_simint ___________________________________________________________________. @using_simint; def test_simint():; """"""simint/scf5""""""; ; psi4.set_options({'integral_package': 'simint'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:625: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrou",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:10813,Contract,Contraction,10813,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Contract'],['Contraction']
Integrability,"------ ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constants: A = ************ B = 52225.17395 C = 52225.17395 [MHz]; Nuclear repulsion = 30.788492136145454. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. -AO BASIS SET INFORMATION:; Name = CC-PVTZ; Blend = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; ___________________________________________________________________ test_json ____________________________________________________________________. def test_json():; """"""json/energy""""""; ; import numpy as np; ; # Generate JSON data; json_data = {}; json_data[""molecule""] = """"""He 0 0 0\n--\nHe 0 0 1""""""; json_data[""driver""] = ""gradient""; json_data[""args""] = 'SCF'; json_data[""kwargs""] = {}; json_data[""options""] = {""BASIS"": ""STO-3G""}; json_data[""return_output""] = True; ; psi4.json_wrapper.run_json(json_data); ; assert psi4.compare_strings(""STO-3G"", json_data[""options""][""BASIS""], ""Options test""); > assert psi4.compare_integers(True, json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:16325,Contract,Contraction,16325,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Contract'],['Contraction']
Integrability,". As it so happens, I was running `mrccsdt` not too long ago on the CCQC cluster. What I see looks like ; ```; Generating fort.55 integral file...done.; Generating fort.56 input file...done. *** tstop() called on n081 at Sun Mar 8 14:10:25 2020; Module time: ; user time = 1.90 seconds = 0.03 minutes; system time = 0.87 seconds = 0.01 minutes; total time = 2 seconds = 0.03 minutes; Total time: ; user time = 164.68 seconds = 2.74 minutes; system time = 15.26 seconds = 0.25 minutes; total time = 2719 seconds = 45.32 minutes. ===== Begin fort.56 input for MRCC ======; 3 1 0 0 1 0 0 1 0 1 1 1 0 0 0 6 0 0 0.00 0 60000 ; ex.lev,nsing,ntrip, rest,CC/CI, dens,conver, symm, diag, CS,spatial, HF,ndoub, nacto, nactv, tol,maxex, sacc, freq,dboc, mem; 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ; ===== End fort.56 input for MRCC ======; **********************************************************************; MRCC program system; **********************************************************************; ; Written by; Mihaly Kallay, Zoltan Rolik, Jozsef Csontos, Istvan Ladjanszki,; Lorant Szegedy, Bence Ladoczki, Gyula Samu, Klara Petrov,; Mate Farkas, Peter Nagy, David Mester, and Bence Hegely; ; Department of Physical Chemistry and Materials Science; Budapest University of Technology and Economics; Budapest P.O.Box 91, H-1521 Hungary; ; www.mrcc.hu. ************************ 2020-03-08 14:10:25 *************************; Executing goldstone...; ```. The calculation goes on, but the important point is that MRCC is supposed to execute `goldstone` immediately and not even try to read input from the MINP file. My interpretation of the situation is that something in the new MRCC has broken Psi's direct interface, which avoided MINP input entirely. I'm not planning to get further involved in this issue, but I'm fairly sure we mentioned the MRCC interface in the paper, so this is bad. Curse you, upstream!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1866:3875,interface,interface,3875,https://psicode.org,https://github.com/psi4/psi4/issues/1866,2,['interface'],['interface']
Integrability,". These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be removed when the history rewrite occurs on October 17th. This means any current work on Psi4 will no longer be able to be merged. If you need additional time let us know ASAP!; - The build system has not been extensively tested, please try it out and report bugs.; - There is a completely new directory structure.; - No more Boost in core Psi4.; - Some external libraries may not work at current.; - Plugin structure is still fluid.; - GCC 4.9 is required due to C++11 regex. Keep in mind that ICC requires GCC. Cha",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:3655,rout,route,3655,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['rout'],['route']
Integrability,"..........................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot..................................................................................PASSED; fEelst................................................................................FAILED; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 101, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); File ""/psi/gits/QCElemental/qcelemental/testing.py"", line 178, in compare_values; return return_handler(allclose, label, message, return_message, quiet); File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/p4util/testing.py"", line 189, in _psi4_true_raise_handler; raise TestComparisonError(message). psi4.driver.p4util.exceptions.TestComparisonError: 	fEelst: computed value (-58.7150) does not match (-30.8670) to atol=0.01 by difference (-27.8480). ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) diff -bwy -W 200 tests/fsapt-ext-abc/fsapt/fsapt.dat tests/fsapt-ext-abc-au/fsapt/fsapt.dat ; ==> F-ISAPT: Links by Charge <==									 ==> F-ISAPT: Links by Charge <==. => Full Analysis <=											 => Full Analysis <=. Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total 			Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total ; w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 			w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 ; w1 Extern-B -6.448 0.000 -0.893 0.000 0.000 0.000 -7.342 		 |	w1 Extern-B 59.651 0.000 -0.893 0.000 0.000 0.000 58.757 ; Extern-A w3 -9.800 0.000 0.000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2330:6870,message,message,6870,https://psicode.org,https://github.com/psi4/psi4/issues/2330,1,['message'],['message']
Integrability,".........PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot..................................................................................PASSED; fEelst................................................................................FAILED; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 101, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); File ""/psi/gits/QCElemental/qcelemental/testing.py"", line 178, in compare_values; return return_handler(allclose, label, message, return_message, quiet); File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/p4util/testing.py"", line 189, in _psi4_true_raise_handler; raise TestComparisonError(message). psi4.driver.p4util.exceptions.TestComparisonError: 	fEelst: computed value (-58.7150) does not match (-30.8670) to atol=0.01 by difference (-27.8480). ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) diff -bwy -W 200 tests/fsapt-ext-abc/fsapt/fsapt.dat tests/fsapt-ext-abc-au/fsapt/fsapt.dat ; ==> F-ISAPT: Links by Charge <==									 ==> F-ISAPT: Links by Charge <==. => Full Analysis <=											 => Full Analysis <=. Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total 			Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total ; w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 			w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 ; w1 Extern-B -6.448 0.000 -0.893 0.000 0.000 0.000 -7.342 		 |	w1 Extern-B 59.651 0.000 -0.893 0.000 0.000 0.000 58.757 ; Extern-A w3 -9.800 0.000 0.000 -1.200 0.000 0.000 -11.000 		 |	Extern-A w3 -103.747 0.000 0.000 -1.200 0.000 0.000 -104.947 ; Extern-A Extern-B -5.874 0.000 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2330:7043,message,message,7043,https://psicode.org,https://github.com/psi4/psi4/issues/2330,1,['message'],['message']
Integrability,".26 (`fsapt.py` is a free agent). Another consistent set is QCEngine <0.26.0 and Psi4 and `fsapt.py` <v1.7. Mixing old Psi4 or fsapt.py with new QCEngine and classic dftd3 can yield wrong fisapt analysis, and this isn't trapped.; - [x] `psi4.core.Molecule.run_dftd3` and `qcdb.Molecule.run_dftd3` don't work with `s-dftd3`. Please file an issue if you really want this capability. `run_gcp` will use classic `gcp` or `mctc-gcp` interchangeably, whichever you have available. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] first look at `_engine_can_do` and observe that compared to good ol' dftd3, s-dftd3 (aka simple-dftd3) _can't_ do d2 and by default does d3 variants with ATM dispersion built in (s9=1.0); - [x] in contrast, mctc-gcp is a drop-in replacement for good ol' gcp (probably b/c I stuck with cmdline and didn't write an elaborate interface on top of it :-); - [x] this goes with https://github.com/MolSSI/QCEngine/pull/385; - [x] I didn't think we could just drop the most popular psi4 addon and demand replacement, so all of dftd3/s-dftd3/gcp/mctc-gcp work with psi4. s-dftd3 and mctc-gcp are preferred if present; - [x] need docs; - [x] status (special qcng = v0.26.0 unreleased at time of writing); - [x] PR psi4 with special qcng and dftd3 and gcp and psi4-channel dftd4 all work; - [x] PR psi4 with special qcng and s-dftd3 and mctc-gcp and c-f-channel dftd4 all work ~except for test_dftd3_mp2d~; - [x] old psi4 with special qcng ~doesn't work at all -- WIP~ now works; - old psi4 running fisapt-d then fsapt.py with special qcng gives wrong answer for emp disp; - run_dftd3 is used a lot in the tests as a qcengine wrapper around psi4 molecules. because dftd3 and s-dftd3 handle defaulting so differently, I can't easily make the fn call either/or. I'm tempted to (a) drop the capabilit",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2791:3555,interface,interface,3555,https://psicode.org,https://github.com/psi4/psi4/pull/2791,1,['interface'],['interface']
Integrability,".95802 -2.84738 2.22072; H -0.62594 -1.95593 2.43463; H -0.25639 -4.56534 1.39064; C -3.89573 -1.47663 1.11455; H -2.84685 -1.21526 1.24711; O -3.96785 -2.64213 0.26554; C -3.25927 -2.48505 -0.9528; H -3.38296 -3.42013 -1.49634; C -3.83016 -1.30519 -1.76284; H -4.84213 -1.57034 -2.07564; O -3.08657 -1.08539 -2.95725; H -2.16485 -0.88813 -2.71436; C -3.89865 -0.04023 -0.90552; H -2.87924 0.29308 -0.69629; O -4.61098 1.01217 -1.56224; H -4.00729 1.44319 -2.17836; C -4.59468 -0.30612 0.4222; H -5.64733 -0.55648 0.23973; O -4.51034 0.8485 1.2693; H -4.69798 1.62621 0.72518; C -4.47115 -1.85465 2.46592; H -5.33699 -2.50924 2.30958; O -3.50744 -2.49324 3.3135; H -2.76983 -2.83605 2.77919; H -4.81526 -0.95879 2.98516; O 2.01537 -1.70774 -1.89652; H 1.17126 -1.21952 -1.9851; units angstrom. }; set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'); energy('sapt0-ct'); ```. User reported error message:; ```; Traceback (most recent call last):; File “/home/think/psi4conda/bin/psi4”, line 248, in; exec(content); File “”, line 147, in; File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py”, line 460, in energy; wfn = procedures[‘energy’][lowername](lowername, molecule=molecule, **kwargs); File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py”, line 3278, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits, std::allocator >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::sapt::SAPT::zero_disk(int, char const*, int, int); psi::sapt::SAPT0::df_integrals(); ```. @loriab reported being able to reproduce ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1328:3630,message,message,3630,https://psicode.org,https://github.com/psi4/psi4/issues/1328,1,['message'],['message']
Integrability,"/"", return_wfn=True); print(""converting energy ...""); kcal_energy = energy * psi4.constants.hartree2kcalmol; print(""energy {:.2f} kcal/mol"".format(kcal_energy)); ```; Specifically the output I get is ; ```; set output file path; create molecule...; calculate energy...; Segmentation fault: 11; ```; I tried to attach the .dat file, but github wouldn't let me, but this is end of it:; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: MINIX; Blend: MINIX; Number of shells: 42; Number of basis functions: 64; Number of Cartesian functions: 64; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (MINIX AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 8 entry O line 318 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 2-5, 7, 9, 14-15 entry C line 198 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 6 entry N line 258 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 10-13, 16-20 entry H line 18 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; ```. If I use a conda environment I built a few weeks ago the script runs fine. This is the same as we are seeing on our cloud platform on AWS. Docker images built 2 weeks ago (on May 23) are running fine. But the ones we make this week (on May 31) are failing with seg faults. . Now, I realize you all have moved on to 1.6, but we are too late in our development cycle to upgrade a dependency and our last package was built around psi4 1.3 so that is the only other version we've validated. So unfortunately if I can't track this down ASAP we will have to downgrade (even though we've seen performance improvement with the new version)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593:4290,depend,dependency,4290,https://psicode.org,https://github.com/psi4/psi4/issues/2593,1,['depend'],['dependency']
Integrability,"/www.pnas.org/doi/10.1073/pnas.2205221119#sec-3; in equation 13 & 14 of the `Materials and Methods` section of this PNAS paper, they have written formulae for their version of the 3-index integrals.; ![image](https://user-images.githubusercontent.com/25001874/223633100-63624cd1-d992-4dbe-84c5-73cdeece4536.png). The exact no. of rows is arbitrary, in the sense it depends on the modeller. In the case of the OrbNet-Equi paper, I checked their uploaded feature file, and it has 60 rows. i.e. the shape for **each atom** comes up to: `(60, num_basis_fn, num_basis_fn)`. ; this agrees with their explanation just below eqn 14, where their choice of `n` (and hence `gamma`) leads to a total of `16 x 1 + 8 x 3 + 4 x 5 = 60` unique functions for their ""auxiliary Gaussian-type basis functions"" in eqn 14. an important detail, is that I just want the matrix for a **single atom for each element**, which is why `num_basis_fn` is just counting all the basis functionsfor 1 atom. and they shouldn't depend on the context of the atom (i.e. what molecule it is part of). . to be extra clear, i've uploaded their published 3-index overlap integral pytorch tensor here: https://drive.google.com/file/d/1aF2QvfL4GTu17W35Rzv7yLo2gI_05Wx5/view?usp=share_link ; it is a dictionary indexed by the element symbols. their basis set is the semi-empirical tight-binding`GFN1-xTB`. for example, hydrogen has 2 basis functions in `GFN1-xTB`, so the shape of their 3-index integral matrix is `(60, 2, 2)`.; ```python; import torch; three_idx_integrals = torch.load(""orbnet2_overlap3idx.pt""); print(three_idx_integrals[""H""].shape); >> torch.Size([60, 2, 2]); ```. I think the best way to go about this would be to just re-implement the formulae for calculating these 3-index integrals, in python (since i'm most familiar with python), but to allow setting the `gamma` parameter so that I can create as many rows as I want for the 1st dimension. This should be easier than trying to change some inner part of `psi4` just to ha",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2892:2030,depend,depend,2030,https://psicode.org,https://github.com/psi4/psi4/issues/2892,1,['depend'],['depend']
Integrability,"0, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<optimized out>); at /home/work/psi4/psi4.susi/psi4/src/psi4/libqt/blas_intfc23.cc:327; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; #12 0x00007faaaeddcf40 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:245; #13 0x00007faaaedc01e5 in psi::scfgrad::SCFDeriv::compute_gradient (this=this@entry=0x7ffdc830ba00) at /usr/include/c++/10/bits/shared_ptr_base.h:1324; #14 0x00007faaaed967ba in psi::scfgrad::scfgrad (ref_wfn=..., options=...) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/wrapper.cc:46; #15 0x00007faaae1ebe2a in py_psi_scfgrad (ref_wfn=std::shared_ptr<class psi::Wavefunction> (use count 5, weak count 1) = {...}) at /usr/include/c++/10/ext/atomicity.h:100; #16 0x00007faaae20f796 in pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call_impl<std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), 0ul, pybind11::detail::void_type>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::integer_sequence<unsigned long, 0ul>, pybind11::detail::void_type&&) && (f=<optimized out>, f=<optimized out>, this=0x7ffdc830c010) at /usr/include/c++/10/ext/atomicity.h:100; #17 pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call<std::shared_ptr<psi::Matrix>, pybind11::detail::void_type, std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>)>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>)) && (f=<optimized out>, this",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:3348,wrap,wrapper,3348,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['wrap'],['wrapper']
Integrability,"0.0000000; 24 0.0000000 0.0000000 -0.2145081 -0.0955885 -0.3962490 -0.1582019 -0.1748445 0.0000000 -0.2501782 0.0000000; 25 0.0000000 0.0000000 -0.3899088 -0.0161290 -0.0829898 -0.0000000 -0.0000000 0.0000000 0.0000000 0.0502025. 21 22 23 24 25. 1 0.0534972 0.0695717 0.0000000 -0.0869670 -0.0673371; 2 0.2748140 0.3248252 0.0000000 -0.3181362 -0.2463274; 3 0.4954265 0.6469897 0.0000000 -0.3093155 -0.2394976; 4 0.0000000 0.0000000 0.1943450 0.0000000 0.0000000; 5 0.2220879 0.0839998 0.0000000 -0.1646270 -0.2779458; 6 0.1719588 0.0650396 0.0000000 -0.2779458 -0.0208636; 7 0.0000000 0.0000000 0.3902542 0.0000000 0.0000000; 8 0.4918677 0.3101080 0.0000000 0.0695736 -0.2482975; 9 0.3808447 0.2401112 0.0000000 -0.2482975 0.1980018; 10 0.2068227 0.3228525 0.0000000 -0.2355869 -0.1824109; 11 0.0000000 0.0000000 0.1445331 0.0000000 0.0000000; 12 0.0000000 0.0000000 0.1119094 0.0000000 0.0000000; 13 0.3506915 0.3379822 0.0000000 -0.2145081 -0.3899088; 14 0.1113951 0.0117147 0.0000000 -0.0955885 -0.0161290; 15 0.2930740 0.3319229 0.0000000 -0.3962490 -0.0829898; 16 0.1198368 0.3062336 0.0000000 -0.1582019 -0.0000000; 17 0.3062336 0.6052920 0.0000000 -0.1748445 -0.0000000; 18 0.0000000 0.0000000 0.0502025 0.0000000 0.0000000; 19 0.1582019 0.1748445 0.0000000 -0.2501782 0.0000000; 20 -0.0000000 -0.0000000 0.0000000 0.0000000 0.0502025; 21 1.0000000 0.6848603 0.0000000 -0.0000000 -0.0000000; 22 0.6848603 1.0000000 0.0000000 -0.0000000 -0.0000000; 23 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000; 24 -0.0000000 -0.0000000 0.0000000 1.0000000 0.0000000; 25 -0.0000000 -0.0000000 0.0000000 0.0000000 1.0000000. For example, for the AO function 11 the self-overlap is computed as 0.3333333, but it should be 1. At first glance, I was thinking that there might be a problem in the normalization of contraction coefficients. But the strange thing is that when I repeat the same example with my dfocc module I get the correct normalization. Any help to understand the problem? @jturney @loriab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/874:7398,contract,contraction,7398,https://psicode.org,https://github.com/psi4/psi4/issues/874,1,['contract'],['contraction']
Integrability,"000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 00000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:1788,Rout,Routine,1788,https://psicode.org,https://github.com/psi4/psi4/issues/3159,6,['Rout'],['Routine']
Integrability,"000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; invalid value encountered in scalar divide; invalid value encountered in divide; Optimizer: Optimization complete!; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:3058,Rout,Routine,3058,https://psicode.org,https://github.com/psi4/psi4/issues/3159,1,['Rout'],['Routine']
Integrability,"0007F6CF6C18FC9 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C1713D Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C18FC9 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C19158 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C1919B Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C40C5A Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C0C27D Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6B8FD99 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C184A6 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C18FC9 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C19158 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C1919B Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C3E410 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C3FA03 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C5ACE7 Unknown Unknown Unknown; python 0000000000400BBD Unknown Unknown Unknown; libc.so.6 00000034CEC1ED5D Unknown Unknown Unknown; python 0000000000400999 Unknown Unknown Unknown; ```; This is the error message. The node memory is 256 GB. I have run another system with a similar number of atoms at the same level of theory and it finished normally on this node. I have run this system at sSAPT0 level, which has also finished normally. Here is a copy of the input file; ```; memory 256 GB. molecule dimer {; 0 1; C	33.53728	36.41505	90.62589; C	33.90406	36.81886	89.19581; O	35.09473	36.87670	88.87973; H	32.47104	36.21876	90.76503; H	34.11454	35.52935	90.89115; H	33.84377	37.22581	91.29056; N	32.90475	37.13782	88.34874; C	33.15782	37.60052	86.97934; C	33.86886	38.96454	87.03422; O	34.80991	39.18532	86.28033; C	31.84528	37.71848	86.17268; C	32.03912	38.31152	84.79977; C	32.40330	37.64936	83.66144; C	31.91466	39.69401	84.43479; N	32.47754	38.52922	82.60241; C	32.22560	39.79734	83.05872; C	31.60991	40.86835	85.14938; C	32.23753	41.02592	82.38040; C	31.61276	42.08300	84.47411; C	31.93451	42.15430	83.10915; H	31.95003	36.90694	88.59560; H	33.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1828:3324,message,message,3324,https://psicode.org,https://github.com/psi4/psi4/issues/1828,1,['message'],['message']
Integrability,"0094d/tests/runtest.py"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/sapt4/input.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/testresults.log"" ""false"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d"" ""false"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/sapt4/output.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/bin/psi4""; Directory: /dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/sapt4; ""sapt4"" start time: Feb 15 13:13 CET; Output:; ----------------------------------------------------------; Traceback (most recent call last):; File ""<string>"", line 65, in <module>; File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/lib/python/p4util/util.py"", line 98, in compare_values; raise TestComparisonError(message); p4xcpt.TestComparisonError: SAPT Elst: computed value (-0.0407606) does not match (-0.0407577) to 6 decimal places.; SAPT Elst: computed value (-0.0407606) does not match (-0.0407577) to 6 decimal places.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 132.94 sec; ----------------------------------------------------------; Test Failed.; ""sapt4"" end time: Feb 15 13:15 CET; ""sapt4"" time elapsed: 00:02:12; ----------------------------------------------------------. ```. For `pywrap-opt-sowreap`:. ```; 255/305 Testing: pywrap-opt-sowreap; 255/305 Test: pywrap-opt-sowreap; Command: ""/apps/gent/CO7/haswell-ib/software/Python/2.7.11-intel-2016a/bin/python"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/runtest.py"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253:2074,message,message,2074,https://psicode.org,https://github.com/psi4/psi4/issues/253,1,['message'],['message']
Integrability,"00; H 5.255832800000 -1.677434300000 1.995985100000; H 5.435230800000 -0.488422700000 0.699837500000; H 4.834740800000 -2.114113900000 0.338643400000; C 2.561315100000 -2.067960800000 1.878190500000; H 2.501285900000 -2.864212200000 1.130337600000; H 1.543963400000 -1.790105100000 2.156196500000; H 3.062895500000 -2.476510500000 2.763911500000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-PR07-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-PR07-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()). # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-H2-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; H 0.798743700000 0.046507300000 0.075739400000; H 1.071087200000 0.408924800000 0.665066700000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-H2-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-H2-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1338:5692,wrap,wrapper,5692,https://psicode.org,https://github.com/psi4/psi4/issues/1338,1,['wrap'],['wrapper']
Integrability,"02) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.6.0 (#2028) ; - Fix memory bug in libtrans (#2027) ; - Fix to large DF-MP2 (#2033) ; - Make sure psi populates qcschema wfn with orbital occupations (#2036) ; - Options reading ignores spaces (#2051) ; - Fix to Treutler grid call (#2044) ; - Fix diffuse external potential after L2 (#2068) ; - Fixes to PCM/qcschema (#2037) ; - Bug in ccresponse (#2077) ; - Fix error throwing in some threaded blocks (#2082) ; - Better error printing (#2083) ; - Fix in EOM CC3 (#2085) ; - Deprecate Matrix::Savetype::Full (#2092) ; - Fix getting of CC amplitudes in frozen core jobs (#2095) ; - QCSchema export bug fix (#2112) ; - Fix TD-SCF computations when using DF and symmetry (#2124) ; - Fix DF-DCT energy, grad, properties, and densities (#2100) ; - Fix bug by closing DPD file in DF grad (#2137) ; - Fix method/basis bug when using DiskDF (#2141) ; - Fix bug by triggering error in CC code (#2150) ; - Fix indexing bug in DCT (#2165) ; - Fix gcc-related bug (#2175) ; - Fix stability of mcscf test (#2173) ; - Citation type fix in dft builder (#2176) ; - Keep internal coordinate files in optking (#2188) ; - Bugfix in parallelization of DF gradients (#2193) ; - Fix bug in qcvars for nbody computations (#2191) ; - Use correct libxc functional for wB97X-D3 (#2207) ; - Fix shell core freezing with ECPs (#2222) ; - Fix linear dependency bugs in DCT (#2232, #2233) ; - Return correct energy for ccsd(at) (#2241) ; - Bug in detci printing (#2245); - Fix bug whereby MP2 cube files through OCC segfaulted (#2249); - Increase likelihood a misformatted basis set file will error instead of passing silently (#2254); - Fix normalization issue in Molden files (#2229); - Fix longstanding limitation where `phi_ao` function only returned correctly for Cartesian basis sets (#2210, #2262) . ## Known Bugs; - Find them and tell us",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:14616,depend,dependency,14616,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['depend'],['dependency']
Integrability,"19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; - Add O24 database (#2252, #2154); - Move Molden writer to Python (#2229); - Make restarting SCF and saving orbitals easier (#2190). ## Bug Fixes; - Allow user derivative type to pass properly to some multi-step gradient and hessian procedures (#1551); - Fix `fort.56` printing for MRCC interface (#1606); - Several issues (transformations, AM map) fixed in exported NBO files (#1602); - Fix IRC not displacing initial geometry correctly so hard to follow shallow modes (#1663); - Fix segfault when basis sets have absent AM blocks (#1695); - Add missing MP3 psivars to occ and dfocc (#1707); - Can now have a `df_basis_sad <name> {...}` input block (#1715); - Re-allow DCT guess after breaking 1.3 (#1717); - Fix DFTD3 and MP2D not localizing their files within the Psi4 scratch space (#1725); - Fix bug where you could request out-of-bounds atom in Molecule (#1714); - Now looks for auxiliary basis sets in submission directory, not just orbital basis sets (#1714); - Added some unit weights to def2-*zvp* basis sets to appease the basis set parser (#1743); - In `-o stdout` mode, `core.be_quiet()` followed by `core.reopen_outfile()` no longer petulantly deprives you of output (#1735); - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:10618,interface,interface,10618,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['interface'],['interface']
Integrability,"2 for a singlet with CUKS? While one *can* run CUKS on a singlet, this seems like a really odd thing to do... What seems to be happening is that the guess orbitals are core Hamiltonian, and they are high-spin open-shell. This being the case, the CUHF runs and happily leaves the computation high-spin open-shell. Then obviously the triplet state obtained has a different energy than the singlet state energy that is being compared. I am not sure why we are getting a high-spin open-shell guess, since the computation knows it's a singlet. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE. ... Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ]. @CUHF iter 1: -129.99407460698782 -1.29994e+02 3.58550e-01; @CUHF iter 2: -138.94369344094056 -8.94962e+00 1.91667e-01 DIIS; @CUHF iter 3: -149.19229734982372 -1.02486e+01 5.23276e-02 DIIS; @CUHF iter 4: -149.61401801756168 -4.21721e-01 8.25602e-03 DIIS; @CUHF iter 5: -149.62784456434520 -1.38265e-02 7.20728e-04 DIIS; @CUHF iter 6: -149.62803800931584 -1.93445e-04 1.87787e-04 DIIS; @CUHF iter 7: -149.62804359068420 -5.58137e-06 2.42248e-05 DIIS; @CUHF iter 8: -149.62804290255499 6.88129e-07 3.86408e-06 DIIS; @CUHF iter 9: -149.62804316316681 -2.60612e-07 2.79748e-07 DIIS. ==> Post-Iterations <==. @Spin Contamination Metric: 1.00000; @S^2 Expected: 0.00000; @S^2 Observed: 1.00000. In the reference [correct] output, the Occupation by irrep is closed shell. Perhaps there is a bug in the Core Hamiltonian guess routine not respecting the multiplicity, and/or experiencing some small numerical instability. This problem seems intermittent for me, I thought I ran essentially the same code yesterday without this case failing. Attempting to attach test output. David. [output.txt](https://github.com/psi4/psi4/files/1066053/output.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/738:2247,rout,routine,2247,https://psicode.org,https://github.com/psi4/psi4/issues/738,1,['rout'],['routine']
Integrability,"2) ~`libint2-2.6.0-h879752b_4.tar.bz2`~, [win-64/libint2-2.6.0-h2e52968_5.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_5.tar.bz2) ~`libint2-2.6.0-h2e52968_3.tar.bz2`~; [^6]: Step A conda packages: [linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2), [osx-64/libint2-2.7.1-h879752b_8.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/osx-64/libint2-2.7.1-h879752b_8.tar.bz2); [^7]: Step B conda packages: [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2), [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2), [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); [^8]: Packages can be found off `psi4/label/dev` or `psi4/label/testing` subchannels, depending on stage of master. The build number (e.g., `_13`) remains steady even if the subchannel changes. If you're in an environment that already has a L2, `conda remove libint2 --force`, then `conda install libint2=*=<h2fe1556_13> -c psi4/label/<dev|testing>` (substitute `<placeholders>`); <!--[^9]: Packages can be found off `psi4/label/testing` subchannel: [linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2), [osx-64/libint2-2.7.2-h1800126_0.conda](https://anaconda.org/psi4/libint2/2.7.2/download/osx-64/libint2-2.7.2-h1800126_0.conda)-->; [^9]: Step A' conda packages: AM7 from `psi4/label/testing::libint2`: [linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2) or AM5 from `conda-forge/label/libint_dev::libint`: [linux-64/libint-2.7.3dev1-h95a0634_0.conda](https://anaconda.org/conda-forge/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2442:4051,depend,depending,4051,https://psicode.org,https://github.com/psi4/psi4/issues/2442,1,['depend'],['depending']
Integrability,"2.48505 -0.9528; H -3.38296 -3.42013 -1.49634; C -3.83016 -1.30519 -1.76284; H -4.84213 -1.57034 -2.07564; O -3.08657 -1.08539 -2.95725; H -2.16485 -0.88813 -2.71436; C -3.89865 -0.04023 -0.90552; H -2.87924 0.29308 -0.69629; O -4.61098 1.01217 -1.56224; H -4.00729 1.44319 -2.17836; C -4.59468 -0.30612 0.4222; H -5.64733 -0.55648 0.23973; O -4.51034 0.8485 1.2693; H -4.69798 1.62621 0.72518; C -4.47115 -1.85465 2.46592; H -5.33699 -2.50924 2.30958; O -3.50744 -2.49324 3.3135; H -2.76983 -2.83605 2.77919; H -4.81526 -0.95879 2.98516; O 2.01537 -1.70774 -1.89652; H 1.17126 -1.21952 -1.9851; units angstrom. }; set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'); energy('sapt0-ct'); ```. User reported error message:; ```; Traceback (most recent call last):; File “/home/think/psi4conda/bin/psi4”, line 248, in; exec(content); File “”, line 147, in; File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py”, line 460, in energy; wfn = procedures[‘energy’][lowername](lowername, molecule=molecule, **kwargs); File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py”, line 3278, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits, std::allocator >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::sapt::SAPT::zero_disk(int, char const*, int, int); psi::sapt::SAPT0::df_integrals(); ```. @loriab reported being able to reproduce this, but was interrupted working on the bug and never got around to it. This may just be a case of the disk filling up, in which case, all we can do is write a better error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1328:4885,message,message,4885,https://psicode.org,https://github.com/psi4/psi4/issues/1328,1,['message'],['message']
Integrability,"282482; }; mol.update_geometry(); mol.symmetrize(0.001). set reference rks; set scf_type df; set basis def2-SV(P); set DYNAMIC_LEVEL 1. E = optimize('pbe'). ```. final output:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------; At level 1: Red. Int., RFO, no backsteps, dynamic trust; 	At level 1: Red. Int., RFO, no backsteps, dynamic trust. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3; 	 2 : 1 3 5; 	 3 : 1 2; 	 4 : 5 6 9; 	 5 : 2 4 8; 	 6 : 4 10 11; 	 7 : 8 10 14; 	 8 : 5 7 15; 	 9 : 4 12 16; 	 10 : 6 7 17; 	 11 : 6 13 18; 	 12 : 9 13 19; 	 13 : 11 12 20; 	 14 : 7; 	 15 : 8; 	 16 : 9; 	 17 : 10; 	 18 : 11; 	 19 : 12; 	 20 : 13. BEND::BEND() Atoms defining bend are not unique.; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source ; libgdma.so 00007F7B32CCF0DC for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F7B36A4A890 Unknown Unknown Unknown; core.cpython-37m- 00007F7B34813B00 Unknown Unknown Unknown; core.cpython-37m- 00007F7B34811B65 Unknown Unknown Unknown; core.cpython-37m- 00007F7B33D0BACD Unknown Unknown Unknown; core.cpython-37m- 00007F7B33D2109A Unknown Unknown Unknown; core.cpython-37m- 00007F7B3383BB3F Unknown Unknown Unknown; python3.7 000055AADA9716E4 _PyMethodDef_RawF Unknown Unknown; python3.7 000055AADA971801 _PyCFunction_Fast Unknown Unknown; python3.7 000055AADA9CD2BC _PyEval_EvalFrame Unknown Unknown; python3.7 000055AADA90E4F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055AADA970A27 _PyFunction_FastC Unknown Unknown; python3.7 000055AADA9C8846 _PyEval_EvalFrame Unknown Unknown; python3.7 000055AADA90E4F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055AADA90F3C4 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055AADA90F3EC PyEval_EvalC",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1703:2103,Rout,Routine,2103,https://psicode.org,https://github.com/psi4/psi4/issues/1703,1,['Rout'],['Routine']
Integrability,"4.geometry(; '''; H 0.0021 -0.0041 0.0020 ; H 0.8669 1.3681 0.0011; O -0.0110 0.9628 0.0073; symmetry C1; '''; ); basis = psi4.core.BasisSet.build(my_geometry, target='6-31g*'); mints = psi4.core.MintsHelper(basis); print(mints.ao_3coverlap().to_array().shape); >> (19, 19, 19); ```; and I found that it has the shape `(num_basis_fn, num_basis_fn, num_basis_fn)` where `num_basis_fn` is the total no. of basis functions for all atom in this molecule the current basis set. . However, for the ML model features, I need to ""expand"" this matrix to have more rows in the 1st dimension. ; specifically, I am following the OrbNet-Equi paper: https://www.pnas.org/doi/10.1073/pnas.2205221119#sec-3; in equation 13 & 14 of the `Materials and Methods` section of this PNAS paper, they have written formulae for their version of the 3-index integrals.; ![image](https://user-images.githubusercontent.com/25001874/223633100-63624cd1-d992-4dbe-84c5-73cdeece4536.png). The exact no. of rows is arbitrary, in the sense it depends on the modeller. In the case of the OrbNet-Equi paper, I checked their uploaded feature file, and it has 60 rows. i.e. the shape for **each atom** comes up to: `(60, num_basis_fn, num_basis_fn)`. ; this agrees with their explanation just below eqn 14, where their choice of `n` (and hence `gamma`) leads to a total of `16 x 1 + 8 x 3 + 4 x 5 = 60` unique functions for their ""auxiliary Gaussian-type basis functions"" in eqn 14. an important detail, is that I just want the matrix for a **single atom for each element**, which is why `num_basis_fn` is just counting all the basis functionsfor 1 atom. and they shouldn't depend on the context of the atom (i.e. what molecule it is part of). . to be extra clear, i've uploaded their published 3-index overlap integral pytorch tensor here: https://drive.google.com/file/d/1aF2QvfL4GTu17W35Rzv7yLo2gI_05Wx5/view?usp=share_link ; it is a dictionary indexed by the element symbols. their basis set is the semi-empirical tight-binding`GFN1-xTB",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2892:1403,depend,depends,1403,https://psicode.org,https://github.com/psi4/psi4/issues/2892,1,['depend'],['depends']
Integrability,"4/libint/2.8.0dev2/download/osx-64/libint-2.8.0dev2-h93d8f39_0.conda), [win-64/libint-2.8.0dev2-h63175ca_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/win-64/libint-2.8.0dev2-h63175ca_0.conda). Links on Libint2 issues here since it's worth having an issue open on this for packagers to consult. * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; * step 2 — 20 Nov 2020 — #1721; * step 3 — 11 Mar 2022 — #2388; * post 3 — 16 Mar 2022 — #2474, #2482, #2484; * step C — 21 March 2022 — #2489; * step C — 21 March 2022 — #2483; * step B — 23 March 2022 — #2413; * post B — 23 March 2022 — #2494 ; * step C — 25 March 2022 — #2386; * step C — 25 March 2022 — #2496; * step C — 30 March 2022 — #2504; * step C — 31 March 2022 — #2517; * step C — 31 March 2022 — #2414; * step C — #2503; * step C — #2502; * step A — 8 May 2023 — #2537; * step A' — 8 May 2023 — #2861; * step C — #2473 (depends on https://github.com/evaleev/libint/pull/242); * step B — WIP sidestepping; * step B — WIP — https://github.com/evaleev/libint/pull/259; * step B — WIP — https://github.com/evaleev/libint/pull/233; * step B — WIP — https://github.com/evaleev/libint/pull/205; * step B' — WIP runtime changes from step B, no buildtime changes; * step B' — WIP — https://github.com/evaleev/libint/pull/271; * step B' — WIP — #3047 ; * step B' — WIP — https://github.com/conda-forge/libint-feedstock/pull/22; * coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. #### Added; * 15 Feb: `_15` pkg for step B; * 18 Feb: `_4` pkg for step ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2442:7110,depend,depends,7110,https://psicode.org,https://github.com/psi4/psi4/issues/2442,1,['depend'],['depends']
Integrability,"425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; ^CTraceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 387, in <module>; exec(content); File ""<string>"", line 22, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:7619,Rout,Routine,7619,https://psicode.org,https://github.com/psi4/psi4/issues/3159,1,['Rout'],['Routine']
Integrability,"44, #1241; - @alenaizan #1365, #1042, #1294; - @tyzhang1993 #1437; - @tomspur #1257. # Performance Optimizations; - NYI. # Psi Developer Upgrade Guide; - Psi4 now requires C++14 (up from C++11); - The C++ code base was reformatted using clang-format and the provided format file (many PRs). # Developer Interests; - Cleans up the Matrix class for non-totally symmetric irrupts (#1383).; - Psi4 is now C++17 compatible (#1345).; - DFT grid generation is now threaded (#1291).; - `findif` is now ""metadata""-based to allow for greater serialization (#1289).; - Additional documentation and notes on alpha/beta for DFT functionals (#1260).; - `dpd.gbl` has been removed (#1254).; - The CC* modules are moving to a CCWavefunction based solution (#1253).; - CBS has been reworked to be dictionary based to allow for greater flexibility (#1235).; - Updated conversion factors to CODATA 2014 (#1213).; - `pthreads` has been removed from Psi4 (shall not return, #1199).; - Empirical Dispersion has been refactored to a new unified interface (#1151).; - OEProp has been split into many small modules allowing greater flexibility (#1133).; - SCF now throws a SCFConverenceError upon reaching maximum iterations (#1130).; - Standardizes memory printing to `[GiB]` (#1097, ...). # Documentation; - NYI. # Miscelaneous; - NYI. # Bug Fixes; - Fixes an error where the CBS extrapolation technology was not comparable with FNO-CC* methods (#1377); - Fixes an issue where relativistic basis sets were not compatible with SCF stability analysis (#1374).; - Fixes an issue where JSON called from the command line did not correctly write an output (#1369).; - Fixed an error where float options when set as integer were not correctly cast (#1352 ).; - Correctly throws when Yukawa functionals are called from LibXC (#1260).; - Prevents the code from incorrectly trying cast densities between symmetries in some circumstances (#1139).; - Ghost atoms where incorrectly attributing to `core` electron counts (#1139).; - Fixe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406:3660,interface,interface,3660,https://psicode.org,https://github.com/psi4/psi4/issues/1406,1,['interface'],['interface']
Integrability,"4835E+01 1.16393171667026E+01; }. set {; freeze_core true; scf_type df; mp_type df; basis aug-cc-pvtz; DF_BASIS_MP2 cc-pVQZ-RI; }. energy('mp2.5'); ```. Failure:. ```; ==============================================================================; ==============================================================================; ==============================================================================. DF-MP2.5; Program Written by Ugur Bozkaya; Latest Revision September 9, 2017. ==============================================================================; ==============================================================================; ==============================================================================. MO spaces... FC OCC VIR FV; ----------------------; 15 60 1305 0. Number of basis functions in the DF-CC basis: 2970. Available memory : 810623.17 MB; Memory requirement for 3-index ints : 40445.15 MB; Memory requirement for DF-CC int trans: 24244.87 MB; Memory requirement for CC contractions: 56027.91 MB; Total memory requirement for DF+CC int: 96473.07 MB; Memory requirement for Wabef term : 75373.62 MB. Traceback (most recent call last):; File ""/home/416653/PSI4/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/home/416653/PSI4/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/416653/PSI4/lib/psi4/driver/procrouting/proc.py"", line 456, in select_mp2p5; return func(name, **kwargs); File ""/home/416653/PSI4/lib/psi4/driver/procrouting/proc.py"", line 1607, in run_dfocc; dfocc_wfn = core.dfocc(ref_wfn). MemoryError: std::bad_array_new_length. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""FREEZE_CORE"", ""true""); core.set_global_option(""SCF_TYPE"", ""df""); core.set_global_option(""MP_TYPE"", ""df""); core.set_global_option(""BASIS"", ""aug-cc-pvtz""); core.set_global_option(""DF",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1679:3994,contract,contractions,3994,https://psicode.org,https://github.com/psi4/psi4/issues/1679,1,['contract'],['contractions']
Integrability,"490E-02.; Using Symmetric Orthogonalization.; SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. ```; Total Energy Delta E RMS |[F,P]|; ```. @DF-RHF iter 1: -84.75156121243363 -8.47516e+01 4.62678e-01; @DF-RHF iter 2: -84.57553975935072 1.76021e-01 1.57599e-01 DIIS; @DF-RHF iter 3: -95.37276589956019 -1.07972e+01 2.29222e-01 DIIS; @DF-RHF iter 4: -98.17150610513394 -2.79874e+00 1.13514e-01 DIIS; @DF-RHF iter 5: -99.36228201796470 -1.19078e+00 2.49350e-02 DIIS; @DF-RHF iter 6: -99.44980963420196 -8.75276e-02 2.84013e-03 DIIS; @DF-RHF iter 7: -99.45076800401445 -9.58370e-04 5.43402e-04 DIIS; @DF-RHF iter 8: -99.45080520800713 -3.72040e-05 3.28500e-05 DIIS; @DF-RHF iter 9: -99.45080550249595 -2.94489e-07 2.15118e-05 DIIS; @DF-RHF iter 10: -99.45080555220893 -4.97130e-08 5.15361e-07 DIIS; @DF-RHF iter 11: -99.45080555224379 -3.48592e-11 5.53172e-08 DIIS; @DF-RHF iter 12: -99.45080555224428 -4.83169e-13 8.21984e-09 DIIS. DF guess converged. ==> Integral Setup <==. MINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of atoms: 1; Number of AO shells: 14; Number of SO shells: 14; Number of primitives: 30; Number of atomic orbitals: 55; Number of basis functions: 46. ```; Number of irreps: 8; Integral cutoff 0.00e+00; Number of functions per irrep: [ 11 3 3 3 2 8 8 8 ]; ```. OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. ```; Computing two-electron integrals...done; Computed 68684 non-zero two-electron integrals.; Stored in file 33. Batch 1 pq = [ 0, 195] index = [ 0,19110]; ```. ==> DiskJK: Disk-Based J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; Memory (MB): 34332; Schwarz Cutoff: 1E-12; ```. @RHF iter 13: -99.45080702212313 -1.46988e-06 2.13235e-06 DIIS; @RHF iter 14: -99.45080702229357 -1.70445e-10 3.50041e-07 DIIS; @RHF iter 15: -99.45080702229581 -2.23110e-12 2.66726e-07 DIIS; @RHF iter 16: -99.45080702230226 -6.45173e-12 5.58591e-09 DIIS. ==> Post-Iterations <==. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:5950,Wrap,Wrapper,5950,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['Wrap'],['Wrapper']
Integrability,"5000 1.241852000 8.156885000; H 1.485477000 1.176688000 9.116348000; C 3.332840000 1.154673000 7.834922000; H 4.206519000 0.999649000 8.462845000; N 1.311649000 1.424993000 6.973626000; C 2.188563000 1.435214000 5.957752000; H 1.944614000 1.560136000 4.907488000; N 3.421451000 1.288054000 6.467033000; C 4.624491000 1.154329000 5.644658000; H 4.896627000 0.092348000 5.590783000; H 4.378873000 1.527036000 4.641881000; H 5.430033000 1.755038000 6.090598000; C -0.139438000 1.464529000 6.788437000; H -0.534567000 0.445964000 6.893963000; H -0.329914000 1.835298000 5.773051000; H -0.575851000 2.145114000 7.533419000; F 2.193639000 -1.420051000 6.719505000; B 1.853598000 -1.602720000 5.368653000; F 1.684676000 -2.933106000 5.022169000; F 2.887295000 -1.000476000 4.545917000; F 0.639066000 -0.856861000 5.091564000; }; set globals {; basis aug-cc-pVDZ; scf_type direct; freeze_core True; guess sad; basis_guess 3-21G; }; energy('mrccsd(t)_l'); ```. End of output. ```; *** tstart() called on r3584; *** at Mon Feb 17 12:17:52 2014. PSI4 interface to MRCC:; Generating inputs for CCSD(T)_L. Automatically determined settings:; method 4; exlevel 3; fullname CCSD(T)_L. Orbital Information:. Frozen Core [ 24]; Active DOCC [ 70]; SOCC [ 0]; Frozen Virtual [ 0]. Total MOs [ 690]. Beginning integral transformation.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 5; ```. Stderr. ```; iwl_buf_init: Can't open file 33; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""<string>"", line 72, in <module>; File ""/apps/psicode/4.0b5.1/share/psi/python/driver.py"", line 570, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/apps/psicode/4.0b5.1/share/psi/python/proc.py"", line 2111, in run_mrcc; psi4.mrcc_generate_input(level); RuntimeError: PSIO Error; file: /short/z00/cyl900/psi4/psi4public/src/lib/libpsio/error.cc; line: 116; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/35:2040,interface,interface,2040,https://psicode.org,https://github.com/psi4/psi4/issues/35,1,['interface'],['interface']
Integrability,"6355; C 3.05053 -0.99330 -1.18650; C 3.20741 -2.40360 -1.74586; C 2.55026 -3.52443 -0.96032; F 3.17228 4.13514 -0.00592; F 1.27554 3.06932 0.32664; F 3.66787 0.59838 2.12267; F 1.67182 0.43073 1.22024; F 3.82500 -0.17529 -1.99644; F 1.75160 -0.57213 -1.38634; F 3.25533 -3.78096 0.19399; F 1.27730 -3.18683 -0.58308; H 2.25306 4.32050 2.37079; H 3.76241 3.37061 2.47326; H 2.19469 2.57073 2.72526; H 4.35180 1.97066 0.10411; H 2.92157 1.70418 -0.89385; H 4.54579 -0.84429 0.31346; H 3.04476 -1.57689 0.88214; H 4.27328 -2.63006 -1.82364; H 2.78870 -2.38708 -2.75512; H 2.50060 -4.45608 -1.52780; --; 0 1; C -3.87349 2.91061 -1.65876; N -2.75856 1.99410 -1.41455; C -1.50263 2.33407 -0.94691; C -0.83120 1.17172 -0.73344; C -2.84151 0.66484 -1.47790; N -1.68346 0.14262 -1.07953; C -1.46679 -1.28577 -0.78728; C -1.38542 -1.51827 0.72247; C -1.59684 -2.99357 1.06458; C -1.46598 -3.24276 2.56923; H -3.87594 3.66326 -0.86989; H -3.76218 3.38868 -2.63477; H -4.79884 2.33892 -1.60023; H -1.20045 3.35521 -0.79404; H 0.15181 0.98994 -0.34830; H -3.72834 0.10789 -1.72147; H -0.55449 -1.60196 -1.29485; H -2.32462 -1.81798 -1.19641; H -0.41387 -1.17340 1.09480; H -2.16763 -0.92438 1.19970; H -0.87575 -3.61428 0.52075; H -2.59984 -3.27619 0.72873; H -0.46552 -2.96983 2.92459; H -2.19613 -2.64103 3.11964; H -1.63860 -4.29508 2.81528; B -4.99249 -0.20013 0.53015; F -4.36607 -1.36290 -0.02014; F -5.60912 0.50296 -0.55477; F -3.96502 0.63394 1.05703; F -5.91416 -0.53978 1.49939. units angstrom; no_reorient; symmetry c1; }. set{ basis 6-311+G(d,p); scf_type df. DF_BASIS_SAPT 6-311+G(d,p); SAPT_DFT_FUNCTIONAL B3LYP-D. }; energy('sapt2', molecule=AP_BMIMBF4); ```. I received an error message that I ran out of memory. The output file indicates failure occurred during the SAPT2 part, which reported `Estimated memory usage: 64566.6 MB`. Its estimate is off by at least 30 GB, which is not good. The user didn't specify the version they were using beyond `conda`, but I observed this on `1.3a2.dev122`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1361:2102,message,message,2102,https://psicode.org,https://github.com/psi4/psi4/issues/1361,1,['message'],['message']
Integrability,"685693; O 2.81552768 -0.50840706 -1.42180252; O 3.61564541 1.27844179 0.09948727; O 2.95557380 -0.82533526 1.00298083; C 2.03019476 -1.93245912 1.04782605; C -1.66037059 -1.05786431 -0.87382233; C -1.39498496 -1.19960129 -2.34816003; C -2.65299201 -1.76249051 -0.27337471; H -2.37740040 -0.54585648 2.90523863; H 2.38954139 -2.56465364 1.84992540; H 1.02863634 -1.57685304 1.27002537; H 2.04236674 -2.46241236 0.09951447; H -2.15541649 -1.82673633 -2.80763054; H -0.41234738 -1.64107180 -2.50716877; H -1.37758315 -0.22482435 -2.83713913; H -3.27599978 -2.43724084 -0.84607768; S -0.34233722 2.35735393 -1.83532763; C 1.36095190 2.94818139 -1.81407535; H 1.71979201 3.09855604 -0.79815280; H 2.02802634 2.25554347 -2.32132745; H 1.39841688 3.90181231 -2.33199310; H 0.52648693 0.85272557 2.39744759; H -0.38901252 2.05630112 1.52833438; H -1.06736839 1.33094835 2.99083304; }. set {; pcm true; pcm_scf_type total; }. pcm = {; Units = Angstrom; Medium {; SolverType = IEFPCM; Solvent = Water; }. Cavity {; RadiiSet = UFF; Type = GePol; Scaling = False; Area = 0.3; Mode = Implicit; }; }. gradient(""b97-3c""); ```. And here's what happens when I run the calculation:. ```shell; $ psi4 input.dat; PCMSolver fatal error.; In function computeS at line 51 of file /Users/runner/miniforge3/conda-bld/pcmsolver-split_1696645993753/work/src/bi_operators/IBoundaryIntegralOperator.cpp; S matrix is not positive-definite!; Consider changing the average area of the cavity finite elements.; Please report this issue: https://github.com/PCMSolver/pcmsolver/issues; ```. If I delete the PCM sections, the B97-3c gradient runs just fine. The molecule looks normal:. <img width=""600"" alt=""image"" src=""https://github.com/user-attachments/assets/afa2ecd1-9890-4dc5-bf99-a1d7ae898d11"">. All calculations run on a MacBook Pro using Psi4 1.9.1 from conda-forge. (I know the message says to report this to [PCMSolver](https://github.com/PCMSolver/pcmsolver/issues) but that repository hasn't had any updates in 3+ years...)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3202:2288,message,message,2288,https://psicode.org,https://github.com/psi4/psi4/issues/3202,1,['message'],['message']
Integrability,"73100000 -0.000000000; C 1.934600000 -0.213400000 -0.000000000; H 2.475000000 -0.380600000 0.924600000; H 2.475400000 -0.380100000 -0.924300000; H -0.756100000 1.624500000 0.000500000; H -2.368000000 -0.187400000 0.878900000; H -1.437400000 -1.407900000 -0.000100000; H -2.368300000 -0.187200000 -0.878700000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(24000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. The program starts the optimization and produces an error:. ```; Performing finite difference calculations; 49 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB2D549510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007FB2DA9F68A0 Unknown Unknown Unknown; libc-2.27.so 00007FB2DA631F47 gsignal Unknown Unknown; libc-2.27.so 00007FB2DA6338B1 abort Unknown Unknown; core.cpython-37m- 00007FB2D7A0D3D7 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6563E2D Unknown Unknown Unknown; core.cpython-37m- 00007FB2D657D2C1 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6040FF6 Unknown Unknown Unknown; python3.7 000055D7E213E914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AAEBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D7E213E107 _PyFunction_FastC Unknown Unknown; python3.7 000055D7E21A64B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unk",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020:1336,Rout,Routine,1336,https://psicode.org,https://github.com/psi4/psi4/issues/2020,1,['Rout'],['Routine']
Integrability,"85, 0.90, 0.95, 1.00]; for A in Avals:; psi4.core.print_out(""running step %5.2f"" % A); core.set_global_option(""REMP_A"", A); --> energy('oremp',restart_file='scf_mos'); core.set_global_option(""MO_READ"", ""true""); psi4.core.print_out(""""). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Matrix::vector_dot: Dimensions do not match! !; ! Error occurred in file: !; ! /home/tu/tu_tu/tu_ctibc01/prog/psi4/psi4/psi4/src/psi4/libmints/matrix.cc on !; ! line: 1703 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::Matrix::vector_dot(psi::Matrix const*) !; ! !; !----------------------------------------------------------------------------------!; ```; (the example uses a custom method but the problem should be reproducible with DF-OMP2).; The molecule in question has 86 occupied and 773 virtual correlated orbitals, giving rise to (depending on the storage scheme) ~2.2E9 amplitudes. The root cause of the issue seems to be missing type casts to size_t in libmints/matrix.cc. Inserting debug printout shows that the size calculation of the second vector in vector_dot (line 1699) and axpy(line 1443) overflows, while the size calculations of the first vector have ""enough"" type casts. The following proposed fix seems to resolve the problem, at least now the calculation passes the point where it crashed before:; ```; diff --git a/psi4/src/psi4/libmints/matrix.cc b/psi4/src/psi4/libmints/matrix.cc; index ad5ffb5a0..69521972e 100644; --- a/psi4/src/psi4/libmints/matrix.cc; +++ b/psi4/src/psi4/libmints/matrix.cc; @@ -1439,8 +1439,8 @@ void Matrix::axpy(double a, SharedMatrix X) {; throw PSIEXCEPTION(""Matrix::axpy: Matrices do not have the same nirreps"");; }; for (int h = 0; h < nirrep_; h++) {; - size_t size = colspi_[h ^ symmetry()] * (size_t)rowspi_[h];; - if (size != (X->rowspi()[h] * X->col",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2591:3667,depend,depending,3667,https://psicode.org,https://github.com/psi4/psi4/issues/2591,1,['depend'],['depending']
Integrability,"994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constants: A = ************ B = 52225.17395 C = 52225.17395 [MHz]; Nuclear repulsion = 30.788492136145454. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. -AO BASIS SET INFORMATION:; Name = CC-PVTZ; Blend = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; __________________________________________________________________ test_simint ___________________________________________________________________. @using_simint; def test_simint():; """"""simint/scf5""""""; ; psi4.set_options({'integral_package': 'simint'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:625: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_w",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:10998,Interface,Interface,10998,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Interface'],['Interface']
Integrability,"994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constants: A = ************ B = 52225.17395 C = 52225.17395 [MHz]; Nuclear repulsion = 30.788492136145454. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. -AO BASIS SET INFORMATION:; Name = CC-PVTZ; Blend = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; ___________________________________________________________________ test_json ____________________________________________________________________. def test_json():; """"""json/energy""""""; ; import numpy as np; ; # Generate JSON data; json_data = {}; json_data[""molecule""] = """"""He 0 0 0\n--\nHe 0 0 1""""""; json_data[""driver""] = ""gradient""; json_data[""args""] = 'SCF'; json_data[""kwargs""] = {}; json_data[""options""] = {""BASIS"": ""STO-3G""}; json_data[""return_output""] = True; ; psi4.json_wrapper.run_json(json_data); ; assert psi4.compare_strings(""STO-3G"", json_data[""options""][""BASIS""], ""Options test""); > assert psi4.compare_integers(True, json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . expected = True, computed = False, label = 'Success'. def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:16510,Interface,Interface,16510,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Interface'],['Interface']
Integrability,":__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >); psi::DFTGrid::DFTGrid(std::shared_ptr<psi::Molecule>, std::shared_ptr<psi::BasisSet>, psi::Options&). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. Are there plans to include support for the SG-1 grid in Psi4? If not, are there any alternative grids that do work? _Removing_ the SG-1 option from the input file simply results in a segfault. The input file is below:. ```; memory 13500 Mb; molecule {; 0 1; C 4.067369 -2.240127 -0.129252; C 4.972458 -1.390566 3.098494; C 2.921005 -1.630865 0.608144; C 2.878286 -1.651992 2.002187; C 0.763829 -0.484138 1.955055; C 1.885141 -1.036307 -0.112440; C 1.799700 -1.078640 2.675676; C 0.806556 -0.463011 0.561006; O 3.881939 -2.228505 2.721026; Br -0.697406 0.294370 2.866925; H 4.856028 -1.495441 -0.288527; H 4.492277 -3.085465 0.426246; H 3.750214 -2.627370 -1.105706; H 5.701654 -1.973847 3.666076; H 4.602203 -0.560418 3.705314; H 5.446916 -0.996749 2.196547; H 1.908587 -1.015574 -1.198747; H 1.775186 -1.100057 3.762739; H 0.006619 -0.004988 -0.014918; }; set dft_radial_points 99; set dft_spherical_points 590; set dft_grid_name SG1; set dft_nuclear_scheme treutler; set dft_radial_scheme EM; set basis def2-TZVPPD; ENE=energy(""wB97M-V""); ```. I'm running with a slightly old commit from 09/19 (92b4c55b7171ba48520f91b5344cdcfe99cedc2f). My apologies if the problem has already been fixed in a more recent commit, though it doesn't seem like it based on reading through the diffs of commits with relevant messages. Thanks!; Aditya",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/827:2864,message,messages,2864,https://psicode.org,https://github.com/psi4/psi4/issues/827,1,['message'],['messages']
Integrability,"; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.1 (#1896) ; - LGTM (#1905, #2038) ; - MP2/MP3 test suite (#1850, #1971) ; - Standardize CEPA and LCCD (#1909) ; - LCCD test suite (#1913, #1937) ; - Extensive improvements to DFGrad (#1915, #1923, #1953, #1974, #2049, #2079) ; - Expose cube-generating functions to python (#1917) ; - Fix cppe interface (#1922) ; - Move import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF deriv",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:8264,interface,interface,8264,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['interface'],['interface']
Integrability,"; File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 680, in pyconstruct; verbose=verbose); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 862, in construct; shells, msg, ecp_shells, ecp_msg, ecp_ncore = parser.parse(entry, lines); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasissetparser.py"", line 304, in parse; contraction = float(what.group(3)). ValueError: could not convert string to float: '0.6757974388D-01'. Printing out the relevant lines from the Psithon --> Python processed input file:; ****; """"""; return basstrings; qcdb.libmintsbasisset.basishorde['ANONYMOUSA2D5A0E2'] = basisspec_psi4_yo__anonymousa2d5a0e2; core.set_global_option(""BASIS"", ""anonymousa2d5a0e2""); --> e, wfn = energy('scf', return_wfn=True). !--------------------------------------------------------!; ! !; ! could not convert string to float: '0.6757974388D-01' !; ! !; !--------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1996:2620,contract,contraction,2620,https://psicode.org,https://github.com/psi4/psi4/issues/1996,1,['contract'],['contraction']
Integrability,"; H 4.649000000000 2.147000000000 0.000000000000; H 2.169000000000 2.147000000000 0.000000000000; H 5.888000000000 0.000000000000 0.000000000000; H 2.169000000000 -2.147000000000 0.000000000000; H 4.649000000000 -2.147000000000 0.000000000000; ```. Running in c1 symmetry. Nuclear repulsion = 697.113178296437809. Charge = 0; Multiplicity = 1; Electrons = 94; Nalpha = 47; Nbeta = 47. ==> Algorithm <==. SCF Algorithm Type is OUT_OF_CORE.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-08; Density threshold = 1.00e-10; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: CC-PVDZ; Number of shells: 114; Number of basis function: 246; Number of Cartesian functions: 260; Spherical Harmonics?: true; Max angular momentum: 2. ==> Pre-Iterations <==. ---. ```; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; ```. ---. ```; A 246 246 0 0 0 0; ```. ---. ```; Total 246 246 47 47 47 0; ```. ---. Starting with a DF guess... OEINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of atoms: 24; Number of AO shells: 114; Number of SO shells: 114; Number of primitives: 358; Number of atomic orbitals: 260; Number of basis functions: 246. ```; Number of irreps: 1; Number of functions per irrep: [ 246 ]. Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35.; ```. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 3576; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12; ```. => Auxiliary Basis Set <=. Basis Set: CC-PVDZ-JKFIT; Number of shells: 426; Number of basis function: 1210; Number of Cartesian functions: 1384; Spherical Harmonics?: true; Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 5.4113217503E-05.; Using Symmetric Orthogonalization.; SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterati",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61:5961,Wrap,Wrapper,5961,https://psicode.org,https://github.com/psi4/psi4/issues/61,2,['Wrap'],['Wrapper']
Integrability,"= 179.050978 0.000006 0.918241 179.969219; 	 458 D(80,79,81,82) = -0.723483 -0.000001 0.699743 -0.023740; 	 459 R(1,57) = 4.556972 0.028391 82.812579 87.369551; 	 460 R(1,59) = 4.234547 -0.016108 88.866233 93.100780; 	 461 R(1,61) = 5.234532 -0.079923 136.786876 142.021408; 	 462 R(3,10) = 4.421241 -0.017502 87.218679 91.639920; 	 463 R(3,59) = 3.917839 0.129694 117.366756 121.284594; 	 464 R(26,42) = 5.126758 -0.254383 106.705426 111.832184; 	 465 R(27,42) = 5.013692 -0.066414 135.796477 140.810169; 	 466 R(27,43) = 3.922541 0.040579 56.026763 59.949304; 	 467 R(31,42) = 4.773179 -0.049073 86.931871 91.705050; 	 468 R(36,42) = 5.289417 -0.215249 119.067163 124.356580; 	 469 R(38,42) = 4.228544 -0.108830 108.926322 113.154866; 	 470 R(38,48) = 3.625076 0.487672 45.283805 48.908881; 	 471 R(40,42) = 3.912528 0.142787 93.032857 96.945385; 	 472 R(40,43) = 3.961431 -0.231133 75.232676 79.194108; 	 473 R(43,51) = 4.402298 -0.008954 137.557753 141.960051; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB33148410F for__signal_handl Unknown Unknown; libpthread-2.31.s 00007FB3362A83C0 Unknown Unknown Unknown; libc-2.31.so 00007FB3360E718B gsignal Unknown Unknown; libc-2.31.so 00007FB3360C6859 abort Unknown Unknown; core.cpython-37m- 00007FB3339FF4C7 Unknown Unknown Unknown; core.cpython-37m- 00007FB332555F1D Unknown Unknown Unknown; core.cpython-37m- 00007FB33256F3B1 Unknown Unknown Unknown; core.cpython-37m- 00007FB3320330E6 Unknown Unknown Unknown; python3.7 000055D780EDE114 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D780EDE231 _PyCFunction_Fast Unknown Unknown; python3.7 000055D780F42A5D _PyEval_EvalFrame Unknown Unknown; python3.7 000055D780E976F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D780EDD917 _PyFunction_FastC Unknown Unknown; python3.7 000055D780F3F0A6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D780E976F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D780E985F4 PyEval_EvalCodeEx Unknown Unknown",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921:48127,Rout,Routine,48127,https://psicode.org,https://github.com/psi4/psi4/issues/1921,1,['Rout'],['Routine']
Integrability,">/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/p4util/python_helpers.py"", line 115, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/p4util/python_helpers.py"", line 79, in _pybuild_basis; bs, basisdict = qcdb.BasisSet.pyconstruct(; ^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/qcdb/libmintsbasisset.py"", line 635, in pyconstruct; mol = Molecule(mol); ^^^^^^^^^^^^^; File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/qcdb/molecule.py"", line 143, in __init__; self._internal_from_dict(molrec, verbose=verbose); File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/qcdb/molecule.py"", line 1529, in _internal_from_dict; fragment_separators = np.array(molrec['fragment_separators'], dtype=np.int); ^^^^^^; File ""/usr/lib/python3/dist-packages/numpy/__init__.py"", line 284, in __getattr__; raise AttributeError(""module {!r} has no attribute ""; AttributeError: module 'numpy' has no attribute 'int'. Did you mean: 'inf'?; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. The important part (I think) being `AttributeError: module 'numpy' has no attribute 'int'. Did you mean: 'inf'?`. According to the Debian bug (<https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1027216>), ""This is because, numpy upstream in; 1.24.0, finally decided to expire <https://numpy.org/doc/stable/release/1.24.0-notes.html#:~:text=The%20deprecation%20for%20the%20aliases> some deprecations introduced in 1.20.0 <https://numpy.org/doc/stable/release/1.20.0-notes.html#using-the-aliases-of-builtin-types-like-np-int-is-deprecated> (released almost 2 years ago)."". It this a known problem, and possibly already fixed in master or later branches? At least the one quoted above got changed for master in f5b7cf967 (with a rather unhelpful commit message)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2865:3168,message,message,3168,https://psicode.org,https://github.com/psi4/psi4/issues/2865,1,['message'],['message']
Integrability,"@CDSherrill, here's the rohf mp2 results from a few programs. Ugur matches Q-Chem. Molpro is fairly close to Q-Chem, though I'm really not sure about that input. ""rccsd"" ""calls spin-restricted open-shell coupled cluster program"" according to the manual, but this route through the code is not labeled enough for me to be confident of it. So detci is the odd one out, but good news is that its reference is sound. | program | fc | scf | singles | mp2corl | mp2tot |; | --- | --- | --- | --- | --- | --- |; | occ | fc | -25.94361432 | -0.00068837 | -0.05940725 | -26.00302157 |; | detci | fc | -25.94361432 | | -0.06094168 | -26.00455600 |; | qchem | fc | -25.94361432 | -0.00068837 | -0.05940725 | -26.00302157 |; | molpro | fc | -25.94361432 | -0.00054735 | -0.05936497 | -26.00297929 |. ```; $molecule; 1 2; B 0.10369114 0.00000000 0.00000000; H -1.13269886 0.00000000 0.00000000; H 3.00000000 0.37149000 0.00000000; H 3.00000000 -0.37149000 0.00000000; $end. $rem; JOBTYPE sp; unrestricted false; n_frozen_core fc; scf_guess sad; BASIS cc-pVdZ; basis2 6-31g; correlation mp2; THRESH 12; SCF_CONVERGENCE 8; SYM_IGNORE TRUE; SYMMETRY FALSE; MEM_TOTAL 1600; MEM_STATIC 512; INTEGRALS_BUFFER 512; MAX_SCF_CYCLES 200; $end; ```. ```; molecule bh_h2p {; 1 2; B 0.10369114 0.00000000 0.00000000; H -1.13269886 0.00000000 0.00000000; H 3.00000000 0.37149000 0.00000000; H 3.00000000 -0.37149000 0.00000000; }. set basis cc-pvdz; set scf_type pk; set mp2_type conv; set guess sad; set freeze_core true; set e_convergence 8; set d_convergence 7; set reference rohf. set qc_module detci # toggle detci/occ; energy('mp2'); ```. ```; memory,200,m; nosym; noorient; angstrom; geometry={; B 0.10369114 0.00000000 0.00000000; H -1.13269886 0.00000000 0.00000000; H 3.00000000 0.37149000 0.00000000; H 3.00000000 -0.37149000 0.00000000; }. GTHRESH,ZERO=1.e-14,ONEINT=1.e-14,TWOINT=1.e-14,ENERGY=1.e-9. SET,CHARGE=1; SET,SPIN=1. basis=cc-pVDZ. rhf; rccsd; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/311:263,rout,route,263,https://psicode.org,https://github.com/psi4/psi4/issues/311,1,['rout'],['route']
Integrability,"@bozkaya While running geometry optimizations on a test set of molecules, the MP2.5 and MP3 codes both crash specifically for 2 electron systems without any clear error messages. Input and output files for H2 and Helium geometry optimizations using MP2.5 or MP3 method, respectively.; [h2_input.txt](https://github.com/psi4/psi4/files/1635881/h2_input.txt); [h2_output.txt](https://github.com/psi4/psi4/files/1635895/h2_output.txt); [he_input.txt](https://github.com/psi4/psi4/files/1635897/he_input.txt); [he_output.txt](https://github.com/psi4/psi4/files/1635899/he_output.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/893:169,message,messages,169,https://psicode.org,https://github.com/psi4/psi4/issues/893,1,['message'],['messages']
Integrability,"A [recent PR](https://github.com/psi4/psi4/pull/2780#event-7959038316) changed `detci` so that it crashes when the user specified more roots than the basis set allows. @susilehtola proposed that instead, `detci` take as many roots as possible. What do we want to do?. I'll quote Lori's analysis of our options. > 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; > ; > 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); > ; > 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2825:402,contract,contracts,402,https://psicode.org,https://github.com/psi4/psi4/issues/2825,3,['contract'],"['contract', 'contracts']"
Integrability,"A consequence of @loriab's changes in #2764 is that `SphericalGrid::order_` no longer means ""Order of spherical harmonics in spherical grid (integrates products up to L_tot = 2 * order_ + 1)"", as the docstring claims. This seems to be used for printing and nothing else, so it may be better to just remove this field entirely. Removing such things from `cubature.cc` is directly in scope of #2736.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2765:141,integrat,integrates,141,https://psicode.org,https://github.com/psi4/psi4/issues/2765,1,['integrat'],['integrates']
Integrability,"A minor DCT bug that is on my to-fix list when I move the control logic to Python:; The code often prints energies to the output file that were created using outdated intermediates, so they aren't the energy you would actually get using the current cumulant and orbital parameters. This means that even for variational parameters, lowering the residual produces a higher (reported) energy. The two offenders I've noticed are not updating the tau intermediate after a cumulant update and not re-computing the 1RDM and separable contributions to the energy after updating tau. In `dcft_oo_UHF.cc:run_simult_dcft_oo`, for instance, the cumulant is updated on [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dcft/dcft_oo_UHF.cc#L133), but tau never gets recomputed (`build_tau` and `refine_tau`) until the next iteration of the loop, by which point the energy has already been printed. You can see both problems in the twostep algorithm. Even if it was recomputed, `dcft_compute_uhf:compute_energy_UHF` is never called until the next iteration of the loop either. That function is responsible for re-computing the tau-dependent terms, so the tau-energy contribution would still be one iteration behind. The control logic will need to be re-organized.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1511:1133,depend,dependent,1133,https://psicode.org,https://github.com/psi4/psi4/issues/1511,1,['depend'],['dependent']
Integrability,"A month ago, I installed PSI4 from miniconda. Everything was fine and PSI4 finished a lot of calculations. Recently I have updated PSI4 with the command ""conda update psi4"" and PSI4 cannot run anymore because of library omission. Using command ""conda inspect linkages psi4"", I obtained this output:; ""not found:; libgsl.so.0 (not found); libgslcblas.so.0 (not found); libhdf5.so.10 (not found); libhdf5_hl.so.10 (not found)"". What should I do to sovle this problem? It will take me much time if I compile PSI4 and it's dependencies from the beginning.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/154:519,depend,dependencies,519,https://psicode.org,https://github.com/psi4/psi4/issues/154,1,['depend'],['dependencies']
Integrability,"A recent [forum issue](http://forum.psicode.org/t/error-in-running-on-centos-undefinted-name-true/1727/2) traced back to a user writing `return_wfn=true` rather than `return_wfn=True`. Can we teach the parser to automatically correct this, or at least print a better error message?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1859:273,message,message,273,https://psicode.org,https://github.com/psi4/psi4/issues/1859,1,['message'],['message']
Integrability,"A recent [forum report](http://forum.psicode.org/t/deleting-scratch-files-before-a-computation-finishes/2206) has a user encountering the error message ""PSIOManager cannot get a mirror file handle"". Liberal use of `psi.core.clean` isn't fixing anything, and Holger and I can't figure out what the error message means. We need to figure out what the message means, how the user should respond, and put that into the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2224:144,message,message,144,https://psicode.org,https://github.com/psi4/psi4/issues/2224,4,['message'],['message']
Integrability,"A simple input fails to run:; ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```; a; And here is the error message:. ```; [henrique@localhost ~] $ psi4 teste.dat ; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 7, in <module>. File ""/usr/share/psi4/python/driver.py"", line 45, in <module>; import driver_util. File ""/usr/share/psi4/python/driver_util.py"", line 30, in <module>; from procedures import *. File ""/usr/share/psi4/python/procedures/__init__.py"", line 1, in <module>; from proc_table import procedures, hooks, energy_only_methods. File ""/usr/share/psi4/python/procedures/proc_table.py"", line 198, in <module>; for ssuper in proc.superfunctional_list():. File ""/usr/share/psi4/python/procedures/functional.py"", line 3605, in superfunctional_list; sup = superfunctionals[key](key, 1, 1). File ""/usr/share/psi4/python/procedures/functional.py"", line 1953, in build_b3lypd1_superfunctional; sup = build_b3lyp_superfunctional(name, npoints, deriv). File ""/usr/share/psi4/python/procedures/functional.py"", line 1224, in build_b3lyp_superfunctional; sup = psi4.SuperFunctional.blank(). TypeError: No to_python (by-value) converter found for C++ type: boost::shared_ptr<psi::SuperFunctional>. ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/531:263,message,message,263,https://psicode.org,https://github.com/psi4/psi4/issues/531,1,['message'],['message']
Integrability,"A user on the forums [reported](http://forum.psicode.org/t/psio-error-during-adc-2/1338) a PSIO error when using ADC(2). The input file is; ```; #! ADC/def-2SVP on BODIPY-Phe . molecule bodphe {; 0 1 ; N 0.07895 0.63049 2.21156; N 0.40701 -1.77253 2.18386; C 0.85975 -1.61894 0.87368; C 1.93462 -2.51476 0.66009; C 0.25153 -0.54266 0.07529; C 0.60747 0.60802 0.92030; C 1.47746 1.72071 0.77028; C 1.38234 2.45311 1.95195; C 2.07438 -3.24863 1.84094; C 0.53652 1.71840 2.84134; C 1.13424 -2.73093 2.77791; H 2.76916 -4.06657 2.02914; H 0.98002 -2.99119 3.82431; H 2.46553 -2.64393 -0.28198; H -0.76107 1.52726 -1.36025; C -0.87740 0.55157 -1.84231; C -0.42668 -0.61486 -1.17553; C -0.59367 -1.86931 -1.81442; H -0.24902 -2.77578 -1.30769; C -1.18278 -1.94632 -3.07591; H -1.30041 -2.92327 -3.55316; C -1.60723 -0.78659 -3.74115; H -2.04665 -0.85123 -4.73942; C -1.45720 0.45654 -3.10859; H -1.78685 1.36634 -3.61791; B -0.55985 -0.69534 2.82439; F -0.40573 -0.68314 4.19154; H 0.27433 1.92595 3.87885; H 1.84952 3.41187 2.17639; H 2.03049 1.96835 -0.13399; F -1.84936 -0.86321 2.39539; symmetry c1 ; }. set {; reference rhf; basis def2-svp; freeze_core true; guess auto ; roots_per_irrep [2] ; }. ref_energy = -906.2735763050857258 ; adc_energy = energy('adc'); ```. The (OV|VV) integral transformation completes, and then `file4_mat_irrep_rd_block` raises the following error:; ```; PSIO_ERROR: Can't find TOC Entry MO Ints V1243); PSIO_ERROR: unit = 61, errval = 13; PSIO_ERROR: 13 (no such TOC entry); ```. This may be a large system, but user's tests indicate scratch usage is at 10% at the time of the crash, and this error message isn't what PSIO normally displays during a memory problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1596:1628,message,message,1628,https://psicode.org,https://github.com/psi4/psi4/issues/1596,1,['message'],['message']
Integrability,AIM Interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2341:4,Interface,Interface,4,https://psicode.org,https://github.com/psi4/psi4/issues/2341,1,['Interface'],['Interface']
Integrability,"According to [the documentation](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#L329-L330) of `sotoao()`, the function is supposed to return the inverse of `PetiteList.aotoso()`. This matrix is not guaranteed to be invertible. If the matrix is _not_ invertible, multiplying `sotoao()` and `aotoso()` together does not yield the identity matrix. The problem is that `aotoso()` isn't even guaranteed to be square. The SO space will always be [the number of basis functions](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#622-L639). The AO space will be [the number of basis functions or the number of atomic orbitals ](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#615-L620), depending on whether `include_pure_transform_` is set. In other words, you may be transforming from either Cartesian or pure angular momentum functions to symmetry-adapted pure angular momentum functions. If `d` or higher angular momentum functions are present, then choosing to transform from Cartesian functions means you have more atomic orbitals than basis functions, so the row and column dimensions don't match. The transformation isn't even square, let alone invertible, so of course `sotoao()` returns nonsense. The following input file almost demonstrates the problem. You'll need to PyBind the `PetiteList` initializer over as well for it to run. ```; molecule mol {; 0 3; symmetry c1; C 0.0000000000 0.0000000000 -0.5928430915; H -0.0000000000 0.9469373770 -1.1509808737; H 0.0000000000 -0.9469373770 -1.1509808737; }. basis = core.BasisSet.build(mol, ""ORBITAL"", ""cc-pvdz"", quiet=True); factory = core.IntegralFactory(basis). # np.dot(so2ao, ao2so) should always be the identity. The functions are inverses. # We have a problem!; petite = core.PetiteList(basis, factory, True); so2ao = petite.sotoao().nph[0]; print(so2ao); print(so2ao.shape) # (24, 25) ; ao2so = petite.aotoso().nph[0]; print(np.dot(so2ao, ao2so)). # Works ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1763:765,depend,depending,765,https://psicode.org,https://github.com/psi4/psi4/issues/1763,1,['depend'],['depending']
Integrability,"According to the docs (https://psicode.org/psi4manual/master/autodir_options_c/module__ccenergy.html#cachelevel), the maximum value of cachelevel is 6. This is wrong, trying to use a cachelevel of 6 or 5 results in an invalid cachelevel error message. The largest cachelevel that appears to work is 4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2701:243,message,message,243,https://psicode.org,https://github.com/psi4/psi4/issues/2701,1,['message'],['message']
Integrability,Add DF-DCFT warning messages.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1580:20,message,messages,20,https://psicode.org,https://github.com/psi4/psi4/pull/1580,1,['message'],['messages']
Integrability,Add Not Implemented Messages in DCT,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1518:20,Message,Messages,20,https://psicode.org,https://github.com/psi4/psi4/pull/1518,1,['Message'],['Messages']
Integrability,Add SAPT0-D routines,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2081:12,rout,routines,12,https://psicode.org,https://github.com/psi4/psi4/pull/2081,1,['rout'],['routines']
Integrability,Add Spec. Rot. Origin Dependence Psivar,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2451:22,Depend,Dependence,22,https://psicode.org,https://github.com/psi4/psi4/pull/2451,1,['Depend'],['Dependence']
Integrability,Add deprecation message to schmidt_add in libqt,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2822:16,message,message,16,https://psicode.org,https://github.com/psi4/psi4/pull/2822,1,['message'],['message']
Integrability,Add pb11 dependency to modules that use DIIS,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2387:9,depend,dependency,9,https://psicode.org,https://github.com/psi4/psi4/pull/2387,1,['depend'],['dependency']
Integrability,Add point group information to FCIDUMP interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1942:39,interface,interface,39,https://psicode.org,https://github.com/psi4/psi4/pull/1942,1,['interface'],['interface']
Integrability,Add point group information to FCIDUMP interface (2),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1951:39,interface,interface,39,https://psicode.org,https://github.com/psi4/psi4/pull/1951,1,['interface'],['interface']
Integrability,Add routine to automate computation of MBIS volume ratios,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127:4,rout,routine,4,https://psicode.org,https://github.com/psi4/psi4/pull/2127,1,['rout'],['routine']
Integrability,Add saving for T-amplitudes to the QCSchema wrapper.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2328:44,wrap,wrapper,44,https://psicode.org,https://github.com/psi4/psi4/pull/2328,1,['wrap'],['wrapper']
Integrability,Added virtual functions to UKS and RKS to override the soscf_update of UHF and RKS. The result is that calling soscf_update on these functions will now fail with an error message instead of a set fault. Also cleaned up the SOSCF logic a bit. This PR is ready to be merged if everything passes. Fixes #256.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/258:171,message,message,171,https://psicode.org,https://github.com/psi4/psi4/pull/258,1,['message'],['message']
Integrability,Adds Ambit external interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/265:20,interface,interface,20,https://psicode.org,https://github.com/psi4/psi4/pull/265,1,['interface'],['interface']
Integrability,"Adds the ability to compile and link [Ambit](https://github.com/jturney/ambit) v0.1-alpha into Psi4. The interface is disabled by default but can be enabled with either `setup --ambit=on` or `cmake -DENABLE_AMBIT=ON`. Even though the interface is disabled by default both states have been tested in Travis: [disabled](https://travis-ci.org/jturney/psi4/builds/109861480) and [enabled](https://travis-ci.org/jturney/psi4/builds/109700703). A new plugin template has also been added, `psi4 --new-plugin mycode +ambit`, which shows how to use Ambit with added Psi4 functionality. This PR also includes fixing a typo in Wavefunction and renaming the macro NotImplementedException to NOT_IMPLEMENTED_EXCEPTION to avoid conflicts with Ambit. This PR is ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/265:105,interface,interface,105,https://psicode.org,https://github.com/psi4/psi4/pull/265,2,['interface'],['interface']
Integrability,"After a recent git pull, psi4 failed to compile. It seems that the error was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi so all Python Exceptions raise to stdout and psi out"". If I revert to the commit just before this I'm able to compile. . If it helps, I'm running Ubuntu, with gnu compilers. . Here's the error message: . `/home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_local_option_array(const string&, const string&, const pybind11::list&, psi::DataType*)’:; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’:; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token; if (py::isinstance<py::list>(values[n])) {; ^; src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed; make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: *** Waiting for unfinished jobs....; ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed; make[5]: *** [src/CMakeFiles/core.dir/export_mints.cc.o] Interrupt; CMakeFiles/Makefile2:208: recipe for target 'src/CMakeFiles/core.dir/all' failed; make[4]: *** [src/CMakeFiles/core.dir/all] Interrupt; Makefile:127: recipe for target 'all' failed; make[3]: *** [all] Interrupt; CMakeFiles/psi4_core.dir/build.make:111: recipe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/536:342,message,message,342,https://psicode.org,https://github.com/psi4/psi4/issues/536,1,['message'],['message']
Integrability,"After https://github.com/psi4/psi4/issues/86 and https://github.com/psi4/psi4public/issues/110 settled, ; - [ ] create conda package with python 3.4. Should be as simple as changing the `conda-recipe/psi4/meta.yaml` dependencies.; - [ ] add to Psinet's duties by modifying/copying stuff in nightly folder so package built nightly and results sent to testboard",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/111:216,depend,dependencies,216,https://psicode.org,https://github.com/psi4/psi4/issues/111,1,['depend'],['dependencies']
Integrability,"All was well on psi4/psi4 circa 7913b38 early morning 15 Nov, but after pub/priv sync, by early morning 16 Nov, fresh recursive clones (`git clone --recursive https://github.com/psi4/psi4.git`) are giving errors; like below. @robertodr, could you check that the current submodule reference is what it ought it be? Thanks. ```; Cloning into 'psi4'...; ...; Resolving deltas: 100% (80379/80379), done.; Submodule 'interfaces/pcmsolver' (https://github.com/PCMSolver/pcmsolver.git) registered for path 'interfaces/pcmsolver'; Cloning into 'interfaces/pcmsolver'...; ...; Resolving deltas: 100% (13625/13625), done.; fatal: reference is not a tree: 9bc8e049f14260a4c1b4b2bda898a16850907b1c; Unable to checkout '9bc8e049f14260a4c1b4b2bda898a16850907b1c' in submodule path 'interfaces/pcmsolver'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/189:412,interface,interfaces,412,https://psicode.org,https://github.com/psi4/psi4/issues/189,4,['interface'],['interfaces']
Integrability,"An error which is very high on my to-fix list, but where the fix is very involved. DF-DCT properties as present are not correct. I've tested against my own Python code and the Psi code and found disagreements in the fifth and sixth decimal place between finite difference and analytic properties. I've spoken with the code authors, and we are aware of two sources of disagreement.; 1. For gradients, the RDMs are contracted against the conventional derivative integrals, not the density fitted derivative integrals.; 2. Due to a subtle point in the derivation, the DF-DCT cumulant stationarity conditions are not variational minimization of the energy, as they are in conventional DCT. Accordingly, you're missing a cumulant response term for gradients and other properties. The fix for point 1 will hopefully just be marking the wavefunction as density fitted and leave the contractions to the `Deriv` object. However, DCT at present interferes with RDM processing in `libtrans`, so the fix will be likely be more involved. The fix for point 2 is not clear. I'm aware of three options:; * Change the DF-DCFT stationarity conditions to be variational minimization of the energy; * Change which terms are to be contracted against JKFIT integrals and which against RIFIT integrals, so the stationarity conditions are ""fixed"" automatically; * Add a cumulant response term. (Please don't make me do this.). I favor option B, but it'll take time to see what B does to energies.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1579:413,contract,contracted,413,https://psicode.org,https://github.com/psi4/psi4/issues/1579,3,['contract'],"['contracted', 'contractions']"
Integrability,"Any computation that attempts to compute frequencies of a density fitted method will crash unless the symmetry is explicitly set to c1. Gradients do not have this problem. The below input file demonstrates the problem and has been taken from the test cases. The only modifications are changing gradients to frequencies and CCSD(T) to MP2. The bug is there with both methods, and also CCSD. I haven't checked other DF methods. ```; #! DF-MP2 cc-pVDZ energy for the H2O molecule. molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776 ; }. set {; basis cc-pvdz; df_basis_scf cc-pvdz-jkfit; df_basis_cc cc-pvdz-ri; scf_type df; guess sad ; freeze_core true; cc_type df; qc_module occ ; }. frequencies('mp2', dertype=0); ```; The crash gives the following error message:; ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1774, in frequency; H, wfn = hessian(lowername, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1595, in hessian; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1608, in run_dfocc; ""RIFIT"", core.get_global_option(""BASIS"")); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py"", line 99, in pybui",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1093:759,message,message,759,https://psicode.org,https://github.com/psi4/psi4/issues/1093,1,['message'],['message']
Integrability,"As the title stated, I want to perform fsapt calculation on a system that contains iodine atoms. At the begining I used the aug-cc-tzvp but it didn't contain the parameter for iodine.So I use the basis set def2-tzvp which contains the parameter for iodine. But when I run the calculation, it sent out such error message:; ```; Traceback (most recent call last):; File ""/pubhome/zchen02/miniconda3/envs/psi4/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 141, in <module>; File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 3631, in run_fisapt; core.get_global_option(""MINAO_BASIS"")); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/p4util/python_helpers.py"", line 80, in _pybuild_basis; mol.to_dict(), key, resolved_target, fitrole, other, return_dict=True, return_atomlist=return_atomlist); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 679, in pyconstruct; verbose=verbose); File ""/pubhome/zchen02/miniconda3/envs/psi4/lib//python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 897, in construct; (at + 1, key, text2)). psi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 106 for key BASIS among:; Shell Entries: ['I']; Basis Sets: [('CC-PVTZ-MINAO', 'CC-PVTZ-MINAO', None)]; ```; Is there any method to solve this problem?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2291:312,message,message,312,https://psicode.org,https://github.com/psi4/psi4/issues/2291,1,['message'],['message']
Integrability,"At this stage, I have a reminder to look into this, rather than a full report. We had a user on the forum [report](http://forum.psicode.org/t/question-on-oscillator-strength-calculation-using-python-api/1036/2) getting the error message that ""Must provide roots_per_irrep vector in input."" during a EOM computation via PythonAPI. The user did provide `roots_per_irrep` in `set_options`... Just as a string rather than a list. A smarter API would have either tried to coerce the string to the actual type, a list, or have raised an error that a string wasn't valid for that argument. If Psi is already supposed to do this, why didn't it? If Psi isn't already supposed to do this, which one do we want to take?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1137:229,message,message,229,https://psicode.org,https://github.com/psi4/psi4/issues/1137,1,['message'],['message']
Integrability,"Attempting frequency() for atomic species fails irrespective of charge, multiplicity, and reference type. Typical error message:. > 1 displacements needed.; > 1; > ; > An error has occurred. Traceback:; > <type 'exceptions.IndexError'>: basic_string::replace: File ""<string>"", line 26, in <module>; > ; > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in frequency; > psi4.thermo(wfn, wfn.frequencies()). Thanks,; -drhaney, -- that's ""D. R."", not Doctor. Typical input file attached (C atom, neutral triplet).; [C.txt](https://github.com/psi4/psi4/files/198782/C.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332:120,message,message,120,https://psicode.org,https://github.com/psi4/psi4/issues/332,1,['message'],['message']
Integrability,"Attempts to use both density fitting and the quadratically convergent algorithm in DCT crash Psi. In particular, the following input file. ```; molecule adduct {; O; H 1 1 ; H 1 1 2 104.5; }. set {; basis sto-3g; reference uhf ; dcft_type df; }. set dcft {; algorithm qc; }. energy('dcft'); ```. raises the following error. ```; Traceback (most recent call last):; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/bin/psi4"", line 272, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/opt/vulcan/opt/vulcan/linux-x86_64/intel-16.0.1/psi4-master-avducsgnonqrcpftiesq432gagal6y7r/lib/psi4/driver/procrouting/proc.py"", line 1489, in run_dcft; dcft_wfn = core.dcft(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /home/vulcan/vadmin/programs/psi4/psi4/src/psi4/libpsio/error.cc on line: 128 ; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::read(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); ```. Public Enemy No. 2, we meet again... My hunch is that this was never implemented, and an error just needs to be raised until it is implemented. However, it may actually be implemented, but just suffering from a bug. I'll be leaving this error message here until I can figure out which - that will take a while.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1353:1664,message,message,1664,https://psicode.org,https://github.com/psi4/psi4/issues/1353,1,['message'],['message']
Integrability,"Automatic extrapolations at the driver layer: `energy('MP2/aug-cc-pv[D,T]Z')`,`optimize('SCF/cc-pV[D,T,Q]Z')`.; - New N-Body wrapper capable of computing non-CP, CP and VMFC energies and gradients. The `cp` wrapper has been deprecated and CP can now be called as an optional argument to an energy call: `energy('SCF/cc-pVDZ', bsse_type='CP')`.; - New cmake build system for developers; - More sophisticated user input for one-electron property analysis; - More user-friendly error checking: If the user specifies an unknown keyword, the program will print that this keyword is unknown and will suggest possible alternatives that are close in spelling; - Added code to output cube files for orbitals, densities, etc.; - Added automatic defaults for auxiliary basis sets; - Improvements to the reporting of SAPT summary information, and enhancements to obtain SAPT methods reported in doi: 10.1063/1.4867135.; - The `properties` call now has a uniform interface for SCF, DFT, MP2, CI, MCSCF methods; ## Infrastructure improvements; - The Wavefunction object is now returnable for all psi4 methods. This Wavefunction object can be passed to other codes or directly manipulated; - Driver has been refactored into a new recursive scheme (as opposed to the previous nested scheme) to better facilitate more complex calls; - The MOLDEN writer now accepts density matrices for writing natural orbitals; - Added command-line arguments -l to specify PSIDATADIR (for developers) and -s to specify location of scratch directories (overrides PSI_SCRATCH); - Internal upgrades to the direct product decomposition library, libdpd, especially regarding density fitting; - All code improvements now go through a review process on `github.com/psi4/psi4` in addition to a continuous integration server to ensure code quality; ## New methods; - Added quadratic convergence algorithms for RHF, UHF, ROHF; - Added DF-CCSD gradients (RHF references); - Added conventional and DF RASSCF and CASSCF energies; - Added X2C scala",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367:1293,interface,interface,1293,https://psicode.org,https://github.com/psi4/psi4/issues/367,1,['interface'],['interface']
Integrability,Bandaid over 1851... Segfault to error message.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1858:39,message,message,39,https://psicode.org,https://github.com/psi4/psi4/pull/1858,1,['message'],['message']
Integrability,Basis functions evaluating to zero at grid points dependent on delta in BasisExtents,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1051:50,depend,dependent,50,https://psicode.org,https://github.com/psi4/psi4/issues/1051,1,['depend'],['dependent']
Integrability,Better Error Message for Issue #2890,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906:13,Message,Message,13,https://psicode.org,https://github.com/psi4/psi4/pull/2906,1,['Message'],['Message']
Integrability,"Both PCMSolver (in `pcmsolver.h`) and psi (in `src/lib/libpsipcm/psipcm.cc`) defined a `extern ""C""` function called:. ``` c++; extern ""C"" void host_writer(const char * message, int message_length);; ```. The fails to build of course (icpc 16.0.1):. ```; error: more than one instance of overloaded function ""host_writer"" has ""C"" linkage; ```. Please rename or adjust the function.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/417:168,message,message,168,https://psicode.org,https://github.com/psi4/psi4/issues/417,1,['message'],['message']
Integrability,"C::XCIntegrator` object and all related objects (e.g., load balancer, molecular weights partitioner), as well as other auxiliary work such as defining the GauXC execution space. `snLinK::build_G_component` constructs the K matrix from the input density via the GauXC integrator's `eval_exx` function. `build_G_component` also handles fundamental pre- and post-processing required for the involved matrices - Spherical Harmonic integral reordering permutations if `psi4_SHGAUSS_ORDERING` is set to the default option of gaussian , and Spherical-to-Cartesian transforms, if required, to enable GPU support (also forcible via the `SNLINK_FORCE_CARTESIAN` keyword). As a `SplitJK` instance, sn-LinK can be called within Psi4 via `SCF_TYPE = J_ALGO+SNLINK`, with `J_ALGO` being the J construction algorithm of choice (currently only `DFDIRJ`). If GPU support is enabled, the `SNLINK_USE_GPU` keyword can be turned on to run the sn-LinK algorithm using GPUs. Construction of the GauXC interface is specified at compile-time, using the `ENABLE_gauxc` flag. Psi4 can either build an internal instance of GauXC, or hook up to an external GauXC install specified by `gauxc_DIR`. If `ENABLE_gauxc` is turned off, the `snLinK` class will instead throw an exception upon construction. For GPU support, there is the `gauxc_ENABLE_GPU` keyword, which ensures that the Psi4/GauXC interface supports GPU execution. For testing, `test_compositejk.py` and `test_comprehensive_jk_screening.py` both now include sn-LinK tests, conditional on the sn-LinK interface being built. Finally, a `gauxc_writer.py` file has been added, enabling construction of HDF5 reference files via the Psi4/GauXC interface, to be used in GauXC's `standalone_driver` for debugging purposes. The `test_gauxc_writer.py` file has been added to test this writer against reference HDF5 files. . ## User API & Changelog headlines; - [X] Psi4 has been interfaced to the GauXC standalone library, specifically the sn-LinK exact exchange algorithm prese",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:2053,interface,interface,2053,https://psicode.org,https://github.com/psi4/psi4/pull/3150,1,['interface'],['interface']
Integrability,CBS Wrapper and general driver cleanup,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/365:4,Wrap,Wrapper,4,https://psicode.org,https://github.com/psi4/psi4/pull/365,1,['Wrap'],['Wrapper']
Integrability,CBS wrapper fix,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/456:4,wrap,wrapper,4,https://psicode.org,https://github.com/psi4/psi4/pull/456,1,['wrap'],['wrapper']
Integrability,CCSD frequency-dependent first hyperpolarizabilities,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2043:15,depend,dependent,15,https://psicode.org,https://github.com/psi4/psi4/pull/2043,1,['depend'],['dependent']
Integrability,CPU and memory in MRCC interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3165:23,interface,interface,23,https://psicode.org,https://github.com/psi4/psi4/issues/3165,1,['interface'],['interface']
Integrability,"Carried forward from [forum topic](http://forum.psicode.org/t/computing-dipole-moment-from-ccsd-t/2252). After the `dfocc` re-sync, `dfocc` should be connected to properties. The hard electronic structure part of CCSD(T) dipoles is already done, so let's get the interface right. Do **NOT** start on this issue until after the re-sync.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2276:263,interface,interface,263,https://psicode.org,https://github.com/psi4/psi4/issues/2276,1,['interface'],['interface']
Integrability,"Carried forward from [forum](http://forum.psicode.org/t/fatal-error-wavefunction-unable-to-obtain-mo-coefficients/2204). Psi currently does not support getting properties with BSSE corrections. This should be a simple matter of taking the properties with each BSSE component and doing the same operation to them you do to get the energies. (Thank you, linearity of derivatives!) There are two parts to this:. 1. `properties` should know to do this. At present, it ignores any BSSE keywords.; 2. When a user passes a wfn computed from BSSE to `OEProp`, it should give the user a clear error message telling it that OEProp is not designed for multi-component property computations. At present, it returns that it can't find the orbitals. While this response is perfectly reasonable, it's opaque.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2196:590,message,message,590,https://psicode.org,https://github.com/psi4/psi4/issues/2196,1,['message'],['message']
Integrability,"Carried forward from [forums](http://forum.psicode.org/t/setting-dft-integration-grid-based-on-atom-identity/2609/2). Request that we be able to set the `DFT_SPHERICAL_POINTS` and `DFT_RADIAL_POINTS` keyword on a per-atom basis, as we do for basis sets or frozen core.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2732:69,integrat,integration-grid-based-on-atom-identity,69,https://psicode.org,https://github.com/psi4/psi4/issues/2732,1,['integrat'],['integration-grid-based-on-atom-identity']
Integrability,"Carried forward from [the forums](http://forum.psicode.org/t/a-roots-per-irrep-value-crashes-cc3/1826). The following input file. ```; molecule radical {; 0 2; O 0.0000000000 0.0000000000 0.1081705869; H 0.0000000000 0.0000000000 -0.8651605869; units angstrom; symmetry C1; }; set {; basis ""6-31+G(d)""; reference ""uhf""; freeze_core true; roots_per_irrep [3] ; }; energy('eom-cc3'); ```. gives the error `Parameter 3 was incorrect on entry to DGEBAL.` and then segfaults. Initial debugging attempts indicate that at the time [this line is executed](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/cceom/diag.cc#L555) `G[0][0] = NaN`, causing the subsequent matrix diagonalization to fail. Determining why `G[0][0] = NaN` will require expert attention. If there is some legitimate reason for the failure, a more helpful error message should be printed instead. The only one I can think of is if we were capturing only one state of a degenerate pair. But as the original poster remarked, setting `roots_per_irrep` to other numbers like 2 or 4 worked just fine, and when I set `roots_per_irrep` to 4, none of the roots had the same EOM energy. That seems to eliminate the ""degenerate pair"" hypothesis.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1931:834,message,message,834,https://psicode.org,https://github.com/psi4/psi4/issues/1931,1,['message'],['message']
Integrability,"Carrying forward from a [forum topic](http://forum.psicode.org/t/interface-with-mrcc/1748/6). I suspect that the latest MRCC is not compatible with Psi4. Alas, this is not something I can test easily myself, as it looks nontrivial to compile. A user reported that when trying to run `mrccsdt`, they get:; ```; Generating fort.55 integral file...done.; Generating fort.56 input file...done. *** tstop() called on Manjaro at Sun Apr 12 06:03:22 2020; Module time:; user time = 0.61 seconds = 0.01 minutes; system time = 0.11 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 3.99 seconds = 0.07 minutes; system time = 0.37 seconds = 0.01 minutes; total time = 1 seconds = 0.02 minutes. ===== Begin fort.56 input for MRCC ======; 3 1 0 0 1 0 0 1 0 1 1 1 0 0 0 6 0 0 0.00 0 48000; ex.lev,nsing,ntrip, rest,CC/CI, dens,conver, symm, diag, CS,spatial, HF,ndoub, nacto, nactv, tol,maxex, sacc, freq,dboc, mem; 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0; ===== End fort.56 input for MRCC ======; **********************************************************************; MRCC program system; **********************************************************************. Written by; Mihaly Kallay, Peter R. Nagy, David Mester, Zoltan Rolik, Gyula Samu,; Jozsef Csontos, Jozsef Csoka, P. Bernat Szabo, Laszlo Gyevi-Nagy,; Bence Hegely, Istvan Ladjanszki, Lorant Szegedy, Bence Ladoczki,; Klara Petrov, Mate Farkas, Pal D. Mezei, and Adam Ganyecz. Department of Physical Chemistry and Materials Science; Budapest University of Technology and Economics; Budapest P.O.Box 91, H-1521 Hungary. www.mrcc.hu. Release date: February 22, 2020. ************************ 2020-04-12 06:03:22 *************************; Executing minp... Reading input from MINP... Input file:. Checking keyword combinations... Basis set is not specified!. Fatal error in exec minp.; Program will stop. ************************ 2020-04-12 06:03:22 *************************; Error at the termination of mrcc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1866:65,interface,interface-with-mrcc,65,https://psicode.org,https://github.com/psi4/psi4/issues/1866,1,['interface'],['interface-with-mrcc']
Integrability,Changes to psi4 for MDT interface.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/772:24,interface,interface,24,https://psicode.org,https://github.com/psi4/psi4/pull/772,1,['interface'],['interface']
Integrability,CheMPS2 interface missing value for DMRG_SCF_ACTIVE_SPACE,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1242:8,interface,interface,8,https://psicode.org,https://github.com/psi4/psi4/issues/1242,1,['interface'],['interface']
Integrability,Check for working Fortran compiler: /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90; -- Checking whether /opt/intel/compilers_and_libraries_2017.0.098/linux/bin/intel64/ifort supports Fortran 90 -- yes; -- Fortran ENABLED; -- Detecting Fortran/C Interface; -- Detecting Fortran/C Interface - Found GLOBAL and MODULE mangling; -- Verifying Fortran/CXX Compiler Compatibility; -- Verifying Fortran/CXX Compiler Compatibility - Success; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- regex; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE; -- Found PythonInterp: /home/vayu/anaconda3/bin/python (found ve,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:6563,Interface,Interface,6563,https://psicode.org,https://github.com/psi4/psi4/issues/629,2,['Interface'],['Interface']
Integrability,"Commits prior to PR 65c0921213e6fe2979733f6c316915f79051f558 seem to have broken some tests that I suspect are not checked by our CI system:; ```; 	255 - ocepa-freq1 (Failed); 	259 - ocepa2 (Failed); 	260 - ocepa3 (Failed); 	273 - omp3-2 (Failed); 	278 - omp3-grad2 (Failed); 	320 - pywrap-checkrun-rhf (Failed); 	321 - pywrap-checkrun-rohf (Failed); 	322 - pywrap-checkrun-uhf (Failed); ```. The following are known to fail due to poor convergence of the occ module; ```; 	260 - ocepa3 (Failed); 	263 - omp2-3 (Failed); 	274 - omp3-3 (Failed); ```. The error message for `pywrap-checkrun-rhf` is also consistent with convergence issues:; ```; 45 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 3.01e-15; 46 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 1.73e-15; 47 -75.0144633211 -1.42e-14 1.85e-05 1.42e-04 9.95e-16; 48 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 5.65e-16; 49 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 3.27e-16; 50 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 1.88e-16; ======================== OCEPA IS NOT CONVERGED IN 50 ITERATIONS ============; Traceback (most recent call last):; File ""/Users/fevange/Source/psi4/objdir-Debug/stage/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 54, in <module>; File ""/Users/fevange/Source/psi4/objdir-Debug/stage/lib/psi4/driver/driver.py"", line 711, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/fevange/Source/psi4/objdir-Debug/stage/lib/psi4/driver/procrouting/proc.py"", line 752, in select_olccd_gradient; return func(name, **kwargs); File ""/Users/fevange/Source/psi4/objdir-Debug/stage/lib/psi4/driver/procrouting/proc.py"", line 2147, in run_occ_gradient; occ_wfn = core.occ(ref_wfn); RuntimeError:; Fatal Error: OCC iterations did not converge; Error occurred in file: /Users/fevange/Source/psi4/psi4/src/psi4/occ/occ_iterations.cc on line: 363; The most recent 5 function calls were:; Printing out the relevant lines from the Psithon --> Python processed input fil",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1793:560,message,message,560,https://psicode.org,https://github.com/psi4/psi4/issues/1793,1,['message'],['message']
Integrability,Compiling Psi4 I got this error:; .; .; .; [ 60%] Building CXX object src/lib/libchkpt/CMakeFiles/chkpt.dir/nao.cc.o; [ 60%] Building CXX object src/lib/libchkpt/CMakeFiles/chkpt.dir/am2canon_shell_order.cc.o; [ 60%] Linking CXX static library ../../../lib/libchkpt.a; [ 60%] Built target chkpt; Scanning dependencies of target cubeprop; [ 60%] Building CXX object src/lib/libcubeprop/CMakeFiles/cubeprop.dir/csg.cc.o; [ 60%] Building CXX object src/lib/libcubeprop/CMakeFiles/cubeprop.dir/cubeprop.cc.o; [ 60%] Linking CXX static library ../../../lib/libcubeprop.a; [ 60%] Built target cubeprop; Scanning dependencies of target git_update; fatal: Not a git repository (or any of the parent directories): .git; make[2]: **\* [src/lib/libpsipcm/CMakeFiles/git_update] Error 128; make[1]: **\* [src/lib/libpsipcm/CMakeFiles/git_update.dir/all] Error 2; make: **\* [all] Error 2. ---. The git and cmake version from macports is 2.5.3 and 3.3.3 respectively. I used the setup command:; ./setup --plugins --fc gfortran-mp-4.8 --accelerate objdir. I was wondering if you can provide me some input to solve the problem. Thank you.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/183:305,depend,dependencies,305,https://psicode.org,https://github.com/psi4/psi4/issues/183,2,['depend'],['dependencies']
Integrability,"Compiling psi4 on -O3 with icc 18.0.1 seems to trigger a crash in the compiler. The crash is not observed with the icc 17.0.2 with -O3, nor is it observed with icc 18.0.1 if I turn the optimization flag down to -O1. ```; /u/nyc/mcgibbon/gerrit/psi4-gerrit/psi4/src/psi4/dcft/dcft_gradient_UHF.cc(3903) (col. 72): internal error: 20000_6805. [ 85%] Building CXX object src/psi4/optking/CMakeFiles/optking.dir/opt_data_io.cc.o; compilation aborted for <prefix>/psi4/src/psi4/dcft/dcft_gradient_UHF.cc (code 4); make[5]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/dcft_gradient_UHF.cc.o] Error 4; make[4]: *** [src/psi4/dcft/CMakeFiles/dcft.dir/all] Error 2; make[4]: *** Waiting for unfinished jobs....; ```. With 18.0.1, I can fix the error by turning down the optimization flag for that file in particular by adding the following snippet to psi4/src/psi4/dcft/CMakeLists.txt:; ```; if (CMAKE_CXX_COMPILER_ID STREQUAL ""Intel"" AND; CMAKE_CXX_COMPILER_VERSION VERSION_LESS 18.1 AND; CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 18.0). message(WARNING ""Intel C++ (ICC) 18.0 fails to compile dcft_gradient_UHF.cc with aggressive optimization flags""); set_source_files_properties(dcft_gradient_UHF.cc PROPERTIES; COMPILE_FLAGS -O1); endif (); ```. Has anyone else tried using icc 18.0.1? Is there precedent for adding compiler- and file-specific flags in the CMakeLists? I'm not sure if this is suitable as a PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923:1032,message,message,1032,https://psicode.org,https://github.com/psi4/psi4/issues/923,1,['message'],['message']
Integrability,"Compute numerical and analytical gradients with **wB97X** functional:; ```python; import psi4. print(psi4.__version__). psi4.geometry('H -.5 0 0\nH .5 0 0'); psi4.gradient('wb97x/3-21g', dertype=0); psi4.gradient('wb97x/3-21g', dertype=1); ```. The numerical gradient works, but analytical one crashes:; ```; 1.2a1.dev681; gradient() will perform gradient computation by finite difference of analytic energies. ... skipped ... ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 2 x 3. 1 2 3. 1 -0.08957282148820 0.00000000000000 0.00000000000000; 2 0.08957282148820 0.00000000000000 0.00000000000000. Traceback (most recent call last):; File ""test.py"", line 7, in <module>; psi4.gradient('wb97x/3-21g', dertype=1); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in gradient; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 549, in <listcomp>; dertype = min([_find_derivative_type('gradient', method, user_dertype) for method in cbs_methods]); File ""/home/raimis/opt/miniconda3/envs/ani_test/lib/python3.6/site-packages/psi4/driver/driver.py"", line 103, in _find_derivative_type; % (method_name, str(dertype), alternatives)); psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. Also, the error message is self-contradicting:; ```; psi4.driver.p4util.exceptions.ValidationError: Derivative method 'name' wb97x and derivative level 'dertype' 1 are not available. Did you mean? b97 wb97 wb97x wb97x-v wb97x-d; ```. According to https://gitlab.com/libxc/libxc/wikis/Functionals-list-3.0.0, **libXC** supports **wB97X** and I don't see any notes that the analytical gradient is not implemented. So I guess, the problem is somewhere in **Psi4**.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867:1539,message,message,1539,https://psicode.org,https://github.com/psi4/psi4/issues/867,1,['message'],['message']
Integrability,"Configuring my psi4 I get the warning message. WARNING: Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case. Looks like the install command for the psi4so target should be within an if clause checking if it's built or not.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/415:38,message,message,38,https://psicode.org,https://github.com/psi4/psi4/issues/415,1,['message'],['message']
Integrability,"Consider the following input file:; ```; molecule = geometry(""""""; H; H 1 1.0 ; """"""). set basis sto-3g. wfn = energy('b3lyp', return_wfn=True)[1]; assert isinstance(wfn, core.RHF). c1_molecule = molecule.clone(); c1_molecule.reset_point_group('c1'); c1_molecule.fix_orientation(True); c1_molecule.fix_com(True); c1_molecule.update_geometry(); c1_basis = core.BasisSet.build(c1_molecule, ""ORBITAL"", core.get_global_option('BASIS'), quiet=True). new_wfn = wfn.c1_deep_copy(c1_basis); ```. The computation crashed with an error message about the functional being ""unpolarized for UV reference."" The problem is on [this line](https://github.com/psi4/psi4/blob/c57375a3f02b6b339e028516ea44c6911c2e9e22/psi4/src/psi4/libscf_solver/hf.cc#L271). The reference is RHF, not RKS, so the if-statement makes the wrong choice.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2335:524,message,message,524,https://psicode.org,https://github.com/psi4/psi4/issues/2335,1,['message'],['message']
Integrability,"Consider the following input file:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. set scf_type pk; set basis 6-31+G(d); set r_convergence 12. energy, wfn = energy('hf', return_wfn = True); NBOWriter(wfn).write('input.47'); ```. This is the NBO test case, except I have replaced the basis set with a Pople basis. When I run the produced input file through NBO, the result I get does not match QChem. The fault is with Psi. Just look at the unphysical energy gap in the d NAOs:; ```; 15 O 1 dxy Ryd( 3d) 0.00000 0.22545; 16 O 1 dxz Ryd( 3d) 0.00196 0.22862; 17 O 1 dyz Ryd( 3d) 0.00518 0.52493; 18 O 1 dx2y2 Ryd( 3d) 0.00125 2.36883; 19 O 1 dz2 Ryd( 3d) 0.00227 2.02191; ```. For comparison, QChem gives; ```; 15 O 1 dxy Ryd( 3d) 0.00000 2.02907; 16 O 1 dxz Ryd( 3d) 0.00518 2.71710; 17 O 1 dyz Ryd( 3d) 0.00196 2.05762; 18 O 1 dx2y2 Ryd( 3d) 0.00125 2.36883; 19 O 1 dz2 Ryd( 3d) 0.00227 2.02191; ```. I suspect the error has to do with Pople basis sets being defined in cartesians and not spherical. This is the only reason I can think of for agreement with QChem being basis-set dependent, and it also agrees nicely with the fact that ""Input basis functions are not normalized; fixed"" appears in the Psi-NBO output file. While I'll likely end up fixing this, this is very low on my priority list. If anybody else wants to take this, feel free. Just post here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1698:1083,depend,dependent,1083,https://psicode.org,https://github.com/psi4/psi4/issues/1698,1,['depend'],['dependent']
Integrability,Correct copy-paste error message,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1811:25,message,message,25,https://psicode.org,https://github.com/psi4/psi4/pull/1811,1,['message'],['message']
Integrability,"Currently the OCC/DFOCC page of the docs makes no mention of frozen core.; DFOCC seems to default to all-electron, but _does_ seem to run with `set freeze_core true`.; OCC throws a RuntimeError, and claims that ""Frozen core/virtual not implemented in Orbital-optimized methods"". I can see two issues here:. 1. The error message from OCC suggests that none of the orbital-optimized methods in Psi4 support FC. This is either wrong and misleading (if DFOCC really does support FC) or DFOCC should also throw the same error.; 2. Regardless of the answer to 1, [the relevant doc page](http://www.psicode.org/psi4manual/master/occ.html) ought to have a few words about FC support or the lack thereof.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863:320,message,message,320,https://psicode.org,https://github.com/psi4/psi4/issues/1863,1,['message'],['message']
Integrability,"Currently the `Molecule.xyz()` method does not check the length of the array that it is getting. ```; >>> import psi4; >>> mol = psi4.geometry(""He 0 0 0\nHe 0 0 5""); >>> mol.xyz(3); [1] 26521 segmentation fault python; ```. This should be capped and provide a nice error message to the user. This should be a straightforward fix, the relevant file is [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/molecule.cc).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1675:271,message,message,271,https://psicode.org,https://github.com/psi4/psi4/issues/1675,1,['message'],['message']
Integrability,"Currently the integrals required in polarizable embedding models (PE and EFP) don't exploit any parallelization.; This should be fixed (by me) once Libint2 is in, because for larger systems, the computations become really slow. Routines:; - `electric_field_value`; - `induction_operator`; - `ao_multipole_potential`. The last routine should also be tweaked to be called only once with all site positions.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2007:228,Rout,Routines,228,https://psicode.org,https://github.com/psi4/psi4/issues/2007,2,"['Rout', 'rout']","['Routines', 'routine']"
Integrability,"Currently, PCM settings can not be set via QCEngine using the schema interface, passing a task like this from QCEngine results in an error ; ```python; {'schema_name': 'qcschema_input',; 'schema_version': 1,; 'molecule': Molecule(name='H2O', formula='H2O', hash='941bd29'),; 'driver': 'energy',; 'model': {'method': 'SCF', 'basis': 'sto-3g'},; 'protocols': {'wavefunction': 'orbitals_and_eigenvalues'},; 'keywords': {'scf_type': 'df',; 'pcm_scf_type': 'total',; 'pcm': {'Units': 'Angstrom',; 'Medium': {'SolverType': 'IEFPCM', 'Solvent': 'Water'},; 'Cavity': {'RadiiSet': 'UFF',; 'Type': 'GePol',; 'Scaling': False,; 'Area': 0.3,; 'Mode': 'Implicit'}}}}; ```; as it tries to pass the dictionary of settings to the `core.set_global` function. . Extending the `set_options` function [here](https://github.com/psi4/psi4/blob/5de566ed7d4bf51816c673c4ea1def449e4e8618/psi4/driver/p4util/python_helpers.py#L423) to handle the `pcm` keyword should fix this issue. tagging @loriab following the slack discussion.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1986:69,interface,interface,69,https://psicode.org,https://github.com/psi4/psi4/issues/1986,2,"['interface', 'protocol']","['interface', 'protocols']"
Integrability,"Currently, Psi4 supports meta-GGAs that depend on the kinetic energy density. However, some meta-GGA functionals depend on the laplacian of the electron density in addition to or instead of the kinetic energy density. The missing pieces should be added so that also laplacian functionals could be used in Psi4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1734:40,depend,depend,40,https://psicode.org,https://github.com/psi4/psi4/issues/1734,2,['depend'],['depend']
Integrability,DCT and Linear Dependencies,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2231:15,Depend,Dependencies,15,https://psicode.org,https://github.com/psi4/psi4/issues/2231,1,['Depend'],['Dependencies']
Integrability,"DF-CC freaks out when linear dependencies are present, and i tracked the issue to an inconsistency between reference_wavefunction_->nmopi() and reference_wavefunction_->Ca()->coldim(). The latter has the correct value when linear dependencies are removed. . Should nmopi() and Ca()->coldim() be consistent in this case?. Minimal input:; ```; molecule { ; o ; h 1 1.0; h 1 1.0 2 104.5; }. set {; basis 'aug-cc-pvtz'; scf_type df; cc_type df; s_tolerance 1e-3; }; energy('ccsd'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2120:29,depend,dependencies,29,https://psicode.org,https://github.com/psi4/psi4/issues/2120,2,['depend'],['dependencies']
Integrability,DF-DCT with Linear Dependencies,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2233:19,Depend,Dependencies,19,https://psicode.org,https://github.com/psi4/psi4/pull/2233,1,['Depend'],['Dependencies']
Integrability,DFH: suppress DFH memory messages during SAD guess,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1104:25,message,messages,25,https://psicode.org,https://github.com/psi4/psi4/pull/1104,1,['message'],['messages']
Integrability,DFOCC's Final Energy Dependent on Whether User Energy Convergence Criteria Met,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509:21,Depend,Dependent,21,https://psicode.org,https://github.com/psi4/psi4/issues/1509,1,['Depend'],['Dependent']
Integrability,DFTD4 interface in Psi4,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1710:6,interface,interface,6,https://psicode.org,https://github.com/psi4/psi4/issues/1710,1,['interface'],['interface']
Integrability,DIIS and linear dependencies,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2217:16,depend,dependencies,16,https://psicode.org,https://github.com/psi4/psi4/issues/2217,1,['depend'],['dependencies']
Integrability,"Dear Psi4 Developers,. Is there any plan to add the newly DFTD4 interface in Psi4",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1710:64,interface,interface,64,https://psicode.org,https://github.com/psi4/psi4/issues/1710,1,['interface'],['interface']
Integrability,"Dear Psi4 developer, ; I'm using v1.4rc2. I find very convenient to use the QCSchema for submitting my `energy` calculations, but it is not clear to me what is currently implemented for this input method.; Using `{""basis"": ""aug-cc-pv[tq]z"", ""method"": ""MP2""}`, results in the error; ```; npsi4.driver.qcdb.exceptions.BasisSetNotFound: BasisSet::construct: ; Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['N']; Basis Sets: [('AUG-CC-PV[TQ]Z', 'AUG-CC-PV[TQ]Z', None)]; ```; which makes me think that CompeteBasisSet (CBS) extrapolations are not yet implemented.; My goal would be to submit even more advanced extrapolation protocols like `mp2/cc-pv[tq]z + D:ccsd(t)/cc-pvdz`.; Is there a way to do this with the current implementation of the QCSchema? Or do you see it possible in a near-future release?. Thank you very much for your help!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2198:651,protocol,protocols,651,https://psicode.org,https://github.com/psi4/psi4/issues/2198,1,['protocol'],['protocols']
Integrability,"Dear Psi4 developers,. I recently created a new conda env and found that a code that previously has been working gave me segmentation fault. I added break points in my code and found the errors came from ERI. The simplified version of the codes (I only extracted the minimal part to reproduce the error) is below:; ```; import sys; import numpy as np; import psi4. basisname = ""def2-tzvp""; auxbasis = ""def2-tzvp""; theory = ""scf"". psi4.set_memory('4 GB'); psi4.set_num_threads(1); psi4.core.set_output_file('output.dat', False). ang2bohr = 1.88973; bohr2ang = 1/ang2bohr. molstr = ""H -0.5187926292419434 7.475999355316162 -5.560068130493164\nH 0.8894014358520508 6.672944068908691 -4.7793121337890625\nO 0.4382983446121216 7.725281715393066 -4.912882328033447\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molstr). print(""Computing "" + theory + "" gradient...""); grad, wfn = psi4.gradient('{}/{}'.format(theory,basisname), return_wfn=True). orbital_basis = wfn.basisset(); aux_basis = psi4.core.BasisSet.build(mol, ""DF_BASIS_SCF"", """", ""JKFIT"", auxbasis); print(aux_basis.nbf()). zero_basis = psi4.core.BasisSet.zero_ao_basis_set(); mints = psi4.core.MintsHelper(orbital_basis). abQ = mints.ao_eri(orbital_basis, orbital_basis, aux_basis, zero_basis) # This line causes the error; ```. Previously I was using psi4=1.3.2+ecbda83 and psi4=1.4a2.dev723+fb499f4. The current version that gives me segmentation fault is psi4=1.5+e9f4d6d. The error is; ```; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source; libgdma.so 00007F9CA744F17B for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; libgdma.so 00007F9CA744ED5C for__signal_handl Unknown Unknown; libpthread-2.17.s 00007F9CC324B630 Unknown Unknown Unknown; ```. Could you let me know what may cause this error and what changes may be ascribed to it?. Best regards,; Chenru",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2542:1528,Rout,Routine,1528,https://psicode.org,https://github.com/psi4/psi4/issues/2542,1,['Rout'],['Routine']
Integrability,"Dear all,. I just made a clone of the psi4public. However, I got the error message ""Cannot find source file sapt_dft.cc"" when trying to compile psi4 (in a directory ""psi4public/build"") by either ""../configure.cmake"" or ""cmake .."". Is it a bug in psi4? Thank you. Cheers; Gao",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/55:75,message,message,75,https://psicode.org,https://github.com/psi4/psi4/issues/55,1,['message'],['message']
Integrability,Dipole polarizabilities error when linear dependencies are removed,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1998:42,depend,dependencies,42,https://psicode.org,https://github.com/psi4/psi4/issues/1998,1,['depend'],['dependencies']
Integrability,"Discovered while remedying test cases where reference numbers needed to be changed due to my upcoming #1143 fix. DFOCC gradients are not symmetrized. If you'd like an example, just look in the [reference output files](https://github.com/psi4/psi4/blob/master/tests/dfomp3-grad2/output.ref#L603-L604)! Symmetry of the overlap gradient is broken in the seventh decimal place. The other terms have some errors, but much smaller. That the overlap gradient is most afflicted is unsurprising, since the overlap integrals are contracted against one of the many ""generalized Fock matrices"". This one depends on the 1RDM and 2RDM, which are not currently symmetrized. I'm hoping to include this in 1.3 with the #1143 fix, since this bug could lead to optimizations failing, as we saw with DFMP2 two weeks ago (#1483). Because individual terms are printed, the individual terms need to be symmetrized, and it may take me some time to find where the `symmetrize` calls need to be placed. If it takes too long, I'm fine with delaying to 1.4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1504:519,contract,contracted,519,https://psicode.org,https://github.com/psi4/psi4/issues/1504,2,"['contract', 'depend']","['contracted', 'depends']"
Integrability,"Discovered yet again when trying to reproduce an issue reported on the forums. When I defined a custom basis set but forgot to include the final quadruple asterisk, the error message appeared when I attempted the scf and did not leave me any clues about what was wrong in the basis set. Such errors should be caught in the basis set input phase, where a usual error message can be printed. It would be useful to try a few other basis inputs that break the parser and verify that a useful error message is printed in the parsing phase.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1332:175,message,message,175,https://psicode.org,https://github.com/psi4/psi4/issues/1332,3,['message'],['message']
Integrability,Docs Update: NumPy Interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2087:19,Interface,Interface,19,https://psicode.org,https://github.com/psi4/psi4/issues/2087,1,['Interface'],['Interface']
Integrability,"During debugging of the failing (on Windows) test in #1235, I have noticed the following:; ```; (psi4-dev-cbs_dict) kraus@dream:~/psi4/tests/cbs-xtpl-freq::psi4 -n 1 -i in.dat -o n1.out; 	Nuclear repulsion energy..........................................PASSED; 6 displacements needed.; 1 2 3 4 5 6; 	SCF/cc-pVDZ Frequency 1...........................................PASSED; 	SCF/cc-pVDZ Frequency 2...........................................PASSED; 	SCF/cc-pVDZ Frequency 3...........................................PASSED; (psi4-dev-cbs_dict) kraus@dream:~/psi4/tests/cbs-xtpl-freq::psi4 -n 4 -i in.dat -o n4.out; 	Nuclear repulsion energy..........................................PASSED; 9 displacements needed.; 1 2 3 4 5 6 7 8 9; Warning: used thermodynamics relations inappropriate for low-frequency modes: ['476.8559' '479.2930' '484.2715']; 	SCF/cc-pVDZ Frequency 1: computed value (1809.246) does not match (476.856) to 2 digits.; Traceback (most recent call last):; File ""/home/kraus/Applications/psi4-cbs_dict/bin/psi4"", line 271, in <module>; exec(content); File ""<string>"", line 34, in <module>; File ""/home/kraus/Applications/psi4-cbs_dict/lib/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	SCF/cc-pVDZ Frequency 1: computed value (1809.246) does not match (476.856) to 2 digits.; ```; The in.dat, n1.out and n2.out files are attached.; [in.txt](https://github.com/psi4/psi4/files/2488549/in.txt); [n1.txt](https://github.com/psi4/psi4/files/2488550/n1.txt); [n4.txt](https://github.com/psi4/psi4/files/2488551/n4.txt). The number of SALC's in the parallel version (see line 362) is wrong: it should be 3, it is 6. @JonathonMisiewicz , ideas?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1295:1242,message,message,1242,https://psicode.org,https://github.com/psi4/psi4/issues/1295,1,['message'],['message']
Integrability,"Either apply changes from evaleev/libint v1 to psi4/libint _or_ make psi4/libint a buildsystem wrapper around evaleev/libint v1 like https://github.com/python-cmake-buildsystem/python-cmake-buildsystem . Net effect is the Libint we call must be LGPL-3.0, not GPL-2.0+ as at present.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/693:95,wrap,wrapper,95,https://psicode.org,https://github.com/psi4/psi4/issues/693,1,['wrap'],['wrapper']
Integrability,Enable interoperability via The MolSSI Driver Interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676:7,interoperab,interoperability,7,https://psicode.org,https://github.com/psi4/psi4/pull/1676,2,"['Interface', 'interoperab']","['Interface', 'interoperability']"
Integrability,Error Extraction Mangles Message,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1920:25,Message,Message,25,https://psicode.org,https://github.com/psi4/psi4/issues/1920,1,['Message'],['Message']
Integrability,"Explanation:; When attempting to run gradients with CC2 or CC3 using density fitting (but not CCD, CCSD, or CCSD(T), the computation fails when attempting to initialize a new DPD instance, as the old one was not properly freed. When testing with BCCD, it failed due to the DF_BASIS_CC not being automatically set (and it didn't seem to accept my attempts to set it). Version: 1.4rc1; Installation source: conda install psi4 -c psi4/label/dev. Error message; ```; Traceback (most recent call last):; File ""/Users/jvandezande/progs/Anaconda3/envs/cc/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 24, in <module>; File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver.py"", line 675, in gradient; return driver_cbs._cbs_gufunc(gradient, name, ptype='gradient', **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver_cbs.py"", line 1960, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/driver.py"", line 716, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jvandezande/progs/Anaconda3/envs/cc/lib//python3.7/site-packages/psi4/driver/procrouting/proc.py"", line 2731, in run_ccenergy_gradient; grad = derivobj.compute(). RuntimeError:; Fatal Error: Attempting to initialize new DPD instance before the old one was freed.; Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1615423313523/work/psi4/src/psi4/libdpd/init.cc on line: 68; The most recent 5 function calls were:; ```. Minimal example; ```; molecule {; H; H 1 1; }. set cc_type df. gradient('CC2/cc-pVDZ'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2136:449,message,message,449,https://psicode.org,https://github.com/psi4/psi4/issues/2136,1,['message'],['message']
Integrability,Extend ddx interface by support for dd-LPB,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2918:11,interface,interface,11,https://psicode.org,https://github.com/psi4/psi4/pull/2918,1,['interface'],['interface']
Integrability,Fix GEMM errors in presence of linear dependencies,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2232:38,depend,dependencies,38,https://psicode.org,https://github.com/psi4/psi4/pull/2232,1,['depend'],['dependencies']
Integrability,Fix a file deleting in JSON wrapper,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1180:28,wrap,wrapper,28,https://psicode.org,https://github.com/psi4/psi4/pull/1180,1,['wrap'],['wrapper']
Integrability,Fix bug in lpb fock routine and update tests,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2963:20,rout,routine,20,https://psicode.org,https://github.com/psi4/psi4/pull/2963,1,['rout'],['routine']
Integrability,Fix memory leak of all DFT integration coordinates,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2352:27,integrat,integration,27,https://psicode.org,https://github.com/psi4/psi4/pull/2352,1,['integrat'],['integration']
Integrability,Fix possible unsigned subtraction wrap around.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/739:34,wrap,wrap,34,https://psicode.org,https://github.com/psi4/psi4/pull/739,1,['wrap'],['wrap']
Integrability,Fixing thread synchronization in AIOHandler.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/609:14,synchroniz,synchronization,14,https://psicode.org,https://github.com/psi4/psi4/pull/609,1,['synchroniz'],['synchronization']
Integrability,"Follows from discussion in https://github.com/psi4/psi4public/issues/103 and a bit in https://github.com/psi4/psi4private/issues/101. We'd like reference `rhf`, `rohf`, etc. to behave exactly as they do at present, that is cry foul if inappropriate for active molecule or unavailable for the method at hand. But we'd like a new value `auto` for `reference` keyword that is the default and switches between rhf and uhf>rohf as appropriate, depending solely on the molecule. . Exactly how to this this is up for discussion. It's most appropriately done at activate-molecule-time, but don't have the machinery to track and undo that setting in the activalte molecule code. Maybe a generic function that's called in each run_\* in proc.py with inputs of the most restrictive reference setting among the called modules (e.g., rhf/rohf for run_detci that traverses scf _and_ detci modules). Then the generic function sets the reference to something legit (e.g., `rhf`) for the scope of the energy/grad/etc call. And the optstash object in each of the proc.py routines can be used to undo the driver-level reference setting and return to the user or default setting.; - [ ] implement above. break this into smaller bullets as needed.; - [ ] also, warn in output that reference changing",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/118:439,depend,depending,439,https://psicode.org,https://github.com/psi4/psi4/issues/118,2,"['depend', 'rout']","['depending', 'routines']"
Integrability,"For historical reasons, Mk-MRCC was only implemented in Psi4 assuming small active spaces, and `psimrcc` rightly gives you [two](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/psimrcc/main.cc#L114-L124) [warnings](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/psimrcc/main.cc#L130-L143) that the equations it is using are not the exact Mk-MRCC equations if your active space is any larger. If you use Mk-MRPT2, the first warning fires, but the second does not. Further, the error message is specific to Mk-MRCC and says nothing about Mk-MRPT2. Is the Mk-MRPT2 procedure implemented in `psimrcc` exact or approximate? If it's exact, we need to stop the first warning from firing for Mk-MRPT2. If it's approximate, we need to make sure the second warning does fire for Mk-MRPT2. I checked the original paper, but couldn't find a clear statement either way, and I'd rather not learn Mk-MRCC theory just to fix this error message. I'm going to get back to giving `psimrcc` a wavefunction, so I'll fix this as part of that PR. I need to touch this part of the logic anyways. @fevangelista? @andysim?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1877:497,message,message,497,https://psicode.org,https://github.com/psi4/psi4/issues/1877,2,['message'],['message']
Integrability,"From discussion today, the following tasks to wrap up https://github.com/psi4/psi4public/issues/103; - [x] In driver.py, delete reference-bearing methods from procedures table (multiple places). Delete table:energy_scf rst table and its analogies. Salvage 'hf' from them and move it into the main rst table.; - [x] In proc.py, remove much of parse_scf_cases, maybe drop that fn and move it back into the run_scf\* as it was early this year.; - [x] Inspect test cases for removed functionality and adapt them. Check that the uhf that originally prompted this post is still working. Check that every energy/gradient rhf/uhf/rohf/cuhf/etc scf/hf/b3lyp does something sensible or exits gracefully.; - [x] Check the docs to see if they reference this functionality and adapt them.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/117:46,wrap,wrap,46,https://psicode.org,https://github.com/psi4/psi4/issues/117,1,['wrap'],['wrap']
Integrability,"Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient; - New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - ECP SCF energies.; - ECP gradients by finite differences in Python.; - DFT is now has several hundred tests against Psi4 and other implementations; - Shared pointers were rewritten to use `std::make_shared`. (#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. # Documentation; - Additional Documentation Information (#787). # Miscelaneous; - Added N to ANO0 basis set (#825). # Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:5350,rout,routine,5350,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['rout'],['routine']
Integrability,"Further to our discussion at Slack and e-mail, I made some tests on molecules with ECP's. Please see the attached G09 and psi4 input and log files. To obtain the psi4 results, the g- and h- shell coefficient of 0.000 in the Xe/Hg ECP has been replaced with 1D-10. A simple trapping of `tsum==0` in `erd_normalize_shell()` in `libmintsgshell.py` doesn't work properly - the term has to be sanity-checked in the loop before on lines 241-252. . For Hg, the `libmintsbasissetparser.py` had to be extended at line 202 to include the H-shell (thanks, Jesse). ![image](https://user-images.githubusercontent.com/5336995/36932575-1957f002-1ecb-11e8-84dc-b365f16b84b3.png). As can be seen from the table above, the absolute energies of the dimers are fine when compared to G09. The `nocp` interaction energy is also OK, however when CP-correction is involved, the results are not good - I imagine the ECP doesn't get properly ghosted. Finally, the psi4 calculations crash as `libmintsbasisset.py` is not able to find the basis sets for some reason - perhaps the basis set file is not passed into the routine properly? This also occurs when the basis set is defined in the job file using `basis { ... }`. [ECP-test.zip](https://github.com/psi4/psi4/files/1777311/ECP-test.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/926:1090,rout,routine,1090,https://psicode.org,https://github.com/psi4/psi4/issues/926,1,['rout'],['routine']
Integrability,GeomeTRIC Interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813:10,Interface,Interface,10,https://psicode.org,https://github.com/psi4/psi4/pull/1813,1,['Interface'],['Interface']
Integrability,"Given recent experience with #2192 and #2193, it would be good to include a threaded run of quicktests as part of the automatically running test suite. Unfortunately, it's not clear to me if this is _possible_. According to Holger, ""Azure offers only paid parallel jobs by default, but one can request a free upgrade. GHA gives 2-core machines but not sure if one can run things in parallel."" If not possible, we should come up with a protocol for making sure parallel test suite is checked semi-regularly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2220:435,protocol,protocol,435,https://psicode.org,https://github.com/psi4/psi4/issues/2220,1,['protocol'],['protocol']
Integrability,"Greeting friends,; As you may have heard we are in the process of several fundamental Psi4 change. These include: rewriting the build system, removing Boost from Psi4, the ""inversion"", and a history rewrite. Read below for summaries of each step and where to find more detailed information. If you have any questions please ask them here or email us directly.; ## Steps. **Build system:**; The build system has moved to a ""super build"" strategy which reduces total compilation time and makes it much easier to add additional external libraries in the future. Developers will also see a reduction in the amount of time it takes to compile internal Psi4 changes and Psi4 can now link all external dependancies (libint for examples). Note that much of the github wiki on building psi4 is now plain wrong. Consult the top-level CMakeLists.txt to get building again. See [here](https://github.com/psi4/psi4/pull/442) for more information. . **Boost:**; Much of the Boost functionality that we have depended on in Psi4 has been implemented in C++11. In order to keep Psi4 up to date with best C++11 practices, reduce complexity, and generally remove several headaches, Boost has been removed from Psi4. The C++ Python bindings have been moved to PyBind11. See [here](https://github.com/psi4/psi4/issues/450) for more information. **Inversion:**; Currently the hybrid Python/C++ architecture of Psi4 is in an odd spot where Psi4 itself is a C++ program that calls an input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:695,depend,dependancies,695,https://psicode.org,https://github.com/psi4/psi4/issues/468,2,['depend'],"['dependancies', 'depended']"
Integrability,"Greetings friends,; As per the developer wish list ( #402) it was decided that boost should be removed from Psi4 as there is little point in keeping it around when all the needed features are in C++11. When removing boost we gain:; - Fewer dependencies; - More canonical operations through C++ standards; - Simpler and more expressive python bindings; - Fewer python lib issues (in theory); - You will no longer get six pages of error messages when boost templates fail in some way; - Build simplification and faster compiler time; - Fewer compiler warning (lots from boost); - Less CI hassle; - There will be a party with cake and burning of a boost effigy (streamed and tweeted); ## . My primary goal is to tackle boost python and convert all existing code to PyBind11. Through this I will tackle the following boost libraries: python, tuple, lexical, shared_ptr, and math. I have a reasonable plan to accomplish this and initial tests show that I should be able to pull it off.; ## . However, there are other libraries that I could use help converting either in the form ideas or some of the grunt work. These are:. Boost filesystem:; - [x] `bin/fisapt/fisapt.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/create_new_plugin.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/create_new_plugin.cc:#include <boost/filesystem/operations.hpp>`; - [x] `bin/psi4/export_plugins.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/psi_start.cc:#include <boost/filesystem.hpp>`; - [x] `bin/psi4/python.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libcubeprop/csg.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libcubeprop/cubeprop.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libefp_solver/efp_solver.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libmints/basisset.cc:#include <boost/filesystem.hpp>`; - [x] `lib/libplugin/load_plugin.cc:#include <boost/filesystem.hpp>`. For most of these we would likely let Python handle the filesystem paths and just pass them into C-side as a `std::",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/450:240,depend,dependencies,240,https://psicode.org,https://github.com/psi4/psi4/issues/450,2,"['depend', 'message']","['dependencies', 'messages']"
Integrability,"Hello, . When building psi4 from source and python development packages are not installed compilation fails (Linux Fedora). Once I installed python-dev all complete successfully.; The complaint from source files was along the lines. #include<Pyhon.h> not found and then aborts during compilation,. Ideally (IMO) cmake should check during the configuration phase if all relevant and required package are installed and abort if not. Perhaps there are more dependencies, but I may already have had them already installed. . I no longer have the build machine to replicate all the steps, but I suspect amending the root cmake adding find_package with python-dev as REQUIRED (or perhaps via pkg_config) ; and abort immediately during the cmake configuration phase if not found, not halfway through the compilation when running make. Perhaps this will also help. https://cmake.org/cmake/help/latest/module/FindPython.html. Cheers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2060:454,depend,dependencies,454,https://psicode.org,https://github.com/psi4/psi4/issues/2060,1,['depend'],['dependencies']
Integrability,"Hello,. Currently, there is the feature:; ```; set optking {; frozen_dihedral = (""; 1 2 3 4; ""); }; ```. Since one might start from a very reasonable conformer, there are some use cases; where you want to optimize the geometry, but keep the dihedral angles (from rotatable bonds); as close as possible to their initial values. The current interface makes it quite painful to setup this for one molecule.; And I need to do this for many molecules... Regards,; F.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3170:339,interface,interface,339,https://psicode.org,https://github.com/psi4/psi4/issues/3170,1,['interface'],['interface']
Integrability,"Hello,. I am new to PSI4 and am interested in enabling BrianQC with PSI4 with a license. The manual ([Interface to the BrianQC GPU module by the BrianQC team 2](https://psicode.org/psi4manual/master/brianqc.html)) states that it is necessary to compile PSI4 to enable BrianQC. However, I found a forum post ([PSI4 with BrianQC add-on 2](https://forum.psicode.org/t/psi4-with-brianqc-add-on/2124)) that implies that it is not necessary. Could I please get clarification on what currently needs to be done to enable BrianQC?. I am not extremely tech savvy and as such, I appreciate any help. I am using a Windows 11 PC. Thank you",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3132:102,Interface,Interface,102,https://psicode.org,https://github.com/psi4/psi4/issues/3132,1,['Interface'],['Interface']
Integrability,"Hello,. I realize that there is a warning about PCM failing with symmetry point groups however, it would be nice to add like a 1-3 line error message that would go a long way to helping out any user that has not read all of the docs very carefully.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1939:142,message,message,142,https://psicode.org,https://github.com/psi4/psi4/issues/1939,1,['message'],['message']
Integrability,"Hello,. It seems that there may be a problem with the normalization of the contraction coefficients in the molden wavefunction format for d functions (and higher). An example computation on an test molecule (NH3) where exactly the same basis sets were given to ORCA and PSI4 can be downloaded here:. https://dl.dropboxusercontent.com/u/4871688/moldenbug.tar.bz2. The molden files are almost the same, except for the contraction coefficients of the D functions. Is there an authoritative source that can tell us what the correct normalization of the contraction coefficients in the molden file should be? Having different variants of the same format is a pain in terms of post-processing.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/60:75,contract,contraction,75,https://psicode.org,https://github.com/psi4/psi4/issues/60,3,['contract'],['contraction']
Integrability,"Hello,. You should be able to bump up the version of chemps2 used in psi4 to 1.6 without any other modifications. It contains many performance improvements. In 1.7 (not released yet) there will be API changes. So the dmrgscf/dmrgci routine will need to be adapted simultaneously with the version tag. And it will also contain DMRG-CASPT2!. Best wishes,; Sebastian",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/263:232,rout,routine,232,https://psicode.org,https://github.com/psi4/psi4/issues/263,1,['rout'],['routine']
Integrability,"Hello,; One of our users hit a problem last year on our supercomputer with his SAPT (energy('sapt2+3-ct')) jobs. Our sysadmins flagged low cpu utilisation for his jobs for which we decided that 4 cpus would give him optimum efficiency. However, the jobs were large enough as to take > 1000 hours (also frowned upon by our sysadmins) so I was asked to look into whether he could make better parallel use of the processors. We had some teething problems bringing our new supercomputer on line last year so I wanted to rule out issues on our side and I think I have now ruled out issues with IO, memory and threading (that had affected other programs).; Furthermore, during the investigations we noticed that ""top"" showed an almost equal alternation between one cpu and maximum cpus thus averaging above/below 50% use no matter how many cpus were requested. Roger Amos and I had a quick look at the SAPT papers and decided there wasn't anything intrinsic about the method that wouldn't allow it to parallel or would cause this behaviour (note I initially thought it might be a load imbalance between monomer basis and dimer basis calculations but it isn't). Also, subsequently we were asked to look into the performance of energy('fno-df-ccsd(t)') and that doesn't show this serial/parallel alternation.; Do you have any thoughts on this and have suggestions for determining optimum number of processors (does it depend on memory?) for this sort of calculation?; Thanks.; Rika; PS Do you need an input deck for this? Originally, the smallest case he had showing this behaviour took 230 hrs (seemed to be ok for his 60 hr SAPT job) but since then I think I have a 48 hr test case that will also display this behaviour. I'll need to ask the user for permission to pass it on first though.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/57:1410,depend,depend,1410,https://psicode.org,https://github.com/psi4/psi4/issues/57,1,['depend'],['depend']
Integrability,"Hi All,. Trying to build from source here but I get the following errors:. ```; [ 11%] Building CXX object src/psi4/psimrcc/CMakeFiles/psimrcc.dir/transform_read_so.cc.o; [ 12%] Building CXX object src/psi4/psimrcc/CMakeFiles/psimrcc.dir/updater.cc.o; [ 12%] Building CXX object src/psi4/psimrcc/CMakeFiles/psimrcc.dir/updater_bw.cc.o; [ 12%] Building CXX object src/psi4/psimrcc/CMakeFiles/psimrcc.dir/updater_mk.cc.o; [ 12%] Linking CXX static library libpsimrcc.a; [ 12%] Built target psimrcc; [ 12%] Building CXX object src/psi4/sapt/CMakeFiles/sapt.dir/wrapper.cc.o; [ 12%] Linking CXX static library libsapt.a; [ 12%] Built target sapt; Consolidate compiler generated dependencies of target scf_solver; [ 13%] Built target scf_solver; Consolidate compiler generated dependencies of target scfgrad; [ 13%] Built target scfgrad; Consolidate compiler generated dependencies of target l2export; [ 13%] Built target l2export; Consolidate compiler generated dependencies of target 3index; [ 13%] Built target 3index; Consolidate compiler generated dependencies of target ciomr; [ 15%] Built target ciomr; Consolidate compiler generated dependencies of target cubeprop; [ 16%] Built target cubeprop; Consolidate compiler generated dependencies of target disp; [ 16%] Built target disp; Consolidate compiler generated dependencies of target dpd; [ 25%] Built target dpd; Consolidate compiler generated dependencies of target filesystem; [ 25%] Built target filesystem; Consolidate compiler generated dependencies of target fock; [ 25%] Building CXX object src/psi4/libfock/CMakeFiles/fock.dir/DiskDFJK.cc.o; /Users/gwood/work/scripts/psi4_source/src/psi4/src/psi4/libfock/DiskDFJK.cc:68:17: error: no viable overloaded operator[] for type 'psi::Options'; if (options_[""SCF_SUBTYPE""].has_changed()) set_subalgo(options_.get_str(""SCF_SUBTYPE""));; ~~~~~~~~^~~~~~~~~~~~~~; /Users/gwood/work/scripts/psi4_source/src/psi4/src/psi4/libfock/DiskDFJK.cc:68:68: error: member access into incomplete type 'psi::Opt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3006:558,wrap,wrapper,558,https://psicode.org,https://github.com/psi4/psi4/issues/3006,1,['wrap'],['wrapper']
Integrability,"Hi Psi4 developers,. I'd like to open discussion on making Psi4 packages on `conda-forge`. We at OpenFF have some projects that make heavy use of Psi4 and that we'd like to roll out to production alongside a pretty length list of other packages. Unfortunately, one or of our other dependencies is a somewhat monolithic and tangled web of FORTRAN and legacy code that regularly produces conflicts on macOS and sometimes causes deployment issues on Linux. (Others may have more comments on other deployment issues). We've been able to [resolve this](https://github.com/psi4/psi4/issues/2024) in the past, and we've also filled up the packaging channel on Slack on more than a few occasions. However, it may be more sustainable in the long run (for us and presumably other users) if we can get conda packaging for the Psi4 stack moved over to `conda-forge` - something we'd be happy to take a role in. * **Would this be useful for Psi4 developers and/or users?** I have personally had good experiences with migrations, both as a developer/maintainer and user. Getting everything on one channel (and using `conda-forge`'s existing automation) should help with dependency resolution/compatibility and in principle should also make build processes smoother. It would unblock some production issues with our software and be generally valuable for us - but we absolutely don't want to make life harder on for Psi4 developers/maintainers.; * **What technical blockers exist?** In the past we have gotten over some large hurdles (migrating OpenMM included contributing a recipe for CUDA toolkits) and more tedious blockers (migrating the OpenFF stack involved contributing something like 10-20 separate packages, piece by piece). `conda-forge` has [some tooling](https://conda-forge.org/docs/maintainer/knowledge_base.html#using-cmake) built around CMake, including MKL and some number of compilers. (Sorry - I'm not really an expert in packaging compiled code so I can't say much more about this - others may c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300:281,depend,dependencies,281,https://psicode.org,https://github.com/psi4/psi4/issues/2300,1,['depend'],['dependencies']
Integrability,"Hi all,. As part of a large benchmarking study, I've been computing the interaction energies of various hexamine dimers. With PBEh-3c, I've gotten some suspiciously large errors relative to CCSD(T)/CBS. I have used 590, 99 (spherical,radial) points, and I've also compared the energies to Orca (using defgrid3... after recommendations from issue #2304). Psi4 and Orca differ by as many as .3-.4 kJ/mol, depending on the dimer, which is a large percent error. One test case is summarized below:. | Program | Monomer A (H) | Monomer B (H) | Dimer AB (H)| $E_{int}$ (kcal/mol)| ; |---------|-------------|-------------|-----------|-----------|; | Psi4 | -453.84229689692728 | -453.84229689783353 | -907.68447385499462 | 0.075263339533 |; |Orca | -453.842841688023 | -453.842841698644 | -907.685688152560 | -0.002990642998 |. | Program | $E_{int}$ (kJ/mol)| Notes|; |---------|-------------| ----|; | Psi4 | 0.31490181 | |; |Orca | -0.01251285 | |; | Benchmark | -0.00315431 | Focal Point CCSD(T)/CBS with Psi4 |. I have noticed this warning in all of my Psi4 hexamine/PBEh-3c files:; `Warning: Molecule has a spherically-symmetric moment of charge but lacks icosahedral, octahedral, and tetrahedral symmetry.` . CDS figures this has something to do with the grid placement. Any ideas of how to alleviate this warning while keeping the same geometries and/or what the energy difference could be attributed to? I've tried different basis sets, different number of grid points, `symmetry c1`, `molecule.symmetrize(1e-3)`, no pruning scheme (rather than `robust`). The only time I have been able to get the warning to go away is when I use `bsse_type='cp'`, but I really shouldn't be running the calculation with cp correction because that is already included in the PBEh-3c calculation. Output files for the above example are attached, as well as a graph of Psi4 and Orca interaction energies for all dimers tested. . [Psi4-214-int.txt](https://github.com/psi4/psi4/files/9200713/Psi4-214-int.txt); [Orca-21",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2647:403,depend,depending,403,https://psicode.org,https://github.com/psi4/psi4/issues/2647,1,['depend'],['depending']
Integrability,"Hi all,. I am trying Psi4 4.0.0-beta4 today, but encountered a problem when parsing input and fetching corresponding basis set info. Here is a sample input file,; # =======================; # ! sample input. memory 500 mb. molecule test {; Li 0.000 0.000 0.000; }. set reference uhf; set globals = {; scf_type direct; basis 6-31G; e_convergence 10; }. this_energy = energy('scf'); # =======================. running with Psi 4.0.0-beta4 on Linux, compiled with intel composer xe 2013 (x86-64). The error message is: ; # =======================. Traceback (most recent call last):; File ""<string>"", line 36, in <module>; File ""/home/ren/soft/Psi4/share/psi/python/driver.py"", line 526, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 489, in run_scf; scf_helper(name, **kwargs); File ""/home/ren/soft/Psi4/share/psi/python/proc.py"", line 707, in scf_helper; e_scf = PsiMod.scf(precallback, postcallback); RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for LI; file: /home/ren/soft/psi4.0b4/src/lib/libmints/basisset_parser.cc; line: 339; # =======================. Is it a but or am I wrong anywhere?; I appreciate any help and suggestions,; Hao",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/7:504,message,message,504,https://psicode.org,https://github.com/psi4/psi4/issues/7,1,['message'],['message']
Integrability,"Hi all,. I have installed psi4-1.3 in Win10/WSL-Ubuntu18.04 successfully, and when run 'psi4 --test', only _dftd3_ and _grimme_3c_ failed. I have found that psi4-v1.3 integrated dftd3 shown error when run ""dftd3""under WSl:. **_Segmentation fault (core dumped)_**. Then I rebuild _dftd3_ under WSL and use the newly build _dftd3_, then the 'psi4 --test' show all pass. So, this is just a build-bug report.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1587:167,integrat,integrated,167,https://psicode.org,https://github.com/psi4/psi4/issues/1587,1,['integrat'],['integrated']
Integrability,"Hi all,. I was using the MRCC interface to compute the CCSDT energy of a trimer at the quadruplet spin state. Psi4 seems to initiate the computation correctly, but the MRCC computation stops after printing; `Calculation of MP denominators...`; without performing the CC iterations, but still printing `Normal termination of mrcc.` ; I tried the water example provided in the MRCC interface manual:; `molecule h2o {; O; H 1 1.0; H 1 1.0 2 104.5; }; set {; basis cc-pVDZ; }; energy('mrccsdt')`; It works fine as is, it also works fine if I change the multiplicity to `0 3` with `reference uhf` but not if I change it to `1 4` with `reference uhf`. It then fails at the same point than my original trimer computation. I notice that the output file of the successful triplet computation prints `Spin multiplicity: 3` twice whereas this line is missing in the failing quadruplet computations (see attached files).; [test.out.txt](https://github.com/psi4/psi4/files/1713187/test.out.txt); [test_quad.out.txt](https://github.com/psi4/psi4/files/1713188/test_quad.out.txt). Running the quadruplet directly through MRCC using their input file works fine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/915:30,interface,interface,30,https://psicode.org,https://github.com/psi4/psi4/issues/915,2,['interface'],['interface']
Integrability,"Hi everyone,. When I run the following input I get different energies depending on the diag_method. While RSP gives the correct zeroth root of H0 as the ground state energy, the default one gives the first root energy as the ground state energy. With RSP Total CI energy = -149.601664883615285; with the default one Total CI energy = -149.577513236489096. İnput:; ```; molecule {; 0 1; O; O 1 1.2156; symmetry c1; }. set {; basis 6-311++G(d); reference rohf; frozen_docc [7]; frozen_uocc [35]; diag_method rsp; }; energy('detci'); ```; @dgasmith @CDSherrill",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1281:70,depend,depending,70,https://psicode.org,https://github.com/psi4/psi4/issues/1281,1,['depend'],['depending']
Integrability,"Hi psi4 experts. psi4 shows promising functions and I am trying to install psi4 on my Ubuntu 20 with the command. `conda create -n p4env python=x.x psi4 -c psi4/label/dev`. But I got error messages:; ```. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; psi4 -> libxc[version='>=5.1.5,<6.0a0'] -> python[version='3.4.*|>=3.10,<3.11.0a0|>=3.6|>=3.5|>=3.7|>=3.6.0|>=3.6,<3.7|>=3.4']; python=3.9The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability.; ```. I am new to psi4 and I hope someone can help me to solve this problem. Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390:189,message,messages,189,https://psicode.org,https://github.com/psi4/psi4/issues/2390,1,['message'],['messages']
Integrability,"Hi!; I am new to QM calculation, and I found your software really helpful! Your works are absolutely amazing!; These days I am trying to do LMO analysis and get centers for each orbitals. I am using Boys localizer and I get an matrix L. I was told that centers are given by <LMO_i|r|LMO_i>, where LMO_i is the i th LMO, and r is the eletron position operator. I wonder how should I calculate this integration? Thanks a lot!; Look forward to hearing from you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3015:397,integrat,integration,397,https://psicode.org,https://github.com/psi4/psi4/issues/3015,1,['integrat'],['integration']
Integrability,"Hi, I noticed some odd ghosting behavior when doing interaction energy calculations on molecules containing Iodine. . When manually doing the counterpoise correction for a non-I-containing molecule, Psi4 reads the ghosted atoms properly and computes a sensible interaction energy (see `correctly-ghosted.txt`). However, when manually doing the counterpoise correction for an I-containing molecule, Psi4 does not ghost the atoms at all, and does the exact same calculation three times, resulting in an incorrect interaction energy (see `incorrectly-ghosted.txt`). The (much easier) workaround here is to counterpoise correct using the bsse_type=""cp"" interface, but I wanted to bring this to your attention anyways. [correctly-ghosted.txt](https://github.com/psi4/psi4/files/1458283/correctly-ghosted.txt); [incorrectly-ghosted.txt](https://github.com/psi4/psi4/files/1458284/incorrectly-ghosted.txt). Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/843:649,interface,interface,649,https://psicode.org,https://github.com/psi4/psi4/issues/843,1,['interface'],['interface']
Integrability,"Hi,. Hope you don't mind me asking if there's an ETA for the 1.1.0 release?; I ask only because I'd like to co-ordinate with the release schedule of our own software that has a dependency on Psi4. Thanks,. Matt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/608:177,depend,dependency,177,https://psicode.org,https://github.com/psi4/psi4/issues/608,1,['depend'],['dependency']
Integrability,"Hi,. I am now using the developer version 1.4a2.dev215, and I realized that some of my calculation are not giving the same results as before. I asked someone to do the same calculation with the release version of psi4 and we indeed have something really different. We did H4, square shape. I enclose the output of both files. Note that this was done with the OpenFermion-Psi4 interface and the output contains HF, CISD, FCI and CCSD calculations. I do not see any difference in the settings, so I don't understand why I get wrong HF energy for instance. Can anyone see something or knows something about it ?. [version_1.4a2.dev215.txt](https://github.com/psi4/psi4/files/4579640/version_1.4a2.dev215.txt); [release_1.3.2.txt](https://github.com/psi4/psi4/files/4579639/release_1.3.2.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1878:376,interface,interface,376,https://psicode.org,https://github.com/psi4/psi4/issues/1878,1,['interface'],['interface']
Integrability,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1902:39,message,message,39,https://psicode.org,https://github.com/psi4/psi4/issues/1902,1,['message'],['message']
Integrability,"Hi,. I just got an MRCC license and started toying around with the Psi4 interface. Unfortunately, it is not working for me. ; ```; molecule {; 0 1; O; H 1 1.0; H 1 1.0 2 110.0; }. set qc_module mrcc; optimize('ccsdt/cc-pvdz'); freq('ccsdt/cc-pvdz'); ```; Using the mrcc.2023-08-28.binary.tar.gz binary release, I just get a big bunch of file not found errors; ```; $ psi4 -n6 h2o.in ; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:72,interface,interface,72,https://psicode.org,https://github.com/psi4/psi4/issues/3159,1,['interface'],['interface']
Integrability,"Hi,. MBIS calculation fails for iodine containing molecules with DZVP basis set using `psi4 1.4.1` and `psi4 1.6.1`. Here is a minimal reproducible example:; ```; molecule dummyol {; 0 1; C 0. -1.94 0.; I 0. 0.24 0.; H -1.04 -2.27 0.; H 0.52 -2.27 0.90; H 0.52 -2.27 -0.90; }; set {; guess sad; scf_type df; basis DZVP # works for def2-svp; e_convergence 8; d_convergence 8; }; e, wfn = energy('scf', return_wfn=True); oeprop(wfn, ""MBIS_VOLUME_RATIOS"", 'MBIS_CHARGES', title='CH3I-dzvp'). ```; The error message reads:; ```; Traceback (most recent call last):; File ""/home/anaconda3/envs/psi4-09-26-22/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 33, in <module>; File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/util.py"", line 72, in oeprop; free_atom_volumes(wfn); File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/prop_util.py"", line 121, in free_atom_volumes; psi4.oeprop(at_wfn, 'MBIS_CHARGES', title=a_sym + "" "" + method, free_atom=True); File ""/home/anaconda3/envs/psi4-09-26-22/lib//python3.10/site-packages/psi4/driver/p4util/util.py"", line 74, in oeprop; oe.compute(). RuntimeError: ; Fatal Error: Atomic Number 53 unsupported by MBIS; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1657298395608/work/psi4/src/psi4/libmints/oeprop.cc on line: 1871; The most recent 5 function calls were:. psi::OEProp::compute_mbis_multipoles(bool); psi::OEProp::compute(). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""SCF_TYPE"", ""df""); core.set_global_option(""BASIS"", ""DZVP""); core.set_global_option(""E_CONVERGENCE"", 8); core.set_global_option(""D_CONVERGENCE"", 8); e, wfn = energy('scf', return_wfn=True); --> oeprop(wfn, ""MBIS_VOLUME_RATIOS"", 'MBIS_CHARGES', title='CH3I-dzvp'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Atomic Number 53 unsuppor",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2728:504,message,message,504,https://psicode.org,https://github.com/psi4/psi4/issues/2728,1,['message'],['message']
Integrability,"Hi,. Since 0.3.530 or so, all of the difficulties that I've had about compiling plugins have been worked out. I'm sure there are other possible schemes, but the one I have now is a `configure` shell script that writes a `Makefile` using some information from the new `psi4-config` ([link](https://github.com/rmcgibbo/resp2/blob/master/configure)). The remaining plugin-related question I have now is about ""installation"". If I want to distribute this plugin to other users (it's really just the `<plugin_name>.so` file, I don't have any obligatory Python code), and make it easy for them to install, I'd like to make something like `conda install -c rmcgibbo <my_plugin>` work. If this were a standard Python module, I'd install the package with a Pyton wrapper to `lib/python2.7/site-packages/`, since that'll definitely be on `sys.path` -- is that what I should do here too? Or is there an alternative more psi4-specific location in `share/psi4/` where they would ideally go?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/229:754,wrap,wrapper,754,https://psicode.org,https://github.com/psi4/psi4/issues/229,1,['wrap'],['wrapper']
Integrability,"Hi,. from what I gather in the libint routines, the maximum angular momentum supported by psi4 seems to be G functions (l=4). Do you have any plans to get rid of this limitation?. cc-pV6Z has up to I functions (l=6), and ideally one would like to run forces (and semi-numerical Hessians), which means that the program should support integrals over l=7 functions.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/180:38,rout,routines,38,https://psicode.org,https://github.com/psi4/psi4/issues/180,1,['rout'],['routines']
Integrability,"Hi,; I was trying the MRCC interface in Psi4 to run energy('mrccsd(t)_l') but I run into a PSIO_ERROR. Input. ```; memory 126 Gb; molecule complex {; 0 1; C 0.028824000 0.102541000 0.329511000; H -0.846717000 0.257672000 -0.295811000; C 1.368536000 0.016176000 0.003655000; H 1.872535000 0.082040000 -0.957212000; N -0.055760000 -0.031179000 1.697636000; C 1.178669000 -0.178253000 2.203240000; H 1.426085000 -0.303457000 3.252661000; N 2.052611000 -0.167236000 1.184832000; C 3.504230000 -0.205550000 1.365908000; H 3.698001000 -0.576769000 2.380482000; H 3.898020000 0.813550000 1.260411000; H 3.939232000 -0.884942000 0.619049000; C -1.256640000 0.100763000 2.523448000; H -1.529670000 1.162452000 2.578623000; H -1.007837000 -0.272600000 3.525198000; H -2.062908000 -0.500349000 2.079371000; F 1.181657000 2.676729000 1.439625000; B 1.518848000 2.859437000 2.791181000; F 1.689389000 4.189751000 3.137207000; F 0.482658000 2.259079000 3.612149000; F 2.731761000 2.111893000 3.070818000; C 1.992235000 1.241852000 8.156885000; H 1.485477000 1.176688000 9.116348000; C 3.332840000 1.154673000 7.834922000; H 4.206519000 0.999649000 8.462845000; N 1.311649000 1.424993000 6.973626000; C 2.188563000 1.435214000 5.957752000; H 1.944614000 1.560136000 4.907488000; N 3.421451000 1.288054000 6.467033000; C 4.624491000 1.154329000 5.644658000; H 4.896627000 0.092348000 5.590783000; H 4.378873000 1.527036000 4.641881000; H 5.430033000 1.755038000 6.090598000; C -0.139438000 1.464529000 6.788437000; H -0.534567000 0.445964000 6.893963000; H -0.329914000 1.835298000 5.773051000; H -0.575851000 2.145114000 7.533419000; F 2.193639000 -1.420051000 6.719505000; B 1.853598000 -1.602720000 5.368653000; F 1.684676000 -2.933106000 5.022169000; F 2.887295000 -1.000476000 4.545917000; F 0.639066000 -0.856861000 5.091564000; }; set globals {; basis aug-cc-pVDZ; scf_type direct; freeze_core True; guess sad; basis_guess 3-21G; }; energy('mrccsd(t)_l'); ```. End of output. ```; *** tstart() called on r3584;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/35:27,interface,interface,27,https://psicode.org,https://github.com/psi4/psi4/issues/35,1,['interface'],['interface']
Integrability,"Hi,; could you take a look at the attached runs. The tar.gz file includes three geometry optmmization jobs of the same molecule from three different starting conformations. They all fail on our cluster due to memory issues. The cluster is using cgroups. I am asking slurm for 10gb and specifying ```memory 8.0 Gb```. Two of the jobs are have the following error message (rec19_4405620.log, rec284_4405895.log):; ```slurmstepd: error: Detected 1 oom-kill event(s) in step 4405620.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler. ```. while the third has this error (rec24_4405625.log):; ```Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1550197239473/work/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::tocwrite(unsigned long); ```. - One job (rec284_pid139597.out) was killed before the first scf even started.; - the other two were killed during the first gradient evaluation (rec19_pid139597.out, rec24_pid139597.out) . These are just three jobs out of 500 similar ones that failed. I picked them to show a couple of divers failures. The input files are included as well (*.dat).; I tried the same thing with B3LYP and it worked.; Psi4 used: ```Psi4 1.3rc2```. Any ideas?; Thanks,; Alberto; [psi4.wb97.tar.gz](https://github.com/psi4/psi4/files/3040711/psi4.wb97.tar.gz)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590:362,message,message,362,https://psicode.org,https://github.com/psi4/psi4/issues/1590,1,['message'],['message']
Integrability,"I Driver Interface (MDI)](https://github.com/MolSSI/MDI_Library). MDI is an effort of [The MolSSI](https://molssi.org/) to improve and standardize the process of interoperating codes within the computational molecular sciences domain. In particular, MDI supports interoperability within a driver-engine paradigm, in which a driver code controls the high-level operations of one or more engine codes, orchestrating complex calculations like QM/MM or advanced sampling. This PR provides all functionality required for Psi4 to act as an MDI engine. This makes it possible for external codes to exercise control over Psi4 in a manner similar to what is possible using Psi4’s existing API (albeit with a much smaller subset of the functionality), but with the advantage of cross-code generality (all MDI commands are defined by [The MDI Standard](https://molssi.github.io/MDI_Library/html/mdi_standard.html)) and the option of fast inter-code communication via the MPI or TCP/IP methods (selected by the user at runtime). The PR adds [The MDI Library](https://molssi.github.io/MDI_Library/html/index.html), which handles the details of inter-code communication, as an external dependency. The MDI Library compiles with CMake and has no additional requirements, although it will link to an MPI library if one is found. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Include the MDI Library as an external dependency; - [x] Add functionality for Psi4 to respond to MDI commands as defined by [The MDI Standard](https://molssi.github.io/MDI_Library/html/mdi_standard.html); - [x] Add the --mdi command-line option, which causes Psi4 to run as an MDI engine.; - [ ] Document the use of Psi4 as an MDI Engine. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676:1267,depend,dependency,1267,https://psicode.org,https://github.com/psi4/psi4/pull/1676,2,['depend'],['dependency']
Integrability,"I am aiming at the grid-based evaluation of molecular electrostatic fields/potentials as depicted in the input example [props4](https://github.com/psi4/psi4/blob/master/samples/props4/input.dat). Running Psi4 1.1, the input example fails with the message; `AttributeError: 'builtin_function_or_method' object has no attribute 'Vvals'`.; Calling `Exvals`, `Eyvals` or `Ezvals` results in the same error. Furthermore, I experienced the saving of `grid_field.dat` and `grid_esp.dat`, which follows after calling `prop()`, to be extremely slow (~1 MB per 5 minutes). In conclusion, I kindly ask for responses to the following questions:; - What is going wrong with the direct capturing of one-electron properties as Python arrays?; - How could the saving of the `.dat` files be sped up?; - Is there a way to change the output file names to something different than `grid_field.dat`/ `grid_esp.dat`?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1614:247,message,message,247,https://psicode.org,https://github.com/psi4/psi4/issues/1614,1,['message'],['message']
Integrability,"I am currently building a high throughput program to calculate various one electron properties of large sets of molecules. . I am using psi4 1.81 and interacting with the program via the python API. First I optimise the geometry using the QCEngine wrapper, and then run a single point calculation with psi4.energy() where I return the wfn object and run psi4.oeprop(wfn). I am currently using the PBE0/def2-TZVPPD with the DDX solvent model DDX-4.0 level of theory. However, I began noticing the calculation would hang at a certain point, regardless of the level of theory and usage of the ddx solvent model (but seemed to hang quicker with more expansive methods), where the calculation would indefinitely stop at this stage:. ```; ==> Primary Basis <==. Basis Set: DEF2-TZVPPD; Blend: DEF2-TZVPPD; Number of shells: 136; Number of basis functions: 358; Number of Cartesian functions: 398; Spherical Harmonics?: true; Max angular momentum: 3; ```. I suspected a memory leak so I logged with memory usage at each stage of the calculation with:. ```; def log_memory_usage():; process = psutil.Process(); print(f""Memory Usage: {process.memory_info().rss / 1024 ** 2} MB"", flush=False); ```. When applying this function to this section of my code:. ``` ; print('memory use before E wfn'); log_memory_usage() ; E, wfn = psi4.energy(f'{settings.method}/{settings.basis}', molecule = molecule_psi4, return_wfn = True); print('memory use after E wfn'); log_memory_usage() ; psi4.oeprop(wfn,""GRID_ESP"",""GRID_FIELD"",""MULLIKEN_CHARGES"", ""LOWDIN_CHARGES"", ""DIPOLE"",""QUADRUPOLE"", ""MBIS_CHARGES""); print('memory use after oeprop'); log_memory_usage() ; ``` ; The output to my file with the above logging was:. ```; memory use before E wfn; Memory Usage: 3715.3828125 MB; --; memory use after E wfn; Memory Usage: 3783.52734375 MB; --; memory use after oeprop; Memory Usage: 3802.50390625 MB; --; memory use before wfn interaction; Memory Usage: 3802.50390625 MB; memory use after wfn interaction; Memory Usage: 380",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3146:248,wrap,wrapper,248,https://psicode.org,https://github.com/psi4/psi4/issues/3146,1,['wrap'],['wrapper']
Integrability,"I am interfacing LibERD with GAMESS and would like to use the Psi4 interface as a reference. Psi4 does not call LibERD, even when compiled with it. This issue has been confirmed via email by @ryanmrichard. I first invoke:; setup --erd on --fc gfortran --type debug; and install normally, verifying that DENABLE_LIBERD is set for CMake. Then I tried debugging and setting a breakpoint at the ERD entry point, erd__gener_eri_batch. I tried a variety of sample input files, and that function is never reached. Next, I went to the ERD wrapper code at ./psi4public/src/lib/libmints/erd_eri.cc and enabled the DEBUG preprocessor macro which adds print statements for ERD parameters. The print statements are not printed, even if I remove the IF statements. Third, I figured LibInt might be called instead of ERD, so I recompiled with --max-am-eri 0 in an attempt to disable LibInt. There was no change in the behavior of the code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/171:67,interface,interface,67,https://psicode.org,https://github.com/psi4/psi4/issues/171,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"I am just wondering whether this composite ab initio method is available in PSI4?. If I give energy('ccCA-PS3') for a molecule then; from the output error message I recognize that this keyword is not available. . psi4.driver.p4util.exceptions.ValidationError: Energy method ""ccca-ps3"" is not available. Either I maybe making some mistakes or if you could share some sample input file related; to this composite method then it would be helpful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2157:155,message,message,155,https://psicode.org,https://github.com/psi4/psi4/issues/2157,1,['message'],['message']
Integrability,"I am wondering if CPU and memory use are handled correctly in the MRCC interface. I am running some hig-level coupled cluster benchmarks but MRCC appears to run mostly single threaded, and doesn't use a lot of memory. Is the `memory` statement in Psi4 copied to the MRCC input file? I could not find the used MRCC input in the scratch directory...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3165:71,interface,interface,71,https://psicode.org,https://github.com/psi4/psi4/issues/3165,1,['interface'],['interface']
Integrability,"I am working with David Williams-Young to extend the features of his IntegratorXX and GauXC projects, which will enable access to modern quadrature grids in various programs. While going through the code in IntegratorXX, we noticed in https://github.com/wavefunction91/IntegratorXX/pull/27 that there is a potential discrepancy in the Chebychev roots in Psi4; ```; void RadialGridMgr::getChebychevRoots(int n, double r[], double w[]) {; double piOverNPlusOne = M_PI / (n + 1);; for (int i = 1; i <= n; i++) {; double x = cos(i * piOverNPlusOne);; r[i - 1] = x;; w[i - 1] =; piOverNPlusOne * sqrt(1.0 - x * x); // sqrt(1.0 - x*x) could've been replaced with sin(i*piOverNPlusOne).; }; }; ```. This should be compared to the Gauss-Chebychev rules on [Wikipedia](https://en.wikipedia.org/wiki/Chebyshev%E2%80%93Gauss_quadrature). The nodes clearly correspond to Chebychev quadrature of the second kind, but ; 1. the weights are from Gauss-Chebychev quadrature of the first kind and; 2. the factor to transform to unit weight is missing.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3004:69,Integrat,IntegratorXX,69,https://psicode.org,https://github.com/psi4/psi4/issues/3004,3,['Integrat'],['IntegratorXX']
Integrability,"I get the following error when building psi4. ```; Scanning dependencies of target pcmsolver; [ 53%] Creating directories for 'pcmsolver'; [ 53%] Performing download step for 'pcmsolver'. [ 53%] No patch step for 'pcmsolver'; [ 53%] No update step for 'pcmsolver'; [ 53%] Performing configure step for 'pcmsolver'; CMake Error: The source directory ""/Users/sternc1/src/python-lib/psi4public/interfaces/pcmsolver"" does not appear to contain CMakeLists.txt.; Specify --help for usage, or press the help button on the CMake GUI.; make[2]: *** [interfaces/pcmsolver-stamp/pcmsolver-configure] Error 1; make[1]: *** [src/lib/libpsipcm/CMakeFiles/pcmsolver.dir/all] Error 2; make: *** [all] Error 2; ```. I used the following setup command:; `./setup --cc /usr/local/bin/clang-omp --cxx /usr/local/bin/clang-omp --fc /usr/local/bin/gfortran`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/199:60,depend,dependencies,60,https://psicode.org,https://github.com/psi4/psi4/issues/199,3,"['depend', 'interface']","['dependencies', 'interfaces']"
Integrability,"I get this error:; > OMP: Info #270: omp_set_nested routine deprecated, please use omp_set_max_active_levels instead. Using this as an input:. ```; molecule {; He 0 0 0; --; He 2 0 0; }; import snsmp2; energy('sns-mp2'); ```. I have installed it from conda channel of psi4:. > conda create -n psi4 psi4 snsmp2 -c psi4. I also did. > conda update psi4 -c psi4. as advised on the [psi4 website](http://www.psicode.org/psi4manual/master/build_obtaining.html#faq-binarypackage) . Package versions:; ```; >>> import psi4; >>> psi4.__version__; '1.3.2'; >>> snsmp2.__version__; '1.0.1.dev24'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1820:52,rout,routine,52,https://psicode.org,https://github.com/psi4/psi4/issues/1820,1,['rout'],['routine']
Integrability,I had the following problem when trying to build Psi4 from current master branch. It seems like there was an issue extracting the Libint2-export-5-4-3-6-5-4_1.tgz archive. ```; CMake Error: Problem with archive_write_header(): Can't create 'export/src/OSVRRP1InBra_aB_h__0__d__1___TwoPRep_unit__0__s100__1___Ab__up_0.h'; CMake Error: Current file: export/src/OSVRRP1InBra_aB_h__0__d__1___TwoPRep_unit__0__s100__1___Ab__up_0.h; CMake Error: Problem extracting tar: ~/psi4/build/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_1.tgz; -- extracting... [error clean up]; CMake Error at libint2_external-stamp/extract-libint2_external.cmake:33 (message):; error: extract of; '~/psi4/build/external/upstream/libint2/libint2_external-prefix/src/Libint2-export-5-4-3-6-5-4_1.tgz'; failed; ```. Relevant version numbers:; - Python: v3.6.3; - CMake: v3.19.2; - Intel C/C++ compiler: v18.0. Build instructions:; ```; cmake .. -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc; make -j 24; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2147:673,message,message,673,https://psicode.org,https://github.com/psi4/psi4/issues/2147,1,['message'],['message']
Integrability,"I have a system, where I'm interested in running sapt2+/aug-cc-pVDZ calculation. However, it quits after the start of SAPT2+. ```; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SAPT2+ //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. *** tstart() called on cnode3005; *** at Sat Feb 29 03:11:38 2020. SAPT2+ ; Ed Hohenstein; 6 June 2009. Orbital Information; --------------------------; NSO = 1061; NMO = 1061; NRI = 3161; NOCC A = 69; NOCC B = 56; FOCC A = 19; FOCC B = 15; NVIR A = 992; NVIR B = 1005. Estimated memory usage: 140951.0 MB. Natural Orbital Cutoff: 1.000E-06; Disp(T3) Truncation: Yes; CCD (vv|vv) Truncation: Yes; MBPT T2 Truncation: Yes. Monomer A: 486 virtual orbitals dropped; Monomer B: 598 virtual orbitals dropped; ```; This the end of the log file.; ```; /home/XXX/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source ; libpcm.so.1 00007F6CEC755A15 Unknown Unknown Unknown; libpcm.so.1 00007F6CEC753637 Unknown Unknown Unknown; libpcm.so.1 00007F6CEC66BF32 Unknown Unknown Unknown; libpcm.so.1 00007F6CEC66BD86 Unknown Unknown Unknown; libpcm.so.1 00007F6CEC63A38D Unknown Unknown Unknown; libpcm.so.1 00007F6CEC63D75D Unknown Unknown Unknown; libpthread.so.0 00000034CF00F710 Unknown Unknown Unknown; core.so 00007F6CF40872D2 Unknown Unknown Unknown; core.so 00007F6CF4087EDA Unknown Unknown Unknown; core.so 00007F6CF408927E Unknown Unknown Unknown; core.so 00007F6CF404A1F0 Unknown Unknown Unknown; core.so 00007F6CF3F6CDF7 Unknown Unknown Unknown; core.so 00007F6CF33B0027 Unknown Unknown Unknown; core.so 00007F6CF33F983F Unknown Unknown Unknown; core.so 00007F6CF33C3CEA Unknown Unknown Unknown; core.so 00007F6CF33C3BB4 Unknown Unknown Unknown; core.so 00007F6CF304A32C Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6B8FDD1 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C184A6 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C18FC9 Unknown Unknown",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1828:927,Rout,Routine,927,https://psicode.org,https://github.com/psi4/psi4/issues/1828,1,['Rout'],['Routine']
Integrability,"I have installed the latest Psi4 using anaconda:; `conda create -n p4env psi4 python=3.6 -c psi4/label/dev -c psi4`; Then; `source activate p4env`; But even a simple calculation like this one:; ```; molecule PCl5 {; 0 1; P -0.001250 0.001863 -0.000253; Cl -0.017313 2.126472 -0.026384; Cl -0.005958 -2.126884 0.029666; Cl 0.991147 -0.031176 -1.764481; Cl -2.029231 -0.007514 0.039738; Cl 1.062458 0.037458 1.721684; }; set basis def2-tzvp. optimize(""b3lyp""); ```; Is crashing with this error message:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3 4 5 6; 	 2 : 1; 	 3 : 1; 	 4 : 1; 	 5 : 1; 	 6 : 1. 	---Fragment 1 Geometry and Gradient---; 	 P -0.0023608120 0.0035185828 -0.0004777490; 	 CL -0.0327154829 4.0184477322 -0.0498581826; 	 CL -0.0112576427 -4.0192302534 0.0560609672; 	 CL 1.8729977331 -0.0589160789 -3.3343855050; 	 CL -3.8346895047 -0.0142013792 0.0750942888; 	 CL 2.0077559933 0.0707833845 3.2535115991; 	 0.0005829612 0.0007979689 -0.0000766467; 	 -0.0000438567 -0.0088149216 0.0011960655; 	 -0.0004768815 0.0083220457 -0.0009627395; 	 -0.0039049377 -0.0010136595 0.0075335979; 	 0.0080187099 -0.0002965760 -0.0001586710; 	 -0.0042975334 0.0010502310 -0.0074582594. 	Previous optimization step data not found. Starting new optimization. 	---Fragment 1 Intrafragment Coordinates---; 	 - Coordinate - - BOHR/RAD - - ANG/DEG -; 	 R(1,2) = 4.015348	 2.124830; 	 R(1,3) = 4.023156	 2.128962; 	 R(1,4) = 3.825678	 2.024461; 	 R(1,5) = 3.833115	 2.028397; 	 R(1,6) = 3.825381	 2.024305; 	 L(2,1,3) = 3.131665	 179.431194; 	 l(2,1,3) = 3.141593	 180.000000; 	 B(2,1,4) = 1.580103	 90.533252; 	 B(2,1,5) = 1.568103	 89.845687; 	 B(2,1,6) = 1.567648	 89.819597; 	 B(3,1,4) = 1.567809	 89.828837; 	 B(3,1,5) = 1.563686",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265:492,message,message,492,https://psicode.org,https://github.com/psi4/psi4/issues/1265,1,['message'],['message']
Integrability,"I have situations where I want to manually specify the number of frozen core orbitals using `num_frozen_docc`, do some work, then calculate some MBIS properties including the volume ratios. The latter causes psi4 to automatically calculate the free-atom volumes in the same method as the last-run calculation (in my case, `wb97m-d3bj`) and inherits all the settings... including `num_frozen_docc`. I can insert a `set num_frozen_docc 0; set freeze_core true` right before the `oeprop(wfn, 'MULLIKEN_CHARGES')` call and make things go away, but what worries me is just _how_ things fail. Well, sometimes things are in fact _perfectly fine_. Other times, psi4 **segfaults**. The behavior depends on _just how large_ `num_frozen_docc` is -- I think if it ends up exceeding some other quality dependent on the calculation, things go belly-up. Here's the relevant line from a coredump. ```; #0 0x00002b4f362ef958 in psi::scf::HF::compute_fcpi (this=0x223c06c0) at [snip]/psi4/psi4/src/psi4/libscf_solver/hf.cc:830; 830 for (int i = 0; i < nfzc; ++i) frzcpi_[pairs[i].second]++;; ```. And here's a minimum working example of the issue that MBIS_VOLUME_RATIOS runs into, as a standalone calc:. ```; set num_frozen_docc 20; set basis def2-tzvppd; set reference uks; molecule mol {; 0 2; H 0 0 0; units angstrom; }; E, wf = energy('wb97m-d3bj',return_wfn=True,); ```. If you flip `num_frozen_docc` to 18, _it works_. (19 works for me on some machines, not on others -- eek!). In all cases I'm invoking psi4 the same way: `psi4 -n1 -i run.in --memory 500MB`. . I'm building off of 1.6.X, using icc/2020.2-108-02c7; I don't _think_ I have anything ""special"" set in my compile environment besides `buildtype=RelWithDebInfo`. I didn't mess with any optimization flags, for sure.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631:686,depend,depends,686,https://psicode.org,https://github.com/psi4/psi4/issues/2631,2,['depend'],"['dependent', 'depends']"
Integrability,I installed Psi4 1.4a2.dev78 on Ubuntu-20.04.1 using conda installer but it crashes when I use it with [poltype](https://pren.github.io/poltype/README_INSTALL.html) tool. Do you know how I can fix the below error?; **Error:**; ```; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F14B1B2C10F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F14B7334980 Unknown Unknown Unknown; libc-2.27.so 00007F14B6F6FFB7 gsignal Unknown Unknown; libc-2.27.so 00007F14B6F71921 abort Unknown Unknown; core.cpython-37m- 00007F14B40E13D7 Unknown Unknown Unknown; core.cpython-37m- 00007F14B26DC86D Unknown Unknown Unknown; core.cpython-37m- 00007F14B26F56B1 Unknown Unknown Unknown; core.cpython-37m- 00007F14B271593A Unknown Unknown Unknown; python3.7 000055CE517D7914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843EBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE517D7107 _PyFunction_FastC Unknown Unknown; python3.7 000055CE5183F4B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518AA29D PyRun_StringFlags Unknown Unknown; python3.7 000055CE5184EEB4 Unknown Unknown Unknown; python3.7 000055CE517D7789 _PyMethodDef_RawF Unknown Unknown; python3.7 000055CE517D7A31 _PyCFunction_Fast Unknown Unknown; python3.7 000055CE51843795 _PyEval_EvalFrame Unknown Unknown; python3.7 000055CE51786829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055CE51787714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055CE5178773C PyEval_EvalCode Unknown Unknown; python3.7 000055CE5189EF14 Unknown Unknown Unknown; python3.7 000055CE518A9331 PyRun_FileExFlags Unknown Unknown; python3.7 000055CE518A,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2084:280,Rout,Routine,280,https://psicode.org,https://github.com/psi4/psi4/issues/2084,1,['Rout'],['Routine']
Integrability,"I just tried to build the present trunk using the instructions in the wiki; https://github.com/psi4/psi4/wiki/1_Obtaining#clonepsi4public. but the compilation fails in a bunch of unresolved symbols. /tmp/ccVe3Y02.ltrans0.ltrans.o: In function `main':; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to`CheMPS2::Irreps::Irreps(int)'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:513: undefined reference to `CheMPS2::Irreps::getNumberOfIrreps() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:541: undefined reference to`CheMPS2::Irreps::symm_psi2molpro(int*) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:611: undefined reference to`CheMPS2::Irreps::getGroupName[abi:cxx11]() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:614: undefined reference to `CheMPS2::Irreps::getIrrepName[abi:cxx11](int) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:646: undefined reference to`CheMPS2::Initialize::Init()'. When I look at the log file, it looks like the addition of the -flto flag in the CheMPS2 makefile breaks the CheMPS2 compile, in that when CMake creates the static archive there's a big bunch of messages like. [ 96%] Linking CXX static library libchemps2.a; BFD: CMakeFiles/chemps2-base.dir/CASPT2.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCF.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFdebug.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; BFD: CMakeF",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/414:280,interface,interfaces,280,https://psicode.org,https://github.com/psi4/psi4/issues/414,5,['interface'],['interfaces']
Integrability,"I noticed that there is some kind of overflow happening in the printing of the memory (see below).; Looks like all variables are doubles so idk why. https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2493. The other thing is that this (and similar lines); `cost_ampAA = nocc2AA * nvir2AA;` should maybe be `cost_ampAA = naocc2AA * nvir2AA;`; Otherwise frozen-core is ignored for the memory consideration. Or I misunderstand something. If you could have a look @bozkaya ?. ```; DF-MP2.5 ; Program Written by Ugur Bozkaya; Latest Revision September 9, 2017. ============================================================================== ; ============================================================================== ; ============================================================================== . MO spaces... . FC OCC VIR FV ; ----------------------; 19 49 827 0. Number of basis functions in the DF-CC basis: 2173. Available memory : 55313.11 MB ; Memory requirement for 3-index ints : 12050.26 MB ; Memory requirement for DF-CC int trans: 36889.52 MB ; Memory requirement for CC contractions: -34560.53 MB ; Total memory requirement for DF+CC int: -22510.28 MB ; Memory requirement for Wabef term : 39520.86 MB . ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/898:1106,contract,contractions,1106,https://psicode.org,https://github.com/psi4/psi4/issues/898,1,['contract'],['contractions']
Integrability,"I see a segfault when running an SCF with some of the systems in L7 (in particular [circumcoronene](http://www.begdb.com/index.php?action=oneMolecule&state=show&id=4108)). I've traced the issue, at least in part, to integer sizing bug [in this check](https://github.com/psi4/psi4/blob/6044281f7a94c23852a4fd8291ab67dbcc3280fd/psi4/src/psi4/libfock/DFJK.cc#L699) when the user requests less than Q^2 memory. This is due to a wraparound during subtraction, which results in the error condition [here](https://github.com/psi4/psi4/blob/6044281f7a94c23852a4fd8291ab67dbcc3280fd/psi4/src/psi4/libfock/DFJK.cc#L761) erroneously evaluating to `false`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/716:424,wrap,wraparound,424,https://psicode.org,https://github.com/psi4/psi4/issues/716,1,['wrap'],['wraparound']
Integrability,"I tried using this code to generate the potential energy curve for the CF molecule and I got this error message: . ```; import psi4; import numpy as np. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). ecp = {}. for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). cf = psi4.geometry(cf_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; psi4.core.clean(); ```. The error message I got is:. ```; Traceback (most recent call last):; File ""/home/sanctus/psi4conda/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 46, in <module>; File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5424, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sanctu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181:104,message,message,104,https://psicode.org,https://github.com/psi4/psi4/issues/3181,1,['message'],['message']
Integrability,"I try to compile psi4 with gcc version 4.4.7 20120313 (Red Hat 4.4.7-11) (GCC) compiler. I got the following error:. Scanning dependencies of target mints; [ 59%] Building Fortran object src/lib/libmints/CMakeFiles/mints.dir/dkh2-dkh4_main.F90.o; [ 59%] Building CXX object src/lib/libmints/CMakeFiles/mints.dir/local.cc.o; In file included from /home/ubgroup/psi4/src/lib/libmints/mints.h:70,; from /home/ubgroup/psi4/src/lib/libmints/potentialint.h:31,; from /home/ubgroup/psi4/src/lib/libmints/mints.h:44,; from /home/ubgroup/psi4/src/lib/libmints/local.cc:30:; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: ISO C++ forbids initialization of member ‘max_noon_’; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: making ‘max_noon_’ static; /home/ubgroup/psi4/src/lib/libmints/oeprop.h:121: error: ISO C++ forbids in-class initialization of non-const static member ‘max_noon_’; make[2]: **\* [src/lib/libmints/CMakeFiles/mints.dir/local.cc.o] Error 1; make[1]: **\* [src/lib/libmints/CMakeFiles/mints.dir/all] Error 2; make: **\* [all] Error 2. @jturney",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/404:126,depend,dependencies,126,https://psicode.org,https://github.com/psi4/psi4/issues/404,1,['depend'],['dependencies']
Integrability,"I updated thermo.cc so that only 1 warning message is printed when the frequencies are checked for low and imaginary values. I also added a newline after the low frequency mode warning. Previous output (3 imaginary modes, total of 12 low frequency modes):. ```; WARNING: At least one vibrational frequency is imaginary!; WARNING: At least one vibrational frequency is imaginary!; WARNING: At least one vibrational frequency is imaginary!; ```. and. ```; Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes. Warning: used thermodynamic relations are not appropriate for low frequency modes.; ```. New output (3 imaginary modes, total of 12 low frequency modes):. ```; WARNING: At least one vibrational frequency is imaginary!; ```. and. ```; Warning: used thermodynamic relations are not appropriate for low frequency modes.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/197:43,message,message,43,https://psicode.org,https://github.com/psi4/psi4/pull/197,1,['message'],['message']
Integrability,"I use psi4 v1.7 to perform gradient calculations under the WB97M-D3BJ/DEF2-TZVPPD level. Most structures work fine, but I get the following error in some structures without a clear error message. ```; ==> Integral Setup <==. PSIO_ERROR: unit = 97, errval = 12; forrtl: error (76): Abort trap signal; Image PC Routine Line Source; libgdma.so 00007F6F7C68B10F for__signal_handl Unknown Unknown; libpthread-2.28.s 00007F6F9C906B20 Unknown Unknown Unknown; libc-2.28.so 00007F6F9BDDC37F gsignal Unknown Unknown; libc-2.28.so 00007F6F9BDC6DB5 abort Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B535A Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B53C5 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B5658 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B5A129 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B69438 _ZN3psi4PSIO2rwEm Unknown Unknown; core.cpython-310- 00007F6F88B6B963 _ZN3psi4PSIO5writ Unknown Unknown; core.cpython-310- 00007F6F88B566E9 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6DFBF4 Unknown Unknown Unknown; libpthread-2.28.s 00007F6F9C8FC14A Unknown Unknown Unknown; libc-2.28.so 00007F6F9BEA1DC3 clone Unknown Unknown; /var/spool/slurm/slurmd/job83930/slurm_script: line 27: 2245656 Aborted (core dumped); ```. I used conda to install psi4 in a new environment.; ```; psi4 1.7+6ce35a5 py310h769327c_1 psi4; ```. Below is the full log, which includes the geometry:. <details>. ```. Memory set to 7.451 GiB by Python driver.; Threads set to 4 by Python driver. Scratch directory: /scratch/njzjz/83930/; gradient() will perform analytic gradient computation. *** tstart() called on aerosol-020; *** at Fri May 26 20:10:38 2023. => Loading Basis Set <=. Name: DEF2-TZVPPD; Role: ORBITAL; Keyword: BASIS; atoms 1-33 entry C line 144 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 34-89 entry H line 14 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 90-101 entry N line ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:187,message,message,187,https://psicode.org,https://github.com/psi4/psi4/issues/2970,2,"['Rout', 'message']","['Routine', 'message']"
Integrability,"I want to install psi4 on my openff environment since OpenFF Recharge requires it to generate electrostatic charges (https://docs.openforcefield.org/projects/recharge/en/stable/getting-started/installation.html). . I have used mamba to install openff, following steps 3 and 4 [https://docs.openforcefield.org/en/latest/install.html](here). I tried to install psi4 via mamba with the following commad:; `mamba install psi4=1.8.1 -c conda-forge/label/libint_dev -c conda-forge`. However, I got several warnings about incompatible packages:. `blas [2.4|2.5|2.6|2.7] would require; │ │ └─ libblas [3.8.0 4_openblas|3.8.0 5_openblas|3.8.0 6_openblas|3.8.0 7_openblas], which requires; │ │ └─ openblas 0.3.5.* , which does not exist (perhaps a missing channel);; `; and; ` psi4 1.8.1 would require; │ ├─ libblas * *mkl, which requires; │ │ └─ blas * mkl, which conflicts with any installable versions previously reported;; │ └─ mkl >=2022.2.1,<2023.0a0 , which conflicts with any installable versions previously reported;; `. I also attempted to install psi4=1.7, but this also led to a similar conflicts issue:. `psi4 1.7** is not installable because it requires; └─ blas 1.0 mkl, which conflicts with any installable versions previously reported.; `; I believe I need psi4 installed on my openff environment for it to be usable for openff's wrappers. I've tried installing the blas dependencies explicitly:. `mamba conda install -c conda-forge openblas` ; but this tells me the package is already installed. . and:. `mamba install 'libblas * *mkl' -c conda-forge -c defaults` which results in the same `openblas 0.3.5.* , which does not exist (perhaps a missing channel);` error. . Any ideas? I must admit I am relatively new to using mamba + managing environments, but I believe it is just a reimplementation of conda.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3046:1337,wrap,wrappers,1337,https://psicode.org,https://github.com/psi4/psi4/issues/3046,2,"['depend', 'wrap']","['dependencies', 'wrappers']"
Integrability,"I was attempting to run an IRC, only to receive a rather confusing error message that `symm_matrix_inv : opt_symm_matrix_eig could not diagonalize`. After spending far too much time trying to figure out why various matrices were filled with NaN, I realized the problem was that I had supplied an energy minimum, not a transition state. (The SI that I was following put in a wrong geometry.) I've attached my input file. The IRC code saw the gradient was about zero and tried to follow the lowest mode... which was a translational mode. If the new PyOptking is given an initial hessian for an IRC, could it double-check that there's actually an imaginary mode?. [input.txt](https://github.com/psi4/psi4/files/2019016/input.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1025:73,message,message,73,https://psicode.org,https://github.com/psi4/psi4/issues/1025,1,['message'],['message']
Integrability,"I was just looking through the code in the libxc interface, and I noticed the following in LibXCfunctional.cc; ```; if (xc_functional_->info->flags & XC_FLAGS_HYB_CAM) rangesep++;; if (xc_functional_->info->flags & XC_FLAGS_HYB_CAMY) rangesep++;; if (xc_functional_->info->flags & XC_FLAGS_HYB_LC) rangesep++;; if (xc_functional_->info->flags & XC_FLAGS_HYB_LCY) rangesep++;; ```. While this is correct, per se, the thing is that the four cases refer to different kinds of range separation kernels. The case ```XC_FLAGS_HYB_CAM``` is the most common one, and appears to be the only one supported by Psi4. The other cases should crash, as they will give an incorrect result.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1258:49,interface,interface,49,https://psicode.org,https://github.com/psi4/psi4/issues/1258,1,['interface'],['interface']
Integrability,"I was looking at the DIIS code to determine whether it properly handles the case of linear dependencies. For instance, the UHF code is; ```; if (initialized_diis_manager_ == false) {; diis_manager_ = std::make_shared<DIISManager>(max_diis_vectors, ""HF DIIS vector"", DIISManager::LargestError,; DIISManager::OnDisk);; diis_manager_->set_error_vector_size(2, DIISEntry::Matrix, gradient_a.get(), DIISEntry::Matrix,; gradient_b.get());; diis_manager_->set_vector_size(2, DIISEntry::Matrix, Fa_.get(), DIISEntry::Matrix, Fb_.get());; initialized_diis_manager_ = true;; }. diis_manager_->add_entry(4, gradient_a.get(), gradient_b.get(), Fa_.get(), Fb_.get());; ```; whereas extrapolation is handled by; ```; bool UHF::diis() { return diis_manager_->extrapolate(2, Fa_.get(), Fb_.get()); }; ```; To me, this looks like the code does **not** project linearly dependent eigenvectors out. This might certainly explain many SCF convergence problems seen with Psi4, in which the energy apparently converges but the DIIS error stagnates to a large value. Note that the fix was already in Pulay's original paper. In [Chem. Phys. Lett. 73, 393 (1980)](https://doi.org/10.1016/0009-2614(80)80396-4) he writes; > An even better choice is the use of Fock matrix elements transformed to an orthonormal basis, such as `S^-1/2 F S^-1/2` where `S` is the overlap matrix. This takes into account that a charge shift from a basis function to another is less important physically if the two functions overlap strongly. Obviously, `S^-1/2` is the orthogonalizing matrix `X`; alternatively, the molecular orbital coefficients `C` can also be used.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2217:91,depend,dependencies,91,https://psicode.org,https://github.com/psi4/psi4/issues/2217,2,['depend'],"['dependencies', 'dependent']"
Integrability,"I was trying to do a 4-electron FCI using the DETCI code with a huge valence basis set but it seems Psi4 cannot handle CI calculations with more than 255 functions. The errors that I encountered are mentioned in [this forum thread](http://forum.psicode.org/t/increase-ioff-max/531). In short:. - If I use more than 255 orbitals I get a memory violation error from the system and ``(subgr_lex_addr): Impossible walk!`` message from Psi4.; - If I use 408 orbitals I get . ```; RuntimeError:; Fatal Error: error: IOFF_MAX not large enough!; Error occurred in file:path/devel/psi4/psi4/src/psi4/detci/get_mo_info.cc on line: 228; ```. It would be great if someone could create a patch fixing this issue, since it severely limits the capabilities of the DETCI code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/724:418,message,message,418,https://psicode.org,https://github.com/psi4/psi4/issues/724,1,['message'],['message']
Integrability,"I was trying to run a Gaussian-2 energy calculation for hydrogen disulfide, which appears in the original G2 test set: http://scitation.aip.org/content/aip/journal/jcp/94/11/10.1063/1.460205. The job terminated after calculating the MP4(SDTQ) total energy, with message:. RuntimeError: sanity check failed! Gaussian94BasisSetParser::parser: Unable to find the basis set for S in /opt/science/psi/psi4/share/psi/basis/6-311g_2df_p_.gbs. When I examine the 6-311g_2df_p_.gbs file, I see that it only has entries for H, He, Li, Be, B, C, N, O, F, Ne, K, Ca. According to the comment at the top of the file it's supposed to have been merged from 6-311G*\* and 6-311G on the EMSL Basis Set Exchange. I double checked on the BSE and these basis sets also have entries for Na, Mg, Al, Si, P, S, Cl, Ar, Ga, Ge, As, Se, Br, Kr, I, as expected.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/58:262,message,message,262,https://psicode.org,https://github.com/psi4/psi4/issues/58,1,['message'],['message']
Integrability,"I would like to implement a faster way to do ESP fits than what is found here:; https://github.com/psi4/psi4numpy/tree/master/One-Electron-Property/Restrained-Electrostatic-Potential. The solution above is writing multiple grids on disk, yet the strength of the python and C++ APIs of Psi4 should be to have these in memory and allow for fast multithreaded evaluations. My development proposal would be a little more involved, but also give the Psi4 API a lot more power. I would split the whole OEProp class into:. OEPropCalc; This class will get all currently existing logic to calculate the requested properties. Most properties are already calculated as SharedMatrix. This class will not be allowed to have any kind of output, unless a bulk property is requested (such as a grid).; OEProp; This class gets all output handling, it will only call the respective OEPropCalc functions and then use the existing code for output. Data will be passed between OEPropCalc and OEProp as SharedPointer and therefore not cost overhead. Exception to this rule would be the functions writing grids, which will get an in-memory and a direct write solution.; Reason:; Currently OEProp sometimes exposes data in memory (such as Mulliken charges using wfn.set_array) and sometimes not (such as Multipoles only via stdout or outfile). The approach above would allow internal code use of SharedMatrices directly (OEPropCalc would get a public python API) and keep existing functionality untouched. Once the split is done, I would also split the GridEvaluation routines to either write a grid-XXX.dat (the existing functionality) or to keep the grids in memory (new functionality) and generate them with a grid taken from memory using the existing GridIterator interface. Are there any objections or is somebody else currently working on this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1116:1544,rout,routines,1544,https://psicode.org,https://github.com/psi4/psi4/issues/1116,2,"['interface', 'rout']","['interface', 'routines']"
Integrability,"I would like to use the program from source (rather than the conda distribution), but attempting to build CMake gives me the following error:; ```; CMake Error at cmake/math/MathLibsFunctions.cmake:216 (message):; -- No external LAPACK library found (have you set the MATH_ROOT environment variable?); ```. However, when performing `locate lapack`, I get this:; ```; /usr/include/clapack.h; /usr/lib64/liblapack.so.3; /usr/lib64/liblapack.so.3.4; /usr/lib64/liblapack.so.3.4.2; /usr/lib64/liblapacke.so.3; /usr/lib64/liblapacke.so.3.4; /usr/lib64/liblapacke.so.3.4.2; /usr/lib64/python2.7/site-packages/numpy/linalg/lapack_lite.so; /usr/share/doc/lapack-3.4.2; /usr/share/doc/atlas-devel-3.10.1/doc/lapackqref.pdf; /usr/share/doc/lapack-3.4.2/LICENSE; /usr/share/doc/lapack-3.4.2/README; /usr/share/doc/lapack-3.4.2/lapackqref.ps; ```; I am not sure if the required library is here. Doing `MATH_ROOT=\usr\ cmake3 -H. -Bobjdir` did not help either.; Is there any possible idea how the error could have occurred? I have also tried to instal MKL from conda.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954:203,message,message,203,https://psicode.org,https://github.com/psi4/psi4/issues/954,1,['message'],['message']
Integrability,"I would like to use the vv10 kernel with custom parameters to use it in the DFT-NL fashion (http://pubs.acs.org/doi/full/10.1021/ct200644w).; One needs to modify the b and c parameters. I figured out that those are obtained from libxc in `LibXCfunctional.cc`. I suppose that within `LibXCFunctional::build_worker` one has to add a user-tweak somehow to modify the vv10 parameters. So to the actual questions:. - Can I already request the VV10 kernel to be included for a given functional through the python interface? (parameters aside); - Can I already request the VV10 kernel in a post-SCF fashion for a given density (a non-SCF VV10 is perfectly fine for energies, it is the default in ORCA). I think I saw this mentioned somewhere, but cannot find it.; - Any further helpful pointers to within code where I would need to make changes or need to take a look? (I am more a Fortran than C++ guy, my head hurts already)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/870:507,interface,interface,507,https://psicode.org,https://github.com/psi4/psi4/issues/870,1,['interface'],['interface']
Integrability,"I'm attempting to converge a very tricky molecule with ODC-12. _Something_ goes wrong in the computation, likely involving the fact that I added damping, and I get the following error message:; ```; There was a problem correcting the MO phases.; If this does not converge, try ALGORITHM=TWOSTEP; ```. However helpful a change of algorithm might be, the two step algorithm isn't implemented for the orbital optimized methods, so this advice is useless for me, and aggravating for any users encountering this problem. So the error message needs to be changed if the cumulant parameterization includes orbital rotations. But it would be nice if I could replace it with something else. Do any of the (very few) people familiar with wrangling with tricky molecules in DCT have any suggestions?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1354:184,message,message,184,https://psicode.org,https://github.com/psi4/psi4/issues/1354,2,['message'],['message']
Integrability,"I'm building Psi4 updated with the most recent trunk from Github on a cluster with the following:; vim/7.4 ; python/2.7 ; mkl/2016.4.072 ; hdf5/1.8.20-gcc-s; emacs/25.1 ; gcc/6.3.0 ; cmake/3.7.2 ; perl/5.20.0. During the configure step, MathOpenMP is not found with the following message:; ```; -- Math lib search order is MKL;OPENBLAS;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found BLAS: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- LAPACK will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found LAPACK: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE) ; -- Found LAPACK MKL: /global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so;...; ```. and then cmake ends without errors. Proceeding with building, it of course fails since it can't find MathOpenMP. I found the solution in issue #1041 : hint at the location of libiomp5 using `-DOpenMP_LIBRARY_DIRS`. However, the fact that cmake terminates without any error message seems suboptimal, since less experienced users might spend a long time recompiling to track down an error that could actually be diagnosed at configure time.; Also, I did not look into extreme detail but I could not find this CMake hint in the `installation from source` part of the manual.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1118:280,message,message,280,https://psicode.org,https://github.com/psi4/psi4/issues/1118,2,['message'],['message']
Integrability,I'm compiling the latest master of Psi4. SNS-MP2 automatic download failed with ; ``Cloning into 'snsmp2_external'...; fatal: invalid reference: a035c27; CMake Error at /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/snsmp2/snsmp2_external-prefix/tmp/snsmp2_external-gitclone.cmake:75 (message):; Failed to checkout tag: 'a035c27'; ``; Looking up the SNS-MP2 Git I found the tag of the current release to be dd286d3. I replaced it in ``external/downstream/snsmp2/CMakeLists.txt`` and the compilation proceeded.; Is this actually the correct version for SNS-MP2? Should I submit a PR with this tiny change?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1425:320,message,message,320,https://psicode.org,https://github.com/psi4/psi4/issues/1425,1,['message'],['message']
Integrability,"I'm finding non-deterministic energies for cd-mp2, depending on amount of extraneous stuff commented in the input file. For example, the below works as is, but gives a different answer when the unused molecules are commented out (not only molecules, but irrelevant keywords can cause the problem, too). The problem shows up in the final output as correlation energy has wrong sign and not matching sum of aa, ab, bb contributions. At first I though it was because you're setting `EcorlL` but printing `Ecorl`, @bozkaya , but that turns out to be innocent. I've got a valgrind if that'll help. ```; molecule methane {; C 0.0000000 0.0000000 3.0826195; H 0.5868776 0.8381742 3.4463772; H -1.0193189 0.0891638 3.4463772; H 0.0000000 0.0000000 1.9966697; H 0.4324413 -0.9273380 3.4463772; }. molecule hf {; H; F 1 0.917; }. molecule bh_h2p {; 1 2; B 0.10369114 0.00000000 0.00000000; H -1.13269886 0.00000000 0.00000000; H 3.00000000 0.37149000 0.00000000; H 3.00000000 -0.37149000 0.00000000; }. set basis cc-pvdz; set scf_type df; set guess sad; set freeze_core true; set e_convergence 8; set d_convergence 7. set reference uhf; set mp2_type cd; energy('mp2'); print_variables(). compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST. ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914741; REF Energy (a.u.) : -25.94513055914741; Alpha-Alpha Contribution (a.u.) : -0.00171224403804; Alpha-Beta Contribution (a.u.) : -0.05664223456972; Beta-Beta Contribution (a.u.) : -0.00005535856885; Scaled_SS Correlation Energy (a.u.): -0.00058920086896; Scaled_OS Correlation Energy (a.u.): -0.06797068148366; CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150004; CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408805; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973553; CD-MP2 Corr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244:51,depend,depending,51,https://psicode.org,https://github.com/psi4/psi4/issues/244,1,['depend'],['depending']
Integrability,"I'm in the process of implementing forces in my own code, ERKALE. Related; to this, I was looking at the nuclear attraction integral derivative code; in PSI. Interestingly, it would seem that there is a bug in PSI: the loop limits; are the same in the derivative code as in the normal attraction integral; code. The relevant code in src/lib/libmints/osrecur.cc is. ```; int mmax = am1 + am2;. double *F = new double[mmax+1];. // Form Fm(U) from A20; calculate_f(F, mmax, u);. // Perform recursion in m for (a|A(0)|s) using A20; for (m=0; m<=mmax; ++m) {; vi_[0][0][m] = tmp * F[m];; }; for (m=0; m<=mmax-1; ++m) {; vx_[0][0][m] = 2.0*zeta*PC[0]*vi_[0][0][m+1];; vy_[0][0][m] = 2.0*zeta*PC[1]*vi_[0][0][m+1];; vz_[0][0][m] = 2.0*zeta*PC[2]*vi_[0][0][m+1];; }; ```. Table X in the Obara-Saika paper states that; (s | Au | s)^(0) = 2 zeta ( Pu - Cu ) (s | A0 | s)^(1). If you look at what the code above does, it gives a plain zero for this; integral. Furthermore, if you look at the recursion formulas for the integral derivatives A(mu), you see that they are equivalent to the case A(0) with an additional term depending on A(mu-1i). However, in the initializations and the recursions the derivatives only go to mmax-1, not mmax.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3:1110,depend,depending,1110,https://psicode.org,https://github.com/psi4/psi4/issues/3,1,['depend'],['depending']
Integrability,"I'm posting this for discussion before I start coding anything. I was hoping to have some more details on prefactors, but I've both fallen ill and been given a shift in priorities, so I'm posting what I have in the interests of not wasting more time. I'm hoping to have more to say on the prefactor problem when I've recovered. @kcpearce's plans for MP2 hessians are related, but not the part of the project that I'll be focusing on. ## Motivation; Several different groups of Psi developers are dissatisfied with Psi's current technology for correlated derivatives.; * At Emory, @fevangelista has recently implemented gradients for DSRG-PT2 via a standalone code interfaced to Psi. Getting those working required consulting three(!) other experienced Psi developers and borrowing code from a fourth because the assumptions of the `libmints/libtrans` machinery are undocumented and confusing.; * At University of Georgia, the DCT code currently has to go through several contortions to be compatible with the gradient code. It has to [rewrite part of libtrans for RHF gradients](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_sort_mo_tpdm.cc) because the developer could not figure out what to send libtrans otherwise. It has to [convert LibDPD buffers into LibIWL](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L4815) buffers so `libtrans` can [convert those back to LibDPD buffers](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/integraltransform_sort_mo_tpdm.cc), but sorted differently. It also has to [re-index](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L3839) its own 1PDM and energy-weighted density matrix, and merge [density matrix blocks into a single density matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L3789). These tasks shouldn't be necessary.; * @edeprince3 has also [rewritten parts of libtrans](https://github.com/edeprince3/v2rdm_casscf/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:664,interface,interfaced,664,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['interface'],['interfaced']
Integrability,"I'm trying to optimize the geometry of ethylammonium cation using psi4. I have downloaded the latest version and an optimization of a smaller molecule ran with no trouble. This one fails with the error; qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]:; The complete output file is attached. I don't understand the error message. Can anyone explain it to me, please?. Anthony Stone. [ethylammonium.txt](https://github.com/psi4/psi4/files/7090210/ethylammonium.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2287:380,message,message,380,https://psicode.org,https://github.com/psi4/psi4/issues/2287,1,['message'],['message']
Integrability,"I'm trying to run some simple x2c jobs using the new Karlsruhe x2c basis sets. The SVP jobs run fine, but the larger basis sets cause problems. For instance,; ```; molecule {; units bohr; 0 1; Ag; Ag 1 4.60; }. set basis x2c-TZVPall-decon; set basis_relativistic x2c-TZVPall-decon; set relativistic x2c; set scf_type direct; set df_scf_guess false; set dft_radial_points 99; set dft_spherical_points 590. energy('svwn'); ```; fails to converge. For SVP, I get; ```; The 1-norm of |H_X2C - H_Dirac| is: 0.000000088631; ```; but for TZVP; ```; The 1-norm of |H_X2C - H_Dirac| is: 181094.365380967443. WARNING: The X2C and Dirac Hamiltonians have substatially different eigenvalues!; This is probably caused by the recontraction of the basis set.; ```. This must be related to linear dependencies in the basis. pyscf appears to run the same calculations without problems. It uses a threshold for small exponents for the small exponents (https://programtalk.com/vs2/python/12572/pyscf/scf/x2c.py/ line 68); maybe one should also be used in psi4?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/868:781,depend,dependencies,781,https://psicode.org,https://github.com/psi4/psi4/issues/868,1,['depend'],['dependencies']
Integrability,"I've seen a few forum topics about users with a `wfn` file wanting to use those orbitals from one computation wanting to reuse those orbitals for a different computation. Example: [here](http://forum.psicode.org/t/read-in-from-scf-with-psi4-core-wavefunction-from-file/1467). While this can be done, the answer is non-obvious and not documented. We have documentation on what the `from_file` and `to_file` commands do, but I'm aware of no documentation on how that interfaces with orbital reading technology. We should document this, for sure, but we should also think about if we want to make a simpler way to do this, since it seems to be a common problem. For instance, would it be possible to add a new method to the wavefunction class that will set a wavefunction to the scratch wavefunction for a molecule? Or would this create additional problems?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1678:465,interface,interfaces,465,https://psicode.org,https://github.com/psi4/psi4/issues/1678,1,['interface'],['interfaces']
Integrability,"If a user decides to do a DFT computation on an open-shell molecule via the Python API, say on OH (doublet), but forgets to specify the reference, there is a strange memory effect that require restarting the kernel. Here is an example. Suppose we run this code in a cell:; ```python; import psi4; psi4.geometry(""""""; O; H 1 1.0; """"""); psi4.energy(""B3LYP/def2-SVP""); ```; This will yield the error message:; ```; RuntimeError: ; Fatal Error: RHF: RHF reference is only for singlets.; Error occurred in file: /home/jovyan/psi4/psi4/src/psi4/libscf_solver/rhf.cc on line: 94; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); ```. If we try to fix the error by specifying the correct reference, i.e., by **adding a new cell** with the following code:; ```python; psi4.set_options({'REFERENCE' : 'UKS'}); psi4.energy(""B3LYP/def2-SVP""); ```; we still give the same error message. This problem does not affect HF computations.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2372:396,message,message,396,https://psicode.org,https://github.com/psi4/psi4/issues/2372,2,['message'],['message']
Integrability,"If the name of the installation directory is over a certain threshold and you try to run gdma, it will crash. Probably just needs a longer string somewhere that my shallow explorations have not found. This will _not_ be fixed for 1.1, so just documenting the issue. Will add the error message when I hit it again.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/667:285,message,message,285,https://psicode.org,https://github.com/psi4/psi4/issues/667,1,['message'],['message']
Integrability,Implement interface with pyddx,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767:10,interface,interface,10,https://psicode.org,https://github.com/psi4/psi4/pull/2767,1,['interface'],['interface']
Integrability,Implementation of interface to i-pi to enable molecular dynamics simulations with psi,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057:18,interface,interface,18,https://psicode.org,https://github.com/psi4/psi4/pull/1057,1,['interface'],['interface']
Integrability,"Improve PSIO error messages for READ, WRITE and LSEEK",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756:19,message,messages,19,https://psicode.org,https://github.com/psi4/psi4/pull/2756,1,['message'],['messages']
Integrability,"In the process of debugging $#748 I noticed that after following the install instructions [here](http://www.psicode.org/psi4manual/master/conda.html#how-to-use-conda-to-compile-psi4-faster-and-easier), that some of the install_name_tool / placeholder / rpath'y stuff for some of the dependencies looks wrong. I don't know if this is causing any issues or not, but it looks potentially incorrect. ```; $ otool -L /Users/mcgibbon/miniconda/envs/p4dev/lib/libdkh.dylib; /Users/mcgibbon/miniconda/envs/p4dev/lib/libdkh.dylib:; 	@rpath/libdkh.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libgfortran.3.dylib (compatibility version 4.0.0, current version 4.0.0); 	@rpath/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1); 	/Users/ray/mc-x64-3.5/conda-bld/gcc-4.8_1477649012852/_b_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_plac/lib/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); 	@rpath/libquadmath.0.dylib (compatibility version 1.0.0, current version 1.0.0); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/749:283,depend,dependencies,283,https://psicode.org,https://github.com/psi4/psi4/issues/749,1,['depend'],['dependencies']
Integrability,Include ghost atoms in PCMsolver interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1977:33,interface,interface,33,https://psicode.org,https://github.com/psi4/psi4/pull/1977,1,['interface'],['interface']
Integrability,Inconsistency in numpy wrappers,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/639:23,wrap,wrappers,23,https://psicode.org,https://github.com/psi4/psi4/issues/639,1,['wrap'],['wrappers']
Integrability,Inscrutable LIBPSIO Message,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2224:20,Message,Message,20,https://psicode.org,https://github.com/psi4/psi4/issues/2224,1,['Message'],['Message']
Integrability,"Installing `ambertools >=20` alongside `psi4` on MacOS with:. ```; conda create --name psi4-at-test -c conda-forge -c psi4/label/dev ""ambertools >=20"" psi4; ```. results in unresolvable dependencies. Using `mamba` instead of `conda` for dependency resolution gives potentially useful output:; ```; Encountered problems while solving.; Problem: nothing provides gcc-5-mp needed by psi4-1.2a1.dev458+efadaad-py35_gnu_0; ```; This problem was first reported by @SimonBoothroyd, hampering MacOS tests for [openff-recharge](https://github.com/openforcefield/openff-recharge).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2024:186,depend,dependencies,186,https://psicode.org,https://github.com/psi4/psi4/issues/2024,2,['depend'],"['dependencies', 'dependency']"
Integrability,Integrals threading error messages,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596:26,message,messages,26,https://psicode.org,https://github.com/psi4/psi4/issues/596,1,['message'],['messages']
Integrability,Integrating adcc with Psi4,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744:0,Integrat,Integrating,0,https://psicode.org,https://github.com/psi4/psi4/pull/1744,1,['Integrat'],['Integrating']
Integrability,Interface Psi4 to GauXC's sn-LinK,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:0,Interface,Interface,0,https://psicode.org,https://github.com/psi4/psi4/pull/3150,1,['Interface'],['Interface']
Integrability,Interface with TREXIO,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847:0,Interface,Interface,0,https://psicode.org,https://github.com/psi4/psi4/issues/2847,1,['Interface'],['Interface']
Integrability,Interfaced Yukawa Libint2 ERI Kernel,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2386:0,Interface,Interfaced,0,https://psicode.org,https://github.com/psi4/psi4/pull/2386,1,['Interface'],['Interfaced']
Integrability,"It appears Psi4 includes a hardcoded list of libxc functional names and ids in psi4/driver/procrouting/dft_funcs/libxc_xc_funcs.py. This should be eliminated in favor of using libxc's own routines for parsing the functionals: ```XC(functional_get_name)(func_id)``` and ```XC(functional_get_number)(str)```. This will eliminate the need to maintain a functional list in psi4, making all newly added libxc functionals available in Psi4 as soon as the underlying libxc library is updated.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/793:188,rout,routines,188,https://psicode.org,https://github.com/psi4/psi4/issues/793,1,['rout'],['routines']
Integrability,"It appears that -jN compilations – I typically build with -j4 – are failing because of incorrect blocking of dependencies. In at least one case, the build reaches libmints before libint is complete, resulting in a missing libint.h header file. When I compile serially, everything runs smoothly. However, it's not clear to me what has changed in the compilation infrastructure in the last day or so to cause this problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/219:109,depend,dependencies,109,https://psicode.org,https://github.com/psi4/psi4/issues/219,1,['depend'],['dependencies']
Integrability,"It was revealed that single point can behave a little differently between `set basis bas; energy(mtd)` and `energy(mtd/bas)` calls. (copied from #2575). https://github.com/psi4/psi4/pull/2575#discussion_r876092414. Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. So after DDD, the two approaches behave the same. But psio errors aren't user friendly. Should we reconsider whether to auto clean after an energy() call? Advanced users would need to save more files explicitly. Maybe should clean() _before_ an energy() call.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2583:228,wrap,wrapper,228,https://psicode.org,https://github.com/psi4/psi4/issues/2583,1,['wrap'],['wrapper']
Integrability,"It would be great to move the finite difference code Python-side for a variety of reasons. This would require the following steps:; - [x] Finished exporting `CdSalcList` to Python, see `psi4/src/export_mints.cc:512`. Some decisions will need to be made about the matrix factory input (which isn't used) and the ""need irreps"" keyword might want to be nicely wrapped for Python.; - [x] Pop out `fd_geoms_1_0` / `fd_1_0 Python side and add unit tests. Explore various interface types. I know a big one to consider is to use dictionaries rather than list so that we can do something like: compute gradient, do some checks, compute Hessian without duplicating computations, etc.; - [x] Move the rest of the fd code Python side.; - [x] Replace C calls with Py calls and remove C++ code. Many folks might want to comment on this so please make a PR after/during step one for review.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884:357,wrap,wrapped,357,https://psicode.org,https://github.com/psi4/psi4/issues/884,2,"['interface', 'wrap']","['interface', 'wrapped']"
Integrability,Its speed did not suit the project for which it was added. Its interface has been broken for a year or two. Its demise is fittingly awarded to @andysim.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1780:63,interface,interface,63,https://psicode.org,https://github.com/psi4/psi4/issues/1780,1,['interface'],['interface']
Integrability,LGTM & CBS wrapper fix,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/469:11,wrap,wrapper,11,https://psicode.org,https://github.com/psi4/psi4/pull/469,1,['wrap'],['wrapper']
Integrability,Large (over 1000 bfs ) CCSD(T) calculations are in principle possible with DF and FNO approximation but e.g. this routine may require very large amounts of memory and is possibly not accounted for in the memory estimation.; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/dftensor.cc#L134,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1372:114,rout,routine,114,https://psicode.org,https://github.com/psi4/psi4/issues/1372,1,['rout'],['routine']
Integrability,"Launching GDMA calculations from a python script or python interpreter causes a sudden crash. Ouptu files indicates that previous steps finish with no eroor and a GDMA input file is created, as well as a log file (fort.52, attached) with this message: `Could not open psi4 output for writing.unit = 51`. On the contrary, launching the same calculations with the psi4 executable does not produce any error. This bug was originally reported and discussed on the [psi4 forum](http://forum.psicode.org/t/psi-gdma-causes-python-to-crash-could-not-open-psi4-output-for-writing-unit-51/1126?u=flolangenfeld). The bug can be reproduce using the sample gdma h2o.dat file and its [python equivalent](http://forum.psicode.org/t/psi-gdma-causes-python-to-crash-could-not-open-psi4-output-for-writing-unit-51/1126/4?u=flolangenfeld)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1334:243,message,message,243,https://psicode.org,https://github.com/psi4/psi4/issues/1334,1,['message'],['message']
Integrability,"Lingering issues for finalizing CheMPS2:; - [ ] Make sure can detect Debian installation of CheMPS2 in ""list of files"" https://packages.debian.org/sid/libchemps2-dev ; - [ ] make up new conda package; - [ ] add conda package to metapackage; - [ ] add chemps2.rst to interfaces in docs; - [ ] add chemps2 to binary; - [ ] review keywords; - [ ] add acceptance for Intel redistributable for `chemps2.so`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/150:266,interface,interfaces,266,https://psicode.org,https://github.com/psi4/psi4/issues/150,1,['interface'],['interfaces']
Integrability,"MP2 only requires the `(ia|ia)` block of two-electron integrals. In density-fitting, this means only the `(P|Q)^-1/2 (Q|ia)` block of three-center ERIs is needed. Rob's `dfmp2` code transforms the `|μν)` integrals to `|ia)` first and then multiplies by `(P|Q)^-1/2`. Ugur's code multiplies by `(P|Q)^-1/2` first and then transforms the `|μν)` quantities to `|ia)`. I notice that at least for RHF (UHF not tested) Rob's code is much faster than Ugur's for this integral transformation step. Which isn't too surprising. The integral transformations have the same scaling, but Rob's `(P|Q)^-1/2` step is _O(aux^2 mo^2)_, while Ugur's is _O(aux^2 occ vir)_. Ugur's procedure makes sense in the general case where you also need `|ii)` and `|aa)` quantities, but not for MP2. After #1390 goes in, @bozkaya, would it make sense to have custom logic for DFMP2 to change the order of contractions? I think we would see significant speedups.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1726:875,contract,contractions,875,https://psicode.org,https://github.com/psi4/psi4/issues/1726,1,['contract'],['contractions']
Integrability,MRCC interface broken with MRCC 2022 release,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2497:5,interface,interface,5,https://psicode.org,https://github.com/psi4/psi4/issues/2497,1,['interface'],['interface']
Integrability,MRCC interface fails for quadruplet,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/915:5,interface,interface,5,https://psicode.org,https://github.com/psi4/psi4/issues/915,1,['interface'],['interface']
Integrability,MRCC interface is not working,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:5,interface,interface,5,https://psicode.org,https://github.com/psi4/psi4/issues/3159,1,['interface'],['interface']
Integrability,"MRCC-related CTests pass with an older version (2019 with some unknown patches) of MRCC, but the 2022 release broke the interface (again?).; For what its worth, it also no longer works with Molpro 2015. ```; (p4dev) gytibor@CRD-MILAN-3:~/psi4/objdir$ ctest -L mrcc -j`getconf _NPROCESSORS_ONLN` --rerun-failed --output-on-failure; Test project /home/gytibor/psi4/objdir; Start 499: mrcc-ccsdt; Start 500: mrcc-ccsd_t_; Start 501: mrcc-ccsdt_q_; Start 502: mrcc-rohf_ccsdt_q_; Start 503: mrcc-optfreq; 1/5 Test #499: mrcc-ccsdt .......................***Failed 0.62 sec; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /tmp/mrcc_67625/KEYWD; Image PC Routine Line Source; dmrcc 0000000001284F08 Unknown Unknown Unknown; dmrcc 00000000012A12A2 Unknown Unknown Unknown; dmrcc 00000000004AE4BD Unknown Unknown Unknown; dmrcc 0000000000507E55 Unknown Unknown Unknown; dmrcc 000000000040D9DD Unknown Unknown Unknown; dmrcc 00000000004021AA Unknown Unknown Unknown; dmrcc 0000000000400DF2 Unknown Unknown Unknown; dmrcc 00000000013571F9 Unknown Unknown Unknown; dmrcc 0000000000400CCA Unknown Unknown Unknown; Traceback (most recent call last):; File ""/home/gytibor/psi4/objdir/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 27, in <module>; File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4732, in run_mrcc; for line in open('iface'):. FileNotFoundError: [Errno 2] No such file or directory: 'iface'. Printing out the relevant lines from the Psithon --> Python processed input file:; h 1 1.0 2 104.5; """""",""h2o""); core.IO.set_default_namespace(""h2o""); core.set_global_option(""BASIS"", ""cc-pvdz""); core.set_global_option(""FREEZE_CORE"", ""true""); --> energy('mrccsdt'); compare_values( 8.801465529972, variable(""NUCLEAR REPULSION ENERGY""), 6, 'N",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2497:120,interface,interface,120,https://psicode.org,https://github.com/psi4/psi4/issues/2497,2,"['Rout', 'interface']","['Routine', 'interface']"
Integrability,Make ENABLE_XHOST flag checks dependent on compiler brand.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2377:30,depend,dependent,30,https://psicode.org,https://github.com/psi4/psi4/pull/2377,1,['depend'],['dependent']
Integrability,"Modifies the exception translator to communicate the file() and line() information to the python exception wrapper class. When debugging a plugin (my use case), this makes it much easier to figure out the source of an exception that's thrown from C++ as `throw PSIEXCEPTION('message')`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/152:107,wrap,wrapper,107,https://psicode.org,https://github.com/psi4/psi4/pull/152,2,"['message', 'wrap']","['message', 'wrapper']"
Integrability,Molden format issue (normalization of contraction coefficients of D and higher),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/60:38,contract,contraction,38,https://psicode.org,https://github.com/psi4/psi4/issues/60,1,['contract'],['contraction']
Integrability,"NTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE TOTAL ENERGY"": (""VALIRON-MAYER FUNCTION COUNTERPOISE TOTAL ENERGY"", 1.7), # note misspelling; ""VALIRON-MAYER FUNCTION COUTERPOISE INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY"", 1.7),; ``` ; - [x] added managed mode for scf gradient. it's not wholly effective at consolidating code, though, since only triggers for `gradient(""hf"")`, not `gradient(correlated)`. digits to compare has to be relaxed, but this has been seen with other qc programs, too.; - [x] Distributed driver should not be advertised for use with QCFractal at this time. It hasn't been tested in a while, and mem, cores, etc. setting may need tweaking in a non-continuous mode. Use it experimentally and report back.; - [x] n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `embedding_charges` kwarg.; - [x] stdsuite: consolidated the caller fn to remove duplicate code. added HF Hessian testing, through DF can't be uncommented until refs released in qcng.; - [x] the addition of ccsd iterations qcvar to dfocc could maybe be reverted. ## Questions; - [x] Any critical eye or independent tests that you can bring to the manybody wrapper much appreciated, @jeffschriber. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:7402,wrap,wrapper,7402,https://psicode.org,https://github.com/psi4/psi4/pull/2575,2,['wrap'],['wrapper']
Integrability,New MRCC Release Broke Psi Interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1866:27,Interface,Interface,27,https://psicode.org,https://github.com/psi4/psi4/issues/1866,1,['Interface'],['Interface']
Integrability,"No merge goes unpunished ... Something of #1475 and the gdma interface aren't playing nicely. I'll look at it, but posting here for general notification and in case anyone takes it up while I do some meetings. ```; (p4dev37) psilocaluser@bash:psinet:/home/psilocaluser/gits/hrw-quaternary/objdir37: (master) stage/bin/psi4 ../tests/gdma/gdma1/input.dat . RHF density not found; Job abandoned; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1523:61,interface,interface,61,https://psicode.org,https://github.com/psi4/psi4/issues/1523,1,['interface'],['interface']
Integrability,"Normally Psi4 gives me helpful error messages but in this case I have poked around a bit and can't figure out how to fix my input. I'm trying to create input files with all basis data supplied from within the file itself, so old jobs are self-documenting. I am trying to run the input below with the latest binary installed via conda. It crashes with the message. ```; Traceback (most recent call last):; File ""<string>"", line 59, in <module>; Boost.Python.ArgumentError: Python argument types in; psi4.scf(str); did not match C++ signature:; scf(void); scf(P7_object, P7_object); ```. Here is the input I am trying to run. I've made some mistake trying to implement what I read in the docs, but I can't figure out what. I retrieved the basis set data in Gaussian 94 format from the EMSL Basis Set Exchange. ```; #methane test. molecule {; #charge multiplicity; 0 1; C0 0.000000 0.000000 0.000000; H0 1.092199 0.000000 -0.000001; H0 -0.364063 0.138497 1.020380; H0 -0.364067 -0.952923 -0.390247; H0 -0.364068 0.814425 -0.630132; }. set globals {; reference RHF; maxiter 999; }. basis {; assign C0 C0bas; assign H0 H0bas; #C 3-21G; [ C0bas ]; cartesian; ****; C 0 ; S 3 1.00; 172.2560000 0.0617669 ; 25.9109000 0.3587940 ; 5.5333500 0.7007130 ; SP 2 1.00; 3.6649800 -0.3958970 0.2364600 ; 0.7705450 1.2158400 0.8606190 ; SP 1 1.00; 0.1958570 1.0000000 1.0000000 ; ****; #H 3-21G; [ H0bas ]; cartesian; ****; H 0 ; S 2 1.00; 5.4471780 0.1562850 ; 0.8245470 0.9046910 ; S 1 1.00; 0.1831920 1.0000000 ; ****; }. scf('energy'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/79:37,message,messages,37,https://psicode.org,https://github.com/psi4/psi4/issues/79,2,['message'],"['message', 'messages']"
Integrability,"OInt::create_sieve_pair_info()` function via the new wrapper function `TwoBodyAOInt::initialize_sieve()`. Multiple JK builds rely on values of variables initialized via `create_sieve_pair_info()` , and `initialize_sieve()` is now used to initialize the required variables if `SCREENING = NONE` is set. In this way, `SCREENING = NONE` can exist with the benefits it provides, while still working with all JK builds. Also, changes are made to ensure that no screening actually occurs in JK builds when `SCREENING` is set to `NONE`. In line with the above, some tests have been expanded. `test_comprehensive_jk_screening.py` has been changed to account for the `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` combinations that were fixed. `test_erisieve.py` has been updated to more thoroughly test `SCREENING=NONE`. It is worth noting that, unfortunately, `TwoBodyAOInt::initialize_sieve()` must be defined per integral engine, and so the fixes of this PR only work with Libint2. The issues this PR tries to fix, still persist if Simint is used instead. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new function to `TwoBodyAOInt`, `initialize_sieve`, which allows for manual initialization of screening variables via `create_sieve_pair_info()` needed for JK builds.; - [X] Uses the above function to fix combinations of `SCF_TYPE`, `SCF_SUBTYPE`, and `SCREENING` which were broken.; - [X] Updates the `test_comprehensive_jk_screening.py` and `test_erisieve.py` test to account for the previously-described fixes. ## Questions; -[] Should we keep the `initialize_sieve` name? I named it as such, because it is basically a light wrapper to manually call `create_sieve_pair_info`. But the name of ""sieve"" might be objectionable. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3060:2514,wrap,wrapper,2514,https://psicode.org,https://github.com/psi4/psi4/pull/3060,1,['wrap'],['wrapper']
Integrability,"Obligatory @susilehtola and @hokru pings. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Improved UKS gradient parallelization. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Commented LSDA gradients; - [x] Synchronizing of RKS and UKS gradient code is **deferred** to a separate PR. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2839:526,Synchroniz,Synchronizing,526,https://psicode.org,https://github.com/psi4/psi4/pull/2839,1,['Synchroniz'],['Synchronizing']
Integrability,"PCM fails with symmetry group coordinates, need to add error message for this to help user",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1939:61,message,message,61,https://psicode.org,https://github.com/psi4/psi4/issues/1939,1,['message'],['message']
Integrability,"PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Internal code has been replaced by an external Python module, QCManyBody; - [x] Several n-body efficiency improvements and a new option `supersystem_ie_only` that computes the IE rather than MBE, useful for trimers and larger.; - [x] bug fix for gradient or Hessian vmfc for max_nbody >=3. ## Dev notes & details; * Unrelated; - [x] updated basis_set_exchange to v0.10 and probably fixed the internal build; - [x] switched internal build of optking to a tag that can work with py312; - [x] qcvar `GEOMETRY ITERATIONS` wasn't actually getting set. `OPTIMIZATION ITERATIONS` is actually listed in the docs glossary, so switched to that and set it.; - [x] added `resp` to the codedeps now that it's on c-f, and thus to the ecosystem testing; - [x] fixed previously excused docs links to qcfractal; - [x] added back dftd4 to ecosystem for py312; * QCManyBody: build; - [x] Adds a new pure-python required dependency, `qcmanybody`, available from c-f or pypi; * QCManyBody: BSSE efficiency improvements/bug fixes; - [x] `bsse_type=cp` + `return_total_data=True` (not default for energy) will now no longer do every species in both supersystem (for cp) and natural (for uncp) basis sets. It will do everything in the supersystem basis (since cp requested) and only monomers in the monomer basis (for rtd=T).; - [x] `driver=g/h` + `return_total_data=False`, an unlikely combination, won't just fail with syntax error; - [x] `bsse_type=vmfc` + `driver=g/h + `max_nbody`>2 are now computed correctly. Previously (at least since v1.6), only the two highest-body terms were getting summed into the contribution, so values were wrong for trimers and above (assuming max_nbody=fragment count).; - [x] `bsse_type=vmfc` + multilevel were running unnecessary calculations, so now more efficient; * QCManyBody output; - [x] the internal driver_nbody code had been setting a lot of terse qcvariables like ""2"", ""3CP"", ""GRADIENT 1"". ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3160:1348,depend,dependency,1348,https://psicode.org,https://github.com/psi4/psi4/pull/3160,1,['depend'],['dependency']
Integrability,Parallelization of integral routines for PE/EFP,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2007:28,rout,routines,28,https://psicode.org,https://github.com/psi4/psi4/issues/2007,1,['rout'],['routines']
Integrability,Print full PSIO error message to cerr as well,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2997:22,message,message,22,https://psicode.org,https://github.com/psi4/psi4/pull/2997,1,['message'],['message']
Integrability,Proper update of post-scf wave-functions for fchk interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/747:50,interface,interface,50,https://psicode.org,https://github.com/psi4/psi4/pull/747,1,['interface'],['interface']
Integrability,Psi4 1.4rc1 in-core DF is very sensitive to linear dependencies,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2211:51,depend,dependencies,51,https://psicode.org,https://github.com/psi4/psi4/issues/2211,1,['depend'],['dependencies']
Integrability,Psi4 interface to MRCC and threading,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1132:5,interface,interface,5,https://psicode.org,https://github.com/psi4/psi4/issues/1132,1,['interface'],['interface']
Integrability,"Psi4 seems to be unable to recognize the symmetry of molecules that should be Cs.; Minimal input:; ```; molecule {; pubchem:fluoroethane ; }; set basis cc-pVDZ; energy('scf'); ```; Output is attached. [Cs_test.log](https://github.com/psi4/psi4/files/8209874/Cs_test.log); I have tried overriding this by manually specifying a Cs symmetry, but that results in an error:; ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: User specified point group (Cs(X)) is not a subgroup of the highest !; ! detected point group (C1). If this is because the symmetry increased, try to !; ! start the calculation again from the last geometry, after checking any !; ! symmetry-dependent input, such as DOCC. !; ! Error occurred in file: /scratch/psilocaluser/conda- !; ! builds/psi4-multiout_1645476997931/work/psi4/src/psi4/libmints/molecule.cc !; ! on line: 2011 !; ! The most recent 5 function calls were: !; ! psi::Molecule::find_point_group(double) const !; ! psi::Molecule::update_geometry() !; ! from_dict(pybind11::dict) !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2463:721,depend,dependent,721,https://psicode.org,https://github.com/psi4/psi4/issues/2463,1,['depend'],['dependent']
Integrability,RHF/ROHF stability analysis is already implemented but following instabilities (`STABILITY_ANALYSIS=FOLLOW`) is only available with UHF. Once we have the generalized Davidson solver (#886) it will be possible to:; - Add RHF/ROHF root following; - Move the UHF stability analysis code to use the solver and maintain a single interface; ; See #973 for some more information.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1005:324,interface,interface,324,https://psicode.org,https://github.com/psi4/psi4/issues/1005,1,['interface'],['interface']
Integrability,"Raise the error that we can't do stability analysis on DFT ""wavefunctions"" before we bother to compute the (potentially very expensive) integrals necessary for this. The same error message is getting raised C-side under the same condition. This commit just raises it sooner, because spending the better part of an an hour computing integrals for no reason is annoying. ## Checklist; - [x] No tests run in addition to quicktests, since this is so simple and mirroring a C-side operation. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1337:181,message,message,181,https://psicode.org,https://github.com/psi4/psi4/pull/1337,1,['message'],['message']
Integrability,Range separations not handled properly in libxc interface for range separated functionals,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1258:48,interface,interface,48,https://psicode.org,https://github.com/psi4/psi4/issues/1258,1,['interface'],['interface']
Integrability,"Rebuilding Psi4 1.3.2 in Fedora rawhide fails with; ```; -- Found PythonInterp: /usr/bin/python3 (found suitable version ""3.12"", minimum required is ""3.5"") ; CMake Error at cmake/FindPythonLibsNew.cmake:94 (message):; Python config failure:; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; ModuleNotFoundError: No module named 'distutils'; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); -- Configuring incomplete, errors occurred!; error: Bad exit status from /var/tmp/rpm-tmp.sQzcRh (%build); ```; The issue here is that distutils was deprecated in Python 3.10 and marked for deletion in 3.12:; https://docs.python.org/3/whatsnew/3.10.html#distutils-deprecated. The file in master has been slightly updated, but still features the use of distutils, so this issue is likely present on the master branch as well.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020:207,message,message,207,https://psicode.org,https://github.com/psi4/psi4/issues/3020,1,['message'],['message']
Integrability,Rehabilitates Cfour interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/730:20,interface,interface,20,https://psicode.org,https://github.com/psi4/psi4/pull/730,1,['interface'],['interface']
Integrability,"Related issue: [2577](https://github.com/psi4/psi4/issues/2577). Using a similar script as the previous reporter (using Psi4 1.9.1 and this build; `conda install -n $VENV_PSI4 psi4 numpy scipy dftd3-python dftd4-python gcp-correction python=$PYTHON_VERSION -c conda-forge`); ```; import psi4; psi4.set_options({'reference': 'uhf', 'stability_analysis': 'check'}); mol = psi4.geometry(""""""; 0 1; O; """""");; psi4.energy('wB97X-D3BJ/def2-TZVPD', molecule=mol); ```. I get the NYI message:; `psi4.driver.p4util.exceptions.ValidationError: Stability analysis not yet supported for XC functionals.`. Is the implementation of stability check for DFT on the roadmap for the near future? This would be very helpful especially when running UKS as we have observed that open shell systems often have instabilities in the SCF. . I also tried with `PBE/6-31G` and still get this exception. However, this [merged PR](https://github.com/psi4/psi4/pull/2849) implemented stability check for GGA functionals - is this a bug? The NYI message looks like it's triggered for every DFT functional ([see this line](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/scf_proc/scf_iterator.py#L578)), whereas [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/scf_proc/subclass_methods.py#L129) the program only raises the error if the functional is meta or needs vv10.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3236:475,message,message,475,https://psicode.org,https://github.com/psi4/psi4/issues/3236,2,['message'],['message']
Integrability,"Related to issue #414 : when using the GCC 5.2 trick reported [here](http://psicode.org/psi4manual/master/build_planning.html#faq-modgcc) AND building CheMPS2, which requires to specify the -DCMAKE_AR and -DCMAKE_RANLIB variables, the build fails with the message:. `sorry - this program has been built without plugin support`. I traced it back to gcc-ar for both gcc5.2 from conda and gcc4.8 from the local system being built without plugin support. After more staring, it looks like both gcc-ar are wrappers which call the same /usr/bin/ar, which was built without plugin support. Anyone can think of a workaround for this ? Could we install a local ar in the conda environment and have gcc5.2 call this one, for example ?. (Note: Edited for clarity.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660:256,message,message,256,https://psicode.org,https://github.com/psi4/psi4/issues/660,2,"['message', 'wrap']","['message', 'wrappers']"
Integrability,Remove direct pthread dependency,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199:22,depend,dependency,22,https://psicode.org,https://github.com/psi4/psi4/pull/1199,1,['depend'],['dependency']
Integrability,Reorder dfocc:dfmp2 Contractions to Remove Bottleneck,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1726:20,Contract,Contractions,20,https://psicode.org,https://github.com/psi4/psi4/issues/1726,1,['Contract'],['Contractions']
Integrability,"Replace sq_rsp(...) with a new DSYEV wrapper, part 1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2686:37,wrap,wrapper,37,https://psicode.org,https://github.com/psi4/psi4/pull/2686,1,['wrap'],['wrapper']
Integrability,"Reproduce with the below env.yml file:. ```yaml; channels:; - conda-forge; - psi4. dependencies:; - python =3.9; - datamol ; - numpy; - scikit-learn; - pytorch >=1.10.2; - tqdm; - jupyterlab; - openmm; - psi4 >=1.6; ```. then `mamba env create -n tmp_psi4 -f env.yml` and the error is. ```; conda-forge/linux-64 Using cache; conda-forge/noarch Using cache; psi4/linux-64 No change; psi4/noarch No change. Looking for: ['python=3.10', 'datamol', 'numpy', 'scikit-learn', ""pytorch[version='>=1.10.2']"", 'tqdm', 'jupyterlab', 'openmm', ""psi4[version='>=1.6']""]. Encountered problems while solving:; - nothing provides intel-openmp needed by psi4-1.6+77475b5-py39hceaf722_0; ```. I tried multiple combination of python and psi4 versions without success. Note that the above has been only tested on a linux machine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621:83,depend,dependencies,83,https://psicode.org,https://github.com/psi4/psi4/issues/2621,1,['depend'],['dependencies']
Integrability,Right now it crashes with no helpful message. @jturney can you take a look?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/52:37,message,message,37,https://psicode.org,https://github.com/psi4/psi4/issues/52,1,['message'],['message']
Integrability,"Run:; ```; molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776 ; }. wfn = energy('scf/cc-pvdz', return_wfn=True)[1]; print(wfn.Fa_subset(""MO"").nph); ```. The result MO basis Fock matrix is not diagonal, as expected. The correct way to transform the SO basis Fock matrix into the MO basis matrix is contraction against the C coefficient matrices. This is not what the `Fa_subset` function does. It instead goes through [a series of matrix mulitplications involving the overlap matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/wavefunction.cc#L1047-L1050). This is the correct transformation rule for the density matrix. Not-so-coincidentally, `Da_subset` goes through exactly the same function, where this behavior is correct. If you try to use the same logic for both helpers, you're going to get one of them wrong, guaranteed. While the mechanism of the bug is clear to me, I'm not sure what the best fix should be. Perhaps we should intercept ""MO"" as a special case in `Fa_subset` so it never sees the `matrix_subset_helper`? Under the hood, the code would return `Fa_->transform(Ca_)`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1989:302,contract,contraction,302,https://psicode.org,https://github.com/psi4/psi4/issues/1989,1,['contract'],['contraction']
Integrability,"Running CMake on my laptop with Fedora 32 results in; ```; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Failed; -- Performing Test CMAKE_CXX_FLAGS [/arch:AVX2] - Failed; CMake Warning at cmake/psi4OptionsTools.cmake:108 (message):; Option unfulfilled as none of -xHost;-march=native;/arch:AVX2 valid; Call Stack (most recent call first):; cmake/psi4OptionsTools.cmake:162 (add_C_or_CXX_flags); cmake/psi4OptionsTools.cmake:187 (add_CXX_flags); cmake/psi4OptionsTools.cmake:202 (add_flags); CMakeLists.txt:134 (option_with_flags); ```; CMakeError.log is; ```; Performing C SOURCE FILE Test test_option failed with the following output:; Change Dir: /home/work/psi4/objdir/CMakeFiles/CMakeTmp. Run Build Command(s):/usr/bin/gmake cmTC_686f3/fast && /usr/bin/gmake -f CMakeFiles/cmTC_686f3.dir/build.make CMakeFiles/cmTC_686f3.dir/build; gmake[1]: Entering directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_686f3.dir/src.c.o; /usr/lib64/ccache/cc -Dtest_option -xHost -xHost -o CMakeFiles/cmTC_686f3.dir/src.c.o -c /home/work/psi4/objdir/CMakeFiles/CMakeTmp/src.c; cc: error: language Host not recognized; cc: error: language Host not recognized; gmake[1]: *** [CMakeFiles/cmTC_686f3.dir/build.make:86: CMakeFiles/cmTC_686f3.dir/src.c.o] Error 1; gmake[1]: Leaving directory '/home/work/psi4/objdir/CMakeFiles/CMakeTmp'; gmake: *** [Makefile:141: cmTC_686f3/fast] Error 2. Source file was:; int main(void) { return 0; }; ```; making it seem that the CMake files aren't even testing the flags. If I change the order in CMakeLists.txt so that `-march=native` comes first, the output is correct:; ```; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2023:283,message,message,283,https://psicode.org,https://github.com/psi4/psi4/issues/2023,1,['message'],['message']
Integrability,"Running e.g. `pcmsolver` calculations with symmetry will lead to a crash:; ```; File ""/Users/kruse/qc/psi4/objdir/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 300, in scf_iterate; upcm, Vpcm = self.get_PCM().compute_PCM_terms(Dt, calc_type). RuntimeError:; Fatal Error: Matrix::gemm error: Number of irreps do not equal.; Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libmints/matrix.cc on line: 1349; The most recent 3 function calls were:; ```. The PCM message suggests c1 symmetry is enforced:; https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1520-L1522; but the `use_c1` option is for making post-SCF c1 wavefunction and not for the SCF itself.; Similar issue with the `cppe` addon for polarizable embedding. Either a graceful exist or actually making a c1 wfn object is desirable.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1978:489,message,message,489,https://psicode.org,https://github.com/psi4/psi4/issues/1978,1,['message'],['message']
Integrability,"Running larger calculations with scf_type pk gives me lots and lots of error messages; ```; $ psi4; thread already exists.; thread already exists.; thread already exists.; ```; and so on. These seem to arise from src/psi4/libpsio/aio_handler.cc. I'm wondering if these really are errors, if they should be printed, and whether stdout instead of the log file is the right place to do it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596:77,message,messages,77,https://psicode.org,https://github.com/psi4/psi4/issues/596,1,['message'],['messages']
Integrability,Ryan thinks this routine seems to be giving wrong values for g-shells. Check.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/47:17,rout,routine,17,https://psicode.org,https://github.com/psi4/psi4/issues/47,1,['rout'],['routine']
Integrability,Saving orbital file can crash if # of MO's changes due to linear dependency shift,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/32:65,depend,dependency,65,https://psicode.org,https://github.com/psi4/psi4/issues/32,1,['depend'],['dependency']
Integrability,Set up integration with Danger.Systems,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/809:7,integrat,integration,7,https://psicode.org,https://github.com/psi4/psi4/pull/809,1,['integrat'],['integration']
Integrability,"Setup: Install Psi4 rc1 for Linux with python 3.9 via the installer from https://psicode.org/installs/v14rc1/. Result: This installation appears to work fine for most molecules, but then has an issue with systems with linear dependencies, specifically when running the in-core DF algorithm. The provided file, `psi4_issue.py`, when run with sufficient memory to run in-core (~40 GB), gives an energy that is low by more than 2 Hartree (should be -1145.943, but gives -1148.711). With scf_type DF and less RAM (thus causing the disk algorithm to run), the energy is correct. Setting s_tolerance to 1e-4 also fixes the problem, at the cost of a little accuracy loss (5e-4 Hartree). I have reproduced this error on several computers, both CentOS and Ubuntu. The next version, psi4 rc2, does not show this problem. It would be nice to know whether this was deliberately fixed, or might still be around. `psi4_issue.py`: https://drive.google.com/file/d/1RTSVVfmXwJNpS4CHtvMYOTBU63J8Z85j/view?usp=sharing",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2211:225,depend,dependencies,225,https://psicode.org,https://github.com/psi4/psi4/issues/2211,1,['depend'],['dependencies']
Integrability,"Several downstream codes do not recognize the new SCF types `mem_DF` and `disk_DF` (introduced in #961) when set directly within the input file. I've attached [a tarball](https://github.com/psi4/psi4/files/2002517/eff-scftype-df.tar.gz) containing several such tests, adapted directly from the existing Psi4 test suite, which attempt to highlight these problems. I've also attached the summary file (from the tarball) separately for easy web viewing [here](https://github.com/psi4/psi4/files/2002535/summary.txt). Additionally worth note is that a few of these downstream codes fail gracefully (e.g., FNOCC for `scf_type mem_df`, as it assumes a disk algorithm) with helpful error messages, but others do not (e.g., CISD energies fail with PSIO errors and DLDF+D09 gradients segfault). However, if failure is unavoidable, we should probably at least be verbose in the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021:681,message,messages,681,https://psicode.org,https://github.com/psi4/psi4/issues/1021,2,['message'],"['message', 'messages']"
Integrability,Show file name in error message,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2801:24,message,message,24,https://psicode.org,https://github.com/psi4/psi4/pull/2801,1,['message'],['message']
Integrability,"Simint Integration, Continued",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625:7,Integrat,Integration,7,https://psicode.org,https://github.com/psi4/psi4/pull/625,1,['Integrat'],['Integration']
Integrability,Simplify EFP routines,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2111:13,rout,routines,13,https://psicode.org,https://github.com/psi4/psi4/pull/2111,1,['rout'],['routines']
Integrability,"Since Psi4:; * is primarily a shared library / Python module (to C++/Py folks, respectively) rather than an executable (`bin/psi4` is light script loading Python module);; * is not necessarily at the top of the call stack, and we've heard from projects who would like to import us;; * is benefiting from the non-attaching and permissive licenses of numerous external projects to supplement Psi4's capabilities, and we want to return the favor,. **we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by the the 1.1 release.**. EDIT: now targeting LGPL-3.0, not +, with PR psi4/psi4#690. The current and historical core developers have signed off on this. The historical peripheral developers are discussing this without any initial objections. We now want to get feedback from the GitHub contributor, user, and packaging community (or anyone not in e-mail communication with the core developers). So please reply with any concerns, constraints, preferences, etc. ##### Dependencies licensing situation; * required library dependencies (current & anticipated): PSFL, LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause ; * optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+, LGPL-3.0+; * optional executable dependencies: GPL-1.0+, Custom; * Psi4 plugins: GPL-2.0+, GPL-3.0+; * conda-wise, we'll build an alternate conda package that doesn't link any GPL libraries or plugins. ##### Queries; * Psi4 is a Python module and hence a dynamic library. I don't know right off how to even build a `psi4.a`. With that in mind, does anyone care about license terms for static linking?; * Any concrete problems that would be solved by a permissive license instead of LGPL?; * Anyone care about sublicensing?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/688:984,Depend,Dependencies,984,https://psicode.org,https://github.com/psi4/psi4/issues/688,4,"['Depend', 'depend']","['Dependencies', 'dependencies']"
Integrability,Small updates to adcc integration,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1892:22,integrat,integration,22,https://psicode.org,https://github.com/psi4/psi4/pull/1892,1,['integrat'],['integration']
Integrability,"So the rotational entropy depends on the rotational symmetry factor (from full symmetry, not computational symmetry) and moments of inertia. And the translational entropy depends on the molecular weight. Now when one does isotopic substitutions, the molecular mass, moments of inertia, and potentially (if an asymmetric substitution) the rotational symmetry factor change. Psi4 uses these changed values to recompute the translational and rotational partition functions. I'm pleased to report that we agree nicely with other programs for standard isotope and different temperatures and nonstandard isotopes and for nonstandard isotopes up through vibrations and enthalpy. For entropy of isotopes, in particular translational and rotational entropy, we hit a snag. The good news is that I think we're right (go @psi-rking) and everyone else is wrong. ; - Q-Chem 4.3 & Molpro 2010.1; - For default isotope H2O, we agree completely; - For non-symmetry-changing D2O, we agree (both trans and rot), as both programs recompute the total molecular mass and the symmetry number is unchanged.; - For symmetry-changing HDO and DTO, we agree for trans entropy. But both programs still use the symmetry number of the parent, so rot entropy disagrees with us but agrees with each other.; - For all isotopologs, vib entropy agrees completely; - NWChem 6.6; - For default isotope H2O, we agree completely; - For _any_ non-default isotope D2O, HDO, DTO; - trans entropy disagrees since the total molecular mass is not recomputed.; - rot entropy disagrees since the symmetry number is not updated. And it disagrees with Q-Chem and Molpro (which also don't update the symmetry number) presumably because by not updating the molecular mass they also don't update the MOI.; - For all isotopologs, vib entropy agrees completely. So, @psi-rking, @jturney, and any others with thermo experience, is psi4 indeed right on this issue? Conditions, key results, and input files below. . Conditions. ```; HF/sto-3g. O -0.000000000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/345:26,depend,depends,26,https://psicode.org,https://github.com/psi4/psi4/issues/345,2,['depend'],['depends']
Integrability,"Some of the MRCC-related tests fail to run, for reasons unrelated to the actual MRCC interface as far as I can tell.; ```; (p4env) gytibor@CRD-CSLW-1:~/qcta$ pytest -m mrcc /home/gytibor/miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.9.12, pytest-7.1.2, pluggy-1.0.0; rootdir: /home/gytibor/miniconda3/envs/p4env/lib/python3.9/site-packages/psi4, configfile: pytest.ini; collected 4121 items / 4114 deselected / 7 selected. ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/test_addons.py . [ 14%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/test_composite.py F [ 28%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/ccsd_t_/test_input.py F [ 42%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/ccsdt/test_input.py . [ 57%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/ccsdt_q_/test_input.py . [ 71%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/optfreq/test_input.py F [ 85%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/rohf_ccsdt_q_/test_input.py . [100%]; .; <snip>; .; ========================================================================================================== short test summary info ==========================================================================================================; FAILED ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/test_composite.py::test_allen_focal_point - NameError: name 'psi4' is not defined; FAILED ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/ccsd_t_/test_input.py::test_mrcc_ccsd_t_ - AssertionError: Using the `local_options` keyword argument is deprecated in fa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2634:85,interface,interface,85,https://psicode.org,https://github.com/psi4/psi4/issues/2634,1,['interface'],['interface']
Integrability,"Sorry, @hokru. I've been trying to build Francesco and Shuhe's [DSRG-PT2 gradient plugin](https://github.com/ustcwsh/Shuhe_Project) to test a theory. (In multiple senses of ""theory."") Shuhe's code was written for Python 2, so Psi rightly complains about invalid syntax. ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 19, in <module>. File ""./../dsrgpt2_plug/__init__.py"", line 45; print ""imported so file: "", sofile; ^; SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""imported so file: "", sofile)?; ```. The error message that Holger's message extractor gives me is less readable. ```; !----------------------------------------------------------------------------------!; ! !; ! "", sofile !; ! , ^ !; ! ,SyntaxError: Missing parentheses in call to 'print'. Did you mean !; ! print(""imported so file: "", sofile)? !; ! !; !----------------------------------------------------------------------------------!; ```. The error extractor should be patched to just report the SyntaxError.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1920:653,message,message,653,https://psicode.org,https://github.com/psi4/psi4/issues/1920,2,['message'],['message']
Integrability,Storage of contraction coefficients,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3038:11,contract,contraction,11,https://psicode.org,https://github.com/psi4/psi4/issues/3038,1,['contract'],['contraction']
Integrability,Synchronize DFT Psivars,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2477:0,Synchroniz,Synchronize,0,https://psicode.org,https://github.com/psi4/psi4/issues/2477,1,['Synchroniz'],['Synchronize']
Integrability,TDDFT Not Triplet Spin-Integrated,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2841:23,Integrat,Integrated,23,https://psicode.org,https://github.com/psi4/psi4/issues/2841,1,['Integrat'],['Integrated']
Integrability,TDSCF psithon interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885:14,interface,interface,14,https://psicode.org,https://github.com/psi4/psi4/pull/1885,1,['interface'],['interface']
Integrability,"Tensor2d::lineq_pople` (PR #2684); - [x] Delete unused function overloads from `libmints`: `Matrix::diagonalize` (PR #2693); - [x] Delete commented out code, an unused `extern FILE*` and unused `#include`s from `mcscf::SCF::energy` (PR #2678). ### New DSYEV wrappers, anti-`sq_rsp(...)` crusade; - [x] Implement two new wrapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `psi4/src/psi4/adc/diagonalize.cc` with new wrapper. Add check for diagonalization failure.; - [x] Replace `sq_rsp(...)` ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:2177,wrap,wrapper,2177,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['wrap'],['wrapper']
Integrability,"Test case 32 from the FH51 subset of [GMTKN55](http://www.thch.uni-bonn.de/tc.old/downloads/GMTKN/GMTKN55/FH51ref.html) computes the isomerization energy between H2C-C5-CH2 and heptatriyne. So as to not to bury the lede: very strange energies result when running H2C-C5-CH2 with wB97X-3c, which I suspect are tied to this message:. ```; !!! WARNING: ECP capability is in beta. Please check occupations closely. !!!; ``` . The energy of H2C-C5-CH2 is computed to be -43.4074821405164926 Eh, and the energy of heptatriyne is computed to be -42.0459519798808898, leading to a predicted ∆E of -854 kcal/mol. The ""correct"" high-level value is -14.30 kcal/mol, and the authors of the wB97X-3c paper report an energy of -13.17 kcal/mol for this system. Similar results are seen when using B3LYP-D4/vDZP or r2SCAN-D4/vDZP, suggesting that vDZP is the common factor here. The orbital occupancies for H2C-C5-CH2 do seem a bit odd to me? I'm not used to seeing such low-energy virtual orbitals... ```; Orbital Energies [Eh]; ---------------------. Doubly Occupied: . 1A -1.094498 2A -1.062498 3A -1.041834 ; 4A -1.016695 5A -0.963137 6A -0.898331 ; 7A -0.834072 8A -0.703197 9A -0.700832 ; 10A -0.661618 11A -0.660116 12A -0.605235 ; 13A -0.596357 14A -0.526703 15A -0.507419 ; 16A -0.419207 . Virtual: . 17A -0.218606 18A -0.112811 19A -0.091525 ; 20A 0.037195 21A 0.048637 22A 0.051338 ; 23A 0.054059 24A 0.105612 25A 0.106004 ; 26A 0.174431 27A 0.193680 28A 0.196900 ; ```. Not sure what ECP factors could be driving these issues, or how to fix this, but thought I should raise an issue. Here's all the input and output files:. Input file for H2C-C5-CH2:; ```; molecule {; C -2.556271805455 -0.181690364655 -0.026620796492 ; C -1.282011805455 -0.085620364655 -0.016410796492 ; C -0.000441805455 0.006819635345 -0.003870796492 ; C 1.281348194545 0.095909635345 0.010599203508 ; C 2.556298194545 0.180969635345 0.026599203508 ; C 3.872538194545 0.268679635345 0.044049203508 ; H 4.487898194545 -0.251640364655 -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:322,message,message,322,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['message'],['message']
Integrability,"The -D_GLIBCXX_ASSERTIONS has been added to the standard Fedora build flags starting from Fedora 28. This turns on cheap range checks for C++ arrays, vectors, and strings, see; https://fedoraproject.org/wiki/Changes/HardeningFlags28. After a lot of work, I was able to get the Fedora package updated to psi4 1.2.1 and package its new dependencies. However, the new, stringent build flags reveal some broken code in psi4. Could you build the code with -D_GLIBCXX_ASSERTIONS and fix all the crashing code?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1255:334,depend,dependencies,334,https://psicode.org,https://github.com/psi4/psi4/issues/1255,1,['depend'],['dependencies']
Integrability,"The CheMPS2 interface is missing support for an additional input value for the parameter `DMRG_SCF_ACTIVE_SPACE`. According to [Psi4 documentation](http://www.psicode.org/psi4manual/1.2/autodoc_glossary_options_c.html#term-dmrg-scf-active-space-dmrg) it can be `INPUT`, `NO` and `LOC`, which map to `0`, `1` and `2` respectively for the variable `WhichActiveSpace_in` in [CheMPS2](https://sebwouters.github.io/CheMPS2/dmrgscfcalcs.html). However, `WhichActiveSpace_in` accepts an additional value of `3` for reordering orbitals without localization. This feature seems to have been introduced in https://github.com/SebWouters/CheMPS2/commit/79fb7c6f2b4cc2d628e5593fc8aa548c572a9e83.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1242:12,interface,interface,12,https://psicode.org,https://github.com/psi4/psi4/issues/1242,1,['interface'],['interface']
Integrability,"The DFT section of the manual at http://www.psicode.org/psi4manual/master/dft.html as well as https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/dft.rst contains references to RC1 in multiple places. Given that 1.0 has been released, I believe the manual should be updated in these parts..; ```; The spherical grids are rotated according to a common set of rules developed during the implementation of SG1. At the moment, the rules for tetrahedral, octohedral, and icosohedral systems are not complete, so there may be some ambiguity in the grid orientation for these systems. A complete grid orientation rule set will be available in RC1. Radial grid types are controlled by the DFT_RADIAL_SCHEME option, which at the moment may be either TREUTLER or BECKE, while the number of radial points are controlled by the DFT_RADIAL_POINTS option, which is any positive integer (typically 50-100). The radial grids are “centered” on the Bragg-Slater radius of each atom, as described in Becke’s 1988 paper. If inaccurate integration is suspected in systems with anions or very diffuse basis functions, the DFT_BS_RADIUS_ALPHA option may be increased from 1.0 to a larger value to force the radial grid to span a larger extent in space. The MultiExp, Mura, and EM radial grids will be available in RC1. The atomic weighting scheme is controlled by the DFT_NUCLEAR_SCHEME option, which may be one of TREUTLER, BECKE, or NAIVE. The faster Stratmann weighting scheme is under development, and will be available in RC1.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/564:1025,integrat,integration,1025,https://psicode.org,https://github.com/psi4/psi4/issues/564,1,['integrat'],['integration']
Integrability,"The MBIS regression reported in #2272 was fixed via #2273, but there's still a few items to tackle. This part needn't be backported. - [ ] oeprop(wfn, ""MBIS_VOLUME_RATIOS"") should be fine (indep oeprop fn), but set scf_properties mbis_volume_ratios; energy(""scf"") will still fail as MBIS fails via QCEngine #2272 reported because those are OEProp class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to OEProps in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2299:573,rout,routes,573,https://psicode.org,https://github.com/psi4/psi4/issues/2299,1,['rout'],['routes']
Integrability,"The PSI4 (0.3.183, 5427c0a) gradient routine does not seem to be giving the correct values when an external field is defined using the QMMM module. I attached two test calculations:; 1) A water dimer with 1 water QM and the second represented as point charges. ```; memory 1 gb; set reference rks; set basis 6-31++G**; set guess sad; set scf_type df. molecule QMregion {; 0 1; O -0.778803000000 0.000000000000 1.132683000000; H -0.666682000000 0.764099000000 1.706291000000; H -0.666682000000 -0.764099000000 1.706290000000; symmetry c1; no_reorient; no_com; }. gradient(""PBE0""). Chrgfield = QMMM(); Chrgfield.extern.addCharge(-0.834,1.649232019048,0.0,-2.356023604706); Chrgfield.extern.addCharge(0.417,0.544757019107,0.0,-3.799961446760); Chrgfield.extern.addCharge(0.417,0.544757019107,0.0,-0.912085762652); psi4.set_global_option_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. 2) A helium atom with a point charge (q=-1) 1 Angstrom away. ```; memory 1 gb; set reference rks; set basis 6-31G*; set guess sad; set scf_type df. molecule QMregion {; 0 1; He 0.0 0.0 0.0; symmetry c1; no_reorient; no_com; }. gradient(""PBE0""). Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1,0.0,0.0,1.8897261245650618); psi4.set_global_option_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. For test 1, the gradient from the water and the water+charges are different, but they do not agree with the forces returned by an equivalent calculation with Gaussian. The isolated water molecule has gradients that agree with the Gaussian forces, but once the charges are added the Gaussian and PSI4 calculations return different results. For test 2, the PSI4 gradient is zero for the for the helium with and without the point charge. The charge has no effect on the results. When I repeated the calculation with Gaussian, there was a finite force on the helium atom when a charge was included. Here are the gradient results I pulled from the output files:. ```; Water+Charges (TIP3P charges: O->-0.834, ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/184:37,rout,routine,37,https://psicode.org,https://github.com/psi4/psi4/issues/184,1,['rout'],['routine']
Integrability,"The SAPT(DFT) module runs correctly using hybrid functionals like PBE0, but cannot be run with GGAs like PBE. I have used the commands:; _set {; scf_type df; sapt_dft_functional PBE; sapt_dft_do_dHF False; sapt_dft_grac_shift_a 0.12589; sapt_dft_grac_shift_b 0.12589; }_. to obtain PBE in this module, but this results in the error message:. _=> Auxiliary Basis Set <=; ; Basis Set: ANONYMOUS400E6A7D; Blend: AUG-CC-PVDZ-JKFIT + MB-SET-RI; Number of shells: 478; Number of basis function: 1452; Number of Cartesian functions: 1697; Spherical Harmonics?: true; Max angular momentum: 4; ; ; Traceback (most recent call last):; File ""/home/alston/Psi4/install/1.2-gcc/bin/psi4"", line 259, in <module>; exec(content); File ""<string>"", line 71, in <module>; File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_proc.py"", line 234, in run_sapt_dft; cache = sapt_jk_terms.build_sapt_jk_cache(wfn_A, wfn_B, sapt_jk, True); File ""/home/alston/Psi4/install/1.2-gcc/lib//psi4/driver/procrouting/sapt/sapt_jk_terms.py"", line 108, in build_sapt_jk_cache; cache[""K_A""] = jk.K()[0].clone(); ; IndexError: list index out of range; ; *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4._. **Perhaps jk.K() is not filled for a GGA?** While GGAs are not expected to yield accurate SAPT(DFT) interaction energies it will be useful to have the ability to use them, if only for testing and benchmarking purposes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/911:332,message,message,332,https://psicode.org,https://github.com/psi4/psi4/issues/911,1,['message'],['message']
Integrability,"The `--new-plugin` and `--new-plugin-makefile` generators are a really awesome idea. Unfortunately, they don't quite work properly with the latest conda binaries from `conda install -c psi4 psi4`, because the `Makefile` is generated with absolute paths to the build machine. For example, I get something like this setting the compiler and include directories in the generated makefile. I assume this works great on your cluster, but no to much on mine:. ```; # Flags that were used to compile Psi4.; CXX = /theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/icpc; CXXDEFS = -DHAVE_DKH -DHAVE_MM_MALLOC_H -DHAVE_MKL_LAPACK -DHAVE_MKL_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H; CXXFLAGS = -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -qopenmp -O3 -no-prec-div -DNDEBUG; LDFLAGS = -static-libstdc++ -static-libgcc -static-intel -wd10237 -static-intel -L/theoryfs2/ds/cdsgroup/psi4-compile/nightly/glibc2.12/usr/lib64 /theoryfs2/ds/cdsgroup/psi4-compile/nightly/glibc2.12/lib64/libpthread.so.0 /theoryfs2/ds/cdsgroup/psi4-compile/nightly/glibc2.12/lib64/libc.so.6; INCLUDES = -I/scratch/cdsgroup/conda-builds/work/build/interfaces/include -I/scratch/cdsgroup/conda-builds/work/build/src/lib -I/scratch/cdsgroup/conda-builds/work/src/lib -I/scratch/cdsgroup/conda-builds/work/include -I/scratch/cdsgroup/conda-builds/work/build/include -I/scratch/cdsgroup/conda-builds/work/build/boost/include -I/home/rmcgibbo/miniconda/envs/2.7/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include; OBJDIR = /scratch/cdsgroup/conda-builds/work/build; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214:1489,interface,interfaces,1489,https://psicode.org,https://github.com/psi4/psi4/issues/214,1,['interface'],['interfaces']
Integrability,"The `cc` module [has](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis.cc) [a](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_RHF.cc) [habit](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_ROHF.cc) [of](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_UHF.cc) [rewriting](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/cclambda/diis.cc) [DIIS](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccresponse/diis.cc) when they really should [just use `libdiis`.](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libdiis/diismanager.h). In addition to code cleanup, I predict an important practical benefit. The central code uses Rob Parrish tricks to treat linearly dependent matrices. In my experience during the DIIS refactor, these often arise close to convergence. So by refactoring this, we can allow for effective DIIS even for tight convergence of the `cc` equations. I have [reason to believe](https://github.com/psi4/psi4archive/commit/2b2eb6c5a710dde180b1ef7a050012069afeae8d) this has a great to deal to do with anomalies in `cc55`. Don't even think about taking this until after #943 is closed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2519:784,depend,dependent,784,https://psicode.org,https://github.com/psi4/psi4/issues/2519,1,['depend'],['dependent']
Integrability,"The `dct` module does not seem to like linear dependencies. Example 1:; ```; molecule { ; o ; h 1 1.0 ; h 1 1.0 2 104.5; }. set {; basis 'aug-cc-pvtz'; s_tolerance 1e-3; }. energy('dct'); ```. The computation runs to completion and gives energies that are at least _plausible_. But the output file is littered with; ```; There was a problem correcting the MO phases.; If this does not converge, try ALGORITHM=TWOSTEP; ```; and `stderr` receives several MKL errors. Example 2:; ```; molecule { ; o ; h 1 1.0 ; h 1 1.0 2 104.5; }. set {; basis 'aug-cc-pvtz'; dct_type df; s_tolerance 1e-3; }. energy('dct'); ```. Using the DF code triggers a segfault. There may well be more examples I haven't found yet as I venture into other parts of the module. Either way, I'm going to be fixing this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2231:46,depend,dependencies,46,https://psicode.org,https://github.com/psi4/psi4/issues/2231,1,['depend'],['dependencies']
Integrability,"The addition of libint2 causes Psi4 to not build. Libint2 is trying to compile the hartree-fock++ test, which depends on Eigen3, which it is not finding for some reason even though I have it installed as a system package. Libint2 tests should be disabled in the Psi4 build, or the Eigen3 dependency added so that the build works even in the lack of a system package. (Note: libint2 is also suffering from the -march issue; the libint2 CMake files need to be updated.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046:110,depend,depends,110,https://psicode.org,https://github.com/psi4/psi4/issues/2046,2,['depend'],"['dependency', 'depends']"
Integrability,"The basisset class states that the unique contraction coefficients are normalized; https://github.com/psi4/psi4/blob/b5f5dea5cc34e51f9b5e3796d9a8eca5e1cb14c2/psi4/src/psi4/libmints/basisset.h#L154. But, what does this really mean? That the contraction is normalized, or that the contraction coefficients are in terms of normalized Gaussian primitives? This should be made clearer in the source.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3038:42,contract,contraction,42,https://psicode.org,https://github.com/psi4/psi4/issues/3038,3,['contract'],['contraction']
Integrability,"The code samples on the [Interface to NumPy page of the documentation](https://psicode.org/psi4manual/master/numpy.html) do not currently run. A forum report says that at the least, `psi4.Matrix` needs to be replaced with `psi4.core.Matrix`. Somebody should check that all the code on that page actually runs, and that it's accessible to non-experts. I've had to link a couple forum users to that page lately. This is a great project for a new developer who wants to learn the fundamentals of the manual.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2087:25,Interface,Interface,25,https://psicode.org,https://github.com/psi4/psi4/issues/2087,1,['Interface'],['Interface']
Integrability,"The correct detection of the D2h subgroup seems to depend on the orientation. In the attached input; are two different geometries at two different orienations, but both Oh symmetry. case 1 was symmetrized using the SYVA code after C1 optimization with DFT (https://www.sciencedirect.com/science/article/pii/S0010465517300310); case 2 was downloaded from a website about symmetry. (see input). input:; [oh.txt](https://github.com/psi4/psi4/files/2320825/oh.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1177:51,depend,depend,51,https://psicode.org,https://github.com/psi4/psi4/issues/1177,1,['depend'],['depend']
Integrability,"The current master branch of libxc includes support for double hybrids, as well as functionals with several range-separation constants (e.g. the HISS functional). It would be great to have Psi4 as an early adopter, so that we could test whether the interface is sane and the implementations are correct. The direct libxc interface will also include functionals like wB97M(2) that aren't available in Psi4 at the moment.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1875:249,interface,interface,249,https://psicode.org,https://github.com/psi4/psi4/issues/1875,2,['interface'],['interface']
Integrability,"The error can appear in form of various crashes (e.g. bad alloc, weird print outs) but it seems ultimately the problem is that ghost atoms do not have an atomic radius for pcmsolver. I finally got a proper error message:. ```; PCMSolver fatal error.; In function initMolecule at line 588 of file /Users/github/builds/conda-builds/pcmsolver_1532565726046/work/src/interface/Meddle.cpp; In the molecule:; Geometry (in Angstrom); Center X Y Z; ------------ ------------ ------------ ------------; N-5.29177e-11 -0.0550546 0; H-0.477098 0.254982 -0.826358; H-0.477098 0.254982 0.826358; H0.954196 0.254982 0; -5.29177e-11 -0.0550546 5.29177; -0.477098 0.254982 4.46541; -0.477098 0.254982 6.11813; 0.954196 0.254982 5.29177; Rotor type: Asymmetric; Some atoms do not have a radius attached.; Please specify a radius for all atoms!; ```. input for testing: [ghost_pcm.txt](https://github.com/psi4/psi4/files/3256204/ghost_pcm.txt). ---. A manual specification is possible as a work-around but automatic would be nice.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1656:212,message,message,212,https://psicode.org,https://github.com/psi4/psi4/issues/1656,2,"['interface', 'message']","['interface', 'message']"
Integrability,"The fitted version of the SAP guess we described in https://aip.scitation.org/doi/10.1063/5.0004046 might be useful for Psi4. Unlike the original version of SAP that I have already implemented in Psi4, this version of the guess doesn't need quadrature at all. Instead, the guess for the electron screening part of the Hamiltonian is formed with density-fitting type routines as; ```; Vsap(u,v) = \sum_A (uv|A); ```; where the As are auxiliary functions. The guess Hamiltonian is then obtained as `Hsap = Hcore + Vsap`, and can be diagonalized to get guess orbitals and orbital energies. The fitted guess is extremely rapid to form, since each nucleus has just one, tightly contracted s-type auxiliary basis function. The implementation should be rather straightforward; the main stumbling blocks are just . - the need to pass in the new type of fitting basis set from Python to the C++ routines and; - the need to translate the auxiliary basis set's contraction coefficients to the proper format (coefficients `c[i].c` get transformed by the exponents `c[i].z` by `c[i].c *= pow(c[i].z/M_PI,1.5)`). Since the implementation will require changes throughout, I'd need some help from the core developers to do this.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2054:366,rout,routines,366,https://psicode.org,https://github.com/psi4/psi4/issues/2054,4,"['contract', 'rout']","['contracted', 'contraction', 'routines']"
Integrability,"The following either gives `NaN` energy or (positive) 60,000 [Eh] depending on MKL version and compile options. All basis sets smaller than aug-cc-pVQZ seem to check out, did not try larger. Other guesses, `s_tolerence`, or fitting basis appear to have no effect on this error. UHF works fine. ```; molecule mol {; 0 2; C -2.83891 -0.84747 -0.20778; N -2.06959 -0.27604 0.77905; C -0.85937 -0.82512 0.74757; N -0.82980 -1.74677 -0.21226; C -2.05910 -1.77487 -0.83179; C -2.45490 0.86620 1.59959; C 0.35903 -2.49473 -0.61265; F -1.01767 1.46174 -1.11980; B 0.28985 1.63764 -0.63648; F 0.23738 1.82826 0.77419; F 0.89453 2.73957 -1.24020; F 1.05039 0.46734 -0.88673; H -0.02604 -0.54755 1.38339; H -2.27287 -2.45330 -1.64959; H -3.86751 -0.55086 -0.37733; H -3.45079 0.68580 2.01748; H -1.72185 0.98138 2.40249; H -2.44673 1.75972 0.96603; H 0.98379 -1.85263 -1.24323; H 0.91655 -2.78676 0.28358; H 0.03922 -3.39046 -1.15377; C 2.81822 0.12352 1.52490; C 3.26768 -0.78277 0.56145; H 3.28632 0.11977 2.50813; H 2.01109 0.81253 1.27433; N 3.64537 -1.55240 -0.23308; }. set {; basis aug-cc-pVQZ; scf_type df; guess gwh; reference rohf; }. energy('SCF'); ```. An example of initial convergence can be seen for UHF/aQZ:. ```; Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -716.29320215568873 -7.16293e+02 1.25967e-02; @DF-UHF iter 2: 27.48017620380119 7.43773e+02 1.97120e-02 DIIS; @DF-UHF iter 3: -561.81810445462588 -5.89298e+02 9.53326e-03 DIIS; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/371:66,depend,depending,66,https://psicode.org,https://github.com/psi4/psi4/issues/371,1,['depend'],['depending']
Integrability,"The following input crashes with a Segfault:. ```; molecule HeLi {; 	0 1; 	He 0.000000000 0.000000000 0.000000000; 	--; 	1 1; 	Li 3.300000000 0.000000000 0.000000000. 	units angstrom; 	no_reorient; }. set globals {; 	basis aug-cc-pVDZ; 	df_basis_scf aug-cc-pVDZ; 	df_basis_sapt aug-cc-pVDZ; 	df_basis_mp2 aug-cc-pVDZ; }. set_memory(32000000000); energy('sapt2+3(ccd)dmp2'); ```. ```; /home/apps/psi/psi4conda/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source ; libpcm.so.1 00002B46FE54BA15 Unknown Unknown Unknown; libpcm.so.1 00002B46FE549637 Unknown Unknown Unknown; ```; etcetera. Output stops suddenly:; ```; <snip>; ==> CCD Dispersion <==. Beginning Monomer A CCD. Iter Energy (H) dE (H) RMS (H); 1 -0.02083174 0.020831739 0.000000000; 2 -0.02587434 0.005042604 0.000504656; 3 -0.02710324 0.001228894 0.000126313; 4 -0.02740459 0.000301348 0.000031758; 5 -0.02747899 0.000074401 0.000008016 DIIS; 6 -0.02750358 0.000024596 0.000002027 DIIS; 7 -0.02750357 -0.000000016 0.000000004 DIIS; 8 -0.02750358 0.000000015 0.000000002 DIIS; 9 -0.02750358 0.000000001 0.000000000 DIIS. Beginning Monomer B CCD; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1564:544,Rout,Routine,544,https://psicode.org,https://github.com/psi4/psi4/issues/1564,1,['Rout'],['Routine']
Integrability,"The following input fails with a segfault; ```; molecule {; 0 5; Fe; }. set basis pcseg-0; set reference rohf; set scf_type pk; set mcscf_type conv; # Full space is [ 9, 2, 2, 2, 0, 3, 3, 3]. # Ar core; set restricted_docc [3, 0, 0, 0, 0, 2, 2, 2]; # spd active space; set ras1 [0, 0, 0, 0, 0, 0, 0, 0]; set ras2 [3, 1, 1, 1, 0, 1, 1, 1]; set ras3 [3, 1, 1, 1, 0, 0, 0, 0]; cas_e, cas_wfn = energy('rasscf', return_wfn=True). # Dynamical correlation from Ar core; set restricted_docc [0, 0, 0, 0, 0, 0, 0, 0]; set ras1 [3, 0, 0, 0, 0, 2, 2, 2]; ras_e, ras_wfn = energy('detci', ref_wfn=cas_wfn, return_wfn=True); ```. There's something wrong in the input or the code, since there's an error message in the log file; ```; ==> Setting up CI strings <==. There are 2730 alpha and 105 beta strings; (subgr_lex_addr): Impossible walk!; The CI space requires 18211 (1.82E+04) determinants and 44 blocks; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1693:691,message,message,691,https://psicode.org,https://github.com/psi4/psi4/issues/1693,1,['message'],['message']
Integrability,"The following input file fails with the following message:. ```; Traceback (most recent call last):; File ""/Users/francesco/Source/psi4/lib/python/inputparser.py"", line 732, in process_input; temp = re.sub('^from __future__ import .*$', future_replace, temp, flags=re.MULTILINE); TypeError: sub() got an unexpected keyword argument 'flags'; ```. I was wondering: is it possible that recent changes to python affect the ability to read user-defined basis sets from input files?. ```; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. basis {; cartesian; H 0; S 3 1.00; 3.42525091 0.15432897; 0.62391373 0.53532814; 0.16885540 0.44463454; ****; O 0; S 3 1.00; 130.7093200 0.15432897; 23.8088610 0.53532814; 6.4436083 0.44463454; SP 3 1.00; 5.0331513 -0.09996723 0.15591627; 1.1695961 0.39951283 0.60768372; 0.3803890 0.70011547 0.39195739; ****; }. energy('scf'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/169:50,message,message,50,https://psicode.org,https://github.com/psi4/psi4/issues/169,1,['message'],['message']
Integrability,"The following snippet of code fails because of the extra space at the end of `'SCF_TYPE '`. ```python; import psi4; psi4.set_options({'SCF_TYPE ' : 'DIRECT'}); ```. This is an innocent error that should be fixed by psi4, or reported back to the user with a readable error message. Simply stripping the option label of left and right spaces would prevent this issue (with no potential side effects). If the option is not found, then psi4 should throw an exception saying something like ""Option `'...'` is not valid."". This is the error message:; ```; ---------------------------------------------------------------------------; AttributeError Traceback (most recent call last); <ipython-input-4-c64c7a4449ad> in <module>; 1 import psi4; 2 ; ----> 3 psi4.set_options({'SCF_TYPE ' : 'DIRECT'}). /usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py in set_options(options_dict, verbose); 444 for k, v, in options_dict.items():; 445 mobj = optionre.match(k); --> 446 module = mobj.group('module').upper()[:-2] if mobj.group('module') else None; 447 option = mobj.group('option').upper(); 448 . AttributeError: 'NoneType' object has no attribute 'group'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2004:272,message,message,272,https://psicode.org,https://github.com/psi4/psi4/issues/2004,2,['message'],['message']
Integrability,"The input; ```; molecule {; H; H 1 0.60; }. set basis cc-pVDZ; set docc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; # STO-3G active space; set active [1, 0, 0, 0, 0, 1, 0, 0 ]; energy('casscf'); ```; fails with the up-to-date master branch with the error message; ```; Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 387, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 519, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 5483, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 153, in mcscf_solver; nci_iter = ciwfn.diag_h(abs(ediff) * 1.e-2, orb_grad_rms * 1.e-3). RuntimeError: ; Fatal Error: DSYEV diagonalizer failed in DETCI SEM!; Error occurred in file: /home/work/psi4/psi4/src/psi4/detci/sem.cc on line: 561; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; """"""); core.IO.set_default_namespace(""""); core.set_global_option(""BASIS"", ""cc-pVDZ""); core.set_global_option(""DOCC"", [ 1, 0, 0, 0, 0, 0, 0, 0 ]); core.set_global_option(""ACTIVE"", [1, 0, 0, 0, 0, 1, 0, 0 ]); --> energy('casscf'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: DSYEV diagonalizer failed in DETCI SEM! !; ! Error occurred in file: /home/work/psi4/psi4/src/psi4/detci/sem.cc on line: 561 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! !; !----------------------------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3096:239,message,message,239,https://psicode.org,https://github.com/psi4/psi4/issues/3096,1,['message'],['message']
Integrability,"The integration runs some checks on PRs, notably that C++ code style conforms to `.clang-format`. ## Description; [Danger.Systems](http://danger.systems/ruby/) provides a DSL to perform checks on PRs. It's a Ruby gem that runs on Travis, reads the `Dangerfile` and comments on a PR through a bot.; The current version of the `Dangerfile`:; 1. **Fails PR** if C++ code style does not comply with `.clang-format`; 1. **Fails PR** if Python code style does not comply with `.style.yapf`; 2. **Warns** if PR is classed as work in progress, _i.e._ contains `[WIP]` in the title; 3. **Warns** if PR is classed as trivial, _i.e._ contains `#trivial` in the title; 4. **Fails PR** if there are merge commits in the history; 5. **Warns** if PR introduced code changes (in subdirectories `psi4`, `external`, `cmake`) without adding tests and/or docs. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Integrate with Danger.Systems; - [x] Danger checks that C++ code style complies with `.clang-format`; - [x] Clean up `.travis.yml` from now useless PPA; - [x] Ignore `build*` directories; - [x] Danger checks that Python code style complies with `.style.yapf`; - [x] Enabled caching of some dependencies on Travis. ## Questions; 1. I think it's better to pull this in once `clang-format` has been run over the whole code base.; 2. Where is a good place to document the behavior of the bot?; 3. Are the commented sections in `.travis.yml` supposed to be there for future use?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/809:4,integrat,integration,4,https://psicode.org,https://github.com/psi4/psi4/pull/809,3,"['Integrat', 'depend', 'integrat']","['Integrate', 'dependencies', 'integration']"
Integrability,"The new CMake system documentation is primarily in the comments within the top level CMakeLists.txt. I have noticed an inconsistency that should either be fixed in the build system or removed from the documentation. . The comment section [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L47) seems to imply that you can download libefp/libint, build them, and then provide the directory containing the appropriate directory containing libintConfig.cmake/libefpConfig.cmake to CMake in the following way. ```shell; cmake -H. -Bobjdir … -Dlibint_DIR=/path/to/libint/share/cmake/libint -Dlibefp_DIR=/path/to/libefp/share/cmake/libefp; ```. Then cmake will detect the previously installed libint/libefp and skip their building. . However, this does not completely work. The initial cmake will indicate `found libint`, then when you go to the build directory and run `make` the `libint_DIR `and `libefp_DIR` argurments are not passed on to cmake for psi4_core and the build errors out with the following message:. ```shell; Performing configure step for 'psi4_core'; loading initial cache file /home/amjames2/newriver/psi4-builds/new-debug/psi4_core-prefix/tmp/psi4_core-cache.cmake; -- The C compiler identification is GNU 5.2.0; -- The CXX compiler identification is GNU 5.2.0; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc; -- Check for working C compiler: /home/amjames2/.conda/envs/py3/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /hom",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/516:1013,message,message,1013,https://psicode.org,https://github.com/psi4/psi4/issues/516,1,['message'],['message']
Integrability,"The new error printing in #1862 seems to struggle when the message it's trying to print contains newlines. Consider the following input file. ```; molecule {; symmetry c1; N; N 1.500; }; set {; basis cc-pVD; }; energy('scf'); ```. This will raise a syntax error because I have a malformed Z-matrix. The new box will print out. ```; !----------------------------------------------------------------------------------!; ! !; ! Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]: symmetry c1 N !; ! N 1.500 !; ! !; !----------------------------------------------------------------------------------!; ```. where the original error message is the more readable. ```; qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remanents under [psi4, xyz, xyz+, psi4+]:; symmetry c1; N; N 1.500; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1867:59,message,message,59,https://psicode.org,https://github.com/psi4/psi4/issues/1867,2,['message'],['message']
Integrability,"The one-electron integrals (OEIs) in psi4 are in the process of being overhauled. The (old) native psi4 Obara-Saika code was recently replaced with an interface to the (new) libint2 library (#2388). I've found that in my specific use case, while the new OEI code is serially faster than the old OEI code, the new OEI code scales surprisingly poorly with multiple cores. . ### Background. I'm in the process of implementing semi-numerical exchange for psi4. The cost of this algorithm is dominated by the calculation of OEIs with the following functional form:; ```; (u | (r - r_g)^{-1} | v),; ```; where `u` and `v` are basis functions, and `r_g` is a point in space on some quadrature. A naive semi-numerical exchange code computes these integrals over all `u`, `v`, and `r_g`, requiring O(N^3) work. In current psi4, integrals of this type can be computed with either the old OS code (via the `MultipolePotentialInt` class) or the new libint2 interface (via the `ElectrostaticInt` class). I've attached a plugin that computes a large number of these OEI integrals with both classes, modeled after a naive semi-numerical exchange code. Here's the pseudocode of this plugin:. ```; # pragma omp parallel for; for grid_point_block in quadrature (B); ; thread = omp_get_thread(); ; for bra in basis (u); for ket in basis (v); for grid point in B (g); ; // integral_computer[thread] is either an ElectrostaticInt or MultipolePotentialInt; integral_computer[thread].compute(u, v, g); ```. Note that the above pseudocode is parallelized over blocks of ~64 grid points. This pseudocode follows the description of the original chain of spheres (COSX) semi-numerical exchange algorithm described [here](https://www.sciencedirect.com/science/article/pii/S0301010408005089). ### Results. Below are timings of the naive semi-numerical integral loop using both the old psi4 integrals and the new libint2 integrals. This benchmark was performed on a butane molecule in a cc-pVDZ basis set and a standard 302/75 quad",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491:151,interface,interface,151,https://psicode.org,https://github.com/psi4/psi4/issues/2491,2,['interface'],['interface']
Integrability,"The only remaining test suite failure now is:. ```; 22/140 Test #84: cdomp2-2 .........................***Failed 1.17 sec; 	Nuclear Repulsion Energy (a.u.)...................................PASSED; 	CD-HF Energy (a.u.)...............................................PASSED; 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Traceback (most recent call last):; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/bin/psi4"", line 269, in <module>; exec(content); File ""<string>"", line 39, in <module>; File ""/<<PKGBUILDDIR>>/builddir/stage/usr/lib/x86_64-linux-gnu/psi4/driver/p4util/util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	CD-OMP2 Total Energy (a.u.): computed value (-129.5440268) does not match (-129.5897884) to 6 digits.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. _Originally posted by @mbanck in https://github.com/psi4/psi4/issues/1457#issuecomment-451647367_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461:690,message,message,690,https://psicode.org,https://github.com/psi4/psi4/issues/1461,1,['message'],['message']
Integrability,"The parameter 2 error always present (test passes), but the failure to converge SVD only seen once so far (test fails) (py39 and mkl 2019.4). Hopefully just an old MKL interface. No difference w/ w/o `MKL_CBWR=AVX`. ```; 354/476 Testing: sapt-exch-disp-inf; 354/476 Test: sapt-exch-disp-inf; Command: ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python3.7"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/runtest.py"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/sapt-exch-disp-inf/input.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/testresults.log"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf/output.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2178:168,interface,interface,168,https://psicode.org,https://github.com/psi4/psi4/issues/2178,1,['interface'],['interface']
Integrability,"The test `pywrap-opt-sowreap` is failing for me with the following error message:. ```; Performing finite difference calculations; 5 displacements needed ...; An error has occurred Py-side; Traceback:; <type 'exceptions.TypeError'>: 'float' object is not iterable: File ""<string>"", line 25, in <module>. File ""/home/avcopan/Documents/code/github/psi4/share/python/driver.py"", line 1158, in optimize; G, wfn = gradient(name, return_wfn=True, molecule=moleculeclone, **kwargs). ```. I did some poking around and it looks like the problem is that this code (see [here](https://github.com/psi4/psi4/blob/master/share/python/driver.py#L1153)):. ```; def optimize(name, **kwargs):; # ...; G, wfn = gradient(name, return_wfn=True, molecule=moleculeclone, **kwargs); psi4.set_gradient(G); thisenergy = psi4.get_variable('CURRENT ENERGY'); ```. breaks when gradient is called in sow-reap mode because it returns `0.0` rather than a matrix-wavefunction tuple (see [here](https://github.com/psi4/psi4/blob/master/share/python/driver.py#L843)):. ```; def gradient(name, **kwargs):; # ...; if dertype == 1:; # ...; else:; # ...; if (opt_mode.lower() == 'sow'):; optstash.restore(); return 0.0; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/291:73,message,message,73,https://psicode.org,https://github.com/psi4/psi4/issues/291,1,['message'],['message']
Integrability,"The user facing error message for PSIO could be improved. A general advice after an PSIO error of sth like: 'check your scratch directory location and how much space you got', could go a long way. Starting of discussion in #1959 (comments copied over). > @JonathonMisiewicz commented 41 minutes ago; @hokru, correct me if I'm wrong, but isn't it fairly formulaic at this point to ask people to check how much memory they gave Psi and then check their scratch directory in the face of a PSIO read error? If it is, I have half a mind to update the error message with this advice. I'd need to check, but I think this is doable, and it would save us a lot of questions. > hokru commented 23 minutes ago; Perhaps a good idea. PSIO should mainly be disk issues IMO. And only memory issues if the C code made bad estimates, right? Unless there are there virtual files that are written to RAM.; PSIO_ERROR: 12 (error writing to file) should in most cases be a disk space issue. > @TiborGY commented 6 minutes ago; Well, I have seen some systems where /tmp is a ramdisk. But usually, if that is the case, the maximum size of /tmp is quite limited. ramdisks or not is the same, I think. Disk is full and the PSI4 memory option has no influence.; But a trend of having `/tmp` as ramdisk questions PSI4's choice of default scratch directory, because ramdisk space does not take away the OS max ram, right? There could be unexpected memory allocation errors for users.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1965:22,message,message,22,https://psicode.org,https://github.com/psi4/psi4/issues/1965,2,['message'],['message']
Integrability,"There have been reports of X2C not being well-behaved in the presence of linear dependencies. Calling on @fevangelista or @susilehtola to give details. Quoting Francesco from Slack:. > I think it is still unclear to me if the general solution is to a) implement an algorithms that eliminates lin. dependencies consistently in both the small and large components of the modified Dirac equation, or even simpler b) define auxiliary basis functions that are linearly independent. Right now X2C solves the Dirac equation in a decontracted computational basis, so when you go up to QZ or higher basis sets you can easily run into linear dependency issues and the code does not handle them correctly.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2201:80,depend,dependencies,80,https://psicode.org,https://github.com/psi4/psi4/issues/2201,3,['depend'],"['dependencies', 'dependency']"
Integrability,"This PR 1) adds a slightly more user-friendly message to a possible exception raised in the F-SAPT post-analysis script and 2) makes the FISAPT_FSAPT_FILEPATH, FISAPT_FSSAPT_FILEPATH, and FISAPT_PLOT_FILEPATH options work without adding a '/' to the end of the option. . On 2), this option only worked properly if the '/' is appended to the end of the directory name (example: ""FISAPT_FSAPT_FILEPATH myfsapt/""), and this only works if done in a set block. Now, this way of setting the option will work, as well as ""FISAPT_FSAPT_FILEPATH myfsapt"" inside and outside of a set block. - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/679:46,message,message,46,https://psicode.org,https://github.com/psi4/psi4/pull/679,1,['message'],['message']
Integrability,This PR adds explicit [permissions section](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions) to workflows. This is a security best practice because by default workflows run with [extended set of permissions](https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token) (except from `on: pull_request` [from external forks](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/)). By specifying any permission explicitly all others are set to none. By using the principle of least privilege the damage a compromised workflow can do (because of an [injection](https://securitylab.github.com/research/github-actions-untrusted-input/) or compromised third party tool or action) is restricted.; It is recommended to have [most strict permissions on the top level](https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions) and grant write permissions on [job level](https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs) case by case.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2723:678,inject,injection,678,https://psicode.org,https://github.com/psi4/psi4/pull/2723,2,['inject'],['injection']
Integrability,"This PR contains the implementation of XDM-enabled density functional theory calculations in psi4. XDM is a dispersion correction in which the dispersion coefficients that enter the asymptotic dispersion formula are calculated post-SCF from the self-consistent electron density and kinetic energy density. XDM maintains the simplicity and accuracy of a damped asymptotic dispersion correction while, at the same time, it calculates the dispersion coefficients from the self-consistent wavefunction. . The XDM energy and gradient are calculated by the [postg](https://github.com/aoterodelaroza/postg) external program, to which the new code interfaces. The implementation is very similar to the way in which psi4 currently interfaces to gCP. In addition, a few XDM-enabled functionals are provided to facilitate its use. A few tests, samples, and documentation are also included in the package. That said, I recommend that you check the XDM/postg documentation meets psi4 standards as I have no way to verify what it looks like in HTML form.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1699:640,interface,interfaces,640,https://psicode.org,https://github.com/psi4/psi4/pull/1699,2,['interface'],['interfaces']
Integrability,"This PR fixes a part of #2012, where requesting to freeze n-th fixed previous shell (using `set freeze_core -n` syntax) would happily carry on, even if an ECP present on a certain atom would substitute more electrons than in the n-th shell. This means the example in #2012 using `freeze_core -2` now throws an exception. The issue of ""smart freezing"" of electrons of alkali metals and a further revamp of the interface (per-atom or per-element spec.) is for a different PR. ## Questions; - [x] Do I need to add a test?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2222:409,interface,interface,409,https://psicode.org,https://github.com/psi4/psi4/pull/2222,1,['interface'],['interface']
Integrability,"This is a short summary on how to get started with PSI4 and Apple Silicon; ---. Overview:. - Python/Package management options:; - osx-arm64 conda-forge environment: https://github.com/conda-forge/miniforge (untested, limited packages); - homebrew . - BLAS/LAPACK options: ; - Apple's Accelerate: very fast, no inherent threading. But thread-safe.; - OpenBLAS: available on conda-forge and homebrew. _No optimized kernels for M1_. Much slower than Accelerate Framework. (see https://github.com/xianyi/OpenBLAS/issues/2814); - ???; ---. ## homebrew:; requirred brew packages: `cmake eigen numpy`; for OpenMP: `libomp`; optional: `doxygen jupyterlab pytest gcc` (gcc to get a Fortran compiler); Note: numpy will come with a non-threading OpenBLAS library. ### psi4 python packages:; - `pip3 install pydantic pint py-cpuinfo psutil`. ### docs:; - pip3 install Sphinx nbsphinx python-graphviz sphinx-autodoc-typehints sphinx-automodapi ; - custom theme from `git clone https://github.com/psi4/sphinx-psi-theme.git` (`pip3 install .`); - dont get `sphinx-doc` from brew, it has python3.10 dependency. ### basic build with Accelerate Framework and homebrew python:; - `cmake -H. -Bobjdir -DPython_EXECUTABLE=/opt/homebrew/bin/python3 -DCMAKE_INSTALL_PREFIX=<custom>`; - `export CPLUS_INCLUDE_PATH=/opt/homebrew/include` (for libint2 to find a header); - If `libomp` is found correctly, OpenMP is enabled but only explicit C-side openmp sections are threaded AFAIK, not blas.; - builds everything from scratch and _wow it's fast!_. ### caveats; - Mismatch between numpy(=openblas) and psi4(=Accelerate) libraries.; ---; I may have missed a detail.. These notes will be updated over time.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333:1084,depend,dependency,1084,https://psicode.org,https://github.com/psi4/psi4/issues/2333,1,['depend'],['dependency']
Integrability,"This is the list of issues tied into wavefunction_pass that should be cleared up before the 1.0 release.; - [x] Methods also take the `molecule` kwarg, it is not clear if `ref_wfn` or `molecule` should supersede the other yet (SCF methods can only take a molecule at the moment. `ref_wfn` supersedes `molecule` in all other methods.).; - [x] Not all methods return wavefunctions yet. For example what does a SAPT wavefunction look like?; - [x] psimrcc Wavefunction; - [x] SAPT Wavefunction; - [x] EFP Wavefunction; - [x] Will just pass through the reference wavefunction with a warning; - [x] If I pass SCF a `ref_wfn` with orbitals, the `ref_wfn` orbitals are not used (Thats fine, see above).; - [ ] We would like a SCF level wavefunction to be able to cast itself back C1 symmetry so that we can run symmetry-based SCF and then use this wavefunction in symmetry intolerant code. These transforms are reimplemented in every symmetry tolerant code. (Moved to another ticket); - [ ] Saving of binary `optking` information may break for very complex optimizations (database, cbs wrapper, etc). Optimization proceeds, but always restarts at the first iteration so convergence is slow. (Moved to another ticket); - [x] Plugin examples are starting to show their age. We probably need to overhaul these.; - [x] The documentation needs to reflect the above changes (see #249).; - [x] DF and RI calls should soft fail with a proper error message.; - [x] Cubeprop, Molden, OEProp etc functions should fail better when not passed a wavefunction.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259:1078,wrap,wrapper,1078,https://psicode.org,https://github.com/psi4/psi4/issues/259,2,"['message', 'wrap']","['message', 'wrapper']"
Integrability,"This is the mega-issue for the cleanup of excited-state variables. I come to this as a spinoff of the cc modernization mega-issue, which is a spin-off of the density sanitizing mega-issue. The goal of this mega-issue is to synchronize variable names across TDDFT, EOM, and ADC, per the standard introduced in #2462 and amended slightly in #2475. ### The Standard; We support the following access patterns:; ```; f""{method} ROOT 0 ({initial_state}) -> ROOT {irrep_idx} ({target_state}) EXCITATION ENERGY""; f""{method} TD-HF ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY; f""{method} ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY - {transition} TRANSITION; ```. - `{method}` should include both the _family_ of the method and the _specific method_ used. For example, both `CC` and `CC3`.; - `{global_idx}` is the index of the root, ordered by energy, in the space of all roots.; - `{irrep_idx}`is the index of the root, ordered by energy, in the space of roots of that irrep. This should **never** be larger than `global_idx` and is identical `global_idx` for molecules without symmetry.; - `{initial_state} ^ {target_state} = {transition}`. ### The Status. - [x] DFT; - [x] #2462 - initial cleanup; - [x] (part of) #2477 - set TD-DFT variables with names starting TD-SCF or TD-DFT (maybr both?) in addition to TD-fctl; - [ ] EOM; - [x] #2475 - variables set directly in `cceom`; - [x] Variables set directly in `ccdensity`; - [x] #2514 - Oscillator strengths; - [x] #2525 - Einstein coefficients, rotation strengths; - [x] #2538 - All access patterns ; - [ ] Variables set indirectly, via oeprop; - [X] #2479 - remove mutlipole component variables from being set in oeprop; - [x] #2485 - condense multipole setting functions into one; - [ ] #2541 Rename multipole variables from `oeprop` according to the standard; - [x] ADCC; - [x] #2513 ; - [ ] Final cleanup pass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2486:223,synchroniz,synchronize,223,https://psicode.org,https://github.com/psi4/psi4/issues/2486,1,['synchroniz'],['synchronize']
Integrability,"This issue is a follow up on discussions [here](https://github.com/psi4/psi4/pull/1151#issuecomment-417101476) about adding ATM dispersion to psi4 through `dftd3 -abc`. There were concerns that when run through the psi4 interface, dftd3 wasn't producing the damping-function independent ATM corrections that it should. Running dftd3 command-line with input below _does_ produce uniform values for `E6(ABC)`:; ```; >>> dftd3 s22_16.xyz -func b-p -abc -zero; >>> dftd3 s22_16.xyz -func b-p -abc -bj; >>> dftd3 s22_16.xyz -func b-p -abc -zerom; >>> dftd3 s22_16.xyz -func b-p -abc -bjm; ```; ```; Edisp /kcal,au: -2.0736 -0.00330456; Edisp /kcal,au: -4.4003 -0.00701230; Edisp /kcal,au: -2.0377 -0.00324733; Edisp /kcal,au: -5.2756 -0.00840720; ```; ```; E6(ABC) "" : -0.000110; E6(ABC) "" : -0.000110; E6(ABC) "" : -0.000110; E6(ABC) "" : -0.000110; ```; `s22_16.xyz`; ```; 10; etylene-ethyne dimer; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; ```. If you run the `-bj` through a parameter file. `.dftd3par.local` `1.000000 0.394600 3.282200 4.851600 0.000000 4`. Get the same energies as above; ```; >>> dftd3 s22_16.xyz; _________________________________; ; | DFTD3 V3.1 Rev 1 |; | S.Grimme, University Bonn |; | October 2015 |; | see dftd3 -h for options |; _________________________________; ; Please cite DFT-D3 work done with this code as:; S. Grimme, J. Antony, S. Ehrlich and H. Krieg,; J. Chem. Phys. 132 (2010), 154104; If used with BJ-damping cite also; S. Grimme, S. Ehrlich and L. Goerigk,; J. Comput. Chem. 32 (2011), 1456-1465; For DFT-D2 the reference is; S. Grimme, J. Comput. Chem., 27 (2006), 1787-1799; For DFT-D3M or DFT-D3M(BJ) the reference is; D.G.A. Smith, L.A. Burns, K. Patkowski, and ; C.D. Sherrill, J. Phys. Ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1407:220,interface,interface,220,https://psicode.org,https://github.com/psi4/psi4/issues/1407,1,['interface'],['interface']
Integrability,"This might be rather an issue for https://github.com/piecuch-group/cct3 but will affect psi4 users nonetheless. The following is a minimal input:; ```; import cct3. set {; basis cc-pVDZ; ints_tolerance 1e-11; }. molecule eins {; units bohr; symmetry c1; h -1.000000000000 -2.414213562373 0.000000000000; h -1.000000000000 2.414213562373 0.000000000000; h 1.000000000000 -2.414213562373 0.000000000000; h 1.000000000000 2.414213562373 0.000000000000; }. molecule zwei {; units bohr; symmetry c1; h -2.514213562373 -1.000000000000 0.000000000000; h -2.514213562373 1.000000000000 0.000000000000; h 2.514213562373 -1.000000000000 0.000000000000; h 2.514213562373 1.000000000000 0.000000000000; h -1.000000000000 -2.414213562373 0.000000000000; h -1.000000000000 2.414213562373 0.000000000000; h 1.000000000000 -2.414213562373 0.000000000000; h 1.000000000000 2.414213562373 0.000000000000; }. energy(""cr-cc(2,3)"",molecule=eins); clean(); energy(""cr-cc(2,3)"",momlecule=zwei); ```. The error is:; ```; (base) kruse@sphinx1 /scratch/kruse/CCT3 $ psi4.git -v -s . -n 16 input.dat; forrtl: severe (104): incorrect RECL= specifier value for connected file, unit 250, file /scratch/kruse/CCT3/PA; Image PC Routine Line Source; libifcoremt.so.5 00002AD86592CE75 for__io_return Unknown Unknown; libifcoremt.so.5 00002AD8659522E0 for_open Unknown Unknown; cct3.so 00002AD865620EDF integrals_mp_load Unknown Unknown; cct3.so 00002AD86562C3EB solver_mp_solve_c Unknown Unknown; cct3.so 00002AD8655F75A6 driver_mp_run_cc_ Unknown Unknown; cct3.so 00002AD86563683E cc_ Unknown Unknown; cct3.so 00002AD85AD0AAE1 cct3 Unknown Unknown; ```. The `PA` file is opened for _writing_ with a record length `recl` using orbital dimensions.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2009:1196,Rout,Routine,1196,https://psicode.org,https://github.com/psi4/psi4/issues/2009,1,['Rout'],['Routine']
Integrability,"This problem was already mentioned in passing here: https://github.com/psi4/psi4/issues/662#issuecomment-475861476. This is a simple example input file showing the problem:. ```; molecule {; H; }. set {; scf_type pk; basis ano-rcc; relativistic x2c; reference uhf; }. energy('hf'); ```. I have set my `$PSIPATH` to a directory containing the basis set file (downloaded from EMSL):. ```bash; ll $PSIPATH; total 2.1M; drwxr-xr-x. 2 toon toon 4.0K Apr 29 17:13 .; drwxr-xr-x. 7 toon toon 4.0K Apr 29 16:34 ..; -rw-r--r--. 1 toon toon 2.1M Apr 29 15:49 ano-rcc.gbs; ```. When running Psi4 on this input, I get the following error message:. ```; Traceback (most recent call last):; File ""/home/toon/miniconda3/envs/p4dev/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 2045, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1281, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1056, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/p4util/python_helpers.py"", line 80, in _pybuild_basis; mol.to_dict(), key, resolved_target, fitrole, other, return_dict=True, return_atomlist=return_atomlist); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 679, in pyconstruct; verbose=verbose); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 838, in construct; filename = cls.make_filename(basgbs); File ""/home/toon/miniconda3/envs/p4",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613:626,message,message,626,https://psicode.org,https://github.com/psi4/psi4/issues/1613,1,['message'],['message']
Integrability,"Time to start the release notes once more. As always please note that these start off as incomplete and gradually fill in over time as they are quite lengthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. Note: Psi4 1.3 starts around PR #1065. TODO: Document #1393, . ##. # Major Points of Interest. - Added native Windows compatibility without the WSL requirement.; - DFT collocation grids can now be cache in-memory to avoid extra computation and lowering the total cost of DFT by up to a factor of two (#1233).; - Wavefunctions can now be serialized to disk and back using `Wavefunction.to_file/from_file` (#1304).; - Psi4 is now Python 3.5+ only, Psi4 1.4 will be Python 3.6+ only. Potential:; - A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135).; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349). . # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`. ##. # New Methods; - Improved support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1; - VV10 dispersion is now available for UKS references.; - Cubeprop can now compute the `FRONTIER_ORBITALS` and `DUAL_DESCRIPTOR` quantities.; - nZaPa-NR basis sets have been added.; - The recursive driver can now compute N-body gradients and Hessians. # New External Libraries; - [QCElemental](https://github.com/MolSSI/QCElemental) - A library for CODATA, molecule manipulation routines, and periodic table information.; - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406:880,depend,depending,880,https://psicode.org,https://github.com/psi4/psi4/issues/1406,1,['depend'],['depending']
Integrability,"Time to start working on the Psi4 1.0 release notes, #hype! Please read through and update as needed @psi4/p4manage. Loosely organized at the moment, feel free to re-do. These notes span from the Psi4 beta5 release to the official Psi4 1.0 release.; ## User improvements; - Created binary linux distribution of Psi4 for users through conda; - Automatic extrapolations at the driver layer: `energy('MP2/aug-cc-pv[D,T]Z')`,`optimize('SCF/cc-pV[D,T,Q]Z')`.; - New N-Body wrapper capable of computing non-CP, CP and VMFC energies and gradients. The `cp` wrapper has been deprecated and CP can now be called as an optional argument to an energy call: `energy('SCF/cc-pVDZ', bsse_type='CP')`.; - New cmake build system for developers; - More sophisticated user input for one-electron property analysis; - More user-friendly error checking: If the user specifies an unknown keyword, the program will print that this keyword is unknown and will suggest possible alternatives that are close in spelling; - Added code to output cube files for orbitals, densities, etc.; - Added automatic defaults for auxiliary basis sets; - Improvements to the reporting of SAPT summary information, and enhancements to obtain SAPT methods reported in doi: 10.1063/1.4867135.; - The `properties` call now has a uniform interface for SCF, DFT, MP2, CI, MCSCF methods; ## Infrastructure improvements; - The Wavefunction object is now returnable for all psi4 methods. This Wavefunction object can be passed to other codes or directly manipulated; - Driver has been refactored into a new recursive scheme (as opposed to the previous nested scheme) to better facilitate more complex calls; - The MOLDEN writer now accepts density matrices for writing natural orbitals; - Added command-line arguments -l to specify PSIDATADIR (for developers) and -s to specify location of scratch directories (overrides PSI_SCRATCH); - Internal upgrades to the direct product decomposition library, libdpd, especially regarding density fitting; - Al",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367:468,wrap,wrapper,468,https://psicode.org,https://github.com/psi4/psi4/issues/367,2,['wrap'],['wrapper']
Integrability,"Transferred from [forums](http://forum.psicode.org/t/fatal-error-a-matrix-is-not-spd/1471). Awaiting a more complete report from user, but we can say some things already. A user is told that one of their matrices is not ""SPD"" during an open-shell SAPT0 computation, and the computation quits. The relevant lines in the code are [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libsapt_solver/usapt0.cc#L1462-L1466). I assume SPD is short for semi-positive definite. Action Items:; First, we need SAPT developers to translate the error message. Without that, the fix could be anything from writing an error message that tells the user what if anything they can do, or it could involve a change in the USAPT logic.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1682:548,message,message,548,https://psicode.org,https://github.com/psi4/psi4/issues/1682,2,['message'],['message']
Integrability,"Transferred from the [forums](http://forum.psicode.org/t/regarding-cisd-calculation/1474). A user reported a CISD computation on a system with 190 orbitals and C2v symmetry that quit after ""Setting up CI strings"" with absolutely no error message. I reproduced this with a post-1.3.2 dev version of Psi on my cluster, in serial with 30 GB. (The original reporter is using an antique version of Psi.). @dgasmith pointed out that DETCI may have problems with a system of this size, but I'm not familiar enough with DETCI's computational costs to know if those problems would crash DETCI. At minimum, there should be an error message printed out. If there is an actual DETCI bug, that should ideally be fixed. My apologies to the person who has to do that.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1685:238,message,message,238,https://psicode.org,https://github.com/psi4/psi4/issues/1685,2,['message'],['message']
Integrability,"Transferred from the [forums](http://forum.psicode.org/t/sapt-dft-issues/1444). A user reports an SCF convergence failure during a SAPT(DFT) computation. While this _could_ be an example of a routine SCF convergence failure, the fact that it appears during SAPT(DFT) combined with how spectacular the convergence failure _is_ have me suspecting it's something more. When I run the user's input file on 1.3.2 release (see forum post), the failing SCF has iterations like this:; ```; @DF-RKS iter SAD: -2.88905500214392 -2.88906e+00 0.00000e+00 ; @DF-RKS iter 1: 0.79355642730661 3.68261e+00 8.89827e-02 DIIS ; @DF-RKS iter 2: -2.69913194172793 -3.49269e+00 1.70278e-02 DIIS ; @DF-RKS iter 3: 0.05174993763519 2.75088e+00 1.04154e-02 DIIS ; @DF-RKS iter 4: 4.56710002468099 4.51535e+00 8.67682e-02 DIIS ; @DF-RKS iter 5: 4.56708994805846 -1.00766e-05 8.67628e-02 DIIS ; @DF-RKS iter 6: 4.56706596773139 -2.39803e-05 8.67500e-02 DIIS; ```. The usual convergence tricks - playing with DIIS settings and damping - still leave a problem. Notice that iterations 1, 3, and 4 are terrible, going up in energy by _multiple Hartrees_ even after what should be a decent guess. The user reports that they are observing such problems for more complicated systems, but can reduce the problem to this two atom problem. You'd need to ask them to get the original systems, but this seems like a good starting point.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1684:192,rout,routine,192,https://psicode.org,https://github.com/psi4/psi4/issues/1684,1,['rout'],['routine']
Integrability,"Travis CI currently takes 2-6 (average 3) hours to complete depending on the current travis load, which is a bit on the long side. To help with this I am proposing that we reduce the number of build types from 15 to the following:; - Latest clang/gcc with both debug and release flags (4 cases); - Oldest supported clang/gcc with both debug and release flags (4 cases). It should be noted that travis CI typically runs the first 3-6 test cases immediately upon submission and then runs the rest in a general queue. The real time killer is when the 15th CI case does not start to run for 2-5 hours after initial submission. With the proposed changes we will hopefully be running through travis consistently in about an hour. . This will deteriorate our CI coverage a bit; however, I think this keeps with the CI spirit and should catch the corner cases that we really worry about. I am looking a bit into something like Docker in addition to Travis so that we can run a full test suite on a local box at the touch of a button. PS: Fiddling around with commits to practice squashing.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237:60,depend,depending,60,https://psicode.org,https://github.com/psi4/psi4/pull/237,1,['depend'],['depending']
Integrability,Trying to compile current trunk with. ```; ./setup --max-am-eri 7 --cc gcc --cxx g++ --fc gfortran --prefix /global/home/groups-sw/mhg/psi4/install --plugins --gdma on --pcmsolver on --chemps2 on --ambit on objdir -DPYTHON_INTERPRETER=${PYTHON_DIR}/bin/python -DENABLE_XHOST=OFF; ```. fails with an OpenMP linking error in CheMPS2. ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.29':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to`omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to `omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function`_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.30':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to `omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to`omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.31':. and a bunch of other missing OpenMP symbol errors from libchemps2.a.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/452:341,interface,interfaces,341,https://psicode.org,https://github.com/psi4/psi4/issues/452,7,['interface'],['interfaces']
Integrability,"Unknown Unknown; python3.7 000056310E0CB107 _PyFunction_FastC Unknown Unknown; python3.7 000056310E1334B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000056310E07A829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000056310E07B714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000056310E07B73C PyEval_EvalCode Unknown Unknown; python3.7 000056310E192F14 Unknown Unknown Unknown; python3.7 000056310E19E29D PyRun_StringFlags Unknown Unknown; python3.7 000056310E142EB4 Unknown Unknown Unknown; python3.7 000056310E0CB789 _PyMethodDef_RawF Unknown Unknown; python3.7 000056310E0CBA31 _PyCFunction_Fast Unknown Unknown; python3.7 000056310E137795 _PyEval_EvalFrame Unknown Unknown; python3.7 000056310E07A829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000056310E07B714 PyEval_EvalCodeEx Unknown Unknown; python3.7 000056310E07B73C PyEval_EvalCode Unknown Unknown; python3.7 000056310E192F14 Unknown Unknown Unknown; python3.7 000056310E19D331 PyRun_FileExFlags Unknown Unknown; python3.7 000056310E19D523 PyRun_SimpleFileE Unknown Unknown; python3.7 000056310E19E655 Unknown Unknown Unknown; python3.7 000056310E19E77C _Py_UnixMain Unknown Unknown; libc-2.26.so 00007F895E88906A __libc_start_main Unknown Unknown; python3.7 000056310E142FF0 Unknown Unknown Unknown; Aborted; ```; ; </details>. I first actually tried to reproduce this using the very convenient MyBinder link on the front page in python, rather than with a psithon input file, but unfortunately because it's an uncaught C++ exception that doesn't actually get translated into a python exception, it just kills the jupyter kernel and no error message is reported to the jupyter client running in the browser. Appologies in advance if this is a duplicate bug report. The fact that the grid is missing is okay; that's #827 IIUC. But if possible, -- especially for usage of the Python interface rather than the command line program -- it would might be better if these exceptions were translated into python rather than such violent crashes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080:5043,message,message,5043,https://psicode.org,https://github.com/psi4/psi4/issues/2080,2,"['interface', 'message']","['interface', 'message']"
Integrability,Update dependencies for Windows,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124:7,depend,dependencies,7,https://psicode.org,https://github.com/psi4/psi4/pull/1124,1,['depend'],['dependencies']
Integrability,"Update to ""Interface to Numpy""",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2089:11,Interface,Interface,11,https://psicode.org,https://github.com/psi4/psi4/pull/2089,1,['Interface'],['Interface']
Integrability,Updates MRCC interface to allow perturbative methods with ROHF reference.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/634:13,interface,interface,13,https://psicode.org,https://github.com/psi4/psi4/pull/634,1,['interface'],['interface']
Integrability,"Using psi4-1.4rc1, I was able to compute `MBIS_CHARGES` via QCEngine however after PR #2127 this now fails with the following error message. While this definitely needs fixing I think it might also be nice to have the option to turn off this feature and only calculate the ratio if passed as an scf property?; ```; RuntimeError: ; Fatal Error: Wavefunction::scalar_variable: Requested variable MBIS FREE ATOM O VOLUME was not set!; Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1628080613326/work/psi4/src/psi4/libmints/wavefunction.cc on line: 1335; ```. MWE ; ```python; import qcelemental as qcel; from qcelemental.models import molecule; import qcengine as qcng. mol = qcel.models.Molecule.from_data(""""""; O 0.0 0.000 -0.129; H 0.0 -1.494 1.027; H 0.0 1.494 1.027; """"""). # build the mbis task; model = qcel.models.AtomicInput(; molecule=mol,; driver=""energy"",; model={""method"": ""SCF"", ""basis"": ""sto-3g""},; keywords={""scf_properties"": [""MBIS_CHARGES""]}; ). result = qcng.compute(model, ""psi4""). print(result.dict()); ```; versions; psi4-1.4+9485035 ; qcengine-0.19.0; qcelemental -0.21.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2272:132,message,message,132,https://psicode.org,https://github.com/psi4/psi4/issues/2272,1,['message'],['message']
Integrability,Very bad linear dependencies may lead to NaN or infinite condition no,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1844:16,depend,dependencies,16,https://psicode.org,https://github.com/psi4/psi4/pull/1844,1,['depend'],['dependencies']
Integrability,WIP: Simint integration in Psi4,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/533:12,integrat,integration,12,https://psicode.org,https://github.com/psi4/psi4/pull/533,1,['integrat'],['integration']
Integrability,"We'll be wrapping up libxc 5.1.0 in December, which means it could be pulled in Psi4 1.4. The update is strongly recommended, since it solves a huge list of issues in 5.0.0, see https://gitlab.com/libxc/libxc/-/issues/186, as well as introduces new functionals that users may be interested in, especially r2SCAN by Furness et al. The update should be very easy, since 5.1.0 will be API compatible with 5.0.0.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2057:9,wrap,wrapping,9,https://psicode.org,https://github.com/psi4/psi4/issues/2057,1,['wrap'],['wrapping']
Integrability,"We've had a recent forum request to support `.wfx` files for interface to QTAIM programs. This seems like a relatively simple Python project, and a good one for a new developer. You can see the file format specification [here](http://aim.tkgristmill.com/wfxformat.html).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2341:61,interface,interface,61,https://psicode.org,https://github.com/psi4/psi4/issues/2341,1,['interface'],['interface']
Integrability,"When I run psi4 on a remote computer with `psi4 & disown` and exit before the job is complete, it crashes with messages like the following. ```; Traceback (most recent call last):; File ""/path/to/conda/envs/p4env/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1360, in optimize print('Optimizer: Optimization complete!'); ```. ```; Traceback (most recent call last):; File ""/path/to/conda/envs/p4env/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1727, in frequency; H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs); File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1466, in hessian; return driver_cbs._cbs_gufunc(hessian, name.lower(), **kwargs, ptype=""hessian""); File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver_cbs.py"", line 1955, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs)File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1562, in hessian; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 1562, in hessian; _process_displacement(; File ""/path/to/conda/envs/p4env/lib//python3.8/site-packages/psi4/driver/driver.py"", line 167, in _process_displacement; sys.stdout.flush(); ```. It seems to work if I add a redirect of the output to /dev/null, `psi4 > /dev/null & disown`, but I was wondering if there would be a way to fix this inside of psi4 (might require the removal of all print statements). It took me way too long to figure out this problem, so if nothing else, I hope that posting this issue will help others with this problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1983:111,message,messages,111,https://psicode.org,https://github.com/psi4/psi4/issues/1983,1,['message'],['messages']
Integrability,"When PSI4 updates in miniconda, the testing dialogue,. ```; Nuclear Repulsion Energy..........................................PASSED; SAPT0 Eelst.......................................................PASSED; SAPT0 Eexch.......................................................PASSED; SAPT0 Eind........................................................PASSED; SAPT0 Edisp.......................................................PASSED; SAPT0 Etotal......................................................PASSED; ```. prints as a single line which is wrapped by the terminal:. ```; Nuclear Repulsion Energy..........................................PASSED SAPT0 Eelst....; ...................................................PASSED SAPT0 Eexch...................; ....................................PASSED SAPT0 Eind...................................; .....................PASSED SAPT0 Edisp.................................................; ......PASSED SAPT0 Etotal......................................................PASSED; ```. It seems like there should be a newline after each ""PASSED"". I updated the post-link.sh script to print the test dialogue with cat instead of echo. This seems to fix the problem on my machines (Ubuntu and RedHat with Gnome terminal and Konsole). While I was updating the printing, I also added comments and made the script delete the temporary files after PSI4 is done running.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/191:542,wrap,wrapped,542,https://psicode.org,https://github.com/psi4/psi4/pull/191,1,['wrap'],['wrapped']
Integrability,"When passing the -DCMAKE_INSTALL_PREFIX=/home/user/directory at the top-level build this flag does not get passed on to cmake processes that are called by the main, like in my case pybind11. As a result cmake tries to install that package in /usr/local. Is there any way around it other than manually installing all the dependencies?; ; ```; [100%] Built target pybind11_tests; Install the project...; -- Install configuration: ""MinSizeRel""; -- Installing: /usr/local/include/pybind11; CMake Error at cmake_install.cmake:41 (file):; file INSTALL cannot make directory ""/usr/local/include/pybind11"":; Permission denied; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548:320,depend,dependencies,320,https://psicode.org,https://github.com/psi4/psi4/issues/1548,1,['depend'],['dependencies']
Integrability,"When requesting the wavefunction as part of the result via the protocol in QCEngine only the `orbitals_and_eigenvalues` option works successfully. I think this is due to an error in the returned dictionary here https://github.com/psi4/psi4/blob/5de566ed7d4bf51816c673c4ea1def449e4e8618/psi4/driver/schema_wrapper.py#L324.I think this line should say `""density_a"": ""scf_density_a"",`. QCEngine error:; ```; QCEngine Unknown Error: Traceback (most recent call last):; File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib//python3.7/site-packages/psi4/driver/schema_wrapper.py"", line 400, in run_qcschema; ret = qcel.models.Result(**ret_data, stdout=_read_output(outfile)); File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib/python3.7/site-packages/qcelemental/models/results.py"", line 520, in __init__; super().__init__(*args, **kwargs); File ""pydantic/main.py"", line 344, in pydantic.main.BaseModel.__init__; File ""pydantic/main.py"", line 900, in pydantic.main.validate_model; File ""pydantic/fields.py"", line 556, in pydantic.fields.ModelField.validate; File ""pydantic/fields.py"", line 732, in pydantic.fields.ModelField._apply_validators; File ""pydantic/class_validators.py"", line 280, in pydantic.class_validators._generic_validator_cls.lambda4; File ""/Users/joshuahorton/miniconda3/envs/qcfractal/lib/python3.7/site-packages/qcelemental/models/results.py"", line 463, in _wavefunction_protocol; ret_wfn[key] = wfn[key]; KeyError: 'scf_density_ba'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1987:63,protocol,protocol,63,https://psicode.org,https://github.com/psi4/psi4/issues/1987,1,['protocol'],['protocol']
Integrability,"While testing out some enhancements to third-order SAPT, Jonathan Waldrop and I seem to have found a bug in the E(30)ind implementation in psi4/psi4/src/psi4/libsapt_solver/ind30.cc. The E(30)ind correction is given by Eq. (72) of JCP 125, 154107 (2006), which stems from evaluating the matrix elements in Eq. (75) using the second-order induction amplitudes in Eq. (79). Psi4 proceeds slightly differently, by actually evaluating the induction amplitudes from Eq. (79) (as far as I can see, the code in psi4/psi4/src/psi4/libsapt_solver/amplitudes.cc matches Eq. (79) exactly) and contracting them with the \omega electrostatic potential matrix elements in psi4/psi4/src/psi4/libsapt_solver/ind30.cc in SAPT2p3::ind30(). The problem is that this algorithm accounts for the first 2 matrix elements in Eq. (75) but not for the last one, <VS_AS_B>. Unless I understand something incorrectly, the Psi4 code is missing the <VS_AS_B> contribution in E(30)ind. Going now back to Eq. (72), it is easy to prove that <VS_AS_B>=4s^r_a v^{ab}_{rs} s^s_b, that is, it contributes a quarter of the last term in Eq. (72). Our working hypothesis was that, because of the omission of this term, E(30)ind programmed in Psi4 has the last term in Eq. (72) multiplied by 12 instead of 16. Therefore, Jonathan modified his Psi4NumPy E(30)ind code to include this last term with the incorrect factor of 12, and now his values are matching Psi4 perfectly! In other words, we are quite certain that the Psi4 implementation includes the last term in Eq. (72) with an erroneous factor of 12 instead of 16. Fortunately, this doesn’t affect the SAPT2+(3) or SAPT2+3 results that also include delta HF, but it will (slightly) affect the third-order SAPT results computed without delta HF. I think the E(30)ind,resp code is fine but the wrong E(30)ind will slightly affect the scaled approximated value of E(30)exch-ind,resp. Please let me know if I need to explain anything better or if I can be of any further help. All the best,",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1677:582,contract,contracting,582,https://psicode.org,https://github.com/psi4/psi4/issues/1677,1,['contract'],['contracting']
Integrability,"While trying to reproduce some gaussian calculations with psi4, I noticed that the frequencies dependent on the dertype setting to a larger extend than anticipated: ; ```; molecule h2o {; units angstrom; H 0.000000 0.760300 -0.196100; O 0.000000 0.000000 0.392200; H 0.000000 -0.760300 -0.196100; }. set basis 6-311G**; set e_convergence 9; set g_convergence gau_verytight; set scf_type pk. optimize('scf', molecule=h2o). scf_e, scf_wfn = frequencies('scf', dertype='energy', return_wfn=True); scf_e, scf_wfn = frequencies('scf', dertype='gradient', return_wfn=True); scf_e, scf_wfn = frequencies('scf', dertype='hessian', return_wfn=True); ```; This generated the following frequencies:; ```; $ grep -A 3 'Vib. Freq' 'hf-6-311Gstarstar-freq.out'; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.943 2519.214; 2 4142.104 5959.557; 3 4237.400 6096.666; --; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1750.925 2519.188; 2 4142.111 5959.567; 3 4237.427 6096.704; --; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1731.766 2491.623; 2 4136.243 5951.124; 3 4232.474 6089.579; ```; For reference these are the gaussian g09 frequencies:; ```; Frequencies -- 1750.9454 4142.1029 4237.3716; ```. I am using:; ```; $ rpm -qif /usr/bin/psi4 | egrep '^Version|^Source'; Version : 1.1; Source RPM : psi4-1.1-2.add49b9git.fc26.src.rpm; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/901:95,depend,dependent,95,https://psicode.org,https://github.com/psi4/psi4/issues/901,1,['depend'],['dependent']
Integrability,"With the following input file, I noticed that there's an uncaught C++ exception that crashes the program hard; ```; $ cat input.dat ; memory 8640 Mb; molecule dimer {; 1 1; K -4.067042 -1.894214 0.002270; }; set dft_grid_name SG1; set dft_vv10_radial_points 50; set dft_vv10_spherical_points 194; set dft_nuclear_scheme treutler; set dft_radial_scheme EM; set basis def2-TZVPPD; ene = energy(""wB97M-V""); ```. Here's the error:. <details>; <summary> Expand </summary>. ```; $ psi4 input.dat ; terminate called after throwing an instance of 'psi::PsiException'; what(): ; Fatal Error: There is no SG-1 grid defined for the requested atomic number!; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libfock/cubature.cc on line: 2451; The most recent 5 function calls were:; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F895301610F for__signal_handl Unknown Unknown; libpthread-2.26.s 00007F895EC247E0 Unknown Unknown Unknown; libc-2.26.so 00007F895E89BB20 gsignal Unknown Unknown; libc-2.26.so 00007F895E89CFC8 abort Unknown Unknown; libint.so 00007F8933297319 _ZN9__gnu_cxx27__ Unknown Unknown; libint.so 00007F8933296839 _ZN10__cxxabiv111 Unknown Unknown; libint.so 00007F89332968D1 __cxa_call_termin Unknown Unknown; libint.so 00007F8933296600 __gxx_personality Unknown Unknown; libgcc_s.so.1 00007F895EEB9AAB Unknown Unknown Unknown; libgcc_s.so.1 00007F895EEB9F49 _Unwind_Resume Unknown Unknown; core.cpython-37m- 00007F8955C9BDC5 Unknown Unknown Unknown; core.cpython-37m- 00007F8955C94F6C Unknown Unknown Unknown; libiomp5.so 00007F8913F603F3 __kmp_invoke_micr Unknown Unknown; libiomp5.so 00007F8913EE4937 __kmp_fork_call Unknown Unknown; libiomp5.so 00007F8913EA8533 __kmpc_fork_call Unknown Unknown; core.cpython-37m- 00007F8955C947E1 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA73C0 Unknown Unknown Unknown; core.cpython-37m- 00007F8955CA62DC Unknown Unknown Unknown; core.cpython-37m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2080:876,Rout,Routine,876,https://psicode.org,https://github.com/psi4/psi4/issues/2080,1,['Rout'],['Routine']
Integrability,"Wraps new lapack function tests in a Fortran_ENABLED block; and resolves OpenMP linking issues. Ultimately, we'd want to change the detection from a Fortran function to a C function. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1342:0,Wrap,Wraps,0,https://psicode.org,https://github.com/psi4/psi4/pull/1342,1,['Wrap'],['Wraps']
Integrability,X2C Linear Dependencies,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2201:11,Depend,Dependencies,11,https://psicode.org,https://github.com/psi4/psi4/issues/2201,1,['Depend'],['Dependencies']
Integrability,X2C linear dependencies?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/868:11,depend,dependencies,11,https://psicode.org,https://github.com/psi4/psi4/issues/868,1,['depend'],['dependencies']
Integrability,"XC contains an implementation of the sn-LinK algorithm, a seminumerical method very similar to COSX for computing the exact exchange term (i.e., the K matrix). Like the XC components of GauXC, sn-LinK also has support for GPU execution. At PsiCon 2023, it was noted that GauXC's sn-LinK algorithm could be interfaced to Psi4 through the `CompositeJK` framework. This would give Psi4 its first-ever instance of noncommercial GPU support for the JK construction process. And that is the goal of this PR - interfacing Psi4 to GauXC's sn-LinK code via `CompositeJK`. This interface is implemented primarily via a new `SplitJK` derived class, `snLinK`, which contains the guts of the interface to GauXC. The `snLinK` constructor parameterizes and constructs the `GauXC::XCIntegrator` object and all related objects (e.g., load balancer, molecular weights partitioner), as well as other auxiliary work such as defining the GauXC execution space. `snLinK::build_G_component` constructs the K matrix from the input density via the GauXC integrator's `eval_exx` function. `build_G_component` also handles fundamental pre- and post-processing required for the involved matrices - Spherical Harmonic integral reordering permutations if `psi4_SHGAUSS_ORDERING` is set to the default option of gaussian , and Spherical-to-Cartesian transforms, if required, to enable GPU support (also forcible via the `SNLINK_FORCE_CARTESIAN` keyword). As a `SplitJK` instance, sn-LinK can be called within Psi4 via `SCF_TYPE = J_ALGO+SNLINK`, with `J_ALGO` being the J construction algorithm of choice (currently only `DFDIRJ`). If GPU support is enabled, the `SNLINK_USE_GPU` keyword can be turned on to run the sn-LinK algorithm using GPUs. Construction of the GauXC interface is specified at compile-time, using the `ENABLE_gauxc` flag. Psi4 can either build an internal instance of GauXC, or hook up to an external GauXC install specified by `gauxc_DIR`. If `ENABLE_gauxc` is turned off, the `snLinK` class will instead throw",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:1341,integrat,integrator,1341,https://psicode.org,https://github.com/psi4/psi4/pull/3150,1,['integrat'],['integrator']
Integrability,"XC_WB97M_V: 1.00E-13 . => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = NONE; Nuclear Scheme = TREUTLER. Blocking Scheme = OCTREE; BS radius alpha = 1; Pruning alpha = 1; Radial Points = 75; Spherical Points = 302; Total Points = 2115829; Total Blocks = 14225; Max Points = 256; Max Functions = 1539; Weights Tolerance = 1.00E-15. => Loading Basis Set <=. Name: (DEF2-TZVPPD AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-33 entry C line 198 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 34-89 entry H line 18 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 90-101 entry N line 258 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs ; atoms 102-106 entry O line 318 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-universal-jkfit.gbs . ==> Integral Setup <==. PSIO_ERROR: unit = 97, errval = 12; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F6F7C68B10F for__signal_handl Unknown Unknown; libpthread-2.28.s 00007F6F9C906B20 Unknown Unknown Unknown; libc-2.28.so 00007F6F9BDDC37F gsignal Unknown Unknown; libc-2.28.so 00007F6F9BDC6DB5 abort Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B535A Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B53C5 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6B5658 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B5A129 Unknown Unknown Unknown; core.cpython-310- 00007F6F88B69438 _ZN3psi4PSIO2rwEm Unknown Unknown; core.cpython-310- 00007F6F88B6B963 _ZN3psi4PSIO5writ Unknown Unknown; core.cpython-310- 00007F6F88B566E9 Unknown Unknown Unknown; libstdc++.so.6.0. 00007F6F8C6DFBF4 Unknown Unknown Unknown; libpthread-2.28.s 00007F6F9C8FC14A Unknown Unknown Unknown; libc-2.28.so 00007F6F9BEA1DC3 clone Unknown Unknown; /var/spool/slurm/slurmd/job83930/slurm_script: line 27: 2245656 Aborted (core dumped). ```. </details>. CPU",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:12245,Rout,Routine,12245,https://psicode.org,https://github.com/psi4/psi4/issues/2970,1,['Rout'],['Routine']
Integrability,"Yet another issue [rescued from the the forums](http://forum.psicode.org/t/problem-with-tungsten-dft-and-hf-scf-unreasonable-energies/1129/2). The user reports using conda's 1.2.1 to attempt to converge a molecule with ECPs and observes a spread in deltaE between reactant and product of over 1000 kcal/mol, depending on basis set. Suspecting some catastrophic case of landing on an excited state, I ran a modified version of the input file on the cluster, using 1.3a2.dev122. I doubled the memory allocation and replaced the attempt to unpickle with simply calling the energy with `'b3lyp'` directly. While I was able to reproduce his small-basis energy, the large-basis energy never even began. Psi segfaulted after `Total Energy Delta E RMS |[F,P]|`, and `std::cout` got hit with over 500 counts of `Failed to converge:`, which can only happen due to [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/ecpint.cc#L492). So the ECP integrals won't even converge for me, and the SCF converges to garbage for our user. Because this is a transition metal, we can't immediately rule out excited state problems, but `Failed to converge:` points to ECP problems. User's Input File:; ```; # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-PR07-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; W -0.000070400000 -0.017989600000 -0.146457100000; C 0.000157200000 1.955377300000 -0.631545200000; O 0.000411800000 3.068043100000 -0.986288700000; C 0.000004600000 0.271128000000 1.825131000000; O 0.000003100000 0.436870000000 2.983755900000; C 0.000079000000 -2.055167300000 -0.056719200000; O 0.000369700000 -3.220382300000 -0.103637600000; H 0.422788400000 -0.287137400000 -1.984721800000; H -0.422970800000 -0.287404200000 -1.985319300000; P -2.498968200000 0.054091800000 -0.052469100000; C -3.398360300000 -0.535031900000 -1.584174",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1338:308,depend,depending,308,https://psicode.org,https://github.com/psi4/psi4/issues/1338,1,['depend'],['depending']
Integrability,"[Recovered from the forums.](http://forum.psicode.org/t/segfault-projecting-wfn-onto-new-basis/945). User attempted a manual basis guess, with the following input file.; ```; molecule {; 0 5; FE 0.000000000000 0.000000000000 0.123274779640; F 1.565379000000 0.000000000000 -0.647320000000; F -0.000000000000 -1.700830000000 0.639825000000; F 0.000000000000 1.700830000000 0.639825000000; F -1.565379000000 -0.000000000000 -0.647320000000; }. set {; basis sto-3g; guess sad; scf_type direct; reference uhf; }. energy('hf'). basis {; assign 6-31++G**; assign Fe 6-31G**; }. set guess read; optimize('hf'); ```. The PSIO error that results is difficult to interpret. Can we catch the case of switching basis sets without cleaning and tell the user to either clean explicitly or use the `basis_guess` option, depending on what they're trying to do?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1329:805,depend,depending,805,https://psicode.org,https://github.com/psi4/psi4/issues/1329,1,['depend'],['depending']
Integrability,"[This section of the docs](https://psicode.org/psi4manual/master/build_planning.html#what-are-the-tools-and-dependencies-strictly-required-for-building-psi4), that lists the essential dependencies of Psi4, is missing two python libraries that are required for `ctest -L smoke` to pass:. 1. `cpuinfo` from `py-cpuinfo`; 2. `psutil`. It looks like both of these are transitive dependencies from QCengine.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2789:108,depend,dependencies-strictly-required-for-building-,108,https://psicode.org,https://github.com/psi4/psi4/issues/2789,3,['depend'],"['dependencies', 'dependencies-strictly-required-for-building-']"
Integrability,"](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L511). Because the Quantum Trio-era `detci` and `cc` codes used QT ordering, that `IntegralTransform` must be [told to assume QTOrder](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L518), so all other modules must use QT order.; * The need to assemble a single 1PDM is, superficially, because [`IntegralTransform` is told to expect that](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L518). `backtransform_density` was never designed with any other structure in mind.; * Each code has its own density-fitted gradients for the simple reason that nobody tried to design truly general density-fitted gradients for Psi. ## Conventions; Unless otherwise indicated, any mention of ""1PDM"" or ""2PDM"" refers to relaxed quantities, the things you contract against the one-electron and two-electron integral derivatives. ## Interface Proposal; * Backtransformation of two-index quantities no longer requires having the _entire_ matrix assembled. You can backtransform blocks at a time based on occupation, which is what you're more likely to have.; * Either each caller code creates its own integral transformation object and instructs `libtrans` on what back-transformations to do directly, or the integral transformation object remains in `deriv.cc`, and the caller code passes information on what back-transformations need to be done. I'm leaning more towards the first option.; * Off-diagonal blocks can be marked as Hermitian, in which case both the AO-transform of the block and the transpose of the AO-transform will be added to the running AO basis density matrix. This, prevents, for example, transforming the `ov` and the `vo` blocks.; * Density-fitted gradients will behave quite similarly to the refactored correlated derivatives. The two particle-density matrix is just replaced with the intermediates from Equation 79 of [Ugur's paper](https://aip.scitation.org/doi/10.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:4572,Interface,Interface,4572,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['Interface'],['Interface']
Integrability,"_NOT_ quite ready to merge yet, but represents a substantial change that I wanted developers to start looking at and provide feedback on. In particular:; - [x] Get remote builds via Travis-CI working; - [x] @lothian 's coupled cluster code tests are failing (really could use help there); - [x] Fix sow/reap tests (not using installed data dir?); - [x] Failing test cases:; - [x] cbs-xtpl-freq; - [x] fnocc2; - [x] tu4-h2o-freq ; - [x] Hook back-up: ; - [x] chemps2; - [x] erd; - [x] dkh; - [x] gdma; - [x] ambit; - [x] pcmsolver; - [ ] Get binary working (need help from @loriab); - [x] Test (and then most likely fix) plugin system; - [x] Move GTFock to external; - [x] Libint is now external, closes #355 ; ## Speed. By means of comparison, on my box the old build system took 34 minutes and this build took 14 minutes. Both build times are for a debug build, ignore the time to build Boost, use the default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a g",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:1261,depend,dependencies,1261,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['depend'],['dependencies']
Integrability,`Libint2::cxx` misses dependency on Boost,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2427:22,depend,dependency,22,https://psicode.org,https://github.com/psi4/psi4/issues/2427,1,['depend'],['dependency']
Integrability,`SphericalGrid::order` Contract Broken,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2765:23,Contract,Contract,23,https://psicode.org,https://github.com/psi4/psi4/issues/2765,1,['Contract'],['Contract']
Integrability,"```; molecule sco {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. b3lyphfx10 = { ; ""name"": ""b3lyp_hfx10"",; ""x_functionals"": {""GGA_X_B88"": {""alpha"": 0.81}, ""LDA_X"": {""alpha"": 0.09}},; ""x_hf"": {""alpha"": 0.10},; ""c_functionals"": {""GGA_C_LYP"": {""alpha"": 0.81},""LDA_C_VWN_RPA"": {""alpha"": 0.19}}; }. set globals {; basis def2-tzvp; reference rhf ; maxiter 500 ; }. frequency('scf', dft_functional=b3lyphfx10); ```. This fails unless `dertype = 1` is passed to the `frequency` call. The driver instead tries to route it through analytic hessians (which are Not Yet Implemented for GGA).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2882:492,rout,route,492,https://psicode.org,https://github.com/psi4/psi4/issues/2882,1,['rout'],['route']
Integrability,"```console; $ cmake --version; cmake version 3.18.4. CMake suite maintained and supported by Kitware (kitware.com/cmake).; $ ls /path/to/eigen3/share/eigen3/cmake; Eigen3Config.cmake Eigen3ConfigVersion.cmake Eigen3Targets.cmake UseEigen3.cmake; ```. Here Eigen 3.3.7 is manually installed. ```console; $ git describe --always; v1.5-178-gd725195826a1; $ cmake -G Ninja -B build -S . -D BOOST_ROOT:PATH=/path/to/boost -D Eigen3_DIR:PATH=/path/to/eigen3/share/eigen3/cmake; $ cmake --build build -- external/upstream/libint2/all; …; -- Looking for posix_memalign - found; -- Could NOT find Eigen3 (missing: EIGEN3_INCLUDE_DIR EIGEN3_VERSION_OK) (Required is at least version ""2.91.0""); CMake Error at CMakeLists.txt:124 (message):; C++ API cannot be built without Eigen3; configure (via CMake) and install; Eigen3 and add the install prefix to CMAKE_PREFIX_PATH, or add; -DREQUIRE_CXX_API=OFF to the CMake command line if the C++ API is not; required. -- Configuring incomplete, errors occurred!; See also ""external/upstream/libint2/libint2_external-prefix/src/libint2_external-build/CMakeFiles/CMakeOutput.log"".; ninja: build stopped: subcommand failed.; ```. The source of libint2 is; https://github.com/psi4/psi4/blob/d725195826a1766a82940e8e2dab05c541c7377c/external/upstream/libint2/CMakeLists.txt#L63. `build/external/upstream/libint2/libint2_external-prefix/src/libint2_external/CMakeLists.txt` has the following line:; ```; 115:find_package(Eigen3 MODULE); ```; Hence `find_package` runs in only MODULE mode, where CMake searches `FindEigen3.cmake` (https://cmake.org/cmake/help/v3.18/command/find_package.html). Its location is set by the `CMakeLists.txt`:; ```; 6:list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules); ```. CMake passes only the `Eigen3_DIR` variable. https://github.com/psi4/psi4/blob/d725195826a1766a82940e8e2dab05c541c7377c/external/upstream/libint2/CMakeLists.txt#L87. but it is not used by `FindEigen3.cmake`, resulting in configuration error. https://",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2606:719,message,message,719,https://psicode.org,https://github.com/psi4/psi4/issues/2606,1,['message'],['message']
Integrability,"`python; Python 3.6.3 | packaged by conda-forge | (default, Nov 4 2017, 10:10:56) ; [GCC 4.8.2 20140120 (Red Hat 4.8.2-15)] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import sys; >>> sys.executable; '/home/xxx/data/applications/anaconda3/envs/p4env/bin/python'; >>> sys.path; ['', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python36.zip', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/lib-dynload', '/home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages']; >>> import psi4; /home/xxx/data/applications/anaconda3/envs/p4env/lib/python3.6/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; ```. If I run inside a notebook, `sys.path` and `sys.executable` are the same, but when I `import psi4`, I get a message ""The kernel appears to have died. It will restart automatically."" In the terminal, I see: ; ```; [I 17:41:23.834 NotebookApp] Adapting to protocol v5.1 for kernel 56076279-b2b7-4f6a-8fb0-83b5b1f774c4; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; [IPKernelApp] ERROR | No such comm target registered: jupyter.widget.version; terminate called after throwing an instance of 'std::bad_cast'; what(): std::bad_cast; [I 17:41:41.146 NotebookApp] KernelRestarter: restarting kernel (1/5); ```. I think the first three lines are unrelated. The kernel never recovers and I can't import the module. Should I expect that Psi4 will work inside a `jupyter notebook` and if so, is there any way to get more information about what's going wrong?. **Edit:** I should add that to get `jupyter notebook` to see the `p4env` conda environment, I executed `conda install ipykernel --name p4env` and then `~/data/applications/psi4conda/envs/p4env/bin/python -m ipykernel install --user` (according to [these](https://github.com/jupyter/notebook/issues/1524) instructions). - CentOS Linux release 7.4.1708 (Core) ; - 3.1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862:1565,protocol,protocol,1565,https://psicode.org,https://github.com/psi4/psi4/issues/862,1,['protocol'],['protocol']
Integrability,add integratorxx to buildsys,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3041:4,integrat,integratorxx,4,https://psicode.org,https://github.com/psi4/psi4/pull/3041,1,['integrat'],['integratorxx']
Integrability,"added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (Failed); 	319 - cubeprop-esp (Failed); ```. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625:1851,wrap,wrapper,1851,https://psicode.org,https://github.com/psi4/psi4/pull/625,1,['wrap'],['wrapper']
Integrability,"advisor.py cmake); shows up in p4dev; =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; ```; - [x] For packagers or other high-level what-does-it-need folks, dependency info is programmatically available now through codedeps.yaml. ## Dev notes & details; - [x] add `codedeps.yaml` file that makes dependency and ecosystem information programmatically accessible. Presently useful for (1) people and (2) the in-repo psi4-path-advisor.py script, but more uses can follow.; - [x] add in-repo `conda/psi4-path-advisor.py` script to serve as build helper. this is the main point of the PR. will elaborate more in future.; - [x] there's a tidy new way of defining flags that are essential for the compiler _with_ the compiler in `CMAKE_<LANG>_COMPILER` instead of cluttering up the user choice var `CMAKE_<LANG>_FLAGS`. This is especially relevant for intel compilers that need gcc passed. There's something that's not set up right yet for Intel Clang. Thus, we need to pass `CMAKE_<LANG>_COMPILER_ARG1` through to psi4 subproject and all other externals.; - [x] let ctest tests run whether old or new d3 and gcp implementations present.; - [x] don't expect a pylibefpConfig.cmake for libefp detection. this is the case with the c-f package -- I'll probably put it back later when libefp/pylibefp repos combine.; - [x] I was ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:2094,depend,dependency,2094,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['depend'],['dependency']
Integrability,"algorithm using GPUs. Construction of the GauXC interface is specified at compile-time, using the `ENABLE_gauxc` flag. Psi4 can either build an internal instance of GauXC, or hook up to an external GauXC install specified by `gauxc_DIR`. If `ENABLE_gauxc` is turned off, the `snLinK` class will instead throw an exception upon construction. For GPU support, there is the `gauxc_ENABLE_GPU` keyword, which ensures that the Psi4/GauXC interface supports GPU execution. For testing, `test_compositejk.py` and `test_comprehensive_jk_screening.py` both now include sn-LinK tests, conditional on the sn-LinK interface being built. Finally, a `gauxc_writer.py` file has been added, enabling construction of HDF5 reference files via the Psi4/GauXC interface, to be used in GauXC's `standalone_driver` for debugging purposes. The `test_gauxc_writer.py` file has been added to test this writer against reference HDF5 files. . ## User API & Changelog headlines; - [X] Psi4 has been interfaced to the GauXC standalone library, specifically the sn-LinK exact exchange algorithm present within GauXC. Construction of the interface is specified at compile-time with the compile-time flag `ENABLE_gauxc`, and GPU support is specified with the `gauxc_ENABLE_GPU` compile-time flag. Once installed, `SCF_TYPE=J_ALGO+SNLINK` can be used to call GauXC within Psi4. A large number of keywords have been added for controlling the behavior of `SNLINK`. For controlling the GauXC grid, `SNLINK_RADIAL_POINTS`, `SNLINK_SPHERICAL_POINTS`, and `SNLINK_RADIAL_SCHEME` control the GauXC radial point count, spherical point count, and radial quadrature, respectively. `SNLINK_USE_GPU` controls GPU execution of GauXC. Finally, `SNLINK_INTS_TOLERANCE` controls the integral screening threshold used by GauXC's sn-LinK algorithm. ## Dev notes & details; - [X] Adds a new new Psi4 compile-time option, `ENABLE_gauxc`. When set to `ON`, `ENABLE_gauxc` will build Psi4 with support for GauXC. The Psi4 build system has been adjusted so ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:2976,interface,interfaced,2976,https://psicode.org,https://github.com/psi4/psi4/pull/3150,1,['interface'],['interfaced']
Integrability,"allow a performance optimization which prevents this generalized solution from applying. **Q:** Do we _really_ need to create a `compute_df` function separate from `compute` for gradients?; **A:** I'd say yes, for two reasons. First, in the DF case, it's not obvious which DF integrals you're using (`df_basis_scf` is probably one, but is the other `df_basis_mp`, `df_basis_dct`, `df_basis_cc`?), so you need to explicitly supply this. One can imagine ways to circumvent this, but those require other infrastructure changes. Second, the `compute` function is rather complicated due to its use of three different ""algorithms"". Combining the two functions would make them more complicated. Simplifying the `compute` function, while an important task and one I will probably need to do before I can fully put my graduate projects behind me, is outside of the scope of this PR. Do you _really_ want to review something even larger?. **Q:** How stable is the interface?; **A:** Changes aren't _necessary_, and I plan to keep this stable at least until after the `dfocc` resync. However, I may make some interface changes if I find they're convenient for non-`dfocc` modules that use this. The big change I'm considering is taking the `dfmp2` approach of including back-transforming the 3-Center density intermediate in the main loop. In that case, the calling code doesn't even need to back-transform the density. If this change works, we can eliminate some code duplication in `dfmp2`, for an added bonus. In this case, all `dfocc` would need to do is stash intermediates it already computes in a place where my code can find them and then delete its back-transformation code. **Q:** What's this about adding a new block algorithm?; **A:** For large systems, you may not be able to assume that the three-center intermediate (naux*nmo^2) fits in memory. To remedy this, `dfmp2` uses a block algorithm, where it reads only ""blocks"" of this intermediate at a time. The old DF gradient code was based on Rob'",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2079:1717,interface,interface,1717,https://psicode.org,https://github.com/psi4/psi4/pull/2079,1,['interface'],['interface']
Integrability,"anual) on how to do that calculation. I was able to obtain CASSCF energies and wavefunctions, and was going to just use the CASSCF wavefunction as the reference for MRCI calculation, but had little success in doing so. The followings are my code (python), trying to optimize the energy for the C state of the C2 molecule (which has two main configurations near its equilibrium bond length). The paper included above deals with the X, B, and B' state of C2, but those are not the states that I want. (I want the singlet C state). ## geometry; c2=psi4.geometry(""""""; 0 1; c ; c 1 1.25; symmetry d2h; """"""); ##. ## use the C-state main electron configuration as the reference for CASSCF; psi4.set_options({; 'basis': 'cc-pVdz',; 'reference': 'rohf',; 'docc': [2, 0, 0, 0, 0, 1, 0, 1],; 'socc': [0, 0, 0, 0, 0, 1, 1, 0],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'mcscf_r_convergence': 5.e-6; }). psi4.set_module_options('detci',{; 'num_roots': 1,; 'calc_s_squared': True; }). casscf_energy, casscf_wfn = psi4.energy('casscf', return_wfn=True). #the code works up to this point. ## my way of feeding the casscf_wfn for another round of CI, but it did not work at all; psi4.set_options({; 'wfn': 'detci',; 'guess': 'gwh',; 'basis': 'cc-pVDZ',; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'e_convergence': 10,; 'd_convergence': 10; }). thisenergy = psi4.energy('detci',ref_wfn=casscf_wfn). When I did the second round of CI, psi4 crashed. It got stuck at the ""Starting CI iterations"" part, with the error message ""Segmentation fault: 11"". I am quite new to Psi4, but hopefully I am not talking complete non-sense here. Also, while the CASSCF bit worked, the CASSCF energy is much higher than I expected (by ~0.2 hartree). The C-state minimum lies above the 3P+3P limit, instead ~2-3 eV below it. So, it would also be helpful if someone could teach me the best way to carry out the CASSCF calculation on the C state. Thanks,. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907:1924,message,message,1924,https://psicode.org,https://github.com/psi4/psi4/issues/1907,1,['message'],['message']
Integrability,"are no large changes currently being considered. ; - Boost has been completely removed from Psi4 in favor of using C++ 11.; - Boost::python has been replaced with PyBind11. Note that PyBind11 adheres more to C-style than Python-style when it comes to references and pointer counting. As such, several functions required deep changes as internal references from C-side are no longer manipulatable Python-side.; - Python functions are no longer called from C++, several functions have had to be reworked.; - BasisSets are now exclusively built in Python and passed into C side by the `Wavefunction` `get_basisset` and `set_basisset` calls.; - The `Wavefunction` class now has internal `variables_` and `arrays_` std::maps for double and SharedMatrix types, respectively. These should be used inside a computation to enable greater localization of variables.; - Numpy integration has been expanded to allow Matrices and Vector to be converted to NumPy arrays and back. Please see `tests/numpy-array-interface` for a full suite of examples.; - The GitHub history has been rewritten. All forks built prior to 10/19/2016 are no longer valid. Please refork before working on Psi4. ; - Plugins are now based off a cmake system and the interface has received a substantial renovation. ; - Python API should not be considered stable. # Miscellaneous; - The sto-3g and 6-31G fitting basis sets used to default to cc-pVDZ-RI for both JKFIT and RI fit roles. For these basis sets the default is now def2-SVP-JKFIT and def2-SVP-RI for JKFIT and RI fit roles, respectively. ; - The MCSCF module now accepts the `MCSCF_ROTATE` command to rotate orbitals from the `SCF` guess.; - Environment variable `PSI4DATADIR` is now defunct. `PSIDATADIR`, to point to useful text files in `/share/psi4/`, remains but should not need to be used unless you want to specify one _not_ adjacent to the built `psi4/core.so` library. For running psi4 from both staged and installed locations, it should default just fine and not need `P",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/485:2405,interface,interface,2405,https://psicode.org,https://github.com/psi4/psi4/issues/485,1,['interface'],['interface']
Integrability,"as.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; blas.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapk:; lapk.INTERFACE_COMPILE_DEFINITIONS = <NOTFOUND>; lapk.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so;...; ```. If I try to build, it eventually bails out with:; ```; Scanning dependencies of target psi4-core; [ 78%] Creating directories for 'psi4-core'; [ 81%] No download step for 'psi4-core'; [ 84%] No update step for 'psi4-core'; [ 87%] No patch step for 'psi4-core'; [ 90%] Performing configure step for 'psi4-core'; loading initial cache file /home/laz/build/psi4/psi4/objdir/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041:2131,depend,dependencies,2131,https://psicode.org,https://github.com/psi4/psi4/issues/1041,1,['depend'],['dependencies']
Integrability,"ase update all `PSIDATADIR` references accordingly.; - `Process::environment.wavefunction` no longer exists. This will break any input side `psi4.wavefunction` and `psi4.set_wavefunciton` calls. Please use the `return_wfn` and `ref_wfn` kwargs on methods instead.; - A consequence of this is we broke all of the plugins! Don't worry the fix is very simple please change your C++ signature from: ; `PsiReturnType skeleton(Options& options)`; to:; `SharedWavefunction skeleton(SharedWavefunction ref_wfn, Options& options)`; Every method in Psi4 now takes a Wavefunction and Options objects, this is to make plugins consistent as well. The python-side signature is now `psi4.plugin('skeleton.so', ref_wfn)`. Options passing has not yet been handled, but thats next up on the list. ---. Below is a list of outstanding issues. Please note that these will likely not all be cleaned up here. Outstanding issues will be moved to a ticket:; - [x] Methods also take the `molecule` kwarg, it is not clear if `ref_wfn` or `molecule` should supersede the other yet.; - [x] Not all methods return wavefunctions yet. For example what does a SAPT wavefunction look like?; - [x] psimrcc Wavefunction; - [x] SAPT Wavefunction; - [x] EFP Wavefunction; - [x] If I pass SCF a `ref_wfn` with orbitals, the `ref_wfn` orbitals are not used.; - [x] We would like a SCF level wavefunction to be able to cast itself back C1 symmetry so that we can run symmetry-based SCF and then use this wavefunction in symmetry intolerant code. These transforms are reimplemented in every symmetry tolerant code.; - [x] Saving of binary `optking` information may break for very complex optimizations (database, cbs wrapper, etc). Optimization proceeds, but always restarts at the first iteration so convergence is slow.; - [x] Plugin examples are starting to show their age. We probably need to overhaul these.; - [x] The documentation needs to reflect the above changes.; - [x] DF and RI calls should soft fail with a proper error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246:3608,wrap,wrapper,3608,https://psicode.org,https://github.com/psi4/psi4/pull/246,2,"['message', 'wrap']","['message', 'wrapper']"
Integrability,"atible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old; ```. ### what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install `conda update psi4 libint -c psi4/label/dev` will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the `_4` (see above) AM6 libint, which is trouble. Easy to solve by updating libint: `conda update libint -c psi4/label/dev`. After that, your `conda list` should say `_5`.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. If what you really want is for the psi4 to work and the libint upgrade was a mistake, downgrade the libint: `conda install libint=1.2.1=h87b9b30_4 -c psi4`. ### what can go wrong with locally-built psi4?. * A major use of the `libint` conda package is to be a detectable pre-built dependency for a from-source psi4 compilation. If the `$CONDA_PREFIX/lib/libint.so` to which a psi4 `core.so` is linked suddenly changes identity, psi4 will be deranged.; * To fix this, `cmake` needs to detect the new libint headers and a half-dozen psi4 files need to rebuild.; ```; > cd <objdir>; > rm -rf external/upstream/libint/; > make; # cmake says: -- Found Libint 8: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libint.so (found version 1.2.1); ```; * If you need to avoid recompiling and instead revert your environment back to the AM6 libint, use the command in the last bullet of the previous section. ### Notes; * Only Linux affected. It took a week to build AM6 on the mac mini, so AM8 is not within reach. Thus, it's possible for the same job to run fine on linux binary but throw an angular momentum error on mac binary.; * `simint` max is AM7 both past and near future. Only `libint` is changing.; * Between higher AM and optimizing for multiple architectures, t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533:2282,depend,dependency,2282,https://psicode.org,https://github.com/psi4/psi4/issues/1533,1,['depend'],['dependency']
Integrability,"bject via the `Da`, `Db`, and `X` member variables. This is the most important point for this section! All codes except `cc` already store the OPDM/Lagrangian as `SharedMatrix` objects, so this is the path of least resistance. The one holdout predates `libmints` and instead uses a `libmints` `Matrix`-like structure. (See discussion in Step Four.) Existing code had to perform many an astounding number of type conversions to ultimately convert back to the type we had originally. `dct`, for instance, went `SharedMatrix` -> `file2` -> QTOrdered Block Matrix -> PSIO Entry -> Lower Triangle -> Block Matrix -> Lower Triangle -> PSIO Entry -> `SharedMatrix`. We now stay in a `SharedMatrix` the entire time. This type change is why `integraltransform_oei.cc:trans_one` is not used in the new version. When you use a `Matrix`, the transformation reduces to a `linalg::triplet` call.; 3. Lastly, prefactors. Because it's ambiguous what you call the Lagrangian, I'm going to use as a point of reference ""the thing you contract against the overlap derivatives"", because that is pefectly unambiguous. In the old code, you'd send -2 times that thing. Now, you send -1 times that thing. This is necessary for consistency with how the SCF code determines the value of the Lagrangian on a wavefunction object. If you want an example for how this works, see the newly added code in `dct_gradient_UHF.cc:compute_ewdm_odc`. With these changes, 30 lines of code replaces about 230. I call this a good start. ### Step Two: Conventional TPDM Tech; I don't see a way around still using `dpdbuf4` for this, even though this isn't the most plugin-friendly. The main simplification here will be eliminating the need to dump to `libiwl`. ## Questions; - [ ] There is a goof in `libtrans`: There is a [pre-defined frozen core space `O`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/mospace.h#L51-L57), and also a [pre-defined occupied space `o`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/l",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1745:2230,contract,contract,2230,https://psicode.org,https://github.com/psi4/psi4/pull/1745,1,['contract'],['contract']
Integrability,"c` [gradient technology](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/dfgrad.cc) does not make method-specific assumptions but cannot be used by other modules because it [uses](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/tei_grad_corr.cc#L181) [custom tensor machinery](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/tensors.h). `dfmp2` [gradient technology](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/corr_grad.cc#L123) is specific to `dfmp2`. `dct` does not produce true density fitted gradients but contracts its density matrices against derivatives of conventional integrals, which is close but not exact. Further, this lack of general density-fitted gradient machinery in Psi is blocking developers who want density-fitted gradients interfaced through Psi. (@fevangelista at least, and I believe @edeprince3 and @ssh2 as well.). ## Causes of Problems with the Current Design; * Many of the problems with the existing conventional integral gradients are due to the `libtrans` interface between the MO quantities and the AO quantities.; * `libtrans` only recognizes TPDM in `libiwl` format, which is why all codes must use that.; * There is a single `IntegralTransform` call [for all modules](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L511). Because the Quantum Trio-era `detci` and `cc` codes used QT ordering, that `IntegralTransform` must be [told to assume QTOrder](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L518), so all other modules must use QT order.; * The need to assemble a single 1PDM is, superficially, because [`IntegralTransform` is told to expect that](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L518). `backtransform_density` was never designed with any other structure in mind.; * Each code has its own density-fitted gradients for the simple reason that nobody tried to design truly general density-fitted gradients for Ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:3416,interface,interface,3416,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['interface'],['interface']
Integrability,cct3 integration,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1833:5,integrat,integration,5,https://psicode.org,https://github.com/psi4/psi4/issues/1833,1,['integrat'],['integration']
Integrability,"clang 4.0 / ifort 15.0.3 / MKL on macOS 10.12. After compiling from source code (tag v1.1), with ENABLE_gdma=ON, the following command quits without any output.; ```bash; python -c 'import psi4; print(psi4.__file__)'; ```; Running; ```bash; python -v -c ""import psi4""; ```; The last few lines of output are; ```bash; import psi4 # precompiled from /path/psi4-gdma/lib/psi4/__init__.pyc; dlopen(""/path/psi4-gdma/lib/psi4/core.so"", 2);; import psi4.core # dynamically loaded from /path/psi4-gdma/lib/psi4/core.so; ```; No error message. Modifying the following code; https://github.com/psi4/psi4/blob/master/psi4/src/core.cc#L1219-L1221; to; ```cpp; #ifdef INTEL_Fortran_ENABLED; static int argc = 1;; static char* argv = (char*) """";; for_rtl_init_(&argc, &argv);; #endif; ```; solves the problem. Any comments?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/771:526,message,message,526,https://psicode.org,https://github.com/psi4/psi4/issues/771,1,['message'],['message']
Integrability,"class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directly without any interference from Python and C++. The reason they were split this way: ESPPropCalc and PopulationAnalysisCalc and MultipolePropCalc do not share any members or variables. Example: only MPC requires an explicit origin to be set. ## Questions; - [x] I changed a return type to const & to avoid a large copy: https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1#r30055651; - [x] The return type in compute_mo_extents is an actual vector instead of a Shared pointer. It contains maximum three elements, so I left it at that: https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e#r30055734; - [x] I could remove the Prop baseclass completely from OEProp in the future. Only one function uses something from this. ## Checklist; - [x] Tests added for any new features; The tests are all still called from OEProp. The only new thing is the in-memory grid routine.; - [x] [All or relevant fraction of full tests run]; ctest -L quick was run. No errors. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1133:2909,rout,routine,2909,https://psicode.org,https://github.com/psi4/psi4/pull/1133,1,['rout'],['routine']
Integrability,composite method wrapper error,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/455:17,wrap,wrapper,17,https://psicode.org,https://github.com/psi4/psi4/issues/455,1,['wrap'],['wrapper']
Integrability,conda install needs ncurses as dependency,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/289:31,depend,dependency,31,https://psicode.org,https://github.com/psi4/psi4/issues/289,1,['depend'],['dependency']
Integrability,"conda release: py36hf231b52_0 ; Psi4 1.2.1 ; Rev {HEAD} 406f4de . The DF-CCSD iterations with the FNOCC and DFOCC modules diverge for a repulsive, C2-symmetric methanol dimer depending on how I read the geometry (it seems).; The first CCSD energy is already completely wrong. ```; Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 28.8732411379 28.8732411379 7.9419493294 0; 1 1 1 -305.0567532225 -333.9299943603 62248.5081330950 2; 2 2 1 -392.6124818532 -87.5557286307 1852579.6071174063 3; 3 3 1 -337.1095996214 55.5028822317 1639881736.6452949047 2; ```. The conventional CCSD shows no problems (fnocc/ccenergy tested). The (assumed) dependence on the input revealed itself while making a clean input for reporting.; The SCF part does not show anything odd. Geometry is correctly recognized. Attached tgz file contains the working and faulting input/output.; [tball.tar.gz](https://github.com/psi4/psi4/files/2240627/tball.tar.gz)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1110:175,depend,depending,175,https://psicode.org,https://github.com/psi4/psi4/issues/1110,2,['depend'],"['dependence', 'depending']"
Integrability,convert MDI to optional dependency,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1929:24,depend,dependency,24,https://psicode.org,https://github.com/psi4/psi4/pull/1929,1,['depend'],['dependency']
Integrability,"cpp:512: undefined reference to`CheMPS2::Irreps::Irreps(int)'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:513: undefined reference to `CheMPS2::Irreps::getNumberOfIrreps() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:541: undefined reference to`CheMPS2::Irreps::symm_psi2molpro(int*) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:512: undefined reference to `CheMPS2::Irreps::~Irreps()'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:611: undefined reference to`CheMPS2::Irreps::getGroupName[abi:cxx11]() const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:614: undefined reference to `CheMPS2::Irreps::getIrrepName[abi:cxx11](int) const'; /home/work/psi4/psi4/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/executable.cpp:646: undefined reference to`CheMPS2::Initialize::Init()'. When I look at the log file, it looks like the addition of the -flto flag in the CheMPS2 makefile breaks the CheMPS2 compile, in that when CMake creates the static archive there's a big bunch of messages like. [ 96%] Linking CXX static library libchemps2.a; BFD: CMakeFiles/chemps2-base.dir/CASPT2.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCF.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFdebug.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; BFD: CMakeFiles/chemps2-base.dir/CASSCFpt2.cpp.o: plugin needed to handle lto object. Commenting out the FLTO stuff in the CheMPS2 CMakeLists.txt results in a succesful compile. $ gcc --version; gcc (GCC) 5.3.1 20160406 (Red Hat 5.3.1-6); $ cmake --version; cmake version 3.4.3; $ git rev-parse --verify HEAD; b162ed15fcf1bfbc40b99bcc3a9ea7b812760033",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/414:1577,message,messages,1577,https://psicode.org,https://github.com/psi4/psi4/issues/414,1,['message'],['messages']
Integrability,"ction object is now returnable for all psi4 methods. This Wavefunction object can be passed to other codes or directly manipulated; - Driver has been refactored into a new recursive scheme (as opposed to the previous nested scheme) to better facilitate more complex calls; - The MOLDEN writer now accepts density matrices for writing natural orbitals; - Added command-line arguments -l to specify PSIDATADIR (for developers) and -s to specify location of scratch directories (overrides PSI_SCRATCH); - Internal upgrades to the direct product decomposition library, libdpd, especially regarding density fitting; - All code improvements now go through a review process on `github.com/psi4/psi4` in addition to a continuous integration server to ensure code quality; ## New methods; - Added quadratic convergence algorithms for RHF, UHF, ROHF; - Added DF-CCSD gradients (RHF references); - Added conventional and DF RASSCF and CASSCF energies; - Added X2C scalar relativistic corrections; - Added QM/MM computations with MM point charges: energies and gradients; - Added UHF/UHF stability analysis for non-PK integrals; - Added density cumulant functional theory methods DC-12, ODC-12, and ODC-13; - Added UHF DF-MP2 gradients and DF-MP3 energies; - Added CCD treatment of dispersion in SAPT; - Added DF orbital-optimized MP2.5 energies and gradients; - Added GUESS_MIX keyword to UHF/UKS to generate broken-symmetry guesses; - Added STO-3G, 3-21G, and def2 basis sets through radon; - Added DF (O)MP2/2.5/3 energies and gradients; ## Geometry optimization; - Improved support for frozen coordinates and fixed coordinates; - Dynamic level algorithm tries increasingly robust optimization approaches for difficult systems; - Added Cartesian coordinate optimizations; - Ability to freeze selected Cartesian coordinates; - Added iterative, restricted-step method to RFO geometry optimizations; - Added delocalized internal coordinate optimizations; ## External features; - Added EFP energies added via libEF",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367:2107,integrat,integration,2107,https://psicode.org,https://github.com/psi4/psi4/issues/367,1,['integrat'],['integration']
Integrability,"d and company to see if even translational projection is appropriate. ; - [x] more testing of isotopic, partial, non-stationary, etc., particularly wrt normco not just freq; - Add `compare_dicts` and `compare_molrecs` comparison functions. Former uses `deepdiff` module and does recursive comparison (sensitive to types). Can exempt fields with `forgive` arg. Latter makes use of former and also allows geoms to change if warranted by fix_com/orientation (checks via aligner).; - convert qcdb test suite from GnuMake (yes, that old) to pytest. switch compare_* fns to raise `TestComparisonError`, not `sys.exit(1)`.; - have to temporarily set `0 2` in some test cases, b/c the reconciler wants physically reasonable values, but the input molecule isn't currently passing through the code that would set those defaults.; - updated v2rdm_casscf pinning to one Eugene already fixed up to work w/psi; * **User-Facing for Release Notes**. ## Questions; - [ ] Right now, results of harmonic analysis is a dict of namedtuples with numpy arrays (contents and interface below). This is pretty convenient to access and work with. But it is numpy arrays attached to Wfn and thus mixing array classes on Wfn and unable to access c-side. Is this ok? Better ideas?; ```; Returns; -------; dict, text; Returns dictionary of VibrationAspect objects (fields: lbl unit data comment); Also returns text suitable for printing; ; +---------------+--------------------------------------------+-----------+------------------------------------------------------+; | key | description (lbl & comment) | units | data (real/imaginary modes) |; +===============+============================================+===========+======================================================+; | omega | frequency | cm^-1 | np.array(ndof) complex (real/imag) |; | q | normal mode, normalized mass-weighted | a0 u^1/2 | np.array(ndof, ndof) float |; | w | normal mode, un-mass-weighted | a0 | np.array(ndof, ndof) float |; | x | normal mode, normal",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:12808,interface,interface,12808,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['interface'],['interface']
Integrability,"d be handled. This PR addresses both of the above issues by changing DFJLinK to use the same incremental Fock formalism as DFJCOSK. Using the DFJCOSK incremental Fock formalism is preferred because DFJCOSK stores fewer matrices in the DFJCOSK class for incremental Fock usage, reducing memory requirements from a practical perspective, and lowering the amount of state contained in DFJLinK from a code design perspective. In standardizing the DFJLinK and DFJCOSK incremental Fock processes, the next CompositeJK PR will be smoother, and CompositeJK development can continue parallel to the developments discussed in https://github.com/psi4/psi4/pull/2682. Additionally, this PR serves as a first step the to decomposition of https://github.com/psi4/psi4/pull/2682 as discussed in that PR's comments, allowing for the full standardization of IncFock among integral-direct JK subclasses. For reviewers, since this PR is the bottleneck for two different routes of JK development (CompositeJK and IncFock standardization), it should be considered the highest-priority JK development PR to merge into Psi4 at the moment. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Switches DFJLinK to using the incremental Fock build implementation used in DFJCOSK. This change standardizes the incremental Fock implementation between DFJLinK and DFJCOSK and improves the memory usage of DFJLinK in the process.; - [X] Changes LinK machinery to support new incremental Fock formalism. ## Questions; - [ ] Since this PR specifically focuses on changes to DFJLinK, there are still a couple of small differences in IncFock between DFJLinK and DFJCOSK, mainly, refactorings and the aforementioned bells and whistles that DFJLinK has that DFJCOSK doesn't. Would it be better to make adjustments to DFJCOSK in this PR as well, to further standardize the two; or is it preferrable to punt that down to the next CompositeJK PR, when DFJLinK and DFJCOSK are combined into the pilot CompositeJK implementa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2792:2511,rout,routes,2511,https://psicode.org,https://github.com/psi4/psi4/pull/2792,1,['rout'],['routes']
Integrability,"d that we'd like to roll out to production alongside a pretty length list of other packages. Unfortunately, one or of our other dependencies is a somewhat monolithic and tangled web of FORTRAN and legacy code that regularly produces conflicts on macOS and sometimes causes deployment issues on Linux. (Others may have more comments on other deployment issues). We've been able to [resolve this](https://github.com/psi4/psi4/issues/2024) in the past, and we've also filled up the packaging channel on Slack on more than a few occasions. However, it may be more sustainable in the long run (for us and presumably other users) if we can get conda packaging for the Psi4 stack moved over to `conda-forge` - something we'd be happy to take a role in. * **Would this be useful for Psi4 developers and/or users?** I have personally had good experiences with migrations, both as a developer/maintainer and user. Getting everything on one channel (and using `conda-forge`'s existing automation) should help with dependency resolution/compatibility and in principle should also make build processes smoother. It would unblock some production issues with our software and be generally valuable for us - but we absolutely don't want to make life harder on for Psi4 developers/maintainers.; * **What technical blockers exist?** In the past we have gotten over some large hurdles (migrating OpenMM included contributing a recipe for CUDA toolkits) and more tedious blockers (migrating the OpenFF stack involved contributing something like 10-20 separate packages, piece by piece). `conda-forge` has [some tooling](https://conda-forge.org/docs/maintainer/knowledge_base.html#using-cmake) built around CMake, including MKL and some number of compilers. (Sorry - I'm not really an expert in packaging compiled code so I can't say much more about this - others may chime in!). But I don't know if there are insurmountable blockers to this process, or if that's been explored recently.; * **What can we do to help?** We ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300:1156,depend,dependency,1156,https://psicode.org,https://github.com/psi4/psi4/issues/2300,1,['depend'],['dependency']
Integrability,"dded QM/MM computations with MM point charges: energies and gradients; - Added UHF/UHF stability analysis for non-PK integrals; - Added density cumulant functional theory methods DC-12, ODC-12, and ODC-13; - Added UHF DF-MP2 gradients and DF-MP3 energies; - Added CCD treatment of dispersion in SAPT; - Added DF orbital-optimized MP2.5 energies and gradients; - Added GUESS_MIX keyword to UHF/UKS to generate broken-symmetry guesses; - Added STO-3G, 3-21G, and def2 basis sets through radon; - Added DF (O)MP2/2.5/3 energies and gradients; ## Geometry optimization; - Improved support for frozen coordinates and fixed coordinates; - Dynamic level algorithm tries increasingly robust optimization approaches for difficult systems; - Added Cartesian coordinate optimizations; - Ability to freeze selected Cartesian coordinates; - Added iterative, restricted-step method to RFO geometry optimizations; - Added delocalized internal coordinate optimizations; ## External features; - Added EFP energies added via libEFP; - Added PCM implicit solvent added for SCF; - Added interface to DMRG-CI and DMRG-SCF code in CheMPS2; - Added code to do potential energy scans via the WebMO interface; ## Performance optimization; - Sped up integrals computation by optimizing lib mints layer; - The PK JK builder has received significant performance improvements; - SAD guess has been improved dramatically, now default for all RHF computations; ## Bug fixes; - Various bug fixes and improvements to optimizer and IRC code; - Fixed a bug with DF-K in systems with only one occupied orbital; - Fixed an integer overflow bug in DF-CCSD(T); - Fixed modules that crashed when not finding full integral files available (because DF-HF was run instead of conventional HF); - Fixed problem with double hybrid DFT total energies not being printed; - Fixed crash caused by changing number of MO's during optimization (changes in number of MO's dropped due to linear dependencies); - Innumerable additional bug fixes and tweaks",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367:3442,interface,interface,3442,https://psicode.org,https://github.com/psi4/psi4/issues/367,3,"['depend', 'interface']","['dependencies', 'interface']"
Integrability,"default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProje",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:2152,depend,dependencies,2152,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['depend'],['dependencies']
Integrability,"dering combinations with a build-time setting in psi `psi4_SHGAUSS_ORDERING`; - [ ] successor to #2537 . no plans to transition to `sss` though. grab the fchk changes from that PR so it can be closed unmerged. fchk changes can be a follow-up PR.; - [x] need to transform cmake var from str to int; - [x] need to print gau/std to output file; - [x] ~only Linux CI expected to pass, as that's the only conda package built with the new L2. unedit docs-cf, two azure files, and one ecosystem file~; - [x] removed all the `LGTM_SRC` stuff since it's defunct and all the ""CHOOSE"" stuff, since a master L2 won't work anymore b/c need the shg order switching.; - [x] finishes the job of fully C++17 from #2392 . Newest Intel compilers from 2023.0 oneapi (versions icpc 2021.8 and icpx 2023.0) are ok with Libint2 and C++17. For older Intel, there's a keyword `psi4_CXX_STANDARD_Libint2` that can be reset to 14.; - [ ] pull together accumulated xhost changes (hiccup here is that `icpx` can take `-xHost` but `icx` can't, and our `option_with_flags` routine tries both so it throws an unnecessary warning. not a must for this PR).; - [x] the linux L2 is my local c-b, but mac and windows are from c-f staged-recipes. apparently any Hessian ERIs cause the Windows build to hang longer than the 6h Azure allows, so the W package is hessin-ints-less for TEI (I kept the onebody 2der). This isn't too debilitating since only HF and SVWN have analytic hessians anyways, so when an incapable L2 is detected (imagine that -- we can ask L2 what it can do!), it falls back to FD. That would be easy enough except the tests check too tightly for 3-pt FD to match analytical refs. So I've added a `d2ints` label to ctest and pytest to allow not running. This should probably convert to a skipif someday. Most of the tests I've checked individually and they would pass if findif points=5.; - [x] You notice a ""new"" boost-cpp dependency. Compiling against the header-only L2 C++11 interface (as psi4 does) requires a sele",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2861:1883,rout,routine,1883,https://psicode.org,https://github.com/psi4/psi4/pull/2861,1,['rout'],['routine']
Integrability,"dient""; json_data[""args""] = 'SCF'; json_data[""kwargs""] = {}; json_data[""options""] = {""BASIS"": ""STO-3G""}; json_data[""return_output""] = True; ; psi4.json_wrapper.run_json(json_data); ; assert psi4.compare_strings(""STO-3G"", json_data[""options""][""BASIS""], ""Options test""); > assert psi4.compare_integers(True, json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . expected = True, computed = False, label = 'Success'. def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite.; ; """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	Success: computed value (0) does not match (1). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/p4util/util.py:244: TestComparisonError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Options test......................................................PASSED; ____________________________________________________________________ test_dkh ____________________________________________________________________. @using_dkh; def test_dkh():; """"""dkh/molpro-2order""""""; ; Ne = psi4.geometry(""""""; 0 1; Ne; """"""); ; psi4.set_options({; 'reference': 'rhf',; 'basis': 'cc-pvtz-dk',; 'relativistic': 'dkh',; 'dkh_order': 2,; 'print': 2,; 'scf_type': 'pk'}); ; > e = psi4.energy('scf'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:790: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:17880,message,message,17880,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['message'],['message']
Integrability,"e C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:97 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; CMakeFiles/psi4-core.dir/build.make:108: recipe for target 'psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure' failed; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; CMakeFiles/Makefile2:646: recipe for target 'CMakeFiles/psi4-core.dir/all' failed; make[1]: *** [CMakeFiles/psi4-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041:3438,message,message,3438,https://psicode.org,https://github.com/psi4/psi4/issues/1041,1,['message'],['message']
Integrability,"e as build helper. this is the main point of the PR. will elaborate more in future.; - [x] there's a tidy new way of defining flags that are essential for the compiler _with_ the compiler in `CMAKE_<LANG>_COMPILER` instead of cluttering up the user choice var `CMAKE_<LANG>_FLAGS`. This is especially relevant for intel compilers that need gcc passed. There's something that's not set up right yet for Intel Clang. Thus, we need to pass `CMAKE_<LANG>_COMPILER_ARG1` through to psi4 subproject and all other externals.; - [x] let ctest tests run whether old or new d3 and gcp implementations present.; - [x] don't expect a pylibefpConfig.cmake for libefp detection. this is the case with the c-f package -- I'll probably put it back later when libefp/pylibefp repos combine.; - [x] I was using inconsistent naming for basis_set_exchange detection/import, so fix that.; - [x] adapt docs build so that it can use Ninja (or presumably any non-Makefiles) generator. The special thing about Makefiles is that it works as expected for glob depends. So we can tell the basis table to regenerate if any of the gbs files change. Other generators won't understand this. But most docs builds are one-off, not continuous development anyways, so it's worth no globs and yes flexibility. ADDED: switched to ninja for docs and docs-pr (ok memory-wise at max parallelism b/c debug build). ADDED 12 Nov; - [x] update ecosystem and docs GHA and linux azure to use the path-advisor env/cache procedure. this helps keep the path-advisore procedure tested and keeps testing envs up-to-date. alternate testing can still be imposed by `sed`ing the envs.; - [x] in azure linux, use the three testing lanes to go beyond quicktests. apart from some longer tests, we're now hitting all but stdsuite non-quick. ; - [x] fixed the windows nightly build through azure, which was many layers of bugs. the improved path handling in psi4 & psi4/__init__.py from May technically didn't play nicely with the build-and-copy-into-place of t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:3362,depend,depends,3362,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['depend'],['depends']
Integrability,"e core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prevents Psi4 proper from having to know about `MyGreatMatrix`. ; ## Libraries that are not part of Psi4 core are now in external. Although allowed by the more permissive licenses, it is somewhat dubious to mix external libraries in with ones own source code. Separating them makes it clear to others that these are not our codes, but used with (implicit) permission. It also keeps the core free of the external dependencies in a far more controlled manner. Right now the external libraries are: ambit, boost, erd, libint, efp, dkh, and gdma. I still need to move GTFock there.; ## Headers. I strongly encourage the Psi4 community to review what a forward declaration is as well as how to properly use header files. I have posted a primer on our [BestPractices](https://github.com/psi4/psi4/wiki/BestPractices) wiki. There is a lot of copy/paste going on in the preamble of source files. You really should be assembling you includes/typedefs/etc. on a file by file basis to ensure you know what you are including, where it is coming from, and most importantly are only including what you need. The reason the build is so much faster is that I have trimmed many of the unneeded includes.; ### Unified Header Inclusions. All include files are (or should be) relative to root (In practice I missed some, but they are in the same directory as the file they are included in and are fine for now). The reason for this ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:4395,depend,dependencies,4395,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['depend'],['dependencies']
Integrability,"e'll then just change the variable in the header and eliminate the relevant converters.; * To eliminate code duplication, I added some new objects to the wavefunction that ""contain"" alpha/beta specific quantities. So instead of needing to write the orbital rotation code once for closed-shell, once for open-shell alpha, and once for open-shell beta, you only write it once. I'm not sure how well it generalizes to other functions, but it sure cleaned up update_mo!. ## Capability Loss/Gain; As a result of this switch, we lose the ability to ""level shift"" in OCC. ""Level shift"" is a misnomer and actually refers to scaling the diagonal elements of the DIIS B-matrix. When I'm done, the orbital convergence will be so much better that we won't notice it's gone. In the short term, this does cause more test failures. ## Questions; * Because we're losing ""level shifting"", we're losing some keywords. I don't know how to deprecate these. If they're provided as module-level keywords, then I don't know the technical details of how you would raise a warning message. The bigger problem is when they're global keywords. DFOCC still uses ""level shifting"", so I can only raise a warning when I know what module the user is in. Thoughts on how to handle this?; * Should we be losing ""level shifting""? We can add _damping_ to `libdiis` if there's demand for it. I think there are better things to do with my time. ## Quick Test Status; * Switching out the DIIS version caused the `omp2p5-2` test's OMP2.5 energy to fall outside convergence criteria, again emphasizing how unstable orbital convergence in OCC is. We'll find out what the actual value is by the time I'm done.; * Losing ""level shifting"" was enough to break the `ocepa-grad2` test. This test asks for a higher-than-normal convergence from OCC, so that's no surprise. (I imagine Psi ups the energy convergence default when the user requests a gradient.) As a temp fix, I lowered the demanded energy convergence from 8 to 7. Even after that, we'r",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783:2699,message,message,2699,https://psicode.org,https://github.com/psi4/psi4/pull/1783,1,['message'],['message']
Integrability,"e, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; Please note that unlike `sq_rsp(...)`, the new functions do not take a ""tolarence"" value, but this is actually a null change as that parameter has been set-but-unused in `sq_rsp(...)` since ~forever ago when `sq_rsp(...)` switched to calling DSYEV internally.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure and guard against non-square matrices.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure. Add a sanity checks for non-square matrices and illegal values of ""diagonalization order"".; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure. ## Questions; - [x] Is `libciomr` a good place for the new wrappers to live in? The one they are replacing is there, so it seemed like as good of a place as any. ## Checklist; - [x] No new feature",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2686:2052,wrap,wrapper,2052,https://psicode.org,https://github.com/psi4/psi4/pull/2686,1,['wrap'],['wrapper']
Integrability,"ed #2677)**; - [x] Delete unused functions/overloads from `occ`: `Array2d::diagonalize`, `Array2d::davidson`, `Array2d::cdsyev`, `Array2d::cdgesv`, `Array2d::lineq_flin`, `Array2d::lineq_pople`, `SymBlockMatrix::davidson`, `SymBlockMatrix::diagonalize`, `SymBlockMatrix::cdsyev`, `SymBlockMatrix::cdgesv`, `SymBlockMatrix::lineq_flin`, `SymBlockMatrix::lineq_pople` (never called and not PSI_API) **(merged #2679)**; - [x] Delete unused functions/overloads from `dfocc`: `Array2d::diagonalize, Array2d::davidson, Array2d::cdsyev, Array2d::cdgesv, Array2d::lineq_flin, Array2d::lineq_pople` and `Tensor2d::davidson, Tensor2d::cdsyev, Tensor2d::cdgesv, Tensor2d::lineq_flin, Tensor2d::lineq_pople` (PR #2684); - [x] Delete unused function overloads from `libmints`: `Matrix::diagonalize` (PR #2693); - [x] Delete commented out code, an unused `extern FILE*` and unused `#include`s from `mcscf::SCF::energy` (PR #2678). ### New DSYEV wrappers, anti-`sq_rsp(...)` crusade; - [x] Implement two new wrapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrap",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:1494,wrap,wrapper,1494,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['wrap'],['wrapper']
Integrability,"elete `Wabei_RHF_FT2_a.cc` (never called and not PSI_API) **(merged #2677)**; - [x] Delete unused functions/overloads from `occ`: `Array2d::diagonalize`, `Array2d::davidson`, `Array2d::cdsyev`, `Array2d::cdgesv`, `Array2d::lineq_flin`, `Array2d::lineq_pople`, `SymBlockMatrix::davidson`, `SymBlockMatrix::diagonalize`, `SymBlockMatrix::cdsyev`, `SymBlockMatrix::cdgesv`, `SymBlockMatrix::lineq_flin`, `SymBlockMatrix::lineq_pople` (never called and not PSI_API) **(merged #2679)**; - [x] Delete unused functions/overloads from `dfocc`: `Array2d::diagonalize, Array2d::davidson, Array2d::cdsyev, Array2d::cdgesv, Array2d::lineq_flin, Array2d::lineq_pople` and `Tensor2d::davidson, Tensor2d::cdsyev, Tensor2d::cdgesv, Tensor2d::lineq_flin, Tensor2d::lineq_pople` (PR #2684); - [x] Delete unused function overloads from `libmints`: `Matrix::diagonalize` (PR #2693); - [x] Delete commented out code, an unused `extern FILE*` and unused `#include`s from `mcscf::SCF::energy` (PR #2678). ### New DSYEV wrappers, anti-`sq_rsp(...)` crusade; - [x] Implement two new wrapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`,",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:1432,wrap,wrappers,1432,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['wrap'],['wrappers']
Integrability,"eneric python except for translation from qcschema to psi4.wfn at the end (finidf does poorly in this b/c salcs call libmints). at the top of the file is a docstring outlining the procedure. all the wrappers have a mix of class and free functions for historical reasons. this can certainly be refactored once rebasing isn't an issue.; * `driver_cbs.py` — big modifications, mostly additions, but changes are mostly moving code around and renaming big dicts (`need` isn't too informative) and trying to narrow the points of data transfer. again, there's an outline at the top of the file.; * `driver_nbody.py` — big modifications, might be net deletion of code lines. Lots of renaming of variables. Some bugs fixed -- I can only hope more than were added. Docstrings and code outline should be current. I didn't rework multilevel (separate file) except to make gradient run and allow different order of keys in user `levels` kwarg. I wouldn't bother with the diff. . ## Todos. - [x] `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - [x] any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - [x] extrapolation functions for composite need to be registered with register_xtpl_function; - [x] CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - [x] no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass ref_gradient array to test on or `set findif fd_project` T/F explicitly to control.; - [x] `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. json_ret is now an object, so `.` access, not dictionary. The old schema ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:2871,depend,dependency,2871,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['depend'],['dependency']
Integrability,"engthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. Note: Psi4 1.3 starts around PR #1065. TODO: Document #1393, . ##. # Major Points of Interest. - Added native Windows compatibility without the WSL requirement.; - DFT collocation grids can now be cache in-memory to avoid extra computation and lowering the total cost of DFT by up to a factor of two (#1233).; - Wavefunctions can now be serialized to disk and back using `Wavefunction.to_file/from_file` (#1304).; - Psi4 is now Python 3.5+ only, Psi4 1.4 will be Python 3.6+ only. Potential:; - A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135).; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349). . # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`. ##. # New Methods; - Improved support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1; - VV10 dispersion is now available for UKS references.; - Cubeprop can now compute the `FRONTIER_ORBITALS` and `DUAL_DESCRIPTOR` quantities.; - nZaPa-NR basis sets have been added.; - The recursive driver can now compute N-body gradients and Hessians. # New External Libraries; - [QCElemental](https://github.com/MolSSI/QCElemental) - A library for CODATA, molecule manipulation routines, and periodic table information.; - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. # First Time Contributors; - @raimis - #1399, #1185, #1183, +70 more!; - @obrien951 #1359, #1222, #1130, #1140, #1100, #1097; - @zachglick #1453, #1304, #1291; - @tovrstra #1510, #1506, #1500; - @timostrunk #1133, #1128, #1127; - @mdav2 #1374, #1142; - @chapincav",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406:1142,interface,interface,1142,https://psicode.org,https://github.com/psi4/psi4/issues/1406,1,['interface'],['interface']
Integrability,enhances the visibility of psi4's error messages,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862:40,message,messages,40,https://psicode.org,https://github.com/psi4/psi4/pull/1862,1,['message'],['messages']
Integrability,"er API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Triplet TDDFT excitations from RKS are now supported. ## Theoretical Analysis. Why were DFT triplets harder than HF triplets? To understand this, we need to understand both the origin of the triplet matrix and the spin properties of the relevant matrix elements. 1. Starting from the UKS RPA/TDA matrices when Ca = Cb, we can do a similarity transformation to obtain the singlet and triplet RKS matrices. The new basis elements for the singlet block all take the form (i->a α + i->a β) / sqrt(2), while the new basis elements for the triplet block take form (i->a α - i->a β) / sqrt(2).; 2. The electron potential is spin-free. Because the coulomb J and exchange K terms are expectation values of this, the associated integrals are spin free, assuming spin does not integrate to zero. For J, spin only integrates to zeroes if there is a spin mismatch in either the bra or the ket. Because we only consider Sz preserving excitations, no spin mismatches are possible. For K, a bra orbital needs to have the same spin as a ket orbital. Because both bra orbitals have the same spin, and both ket orbitals have the same spin, this requires that _all_ orbitals have the same spin. Meanwhile, the DFT V terms are second derivatives of the DFT energy with respect to orbital rotation generators. These are not spin-free.; 3. Now let's combine the two above facts. After performing the spin-integration in the triplet case, you end up with [(α|α) - (α|β) - (β|α) + (β|β)]. Upon exploiting spin-restriction, this reduces to [(α|α) - (α|β)]. For J, the second term is equal to the first, so the two cancel. For K, the second term is zero, so you have the first integral. For V, the two terms are neither equal nor zero. The V term cannot be neglected, even though it's normally added to the J term, which here is zero. ## Dev notes & details; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2885:1653,integrat,integrates,1653,https://psicode.org,https://github.com/psi4/psi4/pull/2885,1,['integrat'],['integrates']
Integrability,"erhaul.; This is another shard of the https://github.com/psi4/psi4/pull/2642 mega-PR that can be merged after PR #2678 and #2738 are in. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement two new wrapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; Please note that unlike `sq_rsp(...)`, the new functions do not take a ""tolarence"" value, but this is actually a null change as that parameter has been set-but-unused in `sq_rsp(...)` since ~forever ago when `sq_rsp(...)` switched to calling DSYEV internally.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure and guard against non-square matrices.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure. Add a sanity checks for non-square matrices and illegal values of ""diagonalization order"".; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with ne",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2686:1709,wrap,wrapper,1709,https://psicode.org,https://github.com/psi4/psi4/pull/2686,1,['wrap'],['wrapper']
Integrability,"es.; * `libtrans` only recognizes TPDM in `libiwl` format, which is why all codes must use that.; * There is a single `IntegralTransform` call [for all modules](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L511). Because the Quantum Trio-era `detci` and `cc` codes used QT ordering, that `IntegralTransform` must be [told to assume QTOrder](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L518), so all other modules must use QT order.; * The need to assemble a single 1PDM is, superficially, because [`IntegralTransform` is told to expect that](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/deriv.cc#L518). `backtransform_density` was never designed with any other structure in mind.; * Each code has its own density-fitted gradients for the simple reason that nobody tried to design truly general density-fitted gradients for Psi. ## Conventions; Unless otherwise indicated, any mention of ""1PDM"" or ""2PDM"" refers to relaxed quantities, the things you contract against the one-electron and two-electron integral derivatives. ## Interface Proposal; * Backtransformation of two-index quantities no longer requires having the _entire_ matrix assembled. You can backtransform blocks at a time based on occupation, which is what you're more likely to have.; * Either each caller code creates its own integral transformation object and instructs `libtrans` on what back-transformations to do directly, or the integral transformation object remains in `deriv.cc`, and the caller code passes information on what back-transformations need to be done. I'm leaning more towards the first option.; * Off-diagonal blocks can be marked as Hermitian, in which case both the AO-transform of the block and the transpose of the AO-transform will be added to the running AO basis density matrix. This, prevents, for example, transforming the `ov` and the `vo` blocks.; * Density-fitted gradients will behave quite similarly to the refactored corr",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:4496,contract,contract,4496,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['contract'],['contract']
Integrability,"escription; In this PR, we implement a pilot version of least squares tensor hypercontraction (LS-THC)... factoring 4-index ERIs (O(N^4)) into two-index quantities (i.e. $(mn|rs) = x_{m}^{P}x_{n}^{P}Z^{PQ}x_{r}^{Q}x_{s}^{Q}$). In the LS-THC formulation, $P$ and $Q$ are derived from grid points, and. $x_{m}^{P} = w_{P}^{\frac{1}{4}} \phi_{m}(x_{P}, y_{P}, z_{P})$,; $E^{PQ} = x_{m}^{P}x_{n}^{P}(mn|rs)x_{r}^{Q}x_{s}^{Q}$; $S^{PP'} = (x_{m}^{P}x_{m}^{P'})^{2}$; $Z^{PQ} = (S^{PP'})^{-1} E^{P'Q'} (S^{QQ'})^{-1}$. This is based off of the work of [Parrish et al. (2012)](https://pubs.aip.org/aip/jcp/article/137/22/224106/194901/Tensor-hypercontraction-II-Least-squares). These quantities can be constructed integral-direct and non-iteratively. No four or even three-index quantities are stored, thereby allowing for the future development of efficient, low-memory quantum chemistry algorithms in Psi. This is a PR in a series of planned PRs that will involve:; 1.) LS-THC-JK (integral-direct SCF without recomputing ERIs every iteration and faster K construction); 2.) LS-THC-MP2; 3.) Local grid implementation of LS-THC to allow for use in local correlation methods (DLPNO-MP2, DLPNO-CCSD/(T)). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Added Python interface (Pybind) for building LS-THC quantities that allow for rapid prototyping of new methods involving THC; - [x] Developed infrastructure for the development of alternate ways to perform THC (i.e. PF-THC). ## Dev notes & details; - [x] Implemented LS-THC C/Py-side for future QC methods. ## Questions; - [x] Is this the proper way to export this object Py-side?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3157:1386,interface,interface,1386,https://psicode.org,https://github.com/psi4/psi4/pull/3157,1,['interface'],['interface']
Integrability,"eset to 14.; - [ ] pull together accumulated xhost changes (hiccup here is that `icpx` can take `-xHost` but `icx` can't, and our `option_with_flags` routine tries both so it throws an unnecessary warning. not a must for this PR).; - [x] the linux L2 is my local c-b, but mac and windows are from c-f staged-recipes. apparently any Hessian ERIs cause the Windows build to hang longer than the 6h Azure allows, so the W package is hessin-ints-less for TEI (I kept the onebody 2der). This isn't too debilitating since only HF and SVWN have analytic hessians anyways, so when an incapable L2 is detected (imagine that -- we can ask L2 what it can do!), it falls back to FD. That would be easy enough except the tests check too tightly for 3-pt FD to match analytical refs. So I've added a `d2ints` label to ctest and pytest to allow not running. This should probably convert to a skipif someday. Most of the tests I've checked individually and they would pass if findif points=5.; - [x] You notice a ""new"" boost-cpp dependency. Compiling against the header-only L2 C++11 interface (as psi4 does) requires a select few boost headers. In building the L2 package, one can either ask L2 to copy those few files in to `include/libint2/boost/` (that is, vendor boost) or not, effectively passing the problem along to the consumer (psi). In my own conda packages for L2, I did the former, so psi didn't need any boost. For the c-f L2 packages, I figured it was better practice to not vendor, hence the ""new"" dep. It's header-only, not boost::python or any of the boost compiled libs, so not too much trouble, I think. ## Questions; Can look at the libmints files to form an opinion on these.; - [x] `libint2::initialize()` was called three times, but `libint2::finalize()` only once. I added two more, but should I have?; - [x] Also, since we need to set the ordering, should the init be centralized in core.cc, or is it fine as is?; - [ ] technically, ordering could be set at runtime. that seemed hard to rel",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2861:2746,depend,dependency,2746,https://psicode.org,https://github.com/psi4/psi4/pull/2861,1,['depend'],['dependency']
Integrability,"esolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems to converge in just one step for c1 and c2v. I suppose it's possible the guess space just isn't grabbing roots for all symmetries, but increasing the number of roots to 30 doesn't change the results. perhaps more disturbing, though, is that the in-core diagonization routine `RSP` gives yet another set of results:; ```; Psi4 LiCN/6-31G* (symmetry c1, RSP solver); CI ROOT 1 TOTAL ENERGY:-99.58887523722994; CI ROOT 2 TOTAL ENERGY:-99.56069933848028; CI ROOT 3 TOTAL ENERGY:-99.56069933848008; CI ROOT 4 TOTAL ENERGY:-99.53483755106353; CI ROOT 5 TOTAL ENERGY:-99.53483755106343; CI ROOT 6 TOTAL ENERGY:-99.53418772103414; ```; here, we find 3 roots lower in energy than either GAMESS or the default Psi4 routines, and we also recover the -99.534837 E_h root, but this time as a doubly-degenerate state. the other routines mentioned in [the manual; ](https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html#term-DIAG_METHOD-DETCI) are deprecated kwargs (see also: #2640 ), so I can't test them. . given [`np.linalg.eigh`](https://numpy.org/doc/stable/reference/generated/numpy.linalg.eigh.html) just uses LAPACK's syevd/heevd, and `RSP` is just supposed to be LAPACK's dsyev, this result is very perturbing. . I've attached output files for the [Davidson](https://github.com/psi4/psi4/files/13431543/output_dav.txt) and [RSP](https://github.com/psi4/psi4/files/13431545/output_rsp.txt) schemes, as well as [GAMESS](https://github.com/psi4/psi4/files/13431555/output_gms.txt).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:2707,rout,routines,2707,https://psicode.org,https://github.com/psi4/psi4/issues/3083,2,['rout'],['routines']
Integrability,"esolved) over whether DF-CC2 is RTG, see #2710. A result is that you need to `set qc_module ccenergy` explicitly to use DF for CC2 -- a test case edit was needed.; - [x] `run_dfocc`, `run_dfocc_gradient` fns were simplified by using the `method_algorithm_type` fn; - [x] `run_fnodfcc`, `run_fnocc`, `run_cepa` were simplified by using the `method_algorithm_type` fn and the ""director"" dictionary syntax; - [x] some impossibilities fended off rather than being silently ignored: non-df-mp2 in dhdft, non-conv detci; - [x] The involved which-do-I-run--energy-gradient-or-hessian logic in `negotiate_derivative_type` and friends in driver_util.py does a great job at its task, but its error messages have been wanting, being hampered by being generated by exceptions. In particular, they give no clue how close you are to a working method -- do you need to tweak aefc or uhf/rohf or is this method nowhere in psi or have you misspelled it? Now, the ManagedMethodsError exception has been reworked to return current conditions data (to be caught and reformatted) and the error message itself (usually not seen directly) has been reworked to provide more conditions and a link to the table row in the docs where one can see what _would_ run. Back at driver_util.py, these errors are reformatted according to whether managed or plain method, whether deriv isn't available at all or just not demanded deriv, etc. Whenever possible, try to provide conditions that didn't run and a docs link. Some examples of before and after at https://github.com/psi4/psi4/pull/2731/files#diff-d6e974accd9a58a9993b3babac9fab5c85099ba6072de01c9a6bcc4ad430dc56L22-R82 .; - [x] Added mp4(sdq), mp4, zapt2, cisd, qcisd, qcisd(t), fci, cepa(1), cepa(3), acpf, aqcc, ccd, bccd, bccd(t), cc2, cc3, and some representative DFTs (svwn, pbe, b3lyp, wb97x, b2plyp) to standard suite testing to nail down their capabilities. Added some advice to the stdsuite so that others can perhaps edit it.; * all but cepa(1), cepa(3), acpf, aqcc,",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:9417,message,message,9417,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['message'],['message']
Integrability,"est_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In actual `driver.py`, the function calls have been switched out, but it's only using half the info due to differences in non-ddd driver code routing. To mirror ddd behavior, the function is called even for energy() and properties(), mostly to take the place of `_method_exists()`. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2536:2140,rout,routing,2140,https://psicode.org,https://github.com/psi4/psi4/pull/2536,1,['rout'],['routing']
Integrability,external charge field interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1541:22,interface,interface,22,https://psicode.org,https://github.com/psi4/psi4/issues/1541,1,['interface'],['interface']
Integrability,"external'; loading initial cache file /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:44 (find_dependency); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/psi4/psi4Config.cmake:145 (find_package); CMakeLists.txt:31 (find_package). -- Configuring incomplete, errors occurred!; ```; I'm using cmake version 3.10.2, GNU compilers version 7.3.0 and Intel MKL 2019.1.144; I noticed that ``stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake`` does",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1426:1504,message,message,1504,https://psicode.org,https://github.com/psi4/psi4/issues/1426,1,['message'],['message']
Integrability,fmt: clang-format GDMA interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1166:23,interface,interface,23,https://psicode.org,https://github.com/psi4/psi4/pull/1166,1,['interface'],['interface']
Integrability,fmt: clang-format MRCC wrapper,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1160:23,wrap,wrapper,23,https://psicode.org,https://github.com/psi4/psi4/pull/1160,2,['wrap'],['wrapper']
Integrability,fockci integration,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1838:7,integrat,integration,7,https://psicode.org,https://github.com/psi4/psi4/issues/1838,1,['integrat'],['integration']
Integrability,"for df-mp2, these are the cases:; uhf energy: good, this is is Rob's code (we're pretty sure; test); rohf energy: we think this may be in Rob's code, but not verified vs other codes ; uhf grad: we think this may be in Rob's code, but not verified vs other codes ; rohf grad: no good. Ugur doesn't support rohf scf being fed into his omp2 w/o subsequent opt. ticket task: verify the above with the code and with the authors. if needed, re-route in driver (see mp2_type as example in `proc.py`. If anything looks to hard or want to defer, create a new ticket for it, and do all you can to close out this one. After discussion below, consolidated tasks:; - [x] re-route uhf grad through Ugur's code; - [x] make rohf grad fail gracefully; - [x] test all four cases; - [x] for uhf, make sure findif of Rob == Ugur; - [ ] comment `dfmp2/corr_grad.cc` stubs according to below",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/107:438,rout,route,438,https://psicode.org,https://github.com/psi4/psi4/issues/107,2,['rout'],['route']
