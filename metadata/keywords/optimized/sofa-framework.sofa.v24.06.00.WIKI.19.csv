quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Safety,"﻿. SOFA API: sofa::helper::system::FileEventListener Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::system::FileEventListener Class Referenceabstract . #include <FileMonitor.h>; Contains an event-based API to monitor file changes. ; More... Inheritance diagram for sofa::helper::system::FileEventListener:. [legend]; Detailed Description; Contains an event-based API to monitor file changes. ; Those functions are here only to avoid depending on an external library, and they provide only basic functionality.; This set of functions is not meant to be complete, but it can be completed if need be.; Example of use: 1) implement the FileEventListener interface 2) register the files you want to monitor using FileMonitor::addFile(""mypath/to/file"", &mylistener); 3) call the update function to process & trigger the events.; The system does not contains any hidden thread. If you request the monitoring to happens in an hidden thread you can implement it externally. . Public Member Functions; virtual ~FileEventListener ();  ; virtual void fileHasChanged (const std::string &filename)=0;  . Constructor details. ◆ ~FileEventListener(). virtual sofa::helper::system::FileEventListener::~FileEventListener ; (; ). inlinevirtual . Function details. ◆ fileHasChanged(). virtual void sofa::helper::system::FileEventListener::fileHasChanged ; (; const std::string & ; filename). pure virtual . Implemented in sofa::gui::qt::RealGUIFileListener, and sofa::gl::GLSLFileListener. sofahelpersystemFileEventListener; Generated on Mon Nov 11 2024 03:31:03 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_event_listener.html:534,avoid,avoid,534,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_event_listener.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_event_listener.html,1,['avoid'],['avoid']
Safety,"﻿. SOFA API: sofa::helper::system::FileMonitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::helper::system::FileMonitor Class Reference . #include <FileMonitor.h>. Static Public Member Functions; static int addFile (const std::string &filename, FileEventListener *listener);  add a new filepath to monitor and a listener to be triggered in case of change. returns >= 0 if the file was successfully added returns < 0 in case of error. More...;  ; static int addFile (const std::string &directoryname, const std::string &filename, FileEventListener *listener);  add a new path and file to monitor and a listener to be triggered in case of change. returns >= 0 if the file was successfully added returns < 0 in case of error. More...;  ; static int updates (int timeout=1);  check if the file have changed, colalesc the similar events and notify the listener. timeout is the number of seconds to block the calling process. Can be 0 (in this case it return immediately if there is no event. return -1 in case of error return >= 0 otherwise. More...;  ; static void removeListener (FileEventListener *listener);  remove the provided listener. If the listener is not existing, do nothing If the listener is nullptr, do nothing If the listener is associated with one or more file...remove all the associations. Keep in mind that the file are still monitored. More...;  ; static void removeFileListener (const std::string &filename, FileEventListener *listener);  remove the provided listener for a given file If the listener is not existing, do nothing If the listener is nullptr, do nothing If the listener is associated with one or more file...remove all the associations. Keep in mind that the file are still monitored. More...;  . Function details. ◆ addFile() [1/2]. int sofa::helper::system::FileMonitor::addFile ; (; const std::string & ; directoryname, . const std::string & ; filename, . Fil",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html:867,timeout,timeout,867,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_monitor.html,2,['timeout'],['timeout']
Safety,"﻿. SOFA API: sofa::helper::system::FileSystem Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::helper::system::FileSystem Class Reference . #include <FileSystem.h>; Contains functions to interact with the file system. ; More...; Detailed Description; Contains functions to interact with the file system. ; Those functions are here only to avoid depending on an external library, and they provide only basic functionality. In particular, most of them were only written to work with absolute paths.; This set of functions is not meant to be complete, but it can be completed if need be. . Static Public Member Functions; static std::string getExtension (const std::string &filename);  Get the extension of a file from an absolute path description. More...;  ; static bool listDirectory (const std::string &directoryPath, std::vector< std::string > &outputFilenames);  List the content of a directory. More...;  ; static bool listDirectory (const std::string &directoryPath, std::vector< std::string > &outputFilenames, const std::string &extension);  List the files in a directory which match the given extension. More...;  ; static int findFiles (const std::string &directoryPath, std::vector< std::string > &outputFilePaths, const std::string &extension, const int depth=0);  Find the files from a directory which match the given extension. More...;  ; static bool createDirectory (const std::string &path);  Create a directory. (This function accepts relative paths) More...;  ; static bool removeDirectory (const std::string &path);  Remove an empty directory. (This function accepts relative paths) More...;  ; static bool removeAll (const std::string &path);  Remove a non-empty directory. (This function accepts relative paths) More...;  ; static bool removeFile (const std::string &path);  ; static std::string findOrCreateAValidPath (const std::string path);  check that all element in the ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_system.html:443,avoid,avoid,443,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_system.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1_file_system.html,1,['avoid'],['avoid']
Safety,"﻿. SOFA API: sofa::helper::system::thread::CircularQueue< T, StoragePolicy, ThreadAccessPolicy > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::system::thread::CircularQueue< T, StoragePolicy, ThreadAccessPolicy > Class Template Reference . #include <CircularQueue.h>. Inheritance diagram for sofa::helper::system::thread::CircularQueue< T, StoragePolicy, ThreadAccessPolicy >:. [legend]; Detailed Description; template<class T, template< class U > class StoragePolicy, class ThreadAccessPolicy>; class sofa::helper::system::thread::CircularQueue< T, StoragePolicy, ThreadAccessPolicy >; This class implements a policy-based circular queue. The template parameter ThreadAccessPolicy allows to customize access to the array according to thread-safety requirements. . Public Member Functions;  CircularQueue ();  ;  ~CircularQueue ();  ; bool push (const T &item);  ; bool pop (T &item, bool clear=true);  ; bool isEmpty () const;  ; unsigned size () const;  ; bool isFull () const;  ; unsigned skip (unsigned maxsize, bool clear=true);  ; template<class OutputIterator > ; unsigned pop (OutputIterator out, unsigned maxsize, bool clear=true);  . Constructor details. ◆ CircularQueue(). template<class T , template< class U > class StoragePolicy, class ThreadAccessPolicy > . sofa::helper::system::thread::CircularQueue< T, StoragePolicy, ThreadAccessPolicy >::CircularQueue. ◆ ~CircularQueue(). template<class T , template< class U > class StoragePolicy, class ThreadAccessPolicy > . sofa::helper::system::thread::CircularQueue< T, StoragePolicy, ThreadAccessPolicy >::~CircularQueue. Function details. ◆ isEmpty(). template<class T , template< class U > class StoragePolicy, class ThreadAccessPolicy > . bool sofa::helper::system::thread::CircularQueue< T, StoragePolicy, ThreadAccessPolicy >::isEmpty. ◆ isFull(). template<class T , template< class U > class StoragePolicy, class Thre",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1thread_1_1_circular_queue.html:859,safe,safety,859,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1thread_1_1_circular_queue.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1thread_1_1_circular_queue.html,1,['safe'],['safety']
Safety,"﻿. SOFA API: sofa::linearalgebra::SparseMatrix< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::linearalgebra::SparseMatrix< T > Class Template Reference . #include <SparseMatrix.h>. Inheritance diagram for sofa::linearalgebra::SparseMatrix< T >:. [legend]; Detailed Description; template<typename T>; class sofa::linearalgebra::SparseMatrix< T >; This is basically a map of map of T, wrapped in a linearalgebra::BaseMatrix interface. The const access methods avoid creating the entries when they do not exist. . Protected Attributes; Data data;  ; Index nRow;  ; Index nCol;  . Public Member Functions;  SparseMatrix ();  ;  SparseMatrix (Index nbRow, Index nbCol);  ; LineIterator begin ();  ; LineIterator end ();  ; LineConstIterator begin () const;  ; LineConstIterator end () const;  ; Line & operator[] (Index i);  ; const Line & operator[] (Index i) const;  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both r",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:659,avoid,avoid,659,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,1,['avoid'],['avoid']
Safety,"﻿. SOFA API: sofa::simulation Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::simulation Namespace Reference . Namespaces;  Colors;  ;  common;  ;  core;  ;  graph;  ;  mechanicalvisitor;  ;  node;  ;  xml;  . Classes; class  FindByTypeVisitor;  ; class  SceneLoaderPHP;  ; class  SceneLoaderXML;  ; class  TransformationVisitor;  ; class  AnimateBeginEvent;  ; class  AnimateEndEvent;  ; class  AnimateVisitor;  ; class  BaseMechanicalVisitor;  ; class  BehaviorUpdatePositionVisitor;  ; class  CleanupVisitor;  ; class  CollisionAnimationLoop;  Component responsible for main simulation algorithms, managing how and when collisions and integrations computations happen. More...;  ; class  CollisionBeginEvent;  ; class  CollisionEndEvent;  ; class  CollisionVisitor;  Compute collision reset, detection and response in one step. More...;  ; class  CollisionResetVisitor;  Remove collision response from last step. More...;  ; class  CollisionDetectionVisitor;  Compute collision detection. More...;  ; class  CollisionResponseVisitor;  Compute collision response. More...;  ; class  CpuTask;  ; class  CpuTaskStatus;  ; class  DeactivationVisitor;  ; class  DefaultAnimationLoop;  Default Animation Loop to be created when no AnimationLoop found on simulation::node. More...;  ; class  StdTaskAllocator;  ; class  DefaultTaskScheduler;  ; class  DefaultVisualManagerLoop;  Default VisualManager Loop to be created when no VisualManager found on simulation::node. More...;  ; class  DeleteVisitor;  ; class  BuildConstraintSystemEndEvent;  ; class  SimulationInitDoneEvent;  ; class  SimulationInitStartEvent;  ; class  SimulationInitTexturesDoneEvent;  ; class  SimulationStartEvent;  ; class  SimulationStopEvent;  ; class  SolveConstraintSystemEndEvent;  ; class  InitGnuplotVisitor;  ; class  ExportGnuplotVisitor;  ; class  ExportVisualModelOBJVisitor;  ; class  I",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html:926,detect,detection,926,api/master/sofa/html/namespacesofa_1_1simulation.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1simulation.html,1,['detect'],['detection']
Safety,"﻿. SOFA API: sofa::simulation::CollisionBeginEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::CollisionBeginEvent Class Reference . #include <CollisionBeginEvent.h>. Inheritance diagram for sofa::simulation::CollisionBeginEvent:. [legend]; Detailed Description; Event fired by CollisionVisitor before performing the collision detection step. . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Function details. ◆ GetClassName(). static const char* sofa::simulation::CollisionBeginEvent::GetClassName ; (; ). inlinestatic . sofasimulationCollisionBeginEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html:448,detect,detection,448,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_begin_event.html,1,['detect'],['detection']
Safety,"﻿. SOFA API: sofa::simulation::CollisionDetectionVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::CollisionDetectionVisitor Class Reference . #include <CollisionVisitor.h>; Compute collision detection. ; More... Inheritance diagram for sofa::simulation::CollisionDetectionVisitor:. [legend]; Detailed Description; Compute collision detection. . Public Member Functions;  CollisionDetectionVisitor (const core::ExecParams *params);  ; void processCollisionPipeline (simulation::Node *node, core::collision::Pipeline *obj) override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::CollisionVisitor;  CollisionVisitor (const core::ExecParams *params);  ; virtual void fwdConstraintSet (simulation::Node *node, core::behavior::BaseConstraintSet *cSet);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getCategoryName () const override;  ; size_t getPrimitiveTestCount () const;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisit",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html:308,detect,detection,308,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_detection_visitor.html,2,['detect'],['detection']
Safety,"﻿. SOFA API: sofa::simulation::CollisionEndEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::CollisionEndEvent Class Reference . #include <CollisionEndEvent.h>. Inheritance diagram for sofa::simulation::CollisionEndEvent:. [legend]; Detailed Description; Event fired by CollisionVisitor after performing the collision detection step. . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Function details. ◆ GetClassName(). static const char* sofa::simulation::CollisionEndEvent::GetClassName ; (; ). inlinestatic . sofasimulationCollisionEndEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_end_event.html:439,detect,detection,439,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_end_event.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_end_event.html,1,['detect'],['detection']
Safety,"﻿. SOFA API: sofa::simulation::CollisionVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::CollisionVisitor Class Reference . #include <CollisionVisitor.h>; Compute collision reset, detection and response in one step. ; More... Inheritance diagram for sofa::simulation::CollisionVisitor:. [legend]; Detailed Description; Compute collision reset, detection and response in one step. . Public Member Functions;  CollisionVisitor (const core::ExecParams *params);  ; virtual void fwdConstraintSet (simulation::Node *node, core::behavior::BaseConstraintSet *cSet);  ; virtual void processCollisionPipeline (simulation::Node *node, core::collision::Pipeline *obj);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ; size_t getPrimitiveTestCount () const;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_visitor.html:297,detect,detection,297,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_visitor.html,2,['detect'],['detection']
Safety,"﻿. SOFA API: sofa::simulation::IntegrateBeginEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::IntegrateBeginEvent Class Reference . #include <IntegrateBeginEvent.h>. Inheritance diagram for sofa::simulation::IntegrateBeginEvent:. [legend]; Detailed Description; Event fired by IntegrateVisitor before performing the integrate detection step. . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Function details. ◆ GetClassName(). static const char* sofa::simulation::IntegrateBeginEvent::GetClassName ; (; ). inlinestatic . sofasimulationIntegrateBeginEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_begin_event.html:448,detect,detection,448,api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_begin_event.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_begin_event.html,1,['detect'],['detection']
Safety,"﻿. SOFA API: sofa::simulation::IntegrateEndEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::IntegrateEndEvent Class Reference . #include <IntegrateEndEvent.h>. Inheritance diagram for sofa::simulation::IntegrateEndEvent:. [legend]; Detailed Description; Event fired by IntegrateVisitor after performing the integrate detection step. . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Function details. ◆ GetClassName(). static const char* sofa::simulation::IntegrateEndEvent::GetClassName ; (; ). inlinestatic . sofasimulationIntegrateEndEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html:439,detect,detection,439,api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html,1,['detect'],['detection']
Safety,"﻿. SOFA API: sofa::simulation::MainTaskSchedulerRegistry Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::MainTaskSchedulerRegistry Class Reference . #include <MainTaskSchedulerRegistry.h>; Detailed Description; A set of static functions with the same interface than a @TaskSchedulerRegistry, working on a single instance of a @TaskSchedulerRegistry. All functions are thread-safe. . Static Public Member Functions; static bool addTaskSchedulerToRegistry (TaskScheduler *taskScheduler, const std::string &taskSchedulerName);  ; static TaskScheduler * getTaskScheduler (const std::string &taskSchedulerName);  ; static bool hasScheduler (const std::string &taskSchedulerName);  ; static const std::optional< std::pair< std::string, TaskScheduler * > > & getLastInserted ();  ; static void clear ();  . Function details. ◆ addTaskSchedulerToRegistry(). bool sofa::simulation::MainTaskSchedulerRegistry::addTaskSchedulerToRegistry ; (; TaskScheduler * ; taskScheduler, . const std::string & ; taskSchedulerName . ). static . ◆ clear(). void sofa::simulation::MainTaskSchedulerRegistry::clear ; (; ). static . ◆ getLastInserted(). const std::optional< std::pair< std::string, TaskScheduler * > > & sofa::simulation::MainTaskSchedulerRegistry::getLastInserted ; (; ). static . ◆ getTaskScheduler(). TaskScheduler * sofa::simulation::MainTaskSchedulerRegistry::getTaskScheduler ; (; const std::string & ; taskSchedulerName). static . ◆ hasScheduler(). bool sofa::simulation::MainTaskSchedulerRegistry::hasScheduler ; (; const std::string & ; taskSchedulerName). static . sofasimulationMainTaskSchedulerRegistry; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_registry.html:492,safe,safe,492,api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_registry.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_registry.html,1,['safe'],['safe']
Safety,"﻿. SOFA API: sofa::type Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Functions |; Variables . sofa::type Namespace Reference . for std::pair ; More... Namespaces;  pairwise;  ;  trait;  . Classes; class  BoundingBox;  ; class  TBoundingBox;  ; class  BoundingBox2D;  bounding rectangle More...;  ; class  BoundingBox1D;  bounding interval More...;  ; class  DualQuatCoord3;  ; class  fixed_array;  ; class  Frame;  ; class  Vec;  ; class  VecNoInit;  Same as Vec except the values are not initialized by default. More...;  ; class  Mat;  ; class  MatNoInit;  Same as Mat except the values are not initialized by default. More...;  ; class  Quat;  ; struct  CleanupCheck;  ; struct  detect;  ; struct  detect< T, Op, void_t< Op< T > > >;  ; class  Material;  ; class  MatSym;  ; class  PrimitiveGroup;  ; struct  qNoInit;  ; class  QuatNoInit;  Same as Quat except the values are not initialized by default. More...;  ; class  Ray;  ; class  RGBAColor;  encode a 4 RGBA component color More...;  ; class  SpatialVector;  ; class  SVector;  Same as type::vector, + delimiters on serialization. More...;  ; struct  HasRebindTypedef;  ; struct  HasRebindTypedef< T, OtherType, std::void_t< typename T::template rebind_to< OtherType > > >;  ; struct  Rebind;  ; struct  Rebind< _T, _OtherType, std::enable_if_t< HasRebindTypedef< _T, _OtherType >::value > >;  Specialization for types that do have a nested rebind_to member. In this implementation, Rebind has a public member typedef to. It corresponds to the typedef rebind_to. More...;  ; struct  Rebind< _T, _OtherType, std::enable_if_t<!HasRebindTypedef< _T, _OtherType >::value > >;  Specialization for types that do NOT have a nested rebind_to member. In this implementation, Rebind has no public member typedef to. If this implementation is chosen by the compiler (the number of template parameters is probably different from 1), a compilation error occurs. More",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type.html:769,detect,detect,769,api/master/sofa/html/namespacesofa_1_1type.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1type.html,2,['detect'],['detect']
Safety,"﻿. SOFA API: sofa::type::detect< T, Op, void_t< Op< T > > > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::detect< T, Op, void_t< Op< T > > > Struct Template Reference . #include <isRigidType.h>. Inheritance diagram for sofa::type::detect< T, Op, void_t< Op< T > > >:. [legend]. sofatypedetect< T, Op, void_t< Op< T > > >; Generated on Mon Nov 11 2024 03:36:09 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1type_1_1detect_3_01_t_00_01_op_00_01void__t_3_01_op_3_01_t_01_4_01_4_01_4.html:25,detect,detect,25,api/master/sofa/html/structsofa_1_1type_1_1detect_3_01_t_00_01_op_00_01void__t_3_01_op_3_01_t_01_4_01_4_01_4.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1type_1_1detect_3_01_t_00_01_op_00_01void__t_3_01_op_3_01_t_01_4_01_4_01_4.html,3,['detect'],['detect']
Safety,"﻿. SOFA API: sofa::type::detect< typename, class, typename > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::type::detect< typename, class, typename > Struct Template Reference . #include <isRigidType.h>. Inheritance diagram for sofa::type::detect< typename, class, typename >:. [legend]. sofatypedetect; Generated on Mon Nov 11 2024 03:36:09 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1type_1_1detect.html:25,detect,detect,25,api/master/sofa/html/structsofa_1_1type_1_1detect.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1type_1_1detect.html,3,['detect'],['detect']
Security," &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const std::string &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const std::string &value, const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~Data () override;  Destructor. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:4737,access,access,4737,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,1,['access'],['access']
Security," &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, real defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr real & x () noexcept;  Special access to first element. More...;  ; constexpr const real & x () const noexcept;  Special const access to first element. More...;  ; constexpr real & y () noexcept;  Special access to second element. More...;  ; constexpr const real & y () const noexcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets every element to r. More...;  ; constexpr real & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const real & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr real * p",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:2702,access,access,2702,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,1,['access'],['access']
Security," & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; std::ostream & write (std::ostream &os) const;  ;  Public Member Functions inherited from sofa::type::vector< T, type::CPUMemoryManager< T > >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ;  vector (typename vector< T >::const_iterator first, typename vector< T >::const_iterator last);  Constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< T, Alloc > &&v);  Move assignment operator. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. More...;  ; std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  Specialization for writing vectors of unsigned char. More...;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; void fill (const T &value);  Sets every element to 'value'. More...;  ; v",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html:2430,access,access,2430,api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html,1,['access'],['access']
Security," ();  Basic constructor. More...;  ;  vector (Size n, const core::objectmodel::Data< T > * &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< core::objectmodel::Data< T > *, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< core::objectmodel::Data< T > * > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< core::objectmodel::Data< T > *, Alloc > &&v);  Move constructor. More...;  ;  vector (typename vector< core::objectmodel::Data< T > * >::const_iterator first, typename vector< core::objectmodel::Data< T > * >::const_iterator last);  Constructor. More...;  ; vector & operator= (const std::vector< core::objectmodel::Data< T > *, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< core::objectmodel::Data< T > *, Alloc > &&v);  Move assignment operator. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. More...;  ; std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  Specialization for writing vectors of unsigned char. More...;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; void fill (const core::objectmodel::Data< T > * &value);  Sets every elem",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1vector_data.html:2711,access,access,2711,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1vector_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1vector_data.html,1,['access'],['access']
Security," (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:6426,access,access,6426,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,4,['access'],['access']
Security," *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Attribute details. ◆ d_alias. Data<std::string> sofa::component::sceneutility::makealiascomponent::MakeAliasComponent::d_alias. The new alias of the component. . ◆ d_targetcomponent. Data<std::string> sofa::component::sceneutility::makealiascomponent::MakeAliasComponent::d_targetcomponent. The component class for which to create an alias. . Constructor details. ◆ MakeAliasComponent(). sofa::component::sceneutility::makealiascomponent::MakeAliasComponent::MakeAliasComponent ; (; ). ◆ ~MakeAliasComponent(). sofa::component::sceneutility::makealiascomponent::MakeAliasComponent::~MakeAliasComponent ; (; ). inlineoverride . Function details. ◆ GetCustomClassName(). static std::string sofa::component::sceneutility::makealiascomponent::MakeAliasComponent::GetCustomClassName ; (; ). inlinestatic . Returns the sofa class name. By default the name of the c++ class is exposed... but Here we want it to be MakeAlias so we need to customize it. More details on the name customization infrastructure is in NameDecoder.h . ◆ parse(). void sofa::component::sceneutility::makealiascomponent::MakeAliasComponent::parse ; (; core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Inherited from BaseObject. Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::objectmodel::Base. ◆ SOFA_CLASS(). sofa::component::sceneutility::makealiascomponent::MakeAliasComponent::SOFA_CLASS ; (; MakeAliasComponent ; , . core::objectmodel::BaseObject ;  . ). sofacomponentsceneutilitymakealiascomponentMakeAliasComponent; Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1makealiascomponent_1_1_make_alias_component.html:14410,expose,exposed,14410,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1makealiascomponent_1_1_make_alias_component.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1makealiascomponent_1_1_make_alias_component.html,1,['expose'],['exposed']
Security," *params);  ; Flags and parameters getters; ConstraintOrder constOrder () const;  ; ConstraintParams & setOrder (ConstraintOrder o);  ; double smoothFactor () const;  Smooth contribution factor (for smooth constraints resolution) More...;  ; Access to vectors from a given state container (i.e. State or MechanicalState); template<class S > ; const Data< typename S::VecCoord > * readX (const S *state) const;  Read access to the free (unconstrained) position vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readV (const S *state) const;  Read access to the free (unconstrained) velocity vector. More...;  ; template<class S > ; const Data< typename S::MatrixDeriv > * readJ (const S *state) const;  Read access to the constraint jacobian matrix. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readLambda (S *state) const;  Read access to the constraint force vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readDx (S *state) const;  Read access to the constraint corrective motion vector. More...;  ; Setup methods; Called by the OdeSolver from which the mechanical computations originate. They all return a reference to this MechanicalParam instance, to ease chaining multiple setup calls. . ConstraintParams & setSmoothFactor (double v);  Set smooth contribution factor (for smooth constraints resolution) More...;  ; const ConstMultiVecCoordId & x () const;  Returns ids of the position vectors. More...;  ; ConstMultiVecCoordId & x ();  Returns ids of the position vectors. More...;  ; const ConstMultiVecDerivId & v () const;  Returns ids of the velocity vectors. More...;  ; ConstMultiVecDerivId & v ();  Returns ids of the velocity vectors. More...;  ; const MultiMatrixDerivId & j () const;  Returns ids of the constraint jacobian matrices. More...;  ; MultiMatrixDerivId & j ();  Returns ids of the constraint jacobian matrices. More...;  ; const MultiVecDerivId & dx () const;  Returns ids of the constrain",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html:2734,access,access,2734,api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html,1,['access'],['access']
Security," . SReal sofa::component::statecontainer::MechanicalObject< DataTypes >::getVY ; (; sofa::Index ; i); const. inline . ◆ getVZ(). template<class DataTypes > . SReal sofa::component::statecontainer::MechanicalObject< DataTypes >::getVZ ; (; sofa::Index ; i); const. inline . ◆ getWriteAccessor(). template<class DataTypes > . template<core::VecType vtype> . helper::WriteAccessor< core::objectmodel::Data< core::StateVecType_t< DataTypes, vtype > > > sofa::component::statecontainer::MechanicalObject< DataTypes >::getWriteAccessor ; (; core::VecId ; v). protected . Shortcut to get a write accessor corresponding to the provided VecType from a VecId. . ◆ getWriteOnlyAccessor(). template<class DataTypes > . template<core::VecType vtype> . helper::WriteOnlyAccessor< core::objectmodel::Data< core::StateVecType_t< DataTypes, vtype > > > sofa::component::statecontainer::MechanicalObject< DataTypes >::getWriteOnlyAccessor ; (; core::VecId ; v). protected . Shortcut to get a write-only accessor corresponding to the provided VecType from a VecId. . ◆ handleStateChange(). template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::handleStateChange. overridevirtual . Handle state Changes ; Reimplemented from sofa::core::behavior::BaseMechanicalState. ◆ init(). template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ initGnuplot(). template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::initGnuplot ; (; const std::string ; path). overridevirtual . Reimplemented from sofa::core::behavior::BaseMechanicalState. ◆ isIndependent(). template<class DataTypes > . bool sofa::component::statecontainer::MechanicalObject< DataTypes >::isIndependent. if this mechanical object stores independe",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:59891,access,accessor,59891,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['access'],['accessor']
Security," . constexpr void sofa::defaulttype::RigidCoord< 3, real >::operator/= ; (; real2 ; a). inlineconstexpr . ◆ operator=() [1/2]. template<typename real > . template<typename real2 > . constexpr void sofa::defaulttype::RigidCoord< 3, real >::operator= ; (; const RigidCoord< 3, real2 > & ; c). inlineconstexpr . ◆ operator=() [2/2]. template<typename real > . constexpr void sofa::defaulttype::RigidCoord< 3, real >::operator= ; (; const Vec3 & ; p). inlineconstexpr . ◆ operator==(). template<typename real > . constexpr bool sofa::defaulttype::RigidCoord< 3, real >::operator== ; (; const RigidCoord< 3, real > & ; b); const. inlineconstexpr . ◆ operator[]() [1/2]. template<typename real > . constexpr real& sofa::defaulttype::RigidCoord< 3, real >::operator[] ; (; Size ; i). inlineconstexpr . Access to i-th element. . ◆ operator[]() [2/2]. template<typename real > . constexpr const real& sofa::defaulttype::RigidCoord< 3, real >::operator[] ; (; Size ; i); const. inlineconstexpr . Const access to i-th element. . ◆ pointToChild(). template<typename real > . constexpr Vec3 sofa::defaulttype::RigidCoord< 3, real >::pointToChild ; (; const Vec3 & ; v); const. inlineconstexpr . obsolete. Use unprojectPoint. . ◆ pointToParent(). template<typename real > . constexpr Vec3 sofa::defaulttype::RigidCoord< 3, real >::pointToParent ; (; const Vec3 & ; v); const. inlineconstexpr . obsolete. Use projectPoint. . ◆ projectPoint(). template<typename real > . constexpr Vec3 sofa::defaulttype::RigidCoord< 3, real >::projectPoint ; (; const Vec3 & ; v); const. inlineconstexpr . Apply the transform to a point, i.e. project a point from the child frame to the parent frame (translation and rotation) . ◆ projectVector(). template<typename real > . constexpr Vec3 sofa::defaulttype::RigidCoord< 3, real >::projectVector ; (; const Vec3 & ; v); const. inlineconstexpr . Apply the transform to a vector, i.e. project a vector from the child frame to the parent frame (rotation only, no translation added) . ◆",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_rigid_coord_3_013_00_01real_01_4.html:12855,access,access,12855,api/master/sofa/html/classsofa_1_1defaulttype_1_1_rigid_coord_3_013_00_01real_01_4.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_rigid_coord_3_013_00_01real_01_4.html,1,['access'],['access']
Security," . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::w ; (; ); const. inlineconstexprnoexcept . Special const access to fourth element. . ◆ w() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::w ; (; ). inlineconstexprnoexcept . Special access to fourth element. . ◆ x() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::x ; (; ); const. inlineconstexprnoexcept . Special const access to first element. . ◆ x() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::x ; (; ). inlineconstexprnoexcept . Special access to first element. . ◆ y() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::y ; (; ); const. inlineconstexprnoexcept . Special const access to second element. . ◆ y() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::y ; (; ). inlineconstexprnoexcept . Special access to second element. . ◆ z() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::z ; (; ); const. inlineconstexprnoexcept . Special const access to third element. . ◆ z() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr ValueType& sofa::typ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:29418,access,access,29418,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html,1,['access'],['access']
Security," . void sofa::component::mechanicalload::SphereForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::SphereForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). overridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the same large matrix. Each object adds its contribution to a different section of the matrix. That is why, an offset is used to identify where in the matrix the force field must start adding its contribution. ; kFactstiffness factor that needs to be multiplied to each matrix entry. ; offsetStarting index of the submatrix to fill in the global matrix. . Reimplemented from sofa::core::behavior::ForceField< DataTypes >. ◆ buildDampingMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::SphereForceField< DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; ). finalvirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ buildStiffnessMatrix(). template<class DataTypes > . vo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_sphere_force_field.html:24499,access,access,24499,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_sphere_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_sphere_force_field.html,1,['access'],['access']
Security," . ◆ transposed(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<C,L,real> sofa::type::Mat< L, C, real >::transposed ; (; ); const. inlineconstexprnoexcept . Return the transpose of m. . ◆ w() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr const Line& sofa::type::Mat< L, C, real >::w ; (; ); const. inlineconstexprnoexcept . Special access to fourth line (read-only). . ◆ w() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr Line& sofa::type::Mat< L, C, real >::w ; (; ). inlineconstexprnoexcept . Special access to fourth line. . ◆ x() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr const Line& sofa::type::Mat< L, C, real >::x ; (; ); const. inlineconstexprnoexcept . Special access to first line (read-only). . ◆ x() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr Line& sofa::type::Mat< L, C, real >::x ; (; ). inlineconstexprnoexcept . Special access to first line. . ◆ y() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr const Line& sofa::type::Mat< L, C, real >::y ; (; ); const. inlineconstexprnoexcept . Special access to second line (read-only). . ◆ y() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr Line& sofa::type::Mat< L, C, real >::y ; (; ). inlineconstexprnoexcept . Special access to second line. . ◆ z() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr const Line& sofa::type::Mat< L, C,",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:33495,access,access,33495,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,1,['access'],['access']
Security, ; Unity3d Digital-Trainers Blender-SOFA – SOFA. SOFA - Topic Tag: Unity3d Digital-Trainers Blender-SOFA. /unreal; . /feed; ; Unreal – SOFA. SOFA - Topic Tag: Unreal. /unreal-engine; . /feed; ; Unreal Engine – SOFA. SOFA - Topic Tag: Unreal Engine. /urdf; . /feed; ; urdf – SOFA. SOFA - Topic Tag: urdf. /using-sofa; . /feed; ; using sofa – SOFA. SOFA - Topic Tag: using sofa. /using-sofapython3; . /feed; ; using sofapython3 – SOFA. SOFA - Topic Tag: using sofapython3. /v16-08; . /feed; ; v16.08 – SOFA. SOFA - Topic Tag: v16.08. /v18-06; . /feed; ; v18.06 – SOFA. SOFA - Topic Tag: v18.06. /v19-06; . /feed; ; v19.06 – SOFA. SOFA - Topic Tag: v19.06. /v19-12-plugin-linking; . /feed; ; v19.12 plugin linking – SOFA. SOFA - Topic Tag: v19.12 plugin linking. /v20; . /feed; ; v20 – SOFA. SOFA - Topic Tag: v20. /v20-12; . /feed; ; v20.12 – SOFA. SOFA - Topic Tag: v20.12. /v20-12-02; . /feed; ; v20.12.02 – SOFA. SOFA - Topic Tag: v20.12.02. /validation; . /feed; ; validation – SOFA. SOFA - Topic Tag: validation. /vasculature; . /feed; ; vasculature – SOFA. SOFA - Topic Tag: vasculature. /vecid; . /feed; ; vecId – SOFA. SOFA - Topic Tag: vecId. /vectordata-data-merge-copy; . /feed; ; vectorData Data merge copy – SOFA. SOFA - Topic Tag: vectorData Data merge copy. /vectorspringforcefield; . /feed; ; VectorSpringForceField – SOFA. SOFA - Topic Tag: VectorSpringForceField. /verification; . /feed; ; verification – SOFA. SOFA - Topic Tag: verification. /vertex; . /feed; ; vertex – SOFA. SOFA - Topic Tag: vertex. /vessel; . /feed; ; vessel – SOFA. SOFA - Topic Tag: vessel. /vessels; . /feed; ; vessels – SOFA. SOFA - Topic Tag: vessels. /video; . /feed; ; video – SOFA. SOFA - Topic Tag: video. /view; . /feed; ; view – SOFA. SOFA - Topic Tag: view. /viewall; . /feed; ; viewall – SOFA. SOFA - Topic Tag: viewall. /viewport; . /feed; ; viewport – SOFA. SOFA - Topic Tag: viewport. /view-rotation; . /feed; ; View Rotation – SOFA. SOFA - Topic Tag: View Rotation. /virtualcommissioning; . /fee,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:489963,validat,validation,489963,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['validat'],['validation']
Security," ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:5082,access,access,5082,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,4,['access'],['access']
Security," > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [14/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const TagSet & ; tags, . SearchDire",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:21587,access,access,21587,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['access'],['access']
Security," > . sofa::type::vector<Coord> sofa::component::mechanicalload::OscillatingTorsionPressureForceField< DataTypes >::vecFromCenter. protected . Constructor details. ◆ OscillatingTorsionPressureForceField(). template<class DataTypes > . sofa::component::mechanicalload::OscillatingTorsionPressureForceField< DataTypes >::OscillatingTorsionPressureForceField. protected . ◆ ~OscillatingTorsionPressureForceField(). template<class DataTypes > . sofa::component::mechanicalload::OscillatingTorsionPressureForceField< DataTypes >::~OscillatingTorsionPressureForceField. overrideprotected . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::mechanicalload::OscillatingTorsionPressureForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::mechanicalload::OscillatingTorsionPressureForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ buildDampingMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::OscillatingTorsionPressureForceField< DataTypes >::buildDampingMatrix ; (; core::behavio",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_oscillating_torsion_pressure_force_field.html:28374,access,access,28374,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_oscillating_torsion_pressure_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_oscillating_torsion_pressure_force_field.html,1,['access'],['access']
Security," >::pressure. ◆ triangleList. template<class DataTypes > . sofa::core::objectmodel::RenamedData<sofa::type::vector<Index> > sofa::component::mechanicalload::TrianglePressureForceField< DataTypes >::triangleList. Constructor details. ◆ TrianglePressureForceField(). template<class DataTypes > . sofa::component::mechanicalload::TrianglePressureForceField< DataTypes >::TrianglePressureForceField. protected . ◆ ~TrianglePressureForceField(). template<class DataTypes > . sofa::component::mechanicalload::TrianglePressureForceField< DataTypes >::~TrianglePressureForceField. overrideprotected . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::mechanicalload::TrianglePressureForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::mechanicalload::TrianglePressureForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix() [1/2]. template<class DataTypes > . void sofa::component::mechanicalload::TrianglePressureForceField< DataTypes >::addKToMatrix ; (; const core::MechanicalParams * ; , . co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_triangle_pressure_force_field.html:25479,access,access,25479,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_triangle_pressure_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_triangle_pressure_force_field.html,1,['access'],['access']
Security," Functions; constexpr fixed_array ();  ; template<size_type NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr fixed_array (value_type r1) noexcept;  Specific constructor for 1-element vectors. More...;  ; template<typename... ArgsT, typename = std::enable_if_t< (std::is_convertible_v<ArgsT, value_type> && ...) >, typename = std::enable_if_t< (sizeof...(ArgsT) == N && sizeof...(ArgsT) > 1) >> ; constexpr fixed_array (ArgsT &&... r) noexcept;  ; constexpr iterator begin () noexcept;  ; constexpr const_iterator begin () const noexcept;  ; constexpr const_iterator cbegin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr const_iterator cend () const noexcept;  ; constexpr reference operator[] (size_type i);  ; constexpr const_reference operator[] (size_type i) const;  ; template<std::size_t I> ; constexpr T & get () &noexcept;  ; template<std::size_t I> ; constexpr const T & get () const &noexcept;  ; template<std::size_t I> ; constexpr T && get () &&noexcept;  ; template<std::size_t I> ; constexpr const T && get () const &&noexcept;  ; constexpr reference at (size_type i);  ; constexpr const_reference at (size_type i) const;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; void swap (fixed_array< T, N > &y);  ; constexpr const T * data () const noexcept;  ; constexpr const Array & array () const noexcept;  direct access to array More...;  ; constexpr Array & array () noexcept;  direct access to array More...;  ; template<typename T2 > ; constexpr fixed_array< T, N > & operator= (const fixed_array< T2, N > &rhs) noexcept;  ; constexpr void assign (const T &value) noexcept;  . Static Public Member Functions; static constexpr size_type size () noexcept;  ; static bool empty () noexcept;  ; static constexpr size_type max_size () noexcept;  . Friends; std::ostream & operator<< (st",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1fixed__array.html:1994,access,access,1994,api/master/sofa/html/classsofa_1_1type_1_1fixed__array.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1fixed__array.html,1,['access'],['access']
Security," Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  DirectSAPNarrowPhase ();  ;  ~DirectSAPNarrowPhase () override=default;  ; bool isPairFiltered (const BoxData &data0, const BoxData &data1, const DSAPBox &box0, int boxId1) const;  ; void narrowCollisionDetectionForPair (core::collision::ElementIntersector *intersector, core::CollisionModel *collisionModel0, core::CollisionModel *collisionModel1, core::CollisionElementIterator collisionModelIterator0, core::CollisionElementIterator collisionModelIterator1);  ; void createBoxesFromCollisionModels ();  ; void cacheData ();  ; void sortEndPoints ();  Cache data into vector to avoid overhead during access. More...;  ; void narrowCollisionDetectionFromSortedEndPoints ();  ;  Protected Member Functions inherited from sofa::core::collision::NarrowPhaseDetection;  ~NarrowPhaseDetection () override;  Destructor. More...;  ; void changeInstanceNP (Instance inst) override;  ;  Protected Member Functions inherited from sofa::core::collision::Detection;  Detection ();  ; virtual void changeInstanceBP (Instance);  ; void changeInstance (Instance inst) override;  ;  Protected Member Functions inherited from sofa::core::collision::CollisionAlgorithm;  CollisionAlgorithm ();  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObjec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase.html:13516,access,access,13516,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase.html,1,['access'],['access']
Security," RigidDeriv< 2, real > operator- () const;  ; constexpr Real operator* (const RigidDeriv< 2, real > &a) const;  dot product, mostly used to compute residuals as sqrt(x*x) More...;  ; Real norm () const;  Euclidean norm. More...;  ; constexpr Vec2 & getVCenter ();  ; constexpr Real & getVOrientation ();  ; constexpr const Vec2 & getVCenter () const;  ; constexpr const Real & getVOrientation () const;  ; constexpr Vec2 & getLinear ();  ; constexpr Real & getAngular ();  ; constexpr const Vec2 & getLinear () const;  ; constexpr const Real & getAngular () const;  ; constexpr VecAll getVAll () const;  ; constexpr Vec2 velocityAtRotatedPoint (const Vec2 &p) const;  Velocity at point p, where p is the offset from the origin of the frame, given in the same coordinate system as the velocity of the origin. More...;  ; constexpr real * ptr ();  ; constexpr const real * ptr () const;  ; constexpr real & operator[] (Size i);  Access to i-th element. More...;  ; constexpr const real & operator[] (Size i) const;  Const access to i-th element. More...;  ; Tests operators; constexpr bool operator== (const RigidDeriv< 2, real > &b) const;  ; constexpr bool operator!= (const RigidDeriv< 2, real > &b) const;  . Static Public Member Functions; static constexpr Size size ();  . Friends; class RigidCoord< 2, real >;  ; std::ostream & operator<< (std::ostream &out, const RigidDeriv< 2, real > &v);  write to an output stream More...;  ; std::istream & operator>> (std::istream &in, RigidDeriv< 2, real > &v);  read from an input stream More...;  . Attribute details. ◆ spatial_dimensions. template<typename real > . constexpr sofa::Size sofa::defaulttype::RigidDeriv< 2, real >::spatial_dimensions = 2. staticconstexpr . Compile-time constant specifying the number of dimensions of space (NOT equivalent to total_size for rigids) . ◆ total_size. template<typename real > . constexpr sofa::Size sofa::defaulttype::RigidDeriv< 2, real >::total_size = 3. staticconstexpr . Compile-time constant specifying",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_rigid_deriv_3_012_00_01real_01_4.html:2791,access,access,2791,api/master/sofa/html/classsofa_1_1defaulttype_1_1_rigid_deriv_3_012_00_01real_01_4.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_rigid_deriv_3_012_00_01real_01_4.html,1,['access'],['access']
Security, SOFA in the context of reinforcement leaening. /using-sofa-to-build-pneumatic-actuated-robot-arm; ; SOFA - Topic: [SOLVED] Using SOFA to build pneumatic actuated robot arm. /using-sofa-to-simulate-viscoelastic-behaviour; ; SOFA - Topic: Using SOFA to simulate Viscoelastic Behaviour. /using-soft-robot-camera; ; SOFA - Topic: [SOLVED] Using Soft robot camera. /using-softrobots-sofapython3; . /embed; ; SOFA - Topic: [SOLVED] Using SoftRobots + SofaPython3. SOFA - Topic: [SOLVED] Using SoftRobots + SofaPython3. /using-two-topologies-in-a-scene; . /feed; ; [SOLVED] Using two topologies in a scene – SOFA. SOFA - Topic: [SOLVED] Using two topologies in a scene. /v16-12-building-errors-using-vs2015; ; SOFA - Topic: [SOLVED] v16.12 building Errors using VS2015. /v16-12-compilation-errors-on-win10-vs2013; ; SOFA - Topic: [SOLVED] v16.12 compilation errors on win10 VS2013. /v17-06-building-errors-in-win10-vs2015; ; SOFA - Topic: v17.06 building errors in win10 VS2015. /validation-of-sofa; ; SOFA - Topic: Validation of SOFA. /value-assignment-of-mechanicalstate-in-xml-fiels; ; SOFA - Topic: [SOLVED] value assignment of mechanicalState in xml fiels. /vec3d-forcefield-for-suface-mesh-model-with-skeleton-instead-of-rigid3d-beamfemf; ; SOFA - Topic: Vec3d forcefield for suface mesh model with skeleton instead of Rigid3d BeamFEMF. /vectordata-merge-function-question; ; SOFA - Topic: [SOLVED] VectorData merge function question. /vectorspringforcefield-not-working-with-articulatedsystemmapping; ; SOFA - Topic: VectorSpringForceField not working with ArticulatedSystemMapping. /vectorspringforcfield-is-not-stiff-enough; ; SOFA - Topic: [SOLVED] VectorSpringForcField is not stiff enough. /vertexmass-cannot-be-read-using-softpython; ; SOFA - Topic: vertexMass cannot be read using SoftPython. /vertices-from-obj-are-moved; ; SOFA - Topic: [SOLVED] Vertices from .obj are moved. /very-basic-doubts; ; SOFA - Topic: [SOLVED] very basic doubts. /video-recording-issue-wrong-path; ; SOFA - Topic: ,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:415574,validat,validation-of-sofa,415574,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['validat'],['validation-of-sofa']
Security," Simulation. /needle-insertion-simulation-problem; ; SOFA - Topic: Needle insertion simulation problem. /need-very-old-version-of-sofa-to-use-flexible-plugin; ; SOFA - Topic: [SOLVED] Need (very) old version of SOFA to use ""Flexible"" plugin. /new-api-documentation; ; SOFA - Topic: New API documentation. /new-approaches-to-catheter-navigation-for-interventional-radiology-simulation; ; SOFA - Topic: New approaches to catheter navigation for interventional radiology simulation. /new-build-system; . /page; . /4; ; SOFA - Topic: New build system. SOFA - Topic: New build system. /new-forum-format; . /feed; ; New forum format! – SOFA. SOFA - Topic: New forum format!. /new-mouse-interaction; . /feed; ; [SOLVED] New Mouse Interaction – SOFA. /page; . /13; ; SOFA - Topic: [SOLVED] New Mouse Interaction. /4; ; SOFA - Topic: [SOLVED] New Mouse Interaction. SOFA - Topic: [SOLVED] New Mouse Interaction. /newomnidriver-gnode-cannot-access-protected-member; . /embed; ; SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. /page; . /3; ; SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. /4; ; SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. /new-online-support-sessions; ; SOFA - Topic: New: online support sessions!. /new-release-v16-08; . /feed; ; New Release v16.08! – SOFA. SOFA - Topic: New Release v16.08!. /new-release-v16-12; ; SOFA - Topic: New Release v16.12!. /new-release-v17-12; ; SOFA - Topic: New Release v17.12!. /new-release-v18-06; ; SOFA - Topic: New release v18.06!. /new-sofa-technical-member-amc; ; SOFA - Topic: New SOFA technical member: AMC!. /new-to-sofa-here-are-my-thoughts; ; SOFA - Topic: New to sofa. Here are my thoughts. /new-training-session-scheduled; ; SOFA - Topic: New training session scheduled!. /new-tutorials-for-sofa; ; SOFA - Topic: New tutorials for SOFA. /new-version-of-blender-sofa; . /page; . /4; ; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:354293,access,access,354293,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['access'],['access']
Security," Tissue. /needle-insertion-simulation; ; SOFA - Topic: Needle Insertion Simulation. /needle-insertion-simulation-problem; ; SOFA - Topic: Needle insertion simulation problem. /need-very-old-version-of-sofa-to-use-flexible-plugin; ; SOFA - Topic: [SOLVED] Need (very) old version of SOFA to use ""Flexible"" plugin. /new-api-documentation; ; SOFA - Topic: New API documentation. /new-approaches-to-catheter-navigation-for-interventional-radiology-simulation; ; SOFA - Topic: New approaches to catheter navigation for interventional radiology simulation. /new-build-system; . /page; . /4; ; SOFA - Topic: New build system. SOFA - Topic: New build system. /new-forum-format; . /feed; ; New forum format! – SOFA. SOFA - Topic: New forum format!. /new-mouse-interaction; . /feed; ; [SOLVED] New Mouse Interaction – SOFA. /page; . /13; ; SOFA - Topic: [SOLVED] New Mouse Interaction. /4; ; SOFA - Topic: [SOLVED] New Mouse Interaction. SOFA - Topic: [SOLVED] New Mouse Interaction. /newomnidriver-gnode-cannot-access-protected-member; . /embed; ; SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. /page; . /3; ; SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. /4; ; SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. /new-online-support-sessions; ; SOFA - Topic: New: online support sessions!. /new-release-v16-08; . /feed; ; New Release v16.08! – SOFA. SOFA - Topic: New Release v16.08!. /new-release-v16-12; ; SOFA - Topic: New Release v16.12!. /new-release-v17-12; ; SOFA - Topic: New Release v17.12!. /new-release-v18-06; ; SOFA - Topic: New release v18.06!. /new-sofa-technical-member-amc; ; SOFA - Topic: New SOFA technical member: AMC!. /new-to-sofa-here-are-my-thoughts; ; SOFA - Topic: New to sofa. Here are my thoughts. /new-training-session-scheduled; ; SOFA - Topic: New training session scheduled!. /new-tutorials-for-sofa; ; SOFA - Topic: N",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:354205,access,access-protected-member,354205,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['access'],['access-protected-member']
Security," ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const ValueType &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (ValueType r) noexcept;  Sets every element to r. More...;  ; constexpr ValueType & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const ValueType & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:7939,access,access,7939,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,2,['access'],['access']
Security," const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:3687,access,access,3687,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,2,['access'],['access']
Security," constexpr sofa::type::RGBAColor::RGBAColor ; (; ). inlineconstexpr . ◆ RGBAColor() [2/5]. constexpr sofa::type::RGBAColor::RGBAColor ; (; const std::array< float, NumberOfComponents > & ; c). inlineexplicitconstexpr . ◆ RGBAColor() [3/5]. constexpr sofa::type::RGBAColor::RGBAColor ; (; float ; r, . float ; g, . float ; b, . float ; a . ). inlineconstexpr . ◆ RGBAColor() [4/5]. sofa::type::RGBAColor::RGBAColor ; (; const type::fixed_array< float, NumberOfComponents > & ; c). delete . ◆ RGBAColor() [5/5]. sofa::type::RGBAColor::RGBAColor ; (; const type::Vec4f & ; c). delete . Function details. ◆ a() [1/3]. constexpr float& sofa::type::RGBAColor::a ; (; ). inlineconstexpr . ◆ a() [2/3]. constexpr const float& sofa::type::RGBAColor::a ; (; ); const. inlineconstexpr . ◆ a() [3/3]. constexpr void sofa::type::RGBAColor::a ; (; const float ; a). inlineconstexpr . ◆ array() [1/2]. constexpr const ComponentArray& sofa::type::RGBAColor::array ; (; ); const. inlineconstexprnoexcept . direct access to array . ◆ array() [2/2]. constexpr ComponentArray& sofa::type::RGBAColor::array ; (; ). inlineconstexprnoexcept . direct access to array . ◆ b() [1/3]. constexpr float& sofa::type::RGBAColor::b ; (; ). inlineconstexpr . ◆ b() [2/3]. constexpr const float& sofa::type::RGBAColor::b ; (; ); const. inlineconstexpr . ◆ b() [3/3]. constexpr void sofa::type::RGBAColor::b ; (; const float ; b). inlineconstexpr . ◆ begin() [1/2]. constexpr ComponentArray::const_iterator sofa::type::RGBAColor::begin ; (; ); const. inlineconstexprnoexcept . ◆ begin() [2/2]. constexpr ComponentArray::iterator sofa::type::RGBAColor::begin ; (; ). inlineconstexprnoexcept . ◆ black(). constexpr const RGBAColor & sofa::type::RGBAColor::black ; (; ). staticconstexpr . ◆ blue(). constexpr const RGBAColor & sofa::type::RGBAColor::blue ; (; ). staticconstexpr . ◆ clamp(). static constexpr RGBAColor sofa::type::RGBAColor::clamp ; (; const RGBAColor & ; color, . float ; min, . float ; max . ). inlinestaticconstexpr . ◆",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html:5063,access,access,5063,api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,1,['access'],['access']
Security," for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager > Class Template Reference . #include <integer_id.h>. Inheritance diagram for sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >:. [legend]. Public Member Functions;  vector_id ();  Basic constructor. More...;  ;  vector_id (Size n, const T &value);  Constructor. More...;  ;  vector_id (int n, const T &value);  Constructor. More...;  ;  vector_id (long n, const T &value);  Constructor. More...;  ;  vector_id (Size n);  Constructor. More...;  ;  vector_id (const std::vector< T > &x);  Constructor. More...;  ;  vector_id (const_iterator first, const_iterator last);  Constructor. More...;  ; reference at (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference at (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator() (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator() (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator[] (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator[] (Index n) const;  Read-only random access. More...;  ; Index push_back (const_reference v);  ;  Public Member Functions inherited from sofa::type::vector< T, MemoryManager >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< T, Alloc > &&v);  Move assignment operator. More...; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:1163,access,access,1163,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,1,['access'],['access']
Security," from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< real, N > &p) noexcept;  ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, real defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr real & x () noexcept;  Special access to first element. More...;  ; constexpr const real & x () const noexcept;  Special const access to first element. More...;  ; constexpr real & y () noexcept;  Special access to second element. More...;  ; constexpr const real & y () const noexcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (real",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:2352,access,access,2352,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,1,['access'],['access']
Security," histogram on view. SOFA - Topic: [SOLVED] putting histogram on view. /pyscn-files-not-opening-despite-having-python-3-8; ; SOFA - Topic: PYSCN files not opening despite having python 3.8. /pyscn-file-softrobotics-plugin; ; SOFA - Topic: [SOLVED] .pyscn file (SoftRobotics Plugin). /python3-windows-build-controller-results-in-segfault; ; SOFA - Topic: Python3 Windows build – Controller results in segfault. /pythonlibs-not-found; ; SOFA - Topic: PythonLibs not found. /python-runtime-fatal-error-with-gil; ; SOFA - Topic: Python runtime fatal error with GIL. /python-scene-errors; . /embed; ; SOFA - Topic: Python scene errors. SOFA - Topic: Python scene errors. /qsqltable-and-qsqldatabase-created-in-qt-are-not-accessible-in-sofa; . /feed; ; [SOLVED] QSqlTable and QSqlDatabase created in QT are not accessible in sofa – SOFA. SOFA - Topic: [SOLVED] QSqlTable and QSqlDatabase created in QT are not accessible in sofa. /qsqltable-and-qsqldatabase-created-in-qt-are-not-accessible-in-sofa-2; ; SOFA - Topic: QSqlTable and QSqlDatabase created in QT are not accessible in sofa. /qt5quick-directory-is-not-found-how-to-fix-this-error; . /feed; ; [SOLVED] Qt5Quick directory is not found. how to fix this error – SOFA. SOFA - Topic: [SOLVED] Qt5Quick directory is not found. how to fix this error. /qtableview-graph-linked-with-sofa-scene-file; ; SOFA - Topic: QTableView graph linked with SOFA scene file. /qtableview-saving-data-into-sqlite; ; SOFA - Topic: QTableView saving data into sqlite. /qt-version-issues-on-windows; . /page; . /13; ; SOFA - Topic: [SOLVED] Qt version issues on Windows. /4; ; SOFA - Topic: [SOLVED] Qt version issues on Windows. SOFA - Topic: [SOLVED] Qt version issues on Windows. /quarter-window-display-on-macos; ; SOFA - Topic: Quarter-window display on macOS. /quasi-static-simulation-without-dynamics; ; SOFA - Topic: [SOLVED] Quasi-static simulation, without dynamics. /queries-about-tetrahedralization-with-the-cgal-plugin; . /feed; ; [SOLVED] Queries about tetrahe",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:371625,access,accessible-in-sofa-,371625,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['access'],"['accessible', 'accessible-in-sofa-']"
Security," implicit schemes) More...;  ; SReal bFactor () const;  Damping matrix contributions factor (for implicit schemes) More...;  ; SReal kFactor () const;  Stiffness matrix contributions factor (for implicit schemes) More...;  ; Rayleigh Damping D = rayleighStiffness*K - rayleighMass*M; SReal kFactorIncludingRayleighDamping (SReal rayleighStiffness) const;  ; SReal mFactorIncludingRayleighDamping (SReal rayleighMass) const;  ; Access to vectors from a given state container (i.e. State or MechanicalState); template<class S > ; const Data< typename S::VecCoord > * readX (const S *state) const;  Read access to current position vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readV (const S *state) const;  Read access to current velocity vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readF (const S *state) const;  Read access to current force vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readDx (const S *state) const;  Read access to current dx vector (for implicit schemes) More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readDf (const S *state) const;  Read access to current df vector (for implicit schemes) More...;  ;  Public Member Functions inherited from sofa::core::ExecParams; bool checkValidStorage () const;  ; ExecMode execMode () const;  Mode of execution requested. More...;  ; int threadID () const;  Index of current thread (0 corresponding to the only thread in sequential mode, or first thread in parallel mode) More...;  ; int nbThreads () const;  Number of threads currently known to Sofa. More...;  ;  ExecParams ();  ; void update ();  Make sure this instance is up-to-date relative to the current thread. More...;  ; ExecParams & setExecMode (ExecMode v);  Request a specific mode of execution. More...;  ; ExecParams & setThreadID (int v);  Specify the index of the current thread. More...;  . Static Public Member Functions; static const MechanicalParams",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html:3562,access,access,3562,api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,1,['access'],['access']
Security," in order to store reference to a specific type of element (such as a Cube in a CubeModel). . Public Attributes; Model * model;  CollisionModel containing the referenced element. More...;  . Public Member Functions;  TCollisionElementIterator (Model *model=nullptr, Index index=0);  ;  TCollisionElementIterator (Model *model, Index index, VIterator it, VIterator itend);  ;  TCollisionElementIterator (Model *model, VIterator it, VIterator itend);  ; bool isActive (core::CollisionModel *cm=nullptr) const;  ; Iterator Interface; template<class Model2 > ; bool operator== (const TCollisionElementIterator< Model2 > &i) const;  ; template<class Model2 > ; bool operator!= (const TCollisionElementIterator< Model2 > &i) const;  ; TCollisionElementIterator & operator+= (int n);  ; TCollisionElementIterator operator+ (int n) const;  ; bool valid () const;  ; Model * getCollisionModel () const;  Return the CollisionModel containing the referenced element. More...;  ; Wrapper methods to access data and methods inside the CollisionModel.; std::pair< CollisionElementIterator, CollisionElementIterator > getInternalChildren () const;  ; std::pair< CollisionElementIterator, CollisionElementIterator > getExternalChildren () const;  ; bool isLeaf () const;  ; bool canCollideWith (const TCollisionElementIterator< Model > &elem) const;  ; SReal getProximity () const;  Distance to the actual (visual) surface. More...;  ; SReal getContactStiffness () const;  Contact stiffness. More...;  ; SReal getContactFriction () const;  Contact friction (damping) coefficient. More...;  ; void draw (const core::visual::VisualParams *vparams);  ;  Public Member Functions inherited from sofa::core::BaseCollisionElementIterator;  BaseCollisionElementIterator (Index index=0);  ;  BaseCollisionElementIterator (Index index, VIterator it, VIterator itend);  ;  BaseCollisionElementIterator (VIterator it, VIterator itend);  ; void next ();  Increment this iterator to reference the next element. More...;  ; BaseCol",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_t_collision_element_iterator.html:1910,access,access,1910,api/master/sofa/html/classsofa_1_1core_1_1_t_collision_element_iterator.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_t_collision_element_iterator.html,1,['access'],['access']
Security," inherited from sofa::gui::qt::DataWidget; core::objectmodel::BaseData * baseData;  ; bool dirty;  ; int counter;  ; bool m_isFilled;  tell if DataWidget has been filled from Data true by default More...;  ; bool m_toFill;  bool to warn action is needed to fill Data, false by default More...;  . Public Member Functions;  DisplayFlagsDataWidget (QWidget *parent, const char *name, core::objectmodel::Data< DisplayFlags > *data, bool root=false);  ; virtual bool createWidgets ();  ; virtual void setDataReadOnly (bool readOnly);  This method is called after createWidgets to configure whether the created widgets should be read-only. More...;  ;  Public Member Functions inherited from sofa::gui::qt::TDataWidget< sofa::core::visual::DisplayFlags >;  TDataWidget (QWidget *parent, const char *name, MyTData *d);  ; sofa::core::objectmodel::Data< sofa::core::visual::DisplayFlags > * getData ();  ; const sofa::core::objectmodel::Data< sofa::core::visual::DisplayFlags > * getData () const;  ; virtual void setData (MyTData *d);  ; virtual void setData (MyData *d);  ;  Public Member Functions inherited from sofa::gui::qt::DataWidget;  DataWidget (QWidget *parent, const char *name, MyData *d);  ;  ~DataWidget () override;  ; virtual void setData (MyData *d);  ; const core::objectmodel::BaseData * getBaseData () const;  BaseData pointer accessor function. More...;  ; core::objectmodel::BaseData * getBaseData ();  ; void updateVisibility ();  ; bool isDirty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  . Protected Member Functions; virtual void readFromData ();  The implementation of this method tells how the widget reads the value of the data. More...;  ; virtual void writeToData ();  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  . Additional Inheri",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_display_flags_data_widget.html:1963,access,accessor,1963,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_display_flags_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_display_flags_data_widget.html,1,['access'],['accessor']
Security," inherited from sofa::gui::qt::DataWidget; core::objectmodel::BaseData * baseData;  ; bool dirty;  ; int counter;  ; bool m_isFilled;  tell if DataWidget has been filled from Data true by default More...;  ; bool m_toFill;  bool to warn action is needed to fill Data, false by default More...;  . Public Member Functions;  MaterialDataWidget (QWidget *parent, const char *name, Data< Material > *data);  ; virtual bool createWidgets ();  ; virtual void setDataReadOnly (bool readOnly);  This method is called after createWidgets to configure whether the created widgets should be read-only. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  ;  Public Member Functions inherited from sofa::gui::qt::TDataWidget< Material >;  TDataWidget (QWidget *parent, const char *name, MyTData *d);  ; sofa::core::objectmodel::Data< Material > * getData ();  ; const sofa::core::objectmodel::Data< Material > * getData () const;  ; virtual void setData (MyTData *d);  ; virtual void setData (MyData *d);  ;  Public Member Functions inherited from sofa::gui::qt::DataWidget;  DataWidget (QWidget *parent, const char *name, MyData *d);  ;  ~DataWidget () override;  ; virtual void setData (MyData *d);  ; const core::objectmodel::BaseData * getBaseData () const;  BaseData pointer accessor function. More...;  ; core::objectmodel::BaseData * getBaseData ();  ; void updateVisibility ();  ; bool isDirty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  . Protected Member Functions; virtual void readFromData ();  The implementation of this method tells how the widget reads the value of the data. More...;  ; virtual void writeToData ();  . Additional Inherited Members;  Static Public Member Functions inherited from sofa::gui::qt::TDataWidget< Material >; static RealObjec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1materialdatawidget__h_1_1_material_data_widget.html:2287,access,accessor,2287,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1materialdatawidget__h_1_1_material_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1materialdatawidget__h_1_1_material_data_widget.html,1,['access'],['accessor']
Security," initializing all VecIds to default values, implicit and energy flags to false. More...;  ; ConstraintParams & setExecParams (const core::ExecParams *params);  ; Flags and parameters getters; ConstraintOrder constOrder () const;  ; ConstraintParams & setOrder (ConstraintOrder o);  ; double smoothFactor () const;  Smooth contribution factor (for smooth constraints resolution) More...;  ; Access to vectors from a given state container (i.e. State or MechanicalState); template<class S > ; const Data< typename S::VecCoord > * readX (const S *state) const;  Read access to the free (unconstrained) position vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readV (const S *state) const;  Read access to the free (unconstrained) velocity vector. More...;  ; template<class S > ; const Data< typename S::MatrixDeriv > * readJ (const S *state) const;  Read access to the constraint jacobian matrix. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readLambda (S *state) const;  Read access to the constraint force vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readDx (S *state) const;  Read access to the constraint corrective motion vector. More...;  ; Setup methods; Called by the OdeSolver from which the mechanical computations originate. They all return a reference to this MechanicalParam instance, to ease chaining multiple setup calls. . ConstraintParams & setSmoothFactor (double v);  Set smooth contribution factor (for smooth constraints resolution) More...;  ; const ConstMultiVecCoordId & x () const;  Returns ids of the position vectors. More...;  ; ConstMultiVecCoordId & x ();  Returns ids of the position vectors. More...;  ; const ConstMultiVecDerivId & v () const;  Returns ids of the velocity vectors. More...;  ; ConstMultiVecDerivId & v ();  Returns ids of the velocity vectors. More...;  ; const MultiMatrixDerivId & j () const;  Returns ids of the constraint jacobian matrices. More...;  ; MultiMa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html:2594,access,access,2594,api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html,1,['access'],['access']
Security," is no longer active. More...;  ;  Public Member Functions inherited from sofa::type::vector< DetectionOutput >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const DetectionOutput &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< DetectionOutput, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< DetectionOutput > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< DetectionOutput, Alloc > &&v);  Move constructor. More...;  ;  vector (typename vector< DetectionOutput >::const_iterator first, typename vector< DetectionOutput >::const_iterator last);  Constructor. More...;  ; vector & operator= (const std::vector< DetectionOutput, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< DetectionOutput, Alloc > &&v);  Move assignment operator. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. More...;  ; std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  Specialization for writing vectors of unsigned char. More...;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; void fill (const DetectionOutput &value);  Sets every element to 'value'.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_t_detection_output_vector.html:2464,access,access,2464,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_t_detection_output_vector.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_t_detection_output_vector.html,1,['access'],['access']
Security," it use lumped masses? . Constructor details. ◆ HexahedralFEMForceFieldAndMass(). template<class DataTypes > . sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >::HexahedralFEMForceFieldAndMass. protected . Function details. ◆ accFromF(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >::accFromF ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; a, . const DataVecDeriv & ; f . ). overridevirtual . Reimplemented from sofa::core::behavior::Mass< DataTypes >. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Reimplemented from sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Reimplemented from sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >. ◆ addGravityToV(). template<class DataTypes > . void sofa::component::solidmech",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field_and_mass.html:32649,access,access,32649,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field_and_mass.html,1,['access'],['access']
Security," it use lumped masses? . Constructor details. ◆ HexahedronFEMForceFieldAndMass(). template<class DataTypes > . sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >::HexahedronFEMForceFieldAndMass. protected . Function details. ◆ accFromF(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >::accFromF ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; a, . const DataVecDeriv & ; f . ). overridevirtual . Reimplemented from sofa::core::behavior::Mass< DataTypes >. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Reimplemented from sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Reimplemented from sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >.; Reimplemented in sofa::component::solidmechanics::fem::nonuniform::NonUniformH",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass.html:31885,access,access,31885,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass.html,1,['access'],['access']
Security," mapping to position vectors.; If the Mapping can be represented as a matrix J, this method computes $ out = J in $ ; Implements sofa::core::BaseMapping. ◆ apply() [2/2]. template<class TIn , class TOut > . virtual void sofa::core::Mapping< TIn, TOut >::apply ; (; const MechanicalParams * ; mparams, . OutDataVecCoord & ; out, . const InDataVecCoord & ; in . ). pure virtual . This method must be reimplemented by all mappings. . ◆ applyDJT(). template<class In , class Out > . void sofa::core::Mapping< In, Out >::applyDJT ; (; const MechanicalParams * ; , . MultiVecDerivId ; , . ConstMultiVecDerivId ;  . ). overridevirtual . ApplyDJT (Force)/// Apply the change of force due to the nonlinearity of the mapping and the last propagated displacement. Also called geometric stiffness. The default implementation does nothing, assuming a linear mapping.; This method computes , where is the parent force and is the child force. where J is the tangent operator (the linear approximation) of the mapping The child force is accessed in the child state using mparams->readF() . This requires that the child force vector is used by the solver to compute the force corresponding to the current positions and velocities, and not to store auxiliary values. The displacement is accessed in the parent state using mparams->readDx() . This method generally corresponds to a symmetric stiffness matrix, but with rotations (which are not a commutative group) it is not the case. Since some solvers (including the Conjugate Gradient) require symmetric matrices, a flag is set in the MechanicalParams to say if symmetric matrices are required. If so, non-symmetric geometric stiffness should not be applied. ; Implements sofa::core::BaseMapping.; Reimplemented in sofa::component::mapping::nonlinear::BaseNonLinearMapping< TIn, TOut, true >, and sofa::component::mapping::nonlinear::BaseNonLinearMapping< TIn, TOut, false >. ◆ applyJ() [1/2]. template<class In , class Out > . void sofa::core::Mapping< In, Out >::a",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mapping.html:21723,access,accessed,21723,api/master/sofa/html/classsofa_1_1core_1_1_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mapping.html,1,['access'],['accessed']
Security," sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::endNarrowPhase ; (; ). overridevirtual . Reimplemented from sofa::core::collision::NarrowPhaseDetection. ◆ isPairFiltered(). bool sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::isPairFiltered ; (; const BoxData & ; data0, . const BoxData & ; data1, . const DSAPBox & ; box0, . int ; boxId1 . ); const. protected . ◆ narrowCollisionDetectionForPair(). void sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::narrowCollisionDetectionForPair ; (; core::collision::ElementIntersector * ; intersector, . core::CollisionModel * ; collisionModel0, . core::CollisionModel * ; collisionModel1, . core::CollisionElementIterator ; collisionModelIterator0, . core::CollisionElementIterator ; collisionModelIterator1 . ). protected . ◆ narrowCollisionDetectionFromSortedEndPoints(). void sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::narrowCollisionDetectionFromSortedEndPoints ; (; ). protected . ◆ needsDeepBoundingTree(). bool sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::needsDeepBoundingTree ; (; ); const. inlineoverridevirtual . Bounding tree is not required by this detection algorithm. ; Reimplemented from sofa::core::collision::Detection. ◆ reset(). void sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::reset ; (; ). overridevirtual . Reset to initial state. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_CLASS(). sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::SOFA_CLASS ; (; DirectSAPNarrowPhase ; , . core::collision::NarrowPhaseDetection ;  . ). ◆ sortEndPoints(). void sofa::component::collision::detection::algorithm::DirectSAPNarrowPhase::sortEndPoints ; (; ). protected . Cache data into vector to avoid overhead during access. . sofacomponentcollisiondetectionalgorithmDirectSAPNarrowPhase; Generated on Mon Nov 11 2024 02:19:52 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase.html:21158,access,access,21158,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase.html,1,['access'],['access']
Security," sofa::component::mechanicalload::EllipsoidForceField< DataTypes >::data. protected . ◆ N. template<class DataTypes > . constexpr auto sofa::component::mechanicalload::EllipsoidForceField< DataTypes >::N = DataTypes::spatial_dimensions. staticconstexpr . Constructor details. ◆ EllipsoidForceField(). template<class DataTypes > . sofa::component::mechanicalload::EllipsoidForceField< DataTypes >::EllipsoidForceField. protected . ◆ ~EllipsoidForceField(). template<class DataTypes > . sofa::component::mechanicalload::EllipsoidForceField< DataTypes >::~EllipsoidForceField. overrideprotected . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::mechanicalload::EllipsoidForceField< DataTypes >::addDForce ; (; const sofa::core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::mechanicalload::EllipsoidForceField< DataTypes >::addForce ; (; const sofa::core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ buildDampingMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::EllipsoidForceField< DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; ). fina",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_ellipsoid_force_field.html:21858,access,access,21858,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_ellipsoid_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_ellipsoid_force_field.html,1,['access'],['access']
Security," sofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >::updateMatrix. protected . Constructor details. ◆ TriangularQuadraticSpringsForceField(). template<class DataTypes > . sofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >::TriangularQuadraticSpringsForceField. protected . ◆ ~TriangularQuadraticSpringsForceField(). template<class DataTypes > . sofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >::~TriangularQuadraticSpringsForceField. protectedvirtual . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ applyEdgeCreation(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >::applyEdgeCreation ; (;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_quadratic_springs_force_field.html:26278,access,access,26278,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_quadratic_springs_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_quadratic_springs_force_field.html,1,['access'],['access']
Security," sofa::core::BaseState. ◆ getTranslation(). template<class DataTypes > . virtual type::Vec3 sofa::component::statecontainer::MechanicalObject< DataTypes >::getTranslation ; (; ); const. inlinevirtual . ◆ getVX(). template<class DataTypes > . SReal sofa::component::statecontainer::MechanicalObject< DataTypes >::getVX ; (; sofa::Index ; i); const. inline . ◆ getVY(). template<class DataTypes > . SReal sofa::component::statecontainer::MechanicalObject< DataTypes >::getVY ; (; sofa::Index ; i); const. inline . ◆ getVZ(). template<class DataTypes > . SReal sofa::component::statecontainer::MechanicalObject< DataTypes >::getVZ ; (; sofa::Index ; i); const. inline . ◆ getWriteAccessor(). template<class DataTypes > . template<core::VecType vtype> . helper::WriteAccessor< core::objectmodel::Data< core::StateVecType_t< DataTypes, vtype > > > sofa::component::statecontainer::MechanicalObject< DataTypes >::getWriteAccessor ; (; core::VecId ; v). protected . Shortcut to get a write accessor corresponding to the provided VecType from a VecId. . ◆ getWriteOnlyAccessor(). template<class DataTypes > . template<core::VecType vtype> . helper::WriteOnlyAccessor< core::objectmodel::Data< core::StateVecType_t< DataTypes, vtype > > > sofa::component::statecontainer::MechanicalObject< DataTypes >::getWriteOnlyAccessor ; (; core::VecId ; v). protected . Shortcut to get a write-only accessor corresponding to the provided VecType from a VecId. . ◆ handleStateChange(). template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::handleStateChange. overridevirtual . Handle state Changes ; Reimplemented from sofa::core::behavior::BaseMechanicalState. ◆ init(). template<class DataTypes > . void sofa::component::statecontainer::MechanicalObject< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ initGnuplot(). tem",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:59495,access,accessor,59495,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['access'],['accessor']
Security," sofa::core::objectmodel::BaseContext;  SOFA_CLASS (BaseContext, Base);  ; ComponentNameHelper & getNameHelper ();  Returns utilitary object to uniquely name objects in the context. More...;  ; virtual core::topology::BaseMeshTopology * getMeshTopology (SearchDirection dir=SearchUp) const;  Mesh Topology (unified interface for both static and dynamic topologies) More...;  ; virtual core::behavior::BaseMass * getMass () const;  Mass. More...;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:19954,access,access,19954,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,1,['access'],['access']
Security," sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ d_B. template<class DataTypes > . Data< Real > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_B. IN: Bulk modulus (resistance to uniform compression) . ◆ d_currentInjectedVolume. template<class DataTypes > . Data< Real > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_currentInjectedVolume. OUT: Current injected (or extracted) volume (taking into account maxInjectionRate) . ◆ d_currentPressure. template<class DataTypes > . Data< Real > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_currentPressure. OUT: Current pressure, as computed from the last surface position. . ◆ d_currentStiffness. template<class DataTypes > . Data< Real > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_currentStiffness. OUT: dP/dV at current volume and pressure. . ◆ d_currentSurfaceArea. template<class DataTypes > . Data< Real > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_currentSurfaceArea. OUT: Current surface area, as computed from the last surface position. . ◆ d_currentVolume. template<class DataTypes > . Data< Real > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_currentVolume. OUT: Current volume, as computed from the last surface position. . ◆ d_drawForceColor. template<class DataTypes > . Data< sofa::ty",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html:23513,inject,injected,23513,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html,1,['inject'],['injected']
Security," std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  Specialization for writing vectors of unsigned char. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  . Protected Member Functions; reference operator[] (Size n);  Read/write random access with regular index type, protected to force use of explicit Index. More...;  ; const_reference operator[] (Size n) const;  Read-only random access with regular index type, protected to force use of explicit Index. More...;  . Constructor details. ◆ vector_id() [1/7]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::vector_id ; (; ). inline . Basic constructor. . ◆ vector_id() [2/7]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::vector_id ; (; Size ; n, . const T & ; value . ). inline . Constructor. . ◆ vector_id() [3/7]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::vector_id ; (; int ; n, . const T & ; value . ). inline . Constructor. . ◆ vector_id() [4/7]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:3630,access,access,3630,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,1,['access'],['access']
Security," template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [3/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [4/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or down from the current context. . ◆ get() [7/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp .",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:20199,access,access,20199,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['access'],['access']
Security," the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  G",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:5947,access,access,5947,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,4,['access'],['access']
Security," the same API as sofa::type::vector.Definition: State.h:69; : container of Deriv values with the same API as sofa::type::vector. ; MatrixDeriv ; sofa::core::State::MatrixDerivDataTypes::MatrixDeriv MatrixDerivVector of Jacobians (sparse constraint matrices).Definition: State.h:71; : vector of Jacobians (sparse constraint matrices). . Public Member Functions;  SOFA_CLASS (SOFA_TEMPLATE(State, TDataTypes), BaseState);  ; sofa::type::TBoundingBox< Real > computeBBox () const;  Compute the bounding box independently from the visibility parameters. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible=false) override;  ; New vectors access API based on VecId; virtual Data< VecCoord > * write (VecCoordId v)=0;  ; virtual const Data< VecCoord > * read (ConstVecCoordId v) const =0;  ; virtual Data< VecDeriv > * write (VecDerivId v)=0;  ; virtual const Data< VecDeriv > * read (ConstVecDerivId v) const =0;  ; virtual Data< MatrixDeriv > * write (MatrixDerivId v)=0;  ; virtual const Data< MatrixDeriv > * read (ConstMatrixDerivId v) const =0;  ; BaseData vectors access API based on VecId; objectmodel::BaseData * baseWrite (VecId v) override;  ; const objectmodel::BaseData * baseRead (ConstVecId v) const override;  ;  Public Member Functions inherited from sofa::core::BaseState;  SOFA_ABSTRACT_CLASS (BaseState, objectmodel::BaseObject);  ; virtual Size getSize () const =0;  Current size of all stored vectors. More...;  ; virtual void resize (Size vsize)=0;  Resize all stored vector. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Obj",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_state.html:2264,access,access,2264,api/master/sofa/html/classsofa_1_1core_1_1_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_state.html,2,['access'],['access']
Security," values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, real defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr real & x () noexcept;  Special access to first element. More...;  ; constexpr const real & x () const noexcept;  Special const access to first element. More...;  ; constexpr real & y () noexcept;  Special access to second element. More...;  ; constexpr const real & y () const noexcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets every element to r. More...;  ; constexpr real & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const real & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr real * ptr () noexcept;  Cast into an array of values. More...;  ; constexpr void getsub (const ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:2799,access,access,2799,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,1,['access'],['access']
Security," with the current collision pipeline More...;  ;  Public Member Functions inherited from sofa::simulation::PipelineImpl; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reset () override;  Reset to initial state. More...;  ; void computeCollisionReset () override;  Remove collision response from last step. More...;  ; void computeCollisionDetection () override;  Detect new collisions. Note that this step must not modify the simulation graph. More...;  ; void computeCollisionResponse () override;  Add collision response in the simulation graph. More...;  ;  Public Member Functions inherited from sofa::core::collision::Pipeline;  SOFA_ABSTRACT_CLASS (Pipeline, sofa::core::objectmodel::BaseObject);  ; void computeCollisions ();  ; const BroadPhaseDetection * getBroadPhaseDetection () const;  Broad phase collision detection method accessor. More...;  ; const NarrowPhaseDetection * getNarrowPhaseDetection () const;  Narrow phase collision detection method accessor. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_collision_pipeline.html:3052,access,accessor,3052,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_collision_pipeline.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_collision_pipeline.html,1,['access'],['accessor']
Security,"  ;  SOFA_ATTRIBUTE_DISABLED__CONSTORDER () static const expr auto ACC;  ;  SOFA_ATTRIBUTE_DISABLED__CONSTORDER () static const expr auto POS_AND_VEL;  ; std::string_view getName () const;  ;  ConstraintParams (const sofa::core::ExecParams &p= *sofa::core::execparams::defaultInstance());  Constructor, initializing all VecIds to default values, implicit and energy flags to false. More...;  ; ConstraintParams & setExecParams (const core::ExecParams *params);  ; Flags and parameters getters; ConstraintOrder constOrder () const;  ; ConstraintParams & setOrder (ConstraintOrder o);  ; double smoothFactor () const;  Smooth contribution factor (for smooth constraints resolution) More...;  ; Access to vectors from a given state container (i.e. State or MechanicalState); template<class S > ; const Data< typename S::VecCoord > * readX (const S *state) const;  Read access to the free (unconstrained) position vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readV (const S *state) const;  Read access to the free (unconstrained) velocity vector. More...;  ; template<class S > ; const Data< typename S::MatrixDeriv > * readJ (const S *state) const;  Read access to the constraint jacobian matrix. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readLambda (S *state) const;  Read access to the constraint force vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readDx (S *state) const;  Read access to the constraint corrective motion vector. More...;  ; Setup methods; Called by the OdeSolver from which the mechanical computations originate. They all return a reference to this MechanicalParam instance, to ease chaining multiple setup calls. . ConstraintParams & setSmoothFactor (double v);  Set smooth contribution factor (for smooth constraints resolution) More...;  ; const ConstMultiVecCoordId & x () const;  Returns ids of the position vectors. More...;  ; ConstMultiVecCoordId & x ();  Returns ids of the positi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html:2286,access,access,2286,api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html,1,['access'],['access']
Security,"  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; virtual bool read (const std::string &value)=0;  ; virtual void printValue (std::ostream &) const =0;  Print the value of this Data to a stream. More...;  ; virtual std::string getValueString () const =0;  Get a string representation of the value held in this Data. More...;  ; virtual std::string getDefaultValueString () const =0;  Get a string representation of the default value held in this Data. More...;  ; virtual std::string getValueTypeString () const =0;  Get the name of the type of the value held in this Data. More...;  ; virtual const sofa::defaulttype::AbstractTypeInfo * getValueTypeInfo () const =0;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:2641,access,access,2641,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,1,['access'],['access']
Security,"  Data (const InitData &init);  ;  Data (const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const void * &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const void * &value, const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~Data () override;  Destructor. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:4223,access,access,4223,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,2,['access'],['access']
Security," ◆ bAccessorSetDefaultImpl(). template<class T > . void sofa::linearalgebra::BaseMatrix::bAccessorSetDefaultImpl ; (; InternalBlockAccessor * ; b, . const T * ; buffer . ). inlineprotected . ◆ bColSize(). virtual Index sofa::linearalgebra::BaseMatrix::bColSize ; (; ); const. inlinevirtual . Returnsthe number of columns of blocks ; Reimplemented in sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, and sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >. ◆ blocAdd(). template<class T > . void sofa::linearalgebra::BaseMatrix::blocAdd ; (; Index ; i, . Index ; j, . const T * ; buffer . ). inline . Shortcut for blocCreate(i,j).add(buffer) . ◆ blocCreate(). virtual BlockAccessor sofa::linearalgebra::BaseMatrix::blocCreate ; (; Index ; i, . Index ; j . ). inlinevirtual . Get write access to a block, possibly creating it. . ◆ blocElements(). template<class T > . const T* sofa::linearalgebra::BaseMatrix::blocElements ; (; Index ; i, . Index ; j, . T * ; buffer . ); const. inline . Shortcut for blocGet(i,j).elements(buffer) . ◆ blocGet(). virtual BlockConstAccessor sofa::linearalgebra::BaseMatrix::blocGet ; (; Index ; i, . Index ; j . ); const. inlinevirtual . Get read access to a block. . ◆ blocGetW(). virtual BlockAccessor sofa::linearalgebra::BaseMatrix::blocGetW ; (; Index ; i, . Index ; j . ). inlinevirtual . Get write access to a block. . ◆ blocSet(). template<class T > . void sofa::linearalgebra::BaseMatrix::blocSet ; (; Index ; i, . Index ; j, . const T * ; buffer . ). inline . Shortcut for blocCreate(i,j).set(buffer) . ◆ bRowBegin(). virtual ColBlockConstIterator sofa::linearalgebra::BaseMatrix::bRowBegin ; (; Index ; ib); const. inlinevirtual . Get the iterator corresponding to the beginning of the given row of blocks. ; Reimplemented in sofa::linearalgebra::CompressedR",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:29175,access,access,29175,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,1,['access'],['access']
Security," ◆ fixed_array() [2/3]. template<class T , sofa::Size N> . template<size_type NN = N, typename std::enable_if< NN==1, int >::type = 0> . constexpr sofa::type::fixed_array< T, N >::fixed_array ; (; value_type ; r1). inlineexplicitconstexprnoexcept . Specific constructor for 1-element vectors. . ◆ fixed_array() [3/3]. template<class T , sofa::Size N> . template<typename... ArgsT, typename = std::enable_if_t< (std::is_convertible_v<ArgsT, value_type> && ...) >, typename = std::enable_if_t< (sizeof...(ArgsT) == N && sizeof...(ArgsT) > 1) >> . constexpr sofa::type::fixed_array< T, N >::fixed_array ; (; ArgsT &&... ; r). inlineconstexprnoexcept . Function details. ◆ array() [1/2]. template<class T , sofa::Size N> . constexpr const Array& sofa::type::fixed_array< T, N >::array ; (; ); const. inlineconstexprnoexcept . direct access to array . ◆ array() [2/2]. template<class T , sofa::Size N> . constexpr Array& sofa::type::fixed_array< T, N >::array ; (; ). inlineconstexprnoexcept . direct access to array . ◆ assign(). template<class T , sofa::Size N> . constexpr void sofa::type::fixed_array< T, N >::assign ; (; const T & ; value). inlineconstexprnoexcept . ◆ at() [1/2]. template<class T , sofa::Size N> . constexpr reference sofa::type::fixed_array< T, N >::at ; (; size_type ; i). inlineconstexpr . ◆ at() [2/2]. template<class T , sofa::Size N> . constexpr const_reference sofa::type::fixed_array< T, N >::at ; (; size_type ; i); const. inlineconstexpr . ◆ back() [1/2]. template<class T , sofa::Size N> . constexpr reference sofa::type::fixed_array< T, N >::back ; (; ). inlineconstexpr . ◆ back() [2/2]. template<class T , sofa::Size N> . constexpr const_reference sofa::type::fixed_array< T, N >::back ; (; ); const. inlineconstexpr . ◆ begin() [1/2]. template<class T , sofa::Size N> . constexpr const_iterator sofa::type::fixed_array< T, N >::begin ; (; ); const. inlineconstexprnoexcept . ◆ begin() [2/2]. template<class T , sofa::Size N> . constexpr iterator sofa::type::fixed_arra",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1fixed__array.html:3855,access,access,3855,api/master/sofa/html/classsofa_1_1type_1_1fixed__array.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1fixed__array.html,1,['access'],['access']
Security,"&) method implemented by the component. ; Implements sofa::core::behavior::BaseForceField. ◆ addKToMatrix() [1/2]. template<class DataTypes > . void sofa::core::behavior::ForceField< DataTypes >::addKToMatrix ; (; const MechanicalParams * ; mparams, . const sofa::core::behavior::MultiMatrixAccessor * ; matrix . ). overridevirtual . Compute the system matrix corresponding to . ; Parameters. mparamsmparams->kFactor() is the coefficient for stiffness contributions (i.e. DOFs term in the ODE) ; matrixthe matrix to add the result to . Implements sofa::core::behavior::BaseForceField. ◆ addKToMatrix() [2/2]. template<class DataTypes > . void sofa::core::behavior::ForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). virtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the same large matrix. Each object adds its contribution to a different section of the matrix. That is why, an offset is used to identify where in the matrix the force field must start adding its contribution. ; kFactstiffness factor that needs to be multiplied to each matrix entry. ; offsetStarting index of the submatrix to fill in the global matrix. . Reimplemented in sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >, sofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >, sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >, sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataType",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_force_field.html:30927,access,access,30927,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_force_field.html,1,['access'],['access']
Security,"&init);  ;  Data (const InitData &init);  ;  Data (const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const T &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const T &value, const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~Data () override;  Destructor. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_data.html:11315,access,access,11315,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_data.html,3,['access'],['access']
Security,"&stressValue, Deriv &stressDirection);  ; void computeBBox (const core::ExecParams *params, bool onlyVisible) override;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void createTriangleInfo (Index triangleIndex, TriangleInfo &, const Triangle &t, const sofa::type::vector< Index > &, const sofa::type::vector< SReal > &);  ; void createTriangleState (Index triangleIndex, TriangleState &, const Triangle &t, const sofa::type::vector< Index > &, const sofa::type::vector< SReal > &);  ; void initTriangleInfo (Index triangleIndex, TriangleInfo &ti, const Triangle t, const VecCoord &x0);  ; void initTriangleState (Index triangleIndex, TriangleState &ti, const Triangle t, const VecCoord &x);  ; void computeTriangleRotation (Transformation &result, Coord eab, Coord eac);  ; void computeTriangleRotation (Transformation &result, Coord a, Coord b, Coord c);  ; void computeTriangleRotation (Transformation &result, VecCoord &x0, Triangle t);  ; void getTriangleVonMisesStress (Index i, Real &stressValue);  ; void getTrianglePrincipalStress (Index i, Real &stressValue, Deriv &stressDirection, Real &stressValue2, Deriv &stressDirection2);  ; type::fixed_array< Coord, 3 > getRotatedInitialElement (Index elemId);  Public methods to access FEM information per element. Those method should not be used internally as they add check on element id. More...;  ; Transformation getRotationMatrix (Index elemId);  ; MaterialStiffness getMaterialStiffness (Index elemId);  ; type::Vec3 getStrainDisplacementFactors (Index elemId);  ; Real getTriangleFactor (Index elemId);  ;  Public Member Functions inherited from sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >;  SOFA_CLASS ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field_optim.html:7732,access,access,7732,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field_optim.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field_optim.html,1,['access'],['access']
Security,"(Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose of m. More...;  ; constexpr Mat< L, C, Real > operator+ (const Mat< L, C, Real > &m) const noexcept;  Matrix addition operator. More...;  ; constexpr Mat< L, C, Real > operator- (const Mat< L, C, Real > &m) const noexcept;  Matrix subtraction operator. More...; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:4666,access,access,4666,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,2,['access'],['access']
Security,"(const MyVecId &v);  ; static std::string getGroup (const MyVecId &v);  . Friends; std::ostream & operator<< (std::ostream &out, const TVecId &v);  . Additional Inherited Members;  Public Attributes inherited from sofa::core::BaseVecId; VecType type;  ; unsigned int index;  ;  Protected Member Functions inherited from sofa::core::BaseVecId;  BaseVecId (VecType t, unsigned int i);  . Constructor details. ◆ TVecId() [1/3]. template<VecAccess vaccess> . sofa::core::TVecId< V_ALL, vaccess >::TVecId ; (; ). inline . ◆ TVecId() [2/3]. template<VecAccess vaccess> . sofa::core::TVecId< V_ALL, vaccess >::TVecId ; (; VecType ; t, . unsigned int ; i . ). inline . ◆ TVecId() [3/3]. template<VecAccess vaccess> . template<VecType vtype2, VecAccess vaccess2> . sofa::core::TVecId< V_ALL, vaccess >::TVecId ; (; const TVecId< vtype2, vaccess2 > & ; v). inline . Create a generic VecId from a specific or generic one, with the constraint that the access must be compatible (i.e. cannot create a write-access VecId from a read-only VecId. . Function details. ◆ getGroup(). template<VecAccess vaccess> . std::string sofa::core::TVecId< V_ALL, vaccess >::getGroup ; (; ); const. inline . ◆ getName(). template<VecAccess vaccess> . std::string sofa::core::TVecId< V_ALL, vaccess >::getName ; (; ); const. inline . ◆ isNull(). template<VecAccess vaccess> . bool sofa::core::TVecId< V_ALL, vaccess >::isNull ; (; ); const. inline . ◆ null(). template<VecAccess vaccess> . static TVecId sofa::core::TVecId< V_ALL, vaccess >::null ; (; ). inlinestatic . ◆ operator!=(). template<VecAccess vaccess> . template<VecType vtype2, VecAccess vaccess2> . bool sofa::core::TVecId< V_ALL, vaccess >::operator!= ; (; const TVecId< vtype2, vaccess2 > & ; v); const. inline . ◆ operator=(). template<VecAccess vaccess> . template<VecType vtype2, VecAccess vaccess2> . TVecId<V_ALL, vaccess>& sofa::core::TVecId< V_ALL, vaccess >::operator= ; (; const TVecId< vtype2, vaccess2 > & ; other). inline . ◆ operator==(). template<VecAc",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_t_vec_id_3_01_v___a_l_l_00_01vaccess_01_4.html:3556,access,access,3556,api/master/sofa/html/classsofa_1_1core_1_1_t_vec_id_3_01_v___a_l_l_00_01vaccess_01_4.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_t_vec_id_3_01_v___a_l_l_00_01vaccess_01_4.html,1,['access'],['access']
Security,") ; Reimplemented in sofa::simulation::graph::DAGNode, and sofa::simulation::Node. ◆ getNameHelper(). ComponentNameHelper& sofa::core::objectmodel::BaseContext::getNameHelper ; (; ). inline . Returns utilitary object to uniquely name objects in the context. . ◆ getObject() [1/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . const std::string & ; path . ); const. virtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [2/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [3/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [1/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:25551,access,access,25551,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['access'],['access']
Security,") const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose of m. More...;  ; constexpr Mat< L, C, Real > operator+ (const Mat< L, C, Real > &m) const noexcept;  Matrix addition operator. More...;  ; constexpr Mat< L, C, Real > operat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:4578,access,access,4578,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,2,['access'],['access']
Security,") const;  Multiply the transposed matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulTV (float *result, const float *v) const;  Multiply the transposed matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulTV (double *result, const double *v) const;  Multiply the transposed matrix by double vector v and add the result in vector result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the give",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:8499,access,access,8499,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,1,['access'],['access']
Security,"). SReal sofa::core::MechanicalParams::mFactor ; (; ); const. inline . Mass matrix contributions factor (for implicit schemes) . ◆ mFactorIncludingRayleighDamping(). SReal sofa::core::MechanicalParams::mFactorIncludingRayleighDamping ; (; SReal ; rayleighMass); const. inline . Returnsmfactor + bfactor*rayleighMass . ◆ operator=(). MechanicalParams * sofa::core::MechanicalParams::operator= ; (; const MechanicalParams & ; mparams). ◆ readDf(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::MechanicalParams::readDf ; (; const S * ; state); const. inline . Read access to current df vector (for implicit schemes) . ◆ readDx(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::MechanicalParams::readDx ; (; const S * ; state); const. inline . Read access to current dx vector (for implicit schemes) . ◆ readF(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::MechanicalParams::readF ; (; const S * ; state); const. inline . Read access to current force vector. . ◆ readV(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::MechanicalParams::readV ; (; const S * ; state); const. inline . Read access to current velocity vector. . ◆ readX(). template<class S > . const Data<typename S::VecCoord>* sofa::core::MechanicalParams::readX ; (; const S * ; state); const. inline . Read access to current position vector. . ◆ setBFactor(). MechanicalParams& sofa::core::MechanicalParams::setBFactor ; (; SReal ; v). inline . Set Damping matrix contributions factor (for implicit schemes) . ◆ setDf() [1/3]. template<class StateSet > . MechanicalParams& sofa::core::MechanicalParams::setDf ; (; const StateSet & ; g, . ConstVecDerivId ; v . ). inline . ◆ setDf() [2/3]. MechanicalParams& sofa::core::MechanicalParams::setDf ; (; ConstMultiVecDerivId ; v). inline . ◆ setDf() [3/3]. MechanicalParams& sofa::core::MechanicalParams::setDf ; (; ConstVecDerivId ; v). inline . Set the IDs of df vector (for implicit schemes) . ◆ setDt(). M",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html:13702,access,access,13702,api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,1,['access'],['access']
Security,"). protectedvirtual . ◆ accumulateForcePolar(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >::accumulateForcePolar ; (; WDataRefVecDeriv & ; f, . RDataRefVecCoord & ; p, . sofa::Index ; i, . const Element & ; elem . ). protectedvirtual . ◆ accumulateForceSmall(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >::accumulateForceSmall ; (; WDataRefVecDeriv & ; f, . RDataRefVecCoord & ; p, . sofa::Index ; i, . const Element & ; elem . ). protectedvirtual . ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >.; Reimplemented in sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >.; Reimplemented in sofa::component::solidmechanics::fem::nonuniform::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field.html:32545,access,access,32545,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field.html,1,['access'],['access']
Security,", bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; virtual bool read (const std::string &value)=0;  ; virtual void printValue (std::ostream &) const =0;  Print the value of this Data to a stream. More...;  ; virtual std::string getValueString () const =0;  Get a string representation of the value held in this Data. More...;  ; virtual std::string getDefaultValueString () const =0;  Get a string representation of the default value held in this Data. More...;  ; virtual std::string getValueTypeString () const =0;  Get the name of the type of the value held in this Data. More...;  ; virtual const sofa::defaulttype::AbstractTypeInfo * getValueTypeInfo () const =0;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:2773,access,access,2773,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,1,['access'],['access']
Security,", class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Attribute details. ◆ counterCompareState. int sofa::component::playback::CompareStateCreator::counterCompareState. protected . ◆ createInMapping. bool sofa::component::playback::CompareStateCreator::createInMapping. protected . ◆ extension. std::string sofa::component::playback::CompareStateCreator::extension. protected . ◆ init. bool sofa::component::playback::CompareStateCreator::init. protected . ◆ sceneName. std::string sofa::component::playback::CompareStateCreator::sceneName. protected . Constructor details. ◆ CompareStateCreator() [1/2]. sofa::component::playback::CompareStateCreator::CompareStateCreator ; (; const core::ExecParams * ; params). ◆ CompareStateCreator() [2/2]. sofa::component::playback::CompareStateCreator::CompareStateCreator ; (; const std::string & ; n, . const core::ExecParams * ; params, . bool ; i = true, . int ; c = 0 . ). Function details. ◆ addCompareState(). void sofa::component::playback::CompareStateCreator",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_compare_state_creator.html:5263,access,access,5263,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_compare_state_creator.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_compare_state_creator.html,1,['access'],['access']
Security,", class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Attribute details. ◆ counterCompareTopology. int sofa::component::playback::CompareTopologyCreator::counterCompareTopology. protected . ◆ createInMapping. bool sofa::component::playback::CompareTopologyCreator::createInMapping. protected . ◆ extension. std::string sofa::component::playback::CompareTopologyCreator::extension. protected . ◆ init. bool sofa::component::playback::CompareTopologyCreator::init. protected . ◆ sceneName. std::string sofa::component::playback::CompareTopologyCreator::sceneName. protected . Constructor details. ◆ CompareTopologyCreator() [1/2]. sofa::component::playback::CompareTopologyCreator::CompareTopologyCreator ; (; const core::ExecParams * ; params). ◆ CompareTopologyCreator() [2/2]. sofa::component::playback::CompareTopologyCreator::CompareTopologyCreator ; (; const std::string & ; n, . const core::ExecParams * ; params, . bool ; i = true, . int ; c = 0 . ). Function details. ◆ addCompareTopology(). void sofa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_compare_topology_creator.html:5290,access,access,5290,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_compare_topology_creator.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_compare_topology_creator.html,1,['access'],['access']
Security,", class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Attribute details. ◆ counterReadState. int sofa::component::playback::ReadStateCreator::counterReadState. protected . ◆ createInMapping. bool sofa::component::playback::ReadStateCreator::createInMapping. protected . ◆ extension. std::string sofa::component::playback::ReadStateCreator::extension. protected . ◆ init. bool sofa::component::playback::ReadStateCreator::init. protected . ◆ sceneName. std::string sofa::component::playback::ReadStateCreator::sceneName. protected . Constructor details. ◆ ReadStateCreator() [1/2]. sofa::component::playback::ReadStateCreator::ReadStateCreator ; (; const core::ExecParams * ; params). ◆ ReadStateCreator() [2/2]. sofa::component::playback::ReadStateCreator::ReadStateCreator ; (; const std::string & ; n, . bool ; _createInMapping, . const core::ExecParams * ; params, . bool ; i = true, . int ; c = 0 . ). Function details. ◆ addReadState(). void sofa::component::playback::ReadStateCreator::addReadState ; (",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_state_creator.html:5256,access,access,5256,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_state_creator.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_state_creator.html,1,['access'],['access']
Security,", class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Attribute details. ◆ counterReadTopology. int sofa::component::playback::ReadTopologyCreator::counterReadTopology. protected . ◆ createInMapping. bool sofa::component::playback::ReadTopologyCreator::createInMapping. protected . ◆ extension. std::string sofa::component::playback::ReadTopologyCreator::extension. protected . ◆ init. bool sofa::component::playback::ReadTopologyCreator::init. protected . ◆ sceneName. std::string sofa::component::playback::ReadTopologyCreator::sceneName. protected . Constructor details. ◆ ReadTopologyCreator() [1/2]. sofa::component::playback::ReadTopologyCreator::ReadTopologyCreator ; (; const core::ExecParams * ; params). ◆ ReadTopologyCreator() [2/2]. sofa::component::playback::ReadTopologyCreator::ReadTopologyCreator ; (; const std::string & ; n, . bool ; _createInMapping, . const core::ExecParams * ; params, . bool ; i = true, . int ; c = 0 . ). Function details. ◆ addReadTopology(). void sofa::component::pl",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_topology_creator.html:5283,access,access,5283,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_topology_creator.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_topology_creator.html,1,['access'],['access']
Security,", class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Attribute details. ◆ counterWriteState. int sofa::component::playback::WriteStateCreator::counterWriteState. protected . ◆ createInMapping. bool sofa::component::playback::WriteStateCreator::createInMapping. protected . ◆ extension. std::string sofa::component::playback::WriteStateCreator::extension. protected . ◆ m_period. double sofa::component::playback::WriteStateCreator::m_period = 0.0. protected . ◆ m_times. type::vector<double> sofa::component::playback::WriteStateCreator::m_times. protected . ◆ recordF. bool sofa::component::playback::WriteStateCreator::recordF. protected . ◆ recordV. bool sofa::component::playback::WriteStateCreator::recordV. protected . ◆ recordX. bool sofa::component::playback::WriteStateCreator::recordX. protected . ◆ sceneName. std::string sofa::component::playback::WriteStateCreator::sceneName. protected . Constructor details. ◆ WriteStateCreator() [1/2]. sofa::component::playback::WriteStateCreator::WriteStat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_state_creator.html:5601,access,access,5601,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_state_creator.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_state_creator.html,1,['access'],['access']
Security,", class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Attribute details. ◆ counterWriteTopology. int sofa::component::playback::WriteTopologyCreator::counterWriteTopology. protected . ◆ createInMapping. bool sofa::component::playback::WriteTopologyCreator::createInMapping. protected . ◆ extension. std::string sofa::component::playback::WriteTopologyCreator::extension. protected . ◆ recordContainers. bool sofa::component::playback::WriteTopologyCreator::recordContainers. protected . ◆ recordShellContainers. bool sofa::component::playback::WriteTopologyCreator::recordShellContainers. protected . ◆ sceneName. std::string sofa::component::playback::WriteTopologyCreator::sceneName. protected . Constructor details. ◆ WriteTopologyCreator() [1/2]. sofa::component::playback::WriteTopologyCreator::WriteTopologyCreator ; (; const core::ExecParams * ; params). ◆ WriteTopologyCreator() [2/2]. sofa::component::playback::WriteTopologyCreator::WriteTopologyCreator ; (; const std::string & ; n, . bool ; _writ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_topology_creator.html:5456,access,access,5456,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_topology_creator.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_topology_creator.html,1,['access'],['access']
Security,", class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Attribute details. ◆ dt. SReal sofa::simulation::SolveVisitor::dt. protected . ◆ m_computeForceIsolatedInteractionForceFields. bool sofa::simulation::SolveVisitor::m_computeForceIsolatedInteractionForceFields { false }. protected . ◆ m_parallelSolve. bool sofa::simulation::SolveVisitor::m_parallelSolve {false }. protected . ◆ m_status. sofa::simulation::CpuTask::Status sofa::simulation::SolveVisitor::m_status. protected . Status for the parallel tasks. . ◆ m_tasks. std::list<SolveVisitorTask> sofa::simulation::SolveVisitor::m_tasks. protected . Container for the parallel tasks. . ◆ v. sofa::core::MultiVecDerivId sofa::simulation::SolveVisitor::v. protected . ◆ x. sofa::core::MultiVecCoordId sofa::simulation::SolveVisitor::x. protected . Constructor details. ◆ SolveVisitor() [1/2]. sofa::simulation::SolveVisitor::SolveVisitor ; (; const sofa::core::ExecParams * ; params, . SReal ; _dt, . sofa::core::MultiVecCoordId ; X = sofa::core::VecCoord",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html:6052,access,access,6052,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html,1,['access'],['access']
Security,", class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Attribute details. ◆ root. simulation::Node* sofa::simulation::BaseMechanicalVisitor::root. protected . root node from which the visitor was executed . ◆ rootData. SReal* sofa::simulation::BaseMechanicalVisitor::rootData { nullptr }. protected . data for root node . Constructor details. ◆ BaseMechanicalVisitor(). sofa::simulation::BaseMechanicalVisitor::BaseMechanicalVisitor ; (; const sofa::core::ExecParams * ; params). Function details. ◆ addNodeData(). virtual void sofa::simulation::BaseMechanicalVisitor::addNodeData ; (; simulation::Node * ; , . SReal * ; , . const SReal * ;  . ). virtualdelete . ◆ bwdConstraintSet() [1/2]. void sofa::simulation::BaseMechanicalVisitor::bwdConstraintSet ; (; simulation::Node * ; , . sofa::core::behavior::BaseConstraintSet * ;  . ). virtual . Process all the BaseConstraintSet. . ◆ bwdConstraintSet() [2/2]. void sofa::simulation::BaseMechanicalVisitor::bwdConstraintSet ; (; VisitorContext * ; ctx, . sofa::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html:12936,access,access,12936,api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_base_mechanical_visitor.html,1,['access'],['access']
Security,", class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Attribute details. ◆ state. bool sofa::component::playback::ReadStateActivator::state. protected . Constructor details. ◆ ReadStateActivator(). sofa::component::playback::ReadStateActivator::ReadStateActivator ; (; const core::ExecParams * ; params, . bool ; active . ). inline . Function details. ◆ changeStateReader(). void sofa::component::playback::ReadStateActivator::changeStateReader ; (; sofa::component::playback::ReadState * ; ws). protected . ◆ getClassName(). const char* sofa::component::playback::ReadStateActivator::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ getState(). bool sofa::component::playback::ReadStateActivator::getState ; (; ); const. inline . ◆ processNodeTopDown(). simulation::Visitor::Result sofa::component::playback::ReadStateActivator::processNodeTopDown ; (; simulation::Node * ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_state_activator.html:4796,access,access,4796,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_state_activator.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_state_activator.html,1,['access'],['access']
Security,", class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Attribute details. ◆ state. bool sofa::component::playback::ReadTopologyActivator::state. protected . Constructor details. ◆ ReadTopologyActivator(). sofa::component::playback::ReadTopologyActivator::ReadTopologyActivator ; (; const core::ExecParams * ; params, . bool ; active . ). inline . Function details. ◆ changeTopologyReader(). void sofa::component::playback::ReadTopologyActivator::changeTopologyReader ; (; sofa::component::playback::ReadTopology * ; rt). protected . ◆ getClassName(). const char* sofa::component::playback::ReadTopologyActivator::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ getTopology(). bool sofa::component::playback::ReadTopologyActivator::getTopology ; (; ); const. inline . ◆ processNodeTopDown(). simulation::Visitor::Result sofa::component::playback::ReadTopologyActivator::proc",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_topology_activator.html:4823,access,access,4823,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_topology_activator.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_topology_activator.html,1,['access'],['access']
Security,", class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Attribute details. ◆ state. bool sofa::component::playback::WriteStateActivator::state. protected . Constructor details. ◆ WriteStateActivator(). sofa::component::playback::WriteStateActivator::WriteStateActivator ; (; const core::ExecParams * ; params, . bool ; active . ). inline . Function details. ◆ changeStateWriter(). void sofa::component::playback::WriteStateActivator::changeStateWriter ; (; sofa::component::playback::WriteState * ; ws). protected . ◆ getClassName(). const char* sofa::component::playback::WriteStateActivator::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ getState(). bool sofa::component::playback::WriteStateActivator::getState ; (; ); const. inline . ◆ processNodeTopDown(). simulation::Visitor::Result sofa::component::playback::WriteStateActivator::processNodeTopDown ; (; simulation",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_state_activator.html:4840,access,access,4840,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_state_activator.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_state_activator.html,1,['access'],['access']
Security,", class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Attribute details. ◆ state. bool sofa::component::playback::WriteTopologyActivator::state. protected . Constructor details. ◆ WriteTopologyActivator(). sofa::component::playback::WriteTopologyActivator::WriteTopologyActivator ; (; const core::ExecParams * ; params, . bool ; active . ). inline . Function details. ◆ changeStateWriter(). void sofa::component::playback::WriteTopologyActivator::changeStateWriter ; (; sofa::component::playback::WriteTopology * ; wt). protected . ◆ getClassName(). const char* sofa::component::playback::WriteTopologyActivator::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ getState(). bool sofa::component::playback::WriteTopologyActivator::getState ; (; ); const. inline . ◆ processNodeTopDown(). simulation::Visitor::Result sofa::component::playback::WriteTopologyActivator::process",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_topology_activator.html:4858,access,access,4858,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_topology_activator.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_topology_activator.html,1,['access'],['access']
Security,", class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Attribute details. ◆ time. double sofa::component::playback::ReadStateModifier::time. protected . Constructor details. ◆ ReadStateModifier(). sofa::component::playback::ReadStateModifier::ReadStateModifier ; (; const core::ExecParams * ; params, . double ; _time . ). inline . Function details. ◆ changeTimeReader(). void sofa::component::playback::ReadStateModifier::changeTimeReader ; (; sofa::component::playback::ReadState * ; rs). inlineprotected . ◆ getClassName(). const char* sofa::component::playback::ReadStateModifier::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ getTime(). double sofa::component::playback::ReadStateModifier::getTime ; (; ); const. inline . ◆ processNodeTopDown(). simulation::Visitor::Result sofa::component::playback::ReadStateModifier::processNodeTopDown ; (; simulation::Node * ; )",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_state_modifier.html:4832,access,access,4832,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_state_modifier.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_state_modifier.html,1,['access'],['access']
Security,", class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Attribute details. ◆ time. double sofa::component::playback::ReadTopologyModifier::time. protected . Constructor details. ◆ ReadTopologyModifier(). sofa::component::playback::ReadTopologyModifier::ReadTopologyModifier ; (; const core::ExecParams * ; params, . double ; _time . ). inline . Function details. ◆ changeTimeReader(). void sofa::component::playback::ReadTopologyModifier::changeTimeReader ; (; sofa::component::playback::ReadTopology * ; rt). inlineprotected . ◆ getClassName(). const char* sofa::component::playback::ReadTopologyModifier::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ getTime(). double sofa::component::playback::ReadTopologyModifier::getTime ; (; ); const. inline . ◆ processNodeTopDown(). simulation::Visitor::Result sofa::component::playback::ReadTopologyModifier::processNodeTopDown ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_topology_modifier.html:4850,access,access,4850,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_topology_modifier.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_topology_modifier.html,1,['access'],['access']
Security,", possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [3/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [1/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObjects() [2/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [3/6]. template<class Container > . Container& sofa::core::objectmodel::BaseContext::getObjects ; (; Container & ; result, . SearchDirection ; dir = SearchUp . ). inline . Returns a list of object of type passed as a parameter. eg: sofa::type::vector<VisualModel*> results; context->getObjects(results) ; . ◆ getObjects() [4/6]. template<class Object , class Container > . void sofa::core::objectmodel::B",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:26465,access,access,26465,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['access'],['access']
Security,"-1, ValueType > &v, ValueType r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< ValueType, N > &p) noexcept;  ; template<Size N2, typename real2 > ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; template<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:7075,access,access,7075,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,2,['access'],['access']
Security,". #include <PipelineImpl.h>. Inheritance diagram for sofa::simulation::PipelineImpl:. [legend]. Public Member Functions; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reset () override;  Reset to initial state. More...;  ; void computeCollisionReset () override;  Remove collision response from last step. More...;  ; void computeCollisionDetection () override;  Detect new collisions. Note that this step must not modify the simulation graph. More...;  ; void computeCollisionResponse () override;  Add collision response in the simulation graph. More...;  ;  Public Member Functions inherited from sofa::core::collision::Pipeline;  SOFA_ABSTRACT_CLASS (Pipeline, sofa::core::objectmodel::BaseObject);  ; void computeCollisions ();  ; const BroadPhaseDetection * getBroadPhaseDetection () const;  Broad phase collision detection method accessor. More...;  ; const NarrowPhaseDetection * getNarrowPhaseDetection () const;  Narrow phase collision detection method accessor. More...;  ; virtual std::set< std::string > getResponseList () const =0;  get the set of response available with the current collision pipeline More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &pa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:1311,access,accessor,1311,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,1,['access'],['accessor']
Security,". Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [2/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [3/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [1/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObjects() [2/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:26007,access,access,26007,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['access'],['access']
Security,". More...;  ; constexpr Vec (const Vec< N-1, real > &v, real r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< real, N > &p) noexcept;  ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, real defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr real & x () noexcept;  Special access to first element. More...;  ; constexpr const real & x () const noexcept;  Special const access to first element. More...;  ; constexpr real & y () noexcept;  Special access to second element. More...;  ; constexpr const real & y () const noexcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:2274,access,access,2274,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,1,['access'],['access']
Security,". bool sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::updateMatrix. protected . Constructor details. ◆ TriangularTensorMassForceField(). template<class DataTypes > . sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::TriangularTensorMassForceField. protected . second Lame coefficient . ◆ ~TriangularTensorMassForceField(). template<class DataTypes > . sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::~TriangularTensorMassForceField. protectedvirtual . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ applyEdgeCreation(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::applyEdgeCreation ; (; Ind",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field.html:24004,access,access,24004,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field.html,1,['access'],['access']
Security,". constexpr bool sofa::type::Mat< L, C, real >::operator!= ; (; const Mat< L, C, real > & ; b); const. inlineconstexprnoexcept . ◆ operator()() [1/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr const LineNoInit& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i); const. inlineconstexprnoexcept . Read-only access to line i. . ◆ operator()() [2/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr LineNoInit& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i). inlineconstexprnoexcept . Write access to line i. . ◆ operator()() [3/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr const real& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i, . Size ; j . ); const. inlineconstexprnoexcept . Read-only access to element (i,j). . ◆ operator()() [4/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr real& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i, . Size ; j . ). inlineconstexprnoexcept . Write access to element (i,j). . ◆ operator*() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Col sofa::type::Mat< L, C, real >::operator* ; (; const Line & ; v); const. inlineconstexprnoexcept . Multiplication operator Matrix * Line. . ◆ operator*() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::operator* ; (; real ; f); const. inlineconstexprnoexcept . Scalar multiplication operator. . ◆ operator*=(). template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::operator*= ; (; real ; r). inlineconstexprnoexcept . Scalar multiplication assignment operator. . ◆ operator+(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::operator+ ; (; const Mat< L, C, real > & ; m); const. inlineconstexprnoexcept . Matrix addition operator. . ◆ operator+=(). template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:24376,access,access,24376,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,1,['access'],['access']
Security,". inline . ◆ getModelViewMatrix(). void sofa::core::visual::VisualParams::getModelViewMatrix ; (; double ; m[16]); const. inline . Get the ModelView matrix used to draw the scene. This OpenGL matrix defines the world coordinate system with respect to the camera. . ◆ getProjectionMatrix(). void sofa::core::visual::VisualParams::getProjectionMatrix ; (; double ; m[16]); const. inline . Get the projection matrix used to draw the scene. This OpenGL matrix defines the camera coordinate system with respect to the viewport, including perspective if any. . ◆ isSupported(). bool sofa::core::visual::VisualParams::isSupported ; (; unsigned int ; api); const. inline . ◆ pass() [1/2]. Pass& sofa::core::visual::VisualParams::pass ; (; ). inline . ◆ pass() [2/2]. const Pass& sofa::core::visual::VisualParams::pass ; (; ); const. inline . ◆ readV(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::visual::VisualParams::readV ; (; const S * ; state); const. inline . Read access to current velocity vector. . ◆ readX(). template<class S > . const Data<typename S::VecCoord>* sofa::core::visual::VisualParams::readX ; (; const S * ; state); const. inline . Read access to current position vector. . ◆ sceneBBox() [1/2]. sofa::type::BoundingBox& sofa::core::visual::VisualParams::sceneBBox ; (; ). inline . ◆ sceneBBox() [2/2]. const sofa::type::BoundingBox& sofa::core::visual::VisualParams::sceneBBox ; (; ); const. inline . ◆ setModelViewMatrix(). void sofa::core::visual::VisualParams::setModelViewMatrix ; (; const double ; m[16]). inline . Store the ModelView matrix used to draw the scene. This OpenGL matrix defines the world coordinate system with respect to the camera. . ◆ setProjectionMatrix(). void sofa::core::visual::VisualParams::setProjectionMatrix ; (; const double ; m[16]). inline . Store the projection matrix used to draw the scene. This OpenGL matrix defines the camera coordinate system with respect to the viewport, including perspective if any. . ◆ setSupported(",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_params.html:8250,access,access,8250,api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_params.html,1,['access'],['access']
Security,". inlineconstexprnoexcept . Multiplication with the transposed of the given matrix operator. ; Returnsthis * mt . ◆ operator real(). template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> . constexpr sofa::type::Mat< L, C, real >::operator real ; (; ); const. inlineconstexpr . ◆ operator!=(). template<sofa::Size L, sofa::Size C, class real > . constexpr bool sofa::type::Mat< L, C, real >::operator!= ; (; const Mat< L, C, real > & ; b); const. inlineconstexprnoexcept . ◆ operator()() [1/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr const LineNoInit& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i); const. inlineconstexprnoexcept . Read-only access to line i. . ◆ operator()() [2/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr LineNoInit& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i). inlineconstexprnoexcept . Write access to line i. . ◆ operator()() [3/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr const real& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i, . Size ; j . ); const. inlineconstexprnoexcept . Read-only access to element (i,j). . ◆ operator()() [4/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr real& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i, . Size ; j . ). inlineconstexprnoexcept . Write access to element (i,j). . ◆ operator*() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Col sofa::type::Mat< L, C, real >::operator* ; (; const Line & ; v); const. inlineconstexprnoexcept . Multiplication operator Matrix * Line. . ◆ operator*() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::operator* ; (; real ; f); const. inlineconstexprnoexcept . Scalar multiplication operator. . ◆ operator*=(). template<sofa::Size L, sofa::Size C, class real > . constexpr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:23922,access,access,23922,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,1,['access'],['access']
Security,". protectedvirtual . Function details. ◆ addDForce() [1/3]. void sofa::component::mechanicalload::SurfacePressureForceField< defaulttype::Rigid3Types >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). virtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addDForce() [2/3]. template<class DataTypes > . void sofa::component::mechanicalload::SurfacePressureForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addDForce() [3/3]. void sofa::component::mechanicalload::SurfacePressureForceField< defaulttype::Rigid3Types >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). virtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::mechanicalload::SurfacePressureForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDer",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_surface_pressure_force_field.html:31744,access,access,31744,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_surface_pressure_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_surface_pressure_force_field.html,1,['access'],['access']
Security,". ◆ canBeLinked(). virtual bool sofa::core::objectmodel::BaseData::canBeLinked ; (; ); const. inlinevirtual . Return whether this Data can be used as a linkPath.; True by default. Useful if you want to customize the use of @ syntax (see ObjectRef and DataObjectRef) . ◆ copyValueFrom(). bool sofa::core::objectmodel::BaseData::copyValueFrom ; (; const BaseData * ; data). Update this Data from the value of its parent. ; Copy the value from another Data.; Note that this is a one-time copy and not a permanent link (otherwise see setParent()) Returnstrue if the copy was successful. . ◆ decodeTypeName(). std::string sofa::core::objectmodel::BaseData::decodeTypeName ; (; const std::type_info & ; t). static . Helper method to decode the type name to a more readable form if possible. . ◆ endEditVoidPtr(). void sofa::core::objectmodel::BaseData::endEditVoidPtr ; (; ). Must be called after beginEditVoidPtr(), after you are finished modifying this Data. ; End edit current value as a void pointer (use getValueTypeInfo to find how to access it) . ◆ forceSet(). void sofa::core::objectmodel::BaseData::forceSet ; (; ). inline . Reset the isSet flag to true, to indicate that the current value has been modified. . ◆ genericCopyValueFrom(). bool sofa::core::objectmodel::BaseData::genericCopyValueFrom ; (; const BaseData * ; parent). protected . Try to update this Data from the value of its parent in ""fast mode"";. ; Update this Data from the value of its parent. . ◆ getCounter(). int sofa::core::objectmodel::BaseData::getCounter ; (; ); const. inline . Return the number of changes since creation This can be used to efficiently detect changes . ◆ getData(). BaseData* sofa::core::objectmodel::BaseData::getData ; (; ); const. inline . This method is needed by DDGNode. . ◆ getDefaultValueString(). virtual std::string sofa::core::objectmodel::BaseData::getDefaultValueString ; (; ); const. pure virtual . Get a string representation of the default value held in this Data. ; Implemented in sofa::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:12489,access,access,12489,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,1,['access'],['access']
Security,"...;  ;  MechanicalParams (const MechanicalParams &mparams);  Copy Constructor. More...;  ; MechanicalParams * setExecParams (const core::ExecParams *params);  ; MechanicalParams * operator= (const MechanicalParams &mparams);  ; Flags and parameters getters; SReal dt () const;  Time step. More...;  ; bool implicit () const;  Is the time integration scheme implicit ? More...;  ; SReal mFactor () const;  Mass matrix contributions factor (for implicit schemes) More...;  ; SReal bFactor () const;  Damping matrix contributions factor (for implicit schemes) More...;  ; SReal kFactor () const;  Stiffness matrix contributions factor (for implicit schemes) More...;  ; Rayleigh Damping D = rayleighStiffness*K - rayleighMass*M; SReal kFactorIncludingRayleighDamping (SReal rayleighStiffness) const;  ; SReal mFactorIncludingRayleighDamping (SReal rayleighMass) const;  ; Access to vectors from a given state container (i.e. State or MechanicalState); template<class S > ; const Data< typename S::VecCoord > * readX (const S *state) const;  Read access to current position vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readV (const S *state) const;  Read access to current velocity vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readF (const S *state) const;  Read access to current force vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readDx (const S *state) const;  Read access to current dx vector (for implicit schemes) More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readDf (const S *state) const;  Read access to current df vector (for implicit schemes) More...;  ;  Public Member Functions inherited from sofa::core::ExecParams; bool checkValidStorage () const;  ; ExecMode execMode () const;  Mode of execution requested. More...;  ; int threadID () const;  Index of current thread (0 corresponding to the only thread in sequential mode, or first thread in parallel mode) More..",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html:3141,access,access,3141,api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,1,['access'],['access']
Security,"..;  . Public Member Functions;  SOFA_ATTRIBUTE_DISABLED__CONSTORDER () static const expr auto POS;  ;  SOFA_ATTRIBUTE_DISABLED__CONSTORDER () static const expr auto VEL;  ;  SOFA_ATTRIBUTE_DISABLED__CONSTORDER () static const expr auto ACC;  ;  SOFA_ATTRIBUTE_DISABLED__CONSTORDER () static const expr auto POS_AND_VEL;  ; std::string_view getName () const;  ;  ConstraintParams (const sofa::core::ExecParams &p= *sofa::core::execparams::defaultInstance());  Constructor, initializing all VecIds to default values, implicit and energy flags to false. More...;  ; ConstraintParams & setExecParams (const core::ExecParams *params);  ; Flags and parameters getters; ConstraintOrder constOrder () const;  ; ConstraintParams & setOrder (ConstraintOrder o);  ; double smoothFactor () const;  Smooth contribution factor (for smooth constraints resolution) More...;  ; Access to vectors from a given state container (i.e. State or MechanicalState); template<class S > ; const Data< typename S::VecCoord > * readX (const S *state) const;  Read access to the free (unconstrained) position vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readV (const S *state) const;  Read access to the free (unconstrained) velocity vector. More...;  ; template<class S > ; const Data< typename S::MatrixDeriv > * readJ (const S *state) const;  Read access to the constraint jacobian matrix. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readLambda (S *state) const;  Read access to the constraint force vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readDx (S *state) const;  Read access to the constraint corrective motion vector. More...;  ; Setup methods; Called by the OdeSolver from which the mechanical computations originate. They all return a reference to this MechanicalParam instance, to ease chaining multiple setup calls. . ConstraintParams & setSmoothFactor (double v);  Set smooth contribution factor (for smooth constraints r",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html:2128,access,access,2128,api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html,1,['access'],['access']
Security,"..;  ; constexpr void operator= (const Mat< L, C, real2 > &m) noexcept;  Assignment from another matrix. More...;  ; constexpr void operator= (const Mat< L2, C2, Real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, Real > &m) const noexcept;  ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, Real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More..",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:3293,access,access,3293,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,2,['access'],['access']
Security,".;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (MeshLoader, BaseLoader);  ; bool canLoad () override;  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; virtual bool load () final;  ; virtual void applyTransformation (sofa::type::Matrix4 const &T);  Apply Homogeneous transformation to the positions. More...;  ; virtual void updateMesh ();  ; virtual void updateElements ();  ; virtual void updatePoints ();  ; virtual void updateNormals ();  ; Initial transformations accessors.; void setTranslation (SReal dx, SReal dy, SReal dz);  ; void setRotation (SReal rx, SReal ry, SReal rz);  ; void setScale (SReal sx, SReal sy, SReal sz);  ; void setTransformation (const sofa::type::Matrix4 &t);  ; virtual Vec3 getTranslation () const;  ; virtual Vec3 getRotation () const;  ; virtual Vec3 getScale () const;  ; virtual sofa::type::Matrix4 getTransformation () const;  ;  Public Member Functions inherited from sofa::core::loader::BaseLoader;  SOFA_ABSTRACT_CLASS (BaseLoader, objectmodel::BaseObject);  ; void setFilename (std::string f);  ; const std::string & getFilename ();  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html:6286,access,accessors,6286,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_mesh_loader.html,1,['access'],['accessors']
Security,".;  ; reference operator[] (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator[] (Index n) const;  Read-only random access. More...;  ; Index push_back (const_reference v);  ;  Public Member Functions inherited from sofa::type::vector< T, MemoryManager >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< T, Alloc > &&v);  Move assignment operator. More...;  ;  vector (typename vector< T >::const_iterator first, typename vector< T >::const_iterator last);  Constructor. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. More...;  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; void fill (const T &value);  Sets every element to 'value'. More...;  ; void fastResize (Size n);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  Specialization for writing vectors of unsigned char. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostre",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:2325,access,access,2325,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,1,['access'],['access']
Security,".h>. Inheritance diagram for sofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >::Mat3:. [legend]. Public Member Functions; Deriv operator* (const Deriv &v);  ; Deriv transposeMultiply (const Deriv &v);  ;  Public Member Functions inherited from sofa::type::fixed_array< Deriv, 3 >; constexpr fixed_array ();  ; constexpr fixed_array (value_type r1) noexcept;  Specific constructor for 1-element vectors. More...;  ; constexpr fixed_array (ArgsT &&... r) noexcept;  ; constexpr iterator begin () noexcept;  ; constexpr const_iterator begin () const noexcept;  ; constexpr const_iterator cbegin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr const_iterator cend () const noexcept;  ; constexpr reference operator[] (size_type i);  ; constexpr const_reference operator[] (size_type i) const;  ; constexpr Deriv & get () &noexcept;  ; constexpr const Deriv & get () const &noexcept;  ; constexpr Deriv && get () &&noexcept;  ; constexpr const Deriv && get () const &&noexcept;  ; constexpr reference at (size_type i);  ; constexpr const_reference at (size_type i) const;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; void swap (fixed_array< Deriv, N > &y);  ; constexpr const Deriv * data () const noexcept;  ; constexpr const Array & array () const noexcept;  direct access to array More...;  ; constexpr Array & array () noexcept;  direct access to array More...;  ; constexpr fixed_array< Deriv, N > & operator= (const fixed_array< T2, N > &rhs) noexcept;  ; constexpr void assign (const Deriv &value) noexcept;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::fixed_array< Deriv, 3 >; Deriv elems [N];  ;  Static Public Member Functions inherited from sofa::type::fixed_array< Deriv, 3 >; static constexpr size_type size () noexcept;  ; static b",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_quadratic_springs_force_field_1_1_mat3.html:1901,access,access,1901,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_quadratic_springs_force_field_1_1_mat3.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_quadratic_springs_force_field_1_1_mat3.html,1,['access'],['access']
Security,"0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:3712,access,access,3712,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,2,['access'],['access']
Security,"0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:3827,access,access,3827,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,2,['access'],['access']
Security,"147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::core::DataTrackerCallback Class Reference . #include <DataTrackerCallback.h>. Inheritance diagram for sofa::core::DataTrackerCallback:. [legend]; Detailed Description; a DDGNode that automatically triggers its update function when asking for an output and any input changed. Similar behavior than a DataEngine, but this is NOT a component and can be used everywhere.; Note that it contains a DataTracker (m_dataTracker) to be able to check precisely which input changed if needed.; **** Implementation good rules: (similar to DataEngine); //init addInput // indicate all inputs addOutput // indicate all outputs setDirtyValue(); // the engine must start dirty (of course, no output are up-to-date); DataTrackerCallback is usually created using the ""addUpdateCallback()"" method from Base. Thus the context is usually passed to the lambda making all public & private attributes & methods of the component accessible within the callback function. example:; addUpdateCallback(""name"", {&name}, [this](DataTracker& tracker){ // Increment the state counter but without changing the state. return d_componentState.getValue(); }, {&d_componentState});; A member function with the same signature - core::objectmodel::ComponentState(DataTracker&) - can also be used.; The update of the inputs is done for you before calling the callback, and they are also cleaned for you after the call. Thus there's no need to manually call updateAllInputsIfDirty() or cleanDirty() (see implementation of update() . Protected Attributes; std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> m_callback;  ; sofa::core::objectmodel::Base * m_owner {nullptr};  ;  Protected Attributes inherited from sofa::core::DataTrackerDDGNode; DataTracker m_dataTracker;  ;  Protected Attributes inherited from sofa::core::objectmodel::DDGNode; DDGLinkContainer inputs;  ; DDGLinkCo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_callback.html:1118,access,accessible,1118,api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_callback.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_callback.html,1,['access'],['accessible']
Security,"3, T > &b);  Specific constructor for 6-elements vectors, taking two 3-elements vectors. More...;  ; constexpr Vec (const Vec< N-1, real > &v, real r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< real, N > &p) noexcept;  ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, real defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr real & x () noexcept;  Special access to first element. More...;  ; constexpr const real & x () const noexcept;  Special const access to first element. More...;  ; constexpr real & y () noexcept;  Special access to second element. More...;  ; constexpr const real & y () const noexcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different d",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:2178,access,access,2178,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,1,['access'],['access']
Security,": Programming with SoftRobots. /using-softrobots; . /feed; ; SOFA » All Posts. SOFA - Forum: Using SoftRobots. SOFA - Forum: SoftRobots. /topic; . /2d-incision-with-phantom-omni; ; SOFA - Topic: 2d Incision with Phantom omni. /3d-model-of-human-anatomy; ; SOFA - Topic: [SOLVED] 3D Model of human anatomy. /3d-printing-simulation-using-sofa; ; SOFA - Topic: 3D printing simulation using SOFA. /abdominal-organs-in-sofa; ; SOFA - Topic: Abdominal Organs in SOFA. /about-explanation-of-components; ; SOFA - Topic: [SOLVED] about explanation of components. /about-stick-and-stickcontactconstraint; ; SOFA - Topic: about stick and stickcontactconstraint. /about-the-suturing-simulation; ; SOFA - Topic: [SOLVED] About the suture simulation. /about-the-unit; ; SOFA - Topic: [SOLVED] About the unit. /access-constraint-forces-from-a-different-class; ; SOFA - Topic: [SOLVED] Access constraint forces from a different class. /accessing-and-mofiying-array-values-with-context-managers-in-sofapython3; ; SOFA - Topic: Accessing and mofiying array values with Context Managers in SofaPython3. /accessing-deformations-force-states-etc-using-python; ; SOFA - Topic: [SOLVED] Accessing deformations, force states, etc using Python. /access-object-data-on-the-fly-sofapython3; ; SOFA - Topic: Access object data on the fly, sofaPython3. /access-stress-in-triangularfemforcefield; ; SOFA - Topic: Access stress in TriangularFEMForceField. /activating-twoway-option-in-attachconstraint-component-or-not; ; SOFA - Topic: Activating twoWay option in attachConstraint component or not. /actuating-multiple-components-with-cableconstraint; ; SOFA - Topic: Actuating multiple components with CableConstraint. /add_executable-cannot-create-target-another-target-with-the-same-namea-exist; ; SOFA - Topic: add_executable cannot create target, another target with the same namea exist. /add-curve-paramater-to-an-instrument; ; SOFA - Topic: [SOLVED] Add curve paramater to an instrument. /adding-captions-and-instructions-in",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:252833,access,accessing-and-mofiying-array-values-with-context-managers-in-,252833,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['access'],['accessing-and-mofiying-array-values-with-context-managers-in-']
Security,: [SOLVED] Proper way of removing points in a Topological Mapping. /putting-an-object-inside-another-one; ; SOFA - Topic: [SOLVED] Putting an object inside another one. /putting-histogram-on-view; . /page; . /3; ; SOFA - Topic: [SOLVED] putting histogram on view. /5; ; SOFA - Topic: [SOLVED] putting histogram on view. SOFA - Topic: [SOLVED] putting histogram on view. /pyscn-files-not-opening-despite-having-python-3-8; ; SOFA - Topic: PYSCN files not opening despite having python 3.8. /pyscn-file-softrobotics-plugin; ; SOFA - Topic: [SOLVED] .pyscn file (SoftRobotics Plugin). /python3-windows-build-controller-results-in-segfault; ; SOFA - Topic: Python3 Windows build – Controller results in segfault. /pythonlibs-not-found; ; SOFA - Topic: PythonLibs not found. /python-runtime-fatal-error-with-gil; ; SOFA - Topic: Python runtime fatal error with GIL. /python-scene-errors; . /embed; ; SOFA - Topic: Python scene errors. SOFA - Topic: Python scene errors. /qsqltable-and-qsqldatabase-created-in-qt-are-not-accessible-in-sofa; . /feed; ; [SOLVED] QSqlTable and QSqlDatabase created in QT are not accessible in sofa – SOFA. SOFA - Topic: [SOLVED] QSqlTable and QSqlDatabase created in QT are not accessible in sofa. /qsqltable-and-qsqldatabase-created-in-qt-are-not-accessible-in-sofa-2; ; SOFA - Topic: QSqlTable and QSqlDatabase created in QT are not accessible in sofa. /qt5quick-directory-is-not-found-how-to-fix-this-error; . /feed; ; [SOLVED] Qt5Quick directory is not found. how to fix this error – SOFA. SOFA - Topic: [SOLVED] Qt5Quick directory is not found. how to fix this error. /qtableview-graph-linked-with-sofa-scene-file; ; SOFA - Topic: QTableView graph linked with SOFA scene file. /qtableview-saving-data-into-sqlite; ; SOFA - Topic: QTableView saving data into sqlite. /qt-version-issues-on-windows; . /page; . /13; ; SOFA - Topic: [SOLVED] Qt version issues on Windows. /4; ; SOFA - Topic: [SOLVED] Qt version issues on Windows. SOFA - Topic: [SOLVED] Qt version issues on,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:371367,access,accessible-in-sofa,371367,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['access'],['accessible-in-sofa']
Security,"::CompressedRowSparseMatrixMechanical< MReal >, and sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >. ◆ blocAdd(). template<class T > . void sofa::linearalgebra::BaseMatrix::blocAdd ; (; Index ; i, . Index ; j, . const T * ; buffer . ). inline . Shortcut for blocCreate(i,j).add(buffer) . ◆ blocCreate(). virtual BlockAccessor sofa::linearalgebra::BaseMatrix::blocCreate ; (; Index ; i, . Index ; j . ). inlinevirtual . Get write access to a block, possibly creating it. . ◆ blocElements(). template<class T > . const T* sofa::linearalgebra::BaseMatrix::blocElements ; (; Index ; i, . Index ; j, . T * ; buffer . ); const. inline . Shortcut for blocGet(i,j).elements(buffer) . ◆ blocGet(). virtual BlockConstAccessor sofa::linearalgebra::BaseMatrix::blocGet ; (; Index ; i, . Index ; j . ); const. inlinevirtual . Get read access to a block. . ◆ blocGetW(). virtual BlockAccessor sofa::linearalgebra::BaseMatrix::blocGetW ; (; Index ; i, . Index ; j . ). inlinevirtual . Get write access to a block. . ◆ blocSet(). template<class T > . void sofa::linearalgebra::BaseMatrix::blocSet ; (; Index ; i, . Index ; j, . const T * ; buffer . ). inline . Shortcut for blocCreate(i,j).set(buffer) . ◆ bRowBegin(). virtual ColBlockConstIterator sofa::linearalgebra::BaseMatrix::bRowBegin ; (; Index ; ib); const. inlinevirtual . Get the iterator corresponding to the beginning of the given row of blocks. ; Reimplemented in sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, and sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >. ◆ bRowEnd(). virtual ColBlockConstIterator sofa::linearalgebra::BaseMatrix::bRowEnd ; (; Index ; ib); const. inlinevirtual . Get the iterator corresponding to the end of the given row of blocks. ; Reimplemented in sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:29726,access,access,29726,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,1,['access'],['access']
Security,"::UniformMass< DataTypes >, sofa::component::mass::MeshMatrixMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, and sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >. ◆ addGravityToV() [2/2]. template<class DataTypes > . void sofa::core::behavior::Mass< DataTypes >::addGravityToV ; (; const MechanicalParams * ; mparams, . MultiVecDerivId ; vid . ). overridevirtual . perform v += dt*g operation. Used if mass wants to added G separately from the other forces to v. ; Implements sofa::core::behavior::BaseMass. ◆ addKToMatrix(). template<class DataTypes > . void sofa::core::behavior::Mass< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). inlineoverridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the same large matrix. Each object adds its contribution to a different section of the matrix. That is why, an offset is used to identify where in the matrix the force field must start adding its contribution. ; kFactstiffness factor that needs to be multiplied to each matrix entry. ; offsetStarting index of the submatrix to fill in the global matrix. . Reimplemented from sofa::core::behavior::ForceField< DataTypes >. ◆ addMBKdx(). template<class DataTypes > . void sofa::core::behavior::Mass< DataTypes >::addMBKdx ; (; const MechanicalParams * ; mparams, . MultiVecDerivId ; dfId . ). overridevirtual . Accumulate the contribution of M, B, and/or K matrices multiplied by the dx vector with the given coefficients.; This method ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mass.html:25045,access,access,25045,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mass.html,1,['access'],['access']
Security,"::mechanicalvisitor::MechanicalPropagateOnlyPositionAndVelocityVisitor:. [legend]; Detailed Description; Propagate positions and velocities to all the levels of the hierarchy. At each level, the mappings form the parent to the child is applied. After the execution of this action, all the (mapped) degrees of freedom are consistent with the independent degrees of freedom. This action is typically applied after time integration of the independent degrees of freedom.; Note that this visitor only propagate through the mappings, and does not apply projective constraints as was previously done by MechanicalPropagatePositionAndVelocityVisitor. Use MechanicalProjectPositionAndVelocityVisitor before this visitor if projection is needed. . Public Attributes; SReal currentTime;  ; sofa::core::MultiVecCoordId x;  ; sofa::core::MultiVecDerivId v;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateOnlyPositionAndVelocityVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecCoordId x=sofa::core::VecId::position(), sofa::core::MultiVecDerivId v=sofa::core::VecId::velocity());  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; const char * getClassName () const override;  ; std::string getInfos () const overrid",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html:1481,access,access,1481,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_velocity_visitor.html,1,['access'],['access']
Security,"::string >; MyTData * Tdata;  ;  Protected Attributes inherited from sofa::gui::qt::DataWidget; core::objectmodel::BaseData * baseData;  ; bool dirty;  ; int counter;  ; bool m_isFilled;  tell if DataWidget has been filled from Data true by default More...;  ; bool m_toFill;  bool to warn action is needed to fill Data, false by default More...;  . Public Member Functions;  DataFileNameWidget (QWidget *parent, const char *name, core::objectmodel::Data< std::string > *data);  ; virtual bool createWidgets ();  ; virtual void setDataReadOnly (bool readOnly);  This method is called after createWidgets to configure whether the created widgets should be read-only. More...;  ;  Public Member Functions inherited from sofa::gui::qt::TDataWidget< std::string >;  TDataWidget (QWidget *parent, const char *name, MyTData *d);  ; sofa::core::objectmodel::Data< std::string > * getData ();  ; const sofa::core::objectmodel::Data< std::string > * getData () const;  ; virtual void setData (MyTData *d);  ; virtual void setData (MyData *d);  ;  Public Member Functions inherited from sofa::gui::qt::DataWidget;  DataWidget (QWidget *parent, const char *name, MyData *d);  ;  ~DataWidget () override;  ; virtual void setData (MyData *d);  ; const core::objectmodel::BaseData * getBaseData () const;  BaseData pointer accessor function. More...;  ; core::objectmodel::BaseData * getBaseData ();  ; void updateVisibility ();  ; bool isDirty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  . Protected Member Functions; virtual void readFromData ();  Implements how update the widgets knowing the data value. More...;  ; virtual void writeToData ();  Implements how to update the data, knowing the widget value. More...;  . Pro",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_file_name_widget.html:1876,access,accessor,1876,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_file_name_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_file_name_widget.html,1,['access'],['accessor']
Security,":DiagonalVelocityDampingForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::DiagonalVelocityDampingForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). inlineoverridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the same large matrix. Each object adds its contribution to a different section of the matrix. That is why, an offset is used to identify where in the matrix the force field must start adding its contribution. ; kFactstiffness factor that needs to be multiplied to each matrix entry. ; offsetStarting index of the submatrix to fill in the global matrix. . Reimplemented from sofa::core::behavior::ForceField< DataTypes >. ◆ buildDampingMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::DiagonalVelocityDampingForceField< DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; matrix). overridevirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ buildStiffnessMatrix(). templ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_diagonal_velocity_damping_force_field.html:21261,access,access,21261,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_diagonal_velocity_damping_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_diagonal_velocity_damping_force_field.html,1,['access'],['access']
Security,":EdgePressureForceField< DataTypes >::p_showForces. protected . ◆ pressure. template<class DataTypes > . sofa::core::objectmodel::RenamedData<Deriv> sofa::component::mechanicalload::EdgePressureForceField< DataTypes >::pressure. protected . Constructor details. ◆ EdgePressureForceField(). template<class DataTypes > . sofa::component::mechanicalload::EdgePressureForceField< DataTypes >::EdgePressureForceField. protected . ◆ ~EdgePressureForceField(). template<class DataTypes > . sofa::component::mechanicalload::EdgePressureForceField< DataTypes >::~EdgePressureForceField. protectedvirtual . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::mechanicalload::EdgePressureForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::mechanicalload::EdgePressureForceField< DataTypes >::addForce ; (; const sofa::core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ buildDampingMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::EdgePressureForceField< DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; )",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_edge_pressure_force_field.html:27055,access,access,27055,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_edge_pressure_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_edge_pressure_force_field.html,1,['access'],['access']
Security,":RestShapeSpringsForceField< DataTypes >::s_defaultActiveDirections = sofa::type::makeHomogeneousArray<bool, coord_total_size>(true). staticconstexprprotected . ◆ spatial_dimensions. template<class DataTypes > . constexpr sofa::Size sofa::component::solidmechanics::spring::RestShapeSpringsForceField< DataTypes >::spatial_dimensions = Coord::spatial_dimensions. staticconstexpr . Constructor details. ◆ RestShapeSpringsForceField(). template<class DataTypes > . sofa::component::solidmechanics::spring::RestShapeSpringsForceField< DataTypes >::RestShapeSpringsForceField. protected . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::RestShapeSpringsForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::RestShapeSpringsForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Add the forces. ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::spring::RestShapeSpringsForceField< DataTypes >::addKToMatrix ; (; const core::MechanicalParams * ; mparams, . const sofa::core::behavior::MultiMatrixAccessor * ; matrix . ). overridevirtual . Brings ForceField contribution to the global system stiffness matrix. ; Implements sofa::core::behavior::BaseForceField. ◆ buildDampingMatrix(). template<class DataT",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_rest_shape_springs_force_field.html:26465,access,access,26465,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_rest_shape_springs_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_rest_shape_springs_force_field.html,1,['access'],['access']
Security,":component::linearsolver::direct::PrecomputedLinearSolver< TMatrix, TVector >::addJMInvJt ; (; linearalgebra::BaseMatrix * ; result, . linearalgebra::BaseMatrix * ; J, . SReal ; fact . ). override . ◆ computeActiveDofs(). template<class TMatrix , class TVector > . template<class JMatrix > . void sofa::component::linearsolver::direct::PrecomputedLinearSolver< TMatrix, TVector >::computeActiveDofs ; (; JMatrix & ; J). protected . ◆ ComputeResult(). template<class TMatrix , class TVector > . template<class JMatrix > . void sofa::component::linearsolver::direct::PrecomputedLinearSolver< TMatrix, TVector >::ComputeResult ; (; linearalgebra::BaseMatrix * ; result, . JMatrix & ; J, . SReal ; fact . ). protected . ◆ GetCustomTemplateName(). template<class TMatrix , class TVector > . static const std::string sofa::component::linearsolver::direct::PrecomputedLinearSolver< TMatrix, TVector >::GetCustomTemplateName ; (; ). inlinestatic . Returns the sofa template name. By default the name of the c++ class signature is exposed... so we need to override that by implementing GetCustomTemplateName() function More details on the name customization infrastructure is in NameDecoder.h . ◆ getSystemMatrixInv(). template<class TMatrix , class TVector > . TBaseMatrix* sofa::component::linearsolver::direct::PrecomputedLinearSolver< TMatrix, TVector >::getSystemMatrixInv ; (; ). inline . ◆ invert(). template<class TMatrix , class TVector > . void sofa::component::linearsolver::direct::PrecomputedLinearSolver< TMatrix, TVector >::invert ; (; TMatrix & ; M). override . ◆ loadMatrix(). template<class TMatrix , class TVector > . void sofa::component::linearsolver::direct::PrecomputedLinearSolver< TMatrix, TVector >::loadMatrix ; (; TMatrix & ; M). ◆ loadMatrixWithCholeskyDecomposition(). template<class TMatrix , class TVector > . void sofa::component::linearsolver::direct::PrecomputedLinearSolver< TMatrix, TVector >::loadMatrixWithCholeskyDecomposition ; (; TMatrix & ; M). ◆ parse(). template<cl",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1direct_1_1_precomputed_linear_solver.html:7640,expose,exposed,7640,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1direct_1_1_precomputed_linear_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1direct_1_1_precomputed_linear_solver.html,1,['expose'],['exposed']
Security,":core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [14/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [15/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ getAnimate(). bool sofa::core::objectmodel::BaseContext::getAnimate ; (; ); const. virtual . Animation flag. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getDefault(). BaseContext * sofa::core::objectmodel::BaseContext::getDefault ; (; ). static . Get the default Context object, that contains the default values for all parameters and can be used when no local context is defined. . ◆ getDt(). SReal sofa::core::objectmodel::BaseContext::getDt ; (; ); const. virtual . Simulation timestep. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getGravity(). const BaseContext::Vec3 & sofa::core::objectmodel::BaseContext::getGravity ; (; ); const. virtual . Gravity in local coordinates. ; Gravity in the world coordinate system. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getMass(). behavior::BaseMass * sofa::core::objectmodel::BaseContext::getMass ; (; ); const. virtual . Mass. . ◆ getMechanicalState(). core::behavior:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:22979,access,access,22979,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['access'],['access']
Security,":istream & read (std::istream &in);  ; void fill (const T &value);  Sets every element to 'value'. More...;  ; void fastResize (Size n);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  Specialization for writing vectors of unsigned char. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  . Protected Member Functions; reference operator[] (Size n);  Read/write random access with regular index type, protected to force use of explicit Index. More...;  ; const_reference operator[] (Size n) const;  Read-only random access with regular index type, protected to force use of explicit Index. More...;  . Constructor details. ◆ vector_id() [1/7]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::vector_id ; (; ). inline . Basic constructor. . ◆ vector_id() [2/7]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::vector_id ; (; Size ; n, . const T & ; value . ). inline . Constructor. . ◆ vector_id() [3/7]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::vector_id ; (; int ; n, . const T & ; v",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:3483,access,access,3483,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,1,['access'],['access']
Security,":mechanicalvisitor::MechanicalVReallocVisitor< vtype > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype > Class Template Reference . #include <MechanicalVReallocVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype >:. [legend]; Detailed Description; template<sofa::core::VecType vtype>; class sofa::simulation::mechanicalvisitor::MechanicalVReallocVisitor< vtype >; Reserve an auxiliary vector identified by a symbolic constant. . Public Attributes; DestMultiVecId * v;  ; bool m_propagate;  ; bool m_interactionForceField;  ; const core::VecIdProperties & m_properties;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVReallocVisitor (const sofa::core::ExecParams *params, DestMultiVecId *v, bool interactionForceField=false, bool propagate=false, const core::VecIdProperties &properties={});  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; Result fwdMechanicalState (simulation::Node *node, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *node, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdInteractionForceField (simulation::Node *node, sofa::core::behavior::BaseInteractionForceField *ff) override;  Process all the InteractionForceField. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const overri",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html:1041,access,access,1041,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_realloc_visitor.html,1,['access'],['access']
Security,":objectmodel::RenamedData< Real > m_drawForceScale;  ; sofa::core::objectmodel::RenamedData< sofa::type::RGBAColor > m_drawForceColor;  ; sofa::core::objectmodel::RenamedData< Real > m_volumeAfterTC;  ; sofa::core::objectmodel::RenamedData< Real > m_surfaceAreaAfterTC;  ; Data< Real > d_p0;  IN: Rest pressure when V = V0. More...;  ; Data< Real > d_B;  IN: Bulk modulus (resistance to uniform compression) More...;  ; Data< Real > d_gamma;  IN: Bulk modulus (resistance to uniform compression) More...;  ; Data< Real > d_injectedVolume;  IN: Injected (or extracted) volume since the start of the simulation. More...;  ; Data< Real > d_maxInjectionRate;  IN: Maximum injection rate (volume per second) More...;  ; Data< Real > d_initialVolume;  OUT: Initial volume, as computed from the surface rest position. More...;  ; Data< Real > d_currentInjectedVolume;  OUT: Current injected (or extracted) volume (taking into account maxInjectionRate) More...;  ; Data< Real > d_v0;  OUT: Rest volume (as computed from initialVolume + injectedVolume) More...;  ; Data< Real > d_currentVolume;  OUT: Current volume, as computed from the last surface position. More...;  ; Data< Real > d_currentPressure;  OUT: Current pressure, as computed from the last surface position. More...;  ; Data< Real > d_currentStiffness;  OUT: dP/dV at current volume and pressure. More...;  ; Data< SeqTriangles > d_pressureTriangles;  OUT: list of triangles where a pressure is applied (mesh triangles + tessellated quads) More...;  ; Data< Real > d_initialSurfaceArea;  OUT: Initial surface area, as computed from the surface rest position. More...;  ; Data< Real > d_currentSurfaceArea;  OUT: Current surface area, as computed from the last surface position. More...;  ; Data< Real > d_drawForceScale;  DEBUG: scale used to render force vectors. More...;  ; Data< sofa::type::RGBAColor > d_drawForceColor;  DEBUG: color used to render force vectors. More...;  ; Data< Real > d_volumeAfterTC;  OUT: Volume after a topology chan",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html:3012,inject,injectedVolume,3012,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html,1,['inject'],['injectedVolume']
Security,":objectmodel::RenamedData<Coord> sofa::component::mechanicalload::SphereForceField< DataTypes >::sphereCenter. ◆ sphereRadius. template<class DataTypes > . sofa::core::objectmodel::RenamedData<Real> sofa::component::mechanicalload::SphereForceField< DataTypes >::sphereRadius. ◆ stiffness. template<class DataTypes > . sofa::core::objectmodel::RenamedData<Real> sofa::component::mechanicalload::SphereForceField< DataTypes >::stiffness. Constructor details. ◆ SphereForceField(). template<class DataTypes > . sofa::component::mechanicalload::SphereForceField< DataTypes >::SphereForceField. protected . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::mechanicalload::SphereForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::mechanicalload::SphereForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::SphereForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . un",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_sphere_force_field.html:23310,access,access,23310,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_sphere_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_sphere_force_field.html,1,['access'],['access']
Security,":quadList. ◆ quadPressureMap. template<class DataTypes > . sofa::core::objectmodel::RenamedData<sofa::type::vector<QuadPressureInformation> > sofa::component::mechanicalload::QuadPressureForceField< DataTypes >::quadPressureMap. protected . Constructor details. ◆ QuadPressureForceField(). template<class DataTypes > . sofa::component::mechanicalload::QuadPressureForceField< DataTypes >::QuadPressureForceField. protected . ◆ ~QuadPressureForceField(). template<class DataTypes > . sofa::component::mechanicalload::QuadPressureForceField< DataTypes >::~QuadPressureForceField. protectedvirtual . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::mechanicalload::QuadPressureForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::mechanicalload::QuadPressureForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix() [1/2]. template<class DataTypes > . void sofa::component::mechanicalload::QuadPressureForceField< DataTypes >::addKToMatrix ; (; const core::MechanicalParams * ; , . const sofa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_quad_pressure_force_field.html:24971,access,access,24971,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_quad_pressure_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_quad_pressure_force_field.html,1,['access'],['access']
Security,":solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::updateMatrix. protected . Constructor details. ◆ FastTetrahedralCorotationalForceField(). template<class DataTypes > . sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::FastTetrahedralCorotationalForceField. ◆ ~FastTetrahedralCorotationalForceField(). template<class DataTypes > . sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::~FastTetrahedralCorotationalForceField. virtual . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::addDForce ; (; const sofa::core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::addForce ; (; const sofa::core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::addKToM",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_fast_tetrahedral_corotational_force_field.html:28760,access,access,28760,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_fast_tetrahedral_corotational_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_fast_tetrahedral_corotational_force_field.html,1,['access'],['access']
Security,":topology::container::dynamic::QuadSetTopologyContainer::initTopology ; (; ). Dynamic Topology API; Method called by component Init method. Will create all the topology neighborhood buffers and call See alsoEdgeSetTopologyContainer::initTopology() . ◆ isQuadTopologyDirty(). const bool& sofa::component::topology::container::dynamic::QuadSetTopologyContainer::isQuadTopologyDirty ; (; ). inlineprotected . ◆ linkTopologyHandlerToData(). bool sofa::component::topology::container::dynamic::QuadSetTopologyContainer::linkTopologyHandlerToData ; (; core::topology::TopologyHandler * ; topologyHandler, . sofa::geometry::ElementType ; elementType . ). overridevirtual . \ brief Generic function to link potential data (related to a type of element) with a topologyHandler ; Reimplemented from sofa::component::topology::container::dynamic::EdgeSetTopologyContainer. ◆ setQuadTopologyToDirty(). void sofa::component::topology::container::dynamic::QuadSetTopologyContainer::setQuadTopologyToDirty ; (; ). protected . Use a specific boolean See alsom_quadTopologyDirty in order to know if topology Data is dirty or not. Set/Get function access to this boolean . ◆ SOFA_CLASS(). sofa::component::topology::container::dynamic::QuadSetTopologyContainer::SOFA_CLASS ; (; QuadSetTopologyContainer ; , . EdgeSetTopologyContainer ;  . ). ◆ unlinkTopologyHandlerToData(). bool sofa::component::topology::container::dynamic::QuadSetTopologyContainer::unlinkTopologyHandlerToData ; (; core::topology::TopologyHandler * ; topologyHandler, . sofa::geometry::ElementType ; elementType . ). overridevirtual . \ brief Generic function to link potential data (related to a type of element) with a topologyHandler ; Reimplemented from sofa::component::topology::container::dynamic::EdgeSetTopologyContainer. Related details. ◆ QuadSetTopologyModifier. friend class QuadSetTopologyModifier. friend . sofacomponenttopologycontainerdynamicQuadSetTopologyContainer; Generated on Mon Nov 11 2024 03:10:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_topology_container.html:51378,access,access,51378,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_topology_container.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_topology_container.html,1,['access'],['access']
Security,":vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator()() [2/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n); const. inline . Read-only random access, with explicit Index. . ◆ operator[]() [1/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator[]() [2/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Index ; n); const. inline . Read-only random access. . ◆ operator[]() [3/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Size ; n). inlineprotected . Read/write random access with regular index type, protected to force use of explicit Index. . ◆ operator[]() [4/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Size ; n); const. inlineprotected . Read-only random access with regular index type, protected to force use of explicit Index. . ◆ push_back(). template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . Index sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::push_back ; (; const_reference ; v). inline . sofahelpervector_id; Generated on Mon Nov 11 ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:7321,access,access,7321,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,1,['access'],['access']
Security,"; ; /*! Truncated class, inheritance relation is hidden */; class Truncated : public Invisible { };; ; /* Class not documented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A dark blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the pointed class or struct is accessible. . A yellow dashed arrow denotes a relation between a template instance and the template class it was instantiated from. The arrow is labelled with the template parameters of the instance. . Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html:2029,access,accessible,2029,api/master/sofa/html/graph_legend.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/graph_legend.html,1,['access'],['accessible']
Security,"; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const T r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, T defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr T & x () noexcept;  Special access to first element. More...;  ; constexpr const T & x () const noexcept;  Special const access to first element. More...;  ; constexpr T & y () noexcept;  Special access to second element. More...;  ; constexpr const T & y () const noexcept;  Special const access to second element. More...;  ; constexpr T & z () noexcept;  Special access to third element. More...;  ; constexpr const T & z () const noexcept;  Special const access to third element. More...;  ; constexpr T & w () noexcept;  Special access to fourth element. More...;  ; constexpr const T & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const T r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const T &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (T r) noexcept;  Sets every element to r. More...;  ; constexpr T & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const T & operator() (Size i) const noexcept;  Const",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html:2313,access,access,2313,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,1,['access'],['access']
Security,"; f, . const Vector & ; p, . Index ; elementIndex . ). protected . ◆ accumulateForcePolar(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >::accumulateForcePolar ; (; Vector & ; f, . const Vector & ; p, . Index ; elementIndex . ). protected . ◆ accumulateForceSmall(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >::accumulateForceSmall ; (; Vector & ; f, . const Vector & ; p, . Index ; elementIndex . ). protected . ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >::addKToMatrix ; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedral_corotational_f_e_m_force_field.html:34468,access,access,34468,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedral_corotational_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedral_corotational_f_e_m_force_field.html,1,['access'],['access']
Security,"; void parseFieldsSizeLinks (const std::map< std::string, std::string * > &str, Data< unsigned int > &size);  ; void resize (const unsigned int size);  ;  Public Member Functions inherited from sofa::type::vector< LinkType * >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const LinkType * &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< LinkType *, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< LinkType * > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< LinkType *, Alloc > &&v);  Move constructor. More...;  ;  vector (typename vector< LinkType * >::const_iterator first, typename vector< LinkType * >::const_iterator last);  Constructor. More...;  ; vector & operator= (const std::vector< LinkType *, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< LinkType *, Alloc > &&v);  Move assignment operator. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. More...;  ; std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  Specialization for writing vectors of unsigned char. More...;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in); ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_vector_links.html:2172,access,access,2172,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_vector_links.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_vector_links.html,1,['access'],['access']
Security,";  Multiply the transposed matrix by double vector v and add the result in vector result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html:8592,access,access,8592,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_rotation_matrix.html,1,['access'],['access']
Security,";  Specialization for reading strings. More...;  ; bool read (const std::string &str);  Specialization for reading booleans. More...;  ; Simple edition and retrieval API; virtual T * beginEdit ();  ; virtual T * beginWriteOnly ();  ; virtual void endEdit ();  ; void setValue (const T &value);  ; const T & getValue () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:5249,access,access,5249,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,1,['access'],['access']
Security,"< (std::ostream &out, const TVecId &v);  . Additional Inherited Members;  Public Attributes inherited from sofa::core::BaseVecId; VecType type;  ; unsigned int index;  ;  Protected Member Functions inherited from sofa::core::BaseVecId;  BaseVecId (VecType t, unsigned int i);  . Constructor details. ◆ TVecId() [1/5]. template<VecType vtype, VecAccess vaccess> . sofa::core::TVecId< vtype, vaccess >::TVecId ; (; ). inline . ◆ TVecId() [2/5]. template<VecType vtype, VecAccess vaccess> . sofa::core::TVecId< vtype, vaccess >::TVecId ; (; unsigned int ; i). inline . ◆ TVecId() [3/5]. template<VecType vtype, VecAccess vaccess> . sofa::core::TVecId< vtype, vaccess >::TVecId ; (; const TVecId< vtype, vaccess > & ; v). inline . Copy constructor. . ◆ TVecId() [4/5]. template<VecType vtype, VecAccess vaccess> . template<VecAccess vaccess2> . sofa::core::TVecId< vtype, vaccess >::TVecId ; (; const TVecId< vtype, vaccess2 > & ; v). inline . Copy from another VecId, possibly with another type of access, with the constraint that the access must be compatible (i.e. cannot create a write-access VecId from a read-only VecId. . ◆ TVecId() [5/5]. template<VecType vtype, VecAccess vaccess> . template<VecAccess vaccess2> . sofa::core::TVecId< vtype, vaccess >::TVecId ; (; const TVecId< V_ALL, vaccess2 > & ; v). inlineexplicit . Function details. ◆ getGroup(). template<VecType vtype, VecAccess vaccess> . std::string sofa::core::TVecId< vtype, vaccess >::getGroup ; (; ); const. inline . ◆ getName(). template<VecType vtype, VecAccess vaccess> . std::string sofa::core::TVecId< vtype, vaccess >::getName ; (; ); const. inline . ◆ isNull(). template<VecType vtype, VecAccess vaccess> . bool sofa::core::TVecId< vtype, vaccess >::isNull ; (; ); const. inline . ◆ null(). template<VecType vtype, VecAccess vaccess> . static TVecId sofa::core::TVecId< vtype, vaccess >::null ; (; ). inlinestatic . ◆ operator!=(). template<VecType vtype, VecAccess vaccess> . template<VecType vtype2, VecAccess vaccess2> . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_t_vec_id.html:2824,access,access,2824,api/master/sofa/html/classsofa_1_1core_1_1_t_vec_id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_t_vec_id.html,2,['access'],['access']
Security,"< DataTypes >::matS. ◆ mState. template<class DataTypes > . core::behavior::MechanicalState<DataTypes>* sofa::component::solidmechanics::spring::AngularSpringForceField< DataTypes >::mState. protected . ◆ springColor. template<class DataTypes > . sofa::core::objectmodel::RenamedData<type::RGBAColor> sofa::component::solidmechanics::spring::AngularSpringForceField< DataTypes >::springColor. Constructor details. ◆ AngularSpringForceField(). template<class DataTypes > . sofa::component::solidmechanics::spring::AngularSpringForceField< DataTypes >::AngularSpringForceField. protected . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::AngularSpringForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::AngularSpringForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Add the forces. ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::spring::AngularSpringForceField< DataTypes >::addKToMatrix ; (; const core::MechanicalParams * ; mparams, . const sofa::core::behavior::MultiMatrixAccessor * ; matrix . ). overridevirtual . Brings ForceField contribution to the global system stiffness matrix. ; Implements sofa::core::behavior::BaseForceField. ◆ buildDampingMatrix(). template<class DataTypes >",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_angular_spring_force_field.html:22998,access,access,22998,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_angular_spring_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_angular_spring_force_field.html,1,['access'],['access']
Security,"< DataTypes >::~HexahedralFEMForceField. protectedvirtual . Function details. ◆ accumulateForceLarge(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >::accumulateForceLarge ; (; WDataRefVecDeriv & ; f, . RDataRefVecCoord & ; p, . const int ; i . ). protectedvirtual . ◆ accumulateForcePolar(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >::accumulateForcePolar ; (; WDataRefVecDeriv & ; f, . RDataRefVecCoord & ; p, . const int ; i . ). protectedvirtual . ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >.; Reimplemented in sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >.; Reimplemented in sofa::component::solidmechanics::fem::elastic::Hex",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field.html:26069,access,access,26069,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field.html,1,['access'],['access']
Security,"<class TMatrix > ; void copyLowerNonZeros (TMatrix &M, bool keepEmptyRows=false);  ; void copyUpperNonSmall (Matrix &M, const Real ref, bool keepEmptyRows=false);  ; void copyLowerNonSmall (Matrix &M, const Real ref, bool keepEmptyRows=false);  ; static bool nonzeros (Index, Index, Block &val, const Real);  ; static bool nonsmall (Index, Index, Block &val, const Real ref);  ; static bool upper (Index i, Index j, Block &val, const Real);  ; static bool lower (Index i, Index j, Block &val, const Real);  ; static bool upper_nonzeros (Index i, Index j, Block &val, const Real ref);  ; static bool lower_nonzeros (Index i, Index j, Block &val, const Real ref);  ; static bool upper_nonsmall (Index i, Index j, Block &val, const Real ref);  ; static bool lower_nonsmall (Index i, Index j, Block &val, const Real ref);  . Virtual iterator classes and methods; virtual BlockConstAccessor blockGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blockGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blockCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const override;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const override;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const override;  Get the iterators corresponding to the beginning and end of the given row of blocks. More...;  ; virtual RowBlockConstIterator bRowsBegin () const override;  Get the iterator corresponding to the beginning of the rows of blocks. More...;  ; virtual RowBlockConstIterator bRowsEnd () const override;  Get the iterator corresponding to the end of the rows of blocks. More...;  ; virtual std::pair< RowBlockConstIterator,",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:25590,access,access,25590,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,1,['access'],['access']
Security,"<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const ValueType &value) noexcept",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:7586,access,access,7586,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,2,['access'],['access']
Security,"= ; (; const RigidDeriv< 2, real2 > & ; c). inlineconstexpr . ◆ operator=() [2/3]. template<typename real > . template<typename real2 > . constexpr void sofa::defaulttype::RigidDeriv< 2, real >::operator= ; (; const type::Vec< 2, real2 > & ; v). inlineconstexpr . ◆ operator=() [3/3]. template<typename real > . template<typename real2 > . constexpr void sofa::defaulttype::RigidDeriv< 2, real >::operator= ; (; const type::Vec< 3, real2 > & ; v). inlineconstexpr . ◆ operator==(). template<typename real > . constexpr bool sofa::defaulttype::RigidDeriv< 2, real >::operator== ; (; const RigidDeriv< 2, real > & ; b); const. inlineconstexpr . ◆ operator[]() [1/2]. template<typename real > . constexpr real& sofa::defaulttype::RigidDeriv< 2, real >::operator[] ; (; Size ; i). inlineconstexpr . Access to i-th element. . ◆ operator[]() [2/2]. template<typename real > . constexpr const real& sofa::defaulttype::RigidDeriv< 2, real >::operator[] ; (; Size ; i); const. inlineconstexpr . Const access to i-th element. . ◆ ptr() [1/2]. template<typename real > . constexpr real* sofa::defaulttype::RigidDeriv< 2, real >::ptr ; (; ). inlineconstexpr . ◆ ptr() [2/2]. template<typename real > . constexpr const real* sofa::defaulttype::RigidDeriv< 2, real >::ptr ; (; ); const. inlineconstexpr . ◆ size(). template<typename real > . static constexpr Size sofa::defaulttype::RigidDeriv< 2, real >::size ; (; ). inlinestaticconstexpr . ◆ velocityAtRotatedPoint(). template<typename real > . constexpr Vec2 sofa::defaulttype::RigidDeriv< 2, real >::velocityAtRotatedPoint ; (; const Vec2 & ; p); const. inlineconstexpr . Velocity at point p, where p is the offset from the origin of the frame, given in the same coordinate system as the velocity of the origin. . Related details. ◆ operator<<. template<typename real > . std::ostream& operator<< ; (; std::ostream & ; out, . const RigidDeriv< 2, real > & ; v . ). friend . write to an output stream . ◆ operator>>. template<typename real > . std::istream& op",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_rigid_deriv_3_012_00_01real_01_4.html:9027,access,access,9027,api/master/sofa/html/classsofa_1_1defaulttype_1_1_rigid_deriv_3_012_00_01real_01_4.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_rigid_deriv_3_012_00_01real_01_4.html,1,['access'],['access']
Security,"= ; (; const RigidDeriv< 3, real2 > & ; c). inlineconstexpr . ◆ operator=() [2/3]. template<typename real > . template<typename real2 > . constexpr void sofa::defaulttype::RigidDeriv< 3, real >::operator= ; (; const type::Vec< 3, real2 > & ; v). inlineconstexpr . ◆ operator=() [3/3]. template<typename real > . template<typename real2 > . constexpr void sofa::defaulttype::RigidDeriv< 3, real >::operator= ; (; const type::Vec< 6, real2 > & ; v). inlineconstexpr . ◆ operator==(). template<typename real > . constexpr bool sofa::defaulttype::RigidDeriv< 3, real >::operator== ; (; const RigidDeriv< 3, real > & ; b); const. inlineconstexpr . ◆ operator[]() [1/2]. template<typename real > . constexpr real& sofa::defaulttype::RigidDeriv< 3, real >::operator[] ; (; Size ; i). inlineconstexpr . Access to i-th element. . ◆ operator[]() [2/2]. template<typename real > . constexpr const real& sofa::defaulttype::RigidDeriv< 3, real >::operator[] ; (; Size ; i); const. inlineconstexpr . Const access to i-th element. . ◆ ptr() [1/2]. template<typename real > . constexpr real* sofa::defaulttype::RigidDeriv< 3, real >::ptr ; (; ). inlineconstexpr . ◆ ptr() [2/2]. template<typename real > . constexpr const real* sofa::defaulttype::RigidDeriv< 3, real >::ptr ; (; ); const. inlineconstexpr . ◆ size(). template<typename real > . static constexpr Size sofa::defaulttype::RigidDeriv< 3, real >::size ; (; ). inlinestaticconstexpr . ◆ velocityAtRotatedPoint(). template<typename real > . constexpr Vec3 sofa::defaulttype::RigidDeriv< 3, real >::velocityAtRotatedPoint ; (; const Vec3 & ; p); const. inlineconstexpr . Velocity at point p, where p is the offset from the origin of the frame, given in the same coordinate system as the velocity of the origin. . Related details. ◆ operator<<. template<typename real > . std::ostream& operator<< ; (; std::ostream & ; out, . const RigidDeriv< 3, real > & ; v . ). friend . write to an output stream . ◆ operator>>. template<typename real > . std::istream& op",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_rigid_deriv_3_013_00_01real_01_4.html:9764,access,access,9764,api/master/sofa/html/classsofa_1_1defaulttype_1_1_rigid_deriv_3_013_00_01real_01_4.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_rigid_deriv_3_013_00_01real_01_4.html,1,['access'],['access']
Security,"> &a, const Vec< 3, T > &b);  Specific constructor for 6-elements vectors, taking two 3-elements vectors. More...;  ; constexpr Vec (const Vec< N-1, T > &v, T r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< T, N > &p) noexcept;  ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const T r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, T defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr T & x () noexcept;  Special access to first element. More...;  ; constexpr const T & x () const noexcept;  Special const access to first element. More...;  ; constexpr T & y () noexcept;  Special access to second element. More...;  ; constexpr const T & y () const noexcept;  Special const access to second element. More...;  ; constexpr T & z () noexcept;  Special access to third element. More...;  ; constexpr const T & z () const noexcept;  Special const access to third element. More...;  ; constexpr T & w () noexcept;  Special access to fourth element. More...;  ; constexpr const T & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const T r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; con",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html:1975,access,access,1975,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,1,['access'],['access']
Security,"> . Container* sofa::simulation::Node::getNodeObjects ; (; Container * ; result). inline . Returns a list of object of type passed as a parameter. . ◆ getObject() [1/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridepure virtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObject() [2/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridepure virtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObject() [3/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. inlineoverridevirtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getObject() [4/4]. core::objectmodel::BaseObject * sofa::simulation::Node::getObject ; (; const std::string & ; name); const. Find an object given its name. . ◆ getObjects() [1/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:42078,access,access,42078,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,1,['access'],['access']
Security,">() ) { ... } . ◆ getNodeObjects() [2/4]. template<class Container > . Container& sofa::simulation::Node::getNodeObjects ; (; Container & ; result). inline . Returns a list of object of type passed as a parameter. . ◆ getNodeObjects() [3/4]. template<class Object , class Container > . void sofa::simulation::Node::getNodeObjects ; (; Container * ; list). inline . List all objects of this node deriving from a given class. . ◆ getNodeObjects() [4/4]. template<class Container > . Container* sofa::simulation::Node::getNodeObjects ; (; Container * ; result). inline . Returns a list of object of type passed as a parameter. . ◆ getObject() [1/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridepure virtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObject() [2/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridepure virtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObject() [3/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. inlineoverridevirtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:41577,access,access,41577,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,1,['access'],['access']
Security,">. Inheritance diagram for sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >::Mat3:. [legend]. Public Member Functions; Deriv operator* (const Deriv &v);  ; Deriv transposeMultiply (const Deriv &v);  ;  Public Member Functions inherited from sofa::type::fixed_array< Deriv, 3 >; constexpr fixed_array ();  ; constexpr fixed_array (value_type r1) noexcept;  Specific constructor for 1-element vectors. More...;  ; constexpr fixed_array (ArgsT &&... r) noexcept;  ; constexpr iterator begin () noexcept;  ; constexpr const_iterator begin () const noexcept;  ; constexpr const_iterator cbegin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr const_iterator cend () const noexcept;  ; constexpr reference operator[] (size_type i);  ; constexpr const_reference operator[] (size_type i) const;  ; constexpr Deriv & get () &noexcept;  ; constexpr const Deriv & get () const &noexcept;  ; constexpr Deriv && get () &&noexcept;  ; constexpr const Deriv && get () const &&noexcept;  ; constexpr reference at (size_type i);  ; constexpr const_reference at (size_type i) const;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; void swap (fixed_array< Deriv, N > &y);  ; constexpr const Deriv * data () const noexcept;  ; constexpr const Array & array () const noexcept;  direct access to array More...;  ; constexpr Array & array () noexcept;  direct access to array More...;  ; constexpr fixed_array< Deriv, N > & operator= (const fixed_array< T2, N > &rhs) noexcept;  ; constexpr void assign (const Deriv &value) noexcept;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::fixed_array< Deriv, 3 >; Deriv elems [N];  ;  Static Public Member Functions inherited from sofa::type::fixed_array< Deriv, 3 >; static constexpr size_type size () noexcept;  ; static b",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field_1_1_mat3.html:1909,access,access,1909,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field_1_1_mat3.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field_1_1_mat3.html,1,['access'],['access']
Security,"Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Friends; class BaseNode;  BaseNode can set the context of its own objects. More...;  . Context accessors; typedef sofa::core::objectmodel::MultiLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK|BaseLink::FLAG_STRONGLINK > LinkSlaves;  ; typedef LinkSlaves::Container VecSlaves;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  . events; Methods related to Event processing . Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  . internalupdate; Methods related to tracking of data and the internal update . void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  . control; Basic control . void parse (BaseObjectDescription *a",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:9703,access,accessors,9703,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,1,['access'],['accessors']
Security,"BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More...;  ; void addAlias (BaseData *field, const char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Accessors; Types and functions to ease data access . typedef helper::ReadAccessor< Data< Real > > ReadReal;  ; typedef helper::WriteAccessor< Data< Real > > WriteReal;  ; typedef helper::ReadAccessor< Data< VecReal > > ReadVecReal;  ; typedef helper::WriteAccessor< Data< VecReal > > WriteVecReal;  ; typedef helper::ReadAccessor< Data< Coord > > ReadCoord;  ; typedef helper::WriteAccessor< Data< Coord > > WriteCoord;  ; typedef helper::WriteOnlyAccessor< Data< Coord > > WriteOnlyCoord;  ; typedef helper::ReadAccessor< Data< VecCoord > > ReadVecCoord;  ; typedef helper::WriteAccessor< Data< VecCoord > > WriteVecCoord;  ; typedef helper::WriteOnlyAccessor< Data< VecCoord > > WriteOnlyVecCoord;  ; typedef helper::ReadAccessor< Data< Deriv > > ReadDeriv;  ; typedef helper::WriteAccessor< Data< Deriv > > WriteDeriv;  ; typedef helper::WriteOnlyAccessor< Data< Deriv > > WriteOnlyDeriv;  ; typedef helper::ReadAccessor< Data< VecDeriv > > ReadVecDeriv;  ; typedef helper::WriteAccessor< Data< VecDeriv > > WriteVecDeriv; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_state.html:11583,access,access,11583,api/master/sofa/html/classsofa_1_1core_1_1_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_state.html,1,['access'],['access']
Security,"C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr Line& sofa::type::Mat< L, C, real >::w ; (; ). inlineconstexprnoexcept . Special access to fourth line. . ◆ x() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr const Line& sofa::type::Mat< L, C, real >::x ; (; ); const. inlineconstexprnoexcept . Special access to first line (read-only). . ◆ x() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr Line& sofa::type::Mat< L, C, real >::x ; (; ). inlineconstexprnoexcept . Special access to first line. . ◆ y() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr const Line& sofa::type::Mat< L, C, real >::y ; (; ); const. inlineconstexprnoexcept . Special access to second line (read-only). . ◆ y() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr Line& sofa::type::Mat< L, C, real >::y ; (; ). inlineconstexprnoexcept . Special access to second line. . ◆ z() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr const Line& sofa::type::Mat< L, C, real >::z ; (; ); const. inlineconstexprnoexcept . Special access to third line (read-only). . ◆ z() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr Line& sofa::type::Mat< L, C, real >::z ; (; ). inlineconstexprnoexcept . Special access to third line. . Related details. ◆ operator*. template<sofa::Size L, sofa::Size C, class real > . constexpr friend Mat<L,C,real> operator* ; (; real ; r, . const Mat< L, C, real > & ; m . ). friend . S",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:34030,access,access,34030,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,1,['access'],['access']
Security,"CPUMemoryManager<T>> . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::vector_id ; (; const std::vector< T > & ; x). inline . Constructor. . ◆ vector_id() [7/7]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::vector_id ; (; const_iterator ; first, . const_iterator ; last . ). inline . Constructor. . Function details. ◆ at() [1/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::at ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ at() [2/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::at ; (; Index ; n); const. inline . Read-only random access, with explicit Index. . ◆ operator()() [1/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator()() [2/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n); const. inline . Read-only random access, with explicit Index. . ◆ operator[]() [1/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator[]() [2/4]. template<class T , class TIndex , bool CheckIndices = false, class ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:6133,access,access,6133,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,1,['access'],['access']
Security,"Constructor from an array of values. More...;  ; constexpr void set (const T r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, T defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr T & x () noexcept;  Special access to first element. More...;  ; constexpr const T & x () const noexcept;  Special const access to first element. More...;  ; constexpr T & y () noexcept;  Special access to second element. More...;  ; constexpr const T & y () const noexcept;  Special const access to second element. More...;  ; constexpr T & z () noexcept;  Special access to third element. More...;  ; constexpr const T & z () const noexcept;  Special const access to third element. More...;  ; constexpr T & w () noexcept;  Special access to fourth element. More...;  ; constexpr const T & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const T r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const T &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (T r) noexcept;  Sets every element to r. More...;  ; constexpr T & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const T & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const T * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr T * ptr () noexcept;  Cast into an array of values. More...;  ; constexpr void getsub (const Size i, Vec< N2, T > &",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html:2575,access,access,2575,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,1,['access'],['access']
Security,"DataWidget; core::objectmodel::BaseData * baseData;  ; bool dirty;  ; int counter;  ; bool m_isFilled;  tell if DataWidget has been filled from Data true by default More...;  ; bool m_toFill;  bool to warn action is needed to fill Data, false by default More...;  . Public Member Functions;  VectorMaterialDataWidget (QWidget *parent, const char *name, Data< type::vector< Material > > *data);  ; virtual bool createWidgets ();  ; virtual void setDataReadOnly (bool readOnly);  This method is called after createWidgets to configure whether the created widgets should be read-only. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  ;  Public Member Functions inherited from sofa::gui::qt::TDataWidget< VectorMaterial >;  TDataWidget (QWidget *parent, const char *name, MyTData *d);  ; sofa::core::objectmodel::Data< VectorMaterial > * getData ();  ; const sofa::core::objectmodel::Data< VectorMaterial > * getData () const;  ; virtual void setData (MyTData *d);  ; virtual void setData (MyData *d);  ;  Public Member Functions inherited from sofa::gui::qt::DataWidget;  DataWidget (QWidget *parent, const char *name, MyData *d);  ;  ~DataWidget () override;  ; virtual void setData (MyData *d);  ; const core::objectmodel::BaseData * getBaseData () const;  BaseData pointer accessor function. More...;  ; core::objectmodel::BaseData * getBaseData ();  ; void updateVisibility ();  ; bool isDirty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  . Protected Member Functions; virtual void readFromData ();  The implementation of this method tells how the widget reads the value of the data. More...;  ; virtual void writeToData ();  . Protected Slots; void changeMaterial (int);  . Additional Inherited Members;  Static Public Member Functions inherited from ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1materialdatawidget__h_1_1_vector_material_data_widget.html:2187,access,accessor,2187,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1materialdatawidget__h_1_1_vector_material_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1materialdatawidget__h_1_1_vector_material_data_widget.html,1,['access'],['accessor']
Security,"DataWidget< DATA, WIDGET >:. [legend]. Protected Attributes; MyData * m_data;  ; MyWidget * m_widget;  ;  Protected Attributes inherited from sofa::gui::qt::DataWidget; core::objectmodel::BaseData * baseData;  ; bool dirty;  ; int counter;  ; bool m_isFilled;  tell if DataWidget has been filled from Data true by default More...;  ; bool m_toFill;  bool to warn action is needed to fill Data, false by default More...;  . Public Member Functions;  GenericDataWidget (QWidget *parent, const char *name, MyData *d);  ; virtual bool createWidgets ();  ; virtual void setDataReadOnly (bool readOnly);  This method is called after createWidgets to configure whether the created widgets should be read-only. More...;  ; virtual void readFromData ();  The implementation of this method tells how the widget reads the value of the data. More...;  ; virtual void writeToData ();  ;  Public Member Functions inherited from sofa::gui::qt::DataWidget;  DataWidget (QWidget *parent, const char *name, MyData *d);  ;  ~DataWidget () override;  ; virtual void setData (MyData *d);  ; const core::objectmodel::BaseData * getBaseData () const;  BaseData pointer accessor function. More...;  ; core::objectmodel::BaseData * getBaseData ();  ; void updateVisibility ();  ; bool isDirty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  . Static Public Member Functions; template<class RealObject > ; static RealObject * create (RealObject *, CreatorArgument &arg);  ;  Static Public Member Functions inherited from sofa::gui::qt::DataWidget; template<class T > ; static T * create (T *, const CreatorArgument &arg);  ; static DataWidget * CreateDataWidget (const DataWidget::CreatorArgument &dwarg);  . Additional Inherited Members;  Sig",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_generic_data_widget.html:1565,access,accessor,1565,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_generic_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_generic_data_widget.html,1,['access'],['accessor']
Security,"Direction dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; Parameters Setters; virtual void setDt (SReal);  Simulation timestep. More...;  ; virtual void setAnimate (bool);  Animation flag. More...;  ; virtual void setSleeping (bool);  Sleeping state of the context. More...;  ; virtual void setChangeSleepingState (bool);  Sleeping state change of the context. More...;  ; Variables Setters; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; Adding/Removing objects. Note that these methods can fail if the context doesn't support attached obj",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:7403,access,access,7403,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['access'],['access']
Security,"Direction dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void executeVisitor (simulation::Visitor *, bool precomputedOrder=false);  apply an action More...;  ; virtual void propagateEvent (const core::ExecParams *params, Eve",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:8499,access,access,8499,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,1,['access'],['access']
Security,"Direction dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void notifyAddSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyRemoveSlave (core::objectmodel::BaseObject *ma",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:22654,access,access,22654,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,2,['access'],['access']
Security,"E_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; std::ostream & write (std::ostream &os) const;  ;  Public Member Functions inherited from sofa::type::vector< T, type::CPUMemoryManager< T > >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ;  vector (typename vector< T >::const_iterator first, typename vector< T >::const_iterator last);  Constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< T, Alloc > &&v);  Move assignment operator. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. More...;  ; std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  Specialization for writing vectors of unsigned char. More...;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in); ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html:2349,access,access,2349,api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_s_vector.html,1,['access'],['access']
Security,"For example, the size of a fixed_array<fixed_array<int, 2>, 3> is 6, and those six elements are conceptually numbered from 0 to 5. This is relevant only if FixedSize() is true. I FixedSize() is false, the return value will be equivalent to the one of byteSize() ; Implements sofa::defaulttype::AbstractTypeInfo. ◆ size() [2/2]. sofa::Size sofa::defaulttype::NoTypeInfo::size ; (; const void * ; ); const. inlineoverridevirtual . The size of data, in number of iterable elements (For containers, that'll be the number of elements in the 1st dimension). For example, with type == ` ; Implements sofa::defaulttype::AbstractTypeInfo. ◆ Text(). bool sofa::defaulttype::NoTypeInfo::Text ; (; ); const. inlineoverridevirtual . True iff this type uses text values. ; Implements sofa::defaulttype::AbstractTypeInfo. ◆ type_info(). const std::type_info* sofa::defaulttype::NoTypeInfo::type_info ; (; ); const. inlineoverridevirtual . Get the type_info for this type. ; Implements sofa::defaulttype::AbstractTypeInfo. ◆ ValidInfo(). bool sofa::defaulttype::NoTypeInfo::ValidInfo ; (; ); const. inlineoverridevirtual . True iff the TypeInfo for this type contains valid information. A Type is considered ""Valid"" if there's at least one specialization of the ValueType ; Implements sofa::defaulttype::AbstractTypeInfo. ◆ ValueType(). const AbstractTypeInfo* sofa::defaulttype::NoTypeInfo::ValueType ; (; ); const. inlineoverridevirtual . Returns the TypeInfo for the type of the values accessible by the get*Value() functions. For example, if the type is fixed_array<fixed_array<int, 2> 3>, it returns the TypeInfo for int. . Implements sofa::defaulttype::AbstractTypeInfo. ◆ ZeroConstructor(). bool sofa::defaulttype::NoTypeInfo::ZeroConstructor ; (; ); const. inlineoverridevirtual . True iff the default constructor of this type is equivalent to setting the memory to 0. ; Implements sofa::defaulttype::AbstractTypeInfo. sofadefaulttypeNoTypeInfo; Generated on Mon Nov 11 2024 03:18:45 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_no_type_info.html:10590,access,accessible,10590,api/master/sofa/html/classsofa_1_1defaulttype_1_1_no_type_info.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_no_type_info.html,1,['access'],['accessible']
Security,"GL matrix defines the world coordinate system with respect to the camera. . ◆ getProjectionMatrix(). void sofa::core::visual::VisualParams::getProjectionMatrix ; (; double ; m[16]); const. inline . Get the projection matrix used to draw the scene. This OpenGL matrix defines the camera coordinate system with respect to the viewport, including perspective if any. . ◆ isSupported(). bool sofa::core::visual::VisualParams::isSupported ; (; unsigned int ; api); const. inline . ◆ pass() [1/2]. Pass& sofa::core::visual::VisualParams::pass ; (; ). inline . ◆ pass() [2/2]. const Pass& sofa::core::visual::VisualParams::pass ; (; ); const. inline . ◆ readV(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::visual::VisualParams::readV ; (; const S * ; state); const. inline . Read access to current velocity vector. . ◆ readX(). template<class S > . const Data<typename S::VecCoord>* sofa::core::visual::VisualParams::readX ; (; const S * ; state); const. inline . Read access to current position vector. . ◆ sceneBBox() [1/2]. sofa::type::BoundingBox& sofa::core::visual::VisualParams::sceneBBox ; (; ). inline . ◆ sceneBBox() [2/2]. const sofa::type::BoundingBox& sofa::core::visual::VisualParams::sceneBBox ; (; ); const. inline . ◆ setModelViewMatrix(). void sofa::core::visual::VisualParams::setModelViewMatrix ; (; const double ; m[16]). inline . Store the ModelView matrix used to draw the scene. This OpenGL matrix defines the world coordinate system with respect to the camera. . ◆ setProjectionMatrix(). void sofa::core::visual::VisualParams::setProjectionMatrix ; (; const double ; m[16]). inline . Store the projection matrix used to draw the scene. This OpenGL matrix defines the camera coordinate system with respect to the viewport, including perspective if any. . ◆ setSupported(). void sofa::core::visual::VisualParams::setSupported ; (; unsigned int ; api, . bool ; val = true . ). inline . ◆ setV() [1/3]. template<class StateSet > . VisualParams& sofa::core::visua",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_params.html:8439,access,access,8439,api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_params.html,1,['access'],['access']
Security,"InitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Friends; template<class DataTypes > ; class TetrahedronSetGeometryAlgorithms;  . Additional Inherited Members;  Protected Attributes inherited from sofa::component::topology::container::dynamic::TriangleSetTopologyModifier; Data< sofa::type::vector< TriangleID > > list_Out;  triangles with at least one null values. More...;  ;  Protected Attributes inherited from sofa::core::topology::TopologyModifier; TopologyContainer * m_topologyContainer;  Contains the actual topology data and give access to it (nature of these data heavily depends on the kind of topology). More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-cons",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_modifier.html:30486,access,access,30486,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_modifier.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_modifier.html,1,['access'],['access']
Security,"L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr real toReal () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr operator real () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr Mat< C, L, real > transposed () const noexcept;  Return the transpose of m. More...;  ; template<sofa::Size NbLine = L",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:5379,access,access,5379,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,2,['access'],['access']
Security,"MechanicalAddMBKdxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor Class Reference . #include <MechanicalAddMBKdxVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMBKdxVisitor:. [legend]; Detailed Description; Accumulate the product of the system matrix by a given vector. Typically used in implicit integration solved by a Conjugate Gradient algorithm. The current value of the dx vector is used. This action is typically called after a MechanicalPropagateDxAndResetForceVisitor. . Public Attributes; sofa::core::MultiVecDerivId res;  ; bool accumulate;  Accumulate everything back to the DOFs through the mappings. More...;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMBKdxVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, bool accumulate=true);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, sofa::core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState wh",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html:1061,access,access,1061,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_kdx_visitor.html,1,['access'],['access']
Security,"MechanicalParams::mFactorIncludingRayleighDamping ; (; SReal ; rayleighMass); const. inline . Returnsmfactor + bfactor*rayleighMass . ◆ operator=(). MechanicalParams * sofa::core::MechanicalParams::operator= ; (; const MechanicalParams & ; mparams). ◆ readDf(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::MechanicalParams::readDf ; (; const S * ; state); const. inline . Read access to current df vector (for implicit schemes) . ◆ readDx(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::MechanicalParams::readDx ; (; const S * ; state); const. inline . Read access to current dx vector (for implicit schemes) . ◆ readF(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::MechanicalParams::readF ; (; const S * ; state); const. inline . Read access to current force vector. . ◆ readV(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::MechanicalParams::readV ; (; const S * ; state); const. inline . Read access to current velocity vector. . ◆ readX(). template<class S > . const Data<typename S::VecCoord>* sofa::core::MechanicalParams::readX ; (; const S * ; state); const. inline . Read access to current position vector. . ◆ setBFactor(). MechanicalParams& sofa::core::MechanicalParams::setBFactor ; (; SReal ; v). inline . Set Damping matrix contributions factor (for implicit schemes) . ◆ setDf() [1/3]. template<class StateSet > . MechanicalParams& sofa::core::MechanicalParams::setDf ; (; const StateSet & ; g, . ConstVecDerivId ; v . ). inline . ◆ setDf() [2/3]. MechanicalParams& sofa::core::MechanicalParams::setDf ; (; ConstMultiVecDerivId ; v). inline . ◆ setDf() [3/3]. MechanicalParams& sofa::core::MechanicalParams::setDf ; (; ConstVecDerivId ; v). inline . Set the IDs of df vector (for implicit schemes) . ◆ setDt(). MechanicalParams& sofa::core::MechanicalParams::setDt ; (; SReal ; v). inline . Set time step. . ◆ setDx() [1/3]. template<class StateSet > . MechanicalParams& sofa::core::MechanicalPa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html:13884,access,access,13884,api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,1,['access'],['access']
Security,"Member Functions;  SOFA_CLASS (LCPConstraintSolver, ConstraintSolverImpl);  ; bool prepareStates (const core::ConstraintParams *, MultiVecId res1, MultiVecId res2=MultiVecId::null()) override;  ; bool buildSystem (const core::ConstraintParams *, MultiVecId res1, MultiVecId res2=MultiVecId::null()) override;  ; bool solveSystem (const core::ConstraintParams *, MultiVecId res1, MultiVecId res2=MultiVecId::null()) override;  ; bool applyCorrection (const core::ConstraintParams *, MultiVecId res1, MultiVecId res2=MultiVecId::null()) override;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; ConstraintProblem * getConstraintProblem () override;  ; void lockConstraintProblem (sofa::core::objectmodel::BaseObject *from, ConstraintProblem *p1, ConstraintProblem *p2=nullptr) override;  Do not use the following LCPs until the next call to this function. This is used to prevent concurrent access to the LCP when using a LCPForceFeedback through an haptic thread. More...;  ;  Public Member Functions inherited from sofa::component::constraint::lagrangian::solver::ConstraintSolverImpl;  ConstraintSolverImpl ();  ;  ~ConstraintSolverImpl () override;  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void cleanup () override;  ; void removeConstraintCorrection (core::behavior::BaseConstraintCorrection *s) override;  ;  Public Member Functions inherited from sofa::core::behavior::ConstraintSolver;  SOFA_ABSTRACT_CLASS (ConstraintSolver, objectmodel::BaseObject);  ; virtual void solveConstraint (const ConstraintParams *, MultiVecId res1, MultiVecId res2=MultiVecId::null());  ; virtual void rebuildSystem (SReal, SReal);  ; virtual void computeResidual (const core::ExecParams *);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; virtual MultiVec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_l_c_p_constraint_solver.html:6147,access,access,6147,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_l_c_p_constraint_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_l_c_p_constraint_solver.html,1,['access'],['access']
Security,"N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const ValueType &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (ValueType r) noexcept;  Sets every element to r. More...;  ; constexpr ValueType & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const ValueType & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const ValueType * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr ValueType * ptr () noexcept;  Cast into an array of values. More...;  ; template<Size N2, std::enable_if_t<(N2< N), bool > = true> ; constexpr void getsub (const Size i, Vec< N2, ValueType > &m) const noexcept;  ; constexpr void getsub (const Size i, ValueType &m) const noexcept;  ; constexpr Vec< N, ValueType > mulscalar (const ValueType f) const noexcept;  ; template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> ; constexpr Vec< N, ValueType > mulscalar (const real2 f) const noexcept;  Multiplication by a scalar f. More...;  ; template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> ; constexpr Vec< N, ValueType > operator* (const real2 f) const noexcept;  ; constexpr void eqmulscalar (const ValueType f) noexcept;  In-place multipl",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:8846,access,access,8846,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,2,['access'],['access']
Security,"OFA API: sofa::simulation::mechanicalvisitor::MechanicalSetPositionAndVelocityVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalSetPositionAndVelocityVisitor Class Reference . #include <MechanicalSetPositionAndVelocityVisitor.h>; Visitor class used to set positions and velocities of the top level MechanicalStates of the hierarchy. ; More... Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalSetPositionAndVelocityVisitor:. [legend]; Detailed Description; Visitor class used to set positions and velocities of the top level MechanicalStates of the hierarchy. . Public Attributes; SReal t;  ; sofa::core::MultiVecCoordId x;  ; sofa::core::MultiVecDerivId v;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalSetPositionAndVelocityVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecCoordId x=sofa::core::VecCoordId::position(), sofa::core::MultiVecDerivId v=sofa::core::VecDerivId::velocity());  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html:1015,access,access,1015,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_set_position_and_velocity_visitor.html,1,['access'],['access']
Security,"PUMemoryManager, it has the same behavior as std::vector with extra conveniences:; string serialization (making it usable in Data); operator[] is checking if the index is within the bounds in debug . Public Member Functions;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< T, Alloc > &&v);  Move assignment operator. More...;  ;  vector (typename vector< T >::const_iterator first, typename vector< T >::const_iterator last);  Constructor. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. More...;  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; void fill (const T &value);  Sets every element to 'value'. More...;  ; void fastResize (Size n);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  Specialization for writing vectors of unsigned char. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector.html:1558,access,access,1558,api/master/sofa/html/classsofa_1_1type_1_1vector.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector.html,1,['access'],['access']
Security,"P] . ◆ multTransposed(). template<sofa::Size L, sofa::Size C, class real > . template<Size P> . constexpr Mat<L,P,real> sofa::type::Mat< L, C, real >::multTransposed ; (; const Mat< P, C, real > & ; m); const. inlineconstexprnoexcept . Multiplication with the transposed of the given matrix operator. ; Returnsthis * mt . ◆ operator real(). template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> . constexpr sofa::type::Mat< L, C, real >::operator real ; (; ); const. inlineconstexpr . ◆ operator!=(). template<sofa::Size L, sofa::Size C, class real > . constexpr bool sofa::type::Mat< L, C, real >::operator!= ; (; const Mat< L, C, real > & ; b); const. inlineconstexprnoexcept . ◆ operator()() [1/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr const LineNoInit& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i); const. inlineconstexprnoexcept . Read-only access to line i. . ◆ operator()() [2/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr LineNoInit& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i). inlineconstexprnoexcept . Write access to line i. . ◆ operator()() [3/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr const real& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i, . Size ; j . ); const. inlineconstexprnoexcept . Read-only access to element (i,j). . ◆ operator()() [4/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr real& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i, . Size ; j . ). inlineconstexprnoexcept . Write access to element (i,j). . ◆ operator*() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Col sofa::type::Mat< L, C, real >::operator* ; (; const Line & ; v); const. inlineconstexprnoexcept . Multiplication operator Matrix * Line. . ◆ operator*() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:23716,access,access,23716,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,1,['access'],['access']
Security,"Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr real toReal () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:4867,access,access,4867,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,2,['access'],['access']
Security,"Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose of m. More...;  ; constexpr Mat< L, C, Real > operator+ (const Mat< L, C, Real > &m) const noexcept;  Matrix addition operator. More...;  ; constexpr Mat< L, C, Real > operator- (const Mat< L, C, Real > &m) const noexcept;  Matrix subtraction operator. More...;  ; constexpr Mat< L, C, Real > operator- () const noexcept;  Matrix negation operator. ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:4753,access,access,4753,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,2,['access'],['access']
Security,"Real > &m) const noexcept;  ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, Real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noex",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:3595,access,access,3595,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,2,['access'],['access']
Security,"Real getContributionFactor (const sofa::core::MechanicalParams *mparams, const sofa::core::matrixaccumulator::get_component_type< c > *object);  . Additional Inherited Members;  Public Attributes inherited from sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >; Data< bool > d_assembleStiffness;  If true, the stiffness is added to the global matrix. More...;  ; Data< bool > d_assembleMass;  If true, the mass is added to the global matrix. More...;  ; Data< bool > d_assembleDamping;  If true, the damping is added to the global matrix. More...;  ; Data< bool > d_assembleGeometricStiffness;  If true, the geometric stiffness of mappings is added to the global matrix. More...;  ; Data< bool > d_applyProjectiveConstraints;  If true, projective constraints are applied on the global matrix. More...;  ; Data< bool > d_applyMappedComponents;  If true, mapped components contribute to the global matrix. More...;  ; Data< bool > d_checkIndices;  If true, indices are verified before being added in to the global matrix, favoring security over speed. More...;  ; Data< bool > d_parallelAssemblyIndependentMatrices;  If true, independent matrices (global matrix vs mapped matrices) are assembled in parallel. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_constant_sparsity_pattern_system.html:25564,secur,security,25564,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_constant_sparsity_pattern_system.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_constant_sparsity_pattern_system.html,1,['secur'],['security']
Security,"RenamedData< Real > m_currentPressure;  ; sofa::core::objectmodel::RenamedData< Real > m_currentStiffness;  ; sofa::core::objectmodel::RenamedData< SeqTriangles > m_pressureTriangles;  ; sofa::core::objectmodel::RenamedData< Real > m_initialSurfaceArea;  ; sofa::core::objectmodel::RenamedData< Real > m_currentSurfaceArea;  ; sofa::core::objectmodel::RenamedData< Real > m_drawForceScale;  ; sofa::core::objectmodel::RenamedData< sofa::type::RGBAColor > m_drawForceColor;  ; sofa::core::objectmodel::RenamedData< Real > m_volumeAfterTC;  ; sofa::core::objectmodel::RenamedData< Real > m_surfaceAreaAfterTC;  ; Data< Real > d_p0;  IN: Rest pressure when V = V0. More...;  ; Data< Real > d_B;  IN: Bulk modulus (resistance to uniform compression) More...;  ; Data< Real > d_gamma;  IN: Bulk modulus (resistance to uniform compression) More...;  ; Data< Real > d_injectedVolume;  IN: Injected (or extracted) volume since the start of the simulation. More...;  ; Data< Real > d_maxInjectionRate;  IN: Maximum injection rate (volume per second) More...;  ; Data< Real > d_initialVolume;  OUT: Initial volume, as computed from the surface rest position. More...;  ; Data< Real > d_currentInjectedVolume;  OUT: Current injected (or extracted) volume (taking into account maxInjectionRate) More...;  ; Data< Real > d_v0;  OUT: Rest volume (as computed from initialVolume + injectedVolume) More...;  ; Data< Real > d_currentVolume;  OUT: Current volume, as computed from the last surface position. More...;  ; Data< Real > d_currentPressure;  OUT: Current pressure, as computed from the last surface position. More...;  ; Data< Real > d_currentStiffness;  OUT: dP/dV at current volume and pressure. More...;  ; Data< SeqTriangles > d_pressureTriangles;  OUT: list of triangles where a pressure is applied (mesh triangles + tessellated quads) More...;  ; Data< Real > d_initialSurfaceArea;  OUT: Initial surface area, as computed from the surface rest position. More...;  ; Data< Real > d_currentSurfaceArea;  ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html:2652,inject,injection,2652,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html,1,['inject'],['injection']
Security,"SOLVED] 3D Model of human anatomy. /3d-printing-simulation-using-sofa; ; SOFA - Topic: 3D printing simulation using SOFA. /abdominal-organs-in-sofa; ; SOFA - Topic: Abdominal Organs in SOFA. /about-explanation-of-components; ; SOFA - Topic: [SOLVED] about explanation of components. /about-stick-and-stickcontactconstraint; ; SOFA - Topic: about stick and stickcontactconstraint. /about-the-suturing-simulation; ; SOFA - Topic: [SOLVED] About the suture simulation. /about-the-unit; ; SOFA - Topic: [SOLVED] About the unit. /access-constraint-forces-from-a-different-class; ; SOFA - Topic: [SOLVED] Access constraint forces from a different class. /accessing-and-mofiying-array-values-with-context-managers-in-sofapython3; ; SOFA - Topic: Accessing and mofiying array values with Context Managers in SofaPython3. /accessing-deformations-force-states-etc-using-python; ; SOFA - Topic: [SOLVED] Accessing deformations, force states, etc using Python. /access-object-data-on-the-fly-sofapython3; ; SOFA - Topic: Access object data on the fly, sofaPython3. /access-stress-in-triangularfemforcefield; ; SOFA - Topic: Access stress in TriangularFEMForceField. /activating-twoway-option-in-attachconstraint-component-or-not; ; SOFA - Topic: Activating twoWay option in attachConstraint component or not. /actuating-multiple-components-with-cableconstraint; ; SOFA - Topic: Actuating multiple components with CableConstraint. /add_executable-cannot-create-target-another-target-with-the-same-namea-exist; ; SOFA - Topic: add_executable cannot create target, another target with the same namea exist. /add-curve-paramater-to-an-instrument; ; SOFA - Topic: [SOLVED] Add curve paramater to an instrument. /adding-captions-and-instructions-in-sofa-animation-exercises; . /feed; ; [SOLVED] Adding captions and instructions in sofa animation exercises – SOFA. SOFA - Topic: [SOLVED] Adding captions and instructions in sofa animation exercises. /adding-constraint-in-python-controller; ; SOFA - Topic: Adding Const",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:253134,access,access-object-data-on-the-fly-,253134,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['access'],['access-object-data-on-the-fly-']
Security,"Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets every element to r. More...;  ; constexpr real & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const real & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr real * ptr () noexcept;  Cast into an array of values. More...;  ; constexpr void getsub (const Size i, Vec< N2, real > &m) const noexcept;  ; constexpr void getsub (const Size i, real &m) const noexcept;  ; constexpr Vec< N, real > mulscalar (const real f) const noexcept;  ; constexpr Vec< N, real > mulscalar (const real2 f) const noexcept;  Multiplication by a scalar f. More...;  ; constexpr Vec< N, real > operator* (const real2 f) const noexcept;  ; constexpr real operator* (const Vec< N, real2 > &v) const noexcept;  Dot product. More...;  ; constexpr void eqmulscalar (const real f) noexcept;  In-place multiplication by a scalar f. More...;  ; constexpr void eqmulscalar (const real2 f) noexcept;  ; constexpr void operator*= (const real2 f) noexcept;  ; constexpr Vec< N, real > divscalar (const real f) const noexcept;  Div",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:3544,access,access,3544,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,1,['access'],['access']
Security,"TriangleFEMForceField< DataTypes >::~TriangleFEMForceField. overrideprotected . Function details. ◆ accumulateForceLarge(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >::accumulateForceLarge ; (; VecCoord & ; f, . const VecCoord & ; p, . bool ; implicit = false . ). protected . ◆ accumulateForceSmall(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >::accumulateForceSmall ; (; VecCoord & ; f, . const VecCoord & ; p, . bool ; implicit = false . ). protected . ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangle_f_e_m_force_field.html:29715,access,access,29715,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangle_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangle_f_e_m_force_field.html,1,['access'],['access']
Security,"TriangularBiquadraticSpringsForceField< DataTypes >::updateMatrix. protected . Constructor details. ◆ TriangularBiquadraticSpringsForceField(). template<class DataTypes > . sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >::TriangularBiquadraticSpringsForceField. protected . second Lame coefficient . ◆ ~TriangularBiquadraticSpringsForceField(). template<class DataTypes > . sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >::~TriangularBiquadraticSpringsForceField. protectedvirtual . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ applyEdgeCreation(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >::applyEdgeCreation ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field.html:27713,access,access,27713,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field.html,1,['access'],['access']
Security,"Types > . void sofa::component::mechanicalload::TorsionForceField< DataTypes >::addForce ; (; const MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<typename DataTypes > . void sofa::component::mechanicalload::TorsionForceField< DataTypes >::addKToMatrix ; (; linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). overridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the same large matrix. Each object adds its contribution to a different section of the matrix. That is why, an offset is used to identify where in the matrix the force field must start adding its contribution. ; kFactstiffness factor that needs to be multiplied to each matrix entry. ; offsetStarting index of the submatrix to fill in the global matrix. . Reimplemented from sofa::core::behavior::ForceField< DataTypes >. ◆ buildDampingMatrix(). template<typename DataTypes > . void sofa::component::mechanicalload::TorsionForceField< DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; ). finalvirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ buildStiffnessMatrix(). template<typename DataTypes",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field.html:25047,access,access,25047,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field.html,1,['access'],['access']
Security,"Update method called when variables used in precomputation are modified. More...;  ; void addForce (const core::MechanicalParams *mparams, DataVecDeriv &f, const DataVecCoord &x, const DataVecDeriv &v) override;  ; void addDForce (const core::MechanicalParams *mparams, DataVecDeriv &df, const DataVecDeriv &dx) override;  ; void addKToMatrix (sofa::linearalgebra::BaseMatrix *mat, SReal k, unsigned int &offset) override;  ; void buildStiffnessMatrix (core::behavior::StiffnessMatrix *matrix) override;  ; void buildDampingMatrix (core::behavior::DampingMatrix *) final;  ; SReal getPotentialEnergy (const core::MechanicalParams *, const DataVecCoord &) const override;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible) override;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; int getMethod ();  ; void setMethod (int val);  ; void setMethod (std::string val);  ; const type::fixed_array< Coord, 3 > & getRotatedInitialElement (Index elemId);  Public methods to access FEM information per element. Those method should not be used internally as they add check on element id. More...;  ; const Transformation & getRotationMatrix (Index elemId);  ; const MaterialStiffness & getMaterialStiffness (Index elemId);  ; const StrainDisplacement & getStrainDisplacements (Index elemId);  ;  Public Member Functions inherited from sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >;  SOFA_CLASS (SOFA_TEMPLATE(BaseLinearElasticityFEMForceField, DataTypes), SOFA_TEMPLATE(core::behavior::ForceField, DataTypes));  ;  BaseLinearElasticityFEMForceField ();  ; void setPoissonRatio (Real val);  ; void setYoungModulus (Real val);  ; Real getYoungModulusInElement (sofa::Size elementId) const;  ; Real getPoissonRatioInElement (sofa::Size elementId) const;  ;  Public Member Functions inherited from sofa::core::behavior::ForceField< DataTypes >;  SOFA_CLAS",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangle_f_e_m_force_field.html:7150,access,access,7150,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangle_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangle_f_e_m_force_field.html,1,['access'],['access']
Security,"Vector *v) const;  Multiply the transposed matrix by vector v and add the result in vector result. More...;  ; virtual void opPMulTV (float *result, const float *v) const;  Multiply the transposed matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulTV (double *result, const double *v) const;  Multiply the transposed matrix by double vector v and add the result in vector result. More...;  ; virtual void opMulTM (BaseMatrix *result, BaseMatrix *m) const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:18823,access,access,18823,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,1,['access'],['access']
Security,"[6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or down from the current context. . ◆ get() [7/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, .",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:21277,access,access,21277,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['access'],['access']
Security,"[N] {}. Constructor details. ◆ fixed_array() [1/3]. template<class T , sofa::Size N> . constexpr sofa::type::fixed_array< T, N >::fixed_array ; (; ). inlineconstexpr . ◆ fixed_array() [2/3]. template<class T , sofa::Size N> . template<size_type NN = N, typename std::enable_if< NN==1, int >::type = 0> . constexpr sofa::type::fixed_array< T, N >::fixed_array ; (; value_type ; r1). inlineexplicitconstexprnoexcept . Specific constructor for 1-element vectors. . ◆ fixed_array() [3/3]. template<class T , sofa::Size N> . template<typename... ArgsT, typename = std::enable_if_t< (std::is_convertible_v<ArgsT, value_type> && ...) >, typename = std::enable_if_t< (sizeof...(ArgsT) == N && sizeof...(ArgsT) > 1) >> . constexpr sofa::type::fixed_array< T, N >::fixed_array ; (; ArgsT &&... ; r). inlineconstexprnoexcept . Function details. ◆ array() [1/2]. template<class T , sofa::Size N> . constexpr const Array& sofa::type::fixed_array< T, N >::array ; (; ); const. inlineconstexprnoexcept . direct access to array . ◆ array() [2/2]. template<class T , sofa::Size N> . constexpr Array& sofa::type::fixed_array< T, N >::array ; (; ). inlineconstexprnoexcept . direct access to array . ◆ assign(). template<class T , sofa::Size N> . constexpr void sofa::type::fixed_array< T, N >::assign ; (; const T & ; value). inlineconstexprnoexcept . ◆ at() [1/2]. template<class T , sofa::Size N> . constexpr reference sofa::type::fixed_array< T, N >::at ; (; size_type ; i). inlineconstexpr . ◆ at() [2/2]. template<class T , sofa::Size N> . constexpr const_reference sofa::type::fixed_array< T, N >::at ; (; size_type ; i); const. inlineconstexpr . ◆ back() [1/2]. template<class T , sofa::Size N> . constexpr reference sofa::type::fixed_array< T, N >::back ; (; ). inlineconstexpr . ◆ back() [2/2]. template<class T , sofa::Size N> . constexpr const_reference sofa::type::fixed_array< T, N >::back ; (; ); const. inlineconstexpr . ◆ begin() [1/2]. template<class T , sofa::Size N> . constexpr const_iterator sofa::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1fixed__array.html:3688,access,access,3688,api/master/sofa/html/classsofa_1_1type_1_1fixed__array.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1fixed__array.html,1,['access'],['access']
Security,"[SOLVED] Need (very) old version of SOFA to use ""Flexible"" plugin. /new-api-documentation; ; SOFA - Topic: New API documentation. /new-approaches-to-catheter-navigation-for-interventional-radiology-simulation; ; SOFA - Topic: New approaches to catheter navigation for interventional radiology simulation. /new-build-system; . /page; . /4; ; SOFA - Topic: New build system. SOFA - Topic: New build system. /new-forum-format; . /feed; ; New forum format! – SOFA. SOFA - Topic: New forum format!. /new-mouse-interaction; . /feed; ; [SOLVED] New Mouse Interaction – SOFA. /page; . /13; ; SOFA - Topic: [SOLVED] New Mouse Interaction. /4; ; SOFA - Topic: [SOLVED] New Mouse Interaction. SOFA - Topic: [SOLVED] New Mouse Interaction. /newomnidriver-gnode-cannot-access-protected-member; . /embed; ; SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. /page; . /3; ; SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. /4; ; SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. /new-online-support-sessions; ; SOFA - Topic: New: online support sessions!. /new-release-v16-08; . /feed; ; New Release v16.08! – SOFA. SOFA - Topic: New Release v16.08!. /new-release-v16-12; ; SOFA - Topic: New Release v16.12!. /new-release-v17-12; ; SOFA - Topic: New Release v17.12!. /new-release-v18-06; ; SOFA - Topic: New release v18.06!. /new-sofa-technical-member-amc; ; SOFA - Topic: New SOFA technical member: AMC!. /new-to-sofa-here-are-my-thoughts; ; SOFA - Topic: New to sofa. Here are my thoughts. /new-training-session-scheduled; ; SOFA - Topic: New training session scheduled!. /new-tutorials-for-sofa; ; SOFA - Topic: New tutorials for SOFA. /new-version-of-blender-sofa; . /page; . /4; ; SOFA - Topic: New version of Blender SOFA. SOFA - Topic: New version of Blender SOFA. /new-video-tutorial-howto-configure-and-install-on-linux; ; SOFA - Topic: New video tutor",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:354466,access,access,354466,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['access'],['access']
Security,"]; Detailed Description; template<class T>; class sofa::gui::qt::TDataWidget< T >; This class is basically the same as DataWidget, except that it takes a template parameter so the actual type of Data can be retrieved through the getData() accessor. In most cases you will need to derive from this class to implement the edition of your data in the GUI. . Protected Attributes; MyTData * Tdata;  ;  Protected Attributes inherited from sofa::gui::qt::DataWidget; core::objectmodel::BaseData * baseData;  ; bool dirty;  ; int counter;  ; bool m_isFilled;  tell if DataWidget has been filled from Data true by default More...;  ; bool m_toFill;  bool to warn action is needed to fill Data, false by default More...;  . Public Member Functions;  TDataWidget (QWidget *parent, const char *name, MyTData *d);  ; sofa::core::objectmodel::Data< T > * getData ();  ; const sofa::core::objectmodel::Data< T > * getData () const;  ; virtual void setData (MyTData *d);  ; virtual void setData (MyData *d);  ;  Public Member Functions inherited from sofa::gui::qt::DataWidget;  DataWidget (QWidget *parent, const char *name, MyData *d);  ;  ~DataWidget () override;  ; virtual void setData (MyData *d);  ; const core::objectmodel::BaseData * getBaseData () const;  BaseData pointer accessor function. More...;  ; core::objectmodel::BaseData * getBaseData ();  ; void updateVisibility ();  ; bool isDirty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  ; virtual bool createWidgets ()=0;  ; virtual void setDataReadOnly (bool readOnly)=0;  This method is called after createWidgets to configure whether the created widgets should be read-only. More...;  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  . Static Public Member Functions; template<class RealObject > ; static RealOb",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_t_data_widget.html:1949,access,accessor,1949,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_t_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_t_data_widget.html,1,['access'],['accessor']
Security,"_MASS_API Vec6 getMomentum (const MechanicalParams *params, const DataVecCoord &d_x, const DataVecDeriv &d_v) const;  ; void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void loadRigidMass (const std::string &);  ; void draw (const core::visual::VisualParams *vparams);  Render internal data of this object, for debugging purposes. More...;  ; void draw (const core::visual::VisualParams *vparams);  Render internal data of this object, for debugging purposes. More...;  ; SReal getPotentialEnergy (const core::MechanicalParams *, const DataVecCoord &x) const;  ; SReal getPotentialEnergy (const core::MechanicalParams *, const DataVecCoord &x) const;  ; void draw (const core::visual::VisualParams *vparams);  Render internal data of this object, for debugging purposes. More...;  ; Read and write access functions in mass information; void setMass (const MassType &d_vertexMass);  ; const MassType & getVertexMass () const;  ; const MassType & getMass () const;  ; SReal getTotalMass () const;  ; void setTotalMass (SReal m);  ; void setFileMass (const std::string &file);  }@ More...;  ; std::string getFileMass () const;  ; void loadRigidMass (const std::string &filename);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void initDefaultImpl ();  ; Check and standard initialization functions from mass information; virtual bool checkVertexMass ();  ; virtual void initFromVertexMass ();  ; virtual bool checkTotalMass ();  ; virtual void initFromTotalMass ();  ;  Public Member Functions inherited from sofa::core::behavior::Mass< DataTypes >;  SOFA_CLASS2 (SOFA_TEMPLATE(Mass, DataTypes), SOFA_TEMPLATE(ForceField, DataTypes), BaseMass);  ; void initGnuplot (const std::string path) override;  initialization to export kinetic and potential energy to gnuplot files format More...;  ; void exportGnuplot (const MechanicalParams *mparams, SReal",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_uniform_mass.html:8194,access,access,8194,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_uniform_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_uniform_mass.html,1,['access'],['access']
Security,"a (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const T &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const T &value, const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~Data () override;  Destructor. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_data.html:11447,access,access,11447,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_data.html,3,['access'],['access']
Security,"a different size vector (null default value and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; template<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; const",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:7410,access,access,7410,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,2,['access'],['access']
Security,"a multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; data access; Access to external data . SReal getTime () const;  Current time. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get the type name of this object (i.e. class and te",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:2288,access,access,2288,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,1,['access'],['access']
Security,"a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionVisitor Class Reference . #include <MechanicalPropagateOnlyPositionVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionVisitor:. [legend]; Detailed Description; Propagate positions to all the levels of the hierarchy. At each level, the mappings form the parent to the child is applied.; Note that this visitor only propagate through the mappings, and does not apply projective constraints as was previously done by MechanicalPropagatePositionVisitor. Use MechanicalProjectPositionVisitor before this visitor if projection is needed. . Public Attributes; SReal t;  ; sofa::core::MultiVecCoordId x;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateOnlyPositionVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecCoordId x=sofa::core::VecCoordId::position());  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this ac",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html:1133,access,access,1133,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_visitor.html,1,['access'],['access']
Security,"a::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >::~TriangularFEMForceField. overrideprotected . Function details. ◆ accumulateForceLarge(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >::accumulateForceLarge ; (; VecCoord & ; f, . const VecCoord & ; p . ). protected . ◆ accumulateForceSmall(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >::accumulateForceSmall ; (; VecCoord & ; f, . const VecCoord & ; p . ). protected . ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::Ba",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field.html:33591,access,access,33591,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field.html,1,['access'],['access']
Security,"a::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::vector_id ; (; const_iterator ; first, . const_iterator ; last . ). inline . Constructor. . Function details. ◆ at() [1/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::at ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ at() [2/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::at ; (; Index ; n); const. inline . Read-only random access, with explicit Index. . ◆ operator()() [1/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator()() [2/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n); const. inline . Read-only random access, with explicit Index. . ◆ operator[]() [1/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator[]() [2/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Index ; n); const. inline . Read-only random access. . ◆ operator[]() [3/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryMan",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:6424,access,access,6424,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,1,['access'],['access']
Security,"a< Real > m_initialSurfaceArea;  ; sofa::core::objectmodel::RenamedData< Real > m_currentSurfaceArea;  ; sofa::core::objectmodel::RenamedData< Real > m_drawForceScale;  ; sofa::core::objectmodel::RenamedData< sofa::type::RGBAColor > m_drawForceColor;  ; sofa::core::objectmodel::RenamedData< Real > m_volumeAfterTC;  ; sofa::core::objectmodel::RenamedData< Real > m_surfaceAreaAfterTC;  ; Data< Real > d_p0;  IN: Rest pressure when V = V0. More...;  ; Data< Real > d_B;  IN: Bulk modulus (resistance to uniform compression) More...;  ; Data< Real > d_gamma;  IN: Bulk modulus (resistance to uniform compression) More...;  ; Data< Real > d_injectedVolume;  IN: Injected (or extracted) volume since the start of the simulation. More...;  ; Data< Real > d_maxInjectionRate;  IN: Maximum injection rate (volume per second) More...;  ; Data< Real > d_initialVolume;  OUT: Initial volume, as computed from the surface rest position. More...;  ; Data< Real > d_currentInjectedVolume;  OUT: Current injected (or extracted) volume (taking into account maxInjectionRate) More...;  ; Data< Real > d_v0;  OUT: Rest volume (as computed from initialVolume + injectedVolume) More...;  ; Data< Real > d_currentVolume;  OUT: Current volume, as computed from the last surface position. More...;  ; Data< Real > d_currentPressure;  OUT: Current pressure, as computed from the last surface position. More...;  ; Data< Real > d_currentStiffness;  OUT: dP/dV at current volume and pressure. More...;  ; Data< SeqTriangles > d_pressureTriangles;  OUT: list of triangles where a pressure is applied (mesh triangles + tessellated quads) More...;  ; Data< Real > d_initialSurfaceArea;  OUT: Initial surface area, as computed from the surface rest position. More...;  ; Data< Real > d_currentSurfaceArea;  OUT: Current surface area, as computed from the last surface position. More...;  ; Data< Real > d_drawForceScale;  DEBUG: scale used to render force vectors. More...;  ; Data< sofa::type::RGBAColor > d_drawForceColor;  DE",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html:2859,inject,injected,2859,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html,1,['inject'],['injected']
Security,"a<Real> sofa::component::mechanicalload::PlaneForceField< DataTypes >::d_stiffness. force stiffness. (default=500) . ◆ m_contacts. template<class DataTypes > . sofa::type::vector<unsigned int> sofa::component::mechanicalload::PlaneForceField< DataTypes >::m_contacts. protected . ◆ m_data. template<class DataTypes > . PlaneForceFieldInternalData<DataTypes> sofa::component::mechanicalload::PlaneForceField< DataTypes >::m_data. protected . Constructor details. ◆ PlaneForceField(). template<class DataTypes > . sofa::component::mechanicalload::PlaneForceField< DataTypes >::PlaneForceField. protected . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::mechanicalload::PlaneForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::mechanicalload::PlaneForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::PlaneForceField< DataTypes >::addKToMatrix ; (; const core::MechanicalParams * ; mparams, . const sofa::core::behav",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_plane_force_field.html:23185,access,access,23185,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_plane_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_plane_force_field.html,1,['access'],['access']
Security,"adjacent to that edge. ; Reimplemented in sofa::component::topology::container::constant::MeshTopology. ◆ getLocalQuadsInHexahedron(). BaseMeshTopology::Quad sofa::core::topology::BaseMeshTopology::getLocalQuadsInHexahedron ; (; const PointID ; i); const. virtual . Returns for each index (between 0 and 6) the four vertices indices that are adjacent to that quad. ; Reimplemented in sofa::component::topology::container::dynamic::HexahedronSetTopologyContainer. ◆ getLocalTrianglesInTetrahedron(). BaseMeshTopology::Triangle sofa::core::topology::BaseMeshTopology::getLocalTrianglesInTetrahedron ; (; const PointID ; i); const. virtual . Returns for each index (between 0 and 3) the three local vertices indices that are adjacent to that triangle. ; Reimplemented in sofa::component::topology::container::dynamic::TetrahedronSetTopologyContainer. ◆ getNbEdges(). virtual Size sofa::core::topology::BaseMeshTopology::getNbEdges ; (; ). inlinevirtual . Random accessors ; Reimplemented in sofa::component::topology::container::constant::MeshTopology. ◆ getNbHexahedra(). virtual Size sofa::core::topology::BaseMeshTopology::getNbHexahedra ; (; ). inlinevirtual . Reimplemented in sofa::component::topology::container::grid::SparseGridTopology, sofa::component::topology::container::grid::GridTopology, and sofa::component::topology::container::constant::MeshTopology. ◆ getNbHexas(). virtual Size sofa::core::topology::BaseMeshTopology::getNbHexas ; (; ). inlinevirtual . ◆ getNbLines(). Size sofa::core::topology::BaseMeshTopology::getNbLines ; (; ). inline . ◆ getNbQuads(). virtual Size sofa::core::topology::BaseMeshTopology::getNbQuads ; (; ). inlinevirtual . Reimplemented in sofa::component::topology::container::constant::MeshTopology. ◆ getNbTetrahedra(). virtual Size sofa::core::topology::BaseMeshTopology::getNbTetrahedra ; (; ). inlinevirtual . Reimplemented in sofa::component::topology::container::constant::MeshTopology. ◆ getNbTetras(). virtual Size sofa::core::topology::BaseMeshTopo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_mesh_topology.html:41620,access,accessors,41620,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_mesh_topology.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_mesh_topology.html,1,['access'],['accessors']
Security,"adularBendingSprings< DataTypes >::m_topology. protected . Pointer to the current topology. . ◆ updateMatrix. template<class DataTypes > . bool sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::updateMatrix. protected . Constructor details. ◆ QuadularBendingSprings(). template<class DataTypes > . sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::QuadularBendingSprings. ◆ ~QuadularBendingSprings(). template<class DataTypes > . sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::~QuadularBendingSprings. Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ applyEdgeCreation(). template<class DataTypes > . void sofa::component::solidmechanics::spring::QuadularBendingSprings< DataTypes >::applyEdgeCreation ; (; Index ; edgeIndex, . EdgeIn",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs.html:23071,access,access,23071,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_quadular_bending_springs.html,1,['access'],['access']
Security,"agonal, band, sparse, full, block size, ...); enum  ElementType { ELEMENT_UNKNOWN = 0; , ELEMENT_FLOAT; , ELEMENT_INT; };  ; enum  MatrixCategory { ;   MATRIX_UNKNOWN = 0; , MATRIX_IDENTITY; , MATRIX_DIAGONAL; , MATRIX_BAND; , ;   MATRIX_SPARSE; , MATRIX_FULL. };  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  . Virtual iterator classes and methods; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of the given row of blocks. More...;  ; virtual RowBlockConstIterator bRowsBegin () const;  Get the iterator",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:7655,access,access,7655,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,1,['access'],['access']
Security,ainers-blender-sofa; . /feed; ; Unity3d Digital-Trainers Blender-SOFA – SOFA. SOFA - Topic Tag: Unity3d Digital-Trainers Blender-SOFA. /unreal; . /feed; ; Unreal – SOFA. SOFA - Topic Tag: Unreal. /unreal-engine; . /feed; ; Unreal Engine – SOFA. SOFA - Topic Tag: Unreal Engine. /urdf; . /feed; ; urdf – SOFA. SOFA - Topic Tag: urdf. /using-sofa; . /feed; ; using sofa – SOFA. SOFA - Topic Tag: using sofa. /using-sofapython3; . /feed; ; using sofapython3 – SOFA. SOFA - Topic Tag: using sofapython3. /v16-08; . /feed; ; v16.08 – SOFA. SOFA - Topic Tag: v16.08. /v18-06; . /feed; ; v18.06 – SOFA. SOFA - Topic Tag: v18.06. /v19-06; . /feed; ; v19.06 – SOFA. SOFA - Topic Tag: v19.06. /v19-12-plugin-linking; . /feed; ; v19.12 plugin linking – SOFA. SOFA - Topic Tag: v19.12 plugin linking. /v20; . /feed; ; v20 – SOFA. SOFA - Topic Tag: v20. /v20-12; . /feed; ; v20.12 – SOFA. SOFA - Topic Tag: v20.12. /v20-12-02; . /feed; ; v20.12.02 – SOFA. SOFA - Topic Tag: v20.12.02. /validation; . /feed; ; validation – SOFA. SOFA - Topic Tag: validation. /vasculature; . /feed; ; vasculature – SOFA. SOFA - Topic Tag: vasculature. /vecid; . /feed; ; vecId – SOFA. SOFA - Topic Tag: vecId. /vectordata-data-merge-copy; . /feed; ; vectorData Data merge copy – SOFA. SOFA - Topic Tag: vectorData Data merge copy. /vectorspringforcefield; . /feed; ; VectorSpringForceField – SOFA. SOFA - Topic Tag: VectorSpringForceField. /verification; . /feed; ; verification – SOFA. SOFA - Topic Tag: verification. /vertex; . /feed; ; vertex – SOFA. SOFA - Topic Tag: vertex. /vessel; . /feed; ; vessel – SOFA. SOFA - Topic Tag: vessel. /vessels; . /feed; ; vessels – SOFA. SOFA - Topic Tag: vessels. /video; . /feed; ; video – SOFA. SOFA - Topic Tag: video. /view; . /feed; ; view – SOFA. SOFA - Topic Tag: view. /viewall; . /feed; ; viewall – SOFA. SOFA - Topic Tag: viewall. /viewport; . /feed; ; viewport – SOFA. SOFA - Topic Tag: viewport. /view-rotation; . /feed; ; View Rotation – SOFA. SOFA - Topic Tag: View Rotation. ,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:489926,validat,validation,489926,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['validat'],['validation']
Security,"al< TBlock, TPolicy >::bAccessorSetCSRImpl ; (; InternalBlockAccessor * ; b, . const T * ; buffer . ). inlineprotected . ◆ bColSize(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual Index sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bColSize ; (; ); const. inlineoverridevirtual . Returnsthe number of columns of blocks ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ blockCreate(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual BlockAccessor sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::blockCreate ; (; Index ; i, . Index ; j . ). inlinevirtual . Get write access to a block, possibly creating it. . ◆ blockGet(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual BlockConstAccessor sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::blockGet ; (; Index ; i, . Index ; j . ); const. inlinevirtual . Get read access to a block. . ◆ blockGetW(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual BlockAccessor sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::blockGetW ; (; Index ; i, . Index ; j . ). inlinevirtual . Get write access to a block. . ◆ bRowBegin(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual ColBlockConstIterator sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowBegin ; (; Index ; ib); const. inlineoverridevirtual . Get the iterator corresponding to the beginning of the given row of blocks. . ◆ bRowEnd(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual ColBlockConstIterator sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowEnd ; (; Index ; ib); const. inlineoverridevirtual . Get the iterator corresponding to the end of the given row of blocks. . ◆ bRowRange(). template<typename TBlock , typename TPolicy = CRS",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:45352,access,access,45352,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,1,['access'],['access']
Security,"al< TBlock, TPolicy >::bColSize ; (; ); const. inlineoverridevirtual . Returnsthe number of columns of blocks ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ blockCreate(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual BlockAccessor sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::blockCreate ; (; Index ; i, . Index ; j . ). inlinevirtual . Get write access to a block, possibly creating it. . ◆ blockGet(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual BlockConstAccessor sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::blockGet ; (; Index ; i, . Index ; j . ); const. inlinevirtual . Get read access to a block. . ◆ blockGetW(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual BlockAccessor sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::blockGetW ; (; Index ; i, . Index ; j . ). inlinevirtual . Get write access to a block. . ◆ bRowBegin(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual ColBlockConstIterator sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowBegin ; (; Index ; ib); const. inlineoverridevirtual . Get the iterator corresponding to the beginning of the given row of blocks. . ◆ bRowEnd(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual ColBlockConstIterator sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowEnd ; (; Index ; ib); const. inlineoverridevirtual . Get the iterator corresponding to the end of the given row of blocks. . ◆ bRowRange(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual std::pair<ColBlockConstIterator, ColBlockConstIterator> sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowRange ; (; Index ; ib); const. inlineoverridevirtual . Get the iterators corresponding to the beginning and ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:45625,access,access,45625,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,1,['access'],['access']
Security,"ame); const. Find an object given its name. . ◆ getObjects() [1/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridepure virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObjects() [2/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . SearchDirection ; dir = SearchUp . ); const. inlineoverridevirtual . Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getOdeSolver(). core::behavior::OdeSolver * sofa::simulation::Node::getOdeSolver ; (; ); const. overridevirtual . Reimplemented from sofa::core::objectmodel::BaseNode. ◆ getRootContext(). BaseContext* sofa::simulation::Node::getRootContext ; (; ); const. inlineoverridevirtual . Get the root context of the graph. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getShader() [1/2]. core::visual::Shader * sofa::simulation::Node::getShader ; (; ); const. overridevirtual . Shader. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getShader() [2/2]. core::visual::Shader * sofa::simulation::Node::getShader ; (; const sofa::core::objectmodel::TagSet & ; t); const. virtual . ◆ getState(). core::BaseState * sofa::simulation::Node::getState ; (; ); const. overridevirtual . Degrees-of-Freedom. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:43777,access,access,43777,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,1,['access'],['access']
Security,"and Qt 4.8.5 (64-bit). /3; ; SOFA - Topic: [SOLVED] Build SOFA with MSVC 11.0 and Qt 4.8.5 (64-bit). SOFA - Topic: [SOLVED] Build SOFA with MSVC 11.0 and Qt 4.8.5 (64-bit). /build-with-qt-on-macos; . /page; . /2; ; SOFA - Topic: [SOLVED] build with Qt on MacOs. /7; ; SOFA - Topic: [SOLVED] build with Qt on MacOs. SOFA - Topic: [SOLVED] build with Qt on MacOs. /c11-flag-added-to-c-files-compilation; . /feed; ; [SOLVED] c++11 flag added to c files compilation – SOFA. SOFA - Topic: [SOLVED] c++11 flag added to c files compilation. /cable-driven-actuation; ; SOFA - Topic: [SOLVED] Cable-Driven Actuation. /call-for-papers-hmsim-healthcare-and-medical-simulation-barcelona; ; SOFA - Topic: Call for papers – HMSIM: Healthcare and Medical Simulation Barcelona. /calling-header-files-between-sofa-plugins; ; SOFA - Topic: [SOLVED] Calling header files between sofa plugins. /camera-position; ; SOFA - Topic: [SOLVED] Camera position. /cannot-access-private-member-while-building-sofacore; ; SOFA - Topic: [SOLVED] Cannot access private member while building SofaCore. /cannot-animate-geomagic; ; SOFA - Topic: Cannot animate Geomagic. /can-not-build-sofacuda-on-win10-vs2013-cuda8-0; . /feed; ; Can not Build SofaCUDA on win10 VS2013 cuda8.0 – SOFA. SOFA - Topic: Can not Build SofaCUDA on win10 VS2013 cuda8.0. /cannot-build-sofa-sln-with-visual-studio-2019; ; SOFA - Topic: [SOLVED] Cannot build sofa.sln with visual studio 2019. /cannot-compile-sofahapi-plugin; ; SOFA - Topic: [SOLVED] Cannot compile SofaHapi Plugin. /can-not-create-new-from-runsofa-window-filenew; ; SOFA - Topic: [SOLVED] Can not create ""New"" from RunSofa Window> File>New. /cannot-import-sofa-gui-in-python; ; SOFA - Topic: [SOLVED] Cannot import Sofa.Gui in python. /cannot-open-many-files; ; SOFA - Topic: cannot open many files. /can-not-open-the-editor-sofa-binaries-v19-04-on-win-10; ; SOFA - Topic: Can not open the editor Sofa BINARIES (v19.04) on win 10. /can-not-open-the-tutorials; . /feed; ; [SOLVED] Can not open ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:268445,access,access-private-member-while-building-sofacore,268445,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['access'],"['access', 'access-private-member-while-building-sofacore']"
Security,"anslation and rotation) More...;  ; constexpr Vec2 projectVector (const Vec2 &v) const;  Apply the transform to a vector, i.e. project a vector from the child frame to the parent frame (rotation only, no translation added) More...;  ; constexpr Vec2 unprojectPoint (const Vec2 &v) const;  Apply the inverse transform to a point, i.e. project a point from the parent frame to the child frame (translation and rotation) More...;  ; constexpr Vec2 unprojectVector (const Vec2 &v) const;  Apply the inverse transform to a vector, i.e. project a vector from the parent frame to the child frame (rotation only, no translation) More...;  ; constexpr Vec2 pointToParent (const Vec2 &v) const;  obsolete. Use projectPoint. More...;  ; constexpr Vec2 pointToChild (const Vec2 &v) const;  obsolete. Use unprojectPoint. More...;  ; constexpr real * ptr ();  ; constexpr const real * ptr () const;  ; constexpr real & operator[] (Size i);  Access to i-th element. More...;  ; constexpr const real & operator[] (Size i) const;  Const access to i-th element. More...;  ; Tests operators; constexpr bool operator== (const RigidCoord< 2, real > &b) const;  ; constexpr bool operator!= (const RigidCoord< 2, real > &b) const;  . Static Public Member Functions; static RigidCoord rand (SReal a);  Random rigid transform composed of 2 random translations and a random angle. More...;  ; static constexpr RigidCoord< 2, real > identity ();  ; template<typename V > ; static constexpr HomogeneousVec toHomogeneous (V v, real r=1.);  create a homogeneous vector from a 2d vector More...;  ; template<typename V > ; static constexpr Vec2 fromHomogeneous (V v);  create a 2d vector from a homogeneous vector More...;  ; static constexpr Size max_size ();  ; static constexpr Size size ();  . Friends; std::ostream & operator<< (std::ostream &out, const RigidCoord< 2, real > &v);  write to an output stream More...;  ; std::istream & operator>> (std::istream &in, RigidCoord< 2, real > &v);  read from an input stream More...;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_rigid_coord_3_012_00_01real_01_4.html:4294,access,access,4294,api/master/sofa/html/classsofa_1_1defaulttype_1_1_rigid_coord_3_012_00_01real_01_4.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_rigid_coord_3_012_00_01real_01_4.html,1,['access'],['access']
Security,"anslation and rotation) More...;  ; constexpr Vec3 projectVector (const Vec3 &v) const;  Apply the transform to a vector, i.e. project a vector from the child frame to the parent frame (rotation only, no translation added) More...;  ; constexpr Vec3 unprojectPoint (const Vec3 &v) const;  Apply the inverse transform to a point, i.e. project a point from the parent frame to the child frame (translation and rotation) More...;  ; constexpr Vec3 unprojectVector (const Vec3 &v) const;  Apply the inverse transform to a vector, i.e. project a vector from the parent frame to the child frame (rotation only, no translation) More...;  ; constexpr Vec3 pointToParent (const Vec3 &v) const;  obsolete. Use projectPoint. More...;  ; constexpr Vec3 pointToChild (const Vec3 &v) const;  obsolete. Use unprojectPoint. More...;  ; constexpr real * ptr ();  ; constexpr const real * ptr () const;  ; constexpr real & operator[] (Size i);  Access to i-th element. More...;  ; constexpr const real & operator[] (Size i) const;  Const access to i-th element. More...;  ; Tests operators; constexpr bool operator== (const RigidCoord< 3, real > &b) const;  ; constexpr bool operator!= (const RigidCoord< 3, real > &b) const;  . Static Public Member Functions; static RigidCoord rand (SReal a);  Random rigid transform composed of 3 random translations and 3 random Euler angles. More...;  ; static constexpr RigidCoord< 3, real > identity ();  ; template<typename V > ; static constexpr HomogeneousVec toHomogeneous (V v, real r=1.);  create a homogeneous vector from a 3d vector More...;  ; template<typename V > ; static constexpr Vec3 fromHomogeneous (V v);  create a 3d vector from a homogeneous vector More...;  ; static constexpr Size max_size ();  ; static constexpr Size size ();  . Friends; std::ostream & operator<< (std::ostream &out, const RigidCoord< 3, real > &v);  write to an output stream More...;  ; std::istream & operator>> (std::istream &in, RigidCoord< 3, real > &v);  read from an input stream M",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_rigid_coord_3_013_00_01real_01_4.html:4685,access,access,4685,api/master/sofa/html/classsofa_1_1defaulttype_1_1_rigid_coord_3_013_00_01real_01_4.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_rigid_coord_3_013_00_01real_01_4.html,1,['access'],['access']
Security,"aseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Friends; template<class DataTypes > ; class PointSetGeometryAlgorithms;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::topology::TopologyModifier; TopologyContainer * m_topologyContainer;  Contains the actual topology data and give access to it (nature of these data heavily depends on the kind of topology). More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_modifier.html:16762,access,access,16762,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_modifier.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_modifier.html,1,['access'],['access']
Security,"aseData;  ; bool dirty;  ; int counter;  ; bool m_isFilled;  tell if DataWidget has been filled from Data true by default More...;  ; bool m_toFill;  bool to warn action is needed to fill Data, false by default More...;  . Public Member Functions;  RadioDataWidget (QWidget *parent, const char *name, core::objectmodel::Data< sofa::helper::OptionsGroup > *m_data);  ; virtual bool createWidgets ();  In this method we create the widgets and perform the signal / slots connections. More...;  ; virtual void setDataReadOnly (bool readOnly);  This method is called after createWidgets to configure whether the created widgets should be read-only. More...;  ;  Public Member Functions inherited from sofa::gui::qt::TDataWidget< sofa::helper::OptionsGroup >;  TDataWidget (QWidget *parent, const char *name, MyTData *d);  ; sofa::core::objectmodel::Data< sofa::helper::OptionsGroup > * getData ();  ; const sofa::core::objectmodel::Data< sofa::helper::OptionsGroup > * getData () const;  ; virtual void setData (MyTData *d);  ; virtual void setData (MyData *d);  ;  Public Member Functions inherited from sofa::gui::qt::DataWidget;  DataWidget (QWidget *parent, const char *name, MyData *d);  ;  ~DataWidget () override;  ; virtual void setData (MyData *d);  ; const core::objectmodel::BaseData * getBaseData () const;  BaseData pointer accessor function. More...;  ; core::objectmodel::BaseData * getBaseData ();  ; void updateVisibility ();  ; bool isDirty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  . Protected Member Functions; virtual void readFromData ();  Implements how update the widgets knowing the data value. More...;  ; virtual void writeToData ();  Implements how to update the data, knowing the widget ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_radio_data_widget.html:2103,access,accessor,2103,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_radio_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_radio_data_widget.html,1,['access'],['accessor']
Security,"aseLink *link);  ;  Public Member Functions inherited from sofa::core::State< TDataTypes >;  SOFA_CLASS (SOFA_TEMPLATE(State, TDataTypes), BaseState);  ; sofa::type::TBoundingBox< Real > computeBBox () const;  Compute the bounding box independently from the visibility parameters. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible=false) override;  ; virtual Data< VecCoord > * write (VecCoordId v)=0;  ; virtual const Data< VecCoord > * read (ConstVecCoordId v) const =0;  ; virtual Data< VecDeriv > * write (VecDerivId v)=0;  ; virtual const Data< VecDeriv > * read (ConstVecDerivId v) const =0;  ; virtual Data< MatrixDeriv > * write (MatrixDerivId v)=0;  ; virtual const Data< MatrixDeriv > * read (ConstMatrixDerivId v) const =0;  ; objectmodel::BaseData * baseWrite (VecId v) override;  ; const objectmodel::BaseData * baseRead (ConstVecId v) const override;  ; ReadVecCoord readPositions () const;  ; WriteVecCoord writePositions ();  ; WriteOnlyVecCoord writeOnlyPositions ();  ; ReadVecCoord readRestPositions () const;  ; WriteVecCoord writeRestPositions ();  ; WriteOnlyVecCoord writeOnlyRestPositions ();  ; ReadVecDeriv readVelocities () const;  ; WriteVecDeriv writeVelocities ();  ; WriteOnlyVecDeriv writeOnlyVelocities ();  ; ReadVecDeriv readForces () const;  ; WriteVecDeriv writeForces ();  ; WriteOnlyVecDeriv writeOnlyForces ();  ; ReadVecDeriv readDx () const;  ; WriteVecDeriv writeDx ();  ; WriteOnlyVecDeriv writeOnlyDx ();  ; ReadVecDeriv readNormals () const;  ; const AccumulationVecId< TDataTypes, V_DERIV, V_READ > & readTotalForces () const;  Returns a proxy objects offering simplified access to elements of the cumulative sum of all force containers. More...;  ; void addToTotalForces (core::ConstVecDerivId forceId) override;  The provided VecDerivId will contribute to the sum of all force containers. More...;  ; void removeFromTotalForces (core::ConstVecDerivId forceId) override;  . Static Public Member Functions; template<class T >",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html:21231,access,access,21231,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mechanical_state.html,1,['access'],['access']
Security,"ass DataTypes > . Data<Real> sofa::component::mechanicalload::ConicalForceField< DataTypes >::damping. force damping . ◆ data. template<class DataTypes > . ConicalForceFieldInternalData<DataTypes> sofa::component::mechanicalload::ConicalForceField< DataTypes >::data. protected . ◆ stiffness. template<class DataTypes > . Data<Real> sofa::component::mechanicalload::ConicalForceField< DataTypes >::stiffness. force stiffness . Constructor details. ◆ ConicalForceField(). template<class DataTypes > . sofa::component::mechanicalload::ConicalForceField< DataTypes >::ConicalForceField. protected . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::mechanicalload::ConicalForceField< DataTypes >::addDForce ; (; const sofa::core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::mechanicalload::ConicalForceField< DataTypes >::addForce ; (; const sofa::core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ buildDampingMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::ConicalForceField< DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; ). finalvir",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_conical_force_field.html:20776,access,access,20776,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_conical_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_conical_force_field.html,1,['access'],['access']
Security,"ass DataTypes > . InternalData sofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >::data. protected . Constructor details. ◆ TriangularFEMForceFieldOptim(). template<class DataTypes > . sofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >::TriangularFEMForceFieldOptim. protected . ForceField API. . ◆ ~TriangularFEMForceFieldOptim(). template<class DataTypes > . sofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >::~TriangularFEMForceFieldOptim. protectedvirtual . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >::addKToMatrix ; (; sofa::lineara",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field_optim.html:26959,access,access,26959,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field_optim.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field_optim.html,1,['access'],['access']
Security,"ass< DataTypes >. ◆ addClambda() [1/2]. template<class TDataTypes > . virtual void sofa::core::behavior::BaseForceField::addClambda. inline . Accumulate the contribution of the C compliant matrix multiplied by the given Lagrange multipliers lambda vector with the given cFactor coefficient. ; This method computes . where C is the Compliant matrix (inverse of the Stiffness matrix : ) . ◆ addClambda() [2/2]. template<class DataTypes > . void sofa::core::behavior::ForceField< DataTypes >::addClambda ; (; const MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; lambda, . SReal ; cFactor . ). virtual . ◆ addDForce() [1/2]. template<class TDataTypes > . virtual void sofa::core::behavior::ForceField< TDataTypes >::addDForce ; (; const MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). pure virtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implemented in sofa::component::diffusion::TetrahedronDiffusionFEMForceField< DataTypes >, sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >, sofa::component::mechanicalload::EllipsoidForceField< DataTypes >, sofa::component::mechanicalload::ConicalForceField< DataTypes >, sofa::component::mechanicalload::TorsionForceField< DataTypes >, sofa::core::behavior::Mass< DataTypes >, sofa::component::solidmechanics::spring::RestShapeSpringsForceField< DataTypes >, sofa::component::solidmechanics::spring::PolynomialRestShapeSpringsForceField< DataTypes >, sofa::component::solidmechanics::spring::AngularSpringForceField< DataTypes >, sofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >, sofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >, sofa::c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_force_field.html:20679,access,access,20679,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_force_field.html,1,['access'],['access']
Security,"ate<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; d_df, . const DataVecDeriv & ; d_dx . ). inlineoverride . ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; d_f, . const DataVecCoord & ; d_x, . const DataVecDeriv & ; d_v . ). inlineoverride . ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). overridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the same large matrix. Each object adds its contribution to a different section of the matrix. That is why, an offset is used to identify where in the matrix the force field must start adding its contribution. ; kFactstiffness factor that needs to be multiplied to each matrix entry. ; offsetStarting index of the submatrix to fill in the global matrix. . Reimplemented from sofa::core::behavior::ForceField< DataTypes >. ◆ applyStiffnessCorotational(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TetrahedronFEMForceField< DataTypes >::applyStiffnessCorotational ; (; Vector & ; f, . const Vector & ; x, . Index ; i = 0, . Index ; a = 0, . Index ; b = 1, . Index ; c = 2, . Index ; d = 3, . SReal",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedron_f_e_m_force_field.html:50502,access,access,50502,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedron_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedron_f_e_m_force_field.html,1,['access'],['access']
Security,"ate<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly se",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:5498,access,access,5498,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,4,['access'],['access']
Security,"ation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_component_groups_visitor.html:9701,access,access,9701,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_component_groups_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_component_groups_visitor.html,5,['access'],['access']
Security,"ation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::MechanicalVisitor; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html:10108,access,access,10108,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_energy_visitor.html,2,['access'],['access']
Security,"ation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::st",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_assemble_global_vector_from_local_vector_visitor.html:10848,access,access,10848,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_assemble_global_vector_from_local_vector_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_assemble_global_vector_from_local_vector_visitor.html,3,['access'],['access']
Security,"ation::mechanicalvisitor::MechanicalPropagateOnlyVelocityVisitor Class Reference . #include <MechanicalPropagateOnlyVelocityVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyVelocityVisitor:. [legend]; Detailed Description; Propagate velocities to all the levels of the hierarchy. At each level, the mappings form the parent to the child is applied. After the execution of this action, all the (mapped) degrees of freedom are consistent with the independent degrees of freedom.; Note that this visitor only propagate through the mappings, and does not apply projective constraints as was previously done by MechanicalPropagateVelocityVisitor. Use MechanicalProjectVelocityVisitor before this visitor if projection is needed. . Public Attributes; SReal currentTime;  ; sofa::core::MultiVecDerivId v;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateOnlyVelocityVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecDerivId v=sofa::core::VecId::velocity());  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html:1272,access,access,1272,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_velocity_visitor.html,1,['access'],['access']
Security,"atrix. More...;  ; constexpr void operator= (const Mat< L2, C2, Real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, Real > &m) const noexcept;  ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, Real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const L",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:3399,access,access,3399,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,2,['access'],['access']
Security,"ayleighDamping(). SReal sofa::core::MechanicalParams::kFactorIncludingRayleighDamping ; (; SReal ; rayleighStiffness); const. inline . Returnskfactor + bfactor*rayleighStiffness . ◆ mFactor(). SReal sofa::core::MechanicalParams::mFactor ; (; ); const. inline . Mass matrix contributions factor (for implicit schemes) . ◆ mFactorIncludingRayleighDamping(). SReal sofa::core::MechanicalParams::mFactorIncludingRayleighDamping ; (; SReal ; rayleighMass); const. inline . Returnsmfactor + bfactor*rayleighMass . ◆ operator=(). MechanicalParams * sofa::core::MechanicalParams::operator= ; (; const MechanicalParams & ; mparams). ◆ readDf(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::MechanicalParams::readDf ; (; const S * ; state); const. inline . Read access to current df vector (for implicit schemes) . ◆ readDx(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::MechanicalParams::readDx ; (; const S * ; state); const. inline . Read access to current dx vector (for implicit schemes) . ◆ readF(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::MechanicalParams::readF ; (; const S * ; state); const. inline . Read access to current force vector. . ◆ readV(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::MechanicalParams::readV ; (; const S * ; state); const. inline . Read access to current velocity vector. . ◆ readX(). template<class S > . const Data<typename S::VecCoord>* sofa::core::MechanicalParams::readX ; (; const S * ; state); const. inline . Read access to current position vector. . ◆ setBFactor(). MechanicalParams& sofa::core::MechanicalParams::setBFactor ; (; SReal ; v). inline . Set Damping matrix contributions factor (for implicit schemes) . ◆ setDf() [1/3]. template<class StateSet > . MechanicalParams& sofa::core::MechanicalParams::setDf ; (; const StateSet & ; g, . ConstVecDerivId ; v . ). inline . ◆ setDf() [2/3]. MechanicalParams& sofa::core::MechanicalParams::setDf ; (; ConstMultiVecD",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html:13501,access,access,13501,api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,1,['access'],['access']
Security,"bool SOFA_CORE_API read (const std::string &str);  Specialization for reading booleans. More...;  ; bool read (const std::string &str);  Specialization for reading strings. More...;  ; bool read (const std::string &str);  Specialization for reading booleans. More...;  ; Simple edition and retrieval API; virtual T * beginEdit ();  ; virtual T * beginWriteOnly ();  ; virtual void endEdit ();  ; void setValue (const T &value);  ; const T & getValue () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:5117,access,access,5117,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,1,['access'],['access']
Security,"c::StandardTetrahedralFEMForceField< DataTypes >::updateMatrix. protected . the initial positions of the points . Constructor details. ◆ StandardTetrahedralFEMForceField(). template<class DataTypes > . sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >::StandardTetrahedralFEMForceField. protected . ◆ ~StandardTetrahedralFEMForceField(). template<class DataTypes > . sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >::~StandardTetrahedralFEMForceField. protectedvirtual . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >::addKToMatrix ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_standard_tetrahedral_f_e_m_force_field.html:25017,access,access,25017,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_standard_tetrahedral_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_standard_tetrahedral_f_e_m_force_field.html,1,['access'],['access']
Security,"c::TriangularFEMForceFieldOptim< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). overridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the same large matrix. Each object adds its contribution to a different section of the matrix. That is why, an offset is used to identify where in the matrix the force field must start adding its contribution. ; kFactstiffness factor that needs to be multiplied to each matrix entry. ; offsetStarting index of the submatrix to fill in the global matrix. . Reimplemented from sofa::core::behavior::ForceField< DataTypes >. ◆ buildDampingMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; ). finalvirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ buildStiffnessMatrix(). templ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field_optim.html:28200,access,access,28200,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field_optim.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field_optim.html,1,['access'],['access']
Security,"cType vtype> ; void vFreeImpl (core::TVecId< vtype, core::V_WRITE > v);  Generic implementation of the method vFree. More...;  ; template<core::VecType vtype> ; void vInitImpl (const core::ExecParams *params, core::TVecId< vtype, core::V_WRITE > vId, core::TVecId< vtype, core::V_READ > vSrcId);  Generic implementation of the method vInit. More...;  ; template<core::VecType vtype> ; helper::WriteOnlyAccessor< core::objectmodel::Data< core::StateVecType_t< DataTypes, vtype > > > getWriteOnlyAccessor (core::VecId v);  Shortcut to get a write-only accessor corresponding to the provided VecType from a VecId. More...;  ; template<core::VecType vtype> ; helper::WriteAccessor< core::objectmodel::Data< core::StateVecType_t< DataTypes, vtype > > > getWriteAccessor (core::VecId v);  Shortcut to get a write accessor corresponding to the provided VecType from a VecId. More...;  ; template<core::VecType vtype> ; helper::ReadAccessor< core::objectmodel::Data< core::StateVecType_t< DataTypes, vtype > > > getReadAccessor (core::ConstVecId v);  Shortcut to get a read accessor corresponding to the provided VecType from a VecId. More...;  ; void drawIndices (const core::visual::VisualParams *vparams);  Internal function : Draw indices in 3d coordinates. More...;  ; void drawVectors (const core::visual::VisualParams *vparams);  Internal function : Draw vectors. More...;  ;  Protected Member Functions inherited from sofa::core::behavior::MechanicalState< DataTypes >;  ~MechanicalState () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseMechanicalState;  BaseMechanicalState ();  ;  ~BaseMechanicalState () override;  ;  Protected Member Functions inherited from sofa::core::BaseState;  BaseState ();  ;  ~BaseState () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextL",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:30891,access,accessor,30891,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['access'],['accessor']
Security,"cause it resize the vector without device operation (if device is not valid). Therefore the function is used in asynchronous code to safely resize a vector which is either cuda of type::vector . ◆ fill(). template<class T , class MemoryManager = CPUMemoryManager<T>> . void sofa::type::vector< T, MemoryManager >::fill ; (; const T & ; value). inline . Sets every element to 'value'. . ◆ operator=() [1/2]. template<class T , class MemoryManager = CPUMemoryManager<T>> . vector& sofa::type::vector< T, MemoryManager >::operator= ; (; const std::vector< T, Alloc > & ; x). inline . Copy operator. . ◆ operator=() [2/2]. template<class T , class MemoryManager = CPUMemoryManager<T>> . vector& sofa::type::vector< T, MemoryManager >::operator= ; (; std::vector< T, Alloc > && ; v). inline . Move assignment operator. . ◆ operator[]() [1/2]. template<class T , class MemoryManager = CPUMemoryManager<T>> . reference sofa::type::vector< T, MemoryManager >::operator[] ; (; Size ; n). inline . Read/write random access. . ◆ operator[]() [2/2]. template<class T , class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::type::vector< T, MemoryManager >::operator[] ; (; Size ; n); const. inline . Read-only random access. . ◆ read() [1/7]. SOFA_TYPE_API std::istream & sofa::type::vector< int >::read ; (; std::istream & ; in). Input stream Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B, optionally specifying a step using ""A-B-step"" notation. . ◆ read() [2/7]. SOFA_TYPE_API std::istream & sofa::type::vector< unsigned int >::read ; (; std::istream & ; in). Input stream Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B . ◆ read() [3/7]. SOFA_TYPE_API std::istream & sofa::type::vector< unsigned char >::read ; (; std::istream & ; in). Input stream Specialization for reading vectors of unsigned char . ◆ read() [4/7]. SOFA_TYPE_API std::istream & sofa::type::vect",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector.html:5396,access,access,5396,api/master/sofa/html/classsofa_1_1type_1_1vector.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector.html,1,['access'],['access']
Security,"ce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Add the forces. ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKeyForce(). template<class DataTypes > . void sofa::component::mechanicalload::LinearForceField< DataTypes >::addKeyForce ; (; Real ; time, . Deriv ; force . ). Add a new key force. Key force should be added in classified order.; Parameters. timethe simulation time you want to set a movement (in sec) ; forcethe corresponding force . ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::LinearForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). overridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the same large matrix. Each object adds its contribution to a different section of the matrix. That is why, an offset is used to identify where in the matrix the force field must start adding its contribution. ; kFactstiffness factor that needs to be multiplied to each matrix entry. ; offsetStarting index of the submatrix to fill in the global matrix. . Reimplemented from sofa::core::behavior::ForceField< DataTypes >. ◆ addPoint(). template<class DataTypes > . void sofa::component::mechanicalload::LinearForceField< DataTypes >::addPoint ; (; unsigned ; index). methods to add/remove some indices, keyTimes, keyForces . ◆ buildDampingMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::LinearForceField< ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_linear_force_field.html:23444,access,access,23444,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_linear_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_linear_force_field.html,1,['access'],['access']
Security,"ces. . ◆ j() [2/2]. const MultiMatrixDerivId& sofa::core::ConstraintParams::j ; (; ); const. inline . Returns ids of the constraint jacobian matrices. . ◆ lambda() [1/2]. MultiVecDerivId& sofa::core::ConstraintParams::lambda ; (; ). inline . Returns ids of the constraint lambda vectors. . ◆ lambda() [2/2]. const MultiVecDerivId& sofa::core::ConstraintParams::lambda ; (; ); const. inline . Returns ids of the constraint lambda vectors. . ◆ readDx(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::ConstraintParams::readDx ; (; S * ; state); const. inline . Read access to the constraint corrective motion vector. . ◆ readJ(). template<class S > . const Data<typename S::MatrixDeriv>* sofa::core::ConstraintParams::readJ ; (; const S * ; state); const. inline . Read access to the constraint jacobian matrix. . ◆ readLambda(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::ConstraintParams::readLambda ; (; S * ; state); const. inline . Read access to the constraint force vector. . ◆ readV(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::ConstraintParams::readV ; (; const S * ; state); const. inline . Read access to the free (unconstrained) velocity vector. . ◆ readX(). template<class S > . const Data<typename S::VecCoord>* sofa::core::ConstraintParams::readX ; (; const S * ; state); const. inline . Read access to the free (unconstrained) position vector. . ◆ setDx() [1/3]. template<class StateSet > . ConstraintParams& sofa::core::ConstraintParams::setDx ; (; const StateSet & ; g, . MultiVecDerivId ; dx . ). inline . ◆ setDx() [2/3]. ConstraintParams& sofa::core::ConstraintParams::setDx ; (; MultiVecDerivId ; dx). inline . ◆ setDx() [3/3]. ConstraintParams& sofa::core::ConstraintParams::setDx ; (; VecDerivId ; dx). inline . Set the IDs where to write corrective displacement vector. . ◆ setExecParams(). ConstraintParams & sofa::core::ConstraintParams::setExecParams ; (; const core::ExecParams * ; params). ◆ setJ() [1/3",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html:9457,access,access,9457,api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html,1,['access'],['access']
Security,"cess to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const L",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:4566,access,access,4566,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,2,['access'],['access']
Security,"chanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >::addGravityToV ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; d_v . ). overridevirtual . Reimplemented from sofa::core::behavior::Mass< DataTypes >.; Reimplemented in sofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedronFEMForceFieldAndMass< DataTypes >. ◆ addKToMatrix() [1/2]. template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >::addKToMatrix. override . ◆ addKToMatrix() [2/2]. template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). inlineoverridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the same large matrix. Each object adds its contribution to a different section of the matrix. That is why, an offset is used to identify where in the matrix the force field must start adding its contribution. ; kFactstiffness factor that needs to be multiplied to each matrix entry. ; offsetStarting index of the submatrix to fill in the global matrix. . Reimplemented from sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >. ◆ addMDx(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >::addMDx ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; f, . const DataVecDeriv & ; dx, . SReal ; factor . ). overridev",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass.html:33960,access,access,33960,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field_and_mass.html,1,['access'],['access']
Security,"chemes) . ◆ m_energy. bool sofa::core::MechanicalParams::m_energy. protected . Should the kinematic and potential energies be computed ? . ◆ m_f. ConstMultiVecDerivId sofa::core::MechanicalParams::m_f. protected . Ids of force vector. . ◆ m_implicit. bool sofa::core::MechanicalParams::m_implicit. protected . Is the time integration scheme implicit ? . ◆ m_implicitPosition. SReal sofa::core::MechanicalParams::m_implicitPosition. protected . ratio of future and current velocity used for position update (1 is fully implicit, 0 is fully explicit) . ◆ m_implicitVelocity. SReal sofa::core::MechanicalParams::m_implicitVelocity. protected . ratio of future and current force used for velocity update (1 is fully implicit, 0 is fully explicit) . ◆ m_kFactor. SReal sofa::core::MechanicalParams::m_kFactor. protected . Stiffness matrix contributions factor (for implicit schemes) . ◆ m_kFactorUsed. bool sofa::core::MechanicalParams::m_kFactorUsed. mutableprotected . Checks if the stiffness matrix contributions factor has been accessed. . ◆ m_mFactor. SReal sofa::core::MechanicalParams::m_mFactor. protected . Mass matrix contributions factor (for implicit schemes) . ◆ m_supportOnlySymmetricMatrix. bool sofa::core::MechanicalParams::m_supportOnlySymmetricMatrix. protected . True if a symmetric matrix is assumed in the left-hand term of the dynamics equations, for solvers specialized on symmetric matrices. . ◆ m_v. ConstMultiVecDerivId sofa::core::MechanicalParams::m_v. protected . Ids of velocity vector. . ◆ m_x. ConstMultiVecCoordId sofa::core::MechanicalParams::m_x. protected . Ids of position vector. . Constructor details. ◆ MechanicalParams() [1/2]. sofa::core::MechanicalParams::MechanicalParams ; (; const sofa::core::ExecParams & ; p = sofa::core::ExecParams()). Constructor, initializing all VecIds to default values, implicit and energy flags to false. . ◆ MechanicalParams() [2/2]. sofa::core::MechanicalParams::MechanicalParams ; (; const MechanicalParams & ; mparams). Copy Cons",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html:9804,access,accessed,9804,api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,1,['access'],['accessed']
Security,"cit Index. More...;  ; const_reference operator[] (Index n) const;  Read-only random access. More...;  ; Index push_back (const_reference v);  ;  Public Member Functions inherited from sofa::type::vector< T, MemoryManager >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< T, Alloc > &&v);  Move assignment operator. More...;  ;  vector (typename vector< T >::const_iterator first, typename vector< T >::const_iterator last);  Constructor. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. More...;  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; void fill (const T &value);  Sets every element to 'value'. More...;  ; void fastResize (Size n);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  Specialization for writing vectors of unsigned char. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:2406,access,access,2406,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,1,['access'],['access']
Security,"class DataTypes > . bool sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::updateMatrix. protected . Constructor details. ◆ TetrahedralTensorMassForceField(). template<class DataTypes > . sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::TetrahedralTensorMassForceField. protected . ◆ ~TetrahedralTensorMassForceField(). template<class DataTypes > . sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::~TetrahedralTensorMassForceField. protectedvirtual . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ applyTetrahedronCreation(). template<class DataTypes > . void sofa::component::solidmechanics::tensormass::TetrahedralTensorMassForceField< DataTypes >::applyTetrahedronC",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html:24036,access,access,24036,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_tetrahedral_tensor_mass_force_field.html,1,['access'],['access']
Security,"class DataTypes > ; StateVecAccessor< DataTypes, vtype, V_READ > operator[] (const State< DataTypes > *s) const;  . Static Public Member Functions; static TMultiVecId< vtype, vaccess > null ();  . Protected Member Functions; IdMap & writeIdMap ();  . Friends; template<VecType vtype2, VecAccess vaccess2> ; class TMultiVecId;  ; std::ostream & operator<< (std::ostream &out, const TMultiVecId< vtype, vaccess > &v);  . Attribute details. ◆ defaultId. template<VecType vtype, VecAccess vaccess> . MyVecId sofa::core::TMultiVecId< vtype, vaccess >::defaultId. protected . Constructor details. ◆ TMultiVecId() [1/5]. template<VecType vtype, VecAccess vaccess> . sofa::core::TMultiVecId< vtype, vaccess >::TMultiVecId ; (; ). default . ◆ TMultiVecId() [2/5]. template<VecType vtype, VecAccess vaccess> . template<VecAccess vaccess2> . sofa::core::TMultiVecId< vtype, vaccess >::TMultiVecId ; (; const TVecId< vtype, vaccess2 > & ; v). inline . Copy from another VecId, possibly with another type of access, with the constraint that the access must be compatible (i.e. cannot create a write-access VecId from a read-only VecId. . ◆ TMultiVecId() [3/5]. template<VecType vtype, VecAccess vaccess> . sofa::core::TMultiVecId< vtype, vaccess >::TMultiVecId ; (; const TMultiVecId< vtype, vaccess > & ; mv). inline . ◆ TMultiVecId() [4/5]. template<VecType vtype, VecAccess vaccess> . template<VecAccess vaccess2> . sofa::core::TMultiVecId< vtype, vaccess >::TMultiVecId ; (; const TMultiVecId< vtype, vaccess2 > & ; mv). inline . ◆ TMultiVecId() [5/5]. template<VecType vtype, VecAccess vaccess> . template<VecAccess vaccess2> . sofa::core::TMultiVecId< vtype, vaccess >::TMultiVecId ; (; const TMultiVecId< V_ALL, vaccess2 > & ; mv). inlineexplicit . Function details. ◆ assign(). template<VecType vtype, VecAccess vaccess> . void sofa::core::TMultiVecId< vtype, vaccess >::assign ; (; const MyVecId & ; id). inline . ◆ getDefaultId(). template<VecType vtype, VecAccess vaccess> . const MyVecId& sofa::core::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_t_multi_vec_id.html:3287,access,access,3287,api/master/sofa/html/classsofa_1_1core_1_1_t_multi_vec_id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_t_multi_vec_id.html,2,['access'],['access']
Security,"component::solidmechanics::fem::elastic::QuadBendingFEMForceField< DataTypes >::QuadBendingFEMForceField. protected . ForceField API. . ◆ ~QuadBendingFEMForceField(). template<class DataTypes > . sofa::component::solidmechanics::fem::elastic::QuadBendingFEMForceField< DataTypes >::~QuadBendingFEMForceField. overrideprotected . Function details. ◆ accumulateForceSmall(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::QuadBendingFEMForceField< DataTypes >::accumulateForceSmall ; (; VecCoord & ; f, . const VecCoord & ; p, . Index ; elementIndex . ). protected . ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::QuadBendingFEMForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::QuadBendingFEMForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ applyStiffness(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::QuadBendingFEMForceField< DataTypes >::applyStiffness ; (; VecCoord & ; f, .",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_quad_bending_f_e_m_force_field.html:26542,access,access,26542,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_quad_bending_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_quad_bending_f_e_m_force_field.html,1,['access'],['access']
Security,"const ClassInfo &class_info, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; virtual void * getObject (const ClassInfo &class_info, const std::string &path) const;  ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, SearchDirection dir=SearchUp) const;  ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:4703,access,access,4703,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,2,['access'],['access']
Security,"const Mat< L, C, real2 > & ; m). inlineconstexprnoexcept . Assignment from another matrix. . ◆ operator=() [2/3]. template<sofa::Size L, sofa::Size C, class real > . template<Size L2, Size C2> . constexpr void sofa::type::Mat< L, C, real >::operator= ; (; const Mat< L2, C2, real > & ; m). inlineconstexprnoexcept . Assignment from a matrix of different size. . ◆ operator=() [3/3]. template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::operator= ; (; const real * ; p). inlineconstexprnoexcept . Assignment from an array of elements (stored per line). . ◆ operator==(). template<sofa::Size L, sofa::Size C, class real > . constexpr bool sofa::type::Mat< L, C, real >::operator== ; (; const Mat< L, C, real > & ; b); const. inlineconstexprnoexcept . ◆ operator[]() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr const LineNoInit& sofa::type::Mat< L, C, real >::operator[] ; (; Size ; i); const. inlineconstexprnoexcept . Read-only access to line i. . ◆ operator[]() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr LineNoInit& sofa::type::Mat< L, C, real >::operator[] ; (; Size ; i). inlineconstexprnoexcept . Write access to line i. . ◆ plusTransposed(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::plusTransposed ; (; const Mat< C, L, real > & ; m); const. inlineconstexprnoexcept . Addition with the transposed of the given matrix operator. ; Returnsthis + mt . ◆ ptr() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr const real* sofa::type::Mat< L, C, real >::ptr ; (; ); const. inlineconstexprnoexcept . Cast into a standard C array of elements (stored per line) (read-only). . ◆ ptr() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr real* sofa::type::Mat< L, C, real >::ptr ; (; ). inlineconstexprnoexcept . Cast into a standard C array of elements (stored per line). . ◆ setsub() [1/2]. template<sofa:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:27739,access,access,27739,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,1,['access'],['access']
Security,"const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_add_to_matrix_compat_matrix.html:7236,access,access,7236,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_add_to_matrix_compat_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_add_to_matrix_compat_matrix.html,11,['access'],['access']
Security,"constexpr const_iterator begin () const noexcept;  ; constexpr const_iterator cbegin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr const_iterator cend () const noexcept;  ; constexpr reference operator[] (size_type i);  ; constexpr const_reference operator[] (size_type i) const;  ; constexpr Deriv & get () &noexcept;  ; constexpr const Deriv & get () const &noexcept;  ; constexpr Deriv && get () &&noexcept;  ; constexpr const Deriv && get () const &&noexcept;  ; constexpr reference at (size_type i);  ; constexpr const_reference at (size_type i) const;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; void swap (fixed_array< Deriv, N > &y);  ; constexpr const Deriv * data () const noexcept;  ; constexpr const Array & array () const noexcept;  direct access to array More...;  ; constexpr Array & array () noexcept;  direct access to array More...;  ; constexpr fixed_array< Deriv, N > & operator= (const fixed_array< T2, N > &rhs) noexcept;  ; constexpr void assign (const Deriv &value) noexcept;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::fixed_array< Deriv, 3 >; Deriv elems [N];  ;  Static Public Member Functions inherited from sofa::type::fixed_array< Deriv, 3 >; static constexpr size_type size () noexcept;  ; static bool empty () noexcept;  ; static constexpr size_type max_size () noexcept;  . Function details. ◆ operator*(). template<class DataTypes > . Deriv sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >::Mat3::operator* ; (; const Deriv & ; v). inline . ◆ transposeMultiply(). template<class DataTypes > . Deriv sofa::component::solidmechanics::spring::TriangularBiquadraticSpringsForceField< DataTypes >::Mat3::transposeMultiply ; (; const Deriv & ; v). inline . sofacomponentsolidmechanicsspringTriangularBiqua",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field_1_1_mat3.html:1982,access,access,1982,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field_1_1_mat3.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_biquadratic_springs_force_field_1_1_mat3.html,1,['access'],['access']
Security,"constexpr const_iterator begin () const noexcept;  ; constexpr const_iterator cbegin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr const_iterator cend () const noexcept;  ; constexpr reference operator[] (size_type i);  ; constexpr const_reference operator[] (size_type i) const;  ; constexpr Deriv & get () &noexcept;  ; constexpr const Deriv & get () const &noexcept;  ; constexpr Deriv && get () &&noexcept;  ; constexpr const Deriv && get () const &&noexcept;  ; constexpr reference at (size_type i);  ; constexpr const_reference at (size_type i) const;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; void swap (fixed_array< Deriv, N > &y);  ; constexpr const Deriv * data () const noexcept;  ; constexpr const Array & array () const noexcept;  direct access to array More...;  ; constexpr Array & array () noexcept;  direct access to array More...;  ; constexpr fixed_array< Deriv, N > & operator= (const fixed_array< T2, N > &rhs) noexcept;  ; constexpr void assign (const Deriv &value) noexcept;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::fixed_array< Deriv, 3 >; Deriv elems [N];  ;  Static Public Member Functions inherited from sofa::type::fixed_array< Deriv, 3 >; static constexpr size_type size () noexcept;  ; static bool empty () noexcept;  ; static constexpr size_type max_size () noexcept;  . Function details. ◆ operator*(). template<class DataTypes > . Deriv sofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >::Mat3::operator* ; (; const Deriv & ; v). inline . ◆ transposeMultiply(). template<class DataTypes > . Deriv sofa::component::solidmechanics::spring::TriangularQuadraticSpringsForceField< DataTypes >::Mat3::transposeMultiply ; (; const Deriv & ; v). inline . sofacomponentsolidmechanicsspringTriangularQuadratic",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_quadratic_springs_force_field_1_1_mat3.html:1974,access,access,1974,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_quadratic_springs_force_field_1_1_mat3.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_quadratic_springs_force_field_1_1_mat3.html,1,['access'],['access']
Security,"constexpr const_iterator begin () const noexcept;  ; constexpr const_iterator cbegin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr const_iterator cend () const noexcept;  ; constexpr reference operator[] (size_type i);  ; constexpr const_reference operator[] (size_type i) const;  ; constexpr Deriv & get () &noexcept;  ; constexpr const Deriv & get () const &noexcept;  ; constexpr Deriv && get () &&noexcept;  ; constexpr const Deriv && get () const &&noexcept;  ; constexpr reference at (size_type i);  ; constexpr const_reference at (size_type i) const;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; void swap (fixed_array< Deriv, N > &y);  ; constexpr const Deriv * data () const noexcept;  ; constexpr const Array & array () const noexcept;  direct access to array More...;  ; constexpr Array & array () noexcept;  direct access to array More...;  ; constexpr fixed_array< Deriv, N > & operator= (const fixed_array< T2, N > &rhs) noexcept;  ; constexpr void assign (const Deriv &value) noexcept;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::fixed_array< Deriv, 3 >; Deriv elems [N];  ;  Static Public Member Functions inherited from sofa::type::fixed_array< Deriv, 3 >; static constexpr size_type size () noexcept;  ; static bool empty () noexcept;  ; static constexpr size_type max_size () noexcept;  . Function details. ◆ operator*(). template<class DataTypes > . Deriv sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::Mat3::operator* ; (; const Deriv & ; v). inline . ◆ transposeMultiply(). template<class DataTypes > . Deriv sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::Mat3::transposeMultiply ; (; const Deriv & ; v). inline . sofacomponentsolidmechanicstensormassTriangularTensorMas",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field_1_1_mat3.html:1962,access,access,1962,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field_1_1_mat3.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field_1_1_mat3.html,1,['access'],['access']
Security,"core::StateVecType_t< DataTypes, vtype > > * > &dataContainer);  Generic implementation of the method vAvail. More...;  ; template<core::VecType vtype> ; void vAllocImpl (core::TVecId< vtype, core::V_WRITE > v, const core::VecIdProperties &properties);  Generic implementation of the method vAlloc. More...;  ; template<core::VecType vtype> ; void vReallocImpl (core::TVecId< vtype, core::V_WRITE > v, const core::VecIdProperties &properties);  Generic implementation of the method vRealloc. More...;  ; template<core::VecType vtype> ; void vFreeImpl (core::TVecId< vtype, core::V_WRITE > v);  Generic implementation of the method vFree. More...;  ; template<core::VecType vtype> ; void vInitImpl (const core::ExecParams *params, core::TVecId< vtype, core::V_WRITE > vId, core::TVecId< vtype, core::V_READ > vSrcId);  Generic implementation of the method vInit. More...;  ; template<core::VecType vtype> ; helper::WriteOnlyAccessor< core::objectmodel::Data< core::StateVecType_t< DataTypes, vtype > > > getWriteOnlyAccessor (core::VecId v);  Shortcut to get a write-only accessor corresponding to the provided VecType from a VecId. More...;  ; template<core::VecType vtype> ; helper::WriteAccessor< core::objectmodel::Data< core::StateVecType_t< DataTypes, vtype > > > getWriteAccessor (core::VecId v);  Shortcut to get a write accessor corresponding to the provided VecType from a VecId. More...;  ; template<core::VecType vtype> ; helper::ReadAccessor< core::objectmodel::Data< core::StateVecType_t< DataTypes, vtype > > > getReadAccessor (core::ConstVecId v);  Shortcut to get a read accessor corresponding to the provided VecType from a VecId. More...;  ; void drawIndices (const core::visual::VisualParams *vparams);  Internal function : Draw indices in 3d coordinates. More...;  ; void drawVectors (const core::visual::VisualParams *vparams);  Internal function : Draw vectors. More...;  ;  Protected Member Functions inherited from sofa::core::behavior::MechanicalState< DataTypes >;  ~Mechani",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:30375,access,accessor,30375,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['access'],['accessor']
Security,"core::objectmodel::Data< sofa::type::vector< sofa::type::Material > >, sofa::core::objectmodel::Data< sofa::type::Material >, sofa::core::objectmodel::Data< sofa::type::vector< sofa::component::collision::geometry::TTriangle > >, sofa::core::objectmodel::Data< sofa::type::vector< Hexa > >, sofa::core::objectmodel::Data< sofa::type::vector< Quad > >, sofa::core::objectmodel::Data< vector< Triangle > >, sofa::core::objectmodel::Data< SeqPositions >, sofa::core::objectmodel::Data< sofa::type::vector< sofa::type::fixed_array< unsigned int, 8 > > >, sofa::core::objectmodel::Data< sofa::type::SVector< SkeletonBone > >, sofa::core::objectmodel::Data< Mat< 3, 3, Real > >, and sofa::core::objectmodel::Data< sofa::type::vector< SReal > >. ◆ getValueTypeInfo(). virtual const sofa::defaulttype::AbstractTypeInfo* sofa::core::objectmodel::BaseData::getValueTypeInfo ; (; ); const. pure virtual . Get the TypeInfo for the type of the value held in this Data.; This can be used to access the content of the Data generically, without knowing its type. See alsosofa::defaulttype::AbstractTypeInfo ; Implemented in sofa::core::objectmodel::Data< T >, sofa::core::objectmodel::Data< sofa::type::BoundingBox >, sofa::core::objectmodel::Data< sofa::core::objectmodel::TagSet >, sofa::core::objectmodel::Data< SeqTetrahedra >, sofa::core::objectmodel::Data< sofa::type::Vec< 2, int > >, sofa::core::objectmodel::Data< sofa::type::RGBAColor >, sofa::core::objectmodel::Data< std::map< std::string, sofa::type::vector< double > > >, sofa::core::objectmodel::Data< sofa::type::vector< sofa::type::fixed_array< int, 3 > > >, sofa::core::objectmodel::Data< long >, sofa::core::objectmodel::Data< sofa::type::vector< sofa::type::vector< sofa::Index > > >, sofa::core::objectmodel::Data< sofa::type::vector< unsigned int > >, sofa::core::objectmodel::Data< sofa::type::Vec >, sofa::core::objectmodel::Data< Deriv >, sofa::core::objectmodel::Data< sofa::type::vector< sofa::type::fixed_array< std::string, 2 > > >, sofa:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:49557,access,access,49557,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,1,['access'],['access']
Security,"ct surface meshes to mapped system. /adding-forces-to-mechanical-objects; . /feed; ; [SOLVED] Adding Forces to Mechanical Objects – SOFA. SOFA - Topic: [SOLVED] Adding Forces to Mechanical Objects. /adding-initial-velocity-to-fixedconstraint; ; SOFA - Topic: Adding initial velocity to FixedConstraint. /adding-new-template-for-mechanicalobject; ; SOFA - Topic: Adding new template for MechanicalObject. /adding-nodes-at-runtime-with-sofapython3-and-changing-colors-of-mesh; ; SOFA - Topic: [SOLVED] Adding Nodes at Runtime with SofaPython3 and changing Colors of Mesh. /adding-sofagui-namespace; ; SOFA - Topic: Adding sofa/gui namespace. /adding-sofa-module-to-spyder; ; SOFA - Topic: [SOLVED] Adding SOFA module to Spyder. /adding-sofo-to-module; ; SOFA - Topic: Adding Sofo to module. /a-few-doubts-related-to-robotics-application-of-sofa; ; SOFA - Topic: A few doubts related to Robotics application of SOFA. /after-sofa-debug-mode-build-load-beamadapter-file-vector-access-failure; ; SOFA - Topic: [SOLVED] after sofa debug mode build, load BeamAdapter file, vector access failure. /aligning-camera-and-virtual-tool; . /feed; ; [SOLVED] Aligning camera and virtual tool – SOFA. SOFA - Topic: [SOLVED] Aligning camera and virtual tool. /alternative-for-articulatedhierarchycontroller; ; SOFA - Topic: Alternative for ArticulatedHierarchyController. /alternative-for-tetrahedronsettopologyalgorithms; ; SOFA - Topic: Alternative for TetrahedronSetTopologyAlgorithms?. /angularspring-problems; ; SOFA - Topic: [SOLVED] AngularSpring Problems. /animating-the-movement-of-scissors-with-omni; ; SOFA - Topic: [SOLVED] animating the movement of scissors with omni. /animation-issue-error-in-phase-3-of-mor-plugin-please-help; . /embed; ; SOFA - Topic: [SOLVED] Animation issue Error in phase 3 of MOR plugin. Please Help!. SOFA - Topic: [SOLVED] Animation issue Error in phase 3 of MOR plugin. Please Help!. /animationloop-visitors-and-tags; ; SOFA - Topic: [SOLVED] AnimationLoop, Visitors and Tags. ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:255261,access,access-failure,255261,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['access'],"['access', 'access-failure']"
Security,ct-inside-another-one; ; SOFA - Topic: [SOLVED] Putting an object inside another one. /putting-histogram-on-view; . /page; . /3; ; SOFA - Topic: [SOLVED] putting histogram on view. /5; ; SOFA - Topic: [SOLVED] putting histogram on view. SOFA - Topic: [SOLVED] putting histogram on view. /pyscn-files-not-opening-despite-having-python-3-8; ; SOFA - Topic: PYSCN files not opening despite having python 3.8. /pyscn-file-softrobotics-plugin; ; SOFA - Topic: [SOLVED] .pyscn file (SoftRobotics Plugin). /python3-windows-build-controller-results-in-segfault; ; SOFA - Topic: Python3 Windows build – Controller results in segfault. /pythonlibs-not-found; ; SOFA - Topic: PythonLibs not found. /python-runtime-fatal-error-with-gil; ; SOFA - Topic: Python runtime fatal error with GIL. /python-scene-errors; . /embed; ; SOFA - Topic: Python scene errors. SOFA - Topic: Python scene errors. /qsqltable-and-qsqldatabase-created-in-qt-are-not-accessible-in-sofa; . /feed; ; [SOLVED] QSqlTable and QSqlDatabase created in QT are not accessible in sofa – SOFA. SOFA - Topic: [SOLVED] QSqlTable and QSqlDatabase created in QT are not accessible in sofa. /qsqltable-and-qsqldatabase-created-in-qt-are-not-accessible-in-sofa-2; ; SOFA - Topic: QSqlTable and QSqlDatabase created in QT are not accessible in sofa. /qt5quick-directory-is-not-found-how-to-fix-this-error; . /feed; ; [SOLVED] Qt5Quick directory is not found. how to fix this error – SOFA. SOFA - Topic: [SOLVED] Qt5Quick directory is not found. how to fix this error. /qtableview-graph-linked-with-sofa-scene-file; ; SOFA - Topic: QTableView graph linked with SOFA scene file. /qtableview-saving-data-into-sqlite; ; SOFA - Topic: QTableView saving data into sqlite. /qt-version-issues-on-windows; . /page; . /13; ; SOFA - Topic: [SOLVED] Qt version issues on Windows. /4; ; SOFA - Topic: [SOLVED] Qt version issues on Windows. SOFA - Topic: [SOLVED] Qt version issues on Windows. /quarter-window-display-on-macos; ; SOFA - Topic: Quarter-window display ,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:371456,access,accessible,371456,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['access'],['accessible']
Security,"current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [1/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObjects() [2/6]. void sofa::core::objectmodel::BaseContext::getObjects ; (; const ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObjects() [3/6]. template<class Container > . Container& sofa::core::objectmodel::BaseContext::getObjects ; (; Container & ; result, . SearchDirection ; dir = SearchUp . ). inline . Returns a list of object of type passed as a parameter. eg: sofa::type::vector<VisualModel*> results; context->getObjects(results) ; . ◆ getObjects() [4/6]. template<class Object , class Container > . void sofa::core::objectmodel::BaseContext::getObjects ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ). inline . List all objects of this node deriving from a given class. . ◆ getObjects() [5/6]. template<class Container > . Container* sofa::core::objectmodel::BaseContext::getObjects ; (; Container * ; result, . SearchDirection ; dir = SearchUp . ). inline . Returns a list of object of type passed as a parameter. . ◆ getObjects() [6/6]. template<class Object = sofa::core::object",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:26966,access,access,26966,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['access'],['access']
Security,"d by component Init method. Will create all the topology neighborhood buffers and call. ; Dynamic Topology API See alsoTriangleSetTopologyContainer::initTopology() . ◆ isHexahedronTopologyDirty(). const bool& sofa::component::topology::container::dynamic::HexahedronSetTopologyContainer::isHexahedronTopologyDirty ; (; ). inlineprotected . ◆ linkTopologyHandlerToData(). bool sofa::component::topology::container::dynamic::HexahedronSetTopologyContainer::linkTopologyHandlerToData ; (; core::topology::TopologyHandler * ; topologyHandler, . sofa::geometry::ElementType ; elementType . ). overridevirtual . \ brief Generic function to link potential data (related to a type of element) with a topologyHandler ; Reimplemented from sofa::component::topology::container::dynamic::EdgeSetTopologyContainer. ◆ setHexahedronTopologyToDirty(). void sofa::component::topology::container::dynamic::HexahedronSetTopologyContainer::setHexahedronTopologyToDirty ; (; ). protected . Use a specific boolean See alsom_hexahedronTopologyDirty in order to know if topology Data is dirty or not. Set/Get function access to this boolean . ◆ SOFA_CLASS(). sofa::component::topology::container::dynamic::HexahedronSetTopologyContainer::SOFA_CLASS ; (; HexahedronSetTopologyContainer ; , . QuadSetTopologyContainer ;  . ). ◆ unlinkTopologyHandlerToData(). bool sofa::component::topology::container::dynamic::HexahedronSetTopologyContainer::unlinkTopologyHandlerToData ; (; core::topology::TopologyHandler * ; topologyHandler, . sofa::geometry::ElementType ; elementType . ). overridevirtual . \ brief Generic function to link potential data (related to a type of element) with a topologyHandler ; Reimplemented from sofa::component::topology::container::dynamic::EdgeSetTopologyContainer. Related details. ◆ HexahedronSetTopologyModifier. friend class HexahedronSetTopologyModifier. friend . sofacomponenttopologycontainerdynamicHexahedronSetTopologyContainer; Generated on Mon Nov 11 2024 03:10:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_container.html:67571,access,access,67571,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_container.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_container.html,1,['access'],['access']
Security,"d sofa::type::Mat< L, C, real >::operator= ; (; const Mat< L2, C2, real > & ; m). inlineconstexprnoexcept . Assignment from a matrix of different size. . ◆ operator=() [3/3]. template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::operator= ; (; const real * ; p). inlineconstexprnoexcept . Assignment from an array of elements (stored per line). . ◆ operator==(). template<sofa::Size L, sofa::Size C, class real > . constexpr bool sofa::type::Mat< L, C, real >::operator== ; (; const Mat< L, C, real > & ; b); const. inlineconstexprnoexcept . ◆ operator[]() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr const LineNoInit& sofa::type::Mat< L, C, real >::operator[] ; (; Size ; i); const. inlineconstexprnoexcept . Read-only access to line i. . ◆ operator[]() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr LineNoInit& sofa::type::Mat< L, C, real >::operator[] ; (; Size ; i). inlineconstexprnoexcept . Write access to line i. . ◆ plusTransposed(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::plusTransposed ; (; const Mat< C, L, real > & ; m); const. inlineconstexprnoexcept . Addition with the transposed of the given matrix operator. ; Returnsthis + mt . ◆ ptr() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr const real* sofa::type::Mat< L, C, real >::ptr ; (; ); const. inlineconstexprnoexcept . Cast into a standard C array of elements (stored per line) (read-only). . ◆ ptr() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr real* sofa::type::Mat< L, C, real >::ptr ; (; ). inlineconstexprnoexcept . Cast into a standard C array of elements (stored per line). . ◆ setsub() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<Size L2, Size C2> . constexpr void sofa::type::Mat< L, C, real >::setsub ; (; Size ; L0, . Size ; C0, . const Mat< L2, C2, real > & ; m . ). inlineconstexprnoexc",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:27945,access,access,27945,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,1,['access'],['access']
Security,"d). More...;  ; constexpr Vec (const sofa::type::fixed_array< T, N > &p) noexcept;  ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const T r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, T defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr T & x () noexcept;  Special access to first element. More...;  ; constexpr const T & x () const noexcept;  Special const access to first element. More...;  ; constexpr T & y () noexcept;  Special access to second element. More...;  ; constexpr const T & y () const noexcept;  Special const access to second element. More...;  ; constexpr T & z () noexcept;  Special access to third element. More...;  ; constexpr const T & z () const noexcept;  Special const access to third element. More...;  ; constexpr T & w () noexcept;  Special access to fourth element. More...;  ; constexpr const T & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const T r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const T &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (T r) noexcept;  Sets every element to r. More...;  ; constexpr T & operator() (Size i) noexcept;  Access to i-t",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html:2237,access,access,2237,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,1,['access'],['access']
Security,"d::UniformVelocityDampingForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::UniformVelocityDampingForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). inlineoverridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the same large matrix. Each object adds its contribution to a different section of the matrix. That is why, an offset is used to identify where in the matrix the force field must start adding its contribution. ; kFactstiffness factor that needs to be multiplied to each matrix entry. ; offsetStarting index of the submatrix to fill in the global matrix. . Reimplemented from sofa::core::behavior::ForceField< DataTypes >. ◆ buildDampingMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::UniformVelocityDampingForceField< DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; matrix). overridevirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ getPotentialEnergy(). template",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_uniform_velocity_damping_force_field.html:21584,access,access,21584,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_uniform_velocity_damping_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_uniform_velocity_damping_force_field.html,1,['access'],['access']
Security,"d::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ m_topologyContainer. TopologyContainer* sofa::core::topology::TopologyModifier::m_topologyContainer. protected . Contains the actual topology data and give access to it (nature of these data heavily depends on the kind of topology). . Constructor details. ◆ TopologyModifier(). sofa::core::topology::TopologyModifier::TopologyModifier ; (; ). inlineprotected . Constructor. . ◆ ~TopologyModifier(). sofa::core::topology::TopologyModifier::~TopologyModifier ; (; ). inlineoverrideprotected . Destructor. . Function details. ◆ addStateChange(). void sofa::core::topology::TopologyModifier::addStateChange ; (; const TopologyChange * ; topologyChange). protected . Adds a StateChange object to the list of the topology this object describes. . ◆ addTopologyChange(). void sofa::core::topology::TopologyModifier::addTopologyChange ; (; const TopologyChange * ; topologyChange). protected . Adds a TopologyChange object to the list of the topology this object describes. . ◆ init(). void sofa::core::topology::TopologyModifier::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented fro",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_modifier.html:14491,access,access,14491,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_modifier.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_modifier.html,1,['access'],['access']
Security,"dex, CheckIndices, MemoryManager >:. [legend]. Public Member Functions;  vector_id ();  Basic constructor. More...;  ;  vector_id (Size n, const T &value);  Constructor. More...;  ;  vector_id (int n, const T &value);  Constructor. More...;  ;  vector_id (long n, const T &value);  Constructor. More...;  ;  vector_id (Size n);  Constructor. More...;  ;  vector_id (const std::vector< T > &x);  Constructor. More...;  ;  vector_id (const_iterator first, const_iterator last);  Constructor. More...;  ; reference at (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference at (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator() (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator() (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator[] (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator[] (Index n) const;  Read-only random access. More...;  ; Index push_back (const_reference v);  ;  Public Member Functions inherited from sofa::type::vector< T, MemoryManager >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< T, Alloc > &&v);  Move assignment operator. More...;  ;  vector (typename vector< T >::const_iterator first, typename vector< T >::const_iterator last);  Constructor. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. More...;  ; std::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:1461,access,access,1461,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,1,['access'],['access']
Security,"down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObject() [2/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridepure virtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObject() [3/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. inlineoverridevirtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getObject() [4/4]. core::objectmodel::BaseObject * sofa::simulation::Node::getObject ; (; const std::string & ; name); const. Find an object given its name. . ◆ getObjects() [1/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridepure virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObjects() [2/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:42539,access,access,42539,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,1,['access'],['access']
Security,"dynamic management of the contributing containers. It offers functions to add and remove VecId objects from the list of containers that contribute to the cumulative sum. ; More... Inheritance diagram for sofa::core::AccumulationVecId< TDataTypes, vtype, vaccess >:. [legend]; Detailed Description; template<class TDataTypes, VecType vtype, VecAccess vaccess>; struct sofa::core::AccumulationVecId< TDataTypes, vtype, vaccess >; Proxy class for accessing elements within an imaginary container that represents the cumulative sum of multiple other containers. Each individual container is represented by a VecId. The class maintains a list of VecIdDeriv objects, which defines the containers contributing to the final cumulative sum. This class provides a simplified interface for accessing elements within the cumulative container. It allows retrieving specific elements using the overloaded subscript operator (operator[]). When accessing an element at a particular index, the class delegates the retrieval to the appropriate container represented by the associated VecIdDeriv. In addition to element retrieval, the class supports dynamic management of the contributing containers. It offers functions to add and remove VecId objects from the list of containers that contribute to the cumulative sum. ; Template Parameters. TDataTypesType of DOFs stored in the State . Public Member Functions; Deriv operator[] (Size i) const;  ; void addToContributingVecIds (core::ConstVecDerivId vecDerivId);  The provided VecDerivId container will contribute in the cumulative sum. More...;  ; void removeFromContributingVecIds (core::ConstVecDerivId vecDerivId);  ;  AccumulationVecId (const State< TDataTypes > &state);  ;  AccumulationVecId ()=delete;  . Constructor details. ◆ AccumulationVecId() [1/2]. template<class TDataTypes , VecType vtype, VecAccess vaccess> . sofa::core::AccumulationVecId< TDataTypes, vtype, vaccess >::AccumulationVecId ; (; const State< TDataTypes > & ; state). inlineexplicit . ◆ ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1_accumulation_vec_id.html:1975,access,accessing,1975,api/master/sofa/html/structsofa_1_1core_1_1_accumulation_vec_id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1_accumulation_vec_id.html,1,['access'],['accessing']
Security,"e = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typename real2 > ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; template<Size M, typename real2 > ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const ValueType &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (ValueType r) noexcept;  Sets every element to r. More...;  ; constexpr ValueTy",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:7763,access,access,7763,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,2,['access'],['access']
Security,"e = 0 . ). inlineconstexprnoexcept . Specific set from a different size vector (given default value and ignored outside entries) . ◆ size(). template<sofa::Size N, typename ValueType > . static constexpr sofa::Size sofa::type::Vec< N, ValueType >::size ; (; void ; ). inlinestaticconstexpr . ◆ sum(). template<sofa::Size N, typename ValueType > . constexpr ValueType sofa::type::Vec< N, ValueType >::sum ; (; ); const. inlineconstexprnoexcept . sum of all elements of the vector . ◆ w() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::w ; (; ); const. inlineconstexprnoexcept . Special const access to fourth element. . ◆ w() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::w ; (; ). inlineconstexprnoexcept . Special access to fourth element. . ◆ x() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::x ; (; ); const. inlineconstexprnoexcept . Special const access to first element. . ◆ x() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::x ; (; ). inlineconstexprnoexcept . Special access to first element. . ◆ y() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::y ; (; ); const. inlineconstexprnoexcept . Special const access to second element. . ◆ y() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr ValueType& sofa::typ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:28880,access,access,28880,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html,1,['access'],['access']
Security,"e the system corresponding to the constraints ; Implements sofa::core::behavior::ConstraintSolver. ◆ draw(). void sofa::component::constraint::lagrangian::solver::LCPConstraintSolver::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ getConstraintProblem(). ConstraintProblem * sofa::component::constraint::lagrangian::solver::LCPConstraintSolver::getConstraintProblem ; (; ). overridevirtual . Implements sofa::component::constraint::lagrangian::solver::ConstraintSolverImpl. ◆ lockConstraintProblem(). void sofa::component::constraint::lagrangian::solver::LCPConstraintSolver::lockConstraintProblem ; (; sofa::core::objectmodel::BaseObject * ; from, . ConstraintProblem * ; p1, . ConstraintProblem * ; p2 = nullptr . ). overridevirtual . Do not use the following LCPs until the next call to this function. This is used to prevent concurrent access to the LCP when using a LCPForceFeedback through an haptic thread. ; Implements sofa::component::constraint::lagrangian::solver::ConstraintSolverImpl. ◆ prepareStates(). bool sofa::component::constraint::lagrangian::solver::LCPConstraintSolver::prepareStates ; (; const core::ConstraintParams * ; , . MultiVecId ; res1, . MultiVecId ; res2 = MultiVecId::null() . ). overridevirtual . Do the precomputation: compute free state, or propagate the states to the mapped mechanical states, where the constraint can be expressed ; Implements sofa::core::behavior::ConstraintSolver. ◆ SOFA_CLASS(). sofa::component::constraint::lagrangian::solver::LCPConstraintSolver::SOFA_CLASS ; (; LCPConstraintSolver ; , . ConstraintSolverImpl ;  . ). ◆ solveSystem(). bool sofa::component::constraint::lagrangian::solver::LCPConstraintSolver::solveSystem ; (; const core::ConstraintParams * ; , . MultiVecId ; res1, . MultiVecId ; res2 = MultiVecId::null() . ). overridevirtual . Use the system previously built and solve it with t",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_l_c_p_constraint_solver.html:28546,access,access,28546,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_l_c_p_constraint_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_l_c_p_constraint_solver.html,1,['access'],['access']
Security,"e vtype> ; constexpr sofa::Size StateTypeSize_v = StateTypeSize<DataTypes, vtype>::total_size;  . Typedef Documentation. ◆ ClassEntry. typedef sofa::core::ObjectFactory::ClassEntry sofa::core::ClassEntry. ◆ ConstMatrixDerivId. typedef TVecId<V_MATDERIV, V_READ > sofa::core::ConstMatrixDerivId. ◆ ConstMultiMatrixDerivId. typedef TMultiVecId<V_MATDERIV, V_READ> sofa::core::ConstMultiMatrixDerivId. ◆ ConstMultiVecCoordId. typedef TMultiVecId<V_COORD, V_READ> sofa::core::ConstMultiVecCoordId. ◆ ConstMultiVecDerivId. typedef TMultiVecId<V_DERIV, V_READ> sofa::core::ConstMultiVecDerivId. ◆ ConstMultiVecId. typedef TMultiVecId<V_ALL, V_READ> sofa::core::ConstMultiVecId. ◆ ConstVecCoordId. typedef TVecId<V_COORD , V_READ > sofa::core::ConstVecCoordId. Typedefs for each type of state vectors. . ◆ ConstVecDerivId. typedef TVecId<V_DERIV , V_READ > sofa::core::ConstVecDerivId. ◆ ConstVecId. typedef TVecId<V_ALL, V_READ> sofa::core::ConstVecId. Identify one vector stored in State A ConstVecId only provides a read-only access to the underlying vector. . ◆ Creator. typedef sofa::core::ObjectFactory::Creator sofa::core::Creator. ◆ get_base_object_strong_type. template<matrixaccumulator::Contribution c> . using sofa::core::get_base_object_strong_type = typedef typename get_base_object_strong<c>::type. Helper alias. . ◆ MatrixDerivId. typedef TVecId<V_MATDERIV, V_WRITE> sofa::core::MatrixDerivId. ◆ MultiMatrixDerivId. typedef TMultiVecId<V_MATDERIV, V_WRITE> sofa::core::MultiMatrixDerivId. ◆ MultiVecCoordId. typedef TMultiVecId<V_COORD, V_WRITE> sofa::core::MultiVecCoordId. ◆ MultiVecDerivId. typedef TMultiVecId<V_DERIV, V_WRITE> sofa::core::MultiVecDerivId. ◆ MultiVecId. typedef TMultiVecId<V_ALL, V_WRITE> sofa::core::MultiVecId. ◆ ObjectRegistrationEntry. typedef struct sofa::core::ObjectRegistrationEntry sofa::core::ObjectRegistrationEntry. ◆ OnCreateCallback. typedef std::function<void(sofa::core::objectmodel::Base*, sofa::core::objectmodel::BaseObjectDescription*)> sofa::core::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:16114,access,access,16114,api/master/sofa/html/namespacesofa_1_1core.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html,1,['access'],['access']
Security,"e...;  ; class  TMultiVecId;  ; struct  StateVecAccessor;  Helper class to access vectors of a given type in a given State. More...;  ; struct  StateVecAccessor< DataTypes, V_COORD, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_COORD, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_DERIV, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_DERIV, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_MATDERIV, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_MATDERIV, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_ALL, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_ALL, V_WRITE >;  ; class  TMultiVecId< V_ALL, vaccess >;  ; struct  ObjectRegistrationEntry;  ; class  ObjectFactory;  ; class  ObjectCreator;  Typed Creator class used to create instances of object type RealObject. More...;  ; class  ObjectRegistrationData;  Helper class used to register a class in the ObjectFactory. More...;  ; class  RegisterObject;  ; struct  ObjectFactoryJson;  ; class  PathResolver;  This class exposes an API to query a context to find Base* or a BaseData*. More...;  ; class  SofaLibrary;  An Generic Library. More...;  ; class  TVecId;  ; class  TStandardVec;  ; class  TStandardVec< V_COORD, vaccess >;  ; class  TStandardVec< V_DERIV, vaccess >;  ; class  TStandardVec< V_MATDERIV, vaccess >;  ; class  TStandardVec< V_ALL, vaccess >;  ; class  BaseVecId;  ; class  VecIdAlignFix;  ; struct  VecIdProperties;  ; class  TVecId< V_ALL, vaccess >;  Identify any vector stored in State. More...;  ; struct  StateType;  ; struct  StateType< DataTypes, core::V_COORD >;  ; struct  StateType< DataTypes, core::V_DERIV >;  ; struct  StateTypeSize;  ; struct  StateTypeSize< DataTypes, core::V_COORD >;  ; struct  StateTypeSize< DataTypes, core::V_DERIV >;  ; struct  StateVecType;  ; struct  StateVecType< DataTypes, core::V_COORD >;  ; struct  StateVecType< DataTypes, core::V_DERIV >;  . Typedefs; template<matrixaccumulator::Contribution c> ; using get_base_object_strong_type = t",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:4842,expose,exposes,4842,api/master/sofa/html/namespacesofa_1_1core.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html,1,['expose'],['exposes']
Security,"e; . /2; ; SOFA - Forum: Getting Started. SOFA - Forum: Getting Started. /programming-with-softrobots; . /feed; ; SOFA » All Posts. SOFA - Forum: Programming with SoftRobots. /using-softrobots; . /feed; ; SOFA » All Posts. SOFA - Forum: Using SoftRobots. SOFA - Forum: SoftRobots. /topic; . /2d-incision-with-phantom-omni; ; SOFA - Topic: 2d Incision with Phantom omni. /3d-model-of-human-anatomy; ; SOFA - Topic: [SOLVED] 3D Model of human anatomy. /3d-printing-simulation-using-sofa; ; SOFA - Topic: 3D printing simulation using SOFA. /abdominal-organs-in-sofa; ; SOFA - Topic: Abdominal Organs in SOFA. /about-explanation-of-components; ; SOFA - Topic: [SOLVED] about explanation of components. /about-stick-and-stickcontactconstraint; ; SOFA - Topic: about stick and stickcontactconstraint. /about-the-suturing-simulation; ; SOFA - Topic: [SOLVED] About the suture simulation. /about-the-unit; ; SOFA - Topic: [SOLVED] About the unit. /access-constraint-forces-from-a-different-class; ; SOFA - Topic: [SOLVED] Access constraint forces from a different class. /accessing-and-mofiying-array-values-with-context-managers-in-sofapython3; ; SOFA - Topic: Accessing and mofiying array values with Context Managers in SofaPython3. /accessing-deformations-force-states-etc-using-python; ; SOFA - Topic: [SOLVED] Accessing deformations, force states, etc using Python. /access-object-data-on-the-fly-sofapython3; ; SOFA - Topic: Access object data on the fly, sofaPython3. /access-stress-in-triangularfemforcefield; ; SOFA - Topic: Access stress in TriangularFEMForceField. /activating-twoway-option-in-attachconstraint-component-or-not; ; SOFA - Topic: Activating twoWay option in attachConstraint component or not. /actuating-multiple-components-with-cableconstraint; ; SOFA - Topic: Actuating multiple components with CableConstraint. /add_executable-cannot-create-target-another-target-with-the-same-namea-exist; ; SOFA - Topic: add_executable cannot create target, another target with the same namea ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:252709,access,access-constraint-forces-from-a-different-class,252709,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['access'],['access-constraint-forces-from-a-different-class']
Security,"e<class T , class MemoryManager = CPUMemoryManager<T>> . void sofa::type::vector< T, MemoryManager >::fill ; (; const T & ; value). inline . Sets every element to 'value'. . ◆ operator=() [1/2]. template<class T , class MemoryManager = CPUMemoryManager<T>> . vector& sofa::type::vector< T, MemoryManager >::operator= ; (; const std::vector< T, Alloc > & ; x). inline . Copy operator. . ◆ operator=() [2/2]. template<class T , class MemoryManager = CPUMemoryManager<T>> . vector& sofa::type::vector< T, MemoryManager >::operator= ; (; std::vector< T, Alloc > && ; v). inline . Move assignment operator. . ◆ operator[]() [1/2]. template<class T , class MemoryManager = CPUMemoryManager<T>> . reference sofa::type::vector< T, MemoryManager >::operator[] ; (; Size ; n). inline . Read/write random access. . ◆ operator[]() [2/2]. template<class T , class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::type::vector< T, MemoryManager >::operator[] ; (; Size ; n); const. inline . Read-only random access. . ◆ read() [1/7]. SOFA_TYPE_API std::istream & sofa::type::vector< int >::read ; (; std::istream & ; in). Input stream Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B, optionally specifying a step using ""A-B-step"" notation. . ◆ read() [2/7]. SOFA_TYPE_API std::istream & sofa::type::vector< unsigned int >::read ; (; std::istream & ; in). Input stream Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B . ◆ read() [3/7]. SOFA_TYPE_API std::istream & sofa::type::vector< unsigned char >::read ; (; std::istream & ; in). Input stream Specialization for reading vectors of unsigned char . ◆ read() [4/7]. SOFA_TYPE_API std::istream & sofa::type::vector< int >::read ; (; std::istream & ; in). Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. . ◆ read() [5/7]. SOFA_TYPE_API std::istream & sofa::typ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector.html:5608,access,access,5608,api/master/sofa/html/classsofa_1_1type_1_1vector.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector.html,1,['access'],['access']
Security,"eInfo:. [legend]; Detailed Description; Information about the type of a value stored in a Data.; AbstractTypeInfo is part of the introspection/reflection capabilities of the Sofa scene graph API. It provides information about the type of the content of Data objects (Is it a simple type? A container? How much memory should be allocated to copy it?), and allows manipulating Data generically, without knowing their exact type.; This class is primarily used to copy information across BaseData objects, for example when there exists a link between two instances of BaseData. E.g. this mechanism allows you to copy the content of a Data<vector<int>> into a Data<vector<double>>, because there is an acceptable conversion between integer and double, and because both Data use a resizable container.; Using TypeInfo; Use BaseData::getValueTypeInfo() to get a pointer to an AbtractTypeInfo, and BaseData::getValueVoidPtr() to get a pointer to the content of a Data. You can then use the methods of AbtractTypeInfo to access the Data generically.; Very basic example: BaseData *data = getADataFromSomewhere();; const AbstractTypeInfo *typeinfo = data->getValueTypeInfo();; const void* ptr = data->getValueVoidPtr();; for (int i = 0 ; i < typeinfo->size(ptr) ; i++); std::string value = typeinfo->getTextValue(ptr, 0);; sofa::defaulttype::AbstractTypeInfo::AbstractTypeInfoAbstractTypeInfo()Definition: AbstractTypeInfo.h:177; Note about size and indices; All the getValue() and setValue() methods take an index as a parameter, which means that every type is abstracted to a one-dimensional container. See the detailed description of DataTypeInfo for more explanations.; See alsoDataTypeInfo provides similar mechanisms to manipulate Data objects generically in template code. . Public Member Functions; virtual ~AbstractTypeInfo ()=default;  ; virtual const AbstractTypeInfo * BaseType () const =0;  ; virtual const AbstractTypeInfo * ValueType () const =0;  ; virtual std::string name () const =0;  Return",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_abstract_type_info.html:1378,access,access,1378,api/master/sofa/html/classsofa_1_1defaulttype_1_1_abstract_type_info.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_abstract_type_info.html,1,['access'],['access']
Security,"eWidget ();  Helper method to give a size. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  ;  Public Member Functions inherited from sofa::gui::qt::SimpleDataWidget< T, table_data_widget_container< T, TABLE_NORMAL > >;  SimpleDataWidget (QWidget *parent, const char *name, MyTData *d);  ; virtual bool createWidgets ();  ; virtual void setDataReadOnly (bool readOnly);  This method is called after createWidgets to configure whether the created widgets should be read-only. More...;  ; virtual void readFromData ();  The implementation of this method tells how the widget reads the value of the data. More...;  ; virtual void setReadOnly (bool readOnly);  ; virtual void writeToData ();  ;  Public Member Functions inherited from sofa::gui::qt::TDataWidget< T >;  TDataWidget (QWidget *parent, const char *name, MyTData *d);  ; sofa::core::objectmodel::Data< T > * getData ();  ; const sofa::core::objectmodel::Data< T > * getData () const;  ; virtual void setData (MyTData *d);  ; virtual void setData (MyData *d);  ;  Public Member Functions inherited from sofa::gui::qt::DataWidget;  DataWidget (QWidget *parent, const char *name, MyData *d);  ;  ~DataWidget () override;  ; virtual void setData (MyData *d);  ; const core::objectmodel::BaseData * getBaseData () const;  BaseData pointer accessor function. More...;  ; core::objectmodel::BaseData * getBaseData ();  ; void updateVisibility ();  ; bool isDirty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::gui::qt::SimpleDataWidget< T, table_data_widget_container< T, TABLE_NORMAL > >; table_data_widget_container< T, TABLE_NORMAL > container;  ;  Protected Attributes inherited from sofa::gui::qt::TDataWidget< T >; MyTData * Tdata;  ;  Protected Attributes inherited from sofa::gui::qt::DataWidget; cor",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_table_data_widget.html:1834,access,accessor,1834,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_table_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_table_data_widget.html,1,['access'],['accessor']
Security,"e_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr real toReal () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr operator real () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr Mat< C, L, real > transposed () const noexcept;  Return the transpose of m. More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< L,",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:5553,access,access,5553,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,2,['access'],['access']
Security,"ead-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:4403,access,access,4403,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,2,['access'],['access']
Security,"ec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const T r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, T defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr T & x () noexcept;  Special access to first element. More...;  ; constexpr const T & x () const noexcept;  Special const access to first element. More...;  ; constexpr T & y () noexcept;  Special access to second element. More...;  ; constexpr const T & y () const noexcept;  Special const access to second element. More...;  ; constexpr T & z () noexcept;  Special access to third element. More...;  ; constexpr const T & z () const noexcept;  Special const access to third element. More...;  ; constexpr T & w () noexcept;  Special access to fourth element. More...;  ; constexpr const T & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const T r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const T &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (T r) noexcept;  Sets every element to r. More...;  ; constexpr T & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const T & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const T * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr T * ptr () noexcept;  Cast int",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html:2481,access,access,2481,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,1,['access'],['access']
Security,"ect access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; Parameters Setters; virtual void setDt (SReal);  Simulation timestep. More...;  ; virtual void setAnimate (bool);  Animation flag. More...;  ; virtual void",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:6962,access,access,6962,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['access'],['access']
Security,"ect access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:8058,access,access,8058,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,3,['access'],['access']
Security,"ect. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::State< DataTypes >;  SOFA_CLASS (SOFA_TEMPLATE(State, DataTypes), BaseState);  ; sofa::type::TBoundingBox< Real > computeBBox () const;  Compute the bounding box independently from the visibility parameters. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible=false) override;  ; objectmodel::BaseData * baseWrite (VecId v) override;  ; const objectmodel::BaseData * baseRead (ConstVecId v) const override;  ; ReadVecCoord readPositions () const;  ; WriteVecCoord writePositions ();  ; WriteOnlyVecCoord writeOnlyPositions ();  ; ReadVecCoord readRestPositions () const;  ; WriteVecCoord writeRestPositions ();  ; WriteOnlyVecCoord writeOnlyRestPositions ();  ; ReadVecDeriv readVelocities () const;  ; WriteVecDeriv writeVelocities ();  ; WriteOnlyVecDeriv writeOnlyVelocities ();  ; ReadVecDeriv readForces () const;  ; WriteVecDeriv writeForces ();  ; WriteOnlyVecDeriv writeOnlyForces ();  ; ReadVecDeriv readDx () const;  ; WriteVecDeriv writeDx ();  ; WriteOnlyVecDeriv writeOnlyDx ();  ; ReadVecDeriv readNormals () const;  ; const AccumulationVecId< DataTypes, V_DERIV, V_READ > & readTotalForces () const;  Returns a proxy objects offering simplified access to elements of the cumulative sum of all force containers. More...;  ; void addToTotalForces (core::ConstVecDerivId forceId) override;  The provided VecDerivId will contribute to the sum of all force containers. More...;  ; void removeFromTotalForces (core::ConstVecDerivId forceId) override;  . Protected Member Functions;  MechanicalObject ();  ; virtual ~MechanicalObject ();  ; template<core::VecType vtype> ; void vAvailImpl (core::TVecId< vtype, core::V_WRITE > &v, sofa::type::vector< Data< core::StateVecType_t< DataTypes, vtype > >",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:28799,access,access,28799,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['access'],['access']
Security,"ection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; Parameters Setters; virtual void setDt (SReal);  Simulation timestep. More...;  ; virtual void setAnimate (bool);  Animation flag. More...;  ; virtual void setSleeping (bool);  Sleeping state of the context. More...;  ; virtual void setChangeSleepingState (bool);  Sleeping state change of the context. More...;  ; Variables Setters; virtual void setM",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:7166,access,access,7166,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['access'],['access']
Security,"ection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >); ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:8262,access,access,8262,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,3,['access'],['access']
Security,"ectmodel::BaseContext::get ; (; const std::string & ; path); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [2/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [3/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [4/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or down from the current context. . ◆ get() [7/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmod",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:19862,access,access,19862,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['access'],['access']
Security,"ector >::d_assembleDamping. If true, the damping is added to the global matrix. . ◆ d_assembleGeometricStiffness. template<class TMatrix , class TVector > . Data< bool > sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >::d_assembleGeometricStiffness. If true, the geometric stiffness of mappings is added to the global matrix. . ◆ d_assembleMass. template<class TMatrix , class TVector > . Data< bool > sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >::d_assembleMass. If true, the mass is added to the global matrix. . ◆ d_assembleStiffness. template<class TMatrix , class TVector > . Data< bool > sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >::d_assembleStiffness. If true, the stiffness is added to the global matrix. . ◆ d_checkIndices. template<class TMatrix , class TVector > . Data< bool > sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >::d_checkIndices. If true, indices are verified before being added in to the global matrix, favoring security over speed. . ◆ d_parallelAssemblyIndependentMatrices. template<class TMatrix , class TVector > . Data< bool > sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >::d_parallelAssemblyIndependentMatrices. If true, independent matrices (global matrix vs mapped matrices) are assembled in parallel. . ◆ m_createDispatcher. template<class TMatrix , class TVector > . std::tuple< std::unique_ptr<CreateMatrixDispatcher<Contribution::STIFFNESS > >, std::unique_ptr<CreateMatrixDispatcher<Contribution::MASS > >, std::unique_ptr<CreateMatrixDispatcher<Contribution::DAMPING > >, std::unique_ptr<CreateMatrixDispatcher<Contribution::GEOMETRIC_STIFFNESS> > > sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >::m_createDispatcher. protected . An object with factory methods to create local matrices. . ◆ m_damping. template<class TMatrix , class TVector > . std::map<BaseForceField*, core::behavior::DampingMatrix> sofa::component::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_linear_system.html:26729,secur,security,26729,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_linear_system.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_linear_system.html,1,['secur'],['security']
Security,"ed . ◆ counter. int sofa::gui::qt::LinkWidget::counter. protected . ◆ dirty. bool sofa::gui::qt::LinkWidget::dirty. protected . Constructor details. ◆ LinkWidget(). sofa::gui::qt::LinkWidget::LinkWidget ; (; QWidget * ; parent, . const char * ; , . MyLink * ; l . ). inline . ◆ ~LinkWidget(). sofa::gui::qt::LinkWidget::~LinkWidget ; (; ). inlineoverride . Function details. ◆ CreateLinkWidget(). LinkWidget * sofa::gui::qt::LinkWidget::CreateLinkWidget ; (; const LinkWidget::CreatorArgument & ; dwarg). static . ◆ createWidgets(). virtual bool sofa::gui::qt::LinkWidget::createWidgets ; (; ). pure virtual . The implementation of this method holds the widget creation and the signal / slot connections. ; Implemented in sofa::gui::qt::QLinkSimpleEdit. ◆ getBaseLink() [1/2]. core::objectmodel::BaseLink* sofa::gui::qt::LinkWidget::getBaseLink ; (; ). inline . ◆ getBaseLink() [2/2]. const core::objectmodel::BaseLink* sofa::gui::qt::LinkWidget::getBaseLink ; (; ); const. inline . BaseLink pointer accessor function. . ◆ isDirty(). bool sofa::gui::qt::LinkWidget::isDirty ; (; ). inline . ◆ LinkBeingChanged. void sofa::gui::qt::LinkWidget::LinkBeingChanged ; (; ). signal . ◆ LinkOwnerDirty. void sofa::gui::qt::LinkWidget::LinkOwnerDirty ; (; bool ; ). signal . Currently this signal is used to reflect the changes of the component name in the sofaListview. . ◆ numColumnWidget(). virtual unsigned int sofa::gui::qt::LinkWidget::numColumnWidget ; (; ). inlinevirtual . Helper method for column. ; Reimplemented in sofa::gui::qt::QLinkSimpleEdit. ◆ readFromLink(). virtual void sofa::gui::qt::LinkWidget::readFromLink ; (; ). protectedpure virtual . The implementation of this method tells how the widget reads the value of the link. ; Implemented in sofa::gui::qt::QLinkSimpleEdit. ◆ setLink(). virtual void sofa::gui::qt::LinkWidget::setLink ; (; MyLink * ; d). inlinevirtual . ◆ setWidgetDirty [1/2]. void sofa::gui::qt::LinkWidget::setWidgetDirty ; (; ). inlineslot . You call this slot anytim",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_link_widget.html:2923,access,accessor,2923,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_link_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_link_widget.html,1,['access'],['accessor']
Security,"ed_array<int, 2>, 3> is 6, and those six elements are conceptually numbered from 0 to 5. This is relevant only if FixedSize() is true. I FixedSize() is false, the return value will be equivalent to the one of byteSize() ; Implements sofa::defaulttype::AbstractTypeInfo. ◆ size() [2/2]. sofa::Size sofa::defaulttype::NameOnlyTypeInfo::size ; (; const void * ; ); const. inlineoverridevirtual . The size of data, in number of iterable elements (For containers, that'll be the number of elements in the 1st dimension). For example, with type == ` ; Implements sofa::defaulttype::AbstractTypeInfo. ◆ Text(). bool sofa::defaulttype::NameOnlyTypeInfo::Text ; (; ); const. inlineoverridevirtual . True iff this type uses text values. ; Implements sofa::defaulttype::AbstractTypeInfo. ◆ type_info(). const std::type_info* sofa::defaulttype::NameOnlyTypeInfo::type_info ; (; ); const. inlineoverridevirtual . Get the type_info for this type. ; Implements sofa::defaulttype::AbstractTypeInfo. ◆ ValidInfo(). bool sofa::defaulttype::NameOnlyTypeInfo::ValidInfo ; (; ); const. inlineoverridevirtual . True iff the TypeInfo for this type contains valid information. A Type is considered ""Valid"" if there's at least one specialization of the ValueType ; Implements sofa::defaulttype::AbstractTypeInfo. ◆ ValueType(). const AbstractTypeInfo* sofa::defaulttype::NameOnlyTypeInfo::ValueType ; (; ); const. inlineoverridevirtual . Returns the TypeInfo for the type of the values accessible by the get*Value() functions. For example, if the type is fixed_array<fixed_array<int, 2> 3>, it returns the TypeInfo for int. . Implements sofa::defaulttype::AbstractTypeInfo. ◆ ZeroConstructor(). bool sofa::defaulttype::NameOnlyTypeInfo::ZeroConstructor ; (; ); const. inlineoverridevirtual . True iff the default constructor of this type is equivalent to setting the memory to 0. ; Implements sofa::defaulttype::AbstractTypeInfo. sofadefaulttypeNameOnlyTypeInfo; Generated on Mon Nov 11 2024 03:18:45 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_name_only_type_info.html:10710,access,accessible,10710,api/master/sofa/html/classsofa_1_1defaulttype_1_1_name_only_type_info.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_name_only_type_info.html,1,['access'],['accessible']
Security,"egin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr const_iterator cend () const noexcept;  ; constexpr reference operator[] (size_type i);  ; constexpr const_reference operator[] (size_type i) const;  ; template<std::size_t I> ; constexpr T & get () &noexcept;  ; template<std::size_t I> ; constexpr const T & get () const &noexcept;  ; template<std::size_t I> ; constexpr T && get () &&noexcept;  ; template<std::size_t I> ; constexpr const T && get () const &&noexcept;  ; constexpr reference at (size_type i);  ; constexpr const_reference at (size_type i) const;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; void swap (fixed_array< T, N > &y);  ; constexpr const T * data () const noexcept;  ; constexpr const Array & array () const noexcept;  direct access to array More...;  ; constexpr Array & array () noexcept;  direct access to array More...;  ; template<typename T2 > ; constexpr fixed_array< T, N > & operator= (const fixed_array< T2, N > &rhs) noexcept;  ; constexpr void assign (const T &value) noexcept;  . Static Public Member Functions; static constexpr size_type size () noexcept;  ; static bool empty () noexcept;  ; static constexpr size_type max_size () noexcept;  . Friends; std::ostream & operator<< (std::ostream &out, const fixed_array< T, N > &a);  ; std::istream & operator>> (std::istream &in, fixed_array< T, N > &a);  . Attribute details. ◆ elems. template<class T , sofa::Size N> . T sofa::type::fixed_array< T, N >::elems[N] {}. Constructor details. ◆ fixed_array() [1/3]. template<class T , sofa::Size N> . constexpr sofa::type::fixed_array< T, N >::fixed_array ; (; ). inlineconstexpr . ◆ fixed_array() [2/3]. template<class T , sofa::Size N> . template<size_type NN = N, typename std::enable_if< NN==1, int >::type = 0> . constexpr sofa::type::fixed_array< T, N >::fixed_array ; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1fixed__array.html:2067,access,access,2067,api/master/sofa/html/classsofa_1_1type_1_1fixed__array.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1fixed__array.html,1,['access'],['access']
Security,"elp, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Attribute details. ◆ d_alias. Data<std::string> sofa::component::sceneutility::makedataaliascomponent::MakeDataAliasComponent::d_alias. The alias of the data field. . ◆ d_componentname. Data<std::string> sofa::component::sceneutility::makedataaliascomponent::MakeDataAliasComponent::d_componentname. The component class for which to create an alias. . ◆ d_dataname. Data<std::string> sofa::component::sceneutility::makedataaliascomponent::MakeDataAliasComponent::d_dataname. The data field for which to create an alias. . Constructor details. ◆ MakeDataAliasComponent(). sofa::component::sceneutility::makedataaliascomponent::MakeDataAliasComponent::MakeDataAliasComponent ; (; ). ◆ ~MakeDataAliasComponent(). sofa::component::sceneutility::makedataaliascomponent::MakeDataAliasComponent::~MakeDataAliasComponent ; (; ). override . Function details. ◆ GetCustomClassName(). static std::string sofa::component::sceneutility::makedataaliascomponent::MakeDataAliasComponent::GetCustomClassName ; (; ). inlinestatic . Returns the sofa class name. By default the name of the c++ class is exposed... but Here we want it to be MakeAlias so we need to customize it. More details on the name customization infrastructure is in NameDecoder.h . ◆ parse(). void sofa::component::sceneutility::makedataaliascomponent::MakeDataAliasComponent::parse ; (; core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Inherited from BaseObject. Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::objectmodel::Base. ◆ SOFA_CLASS(). sofa::component::sceneutility::makedataaliascomponent::MakeDataAliasComponent::SOFA_CLASS ; (; MakeDataAliasComponent ; , . core::objectmodel::BaseObject ;  . ). sofacomponentsceneutilitymakedataaliascomponentMakeDataAliasComponent; Generated on Mon Nov 11 2024 02:56:38 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1makedataaliascomponent_1_1_make_data_alias_component.html:14805,expose,exposed,14805,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1makedataaliascomponent_1_1_make_data_alias_component.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1makedataaliascomponent_1_1_make_data_alias_component.html,1,['expose'],['exposed']
Security,"elper::getAStringCopy ; (; const char * ; c). returns a copy of the string given in argument. . ◆ getClosestMatch(). std::vector< std::tuple< std::string, SReal > > SOFA_HELPER_API sofa::helper::getClosestMatch ; (; const std::string & ; needle, . const std::vector< std::string > & ; haystack, . const Size ; numEntries, . const SReal ; threshold . ). Search for the the closest match to the string passed in the ""needle"" argument within the vector of ""haystack"" arguments. . ◆ getCurRecords(). type::vector<Record>* sofa::helper::getCurRecords ; (; ). ◆ getCurTimer(). std::stack<AdvancedTimer::IdTimer>& sofa::helper::getCurTimer ; (; ). ◆ getFactoryLog(). SOFA_HELPER_API std::string & sofa::helper::getFactoryLog ; (; ). ◆ getNoVal(). std::string sofa::helper::getNoVal ; (; ). ◆ getReadAccessor(). template<class T > . ReadAccessor<core::objectmodel::Data<T> > sofa::helper::getReadAccessor ; (; const core::objectmodel::Data< T > & ; data). Returns a read accessor from the provided Data<> Example of use: auto points = getReadAccessor(d_points) . ◆ getTime(). std::string sofa::helper::getTime ; (; ctime_t ; t, . int ; niter = 1 . ). ◆ gettypename(). SOFA_HELPER_API std::string sofa::helper::gettypename ; (; const std::type_info & ; t). Decode the type's name to a more readable form if possible. . ◆ getVal() [1/2]. std::string sofa::helper::getVal ; (; double ; v). ◆ getVal() [2/2]. std::string sofa::helper::getVal ; (; double ; v, . int ; niter . ). ◆ getWriteAccessor(). template<class T > . WriteAccessor<core::objectmodel::Data<T> > sofa::helper::getWriteAccessor ; (; core::objectmodel::Data< T > & ; data). Returns a write only accessor from the provided Data<> Example of use: auto points = getWriteOnlyAccessor(d_points) . ◆ getWriteOnlyAccessor(). template<class T > . WriteOnlyAccessor<core::objectmodel::Data<T> > sofa::helper::getWriteOnlyAccessor ; (; core::objectmodel::Data< T > & ; data). Returns a write only accessor from the provided Data<> WriteOnly accessors are fa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:26679,access,accessor,26679,api/master/sofa/html/namespacesofa_1_1helper.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html,1,['access'],['accessor']
Security,"em::elastic::TriangularFEMForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). overridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the same large matrix. Each object adds its contribution to a different section of the matrix. That is why, an offset is used to identify where in the matrix the force field must start adding its contribution. ; kFactstiffness factor that needs to be multiplied to each matrix entry. ; offsetStarting index of the submatrix to fill in the global matrix. . Reimplemented from sofa::core::behavior::ForceField< DataTypes >. ◆ applyStiffness(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >::applyStiffness ; (; VecCoord & ; f, . Real ; h, . const VecCoord & ; x, . const Real & ; kFactor . ). protectedvirtual . f += Kx where K is the stiffness matrix and x a disp",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field.html:34822,access,access,34822,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field.html,1,['access'],['access']
Security,"en default value and ignored outside entries) More...;  ; template<Size NN = N, typename std::enable_if<(NN >1), int >::type = 0> ; constexpr Vec (const Vec< N-1, ValueType > &v, ValueType r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< ValueType, N > &p) noexcept;  ; template<Size N2, typename real2 > ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; template<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::typ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:6916,access,access,6916,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,2,['access'],['access']
Security,"ence . #include <integer_id.h>. Inheritance diagram for sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >:. [legend]. Public Member Functions;  vector_id ();  Basic constructor. More...;  ;  vector_id (Size n, const T &value);  Constructor. More...;  ;  vector_id (int n, const T &value);  Constructor. More...;  ;  vector_id (long n, const T &value);  Constructor. More...;  ;  vector_id (Size n);  Constructor. More...;  ;  vector_id (const std::vector< T > &x);  Constructor. More...;  ;  vector_id (const_iterator first, const_iterator last);  Constructor. More...;  ; reference at (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference at (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator() (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator() (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator[] (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator[] (Index n) const;  Read-only random access. More...;  ; Index push_back (const_reference v);  ;  Public Member Functions inherited from sofa::type::vector< T, MemoryManager >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< T, Alloc > &&v);  Move assignment operator. More...;  ;  vector (typename vector< T >::const_iterator first, typename vector< T >::const_iterator last);  Constructor. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:1358,access,access,1358,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,1,['access'],['access']
Security,"enerate::MergePoints< DataTypes >::f_indices2. Indices of the points of the second object. . ◆ f_noUpdate. template<class DataTypes > . Data<bool> sofa::component::engine::generate::MergePoints< DataTypes >::f_noUpdate. do not update the output at each time step (false) . ◆ f_points. template<class DataTypes > . Data<VecCoord> sofa::component::engine::generate::MergePoints< DataTypes >::f_points. position coordinates resulting from the merge . ◆ f_X1. template<class DataTypes > . Data<VecCoord> sofa::component::engine::generate::MergePoints< DataTypes >::f_X1. position coordinates of the degrees of freedom of the first object . ◆ f_X2. template<class DataTypes > . Data<VecCoord> sofa::component::engine::generate::MergePoints< DataTypes >::f_X2. Rest position coordinates of the degrees of freedom of the second object. . ◆ f_X2_mapping. template<class DataTypes > . Data<SetIndex> sofa::component::engine::generate::MergePoints< DataTypes >::f_X2_mapping. Mapping of indices to inject position2 inside position1 vertex buffer. . ◆ initDone. template<class DataTypes > . bool sofa::component::engine::generate::MergePoints< DataTypes >::initDone. Constructor details. ◆ MergePoints(). template<class DataTypes > . sofa::component::engine::generate::MergePoints< DataTypes >::MergePoints. protected . ◆ ~MergePoints(). template<class DataTypes > . sofa::component::engine::generate::MergePoints< DataTypes >::~MergePoints ; (; ). inlineoverrideprotected . Function details. ◆ doUpdate(). template<class DataTypes > . void sofa::component::engine::generate::MergePoints< DataTypes >::doUpdate ; (; ). overridevirtual . Where you put your engine's impl. ; Implements sofa::core::DataEngine. ◆ init(). template<class DataTypes > . void sofa::component::engine::generate::MergePoints< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ reinit().",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_points.html:18083,inject,inject,18083,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_points.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_points.html,1,['inject'],['inject']
Security,"entType ; elementType . ). overridevirtual . \ brief Generic function to link potential data (related to a type of element) with a topologyHandler ; Reimplemented from sofa::component::topology::container::dynamic::EdgeSetTopologyContainer. ◆ reinit(). void sofa::component::topology::container::dynamic::TriangleSetTopologyContainer::reinit ; (; ). overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::component::topology::container::dynamic::EdgeSetTopologyContainer. ◆ reOrientateTriangle(). void sofa::component::topology::container::dynamic::TriangleSetTopologyContainer::reOrientateTriangle ; (; TriangleID ; id). overridevirtual . Will change order of vertices in triangle: t[1] <=> t[2]. ; Reimplemented from sofa::core::topology::BaseMeshTopology. ◆ setTriangleTopologyToDirty(). void sofa::component::topology::container::dynamic::TriangleSetTopologyContainer::setTriangleTopologyToDirty ; (; ). protected . Use a specific boolean See alsom_triangleTopologyDirty in order to know if topology Data is dirty or not. Set/Get function access to this boolean . ◆ SOFA_CLASS(). sofa::component::topology::container::dynamic::TriangleSetTopologyContainer::SOFA_CLASS ; (; TriangleSetTopologyContainer ; , . EdgeSetTopologyContainer ;  . ). ◆ unlinkTopologyHandlerToData(). bool sofa::component::topology::container::dynamic::TriangleSetTopologyContainer::unlinkTopologyHandlerToData ; (; core::topology::TopologyHandler * ; topologyHandler, . sofa::geometry::ElementType ; elementType . ). overridevirtual . \ brief Generic function to link potential data (related to a type of element) with a topologyHandler ; Reimplemented from sofa::component::topology::container::dynamic::EdgeSetTopologyContainer. Related details. ◆ TriangleSetTopologyModifier. friend class TriangleSetTopologyModifier. friend . sofacomponenttopologycontainerdynamicTriangleSetTopologyContainer; Generated on Mon Nov 11 2024 03:10:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_topology_container.html:56484,access,access,56484,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_topology_container.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_topology_container.html,1,['access'],['access']
Security,"erence. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes > Class Template Reference . #include <TriangleFEMForceField.h>. Inheritance diagram for sofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >:. [legend]; Detailed Description; template<class DataTypes>; class sofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >; Triangle FEM force field using the QR decomposition of the deformation gradient, inspired from http://www-evasion.imag.fr/Publications/2005/NPF05 , to handle large displacements. The material properties are uniform across the domain. Two methods are proposed, one for small displacements and one for large displacements. The method for small displacements has not been validated and we suspect that it is broke. Use it very carefully, and compare with the method for large displacements. . Public Attributes; int method;  ; sofa::core::objectmodel::RenamedData< std::string > f_method;  ; sofa::core::objectmodel::RenamedData< Real > f_poisson;  ; sofa::core::objectmodel::RenamedData< Real > f_young;  ; sofa::core::objectmodel::RenamedData< Real > f_thickness;  ; sofa::core::objectmodel::RenamedData< bool > f_planeStrain;  ; Data< std::string > d_method;  large: large displacements, small: small displacements More...;  ; Data< Real > d_thickness;  Thickness of the elements. More...;  ; Data< bool > d_planeStrain;  Plane strain or plane stress assumption. More...;  ;  Public Attributes inherited from sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >; Data< VecReal > d_poissonRatio;  FEM Poisson Ratio in Hooke's law [0,0.5[. More...;  ; Data< VecReal > d_youngModulus;  FEM Young's Modulus in Hooke's law. More..",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangle_f_e_m_force_field.html:1117,validat,validated,1117,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangle_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangle_f_e_m_force_field.html,1,['validat'],['validated']
Security,"erited from sofa::gui::qt::DataWidget; core::objectmodel::BaseData * baseData;  ; bool dirty;  ; int counter;  ; bool m_isFilled;  tell if DataWidget has been filled from Data true by default More...;  ; bool m_toFill;  bool to warn action is needed to fill Data, false by default More...;  . Public Member Functions;  RGBAColorDataWidget (QWidget *parent, const char *name, Data< RGBAColor > *data);  ; virtual bool createWidgets ();  ; virtual void setDataReadOnly (bool readOnly);  This method is called after createWidgets to configure whether the created widgets should be read-only. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  ;  Public Member Functions inherited from sofa::gui::qt::TDataWidget< RGBAColor >;  TDataWidget (QWidget *parent, const char *name, MyTData *d);  ; sofa::core::objectmodel::Data< RGBAColor > * getData ();  ; const sofa::core::objectmodel::Data< RGBAColor > * getData () const;  ; virtual void setData (MyTData *d);  ; virtual void setData (MyData *d);  ;  Public Member Functions inherited from sofa::gui::qt::DataWidget;  DataWidget (QWidget *parent, const char *name, MyData *d);  ;  ~DataWidget () override;  ; virtual void setData (MyData *d);  ; const core::objectmodel::BaseData * getBaseData () const;  BaseData pointer accessor function. More...;  ; core::objectmodel::BaseData * getBaseData ();  ; void updateVisibility ();  ; bool isDirty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  . Protected Member Functions; virtual void readFromData ();  The implementation of this method tells how the widget reads the value of the data. More...;  ; virtual void writeToData ();  . Additional Inherited Members;  Static Public Member Functions inherited from sofa::gui::qt::TDataWidget< RGBAColor >; static RealOb",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1rgbacolordatawidget__h_1_1_r_g_b_a_color_data_widget.html:1984,access,accessor,1984,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1rgbacolordatawidget__h_1_1_r_g_b_a_color_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1rgbacolordatawidget__h_1_1_r_g_b_a_color_data_widget.html,1,['access'],['accessor']
Security,"eriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >.; Reimplemented in sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). overridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the same large matrix. Each object adds its contribution to a different section of the matrix. That is why, an offset is used to identify where in the matrix the force field must start adding its contribution. ; kFactstiffness factor that needs to be multiplied to each matrix entry. ; offsetStarting index of the submatrix to fill in the global matrix. . Reimplemented from sofa::core::behavior::ForceField< DataTypes >.; Reimplemented in sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >. ◆ buildDampingMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; )",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field.html:27520,access,access,27520,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field.html,1,['access'],['access']
Security,"es > *s) const;  ; template<class DataTypes > ; StateVecAccessor< DataTypes, V_ALL, V_READ > operator[] (const State< DataTypes > *s) const;  . Static Public Member Functions; static TMultiVecId< V_ALL, vaccess > null ();  . Protected Member Functions; IdMap & writeIdMap ();  . Friends; template<VecType vtype2, VecAccess vaccess2> ; class TMultiVecId;  ; std::ostream & operator<< (std::ostream &out, const TMultiVecId< V_ALL, vaccess > &v);  . Attribute details. ◆ defaultId. template<VecAccess vaccess> . MyVecId sofa::core::TMultiVecId< V_ALL, vaccess >::defaultId. protected . Constructor details. ◆ TMultiVecId() [1/4]. template<VecAccess vaccess> . sofa::core::TMultiVecId< V_ALL, vaccess >::TMultiVecId ; (; ). default . ◆ TMultiVecId() [2/4]. template<VecAccess vaccess> . template<VecType vtype2, VecAccess vaccess2> . sofa::core::TMultiVecId< V_ALL, vaccess >::TMultiVecId ; (; const TVecId< vtype2, vaccess2 > & ; v). inline . Copy from another VecId, possibly with another type of access, with the constraint that the access must be compatible (i.e. cannot create a write-access VecId from a read-only VecId. . ◆ TMultiVecId() [3/4]. template<VecAccess vaccess> . sofa::core::TMultiVecId< V_ALL, vaccess >::TMultiVecId ; (; const TMultiVecId< V_ALL, vaccess > & ; mv). inline . ◆ TMultiVecId() [4/4]. template<VecAccess vaccess> . template<VecType vtype2, VecAccess vaccess2> . sofa::core::TMultiVecId< V_ALL, vaccess >::TMultiVecId ; (; const TMultiVecId< vtype2, vaccess2 > & ; mv). inline . Function details. ◆ assign(). template<VecAccess vaccess> . void sofa::core::TMultiVecId< V_ALL, vaccess >::assign ; (; const MyVecId & ; id). inline . ◆ getDefaultId(). template<VecAccess vaccess> . const MyVecId& sofa::core::TMultiVecId< V_ALL, vaccess >::getDefaultId ; (; ); const. inline . ◆ getId(). template<VecAccess vaccess> . const MyVecId& sofa::core::TMultiVecId< V_ALL, vaccess >::getId ; (; const BaseState * ; s); const. inline . ◆ getIdMap(). template<VecAccess vaccess> . con",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_t_multi_vec_id_3_01_v___a_l_l_00_01vaccess_01_4.html:2724,access,access,2724,api/master/sofa/html/classsofa_1_1core_1_1_t_multi_vec_id_3_01_v___a_l_l_00_01vaccess_01_4.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_t_multi_vec_id_3_01_v___a_l_l_00_01vaccess_01_4.html,2,['access'],['access']
Security,"es > . bool sofa::component::solidmechanics::spring::PolynomialRestShapeSpringsForceField< DataTypes >::m_useRestMState. protected . ◆ m_weightedCoordinateDifference. template<class DataTypes > . VecCoord sofa::component::solidmechanics::spring::PolynomialRestShapeSpringsForceField< DataTypes >::m_weightedCoordinateDifference. protected . Constructor details. ◆ PolynomialRestShapeSpringsForceField(). template<class DataTypes > . sofa::component::solidmechanics::spring::PolynomialRestShapeSpringsForceField< DataTypes >::PolynomialRestShapeSpringsForceField. protected . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::PolynomialRestShapeSpringsForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::PolynomialRestShapeSpringsForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Add the forces. ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::spring::PolynomialRestShapeSpringsForceField< DataTypes >::addKToMatrix ; (; const core::MechanicalParams * ; mparams, . const sofa::core::behavior::MultiMatrixAccessor * ; matrix . ). overridevirtual . Brings ForceField contribution to the global system stiffness matrix. ; Implements sofa::core::behavior::BaseForceField. ◆ addMBKToMatrix(). temp",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_polynomial_rest_shape_springs_force_field.html:26563,access,access,26563,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_polynomial_rest_shape_springs_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_polynomial_rest_shape_springs_force_field.html,1,['access'],['access']
Security,"ess matrix contributions factor (for implicit schemes) More...;  ; Rayleigh Damping D = rayleighStiffness*K - rayleighMass*M; SReal kFactorIncludingRayleighDamping (SReal rayleighStiffness) const;  ; SReal mFactorIncludingRayleighDamping (SReal rayleighMass) const;  ; Access to vectors from a given state container (i.e. State or MechanicalState); template<class S > ; const Data< typename S::VecCoord > * readX (const S *state) const;  Read access to current position vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readV (const S *state) const;  Read access to current velocity vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readF (const S *state) const;  Read access to current force vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readDx (const S *state) const;  Read access to current dx vector (for implicit schemes) More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readDf (const S *state) const;  Read access to current df vector (for implicit schemes) More...;  ;  Public Member Functions inherited from sofa::core::ExecParams; bool checkValidStorage () const;  ; ExecMode execMode () const;  Mode of execution requested. More...;  ; int threadID () const;  Index of current thread (0 corresponding to the only thread in sequential mode, or first thread in parallel mode) More...;  ; int nbThreads () const;  Number of threads currently known to Sofa. More...;  ;  ExecParams ();  ; void update ();  Make sure this instance is up-to-date relative to the current thread. More...;  ; ExecParams & setExecMode (ExecMode v);  Request a specific mode of execution. More...;  ; ExecParams & setThreadID (int v);  Specify the index of the current thread. More...;  . Static Public Member Functions; static const MechanicalParams * defaultInstance ();  Get the default MechanicalParams, to be used to provide a default values for method parameters. More...;  ;  Static Public Member Func",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html:3720,access,access,3720,api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,1,['access'],['access']
Security,"essorSet ; (; InternalBlockAccessor * ; b, . Index ; i, . Index ; j, . double ; v . ). inlineoverrideprotectedvirtual . ◆ bAccessorSetCSRImpl(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . template<class T > . void sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bAccessorSetCSRImpl ; (; InternalBlockAccessor * ; b, . const T * ; buffer . ). inlineprotected . ◆ bColSize(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual Index sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bColSize ; (; ); const. inlineoverridevirtual . Returnsthe number of columns of blocks ; Reimplemented from sofa::linearalgebra::BaseMatrix. ◆ blockCreate(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual BlockAccessor sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::blockCreate ; (; Index ; i, . Index ; j . ). inlinevirtual . Get write access to a block, possibly creating it. . ◆ blockGet(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual BlockConstAccessor sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::blockGet ; (; Index ; i, . Index ; j . ); const. inlinevirtual . Get read access to a block. . ◆ blockGetW(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual BlockAccessor sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::blockGetW ; (; Index ; i, . Index ; j . ). inlinevirtual . Get write access to a block. . ◆ bRowBegin(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual ColBlockConstIterator sofa::linearalgebra::CompressedRowSparseMatrixMechanical< TBlock, TPolicy >::bRowBegin ; (; Index ; ib); const. inlineoverridevirtual . Get the iterator corresponding to the beginning of the given row of blocks. . ◆ bRowEnd(). template<typename TBlock , typename TPolicy = CRSMechanicalPolicy> . virtual",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:45048,access,access,45048,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,1,['access'],['access']
Security,"et Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Signals |; Public Slots |; List of all members . sofa::gui::qt::DataWidget Class Referenceabstract . #include <DataWidget.h>; Abstract Interface of a qwidget which allows to edit a data. ; More... Inheritance diagram for sofa::gui::qt::DataWidget:. [legend]; Detailed Description; Abstract Interface of a qwidget which allows to edit a data. . Classes; struct  CreatorArgument;  . Protected Attributes; core::objectmodel::BaseData * baseData;  ; bool dirty;  ; int counter;  ; bool m_isFilled;  tell if DataWidget has been filled from Data true by default More...;  ; bool m_toFill;  bool to warn action is needed to fill Data, false by default More...;  . Public Member Functions;  DataWidget (QWidget *parent, const char *name, MyData *d);  ;  ~DataWidget () override;  ; virtual void setData (MyData *d);  ; const core::objectmodel::BaseData * getBaseData () const;  BaseData pointer accessor function. More...;  ; core::objectmodel::BaseData * getBaseData ();  ; void updateVisibility ();  ; bool isDirty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  ; virtual bool createWidgets ()=0;  ; virtual void setDataReadOnly (bool readOnly)=0;  This method is called after createWidgets to configure whether the created widgets should be read-only. More...;  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  . Static Public Member Functions; template<class T > ; static T * create (T *, const CreatorArgument &arg);  ; static DataWidget * CreateDataWidget (const DataWidget::CreatorArgument &dwarg);  . Protected Member Functions; virtual void rea",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_widget.html:1143,access,accessor,1143,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_widget.html,1,['access'],['accessor']
Security,"etMeshTopologyLink(). sofa::core::topology::BaseMeshTopology * sofa::simulation::graph::DAGNode::getMeshTopologyLink ; (; SearchDirection ; dir = SearchUp); const. overridevirtual . Mesh Topology that is relevant for this context (within it or its parents until a mapping is reached that does not preserve topologies). ; Reimplemented from sofa::simulation::Node. ◆ getNbParents(). size_t sofa::simulation::graph::DAGNode::getNbParents ; (; ); const. overridevirtual . returns number of parents ; Implements sofa::core::objectmodel::BaseNode. ◆ getObject() [1/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type,; Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObject() [2/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridevirtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObjects(). void sofa::simulation::graph::DAGNode::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:37092,access,access,37092,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,2,['access'],['access']
Security,etect new collisions. Note that this step must not modify the simulation graph. ; Implemented in sofa::component::collision::detection::algorithm::CollisionPipeline. ◆ doCollisionReset(). virtual void sofa::core::collision::Pipeline::doCollisionReset ; (; ). protectedpure virtual . Remove collision response from last step. ; Implemented in sofa::component::collision::detection::algorithm::CollisionPipeline. ◆ doCollisionResponse(). virtual void sofa::core::collision::Pipeline::doCollisionResponse ; (; ). protectedpure virtual . Add collision response in the simulation graph. ; Implemented in sofa::component::collision::detection::algorithm::CollisionPipeline. ◆ getBroadPhaseDetection(). const BroadPhaseDetection * sofa::core::collision::Pipeline::getBroadPhaseDetection ; (; ); const. Broad phase collision detection method accessor. . ◆ getNarrowPhaseDetection(). const NarrowPhaseDetection * sofa::core::collision::Pipeline::getNarrowPhaseDetection ; (; ); const. Narrow phase collision detection method accessor. . ◆ getResponseList(). virtual std::set< std::string > sofa::core::collision::Pipeline::getResponseList ; (; ); const. pure virtual . get the set of response available with the current collision pipeline ; Implemented in sofa::component::collision::detection::algorithm::CollisionPipeline. ◆ insertInNode(). bool sofa::core::collision::Pipeline::insertInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can insert itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was inserted ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ removeInNode(). bool sofa::core::collision::Pipeline::removeInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can remove itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was removed ; Reimplemented f,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline.html:18081,access,accessor,18081,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline.html,1,['access'],['accessor']
Security,etection(). virtual void sofa::core::collision::Pipeline::doCollisionDetection ; (; const sofa::type::vector< core::CollisionModel * > & ; collisionModels). protectedpure virtual . Detect new collisions. Note that this step must not modify the simulation graph. ; Implemented in sofa::component::collision::detection::algorithm::CollisionPipeline. ◆ doCollisionReset(). virtual void sofa::core::collision::Pipeline::doCollisionReset ; (; ). protectedpure virtual . Remove collision response from last step. ; Implemented in sofa::component::collision::detection::algorithm::CollisionPipeline. ◆ doCollisionResponse(). virtual void sofa::core::collision::Pipeline::doCollisionResponse ; (; ). protectedpure virtual . Add collision response in the simulation graph. ; Implemented in sofa::component::collision::detection::algorithm::CollisionPipeline. ◆ getBroadPhaseDetection(). const BroadPhaseDetection * sofa::core::collision::Pipeline::getBroadPhaseDetection ; (; ); const. Broad phase collision detection method accessor. . ◆ getNarrowPhaseDetection(). const NarrowPhaseDetection * sofa::core::collision::Pipeline::getNarrowPhaseDetection ; (; ); const. Narrow phase collision detection method accessor. . ◆ getResponseList(). virtual std::set< std::string > sofa::core::collision::Pipeline::getResponseList ; (; ); const. pure virtual . get the set of response available with the current collision pipeline ; Implemented in sofa::component::collision::detection::algorithm::CollisionPipeline. ◆ insertInNode(). bool sofa::core::collision::Pipeline::insertInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can insert itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was inserted ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ removeInNode(). bool sofa::core::collision::Pipeline::removeInNode ; (; objectmodel::BaseNode * ; ). overridevirtual . the component can r,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline.html:17899,access,accessor,17899,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline.html,1,['access'],['accessor']
Security,"except . Specific set function for 1-element vectors. . ◆ set() [3/3]. template<sofa::Size N, typename ValueType > . template<Size N2, class real2 > . constexpr void sofa::type::Vec< N, ValueType >::set ; (; const Vec< N2, real2 > & ; v, . ValueType ; defaultvalue = 0 . ). inlineconstexprnoexcept . Specific set from a different size vector (given default value and ignored outside entries) . ◆ size(). template<sofa::Size N, typename ValueType > . static constexpr sofa::Size sofa::type::Vec< N, ValueType >::size ; (; void ; ). inlinestaticconstexpr . ◆ sum(). template<sofa::Size N, typename ValueType > . constexpr ValueType sofa::type::Vec< N, ValueType >::sum ; (; ); const. inlineconstexprnoexcept . sum of all elements of the vector . ◆ w() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::w ; (; ); const. inlineconstexprnoexcept . Special const access to fourth element. . ◆ w() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::w ; (; ). inlineconstexprnoexcept . Special access to fourth element. . ◆ x() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::x ; (; ); const. inlineconstexprnoexcept . Special const access to first element. . ◆ x() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::x ; (; ). inlineconstexprnoexcept . Special access to first element. . ◆ y() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N,",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:28620,access,access,28620,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html,1,['access'],['access']
Security,"expr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr real toReal () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr operator real () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:5030,access,access,5030,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,2,['access'],['access']
Security,"expr Element () noexcept;  ; template<typename... ArgsT, typename = std::enable_if_t < (std::is_convertible_v<ArgsT, sofa::Index> && ...)>> ; constexpr Element (ArgsT &&... args) noexcept;  ;  Public Member Functions inherited from sofa::type::fixed_array< sofa::Index, GeometryElement::NumberOfNodes >; constexpr fixed_array ();  ; constexpr fixed_array (value_type r1) noexcept;  Specific constructor for 1-element vectors. More...;  ; constexpr fixed_array (ArgsT &&... r) noexcept;  ; constexpr iterator begin () noexcept;  ; constexpr const_iterator begin () const noexcept;  ; constexpr const_iterator cbegin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr const_iterator cend () const noexcept;  ; constexpr reference operator[] (size_type i);  ; constexpr const_reference operator[] (size_type i) const;  ; constexpr sofa::Index & get () &noexcept;  ; constexpr const sofa::Index & get () const &noexcept;  ; constexpr sofa::Index && get () &&noexcept;  ; constexpr const sofa::Index && get () const &&noexcept;  ; constexpr reference at (size_type i);  ; constexpr const_reference at (size_type i) const;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; void swap (fixed_array< sofa::Index, N > &y);  ; constexpr const sofa::Index * data () const noexcept;  ; constexpr const Array & array () const noexcept;  direct access to array More...;  ; constexpr Array & array () noexcept;  direct access to array More...;  ; constexpr fixed_array< sofa::Index, N > & operator= (const fixed_array< T2, N > &rhs) noexcept;  ; constexpr void assign (const sofa::Index &value) noexcept;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::fixed_array< sofa::Index, GeometryElement::NumberOfNodes >; sofa::Index elems [N];  ;  Static Public Member Functions inherited from sofa::type::fixed_arra",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1topology_1_1_element.html:2137,access,access,2137,api/master/sofa/html/structsofa_1_1topology_1_1_element.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1topology_1_1_element.html,1,['access'],['access']
Security,"e getNbCols () const;  number of columns More...;  ; constexpr void operator= (const Real *p) noexcept;  Assignment from an array of elements (stored per line). More...;  ; constexpr void operator= (const Mat< L, C, real2 > &m) noexcept;  Assignment from another matrix. More...;  ; constexpr void operator= (const Mat< L2, C2, Real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, Real > &m) const noexcept;  ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, Real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standar",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:3129,access,access,3129,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,2,['access'],['access']
Security,"faces. ; Transparent objects should use this method to get a correct display order. ; Reimplemented from sofa::core::visual::VisualModel. ◆ exportOBJ(). void sofa::component::visual::VisualModelImpl::exportOBJ ; (; std::string ; name, . std::ostream * ; out, . std::ostream * ; mtl, . sofa::Index & ; vindex, . sofa::Index & ; nindex, . sofa::Index & ; tindex, . int & ; count . ). overridevirtual . Append this mesh to an OBJ format stream. The number of vertices position, normal, and texture coordinates already written is given as parameters This method should update them ; Reimplemented from sofa::core::visual::VisualModel. ◆ flipFaces(). void sofa::component::visual::VisualModelImpl::flipFaces ; (; ). ◆ getCastShadow(). bool sofa::component::visual::VisualModelImpl::getCastShadow ; (; ); const. inline . ◆ GetCustomTemplateName(). static std::string sofa::component::visual::VisualModelImpl::GetCustomTemplateName ; (; ). inlinestatic . Returns the sofa class name. By default the name of the c++ class is exposed... More details on the name customization infrastructure is in NameDecoder.h . ◆ getEdges(). const VecVisualEdge& sofa::component::visual::VisualModelImpl::getEdges ; (; ); const. inline . ◆ getFilename(). std::string sofa::component::visual::VisualModelImpl::getFilename ; (; ). inline . ◆ getQuads(). const VecVisualQuad& sofa::component::visual::VisualModelImpl::getQuads ; (; ); const. inline . ◆ getTriangles(). const VecVisualTriangle& sofa::component::visual::VisualModelImpl::getTriangles ; (; ); const. inline . ◆ getUseNormals(). bool sofa::component::visual::VisualModelImpl::getUseNormals ; (; ); const. inline . ◆ getVbitangents(). const VecCoord& sofa::component::visual::VisualModelImpl::getVbitangents ; (; ); const. inline . ◆ getVertices(). const VecCoord& sofa::component::visual::VisualModelImpl::getVertices ; (; ); const. inline . ◆ getVnormals(). const VecDeriv& sofa::component::visual::VisualModelImpl::getVnormals ; (; ); const. inline . ◆ getVtangen",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl.html:42814,expose,exposed,42814,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl.html,1,['expose'],['exposed']
Security,"fault. ; Reimplemented in sofa::core::objectmodel::Context. ◆ executeVisitor(). void sofa::core::objectmodel::BaseContext::executeVisitor ; (; simulation::Visitor * ; , . bool ; precomputedOrder = false . ). virtual . apply an action ; Reimplemented in sofa::simulation::Node. ◆ get() [1/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const std::string & ; path); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [2/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [3/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [4/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:19521,access,access,19521,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['access'],['access']
Security,"float *v) const;  Multiply the transposed matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulTV (double *result, const double *v) const;  Multiply the transposed matrix by double vector v and add the result in vector result. More...;  ; virtual void opMulTM (BaseMatrix *result, BaseMatrix *m) const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:18916,access,access,18916,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,1,['access'],['access']
Security,"framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPickParticlesWithTagsVisitor Class Reference . #include <MechanicalPickParticlesWithTagsVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPickParticlesWithTagsVisitor:. [legend]; Detailed Description; Find mechanical particles hit by the given ray on dof containing one tag or all provided by a tag list; A mechanical particle is defined as a 2D or 3D, position or rigid DOF which is linked to the free mechanical DOFs by mechanical mappings . Public Attributes; type::Vec3d rayOrigin;  ; type::Vec3d rayDirection;  ; double radius0;  ; double dRadius;  ; std::list< sofa::core::objectmodel::Tag > tags;  ; bool mustContainAllTags;  ; Particles particles;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPickParticlesWithTagsVisitor (const sofa::core::ExecParams *mparams, const type::Vec3d &origin, const type::Vec3d &direction, double r0=0.001, double dr=0.0, std::list< sofa::core::objectmodel::Tag > _tags=std::list< sofa::core::objectmodel::Tag >(), bool _mustContainAllTags=false);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; void getClosestParticle (sofa::core::behavior::BaseMechanica",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html:1152,access,access,1152,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_with_tags_visitor.html,1,['access'],['access']
Security,"g & sofa::helper::getFactoryLog ; (; ). ◆ getNoVal(). std::string sofa::helper::getNoVal ; (; ). ◆ getReadAccessor(). template<class T > . ReadAccessor<core::objectmodel::Data<T> > sofa::helper::getReadAccessor ; (; const core::objectmodel::Data< T > & ; data). Returns a read accessor from the provided Data<> Example of use: auto points = getReadAccessor(d_points) . ◆ getTime(). std::string sofa::helper::getTime ; (; ctime_t ; t, . int ; niter = 1 . ). ◆ gettypename(). SOFA_HELPER_API std::string sofa::helper::gettypename ; (; const std::type_info & ; t). Decode the type's name to a more readable form if possible. . ◆ getVal() [1/2]. std::string sofa::helper::getVal ; (; double ; v). ◆ getVal() [2/2]. std::string sofa::helper::getVal ; (; double ; v, . int ; niter . ). ◆ getWriteAccessor(). template<class T > . WriteAccessor<core::objectmodel::Data<T> > sofa::helper::getWriteAccessor ; (; core::objectmodel::Data< T > & ; data). Returns a write only accessor from the provided Data<> Example of use: auto points = getWriteOnlyAccessor(d_points) . ◆ getWriteOnlyAccessor(). template<class T > . WriteOnlyAccessor<core::objectmodel::Data<T> > sofa::helper::getWriteOnlyAccessor ; (; core::objectmodel::Data< T > & ; data). Returns a write only accessor from the provided Data<> WriteOnly accessors are faster than WriteAccessor because as the data is only read this means there is no need to pull the data from the parents Example of use: auto points = getWriteOnlyAccessor(d_points) . ◆ init(). SOFA_HELPER_API void sofa::helper::init ; (; ). Initialize the SofaHelper library. . ◆ irand(). int sofa::helper::irand ; (; ). inline . ◆ isClamped(). template<class T > . bool sofa::helper::isClamped ; (; const T & ; value, . const T & ; low, . const T & ; high . ). inline . ◆ isCleanedUp(). SOFA_HELPER_API bool sofa::helper::isCleanedUp ; (; ). Return true if and only if the SofaHelper library has been cleaned up. . ◆ isEqual(). template<class T > . bool sofa::helper::isEqual ; (; T ; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:27365,access,accessor,27365,api/master/sofa/html/namespacesofa_1_1helper.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html,1,['access'],['accessor']
Security,"g &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ canAccessSleepingNode. bool sofa::simulation::Visitor::canAccessSleepingNode. Can the visitor access sleeping nodes? . ◆ params. const sofa::core::ExecParams* sofa::simulation::Visitor::params. protected . ◆ subsetsToManage. TagSet sofa::simulation::Visitor::subsetsToManage. list of the subsets . Constructor details. ◆ Visitor(). sofa::simulation::Visitor::Visitor ; (; const sofa::core::ExecParams * ; params). explicit . ◆ ~Visitor(). sofa::simulation::Visitor::~Visitor ; (; ). virtualdefault . Function details. ◆ addTag(). Visitor& sofa::simulation::Visitor::addTag ; (; Tag ; t). inline . ◆ begin() [1/2]. simulation::Visitor::ctime_t sofa::simulation::Visitor::begin ; (; simulation::Node * ; node, . sofa::core::objectmodel::BaseObject * ; obj, . const std::string & ; typeInfo = std::string(""type"") . ). virtual . Optional helper method to call before handling an object if not using the for_each method. It currently takes care of time logging, but could be extended (step-by-step execution for instance) . ◆ begin() [2/2]. simulation::Visitor::ctime_t sofa::simulation::Visitor::begin ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html:4676,access,access,4676,api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html,1,['access'],['access']
Security,g-histogram-on-view; . /page; . /3; ; SOFA - Topic: [SOLVED] putting histogram on view. /5; ; SOFA - Topic: [SOLVED] putting histogram on view. SOFA - Topic: [SOLVED] putting histogram on view. /pyscn-files-not-opening-despite-having-python-3-8; ; SOFA - Topic: PYSCN files not opening despite having python 3.8. /pyscn-file-softrobotics-plugin; ; SOFA - Topic: [SOLVED] .pyscn file (SoftRobotics Plugin). /python3-windows-build-controller-results-in-segfault; ; SOFA - Topic: Python3 Windows build – Controller results in segfault. /pythonlibs-not-found; ; SOFA - Topic: PythonLibs not found. /python-runtime-fatal-error-with-gil; ; SOFA - Topic: Python runtime fatal error with GIL. /python-scene-errors; . /embed; ; SOFA - Topic: Python scene errors. SOFA - Topic: Python scene errors. /qsqltable-and-qsqldatabase-created-in-qt-are-not-accessible-in-sofa; . /feed; ; [SOLVED] QSqlTable and QSqlDatabase created in QT are not accessible in sofa – SOFA. SOFA - Topic: [SOLVED] QSqlTable and QSqlDatabase created in QT are not accessible in sofa. /qsqltable-and-qsqldatabase-created-in-qt-are-not-accessible-in-sofa-2; ; SOFA - Topic: QSqlTable and QSqlDatabase created in QT are not accessible in sofa. /qt5quick-directory-is-not-found-how-to-fix-this-error; . /feed; ; [SOLVED] Qt5Quick directory is not found. how to fix this error – SOFA. SOFA - Topic: [SOLVED] Qt5Quick directory is not found. how to fix this error. /qtableview-graph-linked-with-sofa-scene-file; ; SOFA - Topic: QTableView graph linked with SOFA scene file. /qtableview-saving-data-into-sqlite; ; SOFA - Topic: QTableView saving data into sqlite. /qt-version-issues-on-windows; . /page; . /13; ; SOFA - Topic: [SOLVED] Qt version issues on Windows. /4; ; SOFA - Topic: [SOLVED] Qt version issues on Windows. SOFA - Topic: [SOLVED] Qt version issues on Windows. /quarter-window-display-on-macos; ; SOFA - Topic: Quarter-window display on macOS. /quasi-static-simulation-without-dynamics; ; SOFA - Topic: [SOLVED] Quasi-static si,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:371555,access,accessible,371555,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['access'],['accessible']
Security,g. /unity3d-digital-trainers-blender-sofa; . /feed; ; Unity3d Digital-Trainers Blender-SOFA – SOFA. SOFA - Topic Tag: Unity3d Digital-Trainers Blender-SOFA. /unreal; . /feed; ; Unreal – SOFA. SOFA - Topic Tag: Unreal. /unreal-engine; . /feed; ; Unreal Engine – SOFA. SOFA - Topic Tag: Unreal Engine. /urdf; . /feed; ; urdf – SOFA. SOFA - Topic Tag: urdf. /using-sofa; . /feed; ; using sofa – SOFA. SOFA - Topic Tag: using sofa. /using-sofapython3; . /feed; ; using sofapython3 – SOFA. SOFA - Topic Tag: using sofapython3. /v16-08; . /feed; ; v16.08 – SOFA. SOFA - Topic Tag: v16.08. /v18-06; . /feed; ; v18.06 – SOFA. SOFA - Topic Tag: v18.06. /v19-06; . /feed; ; v19.06 – SOFA. SOFA - Topic Tag: v19.06. /v19-12-plugin-linking; . /feed; ; v19.12 plugin linking – SOFA. SOFA - Topic Tag: v19.12 plugin linking. /v20; . /feed; ; v20 – SOFA. SOFA - Topic Tag: v20. /v20-12; . /feed; ; v20.12 – SOFA. SOFA - Topic Tag: v20.12. /v20-12-02; . /feed; ; v20.12.02 – SOFA. SOFA - Topic Tag: v20.12.02. /validation; . /feed; ; validation – SOFA. SOFA - Topic Tag: validation. /vasculature; . /feed; ; vasculature – SOFA. SOFA - Topic Tag: vasculature. /vecid; . /feed; ; vecId – SOFA. SOFA - Topic Tag: vecId. /vectordata-data-merge-copy; . /feed; ; vectorData Data merge copy – SOFA. SOFA - Topic Tag: vectorData Data merge copy. /vectorspringforcefield; . /feed; ; VectorSpringForceField – SOFA. SOFA - Topic Tag: VectorSpringForceField. /verification; . /feed; ; verification – SOFA. SOFA - Topic Tag: verification. /vertex; . /feed; ; vertex – SOFA. SOFA - Topic Tag: vertex. /vessel; . /feed; ; vessel – SOFA. SOFA - Topic Tag: vessel. /vessels; . /feed; ; vessels – SOFA. SOFA - Topic Tag: vessels. /video; . /feed; ; video – SOFA. SOFA - Topic Tag: video. /view; . /feed; ; view – SOFA. SOFA - Topic Tag: view. /viewall; . /feed; ; viewall – SOFA. SOFA - Topic Tag: viewall. /viewport; . /feed; ; viewport – SOFA. SOFA - Topic Tag: viewport. /view-rotation; . /feed; ; View Rotation – SOFA. SOFA - Topic,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:489903,validat,validation,489903,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['validat'],['validation']
Security,"g_view sofa::core::ConstraintParams::getName ; (; ); const. inline . ◆ j() [1/2]. MultiMatrixDerivId& sofa::core::ConstraintParams::j ; (; ). inline . Returns ids of the constraint jacobian matrices. . ◆ j() [2/2]. const MultiMatrixDerivId& sofa::core::ConstraintParams::j ; (; ); const. inline . Returns ids of the constraint jacobian matrices. . ◆ lambda() [1/2]. MultiVecDerivId& sofa::core::ConstraintParams::lambda ; (; ). inline . Returns ids of the constraint lambda vectors. . ◆ lambda() [2/2]. const MultiVecDerivId& sofa::core::ConstraintParams::lambda ; (; ); const. inline . Returns ids of the constraint lambda vectors. . ◆ readDx(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::ConstraintParams::readDx ; (; S * ; state); const. inline . Read access to the constraint corrective motion vector. . ◆ readJ(). template<class S > . const Data<typename S::MatrixDeriv>* sofa::core::ConstraintParams::readJ ; (; const S * ; state); const. inline . Read access to the constraint jacobian matrix. . ◆ readLambda(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::ConstraintParams::readLambda ; (; S * ; state); const. inline . Read access to the constraint force vector. . ◆ readV(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::ConstraintParams::readV ; (; const S * ; state); const. inline . Read access to the free (unconstrained) velocity vector. . ◆ readX(). template<class S > . const Data<typename S::VecCoord>* sofa::core::ConstraintParams::readX ; (; const S * ; state); const. inline . Read access to the free (unconstrained) position vector. . ◆ setDx() [1/3]. template<class StateSet > . ConstraintParams& sofa::core::ConstraintParams::setDx ; (; const StateSet & ; g, . MultiVecDerivId ; dx . ). inline . ◆ setDx() [2/3]. ConstraintParams& sofa::core::ConstraintParams::setDx ; (; MultiVecDerivId ; dx). inline . ◆ setDx() [3/3]. ConstraintParams& sofa::core::ConstraintParams::setDx ; (; VecDerivId ; dx). inline . Set",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html:9261,access,access,9261,api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html,1,['access'],['access']
Security,"ger >::JMatrixType *J, const SReal fact);  . Static Public Member Functions; static const std::string GetCustomTemplateName ();  . Protected Member Functions;  JacobiPreconditioner ();  . Attribute details. ◆ f_verbose. template<class TMatrix , class TVector > . sofa::core::objectmodel::lifecycle::RemovedData sofa::component::linearsolver::preconditioner::JacobiPreconditioner< TMatrix, TVector >::f_verbose {this, ""v23.12"", ""v24.06"", ""verbose"", ""This Data is no longer used""}. Constructor details. ◆ JacobiPreconditioner(). template<class TMatrix , class TVector > . sofa::component::linearsolver::preconditioner::JacobiPreconditioner< TMatrix, TVector >::JacobiPreconditioner. protected . Function details. ◆ GetCustomTemplateName(). template<class TMatrix , class TVector > . static const std::string sofa::component::linearsolver::preconditioner::JacobiPreconditioner< TMatrix, TVector >::GetCustomTemplateName ; (; ). inlinestatic . Returns the sofa template name. By default the name of the c++ class signature is exposed... so we need to override that by implementing GetCustomTemplateName() function More details on the name customization infrastructure is in NameDecoder.h . ◆ invert(). template<class TMatrix , class TVector > . void sofa::component::linearsolver::preconditioner::JacobiPreconditioner< TMatrix, TVector >::invert ; (; Matrix & ; M). override . ◆ parse(). template<class TMatrix , class TVector > . void sofa::component::linearsolver::preconditioner::JacobiPreconditioner< TMatrix, TVector >::parse ; (; core::objectmodel::BaseObjectDescription * ; arg). override . ◆ setSystemMBKMatrix(). template<class TMatrix , class TVector > . void sofa::component::linearsolver::preconditioner::JacobiPreconditioner< TMatrix, TVector >::setSystemMBKMatrix ; (; const core::MechanicalParams * ; mparams). override . ◆ SOFA_CLASS(). template<class TMatrix , class TVector > . sofa::component::linearsolver::preconditioner::JacobiPreconditioner< TMatrix, TVector >::SOFA_CLASS ; (; SOFA",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_jacobi_preconditioner.html:4894,expose,exposed,4894,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_jacobi_preconditioner.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_jacobi_preconditioner.html,1,['expose'],['exposed']
Security,"gine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (Pipeline, sofa::core::objectmodel::BaseObject);  ; void reset () override=0;  Reset to initial state. More...;  ; virtual void computeCollisionReset ()=0;  Remove collision response from last step. More...;  ; virtual void computeCollisionDetection ()=0;  Detect new collisions. Note that this step must not modify the simulation graph. More...;  ; virtual void computeCollisionResponse ()=0;  Add collision response in the simulation graph. More...;  ; void computeCollisions ();  ; const BroadPhaseDetection * getBroadPhaseDetection () const;  Broad phase collision detection method accessor. More...;  ; const NarrowPhaseDetection * getNarrowPhaseDetection () const;  Narrow phase collision detection method accessor. More...;  ; virtual std::set< std::string > getResponseList () const =0;  get the set of response available with the current collision pipeline More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &pa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline.html:2604,access,accessor,2604,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline.html,1,['access'],['accessor']
Security,"given a set of required tags, possibly searching up or down from the current context. . ◆ get() [4/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or down from the current context. . ◆ get() [7/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = Searc",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:20519,access,access,20519,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['access'],['access']
Security,"gui::qt::materialdatawidget_h::MaterialDataWidget, sofa::gui::qt::GraphDataWidget_Linear< T >, sofa::gui::qt::GenericDataWidget< DATA, WIDGET >, sofa::gui::qt::DisplayFlagsDataWidget, and sofa::gui::qt::DataFileNameWidget. ◆ DataOwnerDirty. void sofa::gui::qt::DataWidget::DataOwnerDirty ; (; bool ; ). signal . Currently this signal is used to reflect the changes of the component name in the sofaListview. . ◆ dataValueChanged. void sofa::gui::qt::DataWidget::dataValueChanged ; (; QString ; dataValueString). signal . ◆ fillFromData. void sofa::gui::qt::DataWidget::fillFromData ; (; ). slot . slot to be called if DataWidget has not been filled at constructor and need to be filled at first call. Will turn toFill to true only if isFilled == false . ◆ getBaseData() [1/2]. core::objectmodel::BaseData* sofa::gui::qt::DataWidget::getBaseData ; (; ). inline . ◆ getBaseData() [2/2]. const core::objectmodel::BaseData* sofa::gui::qt::DataWidget::getBaseData ; (; ); const. inline . BaseData pointer accessor function. . ◆ isDirty(). bool sofa::gui::qt::DataWidget::isDirty ; (; ). inline . ◆ isFilled(). bool sofa::gui::qt::DataWidget::isFilled ; (; ). inline . return if DataWidget as been filled . ◆ numColumnWidget(). virtual unsigned int sofa::gui::qt::DataWidget::numColumnWidget ; (; ). inlinevirtual . Helper method for column. ; Reimplemented in sofa::gui::qt::QDataSimpleEdit, sofa::gui::qt::TableDataWidget< T, FLAGS >, sofa::gui::qt::SimpleDataWidget< T, Container >, sofa::gui::qt::SimpleDataWidget< T, graph_data_widget_container< T > >, sofa::gui::qt::SimpleDataWidget< T, table_data_widget_container< T, TABLE_NORMAL > >, sofa::gui::qt::rgbacolordatawidget_h::RGBAColorDataWidget, sofa::gui::qt::materialdatawidget_h::VectorMaterialDataWidget, sofa::gui::qt::materialdatawidget_h::MaterialDataWidget, sofa::gui::qt::GraphDataWidget< T >, and sofa::gui::qt::DisplayFlagsDataWidget. ◆ readFromData(). virtual void sofa::gui::qt::DataWidget::readFromData ; (; ). protectedpure virtual . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_widget.html:5093,access,accessor,5093,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_data_widget.html,1,['access'],['accessor']
Security,"hanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >::addGravityToV ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; d_v . ). overridevirtual . Reimplemented from sofa::core::behavior::Mass< DataTypes >. ◆ addKToMatrix() [1/3]. template<class DataTypes > . void sofa::core::behavior::Mass< DataTypes >::addKToMatrix. inlineoverride . ◆ addKToMatrix() [2/3]. template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >::addKToMatrix. override . ◆ addKToMatrix() [3/3]. template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). overridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the same large matrix. Each object adds its contribution to a different section of the matrix. That is why, an offset is used to identify where in the matrix the force field must start adding its contribution. ; kFactstiffness factor that needs to be multiplied to each matrix entry. ; offsetStarting index of the submatrix to fill in the global matrix. . Reimplemented from sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceField< DataTypes >. ◆ addMBKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >::addMBKToMatrix ; (; const core::MechanicalParams * ; mparams, . const sofa::core::behavior::MultiMatrixAccessor * ; matrix . ). ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field_and_mass.html:34602,access,access,34602,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field_and_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field_and_mass.html,1,['access'],['access']
Security,"her containers. Each individual container is represented by a VecId. The class maintains a list of VecIdDeriv objects, which defines the containers contributing to the final cumulative sum. This class provides a simplified interface for accessing elements within the cumulative container. It allows retrieving specific elements using the overloaded subscript operator (operator[]). When accessing an element at a particular index, the class delegates the retrieval to the appropriate container represented by the associated VecIdDeriv. In addition to element retrieval, the class supports dynamic management of the contributing containers. It offers functions to add and remove VecId objects from the list of containers that contribute to the cumulative sum. ; More... Inheritance diagram for sofa::core::AccumulationVecId< TDataTypes, vtype, vaccess >:. [legend]; Detailed Description; template<class TDataTypes, VecType vtype, VecAccess vaccess>; struct sofa::core::AccumulationVecId< TDataTypes, vtype, vaccess >; Proxy class for accessing elements within an imaginary container that represents the cumulative sum of multiple other containers. Each individual container is represented by a VecId. The class maintains a list of VecIdDeriv objects, which defines the containers contributing to the final cumulative sum. This class provides a simplified interface for accessing elements within the cumulative container. It allows retrieving specific elements using the overloaded subscript operator (operator[]). When accessing an element at a particular index, the class delegates the retrieval to the appropriate container represented by the associated VecIdDeriv. In addition to element retrieval, the class supports dynamic management of the contributing containers. It offers functions to add and remove VecId objects from the list of containers that contribute to the cumulative sum. ; Template Parameters. TDataTypesType of DOFs stored in the State . Public Member Functions; Deriv operator[] ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1_accumulation_vec_id.html:1490,access,accessing,1490,api/master/sofa/html/structsofa_1_1core_1_1_accumulation_vec_id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1_accumulation_vec_id.html,1,['access'],['accessing']
Security,"ic Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::type::RGBAColor Class Reference . #include <RGBAColor.h>; encode a 4 RGBA component color ; More...; Detailed Description; encode a 4 RGBA component color . Static Public Attributes; static constexpr sofa::Size NumberOfComponents = 4;  ; static constexpr sofa::Size static_size = NumberOfComponents;  . Public Member Functions; constexpr RGBAColor ();  ; constexpr RGBAColor (const std::array< float, NumberOfComponents > &c);  ; constexpr RGBAColor (float r, float g, float b, float a);  ;  RGBAColor (const type::fixed_array< float, NumberOfComponents > &c)=delete;  ;  RGBAColor (const type::Vec4f &c)=delete;  ; constexpr float & r ();  ; constexpr float & g ();  ; constexpr float & b ();  ; constexpr float & a ();  ; constexpr const float & r () const;  ; constexpr const float & g () const;  ; constexpr const float & b () const;  ; constexpr const float & a () const;  ; constexpr void r (const float r);  ; constexpr void g (const float g);  ; constexpr void b (const float b);  ; constexpr void a (const float a);  ; constexpr float & operator[] (std::size_t i);  ; constexpr const float & operator[] (std::size_t i) const;  ; void set (float r, float g, float b, float a);  ; bool operator== (const RGBAColor &b) const;  ; bool operator!= (const RGBAColor &b) const;  ; bool operator< (const RGBAColor &b) const;  ; RGBAColor operator* (float f) const;  ; constexpr const float * data () const noexcept;  ; constexpr const ComponentArray & array () const noexcept;  direct access to array More...;  ; constexpr ComponentArray & array () noexcept;  direct access to array More...;  ; constexpr ComponentArray::iterator begin () noexcept;  ; constexpr ComponentArray::const_iterator begin () const noexcept;  ; constexpr ComponentArray::iterator end () noexcept;  ; constexpr ComponentArray::const_iterator end () const noexcept;  . Static Public Member Functions; static RGBAColor fromVec4 (co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html:1739,access,access,1739,api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,1,['access'],['access']
Security,"icalvisitor::MechanicalPropagateDxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPropagateDxVisitor Class Reference . #include <MechanicalPropagateDxVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPropagateDxVisitor:. [legend]; Detailed Description; Apply a hypothetical displacement. This action does not modify the state (i.e. positions and velocities) of the objects. It is typically applied before a MechanicalComputeDfVisitor, in order to compute the df corresponding to a given dx (i.e. apply stiffness). Dx is propagated to all the layers through the mappings. . Public Attributes; sofa::core::MultiVecDerivId dx;  ; bool ignoreFlag;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateDxVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId dx, bool f=false);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Pu",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html:1048,access,access,1048,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_visitor.html,1,['access'],['access']
Security,"ices = false, class MemoryManager = CPUMemoryManager<T>> . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::vector_id ; (; Size ; n). inlineexplicit . Constructor. . ◆ vector_id() [6/7]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::vector_id ; (; const std::vector< T > & ; x). inline . Constructor. . ◆ vector_id() [7/7]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::vector_id ; (; const_iterator ; first, . const_iterator ; last . ). inline . Constructor. . Function details. ◆ at() [1/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::at ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ at() [2/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::at ; (; Index ; n); const. inline . Read-only random access, with explicit Index. . ◆ operator()() [1/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator()() [2/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n); const. inline . Read-only random access, with explicit Index. . ◆ operator[]() [1/4]. template<class T , class TIndex , bool CheckIndices = false, class Memo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:5846,access,access,5846,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,1,['access'],['access']
Security,"id sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [14/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [15/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ getAnimate(). bool sofa::core::objectmodel::BaseContext::getAnimate ; (; ); const. virtual . Animation flag. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getDefault(). BaseContext * sofa::core::objectmodel::BaseContext::getDefault ; (; ). static . Get the default Context object, that contains the default values for all parameters and can be used when no local context is defined. . ◆ getDt(). SReal sofa::core::objectmodel::BaseContext::getDt ; (; ); const. virtual . Simulation timestep. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getGravity(). const BaseContext::Vec3 & sofa::core::objectmodel::BaseContext::getGravity ; (; ); const. virtual . Gravit",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:22693,access,access,22693,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['access'],['access']
Security,"igidCoord< 2, real >::operator- ; (; const RigidCoord< 2, real > & ; a); const. inlineconstexpr . ◆ operator/(). template<typename real > . template<typename real2 > . constexpr RigidCoord<2, real> sofa::defaulttype::RigidCoord< 2, real >::operator/ ; (; real2 ; a); const. inlineconstexpr . ◆ operator/=(). template<typename real > . template<typename real2 > . constexpr void sofa::defaulttype::RigidCoord< 2, real >::operator/= ; (; real2 ; a). inlineconstexpr . ◆ operator==(). template<typename real > . constexpr bool sofa::defaulttype::RigidCoord< 2, real >::operator== ; (; const RigidCoord< 2, real > & ; b); const. inlineconstexpr . ◆ operator[]() [1/2]. template<typename real > . constexpr real& sofa::defaulttype::RigidCoord< 2, real >::operator[] ; (; Size ; i). inlineconstexpr . Access to i-th element. . ◆ operator[]() [2/2]. template<typename real > . constexpr const real& sofa::defaulttype::RigidCoord< 2, real >::operator[] ; (; Size ; i); const. inlineconstexpr . Const access to i-th element. . ◆ pointToChild(). template<typename real > . constexpr Vec2 sofa::defaulttype::RigidCoord< 2, real >::pointToChild ; (; const Vec2 & ; v); const. inlineconstexpr . obsolete. Use unprojectPoint. . ◆ pointToParent(). template<typename real > . constexpr Vec2 sofa::defaulttype::RigidCoord< 2, real >::pointToParent ; (; const Vec2 & ; v); const. inlineconstexpr . obsolete. Use projectPoint. . ◆ projectPoint(). template<typename real > . constexpr Vec2 sofa::defaulttype::RigidCoord< 2, real >::projectPoint ; (; const Vec2 & ; v); const. inlineconstexpr . Apply the transform to a point, i.e. project a point from the child frame to the parent frame (translation and rotation) . ◆ projectVector(). template<typename real > . constexpr Vec2 sofa::defaulttype::RigidCoord< 2, real >::projectVector ; (; const Vec2 & ; v); const. inlineconstexpr . Apply the transform to a vector, i.e. project a vector from the child frame to the parent frame (rotation only, no translation added) . ◆",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_rigid_coord_3_012_00_01real_01_4.html:11511,access,access,11511,api/master/sofa/html/classsofa_1_1defaulttype_1_1_rigid_coord_3_012_00_01real_01_4.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_rigid_coord_3_012_00_01real_01_4.html,1,['access'],['access']
Security,"impleEdit:. [legend]. Protected Attributes; QSimpleEdit innerWidget_;  ;  Protected Attributes inherited from sofa::gui::qt::DataWidget; core::objectmodel::BaseData * baseData;  ; bool dirty;  ; int counter;  ; bool m_isFilled;  tell if DataWidget has been filled from Data true by default More...;  ; bool m_toFill;  bool to warn action is needed to fill Data, false by default More...;  . Public Member Functions;  QDataSimpleEdit (QWidget *, const char *name, core::objectmodel::BaseData *);  ; unsigned int numColumnWidget () override;  Helper method for column. More...;  ; unsigned int sizeWidget () override;  Helper method to give a size. More...;  ; bool createWidgets () override;  ; void setDataReadOnly (bool readOnly) override;  This method is called after createWidgets to configure whether the created widgets should be read-only. More...;  ;  Public Member Functions inherited from sofa::gui::qt::DataWidget;  DataWidget (QWidget *parent, const char *name, MyData *d);  ;  ~DataWidget () override;  ; virtual void setData (MyData *d);  ; const core::objectmodel::BaseData * getBaseData () const;  BaseData pointer accessor function. More...;  ; core::objectmodel::BaseData * getBaseData ();  ; void updateVisibility ();  ; bool isDirty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  . Protected Member Functions; void readFromData () override;  The implementation of this method tells how the widget reads the value of the data. More...;  ; void writeToData () override;  . Additional Inherited Members;  Static Public Member Functions inherited from sofa::gui::qt::DataWidget; template<class T > ; static T * create (T *, const CreatorArgument &arg);  ; static DataWidget * CreateDataWidget (const DataWidget::CreatorArgument &dwarg);  ;  Signals inherited from sofa::gui::qt::DataWidget; void WidgetDirty (bool);  ; void DataOwnerDirty (bool);  ; void dataV",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_data_simple_edit.html:1506,access,accessor,1506,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_data_simple_edit.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_data_simple_edit.html,1,['access'],['accessor']
Security,"incision-with-phantom-omni; ; SOFA - Topic: 2d Incision with Phantom omni. /3d-model-of-human-anatomy; ; SOFA - Topic: [SOLVED] 3D Model of human anatomy. /3d-printing-simulation-using-sofa; ; SOFA - Topic: 3D printing simulation using SOFA. /abdominal-organs-in-sofa; ; SOFA - Topic: Abdominal Organs in SOFA. /about-explanation-of-components; ; SOFA - Topic: [SOLVED] about explanation of components. /about-stick-and-stickcontactconstraint; ; SOFA - Topic: about stick and stickcontactconstraint. /about-the-suturing-simulation; ; SOFA - Topic: [SOLVED] About the suture simulation. /about-the-unit; ; SOFA - Topic: [SOLVED] About the unit. /access-constraint-forces-from-a-different-class; ; SOFA - Topic: [SOLVED] Access constraint forces from a different class. /accessing-and-mofiying-array-values-with-context-managers-in-sofapython3; ; SOFA - Topic: Accessing and mofiying array values with Context Managers in SofaPython3. /accessing-deformations-force-states-etc-using-python; ; SOFA - Topic: [SOLVED] Accessing deformations, force states, etc using Python. /access-object-data-on-the-fly-sofapython3; ; SOFA - Topic: Access object data on the fly, sofaPython3. /access-stress-in-triangularfemforcefield; ; SOFA - Topic: Access stress in TriangularFEMForceField. /activating-twoway-option-in-attachconstraint-component-or-not; ; SOFA - Topic: Activating twoWay option in attachConstraint component or not. /actuating-multiple-components-with-cableconstraint; ; SOFA - Topic: Actuating multiple components with CableConstraint. /add_executable-cannot-create-target-another-target-with-the-same-namea-exist; ; SOFA - Topic: add_executable cannot create target, another target with the same namea exist. /add-curve-paramater-to-an-instrument; ; SOFA - Topic: [SOLVED] Add curve paramater to an instrument. /adding-captions-and-instructions-in-sofa-animation-exercises; . /feed; ; [SOLVED] Adding captions and instructions in sofa animation exercises – SOFA. SOFA - Topic: [SOLVED] Adding capt",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:252998,access,accessing-deformations-force-states-etc-using-python,252998,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['access'],['accessing-deformations-force-states-etc-using-python']
Security,"ine). More...;  ; template<typename real2 > ; constexpr void operator= (const Mat< L, C, real2 > &m) noexcept;  Assignment from another matrix. More...;  ; template<Size L2, Size C2> ; constexpr void operator= (const Mat< L2, C2, real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; template<Size L2, Size C2> ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, real > &m) const noexcept;  ; template<Size C2> ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standar",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:3154,access,access,3154,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,2,['access'],['access']
Security,"inherited from sofa::core::BaseVecId; VecType type;  ; unsigned int index;  ;  Protected Member Functions inherited from sofa::core::BaseVecId;  BaseVecId (VecType t, unsigned int i);  . Constructor details. ◆ TVecId() [1/5]. template<VecType vtype, VecAccess vaccess> . sofa::core::TVecId< vtype, vaccess >::TVecId ; (; ). inline . ◆ TVecId() [2/5]. template<VecType vtype, VecAccess vaccess> . sofa::core::TVecId< vtype, vaccess >::TVecId ; (; unsigned int ; i). inline . ◆ TVecId() [3/5]. template<VecType vtype, VecAccess vaccess> . sofa::core::TVecId< vtype, vaccess >::TVecId ; (; const TVecId< vtype, vaccess > & ; v). inline . Copy constructor. . ◆ TVecId() [4/5]. template<VecType vtype, VecAccess vaccess> . template<VecAccess vaccess2> . sofa::core::TVecId< vtype, vaccess >::TVecId ; (; const TVecId< vtype, vaccess2 > & ; v). inline . Copy from another VecId, possibly with another type of access, with the constraint that the access must be compatible (i.e. cannot create a write-access VecId from a read-only VecId. . ◆ TVecId() [5/5]. template<VecType vtype, VecAccess vaccess> . template<VecAccess vaccess2> . sofa::core::TVecId< vtype, vaccess >::TVecId ; (; const TVecId< V_ALL, vaccess2 > & ; v). inlineexplicit . Function details. ◆ getGroup(). template<VecType vtype, VecAccess vaccess> . std::string sofa::core::TVecId< vtype, vaccess >::getGroup ; (; ); const. inline . ◆ getName(). template<VecType vtype, VecAccess vaccess> . std::string sofa::core::TVecId< vtype, vaccess >::getName ; (; ); const. inline . ◆ isNull(). template<VecType vtype, VecAccess vaccess> . bool sofa::core::TVecId< vtype, vaccess >::isNull ; (; ); const. inline . ◆ null(). template<VecType vtype, VecAccess vaccess> . static TVecId sofa::core::TVecId< vtype, vaccess >::null ; (; ). inlinestatic . ◆ operator!=(). template<VecType vtype, VecAccess vaccess> . template<VecType vtype2, VecAccess vaccess2> . bool sofa::core::TVecId< vtype, vaccess >::operator!= ; (; const TVecId< vtype2, vaccess2 > &",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_t_vec_id.html:2915,access,access,2915,api/master/sofa/html/classsofa_1_1core_1_1_t_vec_id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_t_vec_id.html,1,['access'],['access']
Security,"inite differences. ; More... Inheritance diagram for sofa::mapping_test::Mapping_test< _Mapping >:. [legend]; Detailed Description; template<class _Mapping>; struct sofa::mapping_test::Mapping_test< _Mapping >; Base class for the Mapping tests, with helpers to automatically test applyJ, applyJT, applyDJT and getJs using finite differences. ; Specific test cases can be created using a derived class instantiated on the mapping class to test, and calling function runTest( const InVecCoord& parentInit, const OutVecCoord& childInit, const InVecCoord parentNew, const OutVecCoord expectedChildNew);; This function compares the actual output positions with the expected ones, then automatically tests the methods related to the Jacobian using finite differences.; A small change of the input positions dxIn is randomly chosen and added to the current position. The same is set as velocity.; mapping->apply is called, and the difference dXout between the new output positions and the previous positions is computed; to validate mapping->applyJ, dXin is converted to input velocity vIn and mapping->applyJ is called. dXout and the output velocity vOut must be the same (up to linear approximations errors, thus we apply a very small change of position).; to validate mapping->getJs, we use it to get the Jacobian, then we check that J.vIn = vOut; to validate mapping->applyJT, we apply it after setting the child force fc=vOut, then we check that parent force fp = J^T.fc; to validate mapping->applyDJT, we set the child force, and we compare the parent force before and after a small displacement. The magnitude of the small random changes applied in finite differences is between deltaRange.first*epsilon and deltaRange.second*epsilon, and a failure is issued if the error is greater than errorMax*epsilon, where epsilon=std::numeric_limits<Real>::epsilon() is 1.19209e-07 for float and 2.22045e-16 for double.; AuthorFrançois Faure ; Date2013 . Public Attributes; core::Mapping< In, Out > * mapping;  ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1mapping__test_1_1_mapping__test.html:1530,validat,validate,1530,api/master/sofa/html/structsofa_1_1mapping__test_1_1_mapping__test.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1mapping__test_1_1_mapping__test.html,1,['validat'],['validate']
Security,"ion::graph::ExportDotVisitor Class Reference . #include <ExportDotVisitor.h>. Inheritance diagram for sofa::simulation::graph::ExportDotVisitor:. [legend]; Detailed Description; Write the graph, starting from a root Node, into a std::ostream. The format is the DOT language from Graphviz (https://graphviz.org/) . Public Attributes; std::ostream * out;  ; bool showNode;  ; bool showObject;  ; bool showBehaviorModel;  ; bool showCollisionModel;  ; bool showVisualModel;  ; bool showMapping;  ; bool showContext;  ; bool showCollisionPipeline;  ; bool showSolver;  ; bool showMechanicalState;  ; bool showForceField;  ; bool showInteractionForceField;  ; bool showConstraint;  ; bool showMass;  ; bool showTopology;  ; bool showMechanicalMapping;  ; bool labelNodeName;  ; bool labelNodeClass;  ; bool labelObjectName;  ; bool labelObjectClass;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Protected Attributes; std::map< core::objectmodel::Base *, std::string > names;  None names in output. More...;  ; std::map< std::string, int > nextIndex;  Next indice available for duplicated names. More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  ExportDotVisitor (const sofa::core::ExecParams *params, std::ostream *out);  ;  ~ExportDotVisitor () override;  ; void processObject (Node *node, core::objectmodel::BaseObject *obj);  ; Result processNodeTopDown (Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html:1294,access,access,1294,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_export_dot_visitor.html,1,['access'],['access']
Security,"ionRate. template<class DataTypes > . Data< Real > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_maxInjectionRate. IN: Maximum injection rate (volume per second) . ◆ d_p0. template<class DataTypes > . Data< Real > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_p0. IN: Rest pressure when V = V0. . ◆ d_pressureTriangles. template<class DataTypes > . Data< SeqTriangles > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_pressureTriangles. OUT: list of triangles where a pressure is applied (mesh triangles + tessellated quads) . ◆ d_surfaceAreaAfterTC. template<class DataTypes > . Data< Real > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_surfaceAreaAfterTC. OUT: Surface area after a topology change. . ◆ d_v0. template<class DataTypes > . Data< Real > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_v0. OUT: Rest volume (as computed from initialVolume + injectedVolume) . ◆ d_volumeAfterTC. template<class DataTypes > . Data< Real > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_volumeAfterTC. OUT: Volume after a topology change. . ◆ gradV. template<class DataTypes > . VecDeriv sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::gradV. protected . ◆ l_topology. template<class DataTypes > . SingleLink<TaitSurfacePressureForceField<DataTypes>, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH | BaseLink::FLAG_STRONGLINK> sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::l_topology. Link to be set to the topology container in the component graph. . ◆ lastTopologyRevision. template<class DataTypes > . int sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::lastTopologyRevision. protected . ◆ m_B. template<class DataTypes > . sofa::core::objectmodel::RenamedData<Real> sofa::component::mechanicalload::Ta",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html:26814,inject,injectedVolume,26814,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html,1,['inject'],['injectedVolume']
Security,"irtual . Add an object, or return false if not supported. . ◆ canChangeSleepingState(). bool sofa::core::objectmodel::BaseContext::canChangeSleepingState ; (; ); const. virtual . Whether the context can change its sleeping state or not. ; The Context can not change its sleeping state by default. ; Reimplemented in sofa::core::objectmodel::Context. ◆ executeVisitor(). void sofa::core::objectmodel::BaseContext::executeVisitor ; (; simulation::Visitor * ; , . bool ; precomputedOrder = false . ). virtual . apply an action ; Reimplemented in sofa::simulation::Node. ◆ get() [1/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const std::string & ; path); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [2/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [3/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [4/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:19235,access,access,19235,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['access'],['access']
Security,"it, const InVecCoord parentNew, const OutVecCoord expectedChildNew);; This function compares the actual output positions with the expected ones, then automatically tests the methods related to the Jacobian using finite differences.; A small change of the input positions dxIn is randomly chosen and added to the current position. The same is set as velocity.; mapping->apply is called, and the difference dXout between the new output positions and the previous positions is computed; to validate mapping->applyJ, dXin is converted to input velocity vIn and mapping->applyJ is called. dXout and the output velocity vOut must be the same (up to linear approximations errors, thus we apply a very small change of position).; to validate mapping->getJs, we use it to get the Jacobian, then we check that J.vIn = vOut; to validate mapping->applyJT, we apply it after setting the child force fc=vOut, then we check that parent force fp = J^T.fc; to validate mapping->applyDJT, we set the child force, and we compare the parent force before and after a small displacement. The magnitude of the small random changes applied in finite differences is between deltaRange.first*epsilon and deltaRange.second*epsilon, and a failure is issued if the error is greater than errorMax*epsilon, where epsilon=std::numeric_limits<Real>::epsilon() is 1.19209e-07 for float and 2.22045e-16 for double.; AuthorFrançois Faure ; Date2013 . Public Attributes; core::Mapping< In, Out > * mapping;  the mapping to be tested More...;  ; InDOFs::SPtr inDofs;  mapping input More...;  ; OutDOFs::SPtr outDofs;  mapping output More...;  ; simulation::Node::SPtr root;  Root of the scene graph, created by the constructor an re-used in the tests. More...;  ; simulation::Simulation * simulation;  created by the constructor an re-used in the tests More...;  ; std::pair< Real, Real > deltaRange;  The minimum and maximum magnitudes of the change of each scalar value of the small displacement is perturbation * numeric_limits<Real>::e",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1mapping__test_1_1_mapping__test.html:1986,validat,validate,1986,api/master/sofa/html/structsofa_1_1mapping__test_1_1_mapping__test.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1mapping__test_1_1_mapping__test.html,1,['validat'],['validate']
Security,"iv > * read (core::ConstVecDerivId v) const override;  ; virtual Data< MatrixDeriv > * write (core::MatrixDerivId) override;  ; virtual const Data< MatrixDeriv > * read (core::ConstMatrixDerivId) const override;  ;  Public Member Functions inherited from sofa::core::State< DataTypes >;  SOFA_CLASS (SOFA_TEMPLATE(State, DataTypes), BaseState);  ; sofa::type::TBoundingBox< Real > computeBBox () const;  Compute the bounding box independently from the visibility parameters. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible=false) override;  ; objectmodel::BaseData * baseWrite (VecId v) override;  ; const objectmodel::BaseData * baseRead (ConstVecId v) const override;  ; ReadVecCoord readPositions () const;  ; WriteVecCoord writePositions ();  ; WriteOnlyVecCoord writeOnlyPositions ();  ; ReadVecCoord readRestPositions () const;  ; WriteVecCoord writeRestPositions ();  ; WriteOnlyVecCoord writeOnlyRestPositions ();  ; ReadVecDeriv readVelocities () const;  ; WriteVecDeriv writeVelocities ();  ; WriteOnlyVecDeriv writeOnlyVelocities ();  ; ReadVecDeriv readForces () const;  ; WriteVecDeriv writeForces ();  ; WriteOnlyVecDeriv writeOnlyForces ();  ; ReadVecDeriv readDx () const;  ; WriteVecDeriv writeDx ();  ; WriteOnlyVecDeriv writeOnlyDx ();  ; ReadVecDeriv readNormals () const;  ; const AccumulationVecId< DataTypes, V_DERIV, V_READ > & readTotalForces () const;  Returns a proxy objects offering simplified access to elements of the cumulative sum of all force containers. More...;  ; void addToTotalForces (core::ConstVecDerivId forceId) override;  The provided VecDerivId will contribute to the sum of all force containers. More...;  ; void removeFromTotalForces (core::ConstVecDerivId forceId) override;  ;  Public Member Functions inherited from sofa::core::BaseState;  SOFA_ABSTRACT_CLASS (BaseState, objectmodel::BaseObject);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_state.html:3982,access,access,3982,api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_state.html,1,['access'],['access']
Security,"ize L2, Size C2> ; constexpr void operator= (const Mat< L2, C2, real > &m) noexcept;  Assignment from a matrix of different size. More...;  ; template<Size L2, Size C2> ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, real > &m) const noexcept;  ; template<Size C2> ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More..",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:3318,access,access,3318,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,2,['access'],['access']
Security,k 2021 experience. /the-sofa-week-2022-experience; ; SOFA – The SOFA Week 2022 experience. /the-sofa-week-2023-experience; ; SOFA – The SOFA Week 2023 experience. /toolbox-for-design-optimization; ; SOFA – Toolbox for Design Optimization. /tutorial-accepted-at-eg22; ; SOFA – Tutorial accepted at EG’22!. /tutorial-at-robosoft-2019; ; SOFA – Tutorial at RoboSoft 2019. /tutorial-on-softrobot-in-june-2019; ; SOFA – Tutorial on SoftRobot in June 2019. /two-new-sofa-phd-defended; ; SOFA – Two new SOFA PhD defended. /two-winner-of-the-sofa-awards-2020; ; SOFA – Two winner of the SOFA Awards 2020. /two-winner-of-the-sofa-awards-2021; ; SOFA – Two winner of the SOFA Awards 2021. /two-winners-of-the-sofa-awards-2022; ; SOFA – Two winners of the SOFA Awards 2022. /two-winners-of-the-sofa-awards-2023; ; SOFA – Two winners of the SOFA Awards 2023. /university-florida-joins-the-sofa-consortium; ; SOFA – University Florida joins the SOFA Consortium. /validation-of-a-non-linear-model-of-the-liver; ; SOFA – Validation of a non-linear model of the liver. /vriphys-2015-sofa-day; ; SOFA – VRIPHYS 2015: SOFA-day !. /workshop-accepted-at-embc-2022; ; SOFA – Workshop accepted at EMBC 2022!. /workshop-on-soft-robotics-in-montreal; ; SOFA – Workshop on Soft-Robotics in Montreal. /workshoptutorials-sofa-at-isbms14; . /feed; . 	Comments on: Workshop/Tutorials SOFA at ISBMS’14	. SOFA – Workshop/Tutorials SOFA at ISBMS’14. SOFA – News. /sofa-v16-12; ; SOFA – SOFA v16.12. /sofa-v17.12; ; SOFA – SOFA v17.12. /sofa-v17-06; ; SOFA – SOFA v17.06. /sofa-v17-12; ; SOFA – SOFA v17.12. /sofa-v18.06; ; SOFA – SOFA v18.06. /sofa-v18.12; ; SOFA – SOFA v18.12. /sofa-v18-06; ; SOFA – SOFA v18.06. /sofa-v18-12; ; SOFA – SOFA v18.12. /sofa-v19.06; ; SOFA – SOFA v19.06. /sofa-v19.12; ; SOFA – SOFA v19.12. /sofa-v19-06; ; SOFA – SOFA v19.06. /sofa-v19-12; ; SOFA – SOFA v19.12. /sofa-v20.06; ; SOFA – SOFA v20.06. /sofa-v20-06; ; SOFA – SOFA v20.06. /sofa-v20-12; ; SOFA – SOFA v20.12. /sofa-v21-06; ; SOFA – SOFA v,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:12372,validat,validation-of-a-non-linear-model-of-the-liver,12372,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['validat'],['validation-of-a-non-linear-model-of-the-liver']
Security,"l (Matrix &M, const Real ref, bool keepEmptyRows=false);  ; void copyLowerNonSmall (Matrix &M, const Real ref, bool keepEmptyRows=false);  ; static bool nonzeros (Index, Index, Block &val, const Real);  ; static bool nonsmall (Index, Index, Block &val, const Real ref);  ; static bool upper (Index i, Index j, Block &val, const Real);  ; static bool lower (Index i, Index j, Block &val, const Real);  ; static bool upper_nonzeros (Index i, Index j, Block &val, const Real ref);  ; static bool lower_nonzeros (Index i, Index j, Block &val, const Real ref);  ; static bool upper_nonsmall (Index i, Index j, Block &val, const Real ref);  ; static bool lower_nonsmall (Index i, Index j, Block &val, const Real ref);  . Virtual iterator classes and methods; virtual BlockConstAccessor blockGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blockGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blockCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const override;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const override;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const override;  Get the iterators corresponding to the beginning and end of the given row of blocks. More...;  ; virtual RowBlockConstIterator bRowsBegin () const override;  Get the iterator corresponding to the beginning of the rows of blocks. More...;  ; virtual RowBlockConstIterator bRowsEnd () const override;  Get the iterator corresponding to the end of the rows of blocks. More...;  ; virtual std::pair< RowBlockConstIterator, RowBlockConstIterator > bRowsRange () const override;  Get the iterators corresponding to the beginning a",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:25686,access,access,25686,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,1,['access'],['access']
Security,"l members . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager > Class Template Reference . #include <integer_id.h>. Inheritance diagram for sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >:. [legend]. Public Member Functions;  vector_id ();  Basic constructor. More...;  ;  vector_id (Size n, const T &value);  Constructor. More...;  ;  vector_id (int n, const T &value);  Constructor. More...;  ;  vector_id (long n, const T &value);  Constructor. More...;  ;  vector_id (Size n);  Constructor. More...;  ;  vector_id (const std::vector< T > &x);  Constructor. More...;  ;  vector_id (const_iterator first, const_iterator last);  Constructor. More...;  ; reference at (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference at (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator() (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator() (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator[] (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator[] (Index n) const;  Read-only random access. More...;  ; Index push_back (const_reference v);  ;  Public Member Functions inherited from sofa::type::vector< T, MemoryManager >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< T, Alloc > &&v);  Move assignment operator. More...;  ;  vector (typename vector< T >::const_iterator first, typename vector< T >::const_iterator last)",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:1266,access,access,1266,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,1,['access'],['access']
Security,"late<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access templa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:6183,access,access,6183,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,4,['access'],['access']
Security,"late<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirecti",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:6627,access,access,6627,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,4,['access'],['access']
Security,"late<class _DataTypes > . sofa::core::topology::BaseMeshTopology* sofa::component::solidmechanics::spring::FastTriangularBendingSprings< _DataTypes >::m_topology. protected . Constructor details. ◆ FastTriangularBendingSprings(). template<class DataTypes > . sofa::component::solidmechanics::spring::FastTriangularBendingSprings< DataTypes >::FastTriangularBendingSprings. protected . ◆ ~FastTriangularBendingSprings(). template<class DataTypes > . sofa::component::solidmechanics::spring::FastTriangularBendingSprings< DataTypes >::~FastTriangularBendingSprings. protectedvirtual . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::FastTriangularBendingSprings< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< _DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::FastTriangularBendingSprings< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< _DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::spring::FastTriangularBendingSprings< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::Ba",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs.html:22784,access,access,22784,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs.html,1,['access'],['access']
Security,"ld.h>. Inheritance diagram for sofa::component::solidmechanics::tensormass::TriangularTensorMassForceField< DataTypes >::Mat3:. [legend]. Public Member Functions; Deriv operator* (const Deriv &v);  ; Deriv transposeMultiply (const Deriv &v);  ;  Public Member Functions inherited from sofa::type::fixed_array< Deriv, 3 >; constexpr fixed_array ();  ; constexpr fixed_array (value_type r1) noexcept;  Specific constructor for 1-element vectors. More...;  ; constexpr fixed_array (ArgsT &&... r) noexcept;  ; constexpr iterator begin () noexcept;  ; constexpr const_iterator begin () const noexcept;  ; constexpr const_iterator cbegin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr const_iterator cend () const noexcept;  ; constexpr reference operator[] (size_type i);  ; constexpr const_reference operator[] (size_type i) const;  ; constexpr Deriv & get () &noexcept;  ; constexpr const Deriv & get () const &noexcept;  ; constexpr Deriv && get () &&noexcept;  ; constexpr const Deriv && get () const &&noexcept;  ; constexpr reference at (size_type i);  ; constexpr const_reference at (size_type i) const;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; void swap (fixed_array< Deriv, N > &y);  ; constexpr const Deriv * data () const noexcept;  ; constexpr const Array & array () const noexcept;  direct access to array More...;  ; constexpr Array & array () noexcept;  direct access to array More...;  ; constexpr fixed_array< Deriv, N > & operator= (const fixed_array< T2, N > &rhs) noexcept;  ; constexpr void assign (const Deriv &value) noexcept;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::fixed_array< Deriv, 3 >; Deriv elems [N];  ;  Static Public Member Functions inherited from sofa::type::fixed_array< Deriv, 3 >; static constexpr size_type size () noexcept;  ; static b",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field_1_1_mat3.html:1889,access,access,1889,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field_1_1_mat3.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1tensormass_1_1_triangular_tensor_mass_force_field_1_1_mat3.html,1,['access'],['access']
Security,"le m[16]) const;  Get the ModelView matrix used to draw the scene. This OpenGL matrix defines the world coordinate system with respect to the camera. More...;  ; void setProjectionMatrix (const double m[16]);  Store the projection matrix used to draw the scene. This OpenGL matrix defines the camera coordinate system with respect to the viewport, including perspective if any. More...;  ; void getProjectionMatrix (double m[16]) const;  Get the projection matrix used to draw the scene. This OpenGL matrix defines the camera coordinate system with respect to the viewport, including perspective if any. More...;  ; bool isSupported (unsigned int api) const;  ; void setSupported (unsigned int api, bool val=true);  ; Access to vectors from a given state container (i.e. State or MechanicalState); template<class S > ; const Data< typename S::VecCoord > * readX (const S *state) const;  Read access to current position vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readV (const S *state) const;  Read access to current velocity vector. More...;  ; Setup methods; Called by the OdeSolver from which the mechanical computations originate. They all return a reference to this MechanicalParam instance, to ease chaining multiple setup calls. . const ConstMultiVecCoordId & x () const;  ; ConstMultiVecCoordId & x ();  ; const ConstMultiVecDerivId & v () const;  ; ConstMultiVecDerivId & v ();  ; VisualParams & setX (ConstVecCoordId v);  Set the IDs of position vector. More...;  ; VisualParams & setX (ConstMultiVecCoordId v);  ; template<class StateSet > ; VisualParams & setX (const StateSet &g, ConstVecCoordId v);  ; VisualParams & setV (ConstVecDerivId v);  Set the IDs of velocity vector. More...;  ; VisualParams & setV (ConstMultiVecDerivId v);  ; template<class StateSet > ; VisualParams & setV (const StateSet &g, ConstVecDerivId v);  ;  Public Member Functions inherited from sofa::core::ExecParams; bool checkValidStorage () const;  ; ExecMode execMode () cons",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_params.html:3108,access,access,3108,api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_params.html,1,['access'],['access']
Security,"line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:4316,access,access,4316,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,2,['access'],['access']
Security,"logy (unified interface for both static and dynamic topologies) More...;  ; virtual core::behavior::BaseMass * getMass () const;  Mass. More...;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:20140,access,access,20140,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,2,['access'],['access']
Security,"lt value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, real defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr real & x () noexcept;  Special access to first element. More...;  ; constexpr const real & x () const noexcept;  Special const access to first element. More...;  ; constexpr real & y () noexcept;  Special access to second element. More...;  ; constexpr const real & y () const noexcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets every element to r. More...;  ; constexpr real & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const real & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const real * p",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:2624,access,access,2624,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,1,['access'],['access']
Security,lue needs to be updated. More...;  ; virtual void setDirtyOutputs ();  Indicate the outputs needs to be updated. This method must be called after changing the value of this node. More...;  ; void cleanDirty ();  Set dirty flag to false. More...;  ; virtual void notifyEndEdit ();  Notify links that the DGNode has been modified. More...;  ; void updateIfDirty () const;  Utility method to call update if necessary. This method should be called before reading of writing the value of this node. More...;  . Additional Inherited Members;  Protected Member Functions inherited from sofa::core::objectmodel::DDGNode; virtual void doAddInput (DDGNode *n);  ; virtual void doDelInput (DDGNode *n);  ; virtual void doAddOutput (DDGNode *n);  ; virtual void doDelOutput (DDGNode *n);  ; void cleanDirtyOutputsOfInputs ();  the dirtyOutputs flags of all the inputs will be set to false More...;  . Attribute details. ◆ m_dataTracker. DataTracker sofa::core::DataTrackerDDGNode::m_dataTracker. protected . Constructor details. ◆ DataTrackerDDGNode(). sofa::core::DataTrackerDDGNode::DataTrackerDDGNode ; (; ). inline . Function details. ◆ addInputs(). void sofa::core::DataTrackerDDGNode::addInputs ; (; std::initializer_list< sofa::core::objectmodel::BaseData * > ; datas). Create a DataCallback object associated with multiple Data fields. . ◆ addOutputs(). void sofa::core::DataTrackerDDGNode::addOutputs ; (; std::initializer_list< sofa::core::objectmodel::BaseData * > ; datas). ◆ cleanDirty(). void sofa::core::DataTrackerDDGNode::cleanDirty ; (; const core::ExecParams * ; params = nullptr). virtual . Set dirty flag to false for the DDGNode and for all the tracked Data . ◆ updateAllInputsIfDirty(). void sofa::core::DataTrackerDDGNode::updateAllInputsIfDirty ; (; ). utility function to ensure all inputs are up-to-date can be useful for particularly complex DDGNode with a lot input/output imbricated access . sofacoreDataTrackerDDGNode; Generated on Mon Nov 11 2024 03:14:09 for SOFA API by 1.9.1 . ,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_d_d_g_node.html:4037,access,access,4037,api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_d_d_g_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_tracker_d_d_g_node.html,1,['access'],['access']
Security,"lyJT, applyDJT and getJs using finite differences. ; Specific test cases can be created using a derived class instantiated on the mapping class to test, and calling function runTest( const InVecCoord& parentInit, const OutVecCoord& childInit, const InVecCoord parentNew, const OutVecCoord expectedChildNew);; This function compares the actual output positions with the expected ones, then automatically tests the methods related to the Jacobian using finite differences.; A small change of the input positions dxIn is randomly chosen and added to the current position. The same is set as velocity.; mapping->apply is called, and the difference dXout between the new output positions and the previous positions is computed; to validate mapping->applyJ, dXin is converted to input velocity vIn and mapping->applyJ is called. dXout and the output velocity vOut must be the same (up to linear approximations errors, thus we apply a very small change of position).; to validate mapping->getJs, we use it to get the Jacobian, then we check that J.vIn = vOut; to validate mapping->applyJT, we apply it after setting the child force fc=vOut, then we check that parent force fp = J^T.fc; to validate mapping->applyDJT, we set the child force, and we compare the parent force before and after a small displacement. The magnitude of the small random changes applied in finite differences is between deltaRange.first*epsilon and deltaRange.second*epsilon, and a failure is issued if the error is greater than errorMax*epsilon, where epsilon=std::numeric_limits<Real>::epsilon() is 1.19209e-07 for float and 2.22045e-16 for double.; AuthorFrançois Faure ; Date2013 . Public Attributes; core::Mapping< In, Out > * mapping;  the mapping to be tested More...;  ; InDOFs::SPtr inDofs;  mapping input More...;  ; OutDOFs::SPtr outDofs;  mapping output More...;  ; simulation::Node::SPtr root;  Root of the scene graph, created by the constructor an re-used in the tests. More...;  ; simulation::Simulation * simulation",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1mapping__test_1_1_mapping__test.html:1768,validat,validate,1768,api/master/sofa/html/structsofa_1_1mapping__test_1_1_mapping__test.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1mapping__test_1_1_mapping__test.html,1,['validat'],['validate']
Security,"lyRotation (const SReal rx, const SReal ry, const SReal rz) override;  Rotation using Euler Angles in degree. More...;  ; void applyRotation (const type::Quat< SReal > q) override;  Rotate the current state. More...;  ; void applyScale (const SReal sx, const SReal sy, const SReal sz) override;  Scale the current state. More...;  ; Base Matrices and Vectors Interface; void copyToBaseVector (linearalgebra::BaseVector *dest, core::ConstVecId src, unsigned int &offset) override;  ; void copyFromBaseVector (core::VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset) override;  ; void copyToBaseMatrix (linearalgebra::BaseMatrix *dest, core::ConstMatrixDerivId src, unsigned int &offset) override;  Copy data to a global BaseMatrix from the state stored in a local vector. More...;  ; void addToBaseVector (linearalgebra::BaseVector *dest, core::ConstVecId src, unsigned int &offset) override;  ; void addFromBaseVectorSameSize (core::VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset) override;  ; void addFromBaseVectorDifferentSize (core::VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset) override;  ; Initial transformations accessors.; void setTranslation (SReal dx, SReal dy, SReal dz);  ; void setRotation (SReal rx, SReal ry, SReal rz);  ; void setScale (SReal sx, SReal sy, SReal sz);  ; virtual type::Vec3 getTranslation () const;  ; virtual type::Vec3 getRotation () const;  ; type::Vec3 getScale () const override;  ; Integration related methods; void beginIntegration (SReal dt) override;  Called at the beginning of each integration step. More...;  ; void endIntegration (const core::ExecParams *params, SReal dt) override;  Called at the end of each integration step. More...;  ; void accumulateForce (const core::ExecParams *params, core::VecDerivId f=core::VecDerivId::force()) override;  Add stored external forces to F. More...;  ; void vAvail (const core::ExecParams *params, core::VecCoordId &v) override;  Increment ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:13277,access,accessors,13277,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['access'],['accessors']
Security,"m & operator>> (std::istream &in, sofa::linearalgebra::BaseMatrix &m);  Declare that the operator >> is friend so they can use private data. More...;  . Get information about the content and structure of this matrix (diagonal, band, sparse, full, block size, ...); enum  ElementType { ELEMENT_UNKNOWN = 0; , ELEMENT_FLOAT; , ELEMENT_INT; };  ; enum  MatrixCategory { ;   MATRIX_UNKNOWN = 0; , MATRIX_IDENTITY; , MATRIX_DIAGONAL; , MATRIX_BAND; , ;   MATRIX_SPARSE; , MATRIX_FULL. };  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  . Virtual iterator classes and methods; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:7467,access,access,7467,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,1,['access'],['access']
Security,"model::Data< sofa::type::SVector< sofa::type::SVector< int > > >, sofa::core::objectmodel::Data< sofa::type::vector< sofa::type::Material > >, sofa::core::objectmodel::Data< sofa::type::Material >, sofa::core::objectmodel::Data< sofa::type::vector< sofa::component::collision::geometry::TTriangle > >, sofa::core::objectmodel::Data< sofa::type::vector< Hexa > >, sofa::core::objectmodel::Data< sofa::type::vector< Quad > >, sofa::core::objectmodel::Data< vector< Triangle > >, sofa::core::objectmodel::Data< SeqPositions >, sofa::core::objectmodel::Data< sofa::type::vector< sofa::type::fixed_array< unsigned int, 8 > > >, sofa::core::objectmodel::Data< sofa::type::SVector< SkeletonBone > >, sofa::core::objectmodel::Data< Mat< 3, 3, Real > >, and sofa::core::objectmodel::Data< sofa::type::vector< SReal > >. ◆ getValueVoidPtr(). const void * sofa::core::objectmodel::BaseData::getValueVoidPtr ; (; ); const. Get current value as a void pointer (use getValueTypeInfo to find how to access it) ; Get a constant void pointer to the value held in this Data, to be used with AbstractTypeInfo.; This pointer should be used via the instance of AbstractTypeInfo returned by getValueTypeInfo(). . ◆ getWidget(). const std::string& sofa::core::objectmodel::BaseData::getWidget ; (; ); const. inline . Get widget. . ◆ hasDefaultValue(). bool sofa::core::objectmodel::BaseData::hasDefaultValue ; (; ); const. inline . Return whether the Data has a default value or not. . ◆ isAutoLink(). bool sofa::core::objectmodel::BaseData::isAutoLink ; (; ); const. inline . Return whether this Data should be autolinked when using the src="""" syntax. . ◆ isDisplayed(). bool sofa::core::objectmodel::BaseData::isDisplayed ; (; ); const. inline . Return whether this Data has to be displayed in GUIs. . ◆ isPersistent(). bool sofa::core::objectmodel::BaseData::isPersistent ; (; ); const. inline . Return whether this Data contains persistent information. . ◆ isReadOnly(). bool sofa::core::objectmodel::BaseData::isReadOn",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:73137,access,access,73137,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,1,['access'],['access']
Security,"moryManager >::operator() ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator()() [2/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n); const. inline . Read-only random access, with explicit Index. . ◆ operator[]() [1/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator[]() [2/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Index ; n); const. inline . Read-only random access. . ◆ operator[]() [3/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Size ; n). inlineprotected . Read/write random access with regular index type, protected to force use of explicit Index. . ◆ operator[]() [4/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Size ; n); const. inlineprotected . Read-only random access with regular index type, protected to force use of explicit Index. . ◆ push_back(). template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . Index sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::push_back ; (; const_reference ; v). inline . sofahelpervector_id; Generated on Mon Nov 11 2024 03:28:37 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:7599,access,access,7599,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,2,['access'],['access']
Security,"mpingForceField< DataTypes >::dampingCoefficient. Constructor details. ◆ UniformVelocityDampingForceField(). template<class DataTypes > . sofa::component::mechanicalload::UniformVelocityDampingForceField< DataTypes >::UniformVelocityDampingForceField. protected . Function details. ◆ addBToMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::UniformVelocityDampingForceField< DataTypes >::addBToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; mat, . SReal ; bFact, . unsigned int & ; offset . ). overridevirtual . Reimplemented from sofa::core::behavior::ForceField< DataTypes >. ◆ addDForce(). template<class DataTypes > . void sofa::component::mechanicalload::UniformVelocityDampingForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::mechanicalload::UniformVelocityDampingForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::UniformVelocityDampingForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix *",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_uniform_velocity_damping_force_field.html:20357,access,access,20357,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_uniform_velocity_damping_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_uniform_velocity_damping_force_field.html,1,['access'],['access']
Security,"mplementation of the method vAlloc. More...;  ; template<core::VecType vtype> ; void vReallocImpl (core::TVecId< vtype, core::V_WRITE > v, const core::VecIdProperties &properties);  Generic implementation of the method vRealloc. More...;  ; template<core::VecType vtype> ; void vFreeImpl (core::TVecId< vtype, core::V_WRITE > v);  Generic implementation of the method vFree. More...;  ; template<core::VecType vtype> ; void vInitImpl (const core::ExecParams *params, core::TVecId< vtype, core::V_WRITE > vId, core::TVecId< vtype, core::V_READ > vSrcId);  Generic implementation of the method vInit. More...;  ; template<core::VecType vtype> ; helper::WriteOnlyAccessor< core::objectmodel::Data< core::StateVecType_t< DataTypes, vtype > > > getWriteOnlyAccessor (core::VecId v);  Shortcut to get a write-only accessor corresponding to the provided VecType from a VecId. More...;  ; template<core::VecType vtype> ; helper::WriteAccessor< core::objectmodel::Data< core::StateVecType_t< DataTypes, vtype > > > getWriteAccessor (core::VecId v);  Shortcut to get a write accessor corresponding to the provided VecType from a VecId. More...;  ; template<core::VecType vtype> ; helper::ReadAccessor< core::objectmodel::Data< core::StateVecType_t< DataTypes, vtype > > > getReadAccessor (core::ConstVecId v);  Shortcut to get a read accessor corresponding to the provided VecType from a VecId. More...;  ; void drawIndices (const core::visual::VisualParams *vparams);  Internal function : Draw indices in 3d coordinates. More...;  ; void drawVectors (const core::visual::VisualParams *vparams);  Internal function : Draw vectors. More...;  ;  Protected Member Functions inherited from sofa::core::behavior::MechanicalState< DataTypes >;  ~MechanicalState () override;  ;  Protected Member Functions inherited from sofa::core::behavior::BaseMechanicalState;  BaseMechanicalState ();  ;  ~BaseMechanicalState () override;  ;  Protected Member Functions inherited from sofa::core::BaseState;  BaseState ();  ;  ~B",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:30632,access,accessor,30632,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['access'],['accessor']
Security,mplicitVelocity ; (; ); const. inline . ◆ kFactor(). SReal sofa::core::MechanicalParams::kFactor ; (; ); const. inline . Stiffness matrix contributions factor (for implicit schemes) . ◆ kFactorIncludingRayleighDamping(). SReal sofa::core::MechanicalParams::kFactorIncludingRayleighDamping ; (; SReal ; rayleighStiffness); const. inline . Returnskfactor + bfactor*rayleighStiffness . ◆ mFactor(). SReal sofa::core::MechanicalParams::mFactor ; (; ); const. inline . Mass matrix contributions factor (for implicit schemes) . ◆ mFactorIncludingRayleighDamping(). SReal sofa::core::MechanicalParams::mFactorIncludingRayleighDamping ; (; SReal ; rayleighMass); const. inline . Returnsmfactor + bfactor*rayleighMass . ◆ operator=(). MechanicalParams * sofa::core::MechanicalParams::operator= ; (; const MechanicalParams & ; mparams). ◆ readDf(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::MechanicalParams::readDf ; (; const S * ; state); const. inline . Read access to current df vector (for implicit schemes) . ◆ readDx(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::MechanicalParams::readDx ; (; const S * ; state); const. inline . Read access to current dx vector (for implicit schemes) . ◆ readF(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::MechanicalParams::readF ; (; const S * ; state); const. inline . Read access to current force vector. . ◆ readV(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::MechanicalParams::readV ; (; const S * ; state); const. inline . Read access to current velocity vector. . ◆ readX(). template<class S > . const Data<typename S::VecCoord>* sofa::core::MechanicalParams::readX ; (; const S * ; state); const. inline . Read access to current position vector. . ◆ setBFactor(). MechanicalParams& sofa::core::MechanicalParams::setBFactor ; (; SReal ; v). inline . Set Damping matrix contributions factor (for implicit schemes) . ◆ setDf() [1/3]. template<class StateSet > . Mech,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html:13298,access,access,13298,api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,1,['access'],['access']
Security,"ms * ; mparams, . OutDataVecCoord & ; out, . const InDataVecCoord & ; in . ). pure virtual . This method must be reimplemented by all mappings. . ◆ applyDJT(). template<class In , class Out > . void sofa::core::Mapping< In, Out >::applyDJT ; (; const MechanicalParams * ; , . MultiVecDerivId ; , . ConstMultiVecDerivId ;  . ). overridevirtual . ApplyDJT (Force)/// Apply the change of force due to the nonlinearity of the mapping and the last propagated displacement. Also called geometric stiffness. The default implementation does nothing, assuming a linear mapping.; This method computes , where is the parent force and is the child force. where J is the tangent operator (the linear approximation) of the mapping The child force is accessed in the child state using mparams->readF() . This requires that the child force vector is used by the solver to compute the force corresponding to the current positions and velocities, and not to store auxiliary values. The displacement is accessed in the parent state using mparams->readDx() . This method generally corresponds to a symmetric stiffness matrix, but with rotations (which are not a commutative group) it is not the case. Since some solvers (including the Conjugate Gradient) require symmetric matrices, a flag is set in the MechanicalParams to say if symmetric matrices are required. If so, non-symmetric geometric stiffness should not be applied. ; Implements sofa::core::BaseMapping.; Reimplemented in sofa::component::mapping::nonlinear::BaseNonLinearMapping< TIn, TOut, true >, and sofa::component::mapping::nonlinear::BaseNonLinearMapping< TIn, TOut, false >. ◆ applyJ() [1/2]. template<class In , class Out > . void sofa::core::Mapping< In, Out >::applyJ ; (; const MechanicalParams * ; mparams, . MultiVecDerivId ; outVel, . ConstMultiVecDerivId ; inVel . ). overridevirtual . ApplyJ /// Apply the mapping to derived (velocity, displacement) vectors. $ out = J in $ where J is the tangent operator (the linear approximation) of the ma",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mapping.html:21971,access,accessed,21971,api/master/sofa/html/classsofa_1_1core_1_1_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mapping.html,1,['access'],['accessed']
Security,"mulation::mechanicalvisitor::MechanicalPickParticlesVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPickParticlesVisitor Class Reference . #include <MechanicalPickParticlesVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPickParticlesVisitor:. [legend]; Detailed Description; Find mechanical particles hit by the given ray.; A mechanical particle is defined as a 2D or 3D, position or rigid DOF which is linked to the free mechanical DOFs by mechanical mappings . Public Attributes; type::Vec3d rayOrigin;  ; type::Vec3d rayDirection;  ; double radius0;  ; double dRadius;  ; sofa::core::objectmodel::Tag tagNoPicking;  ; Particles particles;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPickParticlesVisitor (const sofa::core::ExecParams *mparams, const type::Vec3d &origin, const type::Vec3d &direction, double r0=0.001, double dr=0.0, sofa::core::objectmodel::Tag tag=sofa::core::objectmodel::Tag(""NoPicking""));  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; void getClosestParticle (sofa::core::behavior::BaseMechanicalState *&mstate, sofa::Index &indexCollisionElement, type",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html:1032,access,access,1032,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_pick_particles_visitor.html,1,['access'],['access']
Security,"n precomputation are modified. More...;  ; void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void draw (const core::visual::VisualParams *vparams);  Render internal data of this object, for debugging purposes. More...;  ; type::Vec6 getMomentum (const core::MechanicalParams *, const DataVecCoord &vx, const DataVecDeriv &vv) const;  ; type::Vec6 getMomentum (const core::MechanicalParams *, const DataVecCoord &vx, const DataVecDeriv &vv) const;  ; Read and write access functions in mass information; virtual const Real & getMassDensity ();  ; virtual const Real & getTotalMass ();  ; virtual void setVertexMass (sofa::type::vector< Real > vertexMass);  ; virtual void setMassDensity (Real massDensityValue);  ; virtual void setTotalMass (Real totalMass);  ; Check and standard initialization functions from mass information; virtual bool checkVertexMass ();  ; virtual void initFromVertexMass ();  ; virtual bool checkMassDensity ();  ; virtual void initFromMassDensity ();  ; virtual bool checkTotalMass ();  ; virtual void checkTotalMassInit ();  ; virtual void initFromTotalMass ();  ;  Public Member Functions inherited from sofa::core::behavior::Mass< DataTypes >;  SOFA_CLASS2 (SOFA_TEMPLATE(Mass, DataTypes), SOFA_TEMPLATE(ForceField, DataTypes), BaseMass);  ; void initGnuplot (const std::string path) override;  initialization to export kinetic and potential energy to gnuplot files format More...;  ; void exportGnuplot (const MechanicalParams *mparams, SReal time) override;  export kinetic and potential energy state at ""time"" to a gnuplot file More...;  ; void addGravityToV (const MechanicalParams *mparams, MultiVecDerivId) override;  perform v += dt*g operation. Used if mass wants to added G separately from the other forces to v. More...;  ; SReal getElementMass (sofa::Index) const override",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html:10958,access,access,10958,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_diagonal_mass.html,1,['access'],['access']
Security,"n problem. /need-very-old-version-of-sofa-to-use-flexible-plugin; ; SOFA - Topic: [SOLVED] Need (very) old version of SOFA to use ""Flexible"" plugin. /new-api-documentation; ; SOFA - Topic: New API documentation. /new-approaches-to-catheter-navigation-for-interventional-radiology-simulation; ; SOFA - Topic: New approaches to catheter navigation for interventional radiology simulation. /new-build-system; . /page; . /4; ; SOFA - Topic: New build system. SOFA - Topic: New build system. /new-forum-format; . /feed; ; New forum format! – SOFA. SOFA - Topic: New forum format!. /new-mouse-interaction; . /feed; ; [SOLVED] New Mouse Interaction – SOFA. /page; . /13; ; SOFA - Topic: [SOLVED] New Mouse Interaction. /4; ; SOFA - Topic: [SOLVED] New Mouse Interaction. SOFA - Topic: [SOLVED] New Mouse Interaction. /newomnidriver-gnode-cannot-access-protected-member; . /embed; ; SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. /page; . /3; ; SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. /4; ; SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. /new-online-support-sessions; ; SOFA - Topic: New: online support sessions!. /new-release-v16-08; . /feed; ; New Release v16.08! – SOFA. SOFA - Topic: New Release v16.08!. /new-release-v16-12; ; SOFA - Topic: New Release v16.12!. /new-release-v17-12; ; SOFA - Topic: New Release v17.12!. /new-release-v18-06; ; SOFA - Topic: New release v18.06!. /new-sofa-technical-member-amc; ; SOFA - Topic: New SOFA technical member: AMC!. /new-to-sofa-here-are-my-thoughts; ; SOFA - Topic: New to sofa. Here are my thoughts. /new-training-session-scheduled; ; SOFA - Topic: New training session scheduled!. /new-tutorials-for-sofa; ; SOFA - Topic: New tutorials for SOFA. /new-version-of-blender-sofa; . /page; . /4; ; SOFA - Topic: New version of Blender SOFA. SOFA - Topic: New version of Blender SOFA. /new-vi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:354384,access,access,354384,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['access'],['access']
Security,"n sofa::defaulttype::DataTypeInfoDynamicWrapper< Info >, sofa::defaulttype::NoTypeInfo, and sofa::defaulttype::NameOnlyTypeInfo. ◆ Text(). virtual bool sofa::defaulttype::AbstractTypeInfo::Text ; (; ); const. pure virtual . True iff this type uses text values. ; Implemented in sofa::defaulttype::NoTypeInfo, sofa::defaulttype::NameOnlyTypeInfo, and sofa::defaulttype::DataTypeInfoDynamicWrapper< Info >. ◆ type_info(). virtual const std::type_info* sofa::defaulttype::AbstractTypeInfo::type_info ; (; ); const. pure virtual . Get the type_info for this type. ; Implemented in sofa::defaulttype::NoTypeInfo, sofa::defaulttype::NameOnlyTypeInfo, and sofa::defaulttype::DataTypeInfoDynamicWrapper< Info >. ◆ ValidInfo(). virtual bool sofa::defaulttype::AbstractTypeInfo::ValidInfo ; (; ); const. pure virtual . True iff the TypeInfo for this type contains valid information. A Type is considered ""Valid"" if there's at least one specialization of the ValueType ; Implemented in sofa::defaulttype::NoTypeInfo, sofa::defaulttype::NameOnlyTypeInfo, and sofa::defaulttype::DataTypeInfoDynamicWrapper< Info >. ◆ ValueType(). virtual const AbstractTypeInfo* sofa::defaulttype::AbstractTypeInfo::ValueType ; (; ); const. pure virtual . Returns the TypeInfo for the type of the values accessible by the get*Value() functions. For example, if the type is fixed_array<fixed_array<int, 2> 3>, it returns the TypeInfo for int. . Implemented in sofa::defaulttype::NoTypeInfo, sofa::defaulttype::NameOnlyTypeInfo, and sofa::defaulttype::DataTypeInfoDynamicWrapper< Info >. ◆ ZeroConstructor(). virtual bool sofa::defaulttype::AbstractTypeInfo::ZeroConstructor ; (; ); const. pure virtual . True iff the default constructor of this type is equivalent to setting the memory to 0. ; Implemented in sofa::defaulttype::NoTypeInfo, sofa::defaulttype::NameOnlyTypeInfo, and sofa::defaulttype::DataTypeInfoDynamicWrapper< Info >. sofadefaulttypeAbstractTypeInfo; Generated on Mon Nov 11 2024 03:17:12 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_abstract_type_info.html:15327,access,accessible,15327,api/master/sofa/html/classsofa_1_1defaulttype_1_1_abstract_type_info.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_abstract_type_info.html,1,['access'],['accessible']
Security,"nd velocity vectors. ; More... Inheritance diagram for sofa::core::BaseState:. [legend]; Detailed Description; Component storing position and velocity vectors. ; This class define the interface of components used as source and destination of regular (non mechanical) mapping. It is then specialized as MechanicalState (storing other mechanical data) or MappedModel (if no mechanical data is used, such as for VisualModel). . Public Member Functions;  SOFA_ABSTRACT_CLASS (BaseState, objectmodel::BaseObject);  ; virtual Size getSize () const =0;  Current size of all stored vectors. More...;  ; virtual void resize (Size vsize)=0;  Resize all stored vector. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; virtual void addToTotalForces (core::ConstVecDerivId forceId);  ; virtual void removeFromTotalForces (core::ConstVecDerivId forceId);  ; BaseData vectors access API based on VecId; virtual objectmodel::BaseData * baseWrite (VecId v)=0;  ; virtual const objectmodel::BaseData * baseRead (ConstVecId v) const =0;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_base_state.html:1251,access,access,1251,api/master/sofa/html/classsofa_1_1core_1_1_base_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_base_state.html,1,['access'],['access']
Security,"nder internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ getMaterialStiffness(). template<class DataTypes > . TriangularFEMForceFieldOptim< DataTypes >::MaterialStiffness sofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >::getMaterialStiffness ; (; Index ; elemId). ◆ getPotentialEnergy(). template<class DataTypes > . SReal sofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >::getPotentialEnergy ; (; const core::MechanicalParams * ; mparams, . const DataVecCoord & ; x . ); const. overridevirtual . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ getRotatedInitialElement(). template<class DataTypes > . type::fixed_array< typename TriangularFEMForceFieldOptim< DataTypes >::Coord, 3 > sofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >::getRotatedInitialElement ; (; Index ; elemId). Public methods to access FEM information per element. Those method should not be used internally as they add check on element id. . ◆ getRotationMatrix(). template<class DataTypes > . TriangularFEMForceFieldOptim< DataTypes >::Transformation sofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >::getRotationMatrix ; (; Index ; elemId). ◆ getStrainDisplacementFactors(). template<class DataTypes > . sofa::type::Vec3 sofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >::getStrainDisplacementFactors ; (; Index ; elemId). ◆ getTriangleFactor(). template<class DataTypes > . TriangularFEMForceFieldOptim< DataTypes >::Real sofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >::getTriangleFactor ; (; Index ; elemId). ◆ getTrianglePrincipalStress() [1/2]. template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangularFEMForceFieldOptim< DataTypes >::getTrianglePrincipalStress ; (; Index ; i",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field_optim.html:33192,access,access,33192,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field_optim.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_f_e_m_force_field_optim.html,1,['access'],['access']
Security,"ndex of the hexahedron given eight vertex indices; returns InvalidID if none. ; Reimplemented from sofa::core::topology::BaseMeshTopology. ◆ getLocalEdgesInHexahedron(). MeshTopology::Edge sofa::component::topology::container::constant::MeshTopology::getLocalEdgesInHexahedron ; (; const HexahedronID ; i); const. overridevirtual . Returns for each index (between 0 and 12) the two vertex indices that are adjacent to that edge. ; Reimplemented from sofa::core::topology::BaseMeshTopology. ◆ getLocalEdgesInTetrahedron(). MeshTopology::Edge sofa::component::topology::container::constant::MeshTopology::getLocalEdgesInTetrahedron ; (; const HexahedronID ; i); const. overridevirtual . Returns for each index (between 0 and 5) the two vertex indices that are adjacent to that edge. ; Reimplemented from sofa::core::topology::BaseMeshTopology. ◆ getNbEdges(). Size sofa::component::topology::container::constant::MeshTopology::getNbEdges ; (; ). overridevirtual . Random accessors ; Reimplemented from sofa::core::topology::BaseMeshTopology. ◆ getNbHexahedra(). Size sofa::component::topology::container::constant::MeshTopology::getNbHexahedra ; (; ). overridevirtual . Reimplemented from sofa::core::topology::BaseMeshTopology.; Reimplemented in sofa::component::topology::container::grid::SparseGridTopology, and sofa::component::topology::container::grid::GridTopology. ◆ getNbPoints(). Size sofa::component::topology::container::constant::MeshTopology::getNbPoints ; (; ); const. overridevirtual . Reimplemented from sofa::core::topology::Topology.; Reimplemented in sofa::component::topology::container::grid::SparseGridTopology. ◆ getNbQuads(). Size sofa::component::topology::container::constant::MeshTopology::getNbQuads ; (; ). overridevirtual . Reimplemented from sofa::core::topology::BaseMeshTopology. ◆ getNbTetrahedra(). Size sofa::component::topology::container::constant::MeshTopology::getNbTetrahedra ; (; ). overridevirtual . Reimplemented from sofa::core::topology::BaseMeshTopology.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology.html:65189,access,accessors,65189,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology.html,1,['access'],['accessors']
Security,"ndices, MemoryManager > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager > Class Template Reference . #include <integer_id.h>. Inheritance diagram for sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >:. [legend]. Public Member Functions;  vector_id ();  Basic constructor. More...;  ;  vector_id (Size n, const T &value);  Constructor. More...;  ;  vector_id (int n, const T &value);  Constructor. More...;  ;  vector_id (long n, const T &value);  Constructor. More...;  ;  vector_id (Size n);  Constructor. More...;  ;  vector_id (const std::vector< T > &x);  Constructor. More...;  ;  vector_id (const_iterator first, const_iterator last);  Constructor. More...;  ; reference at (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference at (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator() (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator() (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator[] (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator[] (Index n) const;  Read-only random access. More...;  ; Index push_back (const_reference v);  ;  Public Member Functions inherited from sofa::type::vector< T, MemoryManager >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:1071,access,access,1071,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,1,['access'],['access']
Security,"neNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexce",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:4416,access,access,4416,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,2,['access'],['access']
Security,"nents > &c)=delete;  ;  RGBAColor (const type::Vec4f &c)=delete;  ; constexpr float & r ();  ; constexpr float & g ();  ; constexpr float & b ();  ; constexpr float & a ();  ; constexpr const float & r () const;  ; constexpr const float & g () const;  ; constexpr const float & b () const;  ; constexpr const float & a () const;  ; constexpr void r (const float r);  ; constexpr void g (const float g);  ; constexpr void b (const float b);  ; constexpr void a (const float a);  ; constexpr float & operator[] (std::size_t i);  ; constexpr const float & operator[] (std::size_t i) const;  ; void set (float r, float g, float b, float a);  ; bool operator== (const RGBAColor &b) const;  ; bool operator!= (const RGBAColor &b) const;  ; bool operator< (const RGBAColor &b) const;  ; RGBAColor operator* (float f) const;  ; constexpr const float * data () const noexcept;  ; constexpr const ComponentArray & array () const noexcept;  direct access to array More...;  ; constexpr ComponentArray & array () noexcept;  direct access to array More...;  ; constexpr ComponentArray::iterator begin () noexcept;  ; constexpr ComponentArray::const_iterator begin () const noexcept;  ; constexpr ComponentArray::iterator end () noexcept;  ; constexpr ComponentArray::const_iterator end () const noexcept;  . Static Public Member Functions; static RGBAColor fromVec4 (const type::fixed_array< float, 4 > &color)=delete;  ; static RGBAColor fromVec4 (const type::fixed_array< double, 4 > &color)=delete;  ; static RGBAColor fromVec4 (const Vec4f &color)=delete;  ; static RGBAColor fromVec4 (const Vec4d &color)=delete;  ; static RGBAColor fromString (const std::string &str);  ; static RGBAColor fromFloat (float r, float g, float b, float a);  ; static RGBAColor fromStdArray (const std::array< float, 4 > &color);  ; static RGBAColor fromStdArray (const std::array< double, 4 > &color);  ; static RGBAColor fromHSVA (float h, float s, float v, float a);  ; static bool read (const std::string &str, RGBAColor &co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html:1821,access,access,1821,api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,1,['access'],['access']
Security,"nherited from sofa::type::vector< core::objectmodel::Data< T > * >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const core::objectmodel::Data< T > * &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< core::objectmodel::Data< T > *, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< core::objectmodel::Data< T > * > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< core::objectmodel::Data< T > *, Alloc > &&v);  Move constructor. More...;  ;  vector (typename vector< core::objectmodel::Data< T > * >::const_iterator first, typename vector< core::objectmodel::Data< T > * >::const_iterator last);  Constructor. More...;  ; vector & operator= (const std::vector< core::objectmodel::Data< T > *, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< core::objectmodel::Data< T > *, Alloc > &&v);  Move assignment operator. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. More...;  ; std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  Specialization for writing vectors of unsigned char. More...;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in); ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1vector_data.html:2630,access,access,2630,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1vector_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1vector_data.html,1,['access'],['access']
Security,"nicalParams::operator= ; (; const MechanicalParams & ; mparams). ◆ readDf(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::MechanicalParams::readDf ; (; const S * ; state); const. inline . Read access to current df vector (for implicit schemes) . ◆ readDx(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::MechanicalParams::readDx ; (; const S * ; state); const. inline . Read access to current dx vector (for implicit schemes) . ◆ readF(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::MechanicalParams::readF ; (; const S * ; state); const. inline . Read access to current force vector. . ◆ readV(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::MechanicalParams::readV ; (; const S * ; state); const. inline . Read access to current velocity vector. . ◆ readX(). template<class S > . const Data<typename S::VecCoord>* sofa::core::MechanicalParams::readX ; (; const S * ; state); const. inline . Read access to current position vector. . ◆ setBFactor(). MechanicalParams& sofa::core::MechanicalParams::setBFactor ; (; SReal ; v). inline . Set Damping matrix contributions factor (for implicit schemes) . ◆ setDf() [1/3]. template<class StateSet > . MechanicalParams& sofa::core::MechanicalParams::setDf ; (; const StateSet & ; g, . ConstVecDerivId ; v . ). inline . ◆ setDf() [2/3]. MechanicalParams& sofa::core::MechanicalParams::setDf ; (; ConstMultiVecDerivId ; v). inline . ◆ setDf() [3/3]. MechanicalParams& sofa::core::MechanicalParams::setDf ; (; ConstVecDerivId ; v). inline . Set the IDs of df vector (for implicit schemes) . ◆ setDt(). MechanicalParams& sofa::core::MechanicalParams::setDt ; (; SReal ; v). inline . Set time step. . ◆ setDx() [1/3]. template<class StateSet > . MechanicalParams& sofa::core::MechanicalParams::setDx ; (; const StateSet & ; g, . ConstVecDerivId ; v . ). inline . ◆ setDx() [2/3]. MechanicalParams& sofa::core::MechanicalParams::setDx ; (; ConstMultiVecDerivId ; v). inline ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html:14069,access,access,14069,api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,1,['access'],['access']
Security,"nly=false);  ;  Data (const sofa::type::SVector< std::string > &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const sofa::type::SVector< std::string > &value, const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~Data () override;  Destructor. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:4873,access,access,4873,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,1,['access'],['access']
Security,"ns ids of the constraint lambda vectors. . ◆ readDx(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::ConstraintParams::readDx ; (; S * ; state); const. inline . Read access to the constraint corrective motion vector. . ◆ readJ(). template<class S > . const Data<typename S::MatrixDeriv>* sofa::core::ConstraintParams::readJ ; (; const S * ; state); const. inline . Read access to the constraint jacobian matrix. . ◆ readLambda(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::ConstraintParams::readLambda ; (; S * ; state); const. inline . Read access to the constraint force vector. . ◆ readV(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::ConstraintParams::readV ; (; const S * ; state); const. inline . Read access to the free (unconstrained) velocity vector. . ◆ readX(). template<class S > . const Data<typename S::VecCoord>* sofa::core::ConstraintParams::readX ; (; const S * ; state); const. inline . Read access to the free (unconstrained) position vector. . ◆ setDx() [1/3]. template<class StateSet > . ConstraintParams& sofa::core::ConstraintParams::setDx ; (; const StateSet & ; g, . MultiVecDerivId ; dx . ). inline . ◆ setDx() [2/3]. ConstraintParams& sofa::core::ConstraintParams::setDx ; (; MultiVecDerivId ; dx). inline . ◆ setDx() [3/3]. ConstraintParams& sofa::core::ConstraintParams::setDx ; (; VecDerivId ; dx). inline . Set the IDs where to write corrective displacement vector. . ◆ setExecParams(). ConstraintParams & sofa::core::ConstraintParams::setExecParams ; (; const core::ExecParams * ; params). ◆ setJ() [1/3]. template<class StateSet > . ConstraintParams& sofa::core::ConstraintParams::setJ ; (; const StateSet & ; g, . MatrixDerivId ; j . ). inline . ◆ setJ() [2/3]. ConstraintParams& sofa::core::ConstraintParams::setJ ; (; MatrixDerivId ; j). inline . Set the IDs where to read the constraint jacobian matrix. . ◆ setJ() [3/3]. ConstraintParams& sofa::core::ConstraintParams::setJ ; (; MultiMatrixDeriv",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html:9848,access,access,9848,api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html,1,['access'],['access']
Security,"nsmitted by all visitors. More...;  ; struct  CleanupCheck;  ; class  Mapping;  Specialized interface to convert a model state of type TIn to a model state of type TOut. This is basically a sofa::core::BaseMapping with given input and output types. More...;  ; class  MatrixAccumulatorInterface;  ; class  MatrixAccumulatorIndexChecker;  ; class  ListMatrixAccumulator;  ; class  MechanicalParams;  Class gathering parameters use by mechanical components methods, and transmitted by mechanical visitors. More...;  ; class  MechanicalStatesMatrixAccumulators;  ; class  Multi2Mapping;  Specialized interface to describe many to many mapping. The inputs can be of two different types, while all the outputs must be of the same type. More...;  ; class  MultiMapping;  Specialized interface to describe many to many mapping. All the input must have the same type, and all the output must have the same type. See also class Multi2Mapping. More...;  ; class  TMultiVecId;  ; struct  StateVecAccessor;  Helper class to access vectors of a given type in a given State. More...;  ; struct  StateVecAccessor< DataTypes, V_COORD, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_COORD, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_DERIV, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_DERIV, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_MATDERIV, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_MATDERIV, V_WRITE >;  ; struct  StateVecAccessor< DataTypes, V_ALL, V_READ >;  ; struct  StateVecAccessor< DataTypes, V_ALL, V_WRITE >;  ; class  TMultiVecId< V_ALL, vaccess >;  ; struct  ObjectRegistrationEntry;  ; class  ObjectFactory;  ; class  ObjectCreator;  Typed Creator class used to create instances of object type RealObject. More...;  ; class  ObjectRegistrationData;  Helper class used to register a class in the ObjectFactory. More...;  ; class  RegisterObject;  ; struct  ObjectFactoryJson;  ; class  PathResolver;  This class exposes an API to query a context to find Base* ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:3901,access,access,3901,api/master/sofa/html/namespacesofa_1_1core.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html,1,['access'],['access']
Security,"nst Data< VecDeriv > * read (core::ConstVecDerivId v) const override;  ; Data< MatrixDeriv > * write (core::MatrixDerivId) override;  ; const Data< MatrixDeriv > * read (core::ConstMatrixDerivId) const override;  ;  Public Member Functions inherited from sofa::core::State< DataTypes >;  SOFA_CLASS (SOFA_TEMPLATE(State, DataTypes), BaseState);  ; sofa::type::TBoundingBox< Real > computeBBox () const;  Compute the bounding box independently from the visibility parameters. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible=false) override;  ; objectmodel::BaseData * baseWrite (VecId v) override;  ; const objectmodel::BaseData * baseRead (ConstVecId v) const override;  ; ReadVecCoord readPositions () const;  ; WriteVecCoord writePositions ();  ; WriteOnlyVecCoord writeOnlyPositions ();  ; ReadVecCoord readRestPositions () const;  ; WriteVecCoord writeRestPositions ();  ; WriteOnlyVecCoord writeOnlyRestPositions ();  ; ReadVecDeriv readVelocities () const;  ; WriteVecDeriv writeVelocities ();  ; WriteOnlyVecDeriv writeOnlyVelocities ();  ; ReadVecDeriv readForces () const;  ; WriteVecDeriv writeForces ();  ; WriteOnlyVecDeriv writeOnlyForces ();  ; ReadVecDeriv readDx () const;  ; WriteVecDeriv writeDx ();  ; WriteOnlyVecDeriv writeOnlyDx ();  ; ReadVecDeriv readNormals () const;  ; const AccumulationVecId< DataTypes, V_DERIV, V_READ > & readTotalForces () const;  Returns a proxy objects offering simplified access to elements of the cumulative sum of all force containers. More...;  ; void addToTotalForces (core::ConstVecDerivId forceId) override;  The provided VecDerivId will contribute to the sum of all force containers. More...;  ; void removeFromTotalForces (core::ConstVecDerivId forceId) override;  ;  Public Member Functions inherited from sofa::core::BaseState;  SOFA_ABSTRACT_CLASS (BaseState, objectmodel::BaseObject);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mapped_object.html:4873,access,access,4873,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mapped_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mapped_object.html,1,['access'],['access']
Security,"nst InitData &init);  ;  Data (const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const std::string &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const std::string &value, const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~Data () override;  Destructor. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html:4605,access,access,4605,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name.html,1,['access'],['access']
Security,"nst noexcept;  ; constexpr const_iterator cbegin () const noexcept;  ; constexpr iterator end () noexcept;  ; constexpr const_iterator end () const noexcept;  ; constexpr const_iterator cend () const noexcept;  ; constexpr reference operator[] (size_type i);  ; constexpr const_reference operator[] (size_type i) const;  ; constexpr sofa::Index & get () &noexcept;  ; constexpr const sofa::Index & get () const &noexcept;  ; constexpr sofa::Index && get () &&noexcept;  ; constexpr const sofa::Index && get () const &&noexcept;  ; constexpr reference at (size_type i);  ; constexpr const_reference at (size_type i) const;  ; constexpr reference front ();  ; constexpr const_reference front () const;  ; constexpr reference back ();  ; constexpr const_reference back () const;  ; void swap (fixed_array< sofa::Index, N > &y);  ; constexpr const sofa::Index * data () const noexcept;  ; constexpr const Array & array () const noexcept;  direct access to array More...;  ; constexpr Array & array () noexcept;  direct access to array More...;  ; constexpr fixed_array< sofa::Index, N > & operator= (const fixed_array< T2, N > &rhs) noexcept;  ; constexpr void assign (const sofa::Index &value) noexcept;  . Additional Inherited Members;  Public Attributes inherited from sofa::type::fixed_array< sofa::Index, GeometryElement::NumberOfNodes >; sofa::Index elems [N];  ;  Static Public Member Functions inherited from sofa::type::fixed_array< sofa::Index, GeometryElement::NumberOfNodes >; static constexpr size_type size () noexcept;  ; static bool empty () noexcept;  ; static constexpr size_type max_size () noexcept;  . Attribute details. ◆ Element_type. template<typename GeometryElement > . constexpr sofa::geometry::ElementType sofa::topology::Element< GeometryElement >::Element_type = GeometryElement::Element_type. staticconstexpr . ◆ NumberOfNodes. template<typename GeometryElement > . constexpr auto sofa::topology::Element< GeometryElement >::NumberOfNodes = GeometryElement::NumberOfNodes. s",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1topology_1_1_element.html:2210,access,access,2210,api/master/sofa/html/structsofa_1_1topology_1_1_element.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1topology_1_1_element.html,1,['access'],['access']
Security,"nst sofa::type::fixed_array< ValueType, N > &p) noexcept;  ; template<Size N2, typename real2 > ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; template<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr const ValueType & z () const noexcept;  Special const access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr const ValueType & w () const noexcept;  Special const access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if< NN==1, int >::type = 0> ; constexpr void operator= (const ValueType r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; template<typ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:7233,access,access,7233,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,2,['access'],['access']
Security,"nst. overridevirtual . Reimplemented from sofa::core::behavior::ConstraintSolver. ◆ getLambda(). sofa::core::MultiVecDerivId sofa::component::constraint::lagrangian::solver::GenericConstraintSolver::getLambda ; (; ); const. overridevirtual . Reimplemented from sofa::core::behavior::ConstraintSolver. ◆ init(). void sofa::component::constraint::lagrangian::solver::GenericConstraintSolver::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::component::constraint::lagrangian::solver::ConstraintSolverImpl. ◆ lockConstraintProblem(). void sofa::component::constraint::lagrangian::solver::GenericConstraintSolver::lockConstraintProblem ; (; sofa::core::objectmodel::BaseObject * ; from, . ConstraintProblem * ; p1, . ConstraintProblem * ; p2 = nullptr . ). overridevirtual . Do not use the following LCPs until the next call to this function. This is used to prevent concurrent access to the LCP when using a LCPForceFeedback through an haptic thread. ; Implements sofa::component::constraint::lagrangian::solver::ConstraintSolverImpl. ◆ prepareStates(). bool sofa::component::constraint::lagrangian::solver::GenericConstraintSolver::prepareStates ; (; const core::ConstraintParams * ; , . MultiVecId ; res1, . MultiVecId ; res2 = MultiVecId::null() . ). overridevirtual . Do the precomputation: compute free state, or propagate the states to the mapped mechanical states, where the constraint can be expressed ; Implements sofa::core::behavior::ConstraintSolver. ◆ rebuildSystem(). void sofa::component::constraint::lagrangian::solver::GenericConstraintSolver::rebuildSystem ; (; SReal ; , . SReal ;  . ). overridevirtual . Rebuild the system using a mass and force factor. Experimental API used to investigate convergence issues. ; Reimplemented from sofa::core::behavior::ConstraintSolver. ◆ SOFA_ATTRIBUTE_DISABLED__GENERICCONSTRAINTSOLVER_CONSTRAINTCORRECTIONS(). sofa::component::constraint:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_generic_constraint_solver.html:31740,access,access,31740,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_generic_constraint_solver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_generic_constraint_solver.html,1,['access'],['access']
Security,"ntainer. ◆ removePoint(). void sofa::component::topology::container::dynamic::PointSetTopologyContainer::removePoint ; (; ). remove one DOF in this topology (simply decrement the number of DOF) . ◆ removePoints(). void sofa::component::topology::container::dynamic::PointSetTopologyContainer::removePoints ; (; const Size ; nPoints). remove a number of DOFs in this topology (simply decrease the number of DOF according to this parameter) ; Parameters. Thenumber of point to remove. . ◆ setNbPoints(). void sofa::component::topology::container::dynamic::PointSetTopologyContainer::setNbPoints ; (; Size ; n). overridevirtual . Set the number of vertices in this topology. ; Reimplemented from sofa::core::topology::Topology. ◆ setPointTopologyToDirty(). void sofa::component::topology::container::dynamic::PointSetTopologyContainer::setPointTopologyToDirty ; (; ). protected . Use a specific boolean See alsom_pointTopologyDirty in order to know if topology Data is dirty or not. Set/Get function access to this boolean . ◆ SOFA_CLASS(). sofa::component::topology::container::dynamic::PointSetTopologyContainer::SOFA_CLASS ; (; PointSetTopologyContainer ; , . core::topology::TopologyContainer ;  . ). ◆ unlinkTopologyHandlerToData(). bool sofa::component::topology::container::dynamic::PointSetTopologyContainer::unlinkTopologyHandlerToData ; (; core::topology::TopologyHandler * ; topologyHandler, . sofa::geometry::ElementType ; elementType . ). overridevirtual . \ brief Generic function to link potential data (related to a type of element) with a topologyHandler ; Reimplemented from sofa::core::topology::TopologyContainer.; Reimplemented in sofa::component::topology::container::dynamic::TriangleSetTopologyContainer, sofa::component::topology::container::dynamic::TetrahedronSetTopologyContainer, and sofa::component::topology::container::dynamic::QuadSetTopologyContainer. Related details. ◆ operator<<. std::ostream& operator<< ; (; std::ostream & ; out, . const PointSetTopologyContainer ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_container.html:37337,access,access,37337,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_container.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_container.html,1,['access'],['access']
Security,"o 3-elements vectors. More...;  ; constexpr Vec (const Vec< N-1, T > &v, T r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< T, N > &p) noexcept;  ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const T r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, T defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr T & x () noexcept;  Special access to first element. More...;  ; constexpr const T & x () const noexcept;  Special const access to first element. More...;  ; constexpr T & y () noexcept;  Special access to second element. More...;  ; constexpr const T & y () const noexcept;  Special const access to second element. More...;  ; constexpr T & z () noexcept;  Special access to third element. More...;  ; constexpr const T & z () const noexcept;  Special const access to third element. More...;  ; constexpr T & w () noexcept;  Special access to fourth element. More...;  ; constexpr const T & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const T r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const T &value) noexcept;  ; constexpr void clear () noexcept;  ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html:2068,access,access,2068,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,1,['access'],['access']
Security,"odel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html:9768,access,access,9768,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_constraint_visitor.html,2,['access'],['access']
Security,"odel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::st",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html:10416,access,access,10416,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_accumulate_jacobian.html,3,['access'],['access']
Security,"oexcept . Special const access to fourth element. . ◆ w() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::w ; (; ). inlineconstexprnoexcept . Special access to fourth element. . ◆ x() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::x ; (; ); const. inlineconstexprnoexcept . Special const access to first element. . ◆ x() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::x ; (; ). inlineconstexprnoexcept . Special access to first element. . ◆ y() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::y ; (; ); const. inlineconstexprnoexcept . Special const access to second element. . ◆ y() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::y ; (; ). inlineconstexprnoexcept . Special access to second element. . ◆ z() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::z ; (; ); const. inlineconstexprnoexcept . Special const access to third element. . ◆ z() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::z ; (; ). inlineconstexprnoexcept . Special access to third element. . sofatypeVec; Generated on Mon Nov 11 2024 03:36:05 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:29696,access,access,29696,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html,4,['access'],['access']
Security,"oexcept . ◆ transpose() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> . constexpr void sofa::type::Mat< L, C, real >::transpose ; (; ). inlineconstexprnoexcept . Transpose the square matrix. . ◆ transpose() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::transpose ; (; const Mat< C, L, real > & ; m). inlineconstexprnoexcept . Set matrix as the transpose of m. . ◆ transposed(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<C,L,real> sofa::type::Mat< L, C, real >::transposed ; (; ); const. inlineconstexprnoexcept . Return the transpose of m. . ◆ w() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr const Line& sofa::type::Mat< L, C, real >::w ; (; ); const. inlineconstexprnoexcept . Special access to fourth line (read-only). . ◆ w() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr Line& sofa::type::Mat< L, C, real >::w ; (; ). inlineconstexprnoexcept . Special access to fourth line. . ◆ x() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr const Line& sofa::type::Mat< L, C, real >::x ; (; ); const. inlineconstexprnoexcept . Special access to first line (read-only). . ◆ x() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr Line& sofa::type::Mat< L, C, real >::x ; (; ). inlineconstexprnoexcept . Special access to first line. . ◆ y() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr const Line& sofa::type::Mat< L, C, ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:32958,access,access,32958,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,1,['access'],['access']
Security,"of hexahedra adjacent to a given vertex. More...;  ; virtual const HexahedraAroundEdge & getHexahedraAroundEdge (EdgeID i);  Returns the set of hexahedra adjacent to a given edge. More...;  ; virtual const HexahedraAroundQuad & getHexahedraAroundQuad (QuadID i);  Returns the set of hexahedra adjacent to a given quad. More...;  ; virtual const VerticesAroundVertex getVerticesAroundVertex (PointID i);  Returns the set of vertices adjacent to a given vertex (i.e. sharing an edge) More...;  ; virtual const sofa::type::vector< Index > getElementAroundElement (Index elem);  Returns the set of element indices adjacent to a given element (i.e. sharing a link) More...;  ; virtual const sofa::type::vector< Index > getElementAroundElements (sofa::type::vector< Index > elems);  Returns the set of element indices adjacent to a given list of elements (i.e. sharing a link) More...;  ; Deprecated names, for backward-compatibility; const SeqLines & getLines ();  ; Size getNbLines ();  ; Line getLine (LineID i);  ; Initial points accessors (only available if the topology was loaded from a file containing this information).; Note that this data is only used for initialization and is not maintained afterwards (i.e. topological changes may not be applied) . bool hasPos () const override;  ; SReal getPX (Index) const override;  ; SReal getPY (Index) const override;  ; SReal getPZ (Index) const override;  . virtual void clear ();  ; virtual void addPoint (SReal px, SReal py, SReal pz);  ; virtual void addEdge (Index a, Index b);  ; void addLine (Index a, Index b);  ; virtual void addTriangle (Index a, Index b, Index c);  ; virtual void addQuad (Index a, Index b, Index c, Index d);  ; virtual void addTetra (Index a, Index b, Index c, Index d);  ; virtual void addHexa (Index a, Index b, Index c, Index d, Index e, Index f, Index g, Index h);  . virtual bool checkConnexity ();  ; virtual bool checkTopology () const;  Checks if the topology is coherent. More...;  ; virtual Size getNumberOfConn",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_mesh_topology.html:9008,access,accessors,9008,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_mesh_topology.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_mesh_topology.html,1,['access'],['accessors']
Security,"of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose of m. More...;  ; constexpr Mat< L, C, Real > operator+ (const Mat< L, C, Real > &m) const noexcept;  Matrix addition operator. More...;  ; constexpr Mat< L, C, Real > operator- (const Mat< L, C, Real > &m) const noexcept;  Matrix subtraction operator. More...;  ; constexpr Mat< L, C, Real > operator- () const noexcept;  Matrix negation operator. More...;  ; constexpr Col operator* (const Line &v) const noexcept;  Multiplication operator Matrix * Line. More...;  ; constexpr Mat< L, C, Real > operator* (Real f) const no",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:4928,access,access,4928,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,2,['access'],['access']
Security,"ofa::component::statecontainer::MechanicalObject< T >, and sofa::component::statecontainer::MappedObject< DataTypes >. ◆ readDx(). template<class TDataTypes > . ReadVecDeriv sofa::core::State< TDataTypes >::readDx ; (; ); const. inline . ◆ readForces(). template<class TDataTypes > . ReadVecDeriv sofa::core::State< TDataTypes >::readForces ; (; ); const. inline . ◆ readNormals(). template<class TDataTypes > . ReadVecDeriv sofa::core::State< TDataTypes >::readNormals ; (; ); const. inline . ◆ readPositions(). template<class TDataTypes > . ReadVecCoord sofa::core::State< TDataTypes >::readPositions ; (; ); const. inline . ◆ readRestPositions(). template<class TDataTypes > . ReadVecCoord sofa::core::State< TDataTypes >::readRestPositions ; (; ); const. inline . ◆ readTotalForces(). template<class TDataTypes > . const AccumulationVecId<TDataTypes, V_DERIV, V_READ>& sofa::core::State< TDataTypes >::readTotalForces ; (; ); const. inline . Returns a proxy objects offering simplified access to elements of the cumulative sum of all force containers. . ◆ readVelocities(). template<class TDataTypes > . ReadVecDeriv sofa::core::State< TDataTypes >::readVelocities ; (; ); const. inline . ◆ removeFromTotalForces(). template<class TDataTypes > . void sofa::core::State< TDataTypes >::removeFromTotalForces ; (; core::ConstVecDerivId ; forceId). overridevirtual . Reimplemented from sofa::core::BaseState. ◆ SOFA_CLASS(). template<class TDataTypes > . sofa::core::State< TDataTypes >::SOFA_CLASS ; (; SOFA_TEMPLATE(State< TDataTypes >, TDataTypes) ; , . BaseState< TDataTypes > ;  . ). ◆ write() [1/3]. template<class TDataTypes > . virtual Data< MatrixDeriv >* sofa::core::State< TDataTypes >::write ; (; MatrixDerivId ; v). pure virtual . Implemented in sofa::core::visual::VisualState< DataTypes >, sofa::core::visual::VisualState< defaulttype::Vec3Types >, sofa::component::statecontainer::MappedObject< DataTypes >, sofa::component::statecontainer::MechanicalObject< DataTypes >, and sofa::co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_state.html:21754,access,access,21754,api/master/sofa/html/classsofa_1_1core_1_1_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_state.html,1,['access'],['access']
Security,"ology::BaseMeshTopology * sofa::core::objectmodel::BaseContext::getMeshTopology ; (; SearchDirection ; dir = SearchUp); const. virtual . Mesh Topology (unified interface for both static and dynamic topologies) . ◆ getMeshTopologyLink(). core::topology::BaseMeshTopology * sofa::core::objectmodel::BaseContext::getMeshTopologyLink ; (; SearchDirection ; dir = SearchUp); const. virtual . Mesh Topology (unified interface for both static and dynamic topologies) ; Reimplemented in sofa::simulation::graph::DAGNode, and sofa::simulation::Node. ◆ getNameHelper(). ComponentNameHelper& sofa::core::objectmodel::BaseContext::getNameHelper ; (; ). inline . Returns utilitary object to uniquely name objects in the context. . ◆ getObject() [1/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . const std::string & ; path . ); const. virtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [2/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node, and sofa::simulation::graph::DAGNode. ◆ getObject() [3/3]. void * sofa::core::objectmodel::BaseContext::getObject ; (; const ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. virtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented in sofa::simulation::Node. ◆ getObject",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:25117,access,access,25117,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['access'],['access']
Security,"onent::mechanicalload::TorsionForceField< DataTypes >::~TorsionForceField. virtual . Function details. ◆ addDForce() [1/3]. void sofa::component::mechanicalload::TorsionForceField< Rigid3Types >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). virtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addDForce() [2/3]. void sofa::component::mechanicalload::TorsionForceField< Rigid3Types >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). virtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addDForce() [3/3]. template<typename DataTypes > . void sofa::component::mechanicalload::TorsionForceField< DataTypes >::addDForce ; (; const MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce() [1/3]. void sofa::component::mechanicalload::TorsionForceField< Rigid3Types >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). virt",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field.html:22122,access,access,22122,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field.html,1,['access'],['access']
Security,"onstexprnoexcept . Transpose the square matrix. . ◆ transpose() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::transpose ; (; const Mat< C, L, real > & ; m). inlineconstexprnoexcept . Set matrix as the transpose of m. . ◆ transposed(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<C,L,real> sofa::type::Mat< L, C, real >::transposed ; (; ); const. inlineconstexprnoexcept . Return the transpose of m. . ◆ w() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr const Line& sofa::type::Mat< L, C, real >::w ; (; ); const. inlineconstexprnoexcept . Special access to fourth line (read-only). . ◆ w() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr Line& sofa::type::Mat< L, C, real >::w ; (; ). inlineconstexprnoexcept . Special access to fourth line. . ◆ x() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr const Line& sofa::type::Mat< L, C, real >::x ; (; ); const. inlineconstexprnoexcept . Special access to first line (read-only). . ◆ x() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr Line& sofa::type::Mat< L, C, real >::x ; (; ). inlineconstexprnoexcept . Special access to first line. . ◆ y() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr const Line& sofa::type::Mat< L, C, real >::y ; (; ); const. inlineconstexprnoexcept . Special access to second line (read-only). . ◆ y() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr Line& sofa::type",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:33226,access,access,33226,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,1,['access'],['access']
Security,"ontext, Base);  ; virtual bool hasAncestor (const BaseContext *) const;  ; ComponentNameHelper & getNameHelper ();  Returns utilitary object to uniquely name objects in the context. More...;  ; virtual core::topology::BaseMeshTopology * getMeshTopology (SearchDirection dir=SearchUp) const;  Mesh Topology (unified interface for both static and dynamic topologies) More...;  ; virtual core::behavior::BaseMass * getMass () const;  Mass. More...;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:23345,access,access,23345,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,1,['access'],['access']
Security,"operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename =",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:4717,access,access,4717,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,2,['access'],['access']
Security,"operator[]). When accessing an element at a particular index, the class delegates the retrieval to the appropriate container represented by the associated VecIdDeriv. In addition to element retrieval, the class supports dynamic management of the contributing containers. It offers functions to add and remove VecId objects from the list of containers that contribute to the cumulative sum. ; More... Inheritance diagram for sofa::core::AccumulationVecId< TDataTypes, vtype, vaccess >:. [legend]; Detailed Description; template<class TDataTypes, VecType vtype, VecAccess vaccess>; struct sofa::core::AccumulationVecId< TDataTypes, vtype, vaccess >; Proxy class for accessing elements within an imaginary container that represents the cumulative sum of multiple other containers. Each individual container is represented by a VecId. The class maintains a list of VecIdDeriv objects, which defines the containers contributing to the final cumulative sum. This class provides a simplified interface for accessing elements within the cumulative container. It allows retrieving specific elements using the overloaded subscript operator (operator[]). When accessing an element at a particular index, the class delegates the retrieval to the appropriate container represented by the associated VecIdDeriv. In addition to element retrieval, the class supports dynamic management of the contributing containers. It offers functions to add and remove VecId objects from the list of containers that contribute to the cumulative sum. ; Template Parameters. TDataTypesType of DOFs stored in the State . Public Member Functions; Deriv operator[] (Size i) const;  ; void addToContributingVecIds (core::ConstVecDerivId vecDerivId);  The provided VecDerivId container will contribute in the cumulative sum. More...;  ; void removeFromContributingVecIds (core::ConstVecDerivId vecDerivId);  ;  AccumulationVecId (const State< TDataTypes > &state);  ;  AccumulationVecId ()=delete;  . Constructor details. ◆ AccumulationV",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1_accumulation_vec_id.html:1825,access,accessing,1825,api/master/sofa/html/structsofa_1_1core_1_1_accumulation_vec_id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1_accumulation_vec_id.html,1,['access'],['accessing']
Security,"opology::BaseMeshTopology* sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::m_topology. protected . Pointer to the linked topology used to create this spring forcefield. . Constructor details. ◆ TriangularBendingSprings(). template<class DataTypes > . sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::TriangularBendingSprings. protected . ◆ ~TriangularBendingSprings(). template<class DataTypes > . sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::~TriangularBendingSprings. protectedvirtual . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ applyEdgeCreation(). template<class DataTypes > . void sofa::component::solidmechanics::spring::TriangularBendingSprings< DataTypes >::applyEdgeCreation ; (; Index ; edgeIndex, . Ed",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html:23817,access,access,23817,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_triangular_bending_springs.html,1,['access'],['access']
Security,"or ; (; const std::array< float, NumberOfComponents > & ; c). inlineexplicitconstexpr . ◆ RGBAColor() [3/5]. constexpr sofa::type::RGBAColor::RGBAColor ; (; float ; r, . float ; g, . float ; b, . float ; a . ). inlineconstexpr . ◆ RGBAColor() [4/5]. sofa::type::RGBAColor::RGBAColor ; (; const type::fixed_array< float, NumberOfComponents > & ; c). delete . ◆ RGBAColor() [5/5]. sofa::type::RGBAColor::RGBAColor ; (; const type::Vec4f & ; c). delete . Function details. ◆ a() [1/3]. constexpr float& sofa::type::RGBAColor::a ; (; ). inlineconstexpr . ◆ a() [2/3]. constexpr const float& sofa::type::RGBAColor::a ; (; ); const. inlineconstexpr . ◆ a() [3/3]. constexpr void sofa::type::RGBAColor::a ; (; const float ; a). inlineconstexpr . ◆ array() [1/2]. constexpr const ComponentArray& sofa::type::RGBAColor::array ; (; ); const. inlineconstexprnoexcept . direct access to array . ◆ array() [2/2]. constexpr ComponentArray& sofa::type::RGBAColor::array ; (; ). inlineconstexprnoexcept . direct access to array . ◆ b() [1/3]. constexpr float& sofa::type::RGBAColor::b ; (; ). inlineconstexpr . ◆ b() [2/3]. constexpr const float& sofa::type::RGBAColor::b ; (; ); const. inlineconstexpr . ◆ b() [3/3]. constexpr void sofa::type::RGBAColor::b ; (; const float ; b). inlineconstexpr . ◆ begin() [1/2]. constexpr ComponentArray::const_iterator sofa::type::RGBAColor::begin ; (; ); const. inlineconstexprnoexcept . ◆ begin() [2/2]. constexpr ComponentArray::iterator sofa::type::RGBAColor::begin ; (; ). inlineconstexprnoexcept . ◆ black(). constexpr const RGBAColor & sofa::type::RGBAColor::black ; (; ). staticconstexpr . ◆ blue(). constexpr const RGBAColor & sofa::type::RGBAColor::blue ; (; ). staticconstexpr . ◆ clamp(). static constexpr RGBAColor sofa::type::RGBAColor::clamp ; (; const RGBAColor & ; color, . float ; min, . float ; max . ). inlinestaticconstexpr . ◆ cyan(). constexpr const RGBAColor & sofa::type::RGBAColor::cyan ; (; ). staticconstexpr . ◆ darkgray(). constexpr const RGBAColor ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html:5194,access,access,5194,api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_r_g_b_a_color.html,1,['access'],['access']
Security,"or > . sofa::core::objectmodel::lifecycle::RemovedData sofa::component::linearsolver::preconditioner::BlockJacobiPreconditioner< TMatrix, TVector >::f_verbose {this, ""v23.12"", ""v24.06"", ""verbose"", ""This Data is no longer used""}. ◆ internalData. template<class TMatrix , class TVector > . BlockJacobiPreconditionerInternalData<TVector> sofa::component::linearsolver::preconditioner::BlockJacobiPreconditioner< TMatrix, TVector >::internalData. not use in CPU . Constructor details. ◆ BlockJacobiPreconditioner(). template<class TMatrix , class TVector > . sofa::component::linearsolver::preconditioner::BlockJacobiPreconditioner< TMatrix, TVector >::BlockJacobiPreconditioner. protected . Function details. ◆ GetCustomTemplateName(). template<class TMatrix , class TVector > . static const std::string sofa::component::linearsolver::preconditioner::BlockJacobiPreconditioner< TMatrix, TVector >::GetCustomTemplateName ; (; ). inlinestatic . Returns the sofa template name. By default the name of the c++ class signature is exposed... so we need to override that by implementing GetCustomTemplateName() function More details on the name customization infrastructure is in NameDecoder.h . ◆ invert(). template<class TMatrix , class TVector > . void sofa::component::linearsolver::preconditioner::BlockJacobiPreconditioner< TMatrix, TVector >::invert ; (; Matrix & ; M). override . ◆ parse(). template<class TMatrix , class TVector > . void sofa::component::linearsolver::preconditioner::BlockJacobiPreconditioner< TMatrix, TVector >::parse ; (; core::objectmodel::BaseObjectDescription * ; arg). override . ◆ SOFA_CLASS(). template<class TMatrix , class TVector > . sofa::component::linearsolver::preconditioner::BlockJacobiPreconditioner< TMatrix, TVector >::SOFA_CLASS ; (; SOFA_TEMPLATE2(BlockJacobiPreconditioner< TMatrix, TVector >, TMatrix, TVector) ; , . SOFA_TEMPLATE2(sofa::component::linearsolver::MatrixLinearSolver, TMatrix, TVector) ;  . ). ◆ solve(). template<class TMatrix , class TVector ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_block_jacobi_preconditioner.html:5198,expose,exposed,5198,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_block_jacobi_preconditioner.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_block_jacobi_preconditioner.html,1,['expose'],['exposed']
Security,"orceField< DataTypes >::dampingCoefficients. Constructor details. ◆ DiagonalVelocityDampingForceField(). template<class DataTypes > . sofa::component::mechanicalload::DiagonalVelocityDampingForceField< DataTypes >::DiagonalVelocityDampingForceField. protected . Function details. ◆ addBToMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::DiagonalVelocityDampingForceField< DataTypes >::addBToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; mat, . SReal ; bFact, . unsigned int & ; offset . ). overridevirtual . Reimplemented from sofa::core::behavior::ForceField< DataTypes >. ◆ addDForce(). template<class DataTypes > . void sofa::component::mechanicalload::DiagonalVelocityDampingForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::mechanicalload::DiagonalVelocityDampingForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::DiagonalVelocityDampingForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_diagonal_velocity_damping_force_field.html:20032,access,access,20032,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_diagonal_velocity_damping_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_diagonal_velocity_damping_force_field.html,1,['access'],['access']
Security,"ord > > WriteOnlyVecCoord;  ; typedef helper::ReadAccessor< Data< Deriv > > ReadDeriv;  ; typedef helper::WriteAccessor< Data< Deriv > > WriteDeriv;  ; typedef helper::WriteOnlyAccessor< Data< Deriv > > WriteOnlyDeriv;  ; typedef helper::ReadAccessor< Data< VecDeriv > > ReadVecDeriv;  ; typedef helper::WriteAccessor< Data< VecDeriv > > WriteVecDeriv;  ; typedef helper::WriteOnlyAccessor< Data< VecDeriv > > WriteOnlyVecDeriv;  ; AccumulationVecId< TDataTypes, V_DERIV, V_READ > accumulatedForces;  Stores all the VecDerivId corresponding to a force. They can then be accumulated. More...;  ; ReadVecCoord readPositions () const;  ; WriteVecCoord writePositions ();  ; WriteOnlyVecCoord writeOnlyPositions ();  ; ReadVecCoord readRestPositions () const;  ; WriteVecCoord writeRestPositions ();  ; WriteOnlyVecCoord writeOnlyRestPositions ();  ; ReadVecDeriv readVelocities () const;  ; WriteVecDeriv writeVelocities ();  ; WriteOnlyVecDeriv writeOnlyVelocities ();  ; ReadVecDeriv readForces () const;  ; WriteVecDeriv writeForces ();  ; WriteOnlyVecDeriv writeOnlyForces ();  ; ReadVecDeriv readDx () const;  ; WriteVecDeriv writeDx ();  ; WriteOnlyVecDeriv writeOnlyDx ();  ; ReadVecDeriv readNormals () const;  ; const AccumulationVecId< TDataTypes, V_DERIV, V_READ > & readTotalForces () const;  Returns a proxy objects offering simplified access to elements of the cumulative sum of all force containers. More...;  ; void addToTotalForces (core::ConstVecDerivId forceId) override;  The provided VecDerivId will contribute to the sum of all force containers. More...;  ; void removeFromTotalForces (core::ConstVecDerivId forceId) override;  ;  State ();  ;  ~State () override;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttri",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_state.html:13558,access,access,13558,api/master/sofa/html/classsofa_1_1core_1_1_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_state.html,1,['access'],['access']
Security,"ore...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose of m. More...;  ; constexpr Mat< L, C, Real > operator+ (const Mat< L, C, Real > &m) const noexcept;  Matrix addition operator. More...;  ; constexpr Mat< L, C, Real > operator- (const Mat< L, C, Real > &m) const noexcept;  Matrix subtraction operator. More...;  ; constexpr Mat< L, C, Real > operator- () const noexcept;  Matrix negation operator. More...;  ; constexpr Col operator* (const Line &v) const noexcept;  Multiplication ope",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:4840,access,access,4840,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,2,['access'],['access']
Security,"ore...;  ; virtual void opPMulTV (double *result, const double *v) const;  Multiply the transposed matrix by double vector v and add the result in vector result. More...;  ; virtual void opMulTM (BaseMatrix *result, BaseMatrix *m) const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of the given row of blocks. More...;  . Static Public Member Functions; static void split_row_index (Index &",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:19011,access,access,19011,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,1,['access'],['access']
Security,"ore::ConstraintParams::lambda ; (; ). inline . Returns ids of the constraint lambda vectors. . ◆ lambda() [2/2]. const MultiVecDerivId& sofa::core::ConstraintParams::lambda ; (; ); const. inline . Returns ids of the constraint lambda vectors. . ◆ readDx(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::ConstraintParams::readDx ; (; S * ; state); const. inline . Read access to the constraint corrective motion vector. . ◆ readJ(). template<class S > . const Data<typename S::MatrixDeriv>* sofa::core::ConstraintParams::readJ ; (; const S * ; state); const. inline . Read access to the constraint jacobian matrix. . ◆ readLambda(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::ConstraintParams::readLambda ; (; S * ; state); const. inline . Read access to the constraint force vector. . ◆ readV(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::ConstraintParams::readV ; (; const S * ; state); const. inline . Read access to the free (unconstrained) velocity vector. . ◆ readX(). template<class S > . const Data<typename S::VecCoord>* sofa::core::ConstraintParams::readX ; (; const S * ; state); const. inline . Read access to the free (unconstrained) position vector. . ◆ setDx() [1/3]. template<class StateSet > . ConstraintParams& sofa::core::ConstraintParams::setDx ; (; const StateSet & ; g, . MultiVecDerivId ; dx . ). inline . ◆ setDx() [2/3]. ConstraintParams& sofa::core::ConstraintParams::setDx ; (; MultiVecDerivId ; dx). inline . ◆ setDx() [3/3]. ConstraintParams& sofa::core::ConstraintParams::setDx ; (; VecDerivId ; dx). inline . Set the IDs where to write corrective displacement vector. . ◆ setExecParams(). ConstraintParams & sofa::core::ConstraintParams::setExecParams ; (; const core::ExecParams * ; params). ◆ setJ() [1/3]. template<class StateSet > . ConstraintParams& sofa::core::ConstraintParams::setJ ; (; const StateSet & ; g, . MatrixDerivId ; j . ). inline . ◆ setJ() [2/3]. ConstraintParams& sofa::core::Const",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html:9646,access,access,9646,api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html,1,['access'],['access']
Security,"ore::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or down from the current context. . ◆ get() [7/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::Base",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:21011,access,access,21011,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['access'],['access']
Security,"ormalized(). template<sofa::Size N, typename ValueType > . Vec<N,ValueType> sofa::type::Vec< N, ValueType >::normalized ; (; ); const. inlinenoexcept . Return the normalized vector. Warning'this' is not normalized. . ◆ normalizeWithNorm(). template<sofa::Size N, typename ValueType > . constexpr bool sofa::type::Vec< N, ValueType >::normalizeWithNorm ; (; ValueType ; norm, . ValueType ; threshold = std::numeric_limits<ValueType>::epsilon() . ). inlineconstexprnoexcept . Normalize the vector taking advantage of its already computed norm, equivalent to /=norm returns false iff the norm is too small . ◆ operator!=(). template<sofa::Size N, typename ValueType > . constexpr bool sofa::type::Vec< N, ValueType >::operator!= ; (; const Vec< N, ValueType > & ; b); const. inlineconstexprnoexcept . ◆ operator()() [1/2]. template<sofa::Size N, typename ValueType > . constexpr const ValueType& sofa::type::Vec< N, ValueType >::operator() ; (; Size ; i); const. inlineconstexprnoexcept . Const access to i-th element. . ◆ operator()() [2/2]. template<sofa::Size N, typename ValueType > . constexpr ValueType& sofa::type::Vec< N, ValueType >::operator() ; (; Size ; i). inlineconstexprnoexcept . Access to i-th element. . ◆ operator*() [1/2]. template<sofa::Size N, typename ValueType > . template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> . constexpr Vec<N,ValueType> sofa::type::Vec< N, ValueType >::operator* ; (; const real2 ; f); const. inlineconstexprnoexcept . ◆ operator*() [2/2]. template<sofa::Size N, typename ValueType > . template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> . constexpr ValueType sofa::type::Vec< N, ValueType >::operator* ; (; const Vec< N, real2 > & ; v); const. inlineconstexprnoexcept . Dot product. . ◆ operator*=(). template<sofa::Size N, typename ValueType > . template<class real2 , std::enable_if_t< std::is_convertible_v< real2, ValueType >, bool > = true> . constexpr ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:22043,access,access,22043,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html,1,['access'],['access']
Security,"ors are used : ; VecCoord ; : containing positions. ; VecDeriv ; : derivative values, i.e. velocity, forces, displacements. In most cases they are the same (i.e. 3D/2D point particles), but they can be different (rigid frames for instance). Several pre-defined vectors are stored : ; position ; ; velocity ; ; force ; ; dx ; (displacement). Other vectors can be allocated to store other temporary values. Vectors can be assigned efficiently by just swapping pointers.; In addition to state vectors, the current constraint system matrix is also stored, containing the coefficient of each constraint defined over the DOFs in this body. . Classes; class  ConstraintBlock;  ; class  VMultiOpEntry;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (BaseMechanicalState, BaseState);  ;  SOFA_BASE_CAST_IMPLEMENTATION (BaseMechanicalState);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ; Methods allowing to have access to the geometry without a template class (generic but not efficient); virtual SReal getPX (Index) const;  ; virtual SReal getPY (Index) const;  ; virtual SReal getPZ (Index) const;  ; Mechanical integration related methods; Note: all these methods can now be implemented generically using VecId-based operations . virtual void beginIntegration (SReal);  Called at the beginning of each integration step. More...;  ; virtual void endIntegration (const ExecParams *params, SReal);  Called at the end of each integration step. More...;  ; virtual void resetForce (const ExecParams *params, VecDerivId f=VecDerivId::force());  Set F = 0. More...;  ; virtual void resetAcc (const ExecParams *params, VecDerivId a=VecDerivId::dx());  Set Acc =0. More...;  ; virtual void accumulateForce (const ExecParams *params, VecDerivId f=VecDerivId::force());  Add stored external forces to F. More...;  ; Constraints related methods; virtual void resetConstraint (const ConstraintParams *params)=0;  Reset the constraint matr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html:1774,access,access,1774,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mechanical_state.html,1,['access'],['access']
Security,"osition and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >.; Reimplemented in sofa::component::solidmechanics::fem::nonuniform::NonUniformHexahedronFEMForceFieldAndMass< DataTypes >, and sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). overridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the same large matrix. Each object adds its contribution to a different section of the matrix. That is why, an offset is used to identify where in the matrix the force field must start adding its contribution. ; kFactstiffness factor that needs to be multiplied to each matrix entry. ; offsetStarting index of the submatrix to fill in the global matrix. . Reimplemented from sofa::core::behavior::ForceField< DataTypes >.; Reimplemented in sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceFieldAndMass< DataTypes >. ◆ buildDampingMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::HexahedronFEMForceField< DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; )",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field.html:34105,access,access,34105,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedron_f_e_m_force_field.html,1,['access'],['access']
Security,"ows=false);  ; template<class TMatrix > ; void copyUpperNonZeros (TMatrix &M, bool keepEmptyRows=false);  ; template<class TMatrix > ; void copyLowerNonZeros (TMatrix &M, bool keepEmptyRows=false);  ; void copyUpperNonSmall (Matrix &M, const Real ref, bool keepEmptyRows=false);  ; void copyLowerNonSmall (Matrix &M, const Real ref, bool keepEmptyRows=false);  ; static bool nonzeros (Index, Index, Block &val, const Real);  ; static bool nonsmall (Index, Index, Block &val, const Real ref);  ; static bool upper (Index i, Index j, Block &val, const Real);  ; static bool lower (Index i, Index j, Block &val, const Real);  ; static bool upper_nonzeros (Index i, Index j, Block &val, const Real ref);  ; static bool lower_nonzeros (Index i, Index j, Block &val, const Real ref);  ; static bool upper_nonsmall (Index i, Index j, Block &val, const Real ref);  ; static bool lower_nonsmall (Index i, Index j, Block &val, const Real ref);  . Virtual iterator classes and methods; virtual BlockConstAccessor blockGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blockGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blockCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const override;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const override;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const override;  Get the iterators corresponding to the beginning and end of the given row of blocks. More...;  ; virtual RowBlockConstIterator bRowsBegin () const override;  Get the iterator corresponding to the beginning of the rows of blocks. More...;  ; virtual RowBlockConstIterator bRowsEnd () const override;  Get",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html:25496,access,access,25496,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_compressed_row_sparse_matrix_mechanical.html,1,['access'],['access']
Security,"p::ConstraintAnimationLoop::compTime. protected . ◆ constraintCorrections. std::vector<core::behavior::BaseConstraintCorrection*> sofa::component::animationloop::ConstraintAnimationLoop::constraintCorrections. protected . ◆ d_activateSubGraph. Data<bool> sofa::component::animationloop::ConstraintAnimationLoop::d_activateSubGraph. ◆ d_allVerified. Data<bool> sofa::component::animationloop::ConstraintAnimationLoop::d_allVerified. All constraints must be verified (each constraint's error < tolerance) . ◆ d_displayTime. Data<bool> sofa::component::animationloop::ConstraintAnimationLoop::d_displayTime. Display time for each important step of ConstraintAnimationLoop. . ◆ d_doCollisionsFirst. Data<bool> sofa::component::animationloop::ConstraintAnimationLoop::d_doCollisionsFirst. Compute the collisions first (to support penality-based contacts) . ◆ d_doubleBuffer. Data<bool> sofa::component::animationloop::ConstraintAnimationLoop::d_doubleBuffer. Double the buffer dedicated to the constraint problem to make it accessible to another thread. . ◆ d_graphConstraints. Data<std::map < std::string, sofa::type::vector<SReal> > > sofa::component::animationloop::ConstraintAnimationLoop::d_graphConstraints. Graph of each constraint's error at the end of the resolution. . ◆ d_graphErrors. Data<std::map < std::string, sofa::type::vector<SReal> > > sofa::component::animationloop::ConstraintAnimationLoop::d_graphErrors. Sum of the constraints' errors at each iteration. . ◆ d_graphForces. Data<std::map < std::string, sofa::type::vector<SReal> > > sofa::component::animationloop::ConstraintAnimationLoop::d_graphForces. Graph of each constraint's force at each step of the resolution. . ◆ d_maxIt. Data<int> sofa::component::animationloop::ConstraintAnimationLoop::d_maxIt. Maximum number of iterations of the Gauss-Seidel. . ◆ d_realTimeCompensation. Data<bool> sofa::component::animationloop::ConstraintAnimationLoop::d_realTimeCompensation. If the total computational time T < dt, sleep(dt-T) . ◆",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_constraint_animation_loop.html:19462,access,accessible,19462,api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_constraint_animation_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_constraint_animation_loop.html,1,['access'],['accessible']
Security,"pMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const sofa::type::SVector< std::string > &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const sofa::type::SVector< std::string > &value, const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~Data () override;  Destructor. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html:4741,access,access,4741,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data_file_name_vector.html,1,['access'],['access']
Security,"pedMatrixLinearSystem< BlockDiagonalMatrix< 3, double >, FullVector< double > >;  ; template class SOFA_COMPONENT_LINEARSYSTEM_API TypedMatrixLinearSystem< BlockDiagonalMatrix< 3, float >, FullVector< float > >;  ; template class SOFA_COMPONENT_LINEARSYSTEM_API TypedMatrixLinearSystem< RotationMatrix< double >, FullVector< double > >;  ; template class SOFA_COMPONENT_LINEARSYSTEM_API TypedMatrixLinearSystem< RotationMatrix< float >, FullVector< float > >;  . Typedef Documentation. ◆ LocalMappedMatrixType. template<class TReal > . using sofa::component::linearsystem::LocalMappedMatrixType = typedef sofa::linearalgebra::CompressedRowSparseMatrix<TReal>. ◆ StrategyCheckerType. using sofa::component::linearsystem::StrategyCheckerType = typedef sofa::core::matrixaccumulator::CompositeIndexVerificationStrategy< core::matrixaccumulator::RangeVerification, CheckNoChangeInInsertionOrder >. The strategy used to check the incoming rows and columns is a combination of: 1) checking if the indices are in the authorized submatrix (range) 2) checking if the indices comply with the initial sparsity pattern . Function Documentation. ◆ addToGlobalMatrix(). template<class BlockType > . void sofa::component::linearsystem::addToGlobalMatrix ; (; linearalgebra::BaseMatrix * ; globalMatrix, . Eigen::SparseMatrix< BlockType, Eigen::RowMajor > ; JT_K_J, . const type::Vec2u ; positionInGlobalMatrix . ). ◆ computeProjection(). template<class BlockType > . void sofa::component::linearsystem::computeProjection ; (; const Eigen::Map< Eigen::SparseMatrix< BlockType, Eigen::RowMajor > > ; KMap, . const sofa::type::fixed_array< std::shared_ptr< linearalgebra::CompressedRowSparseMatrix< BlockType >>, 2 > ; J, . Eigen::SparseMatrix< BlockType, Eigen::RowMajor > & ; JT_K_J . ). ◆ configureCreatedMatrixComponent(). template<core::matrixaccumulator::Contribution c> . void sofa::component::linearsystem::configureCreatedMatrixComponent ; (; typename BaseAssemblingMatrixAccumulator< c >::SPtr ; mat, . typena",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html:8183,authoriz,authorized,8183,api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1linearsystem.html,1,['authoriz'],['authorized']
Security,"per::vector_id< T, TIndex, CheckIndices, MemoryManager >::at ; (; Index ; n); const. inline . Read-only random access, with explicit Index. . ◆ operator()() [1/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator()() [2/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n); const. inline . Read-only random access, with explicit Index. . ◆ operator[]() [1/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator[]() [2/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Index ; n); const. inline . Read-only random access. . ◆ operator[]() [3/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Size ; n). inlineprotected . Read/write random access with regular index type, protected to force use of explicit Index. . ◆ operator[]() [4/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Size ; n); const. inlineprotected . Read-only random access with regular index type, protected to force use of explicit I",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:7018,access,access,7018,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,1,['access'],['access']
Security,"pes >::m_volumeConservationMode. ◆ state. template<class DataTypes > . State sofa::component::mechanicalload::SurfacePressureForceField< DataTypes >::state. protected . In pulse mode, says wether pressure is increasing or decreasing. . Constructor details. ◆ SurfacePressureForceField(). template<class DataTypes > . sofa::component::mechanicalload::SurfacePressureForceField< DataTypes >::SurfacePressureForceField. protected . ◆ ~SurfacePressureForceField(). template<class DataTypes > . sofa::component::mechanicalload::SurfacePressureForceField< DataTypes >::~SurfacePressureForceField. protectedvirtual . Function details. ◆ addDForce() [1/3]. void sofa::component::mechanicalload::SurfacePressureForceField< defaulttype::Rigid3Types >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). virtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addDForce() [2/3]. template<class DataTypes > . void sofa::component::mechanicalload::SurfacePressureForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addDForce() [3/3]. void sofa::component::mechanicalload::SurfacePressureForceField< defaulttype::Rigid3Types >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv &",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_surface_pressure_force_field.html:31155,access,access,31155,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_surface_pressure_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_surface_pressure_force_field.html,1,['access'],['access']
Security,"plate wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObject() [2/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridevirtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObjects(). void sofa::simulation::graph::DAGNode::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type,; Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getParents(). sofa::core::objectmodel::BaseNode::Parents sofa::simulation::graph::DAGNode::getParents ; (; ); const. overridevirtual . Get a list of parent node. ; Implements sofa::core::objectmodel::BaseNode. ◆ hasAncestor() [1/2]. bool sofa::simulation::graph::DAGNode::hasAncestor ; (; const BaseContext * ; context); const. overridevirtual . Test if the given context is an ancestor of this context. An ancestor is a parent or (recursively) the parent of an ancestor. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ hasAncestor() [2/2]. bool sofa::simulation::graph::DAGNode::hasAncestor ; (; const BaseNode * ; node); const. inlineoverridevirtual . Test if the given context is an ancestor of this context. An ancestor is a parent or (recursively) the parent of",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:38186,access,access,38186,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,2,['access'],['access']
Security,"plements sofa::core::objectmodel::BaseNode. ◆ getObject() [1/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type,; Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObject() [2/2]. void * sofa::simulation::graph::DAGNode::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridevirtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getObjects(). void sofa::simulation::graph::DAGNode::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridevirtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type,; Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Implements sofa::simulation::Node. ◆ getParents(). sofa::core::objectmodel::BaseNode::Parents sofa::simulation::graph::DAGNode::getParents ; (; ); const. overridevirtual . Get a list of parent node. ; Implements sofa::core",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:37703,access,access,37703,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,1,['access'],['access']
Security,"possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:6791,access,access,6791,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,4,['access'],['access']
Security,"pr T & z () noexcept;  Special access to third element. More...;  ; constexpr const T & z () const noexcept;  Special const access to third element. More...;  ; constexpr T & w () noexcept;  Special access to fourth element. More...;  ; constexpr const T & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const T r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const T &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (T r) noexcept;  Sets every element to r. More...;  ; constexpr T & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const T & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const T * ptr () const noexcept;  Cast into a const array of values. More...;  ; constexpr T * ptr () noexcept;  Cast into an array of values. More...;  ; constexpr void getsub (const Size i, Vec< N2, T > &m) const noexcept;  ; constexpr void getsub (const Size i, T &m) const noexcept;  ; constexpr Vec< N, T > mulscalar (const T f) const noexcept;  ; constexpr Vec< N, T > mulscalar (const real2 f) const noexcept;  Multiplication by a scalar f. More...;  ; constexpr Vec< N, T > operator* (const real2 f) const noexcept;  ; constexpr T operator* (const Vec< N, real2 > &v) const noexcept;  Dot product. More...;  ; constexpr void eqmulscalar (const T f) noexcept;  In-place multiplication by a scalar f. More...;  ; constexpr void eqmulscalar (const real2 f) noexcept;  ; constexpr void operator*= (const real2 f) noexcept;  ; constexpr Vec< N, T > divscalar (const T f) const noexcept;  Division by a scalar f. More...;  ; const",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html:3305,access,access,3305,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,1,['access'],['access']
Security,"pr void sofa::type::MatSym< D, real >::identity ; (; ). inlineconstexpr . Set matrix to identity. . ◆ invert(). template<sofa::Size D, class real = SReal> . bool sofa::type::MatSym< D, real >::invert ; (; const MatSym< D, real > & ; m). inline . Invert matrix m. . ◆ Mat2Sym(). template<sofa::Size D, class real = SReal> . static void sofa::type::MatSym< D, real >::Mat2Sym ; (; const Mat< D, D, real > & ; M, . MatSym< D, real > & ; W . ). inlinestatic . convert matrix to sym . ◆ MatSymMultiply(). template<sofa::Size D, class real = SReal> . Mat<D, D, real> sofa::type::MatSym< D, real >::MatSymMultiply ; (; const Mat< D, D, real > & ; m); const. inline . ◆ operator!=(). template<sofa::Size D, class real = SReal> . bool sofa::type::MatSym< D, real >::operator!= ; (; const MatSym< D, real > & ; b); const. inline . ◆ operator()() [1/2]. template<sofa::Size D, class real = SReal> . real& sofa::type::MatSym< D, real >::operator() ; (; const int ; i, . const int ; j . ). inline . Write access to element (i,j). . ◆ operator()() [2/2]. template<sofa::Size D, class real = SReal> . const real& sofa::type::MatSym< D, real >::operator() ; (; const int ; i, . const int ; j . ); const. inline . Read-only access to element (i,j). . ◆ operator*() [1/4]. template<sofa::Size D, class real = SReal> . Coord sofa::type::MatSym< D, real >::operator* ; (; const Coord & ; v); const. inline . Multiplication operator Matrix * Vector. . ◆ operator*() [2/4]. template<sofa::Size D, class real = SReal> . Mat<D,D,real> sofa::type::MatSym< D, real >::operator* ; (; const Mat< D, D, real > & ; m); const. inline . ◆ operator*() [3/4]. template<sofa::Size D, class real = SReal> . Mat<D, D, real> sofa::type::MatSym< D, real >::operator* ; (; const MatSym< D, real > & ; m); const. inline . ◆ operator*() [4/4]. template<sofa::Size D, class real = SReal> . MatSym<D, real> sofa::type::MatSym< D, real >::operator* ; (; real ; f); const. inline . Scalar multiplication operator. . ◆ operator*=(). template<sofa::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:17759,access,access,17759,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,1,['access'],['access']
Security,"protected . the initial positions of the points . Constructor details. ◆ TetrahedronHyperelasticityFEMForceField(). template<class DataTypes > . sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::TetrahedronHyperelasticityFEMForceField. protected . ◆ ~TetrahedronHyperelasticityFEMForceField(). template<class DataTypes > . sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::~TetrahedronHyperelasticityFEMForceField ; (; ). overrideprotecteddefault . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_f_e_m_force_field.html:25539,access,access,25539,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_f_e_m_force_field.html,1,['access'],['access']
Security,"pt;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< T, N > &p) noexcept;  ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const T r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, T defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr T & x () noexcept;  Special access to first element. More...;  ; constexpr const T & x () const noexcept;  Special const access to first element. More...;  ; constexpr T & y () noexcept;  Special access to second element. More...;  ; constexpr const T & y () const noexcept;  Special const access to second element. More...;  ; constexpr T & z () noexcept;  Special access to third element. More...;  ; constexpr const T & z () const noexcept;  Special const access to third element. More...;  ; constexpr T & w () noexcept;  Special access to fourth element. More...;  ; constexpr const T & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const T r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const T &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (T r) noexcept;  Sets every",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html:2143,access,access,2143,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,1,['access'],['access']
Security,"pt;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; constexpr Real toReal () const;  ; constexpr operator Real () const;  ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, Real > &m) noexcept;  Set matrix as the transpose of m. More...;  ; constexpr void transpose () noexcept;  Transpose the square matrix. More...;  ; constexpr Mat< C, L, Real > transposed () const noexcept;  Return the transpose of m. More...;  ; constexpr Mat< L, C, Real > operator+ (const Mat< L, C, Real > &m) c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:4490,access,access,4490,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,2,['access'],['access']
Security,"quare matrix m. . ◆ inverted(). template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::inverted ; (; ); const. inlineconstexpr . invert this . ◆ isDiagonal(). template<sofa::Size L, sofa::Size C, class real > . bool sofa::type::Mat< L, C, real >::isDiagonal ; (; ); const. inlinenoexcept . ◆ isSymmetric(). template<sofa::Size L, sofa::Size C, class real > . bool sofa::type::Mat< L, C, real >::isSymmetric ; (; ); const. inline . ◆ isTransform(). template<sofa::Size L, sofa::Size C, class real > . constexpr bool sofa::type::Mat< L, C, real >::isTransform ; (; ); const. inlineconstexpr . ReturnsTrue if and only if the Matrix is a transformation matrix . ◆ line(). template<sofa::Size L, sofa::Size C, class real > . constexpr const Line& sofa::type::Mat< L, C, real >::line ; (; Size ; i); const. inlineconstexprnoexcept . Read-only access to line i. . ◆ lptr() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr const Line* sofa::type::Mat< L, C, real >::lptr ; (; ); const. inlineconstexprnoexcept . Cast into a standard C array of lines (read-only). . ◆ lptr() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Line* sofa::type::Mat< L, C, real >::lptr ; (; ). inlineconstexprnoexcept . Cast into a standard C array of lines. . ◆ minusTransposed(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::minusTransposed ; (; const Mat< C, L, real > & ; m); const. inlineconstexprnoexcept . Subtraction with the transposed of the given matrix operator. ; Returnsthis - mt . ◆ multDiagonal(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::multDiagonal ; (; const Line & ; d); const. inlineconstexprnoexcept . Multiplication with a diagonal Matrix CxC represented as a vector of size C.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:21123,access,access,21123,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,1,['access'],['access']
Security,"r *name, MyData *d);  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  ;  Public Member Functions inherited from sofa::gui::qt::SimpleDataWidget< T, graph_data_widget_container< T > >;  SimpleDataWidget (QWidget *parent, const char *name, MyTData *d);  ; virtual void setDataReadOnly (bool readOnly);  This method is called after createWidgets to configure whether the created widgets should be read-only. More...;  ; virtual void readFromData ();  The implementation of this method tells how the widget reads the value of the data. More...;  ; virtual void setReadOnly (bool readOnly);  ; virtual void writeToData ();  ;  Public Member Functions inherited from sofa::gui::qt::TDataWidget< T >;  TDataWidget (QWidget *parent, const char *name, MyTData *d);  ; sofa::core::objectmodel::Data< T > * getData ();  ; const sofa::core::objectmodel::Data< T > * getData () const;  ; virtual void setData (MyTData *d);  ; virtual void setData (MyData *d);  ;  Public Member Functions inherited from sofa::gui::qt::DataWidget;  DataWidget (QWidget *parent, const char *name, MyData *d);  ;  ~DataWidget () override;  ; virtual void setData (MyData *d);  ; const core::objectmodel::BaseData * getBaseData () const;  BaseData pointer accessor function. More...;  ; core::objectmodel::BaseData * getBaseData ();  ; void updateVisibility ();  ; bool isDirty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::gui::qt::SimpleDataWidget< T, graph_data_widget_container< T > >; graph_data_widget_container< T > container;  ;  Protected Attributes inherited from sofa::gui::qt::TDataWidget< T >; MyTData * Tdata;  ;  Protected Attributes inherited from sofa::gui::qt::DataWidget; core::objectmodel::BaseData * b",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_graph_data_widget___linear.html:1972,access,accessor,1972,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_graph_data_widget___linear.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_graph_data_widget___linear.html,1,['access'],['accessor']
Security,"r- (const RigidDeriv< 3, real > &a) const;  ; constexpr Real operator* (const RigidDeriv< 3, real > &a) const;  dot product, mostly used to compute residuals as sqrt(x*x) More...;  ; real norm () const;  Euclidean norm. More...;  ; constexpr Vec3 & getVCenter ();  ; constexpr Vec3 & getVOrientation ();  ; constexpr const Vec3 & getVCenter () const;  ; constexpr const Vec3 & getVOrientation () const;  ; constexpr Vec3 & getLinear ();  ; constexpr const Vec3 & getLinear () const;  ; constexpr Vec3 & getAngular ();  ; constexpr const Vec3 & getAngular () const;  ; constexpr VecAll getVAll () const;  ; constexpr Vec3 velocityAtRotatedPoint (const Vec3 &p) const;  Velocity at point p, where p is the offset from the origin of the frame, given in the same coordinate system as the velocity of the origin. More...;  ; constexpr real * ptr ();  ; constexpr const real * ptr () const;  ; constexpr real & operator[] (Size i);  Access to i-th element. More...;  ; constexpr const real & operator[] (Size i) const;  Const access to i-th element. More...;  ; Tests operators; constexpr bool operator== (const RigidDeriv< 3, real > &b) const;  ; constexpr bool operator!= (const RigidDeriv< 3, real > &b) const;  . Static Public Member Functions; static constexpr Size size ();  . Friends; class RigidCoord< 3, real >;  ; std::ostream & operator<< (std::ostream &out, const RigidDeriv< 3, real > &v);  write to an output stream More...;  ; std::istream & operator>> (std::istream &in, RigidDeriv< 3, real > &v);  read from an input stream More...;  . Attribute details. ◆ spatial_dimensions. template<typename real > . constexpr sofa::Size sofa::defaulttype::RigidDeriv< 3, real >::spatial_dimensions = 3. staticconstexpr . Compile-time constant specifying the number of dimensions of space (NOT equivalent to total_size for rigids) . ◆ total_size. template<typename real > . constexpr sofa::Size sofa::defaulttype::RigidDeriv< 3, real >::total_size = 6. staticconstexpr . Compile-time constant specifying",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_rigid_deriv_3_013_00_01real_01_4.html:2967,access,access,2967,api/master/sofa/html/classsofa_1_1defaulttype_1_1_rigid_deriv_3_013_00_01real_01_4.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_rigid_deriv_3_013_00_01real_01_4.html,1,['access'],['access']
Security,"r<T>>; class sofa::type::vector< T, MemoryManager >; Regular vector Using CPUMemoryManager, it has the same behavior as std::vector with extra conveniences:; string serialization (making it usable in Data); operator[] is checking if the index is within the bounds in debug . Public Member Functions;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ; vector & operator= (const std::vector< T, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< T, Alloc > &&v);  Move assignment operator. More...;  ;  vector (typename vector< T >::const_iterator first, typename vector< T >::const_iterator last);  Constructor. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. More...;  ; std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; void fill (const T &value);  Sets every element to 'value'. More...;  ; void fastResize (Size n);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  Specialization for writing vectors of unsigned char. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::ostre",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector.html:1477,access,access,1477,api/master/sofa/html/classsofa_1_1type_1_1vector.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1vector.html,1,['access'],['access']
Security,"ract with the messaging system. ; Typedef Documentation. ◆ tokenizer. typedef boost::tokenizer<boost::char_separator<char> > sofa::helper::logging::tokenizer. Function Documentation. ◆ getComponentInfo() [1/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const ComponentInfo::SPtr & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getComponentInfo() [2/3]. ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const sofa::core::objectmodel::Base * ; t). inline . This construct a new ComponentInfo object from a Base object. . ◆ getComponentInfo() [3/3]. const ComponentInfo::SPtr sofa::helper::logging::getComponentInfo ; (; const std::string & ; s). inline . This function is used in the msg_* macro to handle emitting case based on string. . ◆ getDefaultMessageHandlers(). std::vector<MessageHandler*> sofa::helper::logging::getDefaultMessageHandlers ; (; ). Threading issues... a mutex is serializing the access to the message API. Memory management: object are passed to the message info. some of them are duplicated other get a weak reference . ◆ getMainInstance(). MessageDispatcherImpl* sofa::helper::logging::getMainInstance ; (; ). ◆ notMuted() [1/4]. bool sofa::helper::logging::notMuted ; (; const ComponentInfo::SPtr & ; ). inline . ◆ notMuted() [2/4]. bool sofa::helper::logging::notMuted ; (; const sofa::core::objectmodel::Base * ; t). inline . ◆ notMuted() [3/4]. bool sofa::helper::logging::notMuted ; (; const std::string & ; ). inline . This function is used in the msg_* macro to handle string based on string. . ◆ notMuted() [4/4]. bool sofa::helper::logging::notMuted ; (; sofa::core::objectmodel::Base * ; t). inline . ◆ operator<<() [1/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo & ; nfo . ). ◆ operator<<() [2/3]. std::ostream& sofa::helper::logging::operator<< ; (; std::ostream & ; out, . const ComponentInfo * ; nfo . ). ◆",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html:4110,access,access,4110,api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper_1_1logging.html,1,['access'],['access']
Security,"raintSolver. ◆ getConstraintViolation(). void sofa::component::constraint::lagrangian::solver::ConstraintSolverImpl::getConstraintViolation ; (; const core::ConstraintParams * ; cparams, . sofa::linearalgebra::BaseVector * ; v . ). protected . ◆ init(). void sofa::component::constraint::lagrangian::solver::ConstraintSolverImpl::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject.; Reimplemented in sofa::component::constraint::lagrangian::solver::GenericConstraintSolver. ◆ lockConstraintProblem(). virtual void sofa::component::constraint::lagrangian::solver::ConstraintSolverImpl::lockConstraintProblem ; (; sofa::core::objectmodel::BaseObject * ; from, . ConstraintProblem * ; p1, . ConstraintProblem * ; p2 = nullptr . ). pure virtual . Do not use the following LCPs until the next call to this function. This is used to prevent concurrent access to the LCP when using a LCPForceFeedback through an haptic thread. ; Implemented in sofa::component::constraint::lagrangian::solver::LCPConstraintSolver, and sofa::component::constraint::lagrangian::solver::GenericConstraintSolver. ◆ postBuildSystem(). void sofa::component::constraint::lagrangian::solver::ConstraintSolverImpl::postBuildSystem ; (; const core::ConstraintParams * ; cParams). overrideprotectedvirtual . Reimplemented from sofa::core::behavior::ConstraintSolver. ◆ postSolveSystem(). void sofa::component::constraint::lagrangian::solver::ConstraintSolverImpl::postSolveSystem ; (; const core::ConstraintParams * ; cParams). overrideprotectedvirtual . Reimplemented from sofa::core::behavior::ConstraintSolver. ◆ removeConstraintCorrection(). void sofa::component::constraint::lagrangian::solver::ConstraintSolverImpl::removeConstraintCorrection ; (; core::behavior::BaseConstraintCorrection * ; s). overridevirtual . Remove reference to ConstraintCorrection; Parameters. cis the ConstraintCorrect",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_constraint_solver_impl.html:19171,access,access,19171,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_constraint_solver_impl.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_constraint_solver_impl.html,1,['access'],['access']
Security,"rallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_e",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_colour_picking_visitor.html:3315,access,access,3315,api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_colour_picking_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_colour_picking_visitor.html,8,['access'],['access']
Security,"rallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::VisualVisitor; core::visual::VisualParams * vparams;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class V",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html:3544,access,access,3544,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html,2,['access'],['access']
Security,"rallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1testing_1_1_get_assembled_size_visitor.html:3704,access,access,3704,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1testing_1_1_get_assembled_size_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1testing_1_1_get_assembled_size_visitor.html,15,['access'],['access']
Security,"rams);  ; MechanicalParams * operator= (const MechanicalParams &mparams);  ; Flags and parameters getters; SReal dt () const;  Time step. More...;  ; bool implicit () const;  Is the time integration scheme implicit ? More...;  ; SReal mFactor () const;  Mass matrix contributions factor (for implicit schemes) More...;  ; SReal bFactor () const;  Damping matrix contributions factor (for implicit schemes) More...;  ; SReal kFactor () const;  Stiffness matrix contributions factor (for implicit schemes) More...;  ; Rayleigh Damping D = rayleighStiffness*K - rayleighMass*M; SReal kFactorIncludingRayleighDamping (SReal rayleighStiffness) const;  ; SReal mFactorIncludingRayleighDamping (SReal rayleighMass) const;  ; Access to vectors from a given state container (i.e. State or MechanicalState); template<class S > ; const Data< typename S::VecCoord > * readX (const S *state) const;  Read access to current position vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readV (const S *state) const;  Read access to current velocity vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readF (const S *state) const;  Read access to current force vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readDx (const S *state) const;  Read access to current dx vector (for implicit schemes) More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readDf (const S *state) const;  Read access to current df vector (for implicit schemes) More...;  ;  Public Member Functions inherited from sofa::core::ExecParams; bool checkValidStorage () const;  ; ExecMode execMode () const;  Mode of execution requested. More...;  ; int threadID () const;  Index of current thread (0 corresponding to the only thread in sequential mode, or first thread in parallel mode) More...;  ; int nbThreads () const;  Number of threads currently known to Sofa. More...;  ;  ExecParams ();  ; void update ();  Make sure this instance is up-t",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html:3282,access,access,3282,api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,1,['access'],['access']
Security,"rapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; Parameters Setters; virtual void setDt (SReal);  Simulation timestep. More...;  ; virtual void setAnimate (bool);  Animation flag. More...;  ; virtual void setSleeping (bool);  Sleeping state of the context. More...;  ; virtual void setChangeSleepingState (bool);  Sleeping state change of the context. More...;  ; Variables Setters; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; Adding/Removing objects. Note that these methods can fail if the context doesn't support attached objects; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:7666,access,access,7666,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['access'],['access']
Security,"rapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void executeVisitor (simulation::Visitor *, bool precomputedOrder=false);  apply an action More...;  ; virtual void propagateEvent (const core::ExecParams *params, Event *);  Propagate an event. More...;  ; virtual void notifyAddSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyRemoveSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; vi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html:8762,access,access,8762,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context.html,1,['access'],['access']
Security,"rapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void notifyAddSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyRemoveSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyMoveSlave (core::objectmodel::BaseObject *previousMaster, core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  . Static Public Member Functions; static const std::string Ge",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html:22917,access,access,22917,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node.html,1,['access'],['access']
Security,"rapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void notifyAddSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyRemoveSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyMoveSlave (core::objectmodel::BaseObject *previousMaster, core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  . Static Public Member Functions; template<class RealObject >",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:26308,access,access,26308,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,1,['access'],['access']
Security,"rchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [6/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, possibly searching up or down from the current context. . ◆ get() [7/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; SearchDirection ; dir = SearchUp); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [8/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:20755,access,access,20755,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['access'],['access']
Security,"re...;  ; bool implicit () const;  Is the time integration scheme implicit ? More...;  ; SReal mFactor () const;  Mass matrix contributions factor (for implicit schemes) More...;  ; SReal bFactor () const;  Damping matrix contributions factor (for implicit schemes) More...;  ; SReal kFactor () const;  Stiffness matrix contributions factor (for implicit schemes) More...;  ; Rayleigh Damping D = rayleighStiffness*K - rayleighMass*M; SReal kFactorIncludingRayleighDamping (SReal rayleighStiffness) const;  ; SReal mFactorIncludingRayleighDamping (SReal rayleighMass) const;  ; Access to vectors from a given state container (i.e. State or MechanicalState); template<class S > ; const Data< typename S::VecCoord > * readX (const S *state) const;  Read access to current position vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readV (const S *state) const;  Read access to current velocity vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readF (const S *state) const;  Read access to current force vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readDx (const S *state) const;  Read access to current dx vector (for implicit schemes) More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readDf (const S *state) const;  Read access to current df vector (for implicit schemes) More...;  ;  Public Member Functions inherited from sofa::core::ExecParams; bool checkValidStorage () const;  ; ExecMode execMode () const;  Mode of execution requested. More...;  ; int threadID () const;  Index of current thread (0 corresponding to the only thread in sequential mode, or first thread in parallel mode) More...;  ; int nbThreads () const;  Number of threads currently known to Sofa. More...;  ;  ExecParams ();  ; void update ();  Make sure this instance is up-to-date relative to the current thread. More...;  ; ExecParams & setExecMode (ExecMode v);  Request a specific mode of execution. More...;  ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html:3423,access,access,3423,api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,1,['access'],['access']
Security,"re::ConstVecCoordId v) const override;  ; virtual const Data< VecDeriv > * read (core::ConstVecDerivId v) const override;  ; virtual const Data< MatrixDeriv > * read (core::ConstMatrixDerivId) const override;  ;  Public Member Functions inherited from sofa::core::State< TDataTypes >;  SOFA_CLASS (SOFA_TEMPLATE(State, TDataTypes), BaseState);  ; sofa::type::TBoundingBox< Real > computeBBox () const;  Compute the bounding box independently from the visibility parameters. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible=false) override;  ; objectmodel::BaseData * baseWrite (VecId v) override;  ; const objectmodel::BaseData * baseRead (ConstVecId v) const override;  ; ReadVecCoord readPositions () const;  ; WriteVecCoord writePositions ();  ; WriteOnlyVecCoord writeOnlyPositions ();  ; ReadVecCoord readRestPositions () const;  ; WriteVecCoord writeRestPositions ();  ; WriteOnlyVecCoord writeOnlyRestPositions ();  ; ReadVecDeriv readVelocities () const;  ; WriteVecDeriv writeVelocities ();  ; WriteOnlyVecDeriv writeOnlyVelocities ();  ; ReadVecDeriv readForces () const;  ; WriteVecDeriv writeForces ();  ; WriteOnlyVecDeriv writeOnlyForces ();  ; ReadVecDeriv readDx () const;  ; WriteVecDeriv writeDx ();  ; WriteOnlyVecDeriv writeOnlyDx ();  ; ReadVecDeriv readNormals () const;  ; const AccumulationVecId< TDataTypes, V_DERIV, V_READ > & readTotalForces () const;  Returns a proxy objects offering simplified access to elements of the cumulative sum of all force containers. More...;  ; void addToTotalForces (core::ConstVecDerivId forceId) override;  The provided VecDerivId will contribute to the sum of all force containers. More...;  ; void removeFromTotalForces (core::ConstVecDerivId forceId) override;  ;  Public Member Functions inherited from sofa::core::BaseState;  SOFA_ABSTRACT_CLASS (BaseState, objectmodel::BaseObject);  . Protected Member Functions; void computeNormals ();  ;  DataDisplay ();  ;  Protected Member Functions inherited from ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_data_display.html:16946,access,access,16946,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_data_display.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_data_display.html,1,['access'],['access']
Security,"re::ConstVecCoordId v) const override;  ; virtual const Data< VecDeriv > * read (core::ConstVecDerivId v) const override;  ; virtual const Data< MatrixDeriv > * read (core::ConstMatrixDerivId) const override;  ;  Public Member Functions inherited from sofa::core::State< TDataTypes >;  SOFA_CLASS (SOFA_TEMPLATE(State, TDataTypes), BaseState);  ; sofa::type::TBoundingBox< Real > computeBBox () const;  Compute the bounding box independently from the visibility parameters. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible=false) override;  ; objectmodel::BaseData * baseWrite (VecId v) override;  ; const objectmodel::BaseData * baseRead (ConstVecId v) const override;  ; ReadVecCoord readPositions () const;  ; WriteVecCoord writePositions ();  ; WriteOnlyVecCoord writeOnlyPositions ();  ; ReadVecCoord readRestPositions () const;  ; WriteVecCoord writeRestPositions ();  ; WriteOnlyVecCoord writeOnlyRestPositions ();  ; ReadVecDeriv readVelocities () const;  ; WriteVecDeriv writeVelocities ();  ; WriteOnlyVecDeriv writeOnlyVelocities ();  ; ReadVecDeriv readForces () const;  ; WriteVecDeriv writeForces ();  ; WriteOnlyVecDeriv writeOnlyForces ();  ; ReadVecDeriv readDx () const;  ; WriteVecDeriv writeDx ();  ; WriteOnlyVecDeriv writeOnlyDx ();  ; ReadVecDeriv readNormals () const;  ; const AccumulationVecId< TDataTypes, V_DERIV, V_READ > & readTotalForces () const;  Returns a proxy objects offering simplified access to elements of the cumulative sum of all force containers. More...;  ; void addToTotalForces (core::ConstVecDerivId forceId) override;  The provided VecDerivId will contribute to the sum of all force containers. More...;  ; void removeFromTotalForces (core::ConstVecDerivId forceId) override;  ;  Public Member Functions inherited from sofa::core::BaseState;  SOFA_ABSTRACT_CLASS (BaseState, objectmodel::BaseObject);  . Protected Member Functions;  OglCylinderModel ();  ;  ~OglCylinderModel () override;  ;  Protected Member Functions in",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_cylinder_model.html:12853,access,access,12853,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_cylinder_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_cylinder_model.html,1,['access'],['access']
Security,"re::ConstVecCoordId v) const override;  ; virtual const Data< VecDeriv > * read (core::ConstVecDerivId v) const override;  ; virtual const Data< MatrixDeriv > * read (core::ConstMatrixDerivId) const override;  ;  Public Member Functions inherited from sofa::core::State< TDataTypes >;  SOFA_CLASS (SOFA_TEMPLATE(State, TDataTypes), BaseState);  ; sofa::type::TBoundingBox< Real > computeBBox () const;  Compute the bounding box independently from the visibility parameters. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible=false) override;  ; objectmodel::BaseData * baseWrite (VecId v) override;  ; const objectmodel::BaseData * baseRead (ConstVecId v) const override;  ; ReadVecCoord readPositions () const;  ; WriteVecCoord writePositions ();  ; WriteOnlyVecCoord writeOnlyPositions ();  ; ReadVecCoord readRestPositions () const;  ; WriteVecCoord writeRestPositions ();  ; WriteOnlyVecCoord writeOnlyRestPositions ();  ; ReadVecDeriv readVelocities () const;  ; WriteVecDeriv writeVelocities ();  ; WriteOnlyVecDeriv writeOnlyVelocities ();  ; ReadVecDeriv readForces () const;  ; WriteVecDeriv writeForces ();  ; WriteOnlyVecDeriv writeOnlyForces ();  ; ReadVecDeriv readDx () const;  ; WriteVecDeriv writeDx ();  ; WriteOnlyVecDeriv writeOnlyDx ();  ; ReadVecDeriv readNormals () const;  ; const AccumulationVecId< TDataTypes, V_DERIV, V_READ > & readTotalForces () const;  Returns a proxy objects offering simplified access to elements of the cumulative sum of all force containers. More...;  ; void addToTotalForces (core::ConstVecDerivId forceId) override;  The provided VecDerivId will contribute to the sum of all force containers. More...;  ; void removeFromTotalForces (core::ConstVecDerivId forceId) override;  ;  Public Member Functions inherited from sofa::core::BaseState;  SOFA_ABSTRACT_CLASS (BaseState, objectmodel::BaseObject);  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl.html:22485,access,access,22485,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl.html,4,['access'],['access']
Security,"re::behavior::ForceField< DataTypes >. ◆ addDForce() [2/3]. template<class DataTypes > . void sofa::component::mechanicalload::SurfacePressureForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addDForce() [3/3]. void sofa::component::mechanicalload::SurfacePressureForceField< defaulttype::Rigid3Types >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). virtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::mechanicalload::SurfacePressureForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::SurfacePressureForceField< DataTypes >::addKToMatrix ; (; const core::MechanicalParams * ; mparams, . con",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_surface_pressure_force_field.html:32311,access,access,32311,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_surface_pressure_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_surface_pressure_force_field.html,1,['access'],['access']
Security,"re::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [14/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [15/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ getAnimate(). bool sofa::core::objectmodel::BaseContext::getAnimate ; (; ); const. virtual . Animation flag. ; Reimplemented in sofa::core::objectmodel::Context. ◆ getDefault(). BaseContext * sofa::core::objectmodel::BaseContext::getDefault ; (; ). static . Get the default Context object, that contains the default values for all parameters and can be used when no loc",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:22390,access,access,22390,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['access'],['access']
Security,"red per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr Line & w () noexcept;  Special access to fourth line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> ; constexpr const Line & z () const noexcept;  Special access to third line (read-only). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> ; constexpr const Line & w () const noexcept;  Special access to fourth line (read-only). More...;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr real toReal () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> ; constexpr operator real () const;  ; template<sofa::Size NbLine = L, sofa::Size NbColumn = C, typename = std::enable_if_t<NbLine == NbColumn>> ; constexpr void identity () noexcept;  Set matrix to identity. More...;  ; constexpr void transpose (const Mat< C, L, real > &m) noexcept;  ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:5204,access,access,5204,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,2,['access'],['access']
Security,"result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:5274,access,access,5274,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,4,['access'],['access']
Security,"ributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::topology::TopologyModifier; TopologyContainer * m_topologyContainer;  Contains the actual topology data and give access to it (nature of these data heavily depends on the kind of topology). More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier.html:28878,access,access,28878,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_modifier.html,3,['access'],['access']
Security,"ributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor Class Reference . #include <MechanicalIntegrateConstraintVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalIntegrateConstraintsVisitor:. [legend]; Detailed Description; Apply the motion correction computed from constraint force influence . Public Attributes; const sofa::core::ConstraintParams * cparams;  ; const double positionFactor;  use the OdeSolver to get the position integration factor More...;  ; const double velocityFactor;  use the OdeSolver to get the position integration factor More...;  ; sofa::core::ConstMultiVecDerivId correctionId;  ; sofa::core::MultiVecDerivId dxId;  ; sofa::core::MultiVecCoordId xId;  ; sofa::core::MultiVecDerivId vId;  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalIntegrateConstraintsVisitor (const core::ConstraintParams *cparams, double pf, double vf, sofa::core::ConstMultiVecDerivId correction, sofa::core::MultiVecDerivId dx=sofa::core::MultiVecDerivId(sofa::core::VecDerivId::dx()), sofa::core::MultiVecCoordId x=sofa::core::MultiVecCoordId(sofa::core::VecCoordId::position()), sofa::core::MultiVecDerivId v=sofa::core::MultiVecDerivId(sofa::core::VecDerivId::velocity()));  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *ms) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeDat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html:1200,access,access,1200,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integrate_constraints_visitor.html,1,['access'],['access']
Security,"rivId. ◆ MultiVecId. typedef TMultiVecId<V_ALL, V_WRITE> sofa::core::MultiVecId. ◆ ObjectRegistrationEntry. typedef struct sofa::core::ObjectRegistrationEntry sofa::core::ObjectRegistrationEntry. ◆ OnCreateCallback. typedef std::function<void(sofa::core::objectmodel::Base*, sofa::core::objectmodel::BaseObjectDescription*)> sofa::core::OnCreateCallback. ◆ sptr. template<class T > . using sofa::core::sptr = typedef boost::intrusive_ptr<T>. ◆ StateType_t. template<class DataTypes , core::VecType vtype> . using sofa::core::StateType_t = typedef typename StateType<DataTypes, vtype>::type. ◆ StateVecType_t. template<class DataTypes , core::VecType vtype> . using sofa::core::StateVecType_t = typedef typename StateVecType<DataTypes, vtype>::type. ◆ VecCoordId. typedef TVecId<V_COORD , V_WRITE> sofa::core::VecCoordId. ◆ VecDerivId. typedef TVecId<V_DERIV , V_WRITE> sofa::core::VecDerivId. ◆ VecId. typedef TVecId<V_ALL, V_WRITE> sofa::core::VecId. Identify one vector stored in State A VecId provides a read-write access to the underlying vector. . Enumeration Type Documentation. ◆ anonymous enum. anonymous enum. EnumeratorSOFA_DATA_MAX_ASPECTS . ◆ ConstraintOrder. enum sofa::core::ConstraintOrder. strong . Description of the order of the constraint. . EnumeratorPOS ; VEL ; ACC ; POS_AND_VEL . ◆ VecAccess. enum sofa::core::VecAccess. Types of vectors that can be stored in State. . EnumeratorV_READ ; V_WRITE . ◆ VecType. enum sofa::core::VecType. Types of vectors that can be stored in State. . EnumeratorV_ALL ; V_COORD ; V_DERIV ; V_MATDERIV . Function Documentation. ◆ caseInsensitive(). std::string sofa::core::caseInsensitive ; (; const std::string & ; text). ◆ castTo(). template<class Dest > . Dest sofa::core::castTo ; (; sofa::core::objectmodel::Base * ; base). Dynamic cast from Base* into the type parameter Dest. . ◆ castToBase(). template<class Source > . sofa::core::objectmodel::Base* sofa::core::castToBase ; (; Source * ; b). Dynamic cast from the type parameter B* into Ba",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:17773,access,access,17773,api/master/sofa/html/namespacesofa_1_1core.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html,1,['access'],['access']
Security,"rix used to draw the scene. This OpenGL matrix defines the world coordinate system with respect to the camera. More...;  ; void getModelViewMatrix (double m[16]) const;  Get the ModelView matrix used to draw the scene. This OpenGL matrix defines the world coordinate system with respect to the camera. More...;  ; void setProjectionMatrix (const double m[16]);  Store the projection matrix used to draw the scene. This OpenGL matrix defines the camera coordinate system with respect to the viewport, including perspective if any. More...;  ; void getProjectionMatrix (double m[16]) const;  Get the projection matrix used to draw the scene. This OpenGL matrix defines the camera coordinate system with respect to the viewport, including perspective if any. More...;  ; bool isSupported (unsigned int api) const;  ; void setSupported (unsigned int api, bool val=true);  ; Access to vectors from a given state container (i.e. State or MechanicalState); template<class S > ; const Data< typename S::VecCoord > * readX (const S *state) const;  Read access to current position vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readV (const S *state) const;  Read access to current velocity vector. More...;  ; Setup methods; Called by the OdeSolver from which the mechanical computations originate. They all return a reference to this MechanicalParam instance, to ease chaining multiple setup calls. . const ConstMultiVecCoordId & x () const;  ; ConstMultiVecCoordId & x ();  ; const ConstMultiVecDerivId & v () const;  ; ConstMultiVecDerivId & v ();  ; VisualParams & setX (ConstVecCoordId v);  Set the IDs of position vector. More...;  ; VisualParams & setX (ConstMultiVecCoordId v);  ; template<class StateSet > ; VisualParams & setX (const StateSet &g, ConstVecCoordId v);  ; VisualParams & setV (ConstVecDerivId v);  Set the IDs of velocity vector. More...;  ; VisualParams & setV (ConstMultiVecDerivId v);  ; template<class StateSet > ; VisualParams & setV (const StateSet",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_params.html:2967,access,access,2967,api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_params.html,1,['access'],['access']
Security,"rom a matrix of different size. More...;  ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, Real > &m) const noexcept;  ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, Real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, Real &m) const noexcept;  ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line &",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:3489,access,access,3489,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,2,['access'],['access']
Security,"rom a matrix of different size. More...;  ; template<Size L2, Size C2> ; constexpr void getsub (Size L0, Size C0, Mat< L2, C2, real > &m) const noexcept;  ; template<Size C2> ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:3424,access,access,3424,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,2,['access'],['access']
Security,"rom sofa::core::topology::TopologyContainer.; Reimplemented in sofa::component::topology::container::dynamic::TriangleSetTopologyContainer, sofa::component::topology::container::dynamic::TetrahedronSetTopologyContainer, sofa::component::topology::container::dynamic::QuadSetTopologyContainer, and sofa::component::topology::container::dynamic::HexahedronSetTopologyContainer. ◆ reinit(). void sofa::component::topology::container::dynamic::EdgeSetTopologyContainer::reinit ; (; ). overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject.; Reimplemented in sofa::component::topology::container::dynamic::TriangleSetTopologyContainer. ◆ setEdgeTopologyToDirty(). void sofa::component::topology::container::dynamic::EdgeSetTopologyContainer::setEdgeTopologyToDirty ; (; ). protected . Use a specific boolean See alsom_triangleTopologyDirty in order to know if topology Data is dirty or not. Set/Get function access to this boolean . ◆ SOFA_CLASS(). sofa::component::topology::container::dynamic::EdgeSetTopologyContainer::SOFA_CLASS ; (; EdgeSetTopologyContainer ; , . PointSetTopologyContainer ;  . ). ◆ unlinkTopologyHandlerToData(). bool sofa::component::topology::container::dynamic::EdgeSetTopologyContainer::unlinkTopologyHandlerToData ; (; core::topology::TopologyHandler * ; topologyHandler, . sofa::geometry::ElementType ; elementType . ). overridevirtual . \ brief Generic function to link potential data (related to a type of element) with a topologyHandler ; Reimplemented from sofa::core::topology::TopologyContainer.; Reimplemented in sofa::component::topology::container::dynamic::TriangleSetTopologyContainer, sofa::component::topology::container::dynamic::TetrahedronSetTopologyContainer, sofa::component::topology::container::dynamic::QuadSetTopologyContainer, and sofa::component::topology::container::dynamic::HexahedronSetTopologyContainer. Related details. ◆ EdgeSetTopologyModifier. frien",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_topology_container.html:47050,access,access,47050,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_topology_container.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_topology_container.html,1,['access'],['access']
Security,"ron(). int sofa::core::topology::BaseMeshTopology::getEdgeIndexInTetrahedron ; (; const EdgesInTetrahedron & ; t, . EdgeID ; edgeIndex . ); const. virtual . returns the index (either 0, 1 ,2 ,3, 4, 5) of the edge whose global index is edgeIndex. Returns -1 if none ; Reimplemented in sofa::component::topology::container::constant::MeshTopology. ◆ getEdgeIndexInTriangle(). int sofa::core::topology::BaseMeshTopology::getEdgeIndexInTriangle ; (; const EdgesInTriangle & ; t, . EdgeID ; edgeIndex . ); const. virtual . returns the index (either 0, 1 ,2) of the edge whose global index is edgeIndex. Returns -1 if none ; Reimplemented in sofa::component::topology::container::dynamic::TriangleSetTopologyContainer, and sofa::component::topology::container::constant::MeshTopology. ◆ getEdges(). virtual const SeqEdges& sofa::core::topology::BaseMeshTopology::getEdges ; (; ). pure virtual . Complete sequence accessors ; Implemented in sofa::core::topology::TopologyContainer, sofa::component::topology::container::dynamic::EdgeSetTopologyContainer, and sofa::component::topology::container::constant::MeshTopology. ◆ getEdgesAroundVertex(). const BaseMeshTopology::EdgesAroundVertex & sofa::core::topology::BaseMeshTopology::getEdgesAroundVertex ; (; PointID ; i). virtual . Returns the set of edges adjacent to a given vertex. ; Reimplemented in sofa::component::topology::container::constant::MeshTopology. ◆ getEdgesInHexahedron(). const BaseMeshTopology::EdgesInHexahedron & sofa::core::topology::BaseMeshTopology::getEdgesInHexahedron ; (; HexaID ; i). virtual . Returns the set of edges adjacent to a given hexahedron. ; Reimplemented in sofa::component::topology::container::dynamic::HexahedronSetTopologyContainer, and sofa::component::topology::container::constant::MeshTopology. ◆ getEdgesInQuad(). const BaseMeshTopology::EdgesInQuad & sofa::core::topology::BaseMeshTopology::getEdgesInQuad ; (; QuadID ; i). virtual . Returns the set of edges adjacent to a given quad. ; Reimplemented in so",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_mesh_topology.html:34288,access,accessors,34288,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_mesh_topology.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_mesh_topology.html,1,['access'],['accessors']
Security,"rotationalFEMForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). overridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the same large matrix. Each object adds its contribution to a different section of the matrix. That is why, an offset is used to identify where in the matrix the force field must start adding its contribution. ; kFactstiffness factor that needs to be multiplied to each matrix entry. ; offsetStarting index of the submatrix to fill in the global matrix. . Reimplemented from sofa::core::behavior::ForceField< DataTypes >. ◆ applyStiffnessLarge(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >::applyStiffnessLarge ; (; Vector & ; f, . const Vector & ; x, . int ; i = 0, . Index ; a = 0, . Index ; b = 1, . Index ; c = 2, . Index ; d = 3, . SReal ; f",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedral_corotational_f_e_m_force_field.html:35725,access,access,35725,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedral_corotational_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedral_corotational_f_e_m_force_field.html,1,['access'],['access']
Security,"s -1 if none. ; Reimplemented from sofa::core::topology::BaseMeshTopology. ◆ getEdgeIndexInTetrahedron(). int sofa::component::topology::container::constant::MeshTopology::getEdgeIndexInTetrahedron ; (; const EdgesInTetrahedron & ; t, . EdgeID ; edgeIndex . ); const. overridevirtual . Returns the index (either 0, 1 ,2 ,3, 4, 5) of the edge whose global index is edgeIndex. Returns -1 if none. ; Reimplemented from sofa::core::topology::BaseMeshTopology. ◆ getEdgeIndexInTriangle(). int sofa::component::topology::container::constant::MeshTopology::getEdgeIndexInTriangle ; (; const EdgesInTriangle & ; t, . EdgeID ; edgeIndex . ); const. overridevirtual . Returns the index (either 0, 1 ,2) of the edge whose global index is edgeIndex. Returns -1 if none. ; Reimplemented from sofa::core::topology::BaseMeshTopology. ◆ getEdges(). const MeshTopology::SeqEdges & sofa::component::topology::container::constant::MeshTopology::getEdges ; (; ). overridevirtual . Complete sequence accessors ; Implements sofa::core::topology::BaseMeshTopology. ◆ getEdgesAroundVertex(). const MeshTopology::EdgesAroundVertex & sofa::component::topology::container::constant::MeshTopology::getEdgesAroundVertex ; (; PointID ; i). overridevirtual . Returns the set of edges adjacent to a given vertex. ; Reimplemented from sofa::core::topology::BaseMeshTopology. ◆ getEdgesAroundVertexArray(). const vector< MeshTopology::EdgesAroundVertex > & sofa::component::topology::container::constant::MeshTopology::getEdgesAroundVertexArray ; (; ). Returns the TrianglesAroundVertex array (i.e. provide the triangles indices adjacent to each vertex). . ◆ getEdgesInHexahedron(). const MeshTopology::EdgesInHexahedron & sofa::component::topology::container::constant::MeshTopology::getEdgesInHexahedron ; (; HexaID ; i). overridevirtual . Returns the set of edges adjacent to a given hexahedron. ; Reimplemented from sofa::core::topology::BaseMeshTopology. ◆ getEdgesInHexahedronArray(). const vector< MeshTopology::EdgesInHexahedro",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology.html:58039,access,accessors,58039,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology.html,1,['access'],['accessors']
Security,"s >::m_origin. ◆ m_torque. template<typename DataTypes > . sofa::core::objectmodel::RenamedData<Real> sofa::component::mechanicalload::TorsionForceField< DataTypes >::m_torque. ◆ m_u. template<typename DataTypes > . Pos sofa::component::mechanicalload::TorsionForceField< DataTypes >::m_u. protected . normalized axis . Constructor details. ◆ TorsionForceField(). template<typename DataTypes > . sofa::component::mechanicalload::TorsionForceField< DataTypes >::TorsionForceField. ◆ ~TorsionForceField(). template<typename DataTypes > . sofa::component::mechanicalload::TorsionForceField< DataTypes >::~TorsionForceField. virtual . Function details. ◆ addDForce() [1/3]. void sofa::component::mechanicalload::TorsionForceField< Rigid3Types >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). virtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addDForce() [2/3]. void sofa::component::mechanicalload::TorsionForceField< Rigid3Types >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). virtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addDForce() [3/3]. template<typename DataTypes > . void sofa::component::mechanicalload::TorsionForceField< DataTypes >::addDForce ; (; const MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal ad",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field.html:21576,access,access,21576,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field.html,1,['access'],['access']
Security,"s Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::PipelineImpl Class Reference . #include <PipelineImpl.h>. Inheritance diagram for sofa::simulation::PipelineImpl:. [legend]. Public Member Functions; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reset () override;  Reset to initial state. More...;  ; void computeCollisionReset () override;  Remove collision response from last step. More...;  ; void computeCollisionDetection () override;  Detect new collisions. Note that this step must not modify the simulation graph. More...;  ; void computeCollisionResponse () override;  Add collision response in the simulation graph. More...;  ;  Public Member Functions inherited from sofa::core::collision::Pipeline;  SOFA_ABSTRACT_CLASS (Pipeline, sofa::core::objectmodel::BaseObject);  ; void computeCollisions ();  ; const BroadPhaseDetection * getBroadPhaseDetection () const;  Broad phase collision detection method accessor. More...;  ; const NarrowPhaseDetection * getNarrowPhaseDetection () const;  Narrow phase collision detection method accessor. More...;  ; virtual std::set< std::string > getResponseList () const =0;  get the set of response available with the current collision pipeline More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect depend",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:1185,access,accessor,1185,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,1,['access'],['accessor']
Security,"s instantiated on the mapping class to test, and calling function runTest( const InVecCoord& parentInit, const OutVecCoord& childInit, const InVecCoord parentNew, const OutVecCoord expectedChildNew);; This function compares the actual output positions with the expected ones, then automatically tests the methods related to the Jacobian using finite differences.; A small change of the input positions dxIn is randomly chosen and added to the current position. The same is set as velocity.; mapping->apply is called, and the difference dXout between the new output positions and the previous positions is computed; to validate mapping->applyJ, dXin is converted to input velocity vIn and mapping->applyJ is called. dXout and the output velocity vOut must be the same (up to linear approximations errors, thus we apply a very small change of position).; to validate mapping->getJs, we use it to get the Jacobian, then we check that J.vIn = vOut; to validate mapping->applyJT, we apply it after setting the child force fc=vOut, then we check that parent force fp = J^T.fc; to validate mapping->applyDJT, we set the child force, and we compare the parent force before and after a small displacement. The magnitude of the small random changes applied in finite differences is between deltaRange.first*epsilon and deltaRange.second*epsilon, and a failure is issued if the error is greater than errorMax*epsilon, where epsilon=std::numeric_limits<Real>::epsilon() is 1.19209e-07 for float and 2.22045e-16 for double.; AuthorFrançois Faure ; Date2013 . Public Attributes; core::Mapping< In, Out > * mapping;  the mapping to be tested More...;  ; InDOFs::SPtr inDofs;  mapping input More...;  ; OutDOFs::SPtr outDofs;  mapping output More...;  ; simulation::Node::SPtr root;  Root of the scene graph, created by the constructor an re-used in the tests. More...;  ; simulation::Simulation * simulation;  created by the constructor an re-used in the tests More...;  ; std::pair< Real, Real > deltaRange;  The m",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1mapping__test_1_1_mapping__test.html:1860,validat,validate,1860,api/master/sofa/html/structsofa_1_1mapping__test_1_1_mapping__test.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1mapping__test_1_1_mapping__test.html,1,['validat'],['validate']
Security,"s real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr const Line& sofa::type::Mat< L, C, real >::w ; (; ); const. inlineconstexprnoexcept . Special access to fourth line (read-only). . ◆ w() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 4> . constexpr Line& sofa::type::Mat< L, C, real >::w ; (; ). inlineconstexprnoexcept . Special access to fourth line. . ◆ x() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr const Line& sofa::type::Mat< L, C, real >::x ; (; ); const. inlineconstexprnoexcept . Special access to first line (read-only). . ◆ x() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr Line& sofa::type::Mat< L, C, real >::x ; (; ). inlineconstexprnoexcept . Special access to first line. . ◆ y() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr const Line& sofa::type::Mat< L, C, real >::y ; (; ); const. inlineconstexprnoexcept . Special access to second line (read-only). . ◆ y() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr Line& sofa::type::Mat< L, C, real >::y ; (; ). inlineconstexprnoexcept . Special access to second line. . ◆ z() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr const Line& sofa::type::Mat< L, C, real >::z ; (; ); const. inlineconstexprnoexcept . Special access to third line (read-only). . ◆ z() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr Line& sofa::typ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:33762,access,access,33762,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,1,['access'],['access']
Security,"s this Data. ; flagsThe flags for this Data (see DataFlagsEnum). . ◆ BaseData() [3/5]. sofa::core::objectmodel::BaseData::BaseData ; (; const char * ; helpMsg, . DataFlags ; flags = FLAG_DEFAULT . ). ◆ BaseData() [4/5]. sofa::core::objectmodel::BaseData::BaseData ; (; const std::string & ; helpMsg, . bool ; isDisplayed = true, . bool ; isReadOnly = false . ). Constructor. Parameters. helpMsgA help message that describes this Data. ; isDisplayedWhether this Data should be displayed in GUIs. ; isReadOnlyWhether this Data should be modifiable in GUIs. . ◆ BaseData() [5/5]. sofa::core::objectmodel::BaseData::BaseData ; (; const char * ; helpMsg, . bool ; isDisplayed = true, . bool ; isReadOnly = false . ). ◆ ~BaseData(). sofa::core::objectmodel::BaseData::~BaseData ; (; ). override . Destructor. . Function details. ◆ beginEditVoidPtr(). void * sofa::core::objectmodel::BaseData::beginEditVoidPtr ; (; ). Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) ; Get a void pointer to the value held in this Data, to be used with AbstractTypeInfo.; This pointer should be used via the instance of AbstractTypeInfo returned by getValueTypeInfo(). WarningYou must call endEditVoidPtr() once you're done modifying the value. . ◆ canBeLinked(). virtual bool sofa::core::objectmodel::BaseData::canBeLinked ; (; ); const. inlinevirtual . Return whether this Data can be used as a linkPath.; True by default. Useful if you want to customize the use of @ syntax (see ObjectRef and DataObjectRef) . ◆ copyValueFrom(). bool sofa::core::objectmodel::BaseData::copyValueFrom ; (; const BaseData * ; data). Update this Data from the value of its parent. ; Copy the value from another Data.; Note that this is a one-time copy and not a permanent link (otherwise see setParent()) Returnstrue if the copy was successful. . ◆ decodeTypeName(). std::string sofa::core::objectmodel::BaseData::decodeTypeName ; (; const std::type_info & ; t). static . Helper method to decode th",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html:11182,access,access,11182,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_data.html,1,['access'],['access']
Security,"s) . ◆ getTime(). std::string sofa::helper::getTime ; (; ctime_t ; t, . int ; niter = 1 . ). ◆ gettypename(). SOFA_HELPER_API std::string sofa::helper::gettypename ; (; const std::type_info & ; t). Decode the type's name to a more readable form if possible. . ◆ getVal() [1/2]. std::string sofa::helper::getVal ; (; double ; v). ◆ getVal() [2/2]. std::string sofa::helper::getVal ; (; double ; v, . int ; niter . ). ◆ getWriteAccessor(). template<class T > . WriteAccessor<core::objectmodel::Data<T> > sofa::helper::getWriteAccessor ; (; core::objectmodel::Data< T > & ; data). Returns a write only accessor from the provided Data<> Example of use: auto points = getWriteOnlyAccessor(d_points) . ◆ getWriteOnlyAccessor(). template<class T > . WriteOnlyAccessor<core::objectmodel::Data<T> > sofa::helper::getWriteOnlyAccessor ; (; core::objectmodel::Data< T > & ; data). Returns a write only accessor from the provided Data<> WriteOnly accessors are faster than WriteAccessor because as the data is only read this means there is no need to pull the data from the parents Example of use: auto points = getWriteOnlyAccessor(d_points) . ◆ init(). SOFA_HELPER_API void sofa::helper::init ; (; ). Initialize the SofaHelper library. . ◆ irand(). int sofa::helper::irand ; (; ). inline . ◆ isClamped(). template<class T > . bool sofa::helper::isClamped ; (; const T & ; value, . const T & ; low, . const T & ; high . ). inline . ◆ isCleanedUp(). SOFA_HELPER_API bool sofa::helper::isCleanedUp ; (; ). Return true if and only if the SofaHelper library has been cleaned up. . ◆ isEqual(). template<class T > . bool sofa::helper::isEqual ; (; T ; x, . T ; y, . T ; threshold = (std::numeric_limits<T>::epsilon)() . ). inline . number comparison rough floating point comparison (threshold) exact integer comparison . ◆ isInitialized(). SOFA_HELPER_API bool sofa::helper::isInitialized ; (; ). Return true if and only if the SofaHelper library has been initialized. . ◆ isNull(). template<class T > . bool sofa::he",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:27657,access,accessor,27657,api/master/sofa/html/namespacesofa_1_1helper.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html,2,['access'],"['accessor', 'accessors']"
Security,"s::fem::elastic::TriangleFEMForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). overridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the same large matrix. Each object adds its contribution to a different section of the matrix. That is why, an offset is used to identify where in the matrix the force field must start adding its contribution. ; kFactstiffness factor that needs to be multiplied to each matrix entry. ; offsetStarting index of the submatrix to fill in the global matrix. . Reimplemented from sofa::core::behavior::ForceField< DataTypes >. ◆ applyStiffness(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >::applyStiffness ; (; VecCoord & ; f, . Real ; h, . const VecCoord & ; x, . const Real & ; kFactor . ). protectedvirtual . f += Kx where K is the stiffness matrix and x a displa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangle_f_e_m_force_field.html:30942,access,access,30942,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangle_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangle_f_e_m_force_field.html,1,['access'],['access']
Security,"seSparseMatrix< TReal > Class Template Reference . #include <EigenBaseSparseMatrix.h>. Inheritance diagram for sofa::linearalgebra::EigenBaseSparseMatrix< TReal >:. [legend]; Detailed Description; template<class TReal>; class sofa::linearalgebra::EigenBaseSparseMatrix< TReal >; Sparse matrix based on the Eigen library.; An Eigen::SparseMatrix<Real, RowMajor> matrix is used to store the data in Compressed Row Storage mode. This matrix can not be accessed randomly. Two access modes are implemented.; The first access mode consists in inserting entries in increasing row, increasing column order. Method beginRow(Index index) must be called before any entry can be appended to row i. WarningbeginRow must be called even for empty rows Then insertBack(i,j,value) must be used in for increasing j. There is no need to explicitly end a row. Finally, method compress() must be called after the last entry has been inserted. This is the most efficient access mode.; The second access mode is randow access, but you access an auxiliary matrix. Method add is used to add a value at a given location. Method compress() is then used to transfer this data to the compressed matrix. There is no way to replace an entry, you can only add.; Rows, columns, or the full matrix can be set to zero using the clear* methods. . Public Attributes; CompressedMatrix compressedMatrix;  the compressed matrix More...;  . Protected Attributes; SimplicialCholesky cholesky;  used to factorize the matrix and solve systems using Cholesky method, for symmetric positive definite matrices only. More...;  . Public Member Functions;  EigenBaseSparseMatrix (Index nbRow=0, Index nbCol=0);  ;  EigenBaseSparseMatrix (const ThisMatrix &m);  copy constructor More...;  ; void operator= (const ThisMatrix &m);  copy operator More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void setIdentity ();  ; void add (Index row, Index col, doub",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:1295,access,access,1295,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,3,['access'],['access']
Security,"signed int sizeWidget ();  Helper method to give a size. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  ;  Public Member Functions inherited from sofa::gui::qt::SimpleDataWidget< T, graph_data_widget_container< T > >;  SimpleDataWidget (QWidget *parent, const char *name, MyTData *d);  ; virtual bool createWidgets ();  ; virtual void setDataReadOnly (bool readOnly);  This method is called after createWidgets to configure whether the created widgets should be read-only. More...;  ; virtual void readFromData ();  The implementation of this method tells how the widget reads the value of the data. More...;  ; virtual void setReadOnly (bool readOnly);  ; virtual void writeToData ();  ;  Public Member Functions inherited from sofa::gui::qt::TDataWidget< T >;  TDataWidget (QWidget *parent, const char *name, MyTData *d);  ; sofa::core::objectmodel::Data< T > * getData ();  ; const sofa::core::objectmodel::Data< T > * getData () const;  ; virtual void setData (MyTData *d);  ; virtual void setData (MyData *d);  ;  Public Member Functions inherited from sofa::gui::qt::DataWidget;  DataWidget (QWidget *parent, const char *name, MyData *d);  ;  ~DataWidget () override;  ; virtual void setData (MyData *d);  ; const core::objectmodel::BaseData * getBaseData () const;  BaseData pointer accessor function. More...;  ; core::objectmodel::BaseData * getBaseData ();  ; void updateVisibility ();  ; bool isDirty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::gui::qt::SimpleDataWidget< T, graph_data_widget_container< T > >; graph_data_widget_container< T > container;  ;  Protected Attributes inherited from sofa::gui::qt::TDataWidget< T >; MyTData * Tdata;  ;  Protected Attributes inherited from sofa::gui::qt::DataWidget; core::objectmodel::BaseData * b",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_graph_data_widget.html:1799,access,accessor,1799,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_graph_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_graph_data_widget.html,1,['access'],['accessor']
Security,"size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const T r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, T defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr T & x () noexcept;  Special access to first element. More...;  ; constexpr const T & x () const noexcept;  Special const access to first element. More...;  ; constexpr T & y () noexcept;  Special access to second element. More...;  ; constexpr const T & y () const noexcept;  Special const access to second element. More...;  ; constexpr T & z () noexcept;  Special access to third element. More...;  ; constexpr const T & z () const noexcept;  Special const access to third element. More...;  ; constexpr T & w () noexcept;  Special access to fourth element. More...;  ; constexpr const T & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const T r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const T &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (T r) noexcept;  Sets every element to r. More...;  ; constexpr T & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const T & operator() (Size i) const noexcept;  Const access to i-th element. More...;  ; constexpr const T * ptr () const noexcept;  Cas",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html:2406,access,access,2406,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_vector_1_1_block.html,1,['access'],['access']
Security,"sofa::gui::qt::QLinkSimpleEdit Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::gui::qt::QLinkSimpleEdit Class Reference . #include <QDisplayLinkWidget.h>. Inheritance diagram for sofa::gui::qt::QLinkSimpleEdit:. [legend]. Protected Attributes; QSimpleEdit innerWidget_;  ;  Protected Attributes inherited from sofa::gui::qt::LinkWidget; core::objectmodel::BaseLink * baseLink;  ; bool dirty;  ; int counter;  . Public Member Functions;  QLinkSimpleEdit (QWidget *, const char *name, core::objectmodel::BaseLink *);  ; unsigned int numColumnWidget () override;  Helper method for column. More...;  ; unsigned int sizeWidget () override;  Helper method to give a size. More...;  ; bool createWidgets () override;  ;  Public Member Functions inherited from sofa::gui::qt::LinkWidget;  LinkWidget (QWidget *parent, const char *, MyLink *l);  ;  ~LinkWidget () override;  ; virtual void setLink (MyLink *d);  ; const core::objectmodel::BaseLink * getBaseLink () const;  BaseLink pointer accessor function. More...;  ; core::objectmodel::BaseLink * getBaseLink ();  ; void updateVisibility ();  ; bool isDirty ();  . Protected Member Functions; void readFromLink () override;  The implementation of this method tells how the widget reads the value of the link. More...;  ; void writeToLink () override;  . Additional Inherited Members;  Static Public Member Functions inherited from sofa::gui::qt::LinkWidget; static LinkWidget * CreateLinkWidget (const LinkWidget::CreatorArgument &dwarg);  ;  Signals inherited from sofa::gui::qt::LinkWidget; void WidgetDirty (bool);  ; void LinkOwnerDirty (bool);  ; void LinkBeingChanged ();  ;  Public Slots inherited from sofa::gui::qt::LinkWidget; void updateLinkValue ();  ; void updateWidgetValue ();  ; void setWidgetDirty ();  ; void setWidgetDirty (bool b);  . Attribute details. ◆ innerWidget_. Q",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_link_simple_edit.html:1158,access,accessor,1158,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_link_simple_edit.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_link_simple_edit.html,1,['access'],['accessor']
Security,"sofa::gui::qt::TDataWidget< double >; MyTData * Tdata;  ;  Protected Attributes inherited from sofa::gui::qt::DataWidget; core::objectmodel::BaseData * baseData;  ; bool dirty;  ; int counter;  ; bool m_isFilled;  tell if DataWidget has been filled from Data true by default More...;  ; bool m_toFill;  bool to warn action is needed to fill Data, false by default More...;  . Public Member Functions;  QPoissonRatioWidget (QWidget *, const char *, core::objectmodel::Data< double > *);  ; virtual bool createWidgets ();  ; virtual void setDataReadOnly (bool readOnly);  This method is called after createWidgets to configure whether the created widgets should be read-only. More...;  ;  Public Member Functions inherited from sofa::gui::qt::TDataWidget< double >;  TDataWidget (QWidget *parent, const char *name, MyTData *d);  ; sofa::core::objectmodel::Data< double > * getData ();  ; const sofa::core::objectmodel::Data< double > * getData () const;  ; virtual void setData (MyTData *d);  ; virtual void setData (MyData *d);  ;  Public Member Functions inherited from sofa::gui::qt::DataWidget;  DataWidget (QWidget *parent, const char *name, MyData *d);  ;  ~DataWidget () override;  ; virtual void setData (MyData *d);  ; const core::objectmodel::BaseData * getBaseData () const;  BaseData pointer accessor function. More...;  ; core::objectmodel::BaseData * getBaseData ();  ; void updateVisibility ();  ; bool isDirty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  . Protected Member Functions; virtual void readFromData ();  The implementation of this method tells how the widget reads the value of the data. More...;  ; virtual void writeToData ();  . Protected Slots; void changeLineEditValue ();  ; void ch",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_poisson_ratio_widget.html:1825,access,accessor,1825,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_poisson_ratio_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_q_poisson_ratio_widget.html,1,['access'],['accessor']
Security,"sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::at ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ at() [2/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::at ; (; Index ; n); const. inline . Read-only random access, with explicit Index. . ◆ operator()() [1/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator()() [2/2]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator() ; (; Index ; n); const. inline . Read-only random access, with explicit Index. . ◆ operator[]() [1/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Index ; n). inline . Read/write random access, with explicit Index. . ◆ operator[]() [2/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . const_reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Index ; n); const. inline . Read-only random access. . ◆ operator[]() [3/4]. template<class T , class TIndex , bool CheckIndices = false, class MemoryManager = CPUMemoryManager<T>> . reference sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >::operator[] ; (; Size ; n). inlineprotected . Read/write random access with regular index type, protected to force use of explicit Index. . ◆ operator[]() [4/4]. template<class T , class TIndex , b",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:6727,access,access,6727,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,1,['access'],['access']
Security,"space Reference . Classes; class  DynamicSparseGridGeometryAlgorithms;  ; class  DynamicSparseGridTopologyContainer;  ; class  DynamicSparseGridTopologyModifier;  ; class  BasicArrayInterface;  A class used as an interface with an array : Useful to compute geometric information on each edge in an efficient way. More...;  ; class  EdgeSetGeometryAlgorithms;  ; class  EdgeSetTopologyContainer;  ; class  EdgeSetTopologyModifier;  ; class  HexahedronSetGeometryAlgorithms;  ; class  HexahedronSetTopologyContainer;  ; class  HexahedronSetTopologyModifier;  ; class  MultilevelHexahedronSetTopologyContainer;  ; class  MultilevelModification;  ; class  NumericalIntegrationDescriptor;  Cross product for 3-elements vectors. More...;  ; class  PointSetGeometryAlgorithms;  ; class  PointSetTopologyContainer;  ; class  PointSetTopologyModifier;  ; class  QuadSetGeometryAlgorithms;  ; class  QuadSetTopologyContainer;  ; class  QuadSetTopologyModifier;  ; class  TetrahedronSetGeometryAlgorithms;  ; class  TetrahedronSetTopologyContainer;  ; class  TetrahedronSetTopologyModifier;  ; class  TriangleSetGeometryAlgorithms;  ; class  TriangleSetTopologyContainer;  : Object that stores a set of triangles and provides access to each triangle and its edges and vertices More...;  ; class  TriangleSetTopologyModifier;  . Functions; template<class Real > ; Real areaProduct (const sofa::type::Vec< 3, Real > &a, const sofa::type::Vec< 3, Real > &b);  Cross product for 3-elements Vectors. More...;  ; template<class Real > ; Real areaProduct (const type::Vec< 2, Real > &a, const type::Vec< 2, Real > &b);  area for 2-elements sofa::type::vectors. More...;  ; template<class Real > ; Real areaProduct (const type::Vec< 1, Real > &, const type::Vec< 1, Real > &);  area invalid for 1-elements sofa::type::vectors. More...;  ; template<class Real > ; type::Vec< 2, Real > ortho (const type::Vec< 2, Real > &in);  orthogonal of a 2D vector More...;  ; template<class Real > ; type::Vec< 2, Real > cross (const",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html:1455,access,access,1455,api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1component_1_1topology_1_1container_1_1dynamic.html,1,['access'],['access']
Security,"spring::FastTriangularBendingSprings< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< _DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::spring::FastTriangularBendingSprings< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). overridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the same large matrix. Each object adds its contribution to a different section of the matrix. That is why, an offset is used to identify where in the matrix the force field must start adding its contribution. ; kFactstiffness factor that needs to be multiplied to each matrix entry. ; offsetStarting index of the submatrix to fill in the global matrix. . Reimplemented from sofa::core::behavior::ForceField< _DataTypes >. ◆ applyEdgeCreation(). template<class DataTypes > . void sofa::component::solidmechanics::spring::FastTriangularBendingSprings< DataTypes >::applyEdgeCreation ; (; Index ; edgeIndex, . EdgeSpring & ; ei, . const core::topology::BaseMeshTopology::Edge & ; , . const sofa::type::vector< Index > & ; , . const sofa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs.html:24015,access,access,24015,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_fast_triangular_bending_springs.html,1,['access'],['access']
Security,"ss(). template<class DataTypes > . const TriangleFEMForceField< DataTypes >::MaterialStiffness & sofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >::getMaterialStiffness ; (; Index ; elemId). ◆ getMethod(). template<class DataTypes > . int sofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >::getMethod ; (; ). inline . ◆ getPotentialEnergy(). template<class DataTypes > . SReal sofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >::getPotentialEnergy ; (; const core::MechanicalParams * ; , . const DataVecCoord & ;  . ); const. inlineoverridevirtual . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ getRotatedInitialElement(). template<class DataTypes > . const type::fixed_array< typename TriangleFEMForceField< DataTypes >::Coord, 3 > & sofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >::getRotatedInitialElement ; (; Index ; elemId). Public methods to access FEM information per element. Those method should not be used internally as they add check on element id. . ◆ getRotationMatrix(). template<class DataTypes > . const TriangleFEMForceField< DataTypes >::Transformation & sofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >::getRotationMatrix ; (; Index ; elemId). ◆ getStrainDisplacements(). template<class DataTypes > . const TriangleFEMForceField< DataTypes >::StrainDisplacement & sofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >::getStrainDisplacements ; (; Index ; elemId). ◆ init(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::TriangleFEMForceField< DataTypes >::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >. ◆ initLarge(). template<class DataTypes",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangle_f_e_m_force_field.html:35283,access,access,35283,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangle_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangle_f_e_m_force_field.html,1,['access'],['access']
Security,"ssor (BaseMatrix *m=nullptr);  ;  ~SingleMatrixAccessor () override;  ; void setMatrix (BaseMatrix *m);  ; BaseMatrix * getMatrix ();  ; const BaseMatrix * getMatrix () const;  ; Index getGlobalDimension () const override;  ; int getGlobalOffset (const core::behavior::BaseMechanicalState *) const override;  ; MatrixRef getMatrix (const core::behavior::BaseMechanicalState *) const override;  ; InteractionMatrixRef getMatrix (const core::behavior::BaseMechanicalState *mstate1, const core::behavior::BaseMechanicalState *mstate2) const override;  ;  Public Member Functions inherited from sofa::core::behavior::MultiMatrixAccessor; virtual ~MultiMatrixAccessor ();  ; virtual void addMechanicalState (const BaseMechanicalState *mstate);  ; virtual void addMechanicalMapping (BaseMapping *mapping);  ; virtual void addMappedMechanicalState (const BaseMechanicalState *mstate);  . Attribute details. ◆ matRef. MatrixRef sofa::core::behavior::SingleMatrixAccessor::matRef. protected . The accessor to the single matrix. . ◆ matrix. BaseMatrix* sofa::core::behavior::SingleMatrixAccessor::matrix. protected . The single matrix. . Constructor details. ◆ SingleMatrixAccessor(). sofa::core::behavior::SingleMatrixAccessor::SingleMatrixAccessor ; (; BaseMatrix * ; m = nullptr). inline . ◆ ~SingleMatrixAccessor(). sofa::core::behavior::SingleMatrixAccessor::~SingleMatrixAccessor ; (; ). override . Function details. ◆ getGlobalDimension(). Index sofa::core::behavior::SingleMatrixAccessor::getGlobalDimension ; (; ); const. inlineoverridevirtual . Implements sofa::core::behavior::MultiMatrixAccessor. ◆ getGlobalOffset(). int sofa::core::behavior::SingleMatrixAccessor::getGlobalOffset ; (; const core::behavior::BaseMechanicalState * ; ); const. inlineoverridevirtual . Implements sofa::core::behavior::MultiMatrixAccessor. ◆ getMatrix() [1/4]. BaseMatrix* sofa::core::behavior::SingleMatrixAccessor::getMatrix ; (; ). inline . ◆ getMatrix() [2/4]. const BaseMatrix* sofa::core::behavior::SingleMatrixA",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_single_matrix_accessor.html:1637,access,accessor,1637,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_single_matrix_accessor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_single_matrix_accessor.html,1,['access'],['accessor']
Security,"st Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, real defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr real & x () noexcept;  Special access to first element. More...;  ; constexpr const real & x () const noexcept;  Special const access to first element. More...;  ; constexpr real & y () noexcept;  Special access to second element. More...;  ; constexpr const real & y () const noexcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets every element to r. More...;  ; constexpr real & operator() (Size i) noexcept;  Access to i-th element. More...;  ; constexpr const real & operator() (Size",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:2528,access,access,2528,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,1,['access'],['access']
Security,"st;  Multiply the transposed matrix by float vector v and add the result in vector result. More...;  ; virtual void opPMulTV (double *result, const double *v) const;  Multiply the transposed matrix by double vector v and add the result in vector result. More...;  ; virtual void opMulTM (BaseMatrix *result, BaseMatrix *m) const;  Multiply the transposed matrix by matrix m and store the result in matrix result. More...;  ; virtual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the give",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_add_to_matrix_compat_matrix.html:7143,access,access,7143,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_add_to_matrix_compat_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_add_to_matrix_compat_matrix.html,11,['access'],['access']
Security,"st;  Number of threads currently known to Sofa. More...;  ;  ExecParams ();  ; void update ();  Make sure this instance is up-to-date relative to the current thread. More...;  ; ExecParams & setExecMode (ExecMode v);  Request a specific mode of execution. More...;  ; ExecParams & setThreadID (int v);  Specify the index of the current thread. More...;  . Static Public Member Functions; static const MechanicalParams * defaultInstance ();  Get the default MechanicalParams, to be used to provide a default values for method parameters. More...;  ;  Static Public Member Functions inherited from sofa::core::ExecParams; static ExecParams * defaultInstance ();  Get the default ExecParams, to be used to provide a default values for method parameters. More...;  . Setup methods; Called by the OdeSolver from which the mechanical computations originate. They all return a reference to this MechanicalParam instance, to ease chaining multiple setup calls. . bool m_kFactorUsed;  Checks if the stiffness matrix contributions factor has been accessed. More...;  ; MechanicalParams & setDt (SReal v);  Set time step. More...;  ; MechanicalParams & setImplicit (bool v);  Specify if the time integration scheme is implicit. More...;  ; MechanicalParams & setMFactor (SReal v);  Set Mass matrix contributions factor (for implicit schemes) More...;  ; MechanicalParams & setBFactor (SReal v);  Set Damping matrix contributions factor (for implicit schemes) More...;  ; MechanicalParams & setKFactor (SReal v);  Set Stiffness matrix contributions factor (for implicit schemes) More...;  ; MechanicalParams & setSymmetricMatrix (bool b)=delete;  ; MechanicalParams & setSupportOnlySymmetricMatrix (bool b);  Set the flag (for implicit schemes) specifying if solvers are only specialized for symmetric matrices. More...;  ; void setKFactorUsed (bool b) const;  Checks wether or nor kFactor is used in ForceFields. Temporary here for compatibility reasons. More...;  ; bool getKFactorUsed () const;  ; MechanicalP",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html:5160,access,accessed,5160,api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mechanical_params.html,1,['access'],['accessed']
Security,"static_size and size() method) More...;  ; static constexpr Size spatial_dimensions = N;  Compile-time constant specifying the number of dimensions of space (equivalent to total_size here) More...;  . Public Member Functions; constexpr MatSym () noexcept;  ; constexpr MatSym (NoInit) noexcept;  ; template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3>> ; constexpr MatSym (const real &v1, const real &v2, const real &v3, const real &v4, const real &v5, const real &v6);  Constructor from 6 elements. More...;  ; constexpr MatSym (const sofa::Size sizeM, const real &v);  Constructor from an element. More...;  ; template<typename real2 > ;  MatSym (const MatSym< D, real2 > &m);  Constructor from another matrix. More...;  ; template<typename real2 > ; void operator= (const MatSym< D, real2 > &m);  Assignment from another matrix. More...;  ; void clear ();  Sets each element to 0. More...;  ; void fill (real r);  Sets each element to r. More...;  ; real & operator() (const int i, const int j);  Write access to element (i,j). More...;  ; const real & operator() (const int i, const int j) const;  Read-only access to element (i,j). More...;  ; template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3 || TD == 2>> ; Vec< NumberStoredValues, real > getVoigt () const;  convert to Voigt notation (supported only for D == 2 and D == 3) More...;  ; constexpr void identity ();  Set matrix to identity. More...;  ; Mat< D, D, real > SymSymMultiply (const MatSym< D, real > &m) const;  Matrix multiplication operator: product of two symmetric matrices. More...;  ; Mat< D, D, real > operator* (const MatSym< D, real > &m) const;  ; Mat< D, D, real > SymMatMultiply (const Mat< D, D, real > &m) const;  ; Mat< D, D, real > operator* (const Mat< D, D, real > &m) const;  ; Mat< D, D, real > MatSymMultiply (const Mat< D, D, real > &m) const;  ; MatSym< D, real > operator+ (const MatSym< D, real > &m) const;  Matrix addition operator with a symmetric matrix. More...;  ; Mat< D, D, re",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:1997,access,access,1997,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,1,['access'],['access']
Security,"std::string_view getName () const;  ;  ConstraintParams (const sofa::core::ExecParams &p= *sofa::core::execparams::defaultInstance());  Constructor, initializing all VecIds to default values, implicit and energy flags to false. More...;  ; ConstraintParams & setExecParams (const core::ExecParams *params);  ; Flags and parameters getters; ConstraintOrder constOrder () const;  ; ConstraintParams & setOrder (ConstraintOrder o);  ; double smoothFactor () const;  Smooth contribution factor (for smooth constraints resolution) More...;  ; Access to vectors from a given state container (i.e. State or MechanicalState); template<class S > ; const Data< typename S::VecCoord > * readX (const S *state) const;  Read access to the free (unconstrained) position vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readV (const S *state) const;  Read access to the free (unconstrained) velocity vector. More...;  ; template<class S > ; const Data< typename S::MatrixDeriv > * readJ (const S *state) const;  Read access to the constraint jacobian matrix. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readLambda (S *state) const;  Read access to the constraint force vector. More...;  ; template<class S > ; const Data< typename S::VecDeriv > * readDx (S *state) const;  Read access to the constraint corrective motion vector. More...;  ; Setup methods; Called by the OdeSolver from which the mechanical computations originate. They all return a reference to this MechanicalParam instance, to ease chaining multiple setup calls. . ConstraintParams & setSmoothFactor (double v);  Set smooth contribution factor (for smooth constraints resolution) More...;  ; const ConstMultiVecCoordId & x () const;  Returns ids of the position vectors. More...;  ; ConstMultiVecCoordId & x ();  Returns ids of the position vectors. More...;  ; const ConstMultiVecDerivId & v () const;  Returns ids of the velocity vectors. More...;  ; ConstMultiVecDerivId & v ();  Returns id",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html:2447,access,access,2447,api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html,1,['access'],['access']
Security,"stexpr Vec (const sofa::type::fixed_array< real, N > &p) noexcept;  ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; constexpr void set (const real r1) noexcept;  Specific set function for 1-element vectors. More...;  ; constexpr void set (const ArgsT... r) noexcept;  ; constexpr void set (const Vec< N2, real2 > &v, real defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; constexpr real & x () noexcept;  Special access to first element. More...;  ; constexpr const real & x () const noexcept;  Special const access to first element. More...;  ; constexpr real & y () noexcept;  Special access to second element. More...;  ; constexpr const real & y () const noexcept;  Special const access to second element. More...;  ; constexpr real & z () noexcept;  Special access to third element. More...;  ; constexpr const real & z () const noexcept;  Special const access to third element. More...;  ; constexpr real & w () noexcept;  Special access to fourth element. More...;  ; constexpr const real & w () const noexcept;  Special const access to fourth element. More...;  ; constexpr void operator= (const real r1) noexcept;  Specific Assignment operator for 1-element vectors. More...;  ; constexpr void operator= (const real2 *p) noexcept;  Assignment operator from an array of values. More...;  ; constexpr void operator= (const Vec< M, real2 > &v) noexcept;  Assignment from a vector with different dimensions. More...;  ; constexpr void assign (const real &value) noexcept;  ; constexpr void clear () noexcept;  Sets every element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets every element to r. More...;  ; constexpr real & operator() (Size i)",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html:2449,access,access,2449,api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec_no_init.html,1,['access'],['access']
Security,"str, Data< unsigned int > &size);  ; void resize (const unsigned int size);  ;  Public Member Functions inherited from sofa::type::vector< LinkType * >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const LinkType * &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< LinkType *, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< LinkType * > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< LinkType *, Alloc > &&v);  Move constructor. More...;  ;  vector (typename vector< LinkType * >::const_iterator first, typename vector< LinkType * >::const_iterator last);  Constructor. More...;  ; vector & operator= (const std::vector< LinkType *, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< LinkType *, Alloc > &&v);  Move assignment operator. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. More...;  ; std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  Specialization for writing vectors of unsigned char. More...;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; void fill (const LinkType * &value);  Sets every element to 'value'. More",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_vector_links.html:2253,access,access,2253,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_vector_links.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_vector_links.html,1,['access'],['access']
Security,"straint correction vectors. . ◆ dx() [2/2]. const MultiVecDerivId& sofa::core::ConstraintParams::dx ; (; ); const. inline . Returns ids of the constraint correction vectors. . ◆ getName(). std::string_view sofa::core::ConstraintParams::getName ; (; ); const. inline . ◆ j() [1/2]. MultiMatrixDerivId& sofa::core::ConstraintParams::j ; (; ). inline . Returns ids of the constraint jacobian matrices. . ◆ j() [2/2]. const MultiMatrixDerivId& sofa::core::ConstraintParams::j ; (; ); const. inline . Returns ids of the constraint jacobian matrices. . ◆ lambda() [1/2]. MultiVecDerivId& sofa::core::ConstraintParams::lambda ; (; ). inline . Returns ids of the constraint lambda vectors. . ◆ lambda() [2/2]. const MultiVecDerivId& sofa::core::ConstraintParams::lambda ; (; ); const. inline . Returns ids of the constraint lambda vectors. . ◆ readDx(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::ConstraintParams::readDx ; (; S * ; state); const. inline . Read access to the constraint corrective motion vector. . ◆ readJ(). template<class S > . const Data<typename S::MatrixDeriv>* sofa::core::ConstraintParams::readJ ; (; const S * ; state); const. inline . Read access to the constraint jacobian matrix. . ◆ readLambda(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::ConstraintParams::readLambda ; (; S * ; state); const. inline . Read access to the constraint force vector. . ◆ readV(). template<class S > . const Data<typename S::VecDeriv>* sofa::core::ConstraintParams::readV ; (; const S * ; state); const. inline . Read access to the free (unconstrained) velocity vector. . ◆ readX(). template<class S > . const Data<typename S::VecCoord>* sofa::core::ConstraintParams::readX ; (; const S * ; state); const. inline . Read access to the free (unconstrained) position vector. . ◆ setDx() [1/3]. template<class StateSet > . ConstraintParams& sofa::core::ConstraintParams::setDx ; (; const StateSet & ; g, . MultiVecDerivId ; dx . ). inline . ◆ setDx() [2/3",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html:9057,access,access,9057,api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_constraint_params.html,1,['access'],['access']
Security,"straintJacobian ();  ; static MyVecId mappingJacobian ();  ; static std::string getName (const MyVecId &v);  ; static std::string getGroup (const MyVecId &v);  . Friends; std::ostream & operator<< (std::ostream &out, const TVecId &v);  . Additional Inherited Members;  Public Attributes inherited from sofa::core::BaseVecId; VecType type;  ; unsigned int index;  ;  Protected Member Functions inherited from sofa::core::BaseVecId;  BaseVecId (VecType t, unsigned int i);  . Constructor details. ◆ TVecId() [1/3]. template<VecAccess vaccess> . sofa::core::TVecId< V_ALL, vaccess >::TVecId ; (; ). inline . ◆ TVecId() [2/3]. template<VecAccess vaccess> . sofa::core::TVecId< V_ALL, vaccess >::TVecId ; (; VecType ; t, . unsigned int ; i . ). inline . ◆ TVecId() [3/3]. template<VecAccess vaccess> . template<VecType vtype2, VecAccess vaccess2> . sofa::core::TVecId< V_ALL, vaccess >::TVecId ; (; const TVecId< vtype2, vaccess2 > & ; v). inline . Create a generic VecId from a specific or generic one, with the constraint that the access must be compatible (i.e. cannot create a write-access VecId from a read-only VecId. . Function details. ◆ getGroup(). template<VecAccess vaccess> . std::string sofa::core::TVecId< V_ALL, vaccess >::getGroup ; (; ); const. inline . ◆ getName(). template<VecAccess vaccess> . std::string sofa::core::TVecId< V_ALL, vaccess >::getName ; (; ); const. inline . ◆ isNull(). template<VecAccess vaccess> . bool sofa::core::TVecId< V_ALL, vaccess >::isNull ; (; ); const. inline . ◆ null(). template<VecAccess vaccess> . static TVecId sofa::core::TVecId< V_ALL, vaccess >::null ; (; ). inlinestatic . ◆ operator!=(). template<VecAccess vaccess> . template<VecType vtype2, VecAccess vaccess2> . bool sofa::core::TVecId< V_ALL, vaccess >::operator!= ; (; const TVecId< vtype2, vaccess2 > & ; v); const. inline . ◆ operator=(). template<VecAccess vaccess> . template<VecType vtype2, VecAccess vaccess2> . TVecId<V_ALL, vaccess>& sofa::core::TVecId< V_ALL, vaccess >::operator= ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_t_vec_id_3_01_v___a_l_l_00_01vaccess_01_4.html:3502,access,access,3502,api/master/sofa/html/classsofa_1_1core_1_1_t_vec_id_3_01_v___a_l_l_00_01vaccess_01_4.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_t_vec_id_3_01_v___a_l_l_00_01vaccess_01_4.html,1,['access'],['access']
Security,"sub (Size L0, Size C0, const Mat< L2, C2, Real > &m) noexcept;  ; constexpr void setsub (Size L0, Size C0, const Vec< L2, Real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (Real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const Real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const Real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr Real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; constexpr const Line & x () const noexcept;  Special access to first line (read-only). More...;  ; constexpr Line & y () noexcept;  Special access to second line. More...;  ; constexpr const Line & y () const noexcept;  Special access to second line (read-only). More...;  ; constexpr Line & z () noexcept;  Special access to third line. More...;  ; constexpr const Line & z () const noexcept;  Special access to third line",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html:3802,access,access,3802,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_block_full_matrix_1_1_block.html,2,['access'],['access']
Security,"t () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; std::set< std::string > getResponseList () const override;  get the set of response available with the current collision pipeline More...;  ;  Public Member Functions inherited from sofa::simulation::PipelineImpl; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reset () override;  Reset to initial state. More...;  ; void computeCollisionReset () override;  Remove collision response from last step. More...;  ; void computeCollisionDetection () override;  Detect new collisions. Note that this step must not modify the simulation graph. More...;  ; void computeCollisionResponse () override;  Add collision response in the simulation graph. More...;  ;  Public Member Functions inherited from sofa::core::collision::Pipeline;  SOFA_ABSTRACT_CLASS (Pipeline, sofa::core::objectmodel::BaseObject);  ; void computeCollisions ();  ; const BroadPhaseDetection * getBroadPhaseDetection () const;  Broad phase collision detection method accessor. More...;  ; const NarrowPhaseDetection * getNarrowPhaseDetection () const;  Narrow phase collision detection method accessor. More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base *",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_collision_pipeline.html:2926,access,accessor,2926,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_collision_pipeline.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_collision_pipeline.html,1,['access'],['accessor']
Security,"t *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::UpdateContextVisitor; Node * startingNode;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , cla",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html:3328,access,access,3328,api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html,2,['access'],['access']
Security,"t *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_e",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor.html:3173,access,access,3173,api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor.html,5,['access'],['access']
Security,"t *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html:3750,access,access,3750,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_get_down_objects_visitor.html,10,['access'],['access']
Security,"t(). sofa::core::objectmodel::BaseContext::~BaseContext ; (; ). overrideprotected . Function details. ◆ addObject(). virtual bool sofa::core::objectmodel::BaseContext::addObject ; (; sptr< BaseObject > ; , . TypeOfInsertion ; = TypeOfInsertion::AtEnd . ). inlinevirtual . Add an object, or return false if not supported. . ◆ canChangeSleepingState(). bool sofa::core::objectmodel::BaseContext::canChangeSleepingState ; (; ); const. virtual . Whether the context can change its sleeping state or not. ; The Context can not change its sleeping state by default. ; Reimplemented in sofa::core::objectmodel::Context. ◆ executeVisitor(). void sofa::core::objectmodel::BaseContext::executeVisitor ; (; simulation::Visitor * ; , . bool ; precomputedOrder = false . ). virtual . apply an action ; Reimplemented in sofa::simulation::Node. ◆ get() [1/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const std::string & ; path); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [2/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [3/15]. template<class T > . T* sofa::core::objectmodel::BaseContext::get ; (; const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [4/15]. template<class T , class Container > . void sofa::core::objectmodel::BaseContext::get ; (; Container * ; list, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [5/15]. template<class T , class Containe",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:18992,access,access,18992,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['access'],['access']
Security,"t::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_gamma. IN: Bulk modulus (resistance to uniform compression) . ◆ d_initialSurfaceArea. template<class DataTypes > . Data< Real > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_initialSurfaceArea. OUT: Initial surface area, as computed from the surface rest position. . ◆ d_initialVolume. template<class DataTypes > . Data< Real > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_initialVolume. OUT: Initial volume, as computed from the surface rest position. . ◆ d_injectedVolume. template<class DataTypes > . Data< Real > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_injectedVolume. IN: Injected (or extracted) volume since the start of the simulation. . ◆ d_maxInjectionRate. template<class DataTypes > . Data< Real > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_maxInjectionRate. IN: Maximum injection rate (volume per second) . ◆ d_p0. template<class DataTypes > . Data< Real > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_p0. IN: Rest pressure when V = V0. . ◆ d_pressureTriangles. template<class DataTypes > . Data< SeqTriangles > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_pressureTriangles. OUT: list of triangles where a pressure is applied (mesh triangles + tessellated quads) . ◆ d_surfaceAreaAfterTC. template<class DataTypes > . Data< Real > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_surfaceAreaAfterTC. OUT: Surface area after a topology change. . ◆ d_v0. template<class DataTypes > . Data< Real > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::d_v0. OUT: Rest volume (as computed from initialVolume + injectedVolume) . ◆ d_volumeAfterTC. template<class DataTypes > . Data< Real > sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html:25956,inject,injection,25956,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html,1,['inject'],['injection']
Security,"tObject() [3/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. inlineoverridevirtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getObject() [4/4]. core::objectmodel::BaseObject * sofa::simulation::Node::getObject ; (; const std::string & ; name); const. Find an object given its name. . ◆ getObjects() [1/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridepure virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObjects() [2/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . SearchDirection ; dir = SearchUp . ); const. inlineoverridevirtual . Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getOdeSolver(). core::behavior::OdeSolver * sofa::simulation::Node::getOdeSolver ; (; ); const. overridevirtual . Reimplemented from sofa::core::objectmodel::BaseNode. ◆ getRootContext(). BaseContext* sofa::simulation::Node::getRootContext ; (; ); const. inlineoverridevirtual . Get the root context of the graph. ; Reimplemented from so",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:43223,access,access,43223,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,1,['access'],['access']
Security,"tSym< D, real > & ; m). inline . Invert matrix m. . ◆ Mat2Sym(). template<sofa::Size D, class real = SReal> . static void sofa::type::MatSym< D, real >::Mat2Sym ; (; const Mat< D, D, real > & ; M, . MatSym< D, real > & ; W . ). inlinestatic . convert matrix to sym . ◆ MatSymMultiply(). template<sofa::Size D, class real = SReal> . Mat<D, D, real> sofa::type::MatSym< D, real >::MatSymMultiply ; (; const Mat< D, D, real > & ; m); const. inline . ◆ operator!=(). template<sofa::Size D, class real = SReal> . bool sofa::type::MatSym< D, real >::operator!= ; (; const MatSym< D, real > & ; b); const. inline . ◆ operator()() [1/2]. template<sofa::Size D, class real = SReal> . real& sofa::type::MatSym< D, real >::operator() ; (; const int ; i, . const int ; j . ). inline . Write access to element (i,j). . ◆ operator()() [2/2]. template<sofa::Size D, class real = SReal> . const real& sofa::type::MatSym< D, real >::operator() ; (; const int ; i, . const int ; j . ); const. inline . Read-only access to element (i,j). . ◆ operator*() [1/4]. template<sofa::Size D, class real = SReal> . Coord sofa::type::MatSym< D, real >::operator* ; (; const Coord & ; v); const. inline . Multiplication operator Matrix * Vector. . ◆ operator*() [2/4]. template<sofa::Size D, class real = SReal> . Mat<D,D,real> sofa::type::MatSym< D, real >::operator* ; (; const Mat< D, D, real > & ; m); const. inline . ◆ operator*() [3/4]. template<sofa::Size D, class real = SReal> . Mat<D, D, real> sofa::type::MatSym< D, real >::operator* ; (; const MatSym< D, real > & ; m); const. inline . ◆ operator*() [4/4]. template<sofa::Size D, class real = SReal> . MatSym<D, real> sofa::type::MatSym< D, real >::operator* ; (; real ; f); const. inline . Scalar multiplication operator. . ◆ operator*=(). template<sofa::Size D, class real = SReal> . void sofa::type::MatSym< D, real >::operator*= ; (; real ; r). inline . Scalar multiplication assignment operator. . ◆ operator+() [1/2]. template<sofa::Size D, class real = SReal> . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:17974,access,access,17974,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,1,['access'],['access']
Security,"ta &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Friends; template<class DataTypes > ; class HexahedronSetGeometryAlgorithms;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::topology::TopologyModifier; TopologyContainer * m_topologyContainer;  Contains the actual topology data and give access to it (nature of these data heavily depends on the kind of topology). More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_modifier.html:27965,access,access,27965,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_modifier.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_modifier.html,1,['access'],['access']
Security,"taTypes > *s) const;  . Static Public Member Functions; static TMultiVecId< vtype, vaccess > null ();  . Protected Member Functions; IdMap & writeIdMap ();  . Friends; template<VecType vtype2, VecAccess vaccess2> ; class TMultiVecId;  ; std::ostream & operator<< (std::ostream &out, const TMultiVecId< vtype, vaccess > &v);  . Attribute details. ◆ defaultId. template<VecType vtype, VecAccess vaccess> . MyVecId sofa::core::TMultiVecId< vtype, vaccess >::defaultId. protected . Constructor details. ◆ TMultiVecId() [1/5]. template<VecType vtype, VecAccess vaccess> . sofa::core::TMultiVecId< vtype, vaccess >::TMultiVecId ; (; ). default . ◆ TMultiVecId() [2/5]. template<VecType vtype, VecAccess vaccess> . template<VecAccess vaccess2> . sofa::core::TMultiVecId< vtype, vaccess >::TMultiVecId ; (; const TVecId< vtype, vaccess2 > & ; v). inline . Copy from another VecId, possibly with another type of access, with the constraint that the access must be compatible (i.e. cannot create a write-access VecId from a read-only VecId. . ◆ TMultiVecId() [3/5]. template<VecType vtype, VecAccess vaccess> . sofa::core::TMultiVecId< vtype, vaccess >::TMultiVecId ; (; const TMultiVecId< vtype, vaccess > & ; mv). inline . ◆ TMultiVecId() [4/5]. template<VecType vtype, VecAccess vaccess> . template<VecAccess vaccess2> . sofa::core::TMultiVecId< vtype, vaccess >::TMultiVecId ; (; const TMultiVecId< vtype, vaccess2 > & ; mv). inline . ◆ TMultiVecId() [5/5]. template<VecType vtype, VecAccess vaccess> . template<VecAccess vaccess2> . sofa::core::TMultiVecId< vtype, vaccess >::TMultiVecId ; (; const TMultiVecId< V_ALL, vaccess2 > & ; mv). inlineexplicit . Function details. ◆ assign(). template<VecType vtype, VecAccess vaccess> . void sofa::core::TMultiVecId< vtype, vaccess >::assign ; (; const MyVecId & ; id). inline . ◆ getDefaultId(). template<VecType vtype, VecAccess vaccess> . const MyVecId& sofa::core::TMultiVecId< vtype, vaccess >::getDefaultId ; (; ); const. inline . ◆ getId(). template<VecTy",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_t_multi_vec_id.html:3378,access,access,3378,api/master/sofa/html/classsofa_1_1core_1_1_t_multi_vec_id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_t_multi_vec_id.html,1,['access'],['access']
Security,"tate the current state. More...;  ; SOFA_COMPONENT_STATECONTAINER_API void addFromBaseVectorSameSize (core::VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset);  Perform dest[i][j] += src[offset + i][j] 0<= i < src_entries 0<= j < 3 (for 3D objects) 0 <= j < 2 (for 2D objects) More...;  ; SOFA_COMPONENT_STATECONTAINER_API void addFromBaseVectorDifferentSize (core::VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset);  Perform dest[ offset + i ][j] += src[i][j] 0<= i < src_entries 0<= j < 3 (for 3D objects) 0 <= j < 2 (for 2D objects) More...;  ; SOFA_COMPONENT_STATECONTAINER_API void draw (const core::visual::VisualParams *vparams);  Render internal data of this object, for debugging purposes. More...;  ; New vectors access API based on VecId; Data< VecCoord > * write (core::VecCoordId v) override;  ; const Data< VecCoord > * read (core::ConstVecCoordId v) const override;  ; Data< VecDeriv > * write (core::VecDerivId v) override;  ; const Data< VecDeriv > * read (core::ConstVecDerivId v) const override;  ; Data< MatrixDeriv > * write (core::MatrixDerivId v) override;  ; const Data< MatrixDeriv > * read (core::ConstMatrixDerivId v) const override;  ; Initial transformations application methods.; void applyTranslation (const SReal dx, const SReal dy, const SReal dz) override;  Apply translation vector to the position. More...;  ; void applyRotation (const SReal rx, const SReal ry, const SReal rz) override;  Rotation using Euler Angles in degree. More...;  ; void applyRotation (const type::Quat< SReal > q) override;  Rotate the current state. More...;  ; void applyScale (const SReal sx, const SReal sy, const SReal sz) override;  Scale the current state. More...;  ; Base Matrices and Vectors Interface; void copyToBaseVector (linearalgebra::BaseVector *dest, core::ConstVecId src, unsigned int &offset) override;  ; void copyFromBaseVector (core::VecId dest, const linearalgebra::BaseVector *src, unsigned int &offset) override;  ; void",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:11455,access,access,11455,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['access'],['access']
Security,"taticconstexpr . ◆ sum(). template<sofa::Size N, typename ValueType > . constexpr ValueType sofa::type::Vec< N, ValueType >::sum ; (; ); const. inlineconstexprnoexcept . sum of all elements of the vector . ◆ w() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::w ; (; ); const. inlineconstexprnoexcept . Special const access to fourth element. . ◆ w() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::w ; (; ). inlineconstexprnoexcept . Special access to fourth element. . ◆ x() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::x ; (; ); const. inlineconstexprnoexcept . Special const access to first element. . ◆ x() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::x ; (; ). inlineconstexprnoexcept . Special access to first element. . ◆ y() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N, ValueType >::y ; (; ); const. inlineconstexprnoexcept . Special const access to second element. . ◆ y() [2/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> . constexpr ValueType& sofa::type::Vec< N, ValueType >::y ; (; ). inlineconstexprnoexcept . Special access to second element. . ◆ z() [1/2]. template<sofa::Size N, typename ValueType > . template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> . constexpr const ValueType& sofa::type::Vec< N,",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html:29159,access,access,29159,api/master/sofa/html/classsofa_1_1type_1_1_vec.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_vec.html,1,['access'],['access']
Security,"td::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const void * &value, const char *helpMsg=nullptr, bool isDisplayed=true, bool isReadOnly=false);  ;  Data (const void * &value, const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~Data () override;  Destructor. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseData;  BaseData (const BaseInitData &init);  ;  BaseData (const std::string &helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const char *helpMsg, DataFlags flags=FLAG_DEFAULT);  ;  BaseData (const std::string &helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  BaseData (const char *helpMsg, bool isDisplayed=true, bool isReadOnly=false);  ;  ~BaseData () override;  Destructor. More...;  ; const void * getValueVoidPtr () const;  Get current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void * beginEditVoidPtr ();  Begin edit current value as a void pointer (use getValueTypeInfo to find how to access it) More...;  ; void endEditVoidPtr ();  Must be called after beginEditVoidPtr(), after you are finished modifying this Data. More...;  ; const std::string & getHelp () const;  Get a help message that describes this Data. More...;  ; void setHelp (const std::string &val);  Set the help message. More...;  ; const std::string & getGroup () const;  Get group. More...;  ; void setGroup (const std::string &val);  Set group. More...;  ; const std::string & getWidget () const;  Get widget. More...;  ; void setWidget (const char *val);  Set widget. More...;  ; virtual std::string getLinkPath () const;  If we use the Data as a link and not as value directly. More...;  ; virtual bool canBeLinked () const;  ; Base * getOwner () const;  Return the Base component owning this Data. More...;  ; void setOwner (Base *o);  Set the owner of this Data. More...;  ; BaseData * getData () const;  This method is needed by DDGNode. More...;  ; const std::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html:4355,access,access,4355,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_empty_data.html,2,['access'],['access']
Security,"te<Size N2, class real2 > ; constexpr void set (const Vec< N2, real2 > &v, ValueType defaultvalue=0) noexcept;  Specific set from a different size vector (given default value and ignored outside entries) More...;  ; template<Size NN = N, typename std::enable_if<(NN >1), int >::type = 0> ; constexpr Vec (const Vec< N-1, ValueType > &v, ValueType r1) noexcept;  Constructor from an N-1 elements vector and an additional value (added at the end). More...;  ; constexpr Vec (const sofa::type::fixed_array< ValueType, N > &p) noexcept;  ; template<Size N2, typename real2 > ; constexpr Vec (const Vec< N2, real2 > &v) noexcept;  Constructor from a different size vector (null default value and ignoring outside entries) More...;  ; template<typename real2 > ; constexpr Vec (const Vec< N, real2 > &p) noexcept;  ; template<typename real2 > ; constexpr Vec (const real2 *p) noexcept;  Constructor from an array of values. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr ValueType & x () noexcept;  Special access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr ValueType & y () noexcept;  Special access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexpr ValueType & z () noexcept;  Special access to third element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=4), int >::type = 0> ; constexpr ValueType & w () noexcept;  Special access to fourth element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=1), int >::type = 0> ; constexpr const ValueType & x () const noexcept;  Special const access to first element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=2), int >::type = 0> ; constexpr const ValueType & y () const noexcept;  Special const access to second element. More...;  ; template<Size NN = N, typename std::enable_if<(NN >=3), int >::type = 0> ; constexp",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:6758,access,access,6758,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,2,['access'],['access']
Security,"tedVolume. protected . ◆ reset_injectedVolume. template<class DataTypes > . Real sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::reset_injectedVolume. protected . Constructor details. ◆ TaitSurfacePressureForceField(). template<class DataTypes > . sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::TaitSurfacePressureForceField. protected . ◆ ~TaitSurfacePressureForceField(). template<class DataTypes > . sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::~TaitSurfacePressureForceField. protectedvirtual . Function details. ◆ addDForce(). template<class DataTypes > . void sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce(). template<class DataTypes > . void sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::mechanicalload::TaitSurfacePressureForceField< DataTypes >::addKToMatrix ; (; const core::MechanicalParams * ; mparam",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html:32368,access,access,32368,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_tait_surface_pressure_force_field.html,1,['access'],['access']
Security,"text::get ; (; sptr< T > & ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [9/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [14/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [15/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . Se",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:21880,access,access,21880,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['access'],['access']
Security,"they can use private data. More...;  . Get information about the content and structure of this matrix (diagonal, band, sparse, full, block size, ...); enum  ElementType { ELEMENT_UNKNOWN = 0; , ELEMENT_FLOAT; , ELEMENT_INT; };  ; enum  MatrixCategory { ;   MATRIX_UNKNOWN = 0; , MATRIX_IDENTITY; , MATRIX_DIAGONAL; , MATRIX_BAND; , ;   MATRIX_SPARSE; , MATRIX_FULL. };  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  . Virtual iterator classes and methods; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:7560,access,access,7560,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,1,['access'],['access']
Security,"ti-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndResetForceVisitor Class Reference . #include <MechanicalPropagateOnlyPositionAndResetForceVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPropagateOnlyPositionAndResetForceVisitor:. [legend]; Detailed Description; Same as MechanicalPropagateOnlyPositionVisitor followed by MechanicalResetForceVisitor; Note that this visitor only propagate through the mappings, and does not apply projective constraints as was previously done by MechanicalPropagatePositionAndResetForceVisitor. Use MechanicalProjectPositionVisitor before this visitor if projection is needed. . Public Attributes; sofa::core::MultiVecCoordId x;  ; sofa::core::MultiVecDerivId f;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateOnlyPositionAndResetForceVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecCoordId x, sofa::core::MultiVecDerivId f);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; const char * getClassName () const override;  ; bool ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html:1182,access,access,1182,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_only_position_and_reset_force_visitor.html,1,['access'],['access']
Security,"tic std::list< GUICreator > guiCreators;  ; static std::vector< std::string > guiOptions;  ; static BaseGUI * currentGUI = nullptr;  ; static std::string valid_guiname = """";  ; static ArgumentParser * currentArgumentParser = nullptr;  . Static Public Member Functions; static int Init (const char *argv0, const char *name="""");  ; static int RegisterGUI (const char *name, CreateGUIFn *creator, RegisterGUIParameters *parameters=nullptr, int priority=0);  Set parameter for a gui creation and Store in the guiCreators list. More...;  ; static const char * GetValidGUIName ();  ; static const std::string & GetCurrentGUIName ();  ; static std::vector< std::string > ListSupportedGUI ();  ; static std::string ListSupportedGUI (char separator);  ; static void RegisterParameters (ArgumentParser *parser);  ; static int createGUI (sofa::simulation::NodeSPtr groot=nullptr, const char *filename=nullptr);  ; static void closeGUI ();  ; static BaseGUI * getGUI ();  ; Static methods for direct access to GUI; static int MainLoop (sofa::simulation::NodeSPtr groot=nullptr, const char *filename=nullptr);  ; static void Redraw ();  ; static sofa::simulation::Node * CurrentSimulation ();  ; static void SetScene (sofa::simulation::NodeSPtr groot, const char *filename=nullptr, bool temporaryFile=false);  ; static void SetDimension (int width, int height);  ; static void SetFullScreen ();  ; static void CenterWindow ();  ; static void SaveScreenshot (const char *filename);  . Static Protected Member Functions; static GUICreator * GetGUICreator (const char *name=nullptr);  Comparison between guiname passed as parameter and all guiname store in guiCreators list. More...;  . Attribute details. ◆ currentArgumentParser. ArgumentParser * sofa::gui::common::GUIManager::currentArgumentParser = nullptr. staticprotected . ◆ currentGUI. BaseGUI * sofa::gui::common::GUIManager::currentGUI = nullptr. staticprotected . ◆ guiCreators. std::list< GUIManager::GUICreator > sofa::gui::common::GUIManager::guiCreato",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_g_u_i_manager.html:1394,access,access,1394,api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_g_u_i_manager.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1common_1_1_g_u_i_manager.html,1,['access'],['access']
Security,"time constant specifying the number of dimensions of space (equivalent to total_size here) More...;  . Public Member Functions; constexpr MatSym () noexcept;  ; constexpr MatSym (NoInit) noexcept;  ; template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3>> ; constexpr MatSym (const real &v1, const real &v2, const real &v3, const real &v4, const real &v5, const real &v6);  Constructor from 6 elements. More...;  ; constexpr MatSym (const sofa::Size sizeM, const real &v);  Constructor from an element. More...;  ; template<typename real2 > ;  MatSym (const MatSym< D, real2 > &m);  Constructor from another matrix. More...;  ; template<typename real2 > ; void operator= (const MatSym< D, real2 > &m);  Assignment from another matrix. More...;  ; void clear ();  Sets each element to 0. More...;  ; void fill (real r);  Sets each element to r. More...;  ; real & operator() (const int i, const int j);  Write access to element (i,j). More...;  ; const real & operator() (const int i, const int j) const;  Read-only access to element (i,j). More...;  ; template<sofa::Size TD = D, typename = std::enable_if_t<TD == 3 || TD == 2>> ; Vec< NumberStoredValues, real > getVoigt () const;  convert to Voigt notation (supported only for D == 2 and D == 3) More...;  ; constexpr void identity ();  Set matrix to identity. More...;  ; Mat< D, D, real > SymSymMultiply (const MatSym< D, real > &m) const;  Matrix multiplication operator: product of two symmetric matrices. More...;  ; Mat< D, D, real > operator* (const MatSym< D, real > &m) const;  ; Mat< D, D, real > SymMatMultiply (const Mat< D, D, real > &m) const;  ; Mat< D, D, real > operator* (const Mat< D, D, real > &m) const;  ; Mat< D, D, real > MatSymMultiply (const Mat< D, D, real > &m) const;  ; MatSym< D, real > operator+ (const MatSym< D, real > &m) const;  Matrix addition operator with a symmetric matrix. More...;  ; Mat< D, D, real > operator+ (const Mat< D, D, real > &m) const;  Matrix addition operator with a non-symmetric ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html:2103,access,access,2103,api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat_sym.html,1,['access'],['access']
Security,"tion. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::core Namespace Reference . Namespaces;  behavior;  For BaseMatrix. ;  ;  collision;  ;  constraintparams;  ;  execparams;  ;  loader;  ;  matrixaccumulator;  ;  mechanicalparams;  ;  objectmodel;  ;  topology;  ;  visual;  . Classes; class  State;  Component storing position and velocity vectors. More...;  ; struct  AccumulationVecId;  Proxy class for accessing elements within an imaginary container that represents the cumulative sum of multiple other containers. Each individual container is represented by a VecId. The class maintains a list of VecIdDeriv objects, which defines the containers contributing to the final cumulative sum. This class provides a simplified interface for accessing elements within the cumulative container. It allows retrieving specific elements using the overloaded subscript operator (operator[]). When accessing an element at a particular index, the class delegates the retrieval to the appropriate container represented by the associated VecIdDeriv. In addition to element retrieval, the class supports dynamic management of the contributing containers. It offers functions to add and remove VecId objects from the list of containers that contribute to the cumulative sum. More...;  ; class  MappingMatrixAccumulator;  ; class  ListMappingMatrixAccumulator;  ; class  GeometricStiffnessMatrix;  ; class  BaseMapping;  ; class  BaseMatrixAccumulatorComponent;  ; struct  get_base_object_strong;  ; class  BaseState;  Component storing position and velocity vectors. More...;  ; class  BehaviorModel;  Abstract Interface of components defining the behavior of a simulated object. More...;  ; class  CategoryLibrary;  An Generic Category of the Sofa Library. More...;  ; class  BaseCollisionElementIterator;  Base class for reference to an collision element defined by its index More...;  ; class  TCollisionElementIterator;  Reference to an collision element defined by its ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:1042,access,accessing,1042,api/master/sofa/html/namespacesofa_1_1core.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html,1,['access'],['accessing']
Security,tion?. /how-to-extract-reaction-force-for-certain-nodes; ; SOFA - Topic: [SOLVED] How to extract reaction force for certain nodes. /how-to-extract-the-surface-of-a-volumeyric-mesh; ; SOFA - Topic: [SOLVED] How to extract the surface of a volumeyric mesh. /how-to-figure-out-the-available-options-of-xml-tags; ; SOFA - Topic: [SOLVED] How to figure out the available options of xml tags?. /how-to-fix-the-orientation-of-the-instrument-dof-in-geomagic-plugin; ; SOFA - Topic: [SOLVED] How to fix the orientation of the instrument dof？. /how-to-generate-msh-file; ; SOFA - Topic: [SOLVED] How to generate .msh file?. /how-to-generate-one-specific-deformation-in-two-different-mesh-resolutions; ; SOFA - Topic: [SOLVED] How to generate one specific deformation in two different mesh resolutions?. /how-to-genuinely-increase-the-friction-in-a-frictioncontact-scene; ; SOFA - Topic: How to genuinely increase the friction in a frictionContact scene?. /how-to-get-access-to-the-indices-in-a-map; ; SOFA - Topic: [SOLVED] How to get access to the indices in a Map?. /how-to-get-indices-in-fixedconstraint; ; SOFA - Topic: [SOLVED] How to get indices in FixedConstraint. /how-to-get-strain-output-in-sofa; ; SOFA - Topic: How to get Strain output in SOFA. /how-to-get-stress-strain-on-surface; ; SOFA - Topic: How to get Stress strain on surface. /how-to-get-the-3d-position-of-mouse-interaction-in-sofapython; ; SOFA - Topic: How to get the 3d position of mouse interaction in SofaPython. /how-to-get-the-forcefeedback; ; SOFA - Topic: [SOLVED] How to get the ForceFeedback?. /how-to-give-multi-physical-properties-to-one-tetrahedron-object; ; SOFA - Topic: [SOLVED] How to give multi-physical properties to one tetrahedron object. /how-to-give-offset-distance-of-collision-in-geomagic-haptic-simulation; ; SOFA - Topic: [SOLVED] How to give offset distance of collision in geomagic haptic simulation. /how-to-implement-mechanical-resistance-in-a-simple-model; ; SOFA - Topic: [SOLVED] How to implement mechan,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:322794,access,access-to-the-indices-in-a-map,322794,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,2,['access'],"['access', 'access-to-the-indices-in-a-map']"
Security,"tionalForceField< DataTypes >::addForce ; (; const sofa::core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). overridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the same large matrix. Each object adds its contribution to a different section of the matrix. That is why, an offset is used to identify where in the matrix the force field must start adding its contribution. ; kFactstiffness factor that needs to be multiplied to each matrix entry. ; offsetStarting index of the submatrix to fill in the global matrix. . Reimplemented from sofa::core::behavior::ForceField< DataTypes >. ◆ buildDampingMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::elastic::FastTetrahedralCorotationalForceField< DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; matrix). overridevirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ buildStiffn",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_fast_tetrahedral_corotational_force_field.html:30025,access,access,30025,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_fast_tetrahedral_corotational_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_fast_tetrahedral_corotational_force_field.html,1,['access'],['access']
Security,"tions |; List of all members . sofa::linearalgebra::EigenBaseSparseMatrix< TReal > Class Template Reference . #include <EigenBaseSparseMatrix.h>. Inheritance diagram for sofa::linearalgebra::EigenBaseSparseMatrix< TReal >:. [legend]; Detailed Description; template<class TReal>; class sofa::linearalgebra::EigenBaseSparseMatrix< TReal >; Sparse matrix based on the Eigen library.; An Eigen::SparseMatrix<Real, RowMajor> matrix is used to store the data in Compressed Row Storage mode. This matrix can not be accessed randomly. Two access modes are implemented.; The first access mode consists in inserting entries in increasing row, increasing column order. Method beginRow(Index index) must be called before any entry can be appended to row i. WarningbeginRow must be called even for empty rows Then insertBack(i,j,value) must be used in for increasing j. There is no need to explicitly end a row. Finally, method compress() must be called after the last entry has been inserted. This is the most efficient access mode.; The second access mode is randow access, but you access an auxiliary matrix. Method add is used to add a value at a given location. Method compress() is then used to transfer this data to the compressed matrix. There is no way to replace an entry, you can only add.; Rows, columns, or the full matrix can be set to zero using the clear* methods. . Public Attributes; CompressedMatrix compressedMatrix;  the compressed matrix More...;  . Protected Attributes; SimplicialCholesky cholesky;  used to factorize the matrix and solve systems using Cholesky method, for symmetric positive definite matrices only. More...;  . Public Member Functions;  EigenBaseSparseMatrix (Index nbRow=0, Index nbCol=0);  ;  EigenBaseSparseMatrix (const ThisMatrix &m);  copy constructor More...;  ; void operator= (const ThisMatrix &m);  copy operator More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; v",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:1270,access,access,1270,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,1,['access'],['access']
Security,"to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addDForce() [2/3]. void sofa::component::mechanicalload::TorsionForceField< Rigid3Types >::addDForce ; (; const core::MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). virtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addDForce() [3/3]. template<typename DataTypes > . void sofa::component::mechanicalload::TorsionForceField< DataTypes >::addDForce ; (; const MechanicalParams * ; mparams, . DataVecDeriv & ; df, . const DataVecDeriv & ; dx . ). overridevirtual . Internal addDForce Overloaded function, usually called from the generic addDForce version. This addDForce version directly gives access to df and dx vectors through its parameters. Parameters. mparams; dfOutput vector to fill, result of ; dxInput vector used to compute . Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce() [1/3]. void sofa::component::mechanicalload::TorsionForceField< Rigid3Types >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). virtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addForce() [2/3]. void sofa::component::mechanicalload::TorsionForceField< Rigid3Types >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). virt",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field.html:22700,access,access,22700,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_torsion_force_field.html,1,['access'],['access']
Security,"trahedralFEMForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). overridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the same large matrix. Each object adds its contribution to a different section of the matrix. That is why, an offset is used to identify where in the matrix the force field must start adding its contribution. ; kFactstiffness factor that needs to be multiplied to each matrix entry. ; offsetStarting index of the submatrix to fill in the global matrix. . Reimplemented from sofa::core::behavior::ForceField< DataTypes >. ◆ buildDampingMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::StandardTetrahedralFEMForceField< DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; ). finalvirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ buildStiffnessMatrix",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_standard_tetrahedral_f_e_m_force_field.html:26276,access,access,26276,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_standard_tetrahedral_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_standard_tetrahedral_f_e_m_force_field.html,1,['access'],['access']
Security,"true by default More...;  ; bool m_toFill;  bool to warn action is needed to fill Data, false by default More...;  . Public Member Functions;  SimpleDataWidget (QWidget *parent, const char *name, MyTData *d);  ; virtual bool createWidgets ();  ; virtual void setDataReadOnly (bool readOnly);  This method is called after createWidgets to configure whether the created widgets should be read-only. More...;  ; virtual void readFromData ();  The implementation of this method tells how the widget reads the value of the data. More...;  ; virtual void setReadOnly (bool readOnly);  ; virtual void writeToData ();  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  ;  Public Member Functions inherited from sofa::gui::qt::TDataWidget< T >;  TDataWidget (QWidget *parent, const char *name, MyTData *d);  ; sofa::core::objectmodel::Data< T > * getData ();  ; const sofa::core::objectmodel::Data< T > * getData () const;  ; virtual void setData (MyTData *d);  ; virtual void setData (MyData *d);  ;  Public Member Functions inherited from sofa::gui::qt::DataWidget;  DataWidget (QWidget *parent, const char *name, MyData *d);  ;  ~DataWidget () override;  ; virtual void setData (MyData *d);  ; const core::objectmodel::BaseData * getBaseData () const;  BaseData pointer accessor function. More...;  ; core::objectmodel::BaseData * getBaseData ();  ; void updateVisibility ();  ; bool isDirty ();  ; bool isFilled ();  return if DataWidget as been filled More...;  ; void setFilled (bool value);  method to warn if Data has not been filled at constructor. More...;  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  . Additional Inherited Members;  Static Public Member Functions inherited from sofa::gui::qt::TDataWidget< T >; template<class RealObject > ; static RealObject * create (RealObject *, CreatorArgument &arg);  ;  Static Public Member Functions inherited from sofa::gui::qt::DataWidget; template<class T > ; static T * create (T *, con",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_simple_data_widget.html:2409,access,accessor,2409,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_simple_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_simple_data_widget.html,1,['access'],['accessor']
Security,"tual void opAddM (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the matrix to the m matrix and strore the result in m. More...;  ; virtual void opAddMT (linearalgebra::BaseMatrix *m, double fact) const;  Subtract the transposed matrix to the m matrix and strore the result in m. More...;  ; virtual ElementType getElementType () const;  ; virtual std::size_t getElementSize () const;  ; virtual MatrixCategory getCategory () const;  ; virtual Index getBlockRows () const;  ; virtual Index getBlockCols () const;  ; virtual Index bRowSize () const;  ; virtual Index bColSize () const;  ; virtual Index getBandWidth () const;  ; bool isDiagonal () const;  ; bool isBlockDiagonal () const;  ; bool isBand () const;  ; bool isSparse () const;  ; virtual BlockConstAccessor blocGet (Index i, Index j) const;  Get read access to a block. More...;  ; virtual BlockAccessor blocGetW (Index i, Index j);  Get write access to a block. More...;  ; virtual BlockAccessor blocCreate (Index i, Index j);  Get write access to a block, possibly creating it. More...;  ; template<class T > ; const T * blocElements (Index i, Index j, T *buffer) const;  Shortcut for blocGet(i,j).elements(buffer) More...;  ; template<class T > ; void blocSet (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).set(buffer) More...;  ; template<class T > ; void blocAdd (Index i, Index j, const T *buffer);  Shortcut for blocCreate(i,j).add(buffer) More...;  ; virtual ColBlockConstIterator bRowBegin (Index ib) const;  Get the iterator corresponding to the beginning of the given row of blocks. More...;  ; virtual ColBlockConstIterator bRowEnd (Index ib) const;  Get the iterator corresponding to the end of the given row of blocks. More...;  ; virtual std::pair< ColBlockConstIterator, ColBlockConstIterator > bRowRange (Index ib) const;  Get the iterators corresponding to the beginning and end of the given row of blocks. More...;  ; virtual RowBlockConstIterator bRowsBegin () const;  Get the iterator",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_add_to_matrix_compat_matrix.html:7331,access,access,7331,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_add_to_matrix_compat_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_add_to_matrix_compat_matrix.html,12,['access'],['access']
Security,"tual void release ();  Delete this vector from memory once the contact pair is no longer active. More...;  ;  Public Member Functions inherited from sofa::type::vector< DetectionOutput >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const DetectionOutput &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< DetectionOutput, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< DetectionOutput > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< DetectionOutput, Alloc > &&v);  Move constructor. More...;  ;  vector (typename vector< DetectionOutput >::const_iterator first, typename vector< DetectionOutput >::const_iterator last);  Constructor. More...;  ; vector & operator= (const std::vector< DetectionOutput, Alloc > &x);  Copy operator. More...;  ; vector & operator= (std::vector< DetectionOutput, Alloc > &&v);  Move assignment operator. More...;  ; reference operator[] (Size n);  Read/write random access. More...;  ; const_reference operator[] (Size n) const;  Read-only random access. More...;  ; std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  Specialization for writing vectors of unsigned char. More...;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; SOFA_TYPE_API std::ostream & write (std::ostream &os) const;  ; std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in);  Specialization for reading vectors of int and unsigned int using ""A-B"" notation for all integers between A and B. More...;  ; SOFA_TYPE_API std::istream & read (std::istream &in);  ; SOFA_TYPE_API std::istream & read (std::istream &in); ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_t_detection_output_vector.html:2383,access,access,2383,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_t_detection_output_vector.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_t_detection_output_vector.html,1,['access'],['access']
Security,"tyFEMForceField< DataTypes >::addForce ; (; const core::MechanicalParams * ; , . DataVecDeriv & ; f, . const DataVecCoord & ; x, . const DataVecDeriv & ; v . ). overridevirtual . Given the current position and velocity states, update the current force vector by computing and adding the forces associated with this ForceField.; If the ForceField can be represented as a matrix, this method computes ; This is the method that should be implemented by the component ; Implements sofa::core::behavior::ForceField< DataTypes >. ◆ addKToMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::addKToMatrix ; (; sofa::linearalgebra::BaseMatrix * ; matrix, . SReal ; kFact, . unsigned int & ; offset . ). overridevirtual . Internal addKToMatrix Overloaded function, usually called from the generic addKToMatrix version. This addKToMatrix version directly gives access to the matrix to fill, the stiffness factor and the offset used to identify where the force field must add its contributions in the matrix. Parameters. matrixthe global stiffness matrix in which the force field adds its contribution. The matrix is global, i.e. different objects can add their contribution into the same large matrix. Each object adds its contribution to a different section of the matrix. That is why, an offset is used to identify where in the matrix the force field must start adding its contribution. ; kFactstiffness factor that needs to be multiplied to each matrix entry. ; offsetStarting index of the submatrix to fill in the global matrix. . Reimplemented from sofa::core::behavior::ForceField< DataTypes >. ◆ buildDampingMatrix(). template<class DataTypes > . void sofa::component::solidmechanics::fem::hyperelastic::TetrahedronHyperelasticityFEMForceField< DataTypes >::buildDampingMatrix ; (; core::behavior::DampingMatrix * ; ). finalvirtual . Reimplemented from sofa::core::behavior::BaseForceField. ◆ buildStiffnes",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_f_e_m_force_field.html:26812,access,access,26812,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_f_e_m_force_field.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1_tetrahedron_hyperelasticity_f_e_m_force_field.html,1,['access'],['access']
Security,"ub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> ; constexpr Line & y () noexcept;  Special access to second line.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:3620,access,access,3620,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,2,['access'],['access']
Security,"ulation using SOFA. /abdominal-organs-in-sofa; ; SOFA - Topic: Abdominal Organs in SOFA. /about-explanation-of-components; ; SOFA - Topic: [SOLVED] about explanation of components. /about-stick-and-stickcontactconstraint; ; SOFA - Topic: about stick and stickcontactconstraint. /about-the-suturing-simulation; ; SOFA - Topic: [SOLVED] About the suture simulation. /about-the-unit; ; SOFA - Topic: [SOLVED] About the unit. /access-constraint-forces-from-a-different-class; ; SOFA - Topic: [SOLVED] Access constraint forces from a different class. /accessing-and-mofiying-array-values-with-context-managers-in-sofapython3; ; SOFA - Topic: Accessing and mofiying array values with Context Managers in SofaPython3. /accessing-deformations-force-states-etc-using-python; ; SOFA - Topic: [SOLVED] Accessing deformations, force states, etc using Python. /access-object-data-on-the-fly-sofapython3; ; SOFA - Topic: Access object data on the fly, sofaPython3. /access-stress-in-triangularfemforcefield; ; SOFA - Topic: Access stress in TriangularFEMForceField. /activating-twoway-option-in-attachconstraint-component-or-not; ; SOFA - Topic: Activating twoWay option in attachConstraint component or not. /actuating-multiple-components-with-cableconstraint; ; SOFA - Topic: Actuating multiple components with CableConstraint. /add_executable-cannot-create-target-another-target-with-the-same-namea-exist; ; SOFA - Topic: add_executable cannot create target, another target with the same namea exist. /add-curve-paramater-to-an-instrument; ; SOFA - Topic: [SOLVED] Add curve paramater to an instrument. /adding-captions-and-instructions-in-sofa-animation-exercises; . /feed; ; [SOLVED] Adding captions and instructions in sofa animation exercises – SOFA. SOFA - Topic: [SOLVED] Adding captions and instructions in sofa animation exercises. /adding-constraint-in-python-controller; ; SOFA - Topic: Adding Constraint in Python Controller. /adding-contact-surface-meshes-to-mapped-system; ; SOFA - Topic: Adding Con",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:253238,access,access-stress-in-triangularfemforcefield,253238,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['access'],['access-stress-in-triangularfemforcefield']
Security,umentation; ; SOFA - Topic: New API documentation. /new-approaches-to-catheter-navigation-for-interventional-radiology-simulation; ; SOFA - Topic: New approaches to catheter navigation for interventional radiology simulation. /new-build-system; . /page; . /4; ; SOFA - Topic: New build system. SOFA - Topic: New build system. /new-forum-format; . /feed; ; New forum format! – SOFA. SOFA - Topic: New forum format!. /new-mouse-interaction; . /feed; ; [SOLVED] New Mouse Interaction – SOFA. /page; . /13; ; SOFA - Topic: [SOLVED] New Mouse Interaction. /4; ; SOFA - Topic: [SOLVED] New Mouse Interaction. SOFA - Topic: [SOLVED] New Mouse Interaction. /newomnidriver-gnode-cannot-access-protected-member; . /embed; ; SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. /page; . /3; ; SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. /4; ; SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. SOFA - Topic: [SOLVED] NewOmniDriver: GNode cannot access protected member. /new-online-support-sessions; ; SOFA - Topic: New: online support sessions!. /new-release-v16-08; . /feed; ; New Release v16.08! – SOFA. SOFA - Topic: New Release v16.08!. /new-release-v16-12; ; SOFA - Topic: New Release v16.12!. /new-release-v17-12; ; SOFA - Topic: New Release v17.12!. /new-release-v18-06; ; SOFA - Topic: New release v18.06!. /new-sofa-technical-member-amc; ; SOFA - Topic: New SOFA technical member: AMC!. /new-to-sofa-here-are-my-thoughts; ; SOFA - Topic: New to sofa. Here are my thoughts. /new-training-session-scheduled; ; SOFA - Topic: New training session scheduled!. /new-tutorials-for-sofa; ; SOFA - Topic: New tutorials for SOFA. /new-version-of-blender-sofa; . /page; . /4; ; SOFA - Topic: New version of Blender SOFA. SOFA - Topic: New version of Blender SOFA. /new-video-tutorial-howto-configure-and-install-on-linux; ; SOFA - Topic: New video tutorial: HowTo configure and install on Linux. /new-website; . /page; . /10; ; SOFA,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:354542,access,access,354542,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['access'],['access']
Security,"umn = C, typename = std::enable_if_t<NbLine == 1 && NbColumn == 1>> . constexpr sofa::type::Mat< L, C, real >::operator real ; (; ); const. inlineconstexpr . ◆ operator!=(). template<sofa::Size L, sofa::Size C, class real > . constexpr bool sofa::type::Mat< L, C, real >::operator!= ; (; const Mat< L, C, real > & ; b); const. inlineconstexprnoexcept . ◆ operator()() [1/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr const LineNoInit& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i); const. inlineconstexprnoexcept . Read-only access to line i. . ◆ operator()() [2/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr LineNoInit& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i). inlineconstexprnoexcept . Write access to line i. . ◆ operator()() [3/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr const real& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i, . Size ; j . ); const. inlineconstexprnoexcept . Read-only access to element (i,j). . ◆ operator()() [4/4]. template<sofa::Size L, sofa::Size C, class real > . constexpr real& sofa::type::Mat< L, C, real >::operator() ; (; Size ; i, . Size ; j . ). inlineconstexprnoexcept . Write access to element (i,j). . ◆ operator*() [1/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Col sofa::type::Mat< L, C, real >::operator* ; (; const Line & ; v); const. inlineconstexprnoexcept . Multiplication operator Matrix * Line. . ◆ operator*() [2/2]. template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::type::Mat< L, C, real >::operator* ; (; real ; f); const. inlineconstexprnoexcept . Scalar multiplication operator. . ◆ operator*=(). template<sofa::Size L, sofa::Size C, class real > . constexpr void sofa::type::Mat< L, C, real >::operator*= ; (; real ; r). inlineconstexprnoexcept . Scalar multiplication assignment operator. . ◆ operator+(). template<sofa::Size L, sofa::Size C, class real > . constexpr Mat<L,C,real> sofa::ty",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:24154,access,access,24154,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,1,['access'],['access']
Security,"verride;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; Vec6 getMomentum (const core::MechanicalParams *, const DataVecCoord &vx, const DataVecDeriv &vv) const;  ; template<class DataTypes , class GeometricalTypes > ; void applyEdgeMassCreation (Index, MassType &EdgeMass, const core::topology::BaseMeshTopology::Edge &, const sofa::type::vector< Index > &, const sofa::type::vector< SReal > &);  ; Read and write access functions in mass information; virtual const sofa::type::vector< MassType > & getVertexMass ();  ; virtual const sofa::type::vector< MassType > & getMassDensity ();  ; virtual const Real & getTotalMass ();  ; virtual void setVertexMass (sofa::type::vector< MassType > vertexMass);  ; virtual void setMassDensity (sofa::type::vector< MassType > massDensity);  ; virtual void setMassDensity (MassType massDensityValue);  ; virtual void setTotalMass (MassType totalMass);  ; virtual void addMassDensity (const sofa::type::vector< Index > &indices, const sofa::type::vector< sofa::type::vector< Index > > &ancestors, const sofa::type::vector< sofa::type::vector< SReal > > &coefs);  ; Check and standard initialization functions from mass information; virtual bool checkVertexMass ();  ; virtual void initFromVertexMass ();  ; virtual bool checkMassDensity ();  ; virtual void initFromMassDensity ();  ; virtual bool checkTotalMass ();  ; virtual void checkTotalMassInit ();  ; virtual void initFromTotalMass ();  ; bool checkEdgeMass ();  ; void initFromVertexAndEdgeMass ();  ;  Public Member Functions inherited from sofa::core::behavior::Mass< DataTypes >;  SOFA_CLASS2 (SOFA_TEMPLATE(Mass, DataTypes), SOFA_TEMPLATE(ForceField, DataTypes), BaseMass);  ; void initGnuplot (const std::string path) override;  initialization to export kinetic and potential energy to gnuplot files format More...;  ; void exportGnuplot (const MechanicalParams *mparams, SReal time) override;  export kinetic and potential energy s",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html:9841,access,access,9841,api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mass_1_1_mesh_matrix_mass.html,1,['access'],['access']
Security,"wSparseMatrixMechanical< TBlock, TPolicy >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, and sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >. ◆ blocAdd(). template<class T > . void sofa::linearalgebra::BaseMatrix::blocAdd ; (; Index ; i, . Index ; j, . const T * ; buffer . ). inline . Shortcut for blocCreate(i,j).add(buffer) . ◆ blocCreate(). virtual BlockAccessor sofa::linearalgebra::BaseMatrix::blocCreate ; (; Index ; i, . Index ; j . ). inlinevirtual . Get write access to a block, possibly creating it. . ◆ blocElements(). template<class T > . const T* sofa::linearalgebra::BaseMatrix::blocElements ; (; Index ; i, . Index ; j, . T * ; buffer . ); const. inline . Shortcut for blocGet(i,j).elements(buffer) . ◆ blocGet(). virtual BlockConstAccessor sofa::linearalgebra::BaseMatrix::blocGet ; (; Index ; i, . Index ; j . ); const. inlinevirtual . Get read access to a block. . ◆ blocGetW(). virtual BlockAccessor sofa::linearalgebra::BaseMatrix::blocGetW ; (; Index ; i, . Index ; j . ). inlinevirtual . Get write access to a block. . ◆ blocSet(). template<class T > . void sofa::linearalgebra::BaseMatrix::blocSet ; (; Index ; i, . Index ; j, . const T * ; buffer . ). inline . Shortcut for blocCreate(i,j).set(buffer) . ◆ bRowBegin(). virtual ColBlockConstIterator sofa::linearalgebra::BaseMatrix::bRowBegin ; (; Index ; ib); const. inlinevirtual . Get the iterator corresponding to the beginning of the given row of blocks. ; Reimplemented in sofa::linearalgebra::CompressedRowSparseMatrixMechanical< sofa::type::Mat< NL, NC, MReal > >, sofa::linearalgebra::CompressedRowSparseMatrixMechanical< MReal >, and sofa::linearalgebra::CompressedRowSparseMatrixMechanical< Real >. ◆ bRowEnd(). virtual ColBlockConstIterator sofa::linearalgebra::BaseMatrix::bRowEnd ; (; Index ; ib); const. inlinevirtual . Get the iterator corresponding to the end of the given row",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:29568,access,access,29568,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,1,['access'],['access']
Security,"whether or not the data is up-to-date with its parent values while DataTracker::hasChanged(myData) checks whether the data has been modified since it has last been checked . Protected Attributes; DataTrackers m_dataTrackers;  . Public Member Functions; void trackData (const objectmodel::BaseData &data);  ; bool hasChanged (const objectmodel::BaseData &data) const;  ; bool hasChanged () const;  Did one of the tracked data change since the last call to clean()? More...;  ; void clean (const objectmodel::BaseData &data);  ; void clean ();  comparison point is cleaned for all tracked Data More...;  ; const std::map< const objectmodel::BaseData *, int > & getMapTrackedData ();  Provide the map of tracked Data. More...;  . Attribute details. ◆ m_dataTrackers. DataTrackers sofa::core::DataTracker::m_dataTrackers. protected . Function details. ◆ clean() [1/2]. void sofa::core::DataTracker::clean ; (; ). comparison point is cleaned for all tracked Data . ◆ clean() [2/2]. void sofa::core::DataTracker::clean ; (; const objectmodel::BaseData & ; data). comparison point is cleaned for the specified tracked Data Warningdata must be a tracked Data ; See alsotrackData . ◆ getMapTrackedData(). const std::map<const objectmodel::BaseData*,int>& sofa::core::DataTracker::getMapTrackedData ; (; ). inline . Provide the map of tracked Data. . ◆ hasChanged() [1/2]. bool sofa::core::DataTracker::hasChanged ; (; ); const. Did one of the tracked data change since the last call to clean()? . ◆ hasChanged() [2/2]. bool sofa::core::DataTracker::hasChanged ; (; const objectmodel::BaseData & ; data); const. Did the data change since its last access? Warningdata must be a tracked Data ; See alsotrackData . ◆ trackData(). void sofa::core::DataTracker::trackData ; (; const objectmodel::BaseData & ; data). select a Data to track to be able to check if it was dirtied since the previous clean. See alsoisTrackedDataDirty . sofacoreDataTracker; Generated on Mon Nov 11 2024 03:14:09 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1_data_tracker.html:2336,access,access,2336,api/master/sofa/html/structsofa_1_1core_1_1_data_tracker.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1_data_tracker.html,1,['access'],['access']
Security,"wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:5729,access,access,5729,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,4,['access'],['access']
Security,"xt::get ; (; sptr< T > & ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [10/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [11/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; sptr< T > & ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ get() [12/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const std::string & ; path . ); const. inline . Generic object access template wrapper, given a path from the current context. . ◆ get() [13/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const Tag & ; tag, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. . ◆ get() [14/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . const TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. . ◆ get() [15/15]. template<class T > . void sofa::core::objectmodel::BaseContext::get ; (; T *& ; ptr, . SearchDirection ; dir = SearchUp . ); const. inline . Generic object access template wrapper, possibly searching up or down from the current context. . ◆ getAnimate(). bool sofa::core::objectmodel::BaseContext::getAnimate ; (; ); const. virtual",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:22130,access,access,22130,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,1,['access'],['access']
Security,"y API See alsoTriangleSetTopologyContainer::initTopology() . ◆ isTetrahedronTopologyDirty(). const bool& sofa::component::topology::container::dynamic::TetrahedronSetTopologyContainer::isTetrahedronTopologyDirty ; (; ). inlineprotected . ◆ linkTopologyHandlerToData(). bool sofa::component::topology::container::dynamic::TetrahedronSetTopologyContainer::linkTopologyHandlerToData ; (; core::topology::TopologyHandler * ; topologyHandler, . sofa::geometry::ElementType ; elementType . ). overridevirtual . \ brief Generic function to link potential data (related to a type of element) with a topologyHandler ; Reimplemented from sofa::component::topology::container::dynamic::EdgeSetTopologyContainer. ◆ setTetrahedronTopologyToDirty(). void sofa::component::topology::container::dynamic::TetrahedronSetTopologyContainer::setTetrahedronTopologyToDirty ; (; ). protected . Use a specific boolean See alsom_tetrahedronTopologyDirty in order to know if topology Data is dirty or not. Set/Get function access to this boolean . ◆ SOFA_CLASS(). sofa::component::topology::container::dynamic::TetrahedronSetTopologyContainer::SOFA_CLASS ; (; TetrahedronSetTopologyContainer ; , . TriangleSetTopologyContainer ;  . ). ◆ unlinkTopologyHandlerToData(). bool sofa::component::topology::container::dynamic::TetrahedronSetTopologyContainer::unlinkTopologyHandlerToData ; (; core::topology::TopologyHandler * ; topologyHandler, . sofa::geometry::ElementType ; elementType . ). overridevirtual . \ brief Generic function to link potential data (related to a type of element) with a topologyHandler ; Reimplemented from sofa::component::topology::container::dynamic::EdgeSetTopologyContainer. Related details. ◆ operator<<. std::ostream& operator<< ; (; std::ostream & ; out, . const TetrahedronSetTopologyContainer & ; t . ). friend . ◆ operator>>. std::istream& operator>> ; (; std::istream & ; in, . TetrahedronSetTopologyContainer & ; t . ). friend . ◆ TetrahedronSetTopologyModifier. friend class TetrahedronSetT",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_container.html:68914,access,access,68914,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_container.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_container.html,1,['access'],['access']
Security,"ype of the data structure used to represent the vectors of the linear system: the right-hand side and the solution. In the general cases, this type derives from sofa::linearalgebra::BaseVector. . Classes; struct  Dirichlet;  ; struct  IndependentContributors;  . Public Attributes; Data< bool > d_assembleStiffness;  If true, the stiffness is added to the global matrix. More...;  ; Data< bool > d_assembleMass;  If true, the mass is added to the global matrix. More...;  ; Data< bool > d_assembleDamping;  If true, the damping is added to the global matrix. More...;  ; Data< bool > d_assembleGeometricStiffness;  If true, the geometric stiffness of mappings is added to the global matrix. More...;  ; Data< bool > d_applyProjectiveConstraints;  If true, projective constraints are applied on the global matrix. More...;  ; Data< bool > d_applyMappedComponents;  If true, mapped components contribute to the global matrix. More...;  ; Data< bool > d_checkIndices;  If true, indices are verified before being added in to the global matrix, favoring security over speed. More...;  ; Data< bool > d_parallelAssemblyIndependentMatrices;  If true, independent matrices (global matrix vs mapped matrices) are assembled in parallel. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_linear_system.html:2288,secur,security,2288,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_linear_system.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_linear_system.html,1,['secur'],['security']
Security,"ype::Mat< L, C, real >::w ; (; ). inlineconstexprnoexcept . Special access to fourth line. . ◆ x() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr const Line& sofa::type::Mat< L, C, real >::x ; (; ); const. inlineconstexprnoexcept . Special access to first line (read-only). . ◆ x() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> . constexpr Line& sofa::type::Mat< L, C, real >::x ; (; ). inlineconstexprnoexcept . Special access to first line. . ◆ y() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr const Line& sofa::type::Mat< L, C, real >::y ; (; ); const. inlineconstexprnoexcept . Special access to second line (read-only). . ◆ y() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 2> . constexpr Line& sofa::type::Mat< L, C, real >::y ; (; ). inlineconstexprnoexcept . Special access to second line. . ◆ z() [1/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr const Line& sofa::type::Mat< L, C, real >::z ; (; ); const. inlineconstexprnoexcept . Special access to third line (read-only). . ◆ z() [2/2]. template<sofa::Size L, sofa::Size C, class real > . template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 3> . constexpr Line& sofa::type::Mat< L, C, real >::z ; (; ). inlineconstexprnoexcept . Special access to third line. . Related details. ◆ operator*. template<sofa::Size L, sofa::Size C, class real > . constexpr friend Mat<L,C,real> operator* ; (; real ; r, . const Mat< L, C, real > & ; m . ). friend . Scalar matrix multiplication operator. . sofatypeMat; Generated on Mon Nov 11 2024 03:36:09 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:34298,access,access,34298,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,3,['access'],['access']
Security,"ypes > . SReal sofa::component::statecontainer::MechanicalObject< DataTypes >::getPX ; (; sofa::Index ; i); const. inlineoverridevirtual . Reimplemented from sofa::core::behavior::BaseMechanicalState. ◆ getPY(). template<class DataTypes > . SReal sofa::component::statecontainer::MechanicalObject< DataTypes >::getPY ; (; sofa::Index ; i); const. inlineoverridevirtual . Reimplemented from sofa::core::behavior::BaseMechanicalState. ◆ getPZ(). template<class DataTypes > . SReal sofa::component::statecontainer::MechanicalObject< DataTypes >::getPZ ; (; sofa::Index ; i); const. inlineoverridevirtual . Reimplemented from sofa::core::behavior::BaseMechanicalState. ◆ getReadAccessor(). template<class DataTypes > . template<core::VecType vtype> . helper::ReadAccessor< core::objectmodel::Data< core::StateVecType_t< DataTypes, vtype > > > sofa::component::statecontainer::MechanicalObject< DataTypes >::getReadAccessor ; (; core::ConstVecId ; v). protected . Shortcut to get a read accessor corresponding to the provided VecType from a VecId. . ◆ getRotation(). template<class DataTypes > . virtual type::Vec3 sofa::component::statecontainer::MechanicalObject< DataTypes >::getRotation ; (; ); const. inlinevirtual . ◆ getScale(). template<class DataTypes > . type::Vec3 sofa::component::statecontainer::MechanicalObject< DataTypes >::getScale ; (; ); const. inlineoverridevirtual . Reimplemented from sofa::core::behavior::BaseMechanicalState. ◆ getSize(). template<class DataTypes > . Size sofa::component::statecontainer::MechanicalObject< DataTypes >::getSize ; (; ); const. inlineoverridevirtual . Current size of all stored vectors. ; Implements sofa::core::BaseState. ◆ getTranslation(). template<class DataTypes > . virtual type::Vec3 sofa::component::statecontainer::MechanicalObject< DataTypes >::getTranslation ; (; ); const. inlinevirtual . ◆ getVX(). template<class DataTypes > . SReal sofa::component::statecontainer::MechanicalObject< DataTypes >::getVX ; (; sofa::Index ; i); const. i",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html:57843,access,accessor,57843,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mechanical_object.html,1,['access'],['accessor']
Security,"ze L0, Size C0, Mat< L2, C2, real > &m) const noexcept;  ; template<Size C2> ; constexpr void getsub (const Size L0, const Size C0, Vec< C2, real > &m) const noexcept;  ; constexpr void getsub (Size L0, Size C0, real &m) const noexcept;  ; template<Size L2, Size C2> ; constexpr void setsub (Size L0, Size C0, const Mat< L2, C2, real > &m) noexcept;  ; template<Size L2> ; constexpr void setsub (Size L0, Size C0, const Vec< L2, real > &v) noexcept;  ; constexpr void clear () noexcept;  Sets each element to 0. More...;  ; constexpr void fill (real r) noexcept;  Sets each element to r. More...;  ; constexpr const Line & line (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr Col col (Size j) const noexcept;  Copy of column j. More...;  ; constexpr LineNoInit & operator[] (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator[] (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr LineNoInit & operator() (Size i) noexcept;  Write access to line i. More...;  ; constexpr const LineNoInit & operator() (Size i) const noexcept;  Read-only access to line i. More...;  ; constexpr real & operator() (Size i, Size j) noexcept;  Write access to element (i,j). More...;  ; constexpr const real & operator() (Size i, Size j) const noexcept;  Read-only access to element (i,j). More...;  ; constexpr const Line * lptr () const noexcept;  Cast into a standard C array of lines (read-only). More...;  ; constexpr Line * lptr () noexcept;  Cast into a standard C array of lines. More...;  ; constexpr const real * ptr () const noexcept;  Cast into a standard C array of elements (stored per line) (read-only). More...;  ; constexpr real * ptr () noexcept;  Cast into a standard C array of elements (stored per line). More...;  ; template<sofa::Size NbLine = L, typename = std::enable_if_t<NbLine >= 1> ; constexpr Line & x () noexcept;  Special access to first line. More...;  ; template<sofa::Size NbLine = L, typename",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html:3514,access,access,3514,api/master/sofa/html/classsofa_1_1type_1_1_mat.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1type_1_1_mat.html,2,['access'],['access']
Security,"ze() [2/2]. template<class Info > . sofa::Size sofa::defaulttype::DataTypeInfoDynamicWrapper< Info >::size ; (; const void * ; data); const. inlineoverridevirtual . The size of data, in number of iterable elements (For containers, that'll be the number of elements in the 1st dimension). For example, with type == ` ; Implements sofa::defaulttype::AbstractTypeInfo. ◆ Text(). template<class Info > . bool sofa::defaulttype::DataTypeInfoDynamicWrapper< Info >::Text ; (; ); const. inlineoverridevirtual . True iff this type uses text values. ; Implements sofa::defaulttype::AbstractTypeInfo. ◆ type_info(). template<class Info > . virtual const std::type_info* sofa::defaulttype::DataTypeInfoDynamicWrapper< Info >::type_info ; (; ); const. inlineoverridevirtual . Get the type_info for this type. ; Implements sofa::defaulttype::AbstractTypeInfo. ◆ ValidInfo(). template<class Info > . bool sofa::defaulttype::DataTypeInfoDynamicWrapper< Info >::ValidInfo ; (; ); const. inlineoverridevirtual . True iff the TypeInfo for this type contains valid information. A Type is considered ""Valid"" if there's at least one specialization of the ValueType ; Implements sofa::defaulttype::AbstractTypeInfo. ◆ ValueType(). template<class Info > . const AbstractTypeInfo* sofa::defaulttype::DataTypeInfoDynamicWrapper< Info >::ValueType ; (; ); const. inlineoverridevirtual . Returns the TypeInfo for the type of the values accessible by the get*Value() functions. For example, if the type is fixed_array<fixed_array<int, 2> 3>, it returns the TypeInfo for int. . Implements sofa::defaulttype::AbstractTypeInfo. ◆ ZeroConstructor(). template<class Info > . bool sofa::defaulttype::DataTypeInfoDynamicWrapper< Info >::ZeroConstructor ; (; ); const. inlineoverridevirtual . True iff the default constructor of this type is equivalent to setting the memory to 0. ; Implements sofa::defaulttype::AbstractTypeInfo. sofadefaulttypeDataTypeInfoDynamicWrapper; Generated on Mon Nov 11 2024 03:18:43 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_data_type_info_dynamic_wrapper.html:13146,access,accessible,13146,api/master/sofa/html/classsofa_1_1defaulttype_1_1_data_type_info_dynamic_wrapper.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_data_type_info_dynamic_wrapper.html,1,['access'],['accessible']
Security," ; fact . ); const. inline . compute result += A^T * data * fact . ◆ addMultTranspose_impl(). template<class InDataTypes , class OutDataTypes > . template<class InType , class OutType > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::addMultTranspose_impl ; (; InType & ; result, . const OutType & ; data, . Real ; fact . ); const. inlineprotected . ◆ alias(). template<class InDataTypes , class OutDataTypes > . template<class LHS , class RHS > . static bool sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::alias ; (; const LHS & ; lhs, . const RHS & ; rhs . ). inlinestaticprotected . ◆ beginBlockRow(). template<class InDataTypes , class OutDataTypes > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::beginBlockRow ; (; unsigned ; row). inline . Prepare the insertion of a new row of blocks in the matrix. Then create blocks using createBlock( unsigned column, const Block& b ). Then finally use endBlockRow() or endSortedBlockRow() to validate the row insertion. See alsocreateBlock( unsigned column, const Block& b ) . endBlockRow() ; Warningempty rows should be created with a call to beginBlockRow + endSortedBlockRow . ◆ copyFrom(). template<class InDataTypes , class OutDataTypes > . template<class AnyReal > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::copyFrom ; (; const CompressedRowSparseMatrix< type::Mat< Nout, Nin, AnyReal > > & ; crs). inline . Set from a CompressedRowSparseMatrix. Preconditioncrs must be compressed . ◆ createBlock(). template<class InDataTypes , class OutDataTypes > . void sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >::createBlock ; (; unsigned ; column, . const Block & ; b . ). inline . Create a block in the current row, which must be previously initialized using beginBlockRow(unsigned row).; If the blocks are NOT created in column order, call endBlockRow(). If the blocks are given in column order, endSortedBlockRow() will b",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:22737,validat,validate,22737,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,1,['validat'],['validate']
Security," ; virtual void getObjects (const ClassInfo &class_info, GetObjectsCallBack &container, const TagSet &tags, SearchDirection dir=SearchUp) const;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html:4889,access,access,4889,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context.html,2,['access'],['access']
Security," ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (Pipeline, sofa::core::objectmodel::BaseObject);  ; void reset () override=0;  Reset to initial state. More...;  ; virtual void computeCollisionReset ()=0;  Remove collision response from last step. More...;  ; virtual void computeCollisionDetection ()=0;  Detect new collisions. Note that this step must not modify the simulation graph. More...;  ; virtual void computeCollisionResponse ()=0;  Add collision response in the simulation graph. More...;  ; void computeCollisions ();  ; const BroadPhaseDetection * getBroadPhaseDetection () const;  Broad phase collision detection method accessor. More...;  ; const NarrowPhaseDetection * getNarrowPhaseDetection () const;  Narrow phase collision detection method accessor. More...;  ; virtual std::set< std::string > getResponseList () const =0;  get the set of response available with the current collision pipeline More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline.html:2478,access,accessor,2478,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline.html,1,['access'],['accessor']
Security," operator[] (const State< DataTypes > *s) const;  . Static Public Member Functions; static TMultiVecId< V_ALL, vaccess > null ();  . Protected Member Functions; IdMap & writeIdMap ();  . Friends; template<VecType vtype2, VecAccess vaccess2> ; class TMultiVecId;  ; std::ostream & operator<< (std::ostream &out, const TMultiVecId< V_ALL, vaccess > &v);  . Attribute details. ◆ defaultId. template<VecAccess vaccess> . MyVecId sofa::core::TMultiVecId< V_ALL, vaccess >::defaultId. protected . Constructor details. ◆ TMultiVecId() [1/4]. template<VecAccess vaccess> . sofa::core::TMultiVecId< V_ALL, vaccess >::TMultiVecId ; (; ). default . ◆ TMultiVecId() [2/4]. template<VecAccess vaccess> . template<VecType vtype2, VecAccess vaccess2> . sofa::core::TMultiVecId< V_ALL, vaccess >::TMultiVecId ; (; const TVecId< vtype2, vaccess2 > & ; v). inline . Copy from another VecId, possibly with another type of access, with the constraint that the access must be compatible (i.e. cannot create a write-access VecId from a read-only VecId. . ◆ TMultiVecId() [3/4]. template<VecAccess vaccess> . sofa::core::TMultiVecId< V_ALL, vaccess >::TMultiVecId ; (; const TMultiVecId< V_ALL, vaccess > & ; mv). inline . ◆ TMultiVecId() [4/4]. template<VecAccess vaccess> . template<VecType vtype2, VecAccess vaccess2> . sofa::core::TMultiVecId< V_ALL, vaccess >::TMultiVecId ; (; const TMultiVecId< vtype2, vaccess2 > & ; mv). inline . Function details. ◆ assign(). template<VecAccess vaccess> . void sofa::core::TMultiVecId< V_ALL, vaccess >::assign ; (; const MyVecId & ; id). inline . ◆ getDefaultId(). template<VecAccess vaccess> . const MyVecId& sofa::core::TMultiVecId< V_ALL, vaccess >::getDefaultId ; (; ); const. inline . ◆ getId(). template<VecAccess vaccess> . const MyVecId& sofa::core::TMultiVecId< V_ALL, vaccess >::getId ; (; const BaseState * ; s); const. inline . ◆ getIdMap(). template<VecAccess vaccess> . const IdMap& sofa::core::TMultiVecId< V_ALL, vaccess >::getIdMap ; (; ); const. inline . ◆ getNa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_t_multi_vec_id_3_01_v___a_l_l_00_01vaccess_01_4.html:2815,access,access,2815,api/master/sofa/html/classsofa_1_1core_1_1_t_multi_vec_id_3_01_v___a_l_l_00_01vaccess_01_4.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_t_multi_vec_id_3_01_v___a_l_l_00_01vaccess_01_4.html,1,['access'],['access']
Security,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::objectmodel::BaseObjectDescription::Attribute Member List . This is the complete list of members for sofa::core::objectmodel::BaseObjectDescription::Attribute, including all inherited members. accessedsofa::core::objectmodel::BaseObjectDescription::Attributemutableprotected; Attribute()sofa::core::objectmodel::BaseObjectDescription::Attributeinline; Attribute(const std::string &v)sofa::core::objectmodel::BaseObjectDescription::Attributeinline; c_str() constsofa::core::objectmodel::BaseObjectDescription::Attributeinline; isAccessed() constsofa::core::objectmodel::BaseObjectDescription::Attributeinline; operator std::string() constsofa::core::objectmodel::BaseObjectDescription::Attributeinline; operator=(const std::string &v)sofa::core::objectmodel::BaseObjectDescription::Attributeinline; operator=(const char *v)sofa::core::objectmodel::BaseObjectDescription::Attributeinline; setAccessed(bool v)sofa::core::objectmodel::BaseObjectDescription::Attributeinline; valuesofa::core::objectmodel::BaseObjectDescription::Attributeprotected. Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description_1_1_attribute-members.html:305,access,accessedsofa,305,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description_1_1_attribute-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description_1_1_attribute-members.html,1,['access'],['accessedsofa']
Security,"﻿. SOFA API: sofa::component::animationloop::ConstraintAnimationLoop Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::animationloop::ConstraintAnimationLoop Class Reference . #include <ConstraintAnimationLoop.h>. Inheritance diagram for sofa::component::animationloop::ConstraintAnimationLoop:. [legend]. Public Attributes; Data< bool > d_displayTime;  Display time for each important step of ConstraintAnimationLoop. More...;  ; Data< SReal > d_tol;  Tolerance of the Gauss-Seidel. More...;  ; Data< int > d_maxIt;  Maximum number of iterations of the Gauss-Seidel. More...;  ; Data< bool > d_doCollisionsFirst;  Compute the collisions first (to support penality-based contacts) More...;  ; Data< bool > d_doubleBuffer;  Double the buffer dedicated to the constraint problem to make it accessible to another thread. More...;  ; Data< bool > d_scaleTolerance;  Scale the error tolerance with the number of constraints. More...;  ; Data< bool > d_allVerified;  All constraints must be verified (each constraint's error < tolerance) More...;  ; Data< SReal > d_sor;  Successive Over Relaxation parameter (0-2) More...;  ; Data< bool > d_schemeCorrection;  Apply new scheme where compliance is progressively corrected. More...;  ; Data< bool > d_realTimeCompensation;  If the total computational time T < dt, sleep(dt-T) More...;  ; Data< bool > d_activateSubGraph;  ; Data< std::map< std::string, sofa::type::vector< SReal > > > d_graphErrors;  Sum of the constraints' errors at each iteration. More...;  ; Data< std::map< std::string, sofa::type::vector< SReal > > > d_graphConstraints;  Graph of each constraint's error at the end of the resolution. More...;  ; Data< std::map< std::string, sofa::type::vector< SReal > > > d_graphForces;  Graph of each constraint's force at each step of the resolution. More...;  ;  P",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_constraint_animation_loop.html:970,access,accessible,970,api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_constraint_animation_loop.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_constraint_animation_loop.html,1,['access'],['accessible']
Security,"﻿. SOFA API: sofa::component::collision::geometry::TriangleCollisionModel< TDataTypes > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::component::collision::geometry::TriangleCollisionModel< TDataTypes > Class Template Reference . #include <TriangleModel.h>. Inheritance diagram for sofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >:. [legend]; Detailed Description; template<class TDataTypes>; class sofa::component::collision::geometry::TriangleCollisionModel< TDataTypes >; This class will create collision elements based on a triangle and/or quad mesh. It uses directly the information of the topology and the dof to compute the triangle normals, BB and BoundingTree. The class See alsoTTriangle is used to access specific triangle of this collision Model. . Public Attributes; Data< bool > d_bothSide;  activate collision on both side of the triangle model More...;  ; Data< bool > d_computeNormals;  set to false to disable computation of triangles normal More...;  ; Data< bool > d_useCurvature;  use the curvature of the mesh to avoid some self-intersection test More...;  ; SingleLink< TriangleCollisionModel< DataTypes >, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > l_topology;  Link to be set to the topology container in the component graph. More...;  ;  Public Attributes inherited from sofa::core::CollisionModel; CollisionElementActiver * myCollElemActiver;  CollisionElementActiver that activate or deactivate collision element during execution. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model.html:964,access,access,964,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::component::engine::generate::MergePoints< DataTypes > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::component::engine::generate::MergePoints< DataTypes > Class Template Reference . #include <MergePoints.h>. Inheritance diagram for sofa::component::engine::generate::MergePoints< DataTypes >:. [legend]; Detailed Description; template<class DataTypes>; class sofa::component::engine::generate::MergePoints< DataTypes >; This class merge 2 coordinate vectors. . Public Attributes; bool initDone;  ; Data< VecCoord > f_X1;  position coordinates of the degrees of freedom of the first object More...;  ; Data< VecCoord > f_X2;  Rest position coordinates of the degrees of freedom of the second object. More...;  ; Data< SetIndex > f_X2_mapping;  Mapping of indices to inject position2 inside position1 vertex buffer. More...;  ; Data< SetIndex > f_indices1;  Indices of the points of the first object. More...;  ; Data< SetIndex > f_indices2;  Indices of the points of the second object. More...;  ; Data< VecCoord > f_points;  position coordinates resulting from the merge More...;  ; Data< bool > f_noUpdate;  do not update the output at each time step (false) More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Dat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_points.html:943,inject,inject,943,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_points.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_points.html,1,['inject'],['inject']
Security,"﻿. SOFA API: sofa::component::topology::container::dynamic::DynamicSparseGridTopologyContainer Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::component::topology::container::dynamic::DynamicSparseGridTopologyContainer Class Reference . #include <DynamicSparseGridTopologyContainer.h>. Inheritance diagram for sofa::component::topology::container::dynamic::DynamicSparseGridTopologyContainer:. [legend]; Detailed Description; a class that stores a sparse regular grid of hexahedra and provides a better loading and access to neighbors than HexahedronSetTopologyContainer . Public Attributes; sofa::core::objectmodel::RenamedData< sofa::type::Vec3i > resolution;  ; sofa::core::objectmodel::RenamedData< sofa::type::vector< unsigned char > > valuesIndexedInRegularGrid;  ; sofa::core::objectmodel::RenamedData< sofa::type::vector< unsigned char > > valuesIndexedInTopology;  values indexed in the topology More...;  ; sofa::core::objectmodel::RenamedData< sofa::type::vector< BaseMeshTopology::HexaID > > idxInRegularGrid;  ; sofa::core::objectmodel::RenamedData< std::map< unsigned int, BaseMeshTopology::HexaID > > idInRegularGrid2IndexInTopo;  ; sofa::core::objectmodel::RenamedData< type::Vec3 > voxelSize;  ; Data< sofa::type::Vec3i > d_resolution;  voxel grid resolution More...;  ; Data< sofa::type::vector< unsigned char > > d_valuesIndexedInRegularGrid;  values indexed in the Regular Grid More...;  ; core::topology::HexahedronData< sofa::type::vector< unsigned char > > d_valuesIndexedInTopology;  values indexed in the topology More...;  ; Data< sofa::type::vector< BaseMeshTopology::HexaID > > d_idxInRegularGrid;  indices in the Regular Grid More...;  ; Data< std::map< unsigned int, BaseMeshTopology::HexaID > > d_idInRegularGrid2IndexInTopo;  map between id in the Regular Grid and index in the topology More...;  ; Data< type",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_container.html:675,access,access,675,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_container.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_container.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::component::topology::container::dynamic::EdgeSetTopologyContainer Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::component::topology::container::dynamic::EdgeSetTopologyContainer Class Reference . #include <EdgeSetTopologyContainer.h>. Inheritance diagram for sofa::component::topology::container::dynamic::EdgeSetTopologyContainer:. [legend]; Detailed Description; a class that stores a set of edges and provides access to the adjacency between points and edges . Public Attributes; sofa::core::objectmodel::RenamedData< bool > m_checkConnexity;  ; Data< sofa::type::vector< Edge > > d_edge;  List of edge indices. More...;  ; Data< bool > d_checkConnexity;  It true, will check the connexity of the mesh. More...;  ;  Public Attributes inherited from sofa::component::topology::container::dynamic::PointSetTopologyContainer; Data< InitTypes::VecCoord > d_initPoints;  Initial position of points. More...;  ; Data< bool > d_checkTopology;  Parameter to activate internal topology checks (might slow down the simulation) More...;  ;  Public Attributes inherited from sofa::core::topology::TopologyContainer; Data< std::list< const TopologyChange * > > m_changeList;  Array of topology modifications that have already occurred (addition) or will occur next (deletion). More...;  ; Data< std::list< const TopologyChange * > > m_stateChangeList;  Array of state modifications that have already occurred (addition) or will occur next (deletion). More...;  ; std::array< std::set< TopologyHandler * >, sofa::geometry::NumberOfElementType > m_topologyHandlerListPerElement {};  List of topology engines which will interact on all topological Data. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_topology_container.html:618,access,access,618,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_topology_container.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_topology_container.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::component::topology::container::dynamic::HexahedronSetTopologyContainer Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::component::topology::container::dynamic::HexahedronSetTopologyContainer Class Reference . #include <HexahedronSetTopologyContainer.h>. Inheritance diagram for sofa::component::topology::container::dynamic::HexahedronSetTopologyContainer:. [legend]; Detailed Description; a class that stores a set of hexahedra and provides access with adjacent quads, edges and vertices . Public Attributes; Data< bool > d_createQuadArray;  force the creation of quads More...;  ; Data< sofa::type::vector< Hexahedron > > d_hexahedron;  provides the set of hexahedra. More...;  ;  Public Attributes inherited from sofa::component::topology::container::dynamic::QuadSetTopologyContainer; Data< sofa::type::vector< Quad > > d_quad;  provides the set of quads. More...;  ;  Public Attributes inherited from sofa::component::topology::container::dynamic::EdgeSetTopologyContainer; sofa::core::objectmodel::RenamedData< bool > m_checkConnexity;  ; Data< sofa::type::vector< Edge > > d_edge;  List of edge indices. More...;  ; Data< bool > d_checkConnexity;  It true, will check the connexity of the mesh. More...;  ;  Public Attributes inherited from sofa::component::topology::container::dynamic::PointSetTopologyContainer; Data< InitTypes::VecCoord > d_initPoints;  Initial position of points. More...;  ; Data< bool > d_checkTopology;  Parameter to activate internal topology checks (might slow down the simulation) More...;  ;  Public Attributes inherited from sofa::core::topology::TopologyContainer; Data< std::list< const TopologyChange * > > m_changeList;  Array of topology modifications that have already occurred (addition) or will occur next (deletion). More...;  ; Data< std::list< const",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_container.html:646,access,access,646,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_container.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_container.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::component::topology::container::dynamic::PointSetTopologyContainer Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::component::topology::container::dynamic::PointSetTopologyContainer Class Reference . #include <PointSetTopologyContainer.h>. Inheritance diagram for sofa::component::topology::container::dynamic::PointSetTopologyContainer:. [legend]; Detailed Description; The container class that stores a set of points and provides access to each point. This set of point may be a subset of the DOF of the mechanical model . Public Attributes; Data< InitTypes::VecCoord > d_initPoints;  Initial position of points. More...;  ; Data< bool > d_checkTopology;  Parameter to activate internal topology checks (might slow down the simulation) More...;  ;  Public Attributes inherited from sofa::core::topology::TopologyContainer; Data< std::list< const TopologyChange * > > m_changeList;  Array of topology modifications that have already occurred (addition) or will occur next (deletion). More...;  ; Data< std::list< const TopologyChange * > > m_stateChangeList;  Array of state modifications that have already occurred (addition) or will occur next (deletion). More...;  ; std::array< std::set< TopologyHandler * >, sofa::geometry::NumberOfElementType > m_topologyHandlerListPerElement {};  List of topology engines which will interact on all topological Data. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_container.html:635,access,access,635,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_container.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_container.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::component::topology::container::dynamic::QuadSetTopologyContainer Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::component::topology::container::dynamic::QuadSetTopologyContainer Class Reference . #include <QuadSetTopologyContainer.h>. Inheritance diagram for sofa::component::topology::container::dynamic::QuadSetTopologyContainer:. [legend]; Detailed Description; Object that stores a set of quads and provides access to each quad and its edges and vertices . Public Attributes; Data< sofa::type::vector< Quad > > d_quad;  provides the set of quads. More...;  ;  Public Attributes inherited from sofa::component::topology::container::dynamic::EdgeSetTopologyContainer; sofa::core::objectmodel::RenamedData< bool > m_checkConnexity;  ; Data< sofa::type::vector< Edge > > d_edge;  List of edge indices. More...;  ; Data< bool > d_checkConnexity;  It true, will check the connexity of the mesh. More...;  ;  Public Attributes inherited from sofa::component::topology::container::dynamic::PointSetTopologyContainer; Data< InitTypes::VecCoord > d_initPoints;  Initial position of points. More...;  ; Data< bool > d_checkTopology;  Parameter to activate internal topology checks (might slow down the simulation) More...;  ;  Public Attributes inherited from sofa::core::topology::TopologyContainer; Data< std::list< const TopologyChange * > > m_changeList;  Array of topology modifications that have already occurred (addition) or will occur next (deletion). More...;  ; Data< std::list< const TopologyChange * > > m_stateChangeList;  Array of state modifications that have already occurred (addition) or will occur next (deletion). More...;  ; std::array< std::set< TopologyHandler * >, sofa::geometry::NumberOfElementType > m_topologyHandlerListPerElement {};  List of topology engines which will in",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_topology_container.html:617,access,access,617,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_topology_container.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_topology_container.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::component::topology::container::dynamic::TetrahedronSetTopologyContainer Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::component::topology::container::dynamic::TetrahedronSetTopologyContainer Class Reference . #include <TetrahedronSetTopologyContainer.h>. Inheritance diagram for sofa::component::topology::container::dynamic::TetrahedronSetTopologyContainer:. [legend]; Detailed Description; a class that stores a set of tetrahedra and provides access with adjacent triangles, edges and vertices . Public Attributes; Data< bool > d_createTriangleArray;  force the creation of triangles More...;  ; Data< sofa::type::vector< Tetrahedron > > d_tetrahedron;  provides the set of tetrahedra. More...;  ;  Public Attributes inherited from sofa::component::topology::container::dynamic::TriangleSetTopologyContainer; Data< sofa::type::vector< Triangle > > d_triangle;  provides the set of triangles. More...;  ;  Public Attributes inherited from sofa::component::topology::container::dynamic::EdgeSetTopologyContainer; sofa::core::objectmodel::RenamedData< bool > m_checkConnexity;  ; Data< sofa::type::vector< Edge > > d_edge;  List of edge indices. More...;  ; Data< bool > d_checkConnexity;  It true, will check the connexity of the mesh. More...;  ;  Public Attributes inherited from sofa::component::topology::container::dynamic::PointSetTopologyContainer; Data< InitTypes::VecCoord > d_initPoints;  Initial position of points. More...;  ; Data< bool > d_checkTopology;  Parameter to activate internal topology checks (might slow down the simulation) More...;  ;  Public Attributes inherited from sofa::core::topology::TopologyContainer; Data< std::list< const TopologyChange * > > m_changeList;  Array of topology modifications that have already occurred (addition) or will occur next (deletion)",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_container.html:651,access,access,651,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_container.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_container.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::component::topology::container::dynamic::TriangleSetTopologyContainer Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::component::topology::container::dynamic::TriangleSetTopologyContainer Class Reference . #include <TriangleSetTopologyContainer.h>; : Object that stores a set of triangles and provides access to each triangle and its edges and vertices ; More... Inheritance diagram for sofa::component::topology::container::dynamic::TriangleSetTopologyContainer:. [legend]; Detailed Description; : Object that stores a set of triangles and provides access to each triangle and its edges and vertices . Public Attributes; Data< sofa::type::vector< Triangle > > d_triangle;  provides the set of triangles. More...;  ;  Public Attributes inherited from sofa::component::topology::container::dynamic::EdgeSetTopologyContainer; sofa::core::objectmodel::RenamedData< bool > m_checkConnexity;  ; Data< sofa::type::vector< Edge > > d_edge;  List of edge indices. More...;  ; Data< bool > d_checkConnexity;  It true, will check the connexity of the mesh. More...;  ;  Public Attributes inherited from sofa::component::topology::container::dynamic::PointSetTopologyContainer; Data< InitTypes::VecCoord > d_initPoints;  Initial position of points. More...;  ; Data< bool > d_checkTopology;  Parameter to activate internal topology checks (might slow down the simulation) More...;  ;  Public Attributes inherited from sofa::core::topology::TopologyContainer; Data< std::list< const TopologyChange * > > m_changeList;  Array of topology modifications that have already occurred (addition) or will occur next (deletion). More...;  ; Data< std::list< const TopologyChange * > > m_stateChangeList;  Array of state modifications that have already occurred (addition) or will occur next (deletion). More...;  ; std:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_topology_container.html:505,access,access,505,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_topology_container.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_topology_container.html,2,['access'],['access']
Security,"﻿. SOFA API: sofa::component::topology::container::dynamic::TriangleSetTopologyModifier Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::component::topology::container::dynamic::TriangleSetTopologyModifier Class Reference . #include <TriangleSetTopologyModifier.h>. Inheritance diagram for sofa::component::topology::container::dynamic::TriangleSetTopologyModifier:. [legend]; Detailed Description; A class that modifies the topology by adding and removing triangles . Protected Attributes; Data< sofa::type::vector< TriangleID > > list_Out;  triangles with at least one null values. More...;  ;  Protected Attributes inherited from sofa::core::topology::TopologyModifier; TopologyContainer * m_topologyContainer;  Contains the actual topology data and give access to it (nature of these data heavily depends on the kind of topology). More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (TriangleSetTopologyModifier, EdgeSetTopologyModifier);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_topology_modifier.html:920,access,access,920,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_topology_modifier.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_topology_modifier.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::core Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::core Namespace Reference . Namespaces;  behavior;  For BaseMatrix. ;  ;  collision;  ;  constraintparams;  ;  execparams;  ;  loader;  ;  matrixaccumulator;  ;  mechanicalparams;  ;  objectmodel;  ;  topology;  ;  visual;  . Classes; class  State;  Component storing position and velocity vectors. More...;  ; struct  AccumulationVecId;  Proxy class for accessing elements within an imaginary container that represents the cumulative sum of multiple other containers. Each individual container is represented by a VecId. The class maintains a list of VecIdDeriv objects, which defines the containers contributing to the final cumulative sum. This class provides a simplified interface for accessing elements within the cumulative container. It allows retrieving specific elements using the overloaded subscript operator (operator[]). When accessing an element at a particular index, the class delegates the retrieval to the appropriate container represented by the associated VecIdDeriv. In addition to element retrieval, the class supports dynamic management of the contributing containers. It offers functions to add and remove VecId objects from the list of containers that contribute to the cumulative sum. More...;  ; class  MappingMatrixAccumulator;  ; class  ListMappingMatrixAccumulator;  ; class  GeometricStiffnessMatrix;  ; class  BaseMapping;  ; class  BaseMatrixAccumulatorComponent;  ; struct  get_base_object_strong;  ; class  BaseState;  Component storing position and velocity vectors. More...;  ; class  BehaviorModel;  Abstract Interface of components defining the behavior of a simulated object. More...;  ; class  CategoryLibrary;  An Generic Category of the Sofa Library. More...;  ; class  BaseCollisionElementIterator;  Base class for reference to an collision element defin",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html:557,access,accessing,557,api/master/sofa/html/namespacesofa_1_1core.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core.html,2,['access'],['accessing']
Security,"﻿. SOFA API: sofa::core::AccumulationVecId< TDataTypes, vtype, vaccess > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::core::AccumulationVecId< TDataTypes, vtype, vaccess > Struct Template Reference . #include <AccumulationVecId.h>; Proxy class for accessing elements within an imaginary container that represents the cumulative sum of multiple other containers. Each individual container is represented by a VecId. The class maintains a list of VecIdDeriv objects, which defines the containers contributing to the final cumulative sum. This class provides a simplified interface for accessing elements within the cumulative container. It allows retrieving specific elements using the overloaded subscript operator (operator[]). When accessing an element at a particular index, the class delegates the retrieval to the appropriate container represented by the associated VecIdDeriv. In addition to element retrieval, the class supports dynamic management of the contributing containers. It offers functions to add and remove VecId objects from the list of containers that contribute to the cumulative sum. ; More... Inheritance diagram for sofa::core::AccumulationVecId< TDataTypes, vtype, vaccess >:. [legend]; Detailed Description; template<class TDataTypes, VecType vtype, VecAccess vaccess>; struct sofa::core::AccumulationVecId< TDataTypes, vtype, vaccess >; Proxy class for accessing elements within an imaginary container that represents the cumulative sum of multiple other containers. Each individual container is represented by a VecId. The class maintains a list of VecIdDeriv objects, which defines the containers contributing to the final cumulative sum. This class provides a simplified interface for accessing elements within the cumulative container. It allows retrieving specific elements using the overloaded subscript operator (operator[]). When accessing an element at a ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1_accumulation_vec_id.html:359,access,accessing,359,api/master/sofa/html/structsofa_1_1core_1_1_accumulation_vec_id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1_accumulation_vec_id.html,3,['access'],['accessing']
Security,"﻿. SOFA API: sofa::core::CollisionElementIterator Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::core::CollisionElementIterator Class Reference . #include <CollisionElement.h>; Reference to an abstract collision element. ; More... Inheritance diagram for sofa::core::CollisionElementIterator:. [legend]; Detailed Description; Reference to an abstract collision element. ; You can think of a CollisionElementIterator as a glorified pointer to a collision element. It is only there to create a reference to it, not to actual contain its data. Classes derived from TCollisionElementIterator does not store any data, but just provide methods allowing to access the additional data stored inside the derived CollisionModel. For instance, the Cube class adds the minVect() / maxVect() methods to retrieve the corners of the cube, however this data is not stored inside Cube, instead it is stored inside the CubeData class within CubeModel. . Public Member Functions;  CollisionElementIterator (CollisionModel *model=nullptr, Index index=0);  ;  CollisionElementIterator (CollisionModel *model, VIterator it, VIterator itend);  ;  CollisionElementIterator (CollisionModel *model, Index index, VIterator it, VIterator itend);  ; template<class DerivedModel > ;  CollisionElementIterator (const TCollisionElementIterator< DerivedModel > &i);  Automatic conversion from a reference to an element in a derived model. More...;  ; template<class DerivedModel > ; void operator= (const TCollisionElementIterator< DerivedModel > &i);  Automatic conversion from a reference to an element in a derived model. More...;  ;  Public Member Functions inherited from sofa::core::TCollisionElementIterator< CollisionModel >;  TCollisionElementIterator (Model *model=nullptr, Index index=0);  ;  TCollisionElementIterator (Model *model, Index index, VIterator it, VIterator itend);  ;  TCollisionElementIterator (Model *model, ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_collision_element_iterator.html:749,access,access,749,api/master/sofa/html/classsofa_1_1core_1_1_collision_element_iterator.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_collision_element_iterator.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::core::DataEngine Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::DataEngine Class Referenceabstract . #include <DataEngine.h>; from a set of Data inputs computes a set of Data outputs ; More... Inheritance diagram for sofa::core::DataEngine:. [legend]; Detailed Description; from a set of Data inputs computes a set of Data outputs ; Implementation good rules:; void init() { addInput // indicate all inputs addOutput // indicate all outputs }; // optional (called each time a data is modified in the gui) // it is not always desired void reinit() { update(); }; void doUpdate() override { access your inputs, set your outputs... } . Public Member Functions;  SOFA_ABSTRACT_CLASS (DataEngine, core::objectmodel::BaseObject);  ; void update () final;  ; void addInput (sofa::core::objectmodel::BaseData *data);  Add a new input to this engine. More...;  ; void addOutput (objectmodel::BaseData *n);  Add a new output to this engine. More...;  ;  Public Member Functions inherited from sofa::core::DataTrackerDDGNode;  DataTrackerDDGNode ();  ; void addInputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  Create a DataCallback object associated with multiple Data fields. More...;  ; void addOutputs (std::initializer_list< sofa::core::objectmodel::BaseData * > datas);  ; virtual void cleanDirty (const core::ExecParams *params=nullptr);  ; void updateAllInputsIfDirty ();  ;  Public Member Functions inherited from sofa::core::objectmodel::DDGNode;  DDGNode ();  Constructor. More...;  ; virtual ~DDGNode ();  Destructor. Automatically remove remaining links. More...;  ; void addInput (DDGNode *n);  Add a new input to this node. More...;  ; void delInput (DDGNode *n);  Remove an input from this node. More...;  ; void addOutput (DDGNode *n);  Add a new output to this node. More...;  ; void delOutput (DDGNode *n);  Rem",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_engine.html:743,access,access,743,api/master/sofa/html/classsofa_1_1core_1_1_data_engine.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_engine.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::core::PathResolver Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::core::PathResolver Class Reference . #include <PathResolver.h>; This class exposes an API to query a context to find Base* or a BaseData*. ; More...; Detailed Description; This class exposes an API to query a context to find Base* or a BaseData*. . Static Public Member Functions; static Base * FindBaseFromPath (const Base *base, const std::string &path);  ; static Base * FindBaseFromClassAndPath (const Base *base, const BaseClass *destType, const std::string &path);  ; static BaseData * FindBaseDataFromPath (Base *base, const std::string &path);  ; static BaseData * FindBaseDataFromPath (const BaseData *context, const std::string &path);  ; static bool PathHasValidSyntax (const std::string &path);  ; static bool FindDataLinkDest (Base *base, BaseData *&ptr, const std::string &path, const BaseLink *link);  ; static Base * FindLinkDestClass (Base *context, const BaseClass *destType, const std::string &path, const BaseLink *link);  ; template<class T > ; static bool FindLinkDest (Base *base, T *&ptr, const std::string &path, const BaseLink *link);  ; static sofa::core::objectmodel::Base * FindLink (sofa::core::objectmodel::Base *base, const std::string &path);  ; template<class T > ; static bool CheckPath (Base *base, T *&, const std::string &path, const BaseLink *link);  ; template<class T > ; static bool CheckPath (Base *context, const std::string &path);  ; static bool CheckPath (sofa::core::objectmodel::Base *context, const std::string &path);  Check that a given path is valid and that the pointed object exists regardless of its type. More...;  ; static bool CheckPaths (Base *context, const BaseClass *linktype, const std::string &pathes);  Check that a given set of path is valid and that the pointed object exists and is of the right type. More...;  ; static bool CheckPath (sofa:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_path_resolver.html:266,expose,exposes,266,api/master/sofa/html/classsofa_1_1core_1_1_path_resolver.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_path_resolver.html,2,['expose'],['exposes']
Security,"﻿. SOFA API: sofa::core::StateVecAccessor< DataTypes, vtype, vaccess > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::core::StateVecAccessor< DataTypes, vtype, vaccess > Struct Template Reference . Helper class to access vectors of a given type in a given State. ; More...; Detailed Description; template<class DataTypes, VecType vtype, VecAccess vaccess>; struct sofa::core::StateVecAccessor< DataTypes, vtype, vaccess >; Helper class to access vectors of a given type in a given State. . sofacoreStateVecAccessor; Generated on Mon Nov 11 2024 03:14:10 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1_state_vec_accessor.html:274,access,access,274,api/master/sofa/html/structsofa_1_1core_1_1_state_vec_accessor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1core_1_1_state_vec_accessor.html,2,['access'],['access']
Security,"﻿. SOFA API: sofa::core::TMultiVecId< vtype, vaccess > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::core::TMultiVecId< vtype, vaccess > Class Template Reference . #include <MultiVecId.h>. Inheritance diagram for sofa::core::TMultiVecId< vtype, vaccess >:. [legend]; Detailed Description; template<VecType vtype, VecAccess vaccess>; class sofa::core::TMultiVecId< vtype, vaccess >; Identify a vector of a given type stored in multiple State instances This class is templated in order to create different variations (generic versus specific type, read-only vs write access) . Protected Attributes; MyVecId defaultId;  . Public Member Functions; bool hasIdMap () const;  ; const IdMap & getIdMap () const;  ;  TMultiVecId ()=default;  ; template<VecAccess vaccess2> ;  TMultiVecId (const TVecId< vtype, vaccess2 > &v);  ; template<VecAccess vaccess2> ; TMultiVecId< vtype, vaccess > & operator= (const TVecId< vtype, vaccess2 > &v);  Copy assignment from another VecId. More...;  ;  TMultiVecId (const TMultiVecId< vtype, vaccess > &mv);  ; TMultiVecId< vtype, vaccess > & operator= (const TMultiVecId< vtype, vaccess > &mv);  Copy assignment. More...;  ; template<VecAccess vaccess2> ;  TMultiVecId (const TMultiVecId< vtype, vaccess2 > &mv);  ; template<VecAccess vaccess2> ; TMultiVecId< vtype, vaccess > & operator= (const TMultiVecId< vtype, vaccess2 > &mv);  ; template<VecAccess vaccess2> ;  TMultiVecId (const TMultiVecId< V_ALL, vaccess2 > &mv);  ; template<VecAccess vaccess2> ; TMultiVecId< vtype, vaccess > & operator= (const TMultiVecId< V_ALL, vaccess2 > &mv);  ; void setDefaultId (const MyVecId &id);  ; template<class State > ; void setId (const std::set< State > &states, const MyVecId &id);  ; void setId (const BaseState *s, const MyVecId &id);  ; void assign (const MyVecId ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_t_multi_vec_id.html:773,access,access,773,api/master/sofa/html/classsofa_1_1core_1_1_t_multi_vec_id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_t_multi_vec_id.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::core::TVecId< vtype, vaccess > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::core::TVecId< vtype, vaccess > Class Template Reference . #include <VecId.h>. Inheritance diagram for sofa::core::TVecId< vtype, vaccess >:. [legend]; Detailed Description; template<VecType vtype, VecAccess vaccess>; class sofa::core::TVecId< vtype, vaccess >; Identify a vector of a given type stored in State This class is templated in order to create different variations (generic versus specific type, read-only vs write access) . Public Member Functions;  TVecId ();  ;  TVecId (unsigned int i);  ;  TVecId (const TVecId< vtype, vaccess > &v);  Copy constructor. More...;  ; template<VecAccess vaccess2> ;  TVecId (const TVecId< vtype, vaccess2 > &v);  ; template<VecAccess vaccess2> ;  TVecId (const TVecId< V_ALL, vaccess2 > &v);  ; TVecId< vtype, vaccess > & operator= (const TVecId< vtype, vaccess > &other);  ; template<VecAccess vaccess2> ; TVecId< vtype, vaccess > & operator= (const TVecId< vtype, vaccess2 > &other);  ; template<VecAccess vaccess2> ; TVecId< vtype, vaccess > & operator= (const TVecId< V_ALL, vaccess2 > &other);  ; template<VecType vtype2, VecAccess vaccess2> ; bool operator== (const TVecId< vtype2, vaccess2 > &v) const;  ; template<VecType vtype2, VecAccess vaccess2> ; bool operator!= (const TVecId< vtype2, vaccess2 > &v) const;  ; bool isNull () const;  ; std::string getName () const;  ; std::string getGroup () const;  ;  Public Member Functions inherited from sofa::core::BaseVecId; VecType getType () const;  ; unsigned int getIndex () const;  . Static Public Member Functions; static TVecId null ();  . Friends; std::ostream & operator<< (std::ostream &out, const TVecId &v);  . Additional Inherited Members;  Public Attributes inherited from sofa::core::BaseVecId; VecType type;  ; unsigned int index;  ;  P",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_t_vec_id.html:675,access,access,675,api/master/sofa/html/classsofa_1_1core_1_1_t_vec_id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_t_vec_id.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::core::behavior::LinearSolverAccessor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::behavior::LinearSolverAccessor Class Reference . #include <LinearSolverAccessor.h>. Inheritance diagram for sofa::core::behavior::LinearSolverAccessor:. [legend]; Detailed Description; Base class for components requiring access to a linear solver . Protected Attributes; SingleLink< LinearSolverAccessor, LinearSolver, BaseLink::FLAG_STRONGLINK > l_linearSolver;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver_accessor.html:483,access,access,483,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver_accessor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver_accessor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::core::behavior::PairStateAccessor< DataTypes1, DataTypes2 > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::behavior::PairStateAccessor< DataTypes1, DataTypes2 > Class Template Reference . #include <PairStateAccessor.h>. Inheritance diagram for sofa::core::behavior::PairStateAccessor< DataTypes1, DataTypes2 >:. [legend]; Detailed Description; template<class DataTypes1, class DataTypes2 = DataTypes1>; class sofa::core::behavior::PairStateAccessor< DataTypes1, DataTypes2 >; Base class for components having access to a pair of mechanical states with a specific template parameter, in order to read and/or write state variables. . Protected Attributes; SingleLink< PairStateAccessor< DataTypes1, DataTypes2 >, MechanicalState< DataTypes1 >, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > mstate1;  ; SingleLink< PairStateAccessor< DataTypes1, DataTypes2 >, MechanicalState< DataTypes2 >, BaseLink::FLAG_STOREPATH|BaseLink::FLAG_STRONGLINK > mstate2;  ;  Protected Attributes inherited from sofa::core::behavior::StateAccessor; MultiLink< StateAccessor, BaseMechanicalState, BaseLink::FLAG_DUPLICATE > l_mechanicalStates;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_state_accessor.html:696,access,access,696,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_state_accessor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_state_accessor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::core::behavior::SingleMatrixAccessor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::core::behavior::SingleMatrixAccessor Class Reference . #include <SingleMatrixAccessor.h>. Inheritance diagram for sofa::core::behavior::SingleMatrixAccessor:. [legend]; Detailed Description; Special case to access a single square matrix. . Protected Attributes; BaseMatrix * matrix;  The single matrix. More...;  ; MatrixRef matRef;  The accessor to the single matrix. More...;  . Public Member Functions;  SingleMatrixAccessor (BaseMatrix *m=nullptr);  ;  ~SingleMatrixAccessor () override;  ; void setMatrix (BaseMatrix *m);  ; BaseMatrix * getMatrix ();  ; const BaseMatrix * getMatrix () const;  ; Index getGlobalDimension () const override;  ; int getGlobalOffset (const core::behavior::BaseMechanicalState *) const override;  ; MatrixRef getMatrix (const core::behavior::BaseMechanicalState *) const override;  ; InteractionMatrixRef getMatrix (const core::behavior::BaseMechanicalState *mstate1, const core::behavior::BaseMechanicalState *mstate2) const override;  ;  Public Member Functions inherited from sofa::core::behavior::MultiMatrixAccessor; virtual ~MultiMatrixAccessor ();  ; virtual void addMechanicalState (const BaseMechanicalState *mstate);  ; virtual void addMechanicalMapping (BaseMapping *mapping);  ; virtual void addMappedMechanicalState (const BaseMechanicalState *mstate);  . Attribute details. ◆ matRef. MatrixRef sofa::core::behavior::SingleMatrixAccessor::matRef. protected . The accessor to the single matrix. . ◆ matrix. BaseMatrix* sofa::core::behavior::SingleMatrixAccessor::matrix. protected . The single matrix. . Constructor details. ◆ SingleMatrixAccessor(). sofa::core::behavior::SingleMatrixAccessor::SingleMatrixAccessor ; (; BaseMatrix * ; m = nullptr). inline . ◆ ~SingleMatrixAccessor(). sofa::core::behavior::SingleMatrixAccessor",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_single_matrix_accessor.html:433,access,access,433,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_single_matrix_accessor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_single_matrix_accessor.html,2,['access'],"['access', 'accessor']"
Security,"﻿. SOFA API: sofa::core::behavior::SingleStateAccessor< DataTypes > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::behavior::SingleStateAccessor< DataTypes > Class Template Reference . #include <SingleStateAccessor.h>. Inheritance diagram for sofa::core::behavior::SingleStateAccessor< DataTypes >:. [legend]; Detailed Description; template<class DataTypes>; class sofa::core::behavior::SingleStateAccessor< DataTypes >; Base class for components having access to one mechanical state with a specific template parameter, in order to read and/or write state variables. . Protected Attributes; SingleLink< SingleStateAccessor< DataTypes >, MechanicalState< DataTypes >, BaseLink::FLAG_STRONGLINK > mstate;  ;  Protected Attributes inherited from sofa::core::behavior::StateAccessor; MultiLink< StateAccessor, BaseMechanicalState, BaseLink::FLAG_DUPLICATE > l_mechanicalStates;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (SOFA_TEMPLATE(SingleStateAccessor, DataTypes), StateAccessor);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; MechanicalState< DataTypes > * ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_single_state_accessor.html:622,access,access,622,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_single_state_accessor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_single_state_accessor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::core::behavior::StateAccessor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::behavior::StateAccessor Class Reference . #include <StateAccessor.h>. Inheritance diagram for sofa::core::behavior::StateAccessor:. [legend]; Detailed Description; Base class for components having access to one or more mechanical states, in order to read and/or write state variables. Example: force field, mass, constraints etc; Those components store a list of BaseMechanicalState. It does not prevent them to store the same BaseMechanicalState as a derived type. . Protected Attributes; MultiLink< StateAccessor, BaseMechanicalState, BaseLink::FLAG_DUPLICATE > l_mechanicalStates;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_ABSTRACT_CLASS (StateAccessor, objectmodel::BaseObject);  ; virtual const MultiLink< StateAccessor, BaseMechanicalState, BaseLink::FLAG_DUPLICATE >::Container & getMechanicalStates () const;  Return a list of mechanical states to which this component is associated. More...;  ; void computeBBox (const core::ExecParams *params, bool onlyVisible=false) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SO",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_state_accessor.html:452,access,access,452,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_state_accessor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_state_accessor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::core::objectmodel Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::core::objectmodel Namespace Reference . Namespaces;  base;  ;  basecontext;  ;  lifecycle;  . Classes; class  SingleLink;  Container of single links in the scenegraph, from a given type of object (Owner) to another (Dest) More...;  ; class  AbstractDataLink;  AbstractDataLink is the base class for every link between two data fields The targeted BaseData is called the ""target"", The base object owning the current ""child"" object is the ""owner"" it is possible to store a path in a DataLink, in that case, at each DataLink access the path is resolved to search for a corresponding Data until one is found. Once a Data is set, the path is discarded. More...;  ; class  Aspect;  ; class  AspectPool;  ; class  AspectBuffer;  ; class  Base;  Base class for everything. More...;  ; class  BaseClass;  Class hierarchy reflection base class. More...;  ; class  DeprecatedBaseClass;  ; struct  Parents;  ; struct  TClassParents;  ; struct  TClassParents< void >;  ; struct  TClassParents< Parents< Types... > >;  ; class  TClass;  ; class  HasGetCustomTemplateName;  ; class  HasGetCustomClassName;  ; class  HasName;  ; class  HasDataTypeInfo;  ; class  HasGetDefaultTemplateName;  ; class  HasDeprecatedTemplateName;  ; class  HasDeprecatedShortName;  ; class  HasDeprecatedClassName;  ; class  BaseClassNameHelper;  ; class  BaseContext;  Base class for Context classes, storing shared variables and parameters. More...;  ; class  BaseData;  Abstract base class for Data. More...;  ; class  WriteAccessWithRawPtr;  ; class  BaseLink;  Abstract base class for all links in the scene grapn, independently of their type. More...;  ; class  BaseNode;  Base class for simulation nodes. More...;  ; class  BaseObject;  Base class for simulation components. More...;  ; class  BaseObjectDescriptio",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html:738,access,access,738,api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1objectmodel.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::core::objectmodel::AbstractDataLink Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::core::objectmodel::AbstractDataLink Class Reference . #include <AbstractDataLink.h>; AbstractDataLink is the base class for every link between two data fields The targeted BaseData is called the ""target"", The base object owning the current ""child"" object is the ""owner"" it is possible to store a path in a DataLink, in that case, at each DataLink access the path is resolved to search for a corresponding Data until one is found. Once a Data is set, the path is discarded. ; More... Inheritance diagram for sofa::core::objectmodel::AbstractDataLink:. [legend]; Detailed Description; AbstractDataLink is the base class for every link between two data fields The targeted BaseData is called the ""target"", The base object owning the current ""child"" object is the ""owner"" it is possible to store a path in a DataLink, in that case, at each DataLink access the path is resolved to search for a corresponding Data until one is found. Once a Data is set, the path is discarded. . Protected Attributes; std::string m_path {""""};  . Public Member Functions; const BaseData & getOwner () const;  ; void setTarget (BaseData *target);  Change the targeted DataField and set the path to the empty string. More...;  ; BaseData * getTarget () const;  Get the targeted DataField. More...;  ; bool hasTarget () const;  Returns true if there is a target. More...;  ; const std::string getPath () const;  Get the path (is any) More...;  ; void setPath (const std::string &path);  Set the path, try to resolve it, on success set the DataField. More...;  ; bool hasPath () const;  Returns true if the path is set (and thus getTarget() == nullptr) More...;  ; bool resolvePathAndSetTarget ();  ; BaseData * resolvePathAndGetTarget ();  . Attribute details. ◆ m_path. std::string sofa::core::objectmo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_abstract_data_link.html:572,access,access,572,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_abstract_data_link.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_abstract_data_link.html,2,['access'],['access']
Security,"﻿. SOFA API: sofa::core::objectmodel::BaseObject Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::core::objectmodel::BaseObject Class Reference . #include <BaseObject.h>; Base class for simulation components. ; More... Inheritance diagram for sofa::core::objectmodel::BaseObject:. [legend]; Detailed Description; Base class for simulation components. ; An object defines a part of the functionality in the simulation (stores state data, specify topology, compute forces, etc). Each simulation object is related to a context, which gives access to all available external data. It is able to process events, if listening enabled (default is false). . Protected Attributes; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClas",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:699,access,access,699,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,1,['access'],['access']
Security,﻿. SOFA API: sofa::core::objectmodel::BaseObjectDescription::Attribute Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::core::objectmodel::BaseObjectDescription::Attribute Class Reference . #include <BaseObjectDescription.h>. Protected Attributes; std::string value;  ; bool accessed;  . Public Member Functions;  Attribute ();  ;  Attribute (const std::string &v);  ; void operator= (const std::string &v);  ; void operator= (const char *v);  ;  operator std::string () const;  ; const char * c_str () const;  ; bool isAccessed () const;  ; void setAccessed (bool v);  . Attribute details. ◆ accessed. bool sofa::core::objectmodel::BaseObjectDescription::Attribute::accessed. mutableprotected . ◆ value. std::string sofa::core::objectmodel::BaseObjectDescription::Attribute::value. protected . Constructor details. ◆ Attribute() [1/2]. sofa::core::objectmodel::BaseObjectDescription::Attribute::Attribute ; (; ). inline . ◆ Attribute() [2/2]. sofa::core::objectmodel::BaseObjectDescription::Attribute::Attribute ; (; const std::string & ; v). inline . Function details. ◆ c_str(). const char* sofa::core::objectmodel::BaseObjectDescription::Attribute::c_str ; (; ); const. inline . ◆ isAccessed(). bool sofa::core::objectmodel::BaseObjectDescription::Attribute::isAccessed ; (; ); const. inline . ◆ operator std::string(). sofa::core::objectmodel::BaseObjectDescription::Attribute::operator std::string ; (; ); const. inline . ◆ operator=() [1/2]. void sofa::core::objectmodel::BaseObjectDescription::Attribute::operator= ; (; const char * ; v). inline . ◆ operator=() [2/2]. void sofa::core::objectmodel::BaseObjectDescription::Attribute::operator= ; (; const std::string & ; v). inline . ◆ setAccessed(). void sofa::core::objectmodel::BaseObjectDescription::Attribute::setAccessed ; (; bool ; v). inline . sofacoreobjectmodelBaseObjectDescriptionAttribute; Generated on Mon Nov,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description_1_1_attribute.html:396,access,accessed,396,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description_1_1_attribute.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object_description_1_1_attribute.html,3,['access'],['accessed']
Security,"﻿. SOFA API: sofa::core::objectmodel::Data< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::objectmodel::Data< T > Class Template Reference . #include <Data.h>; Container that holds a variable for a component. ; More... Inheritance diagram for sofa::core::objectmodel::Data< T >:. [legend]; Detailed Description; template<class T = void*>; class sofa::core::objectmodel::Data< T >; Container that holds a variable for a component. ; This is a fundamental class template in Sofa. Data are used to encapsulated member variables of Sofa components (i.e. classes that somehow inherit from Base) in order to access them dynamically and generically: briefly, Data can be retrieved at run-time by their name, and they can be assigned a value from a string, or be printed as a string.; More concretely, from the perspective of XML scene files, each Data declared in a component corresponds to an attribute of this component.; Example ; If a component Foo has a boolean parameter bar, it does not simply declares it as bool m_bar, but rather like this:; Data<bool> d_bar;; sofa::core::objectmodel::Data< bool >template class SOFA_CORE_API Data< bool >Definition: Data.cpp:59; Then, this Data must be initialized to provide its name and default value. This is typically done in the initialization list of each constructor of the component, using the helper function Base::initData():; Foo::Foo(): d_bar(initData(&d_bar, true, ""bar"", ""Here is a little description of this Data."")) {; // ...; }; And this Data can be assigned a value in XML scene files like so: <Foo bar=""false""/>; . Classes; class  InitData;  This internal class is used by the initData() methods to store initialization parameters of a Data. More...;  . Public Attributes; int m_counter;  Number of changes ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html:840,access,access,840,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_data.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::core::objectmodel::WriteAccessWithRawPtr Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::core::objectmodel::WriteAccessWithRawPtr Class Reference . #include <BaseData.h>; Detailed Description; A WriteAccessWithRawPtr is a RAII class, holding a reference to a given container and providing access to its data through a non-const void* ptr taking care of the beginEdit/endEdit pairs.; Advantadges of using a WriteAccessWithRawPtr are :. It can be faster that the default methods and operators of the container, as verifications and changes notifications can be handled in the accessor's constructor and destructor instead of at each item access. . Public Attributes; void * ptr { nullptr };  . Public Member Functions;  WriteAccessWithRawPtr (BaseData *data);  ;  ~WriteAccessWithRawPtr ();  . Attribute details. ◆ ptr. void* sofa::core::objectmodel::WriteAccessWithRawPtr::ptr { nullptr }. Constructor details. ◆ WriteAccessWithRawPtr(). sofa::core::objectmodel::WriteAccessWithRawPtr::WriteAccessWithRawPtr ; (; BaseData * ; data). inlineexplicit . ◆ ~WriteAccessWithRawPtr(). sofa::core::objectmodel::WriteAccessWithRawPtr::~WriteAccessWithRawPtr ; (; ). inline . sofacoreobjectmodelWriteAccessWithRawPtr; Generated on Mon Nov 11 2024 03:15:53 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_write_access_with_raw_ptr.html:427,access,access,427,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_write_access_with_raw_ptr.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_write_access_with_raw_ptr.html,3,['access'],"['access', 'accessor']"
Security,"﻿. SOFA API: sofa::core::objectmodel::lifecycle::RemovedData Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::core::objectmodel::lifecycle::RemovedData Class Reference . #include <RemovedData.h>. Inheritance diagram for sofa::core::objectmodel::lifecycle::RemovedData:. [legend]; Detailed Description; Placeholder for a Data<T> to indicate a Data is now removed; This will also register the data name into a dedicated structure of Base object so a warning will be issued if users continue accessing it;; Use case: RemovedData d_sofaIsGreatM(this, ""v23.06"", ""v23.12"", ""sofaIsGreat"", """") . Public Member Functions;  RemovedData (Base *b, const std::string &deprecationVersion, const std::string &removalVersion, const std::string &name, const std::string &helptext);  ;  Public Member Functions inherited from sofa::core::objectmodel::lifecycle::DeprecatedData;  DeprecatedData (Base *b, const std::string &deprecationVersion, const std::string &removalVersion, const std::string &name, const std::string &helptext);  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::lifecycle::DeprecatedData; std::string m_deprecationVersion;  ; std::string m_removalVersion;  ; std::string m_name;  ; std::string m_helptext;  ; bool m_isRemoved;  . Constructor details. ◆ RemovedData(). sofa::core::objectmodel::lifecycle::RemovedData::RemovedData ; (; Base * ; b, . const std::string & ; deprecationVersion, . const std::string & ; removalVersion, . const std::string & ; name, . const std::string & ; helptext . ). inline . sofacoreobjectmodellifecycleRemovedData; Generated on Mon Nov 11 2024 03:16:01 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1lifecycle_1_1_removed_data.html:586,access,accessing,586,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1lifecycle_1_1_removed_data.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1lifecycle_1_1_removed_data.html,1,['access'],['accessing']
Security,"﻿. SOFA API: sofa::core::topology::TopologyModifier Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::core::topology::TopologyModifier Class Reference . #include <BaseTopology.h>. Inheritance diagram for sofa::core::topology::TopologyModifier:. [legend]; Detailed Description; A class that contains a set of low-level methods that perform topological changes . Protected Attributes; TopologyContainer * m_topologyContainer;  Contains the actual topology data and give access to it (nature of these data heavily depends on the kind of topology). More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (TopologyModifier, BaseTopologyObject);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void propagateStateChanges ();  Called by a topology to warn the Mechanical Object component that points have been added or will be removed. More...;  ; virtual void propagateTopologicalChanges ();  Called by a topology to warn specific topologies linked to it that TopologyChange objects happened. More...;  ; virtual void notifyEndingEvent ();  notify the end for the current sequence of topol",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_modifier.html:618,access,access,618,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_modifier.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_modifier.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::core::visual Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Enumerations |; Functions |; Variables . sofa::core::visual Namespace Reference . Namespaces;  visualparams;  . Classes; class  DisplayFlags;  Class which describes the display of components in a hierarchical fashion DisplayFlags are conveyed by the VisualParams, and therefore are accessible in a read only fashion inside a Component draw method. A component can tell if it should draw something on the display by looking at the current state of the displayFlags through the VisualParams parameter. DisplayFlags are embeddable inside a Data and can therefore read/write their state from a stream. More...;  ; class  FlagTreeItem;  ; class  Shader;  A basic interface to define a Shader for different system (OpenGL, DirectX, ...). More...;  ; class  ShaderElement;  A basic interface to define an element to be used with a Shader. More...;  ; struct  tristate;  ; class  VisualLoop;  ; class  VisualManager;  ; class  VisualModel;  An interface which all VisualModel inherit. More...;  ; class  VisualParams;  Class gathering parameters used by visual components and by the draw method of each component. Transmitted by visitors. More...;  ; class  VisualState;  . Enumerations; enum  { API_OpenGL = 0; , API_OGRE = 1; , API_OpenSceneGraph = 2; , API_OpenSG = 3; };  The enumeration used to describe potentially supported graphics API. More...;  . Functions; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const FlagTreeItem &root);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, FlagTreeItem &root);  ; SOFA_CORE_API std::ostream & operator<< (std::ostream &os, const DisplayFlags &flags);  ; SOFA_CORE_API std::istream & operator>> (std::istream &in, DisplayFlags &flags);  ; DisplayFlags merge_displayFlags (const DisplayFlags &previous, const DisplayFlags &current);  ; DisplayFlags difference_displayFlags (const Dis",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html:434,access,accessible,434,api/master/sofa/html/namespacesofa_1_1core_1_1visual.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1core_1_1visual.html,1,['access'],['accessible']
Security,"﻿. SOFA API: sofa::core::visual::DisplayFlags Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Friends |; List of all members . sofa::core::visual::DisplayFlags Class Reference . #include <DisplayFlags.h>; Class which describes the display of components in a hierarchical fashion DisplayFlags are conveyed by the VisualParams, and therefore are accessible in a read only fashion inside a Component draw method. A component can tell if it should draw something on the display by looking at the current state of the displayFlags through the VisualParams parameter. DisplayFlags are embeddable inside a Data and can therefore read/write their state from a stream. ; More...; Detailed Description; Class which describes the display of components in a hierarchical fashion DisplayFlags are conveyed by the VisualParams, and therefore are accessible in a read only fashion inside a Component draw method. A component can tell if it should draw something on the display by looking at the current state of the displayFlags through the VisualParams parameter. DisplayFlags are embeddable inside a Data and can therefore read/write their state from a stream. ; root |–all | |–visual | | |–visualmodels | |–behavior | | |–behaviormodels | | |–forcefields | | |–interactionforcefields | |–collision | | |–collisionmodels | | |–boundingcollisionmodels | |–mapping | | |–visualmappings | | |–mechanicalmappings |–options | |–advancedrendering | |–wireframe | |–normals . Protected Attributes; FlagTreeItem m_root;  ; FlagTreeItem m_showAll;  ; FlagTreeItem m_showVisual;  ; FlagTreeItem m_showVisualModels;  ; FlagTreeItem m_showBehavior;  ; FlagTreeItem m_showBehaviorModels;  ; FlagTreeItem m_showForceFields;  ; FlagTreeItem m_showInteractionForceFields;  ; FlagTreeItem m_showCollision;  ; FlagTreeItem m_showCollisionModels;  ; FlagTreeItem m_showBoundingCollisionModels;  ; FlagTreeItem m_showDetectionOutputs;  ; Fl",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_display_flags.html:438,access,accessible,438,api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_display_flags.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_display_flags.html,2,['access'],['accessible']
Security,﻿. SOFA API: sofa::defaulttype::TypeInfoId Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Member Functions |; List of all members . sofa::defaulttype::TypeInfoId Class Reference . #include <TypeInfoID.h>; Generates unique id for types. ; More...; Detailed Description; Generates unique id for types. . Compared to type_info.hash_code() this version is guaranteed to be in constant time; The common use case is get the type id to access a full AbstractTypeInfo from the TypeInfoRegistry. Example: TypeInfoId& shortinfo = TypeInfoId::getTypeId<double>(); AbstractTypeInfo* info = TypeInfoRegistry::Get(shortinfo.id); info->getName() . Public Attributes; int id;  ; const std::type_info & nfo;  . Static Public Member Functions; template<class T > ; static const TypeInfoId & GetTypeId ();  . Attribute details. ◆ id. int sofa::defaulttype::TypeInfoId::id. ◆ nfo. const std::type_info& sofa::defaulttype::TypeInfoId::nfo. Function details. ◆ GetTypeId(). template<class T > . static const TypeInfoId& sofa::defaulttype::TypeInfoId::GetTypeId ; (; ). inlinestatic . sofadefaulttypeTypeInfoId; Generated on Mon Nov 11 2024 03:18:53 for SOFA API by 1.9.1 . ,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_type_info_id.html:508,access,access,508,api/master/sofa/html/classsofa_1_1defaulttype_1_1_type_info_id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_type_info_id.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::defaulttype::TypeInfoRegistry Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::defaulttype::TypeInfoRegistry Class Reference . #include <TypeInfoRegistry.h>; An unique singleton to register all the type info defined in Sofa. ; More...; Detailed Description; An unique singleton to register all the type info defined in Sofa. . AbstractTypeInfo offers an API to manipulate the data content of a specific type without requiring the inner details of the type. Have a look in AbstractTypeInfo for more information.; On its side, TypeInfoRegistry holds all the instances of object that inherits from AbstractTypeInfo; The common use case is get the type id to access a full AbstractTypeInfo from the TypeInfoRegistry. The access is done with a TypeInfoId instance that stores an unique identifier for each data type.; Example of use: TypeInfoId& shortinfo = TypeInfoId::GetTypeId<double>(); AbstractTypeInfo* info = TypeInfoRegistry::Get(shortinfo); info->getName() . Static Public Member Functions; static const AbstractTypeInfo * Get (const TypeInfoId &id);  ; static int Set (const TypeInfoId &tid, AbstractTypeInfo *info, const std::string &compilationTarget);  ; static std::vector< const AbstractTypeInfo * > GetRegisteredTypes (const std::string &target="""");  ; static int AllocateNewTypeId (const std::type_info &nfo);  Returns a new int to generates the corresponding TypeInfoId. More...;  . Function details. ◆ AllocateNewTypeId(). int sofa::defaulttype::TypeInfoRegistry::AllocateNewTypeId ; (; const std::type_info & ; nfo). static . Returns a new int to generates the corresponding TypeInfoId. . ◆ Get(). const AbstractTypeInfo * sofa::defaulttype::TypeInfoRegistry::Get ; (; const TypeInfoId & ; id). static . Returns the abstractTypeInfo corresponding to the provided TypeInfoId If there is none a NamedOnlyTypeInfo object is created an returned . ◆ GetRegisteredTypes",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_type_info_registry.html:778,access,access,778,api/master/sofa/html/classsofa_1_1defaulttype_1_1_type_info_registry.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1defaulttype_1_1_type_info_registry.html,2,['access'],['access']
Security,"﻿. SOFA API: sofa::gl::component::shader::VisualOITDrawVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::gl::component::shader::VisualOITDrawVisitor Class Reference . Inheritance diagram for sofa::gl::component::shader::VisualOITDrawVisitor:. [legend]. Public Attributes; GLSLShader * shader;  ;  Public Attributes inherited from sofa::simulation::VisualDrawVisitor; bool hasShader;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  VisualOITDrawVisitor (core::visual::VisualParams *params, GLSLShader *oitShader);  ; void processVisualModel (simulation::Node *node, core::visual::VisualModel *vm) override;  ;  Public Member Functions inherited from sofa::simulation::VisualDrawVisitor;  VisualDrawVisitor (core::visual::VisualParams *params);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (simulation::Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual void fwdVisualModel (simulation::Node *node, core::visual::VisualModel *vm);  ; void processObject (simulation::Node *node, core::objectmodel::BaseObject *o) override;  ; virtual void bwdVisualModel (simulation::Node *node, core::visual::VisualModel *vm);  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::VisualVisitor;  VisualVisitor (core::visual::VisualParams *params);  ; const char * getCategoryName () const override;  ; bool treeTraversal (TreeTraversalRepetition &repeat) override;  visual visitor must be executed ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_visual_o_i_t_draw_visitor.html:674,access,access,674,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_visual_o_i_t_draw_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_visual_o_i_t_draw_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::gui::qt Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::gui::qt Namespace Reference . Namespaces;  materialdatawidget_h;  Private namespace. ;  ;  qrgbacolorpicker_h;  Private namespace. ;  ;  rgbacolordatawidget_h;  ;  viewer;  . Classes; class  AboutSOFADialog;  ; class  DataFileNameWidget;  ; class  DataWidget;  Abstract Interface of a qwidget which allows to edit a data. More...;  ; class  TDataWidget;  This class is basically the same as DataWidget, except that it takes a template parameter so the actual type of Data can be retrieved through the getData() accessor. In most cases you will need to derive from this class to implement the edition of your data in the GUI. More...;  ; class  QPushButtonUpdater;  ; class  QDisplayDataInfoWidget;  ; class  DisplayFlagWidget;  ; class  DisplayFlagsDataWidget;  ; class  GenericDataWidget;  ; class  GenGraphForm;  ; class  GLPickHandler;  ; class  QDataSeries;  ; class  GraphSetting;  ; class  GraphOptionWidget;  ; class  GraphWidget;  ; class  graph_data_widget_container;  ; class  GraphDataWidget;  ; class  GraphDataWidget_Linear;  ; class  ObjectStateListener;  ; class  GraphListenerQListView;  ; class  GraphVisitor;  ; class  LinkWidget;  Abstract Interface of a qwidget which allows to edit a link. More...;  ; class  QDisplayLinkInfoWidget;  Widget used to display the name of a Link. More...;  ; class  ClickableTextEdit;  ; struct  ModifyObjectFlags;  ; class  ModifyObject;  ; class  BrowserHistoryEntry;  ; class  BrowserHistory;  ; class  SofaEnrichedPage;  ; class  DocBrowser;  ; class  InformationOnPickCallBack;  ; class  ColourPickingRenderCallBack;  ; struct  dataTime;  ; class  PieWidget;  ; class  ChartsWidget;  ; class  QDataDescriptionWidget;  ; class  QDisplayDataWidget;  ; class  QDataSimpleEdit;  ; class  QPoissonRatioWidget;  ; class  QDisplayLinkWidget;  ; c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html:717,access,accessor,717,api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1gui_1_1qt.html,1,['access'],['accessor']
Security,"﻿. SOFA API: sofa::gui::qt::LinkWidget Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Signals |; Public Slots |; List of all members . sofa::gui::qt::LinkWidget Class Referenceabstract . #include <LinkWidget.h>; Abstract Interface of a qwidget which allows to edit a link. ; More... Inheritance diagram for sofa::gui::qt::LinkWidget:. [legend]; Detailed Description; Abstract Interface of a qwidget which allows to edit a link. . Classes; struct  CreatorArgument;  . Protected Attributes; core::objectmodel::BaseLink * baseLink;  ; bool dirty;  ; int counter;  . Public Member Functions;  LinkWidget (QWidget *parent, const char *, MyLink *l);  ;  ~LinkWidget () override;  ; virtual void setLink (MyLink *d);  ; const core::objectmodel::BaseLink * getBaseLink () const;  BaseLink pointer accessor function. More...;  ; core::objectmodel::BaseLink * getBaseLink ();  ; void updateVisibility ();  ; bool isDirty ();  ; virtual bool createWidgets ()=0;  ; virtual unsigned int sizeWidget ();  Helper method to give a size. More...;  ; virtual unsigned int numColumnWidget ();  Helper method for column. More...;  . Static Public Member Functions; static LinkWidget * CreateLinkWidget (const LinkWidget::CreatorArgument &dwarg);  . Protected Member Functions; virtual void readFromLink ()=0;  The implementation of this method tells how the widget reads the value of the link. More...;  ; virtual void writeToLink ()=0;  . Signals; void WidgetDirty (bool);  ; void LinkOwnerDirty (bool);  ; void LinkBeingChanged ();  . Public Slots; void updateLinkValue ();  ; void updateWidgetValue ();  ; void setWidgetDirty ();  ; void setWidgetDirty (bool b);  . Attribute details. ◆ baseLink. core::objectmodel::BaseLink* sofa::gui::qt::LinkWidget::baseLink. protected . ◆ counter. int sofa::gui::qt::LinkWidget::counter. protected . ◆ dirty. b",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_link_widget.html:959,access,accessor,959,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_link_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_link_widget.html,1,['access'],['accessor']
Security,"﻿. SOFA API: sofa::gui::qt::TDataWidget< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::gui::qt::TDataWidget< T > Class Template Reference . #include <DataWidget.h>; This class is basically the same as DataWidget, except that it takes a template parameter so the actual type of Data can be retrieved through the getData() accessor. In most cases you will need to derive from this class to implement the edition of your data in the GUI. ; More... Inheritance diagram for sofa::gui::qt::TDataWidget< T >:. [legend]; Detailed Description; template<class T>; class sofa::gui::qt::TDataWidget< T >; This class is basically the same as DataWidget, except that it takes a template parameter so the actual type of Data can be retrieved through the getData() accessor. In most cases you will need to derive from this class to implement the edition of your data in the GUI. . Protected Attributes; MyTData * Tdata;  ;  Protected Attributes inherited from sofa::gui::qt::DataWidget; core::objectmodel::BaseData * baseData;  ; bool dirty;  ; int counter;  ; bool m_isFilled;  tell if DataWidget has been filled from Data true by default More...;  ; bool m_toFill;  bool to warn action is needed to fill Data, false by default More...;  . Public Member Functions;  TDataWidget (QWidget *parent, const char *name, MyTData *d);  ; sofa::core::objectmodel::Data< T > * getData ();  ; const sofa::core::objectmodel::Data< T > * getData () const;  ; virtual void setData (MyTData *d);  ; virtual void setData (MyData *d);  ;  Public Member Functions inherited from sofa::gui::qt::DataWidget;  DataWidget (QWidget *parent, const char *name, MyData *d);  ;  ~DataWidget () override;  ; virtual void setData (MyData *d);  ; const core::objectmodel::BaseData * getBaseData () const;  BaseData pointer accessor function. More...;  ; core::objectmodel::Ba",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_t_data_widget.html:492,access,accessor,492,api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_t_data_widget.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1qt_1_1_t_data_widget.html,2,['access'],['accessor']
Security,"﻿. SOFA API: sofa::helper Namespace Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables . sofa::helper Namespace Reference . Namespaces;  advancedtimer;  ;  console;  ;  io;  This allow MeshTrian to interact with the messaging system. ;  ;  lifecycle;  ;  logging;  This allow Base object to interact with the messaging system. ;  ;  messaging;  ;  polygon_cube_intersection;  ;  system;  ;  visual;  . Classes; class  ReadAccessor< core::objectmodel::Data< T > >;  ; class  WriteAccessor< core::objectmodel::Data< T > >;  ; class  WriteOnlyAccessor< core::objectmodel::Data< T > >;  The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. More...;  ; class  ReadAccessor;  ; class  ReadAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  ReadAccessorVector;  ; class  WriteAccessor;  ; class  WriteAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  WriteAccessorVector;  WriteAccessor implementation class for vector types. More...;  ; class  WriteOnlyAccessor;  ; class  WriteOnlyAccessor< VectorLikeType, std::enable_if_t< sofa::type::trait::is_vector< VectorLikeType >::value > >;  ; class  TimerData;  ; class  Record;  ; class  StepData;  ; class  AdvancedTimer;  ; class  BackTrace;  ; class  ColorMap;  ; class  Decompose;  ; class  NoArgument;  Allow us to use BaseCreator and Factory without using any Arguments. More...;  ; class  BaseCreator;  ; class  Factory;  ; class  Creator;  ; class  CreatorFn;  ; class  BasicDispatcher;  ; class  FnDispatcher;  ; class  SingletonFnDispatcher;  ; struct  GenerateRigidInfo;  storing rigid infos needed for RigidMass More...;  ; struct  IndexOpenMP;  ; struct  CleanupCheck;  ; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:727,access,access,727,api/master/sofa/html/namespacesofa_1_1helper.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::helper::CompareIndirect< Container > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::helper::CompareIndirect< Container > Struct Template Reference . #include <SortedPermutation.h>; Detailed Description; template<class Container>; struct sofa::helper::CompareIndirect< Container >; Comparison operator used to compute sorted permutations of a container. The comparison operator of two indices compares the corresponding entries of the container. The container must allow random access. . Public Attributes; const Container & values;  . Public Member Functions;  CompareIndirect (const Container &v);  ; bool operator() (unsigned i, unsigned j) const;  . Attribute details. ◆ values. template<class Container > . const Container& sofa::helper::CompareIndirect< Container >::values. Constructor details. ◆ CompareIndirect(). template<class Container > . sofa::helper::CompareIndirect< Container >::CompareIndirect ; (; const Container & ; v). inline . Function details. ◆ operator()(). template<class Container > . bool sofa::helper::CompareIndirect< Container >::operator() ; (; unsigned ; i, . unsigned ; j . ); const. inline . sofahelperCompareIndirect; Generated on Mon Nov 11 2024 03:31:02 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1helper_1_1_compare_indirect.html:626,access,access,626,api/master/sofa/html/structsofa_1_1helper_1_1_compare_indirect.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1helper_1_1_compare_indirect.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::helper::ReadAccessor< T, Enable > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::helper::ReadAccessor< T, Enable > Class Template Reference . #include <ReadAccessor.h>. Inheritance diagram for sofa::helper::ReadAccessor< T, Enable >:. [legend]; Detailed Description; template<class T, class Enable = void>; class sofa::helper::ReadAccessor< T, Enable >; A ReadAccessor is a proxy class, holding a reference to a given container and providing access to its data, using an unified interface (similar to std::vector), hiding API differences within containers.; Other advantadges of using a ReadAccessor are :. It can be faster that the default methods and operators of the container, as verifications and changes notifications can be handled in the accessor's constructor and destructor instead of at each item access.; No modifications to the container will be done by mistake; Accesses can be logged for debugging or task dependencies analysis. The default implementation provides only minimal set of methods and operators, sufficient for scalar types but which should be overloaded for more complex types. Various template specializations are typically used, especially for core::objectmodel::Data<T> . Protected Attributes; const container_type * vref;  . Public Member Functions;  ReadAccessor (const container_type &container);  ; const_reference ref () const;  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  . Attribute details. ◆ vref. template<class T , class Enable = void> . const container_type* sofa::helper::ReadAccessor< T, Enable >::vref. protected . Constructor details. ◆ ReadAccessor(). template<class T , class Enable = void> . sofa::helper::ReadAccessor< T, Enable >::ReadAccessor ; (; const container_type & ; container). inlineexplicit . Function details. ◆ ope",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html:593,access,access,593,api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_read_accessor.html,3,['access'],"['access', 'accessor']"
Security,"﻿. SOFA API: sofa::helper::WriteAccessor< T, Enable > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::helper::WriteAccessor< T, Enable > Class Template Reference . #include <WriteAccessor.h>. Inheritance diagram for sofa::helper::WriteAccessor< T, Enable >:. [legend]; Detailed Description; template<class T, class Enable = void>; class sofa::helper::WriteAccessor< T, Enable >; A WriteAccessor is a proxy class, holding a reference to a given container and providing access to its data, using an unified interface (similar to std::vector), hiding API differences within some containers.; Other advantadges of using a WriteAccessor are :. It can be faster that the default methods and operators of the container, as verifications and changes notifications can be handled in the accessor's constructor and destructor instead of at each item access.; Accesses can be logged for debugging or task dependencies analysis. The default implementation provides only minimal set of methods and operators, sufficient for scalar types but which should be overloaded for more complex types. Various template specializations are typically used, especially for core::objectmodel::Data<T> . Protected Attributes; container_type * vref;  . Public Member Functions;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Attribute details. ◆ vref. template<class T , class Enable = void> . container_type* sofa::helper::WriteAccessor< T, Enable >::vref. protected . Constructor details. ◆ WriteAccessor(). template<class T , class Enable = void> . sofa::helper::WriteAccessor< T, Enable >:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html:599,access,access,599,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor.html,3,['access'],"['access', 'accessor']"
Security,"﻿. SOFA API: sofa::helper::WriteAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::WriteAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>. Inheritance diagram for sofa::helper::WriteAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteAccessor< core::objectmodel::Data< T > >; Read/Write Accessor. The Data is updated before being accessible. This means an expensive chain of Data link and Engine updates can be called For a pure write only Accessor, prefer WriteOnlyAccessor< core::objectmodel::Data<T> > Warningthe Data is updated (if needed) only by the Accessor constructor . Protected Attributes; data_container_type & data;  ;  Protected Attributes inherited from sofa::helper::WriteAccessor< T, Enable >; container_type * vref;  . Public Member Functions;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);  . Protected Member Functions;  WriteAccessor (container_type *c, data_container_type &d);  . Attribute details. ◆ data. template<class T > . data_container_type& sofa::helper::WriteAccessor< core::objectmodel::Data< T > >::data. protected . Constructor details. ◆ WriteAcces",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:640,access,accessible,640,api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,1,['access'],['accessible']
Security,"﻿. SOFA API: sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > > Class Template Reference . #include <Data.h>; The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. ; More... Inheritance diagram for sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >:. [legend]; Detailed Description; template<class T>; class sofa::helper::WriteOnlyAccessor< core::objectmodel::Data< T > >; The WriteOnlyAccessor provides an access to the Data without triggering an engine update. This should be the preferred writeAccessor for most of the cases as it avoids unnecessary Data updates. ; Warningread access to the Data is NOT up-to-date . Public Member Functions;  WriteOnlyAccessor (const WriteOnlyAccessor &)=delete;  ; WriteOnlyAccessor & operator= (const WriteOnlyAccessor &)=delete;  ;  WriteOnlyAccessor (data_container_type &d);  ;  WriteOnlyAccessor (data_container_type *d);  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< core::objectmodel::Data< T > >;  WriteAccessor (const WriteAccessor &)=delete;  ; WriteAccessor & operator= (const WriteAccessor &)=delete;  ;  WriteAccessor (data_container_type &d);  ;  WriteAccessor (data_container_type *d);  ;  ~WriteAccessor ();  ;  Public Member Functions inherited from sofa::helper::WriteAccessor< T, Enable >;  WriteAccessor (container_type &container);  ; const_reference ref () const;  ; reference wref ();  ;  operator const_reference () const;  ; const_pointer operator-> () const;  ; const_reference operator* () const;  ;  operator reference ();  ; pointer operator-> ();  ; reference operator* ();  ; template<class T2 > ; void operator= (const T2 &v);",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html:370,access,access,370,api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_write_only_accessor_3_01core_1_1objectmodel_1_1_data_3_01_t_01_4_01_4.html,3,['access'],['access']
Security,"﻿. SOFA API: sofa::helper::system::thread::CircularQueue< T, StoragePolicy, ThreadAccessPolicy > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::helper::system::thread::CircularQueue< T, StoragePolicy, ThreadAccessPolicy > Class Template Reference . #include <CircularQueue.h>. Inheritance diagram for sofa::helper::system::thread::CircularQueue< T, StoragePolicy, ThreadAccessPolicy >:. [legend]; Detailed Description; template<class T, template< class U > class StoragePolicy, class ThreadAccessPolicy>; class sofa::helper::system::thread::CircularQueue< T, StoragePolicy, ThreadAccessPolicy >; This class implements a policy-based circular queue. The template parameter ThreadAccessPolicy allows to customize access to the array according to thread-safety requirements. . Public Member Functions;  CircularQueue ();  ;  ~CircularQueue ();  ; bool push (const T &item);  ; bool pop (T &item, bool clear=true);  ; bool isEmpty () const;  ; unsigned size () const;  ; bool isFull () const;  ; unsigned skip (unsigned maxsize, bool clear=true);  ; template<class OutputIterator > ; unsigned pop (OutputIterator out, unsigned maxsize, bool clear=true);  . Constructor details. ◆ CircularQueue(). template<class T , template< class U > class StoragePolicy, class ThreadAccessPolicy > . sofa::helper::system::thread::CircularQueue< T, StoragePolicy, ThreadAccessPolicy >::CircularQueue. ◆ ~CircularQueue(). template<class T , template< class U > class StoragePolicy, class ThreadAccessPolicy > . sofa::helper::system::thread::CircularQueue< T, StoragePolicy, ThreadAccessPolicy >::~CircularQueue. Function details. ◆ isEmpty(). template<class T , template< class U > class StoragePolicy, class ThreadAccessPolicy > . bool sofa::helper::system::thread::CircularQueue< T, StoragePolicy, ThreadAccessPolicy >::isEmpty. ◆ isFull(). template<class T , template< class U > class StoragePolicy, class Thre",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1thread_1_1_circular_queue.html:819,access,access,819,api/master/sofa/html/classsofa_1_1helper_1_1system_1_1thread_1_1_circular_queue.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1system_1_1thread_1_1_circular_queue.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager > Class Template Reference . #include <integer_id.h>. Inheritance diagram for sofa::helper::vector_id< T, TIndex, CheckIndices, MemoryManager >:. [legend]. Public Member Functions;  vector_id ();  Basic constructor. More...;  ;  vector_id (Size n, const T &value);  Constructor. More...;  ;  vector_id (int n, const T &value);  Constructor. More...;  ;  vector_id (long n, const T &value);  Constructor. More...;  ;  vector_id (Size n);  Constructor. More...;  ;  vector_id (const std::vector< T > &x);  Constructor. More...;  ;  vector_id (const_iterator first, const_iterator last);  Constructor. More...;  ; reference at (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference at (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator() (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator() (Index n) const;  Read-only random access, with explicit Index. More...;  ; reference operator[] (Index n);  Read/write random access, with explicit Index. More...;  ; const_reference operator[] (Index n) const;  Read-only random access. More...;  ; Index push_back (const_reference v);  ;  Public Member Functions inherited from sofa::type::vector< T, MemoryManager >;  vector ();  Basic constructor. More...;  ;  vector (Size n, const T &value);  Constructor. More...;  ;  vector (Size n);  Constructor. More...;  ;  vector (const std::vector< T, Alloc > &x);  Constructor. More...;  ;  vector (const std::initializer_list< T > &t);  Brace initializer constructor. More...;  ;  vector (std::vector< T, Alloc > &&v);  Move constructor. More...;  ; vector & operator= (c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html:976,access,access,976,api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1vector__id.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::linearalgebra::BaseMatrix Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Member Functions |; Friends |; List of all members . sofa::linearalgebra::BaseMatrix Class Referenceabstract . #include <BaseMatrix.h>. Inheritance diagram for sofa::linearalgebra::BaseMatrix:. [legend]; Detailed Description; Generic matrix API, allowing to fill and use a matrix independently of the linear algebra library in use.; Note that accessing values using this class is rather slow and should only be used in codes where the provided genericity is necessary. . Classes; class  BlockAccessor;  ; class  BlockConstAccessor;  ; class  ColBlockConstIterator;  ; class  InternalBlockAccessor;  ; class  InternalColBlockIterator;  ; class  InternalRowBlockIterator;  ; class  RowBlockConstIterator;  . Public Member Functions;  BaseMatrix ();  ; virtual ~BaseMatrix ();  ; virtual Index rowSize (void) const =0;  Number of rows. More...;  ; virtual Index colSize (void) const =0;  Number of columns. More...;  ; Index rows (void) const;  Number of rows (Eigen-compatible API) More...;  ; Index cols (void) const;  Number of columns (Eigen-compatible API) More...;  ; virtual SReal element (Index i, Index j) const =0;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; SReal operator() (Index i, Index j) const;  Read the value of the element at row i, column j (using 0-based indices). Eigen-compatible API. More...;  ; virtual void resize (Index nbRow, Index nbCol)=0;  Resize the matrix and reset all values to 0. More...;  ; virtual void clear ()=0;  Reset all values to 0. More...;  ; virtual void set (Index i, Index j, double v)=0;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, Index col, double v)=0;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; virtual void add (Index row, I",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html:497,access,accessing,497,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_matrix.html,1,['access'],['accessing']
Security,"﻿. SOFA API: sofa::linearalgebra::BaseVector Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::linearalgebra::BaseVector Class Referenceabstract . #include <BaseVector.h>. Inheritance diagram for sofa::linearalgebra::BaseVector:. [legend]; Detailed Description; Generic vector API, allowing to fill and use a vector independently of the linear algebra library in use.; Note that accessing values using this class is rather slow and should only be used in codes where the provided genericity is necessary. . Public Member Functions; virtual ~BaseVector ();  ; virtual Index size (void) const =0;  Number of elements. More...;  ; virtual SReal element (Index i) const =0;  Read the value of element i. More...;  ; virtual void resize (Index dim)=0;  Resize the vector, and reset all values to 0. More...;  ; virtual void clear ()=0;  Reset all values to 0. More...;  ; virtual void set (Index i, SReal v)=0;  Write the value of element i. More...;  ; virtual void add (Index i, SReal v)=0;  Add v to the existing value of element i. More...;  ; virtual const float * elements (Index i0, Index n, float *src) const;  Get the values of n elements, starting at element i0, into given float buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual const double * elements (Index i0, Index n, double *src) const;  Get the values of n elements, starting at element i0, into given double buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual const int * elements (Index i0, Index n, int *src) const;  Get the values of n elements, starting at element i0, into given int buffer, or return the pointer to the data if the in-memory format is compatible. More...;  ; virtual void set (Index i0, Index n, const float *src);  Write the values of n float elements, starting at element i0. ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html:516,access,accessing,516,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_base_vector.html,1,['access'],['accessing']
Security,"﻿. SOFA API: sofa::linearalgebra::EigenBaseSparseMatrix< TReal > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::linearalgebra::EigenBaseSparseMatrix< TReal > Class Template Reference . #include <EigenBaseSparseMatrix.h>. Inheritance diagram for sofa::linearalgebra::EigenBaseSparseMatrix< TReal >:. [legend]; Detailed Description; template<class TReal>; class sofa::linearalgebra::EigenBaseSparseMatrix< TReal >; Sparse matrix based on the Eigen library.; An Eigen::SparseMatrix<Real, RowMajor> matrix is used to store the data in Compressed Row Storage mode. This matrix can not be accessed randomly. Two access modes are implemented.; The first access mode consists in inserting entries in increasing row, increasing column order. Method beginRow(Index index) must be called before any entry can be appended to row i. WarningbeginRow must be called even for empty rows Then insertBack(i,j,value) must be used in for increasing j. There is no need to explicitly end a row. Finally, method compress() must be called after the last entry has been inserted. This is the most efficient access mode.; The second access mode is randow access, but you access an auxiliary matrix. Method add is used to add a value at a given location. Method compress() is then used to transfer this data to the compressed matrix. There is no way to replace an entry, you can only add.; Rows, columns, or the full matrix can be set to zero using the clear* methods. . Public Attributes; CompressedMatrix compressedMatrix;  the compressed matrix More...;  . Protected Attributes; SimplicialCholesky cholesky;  used to factorize the matrix and solve systems using Cholesky method, for symmetric positive definite matrices only. More...;  . Public Member Functions;  EigenBaseSparseMatrix (Index nbRow=0, Index nbCol=0);  ;  EigenBaseSparse",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html:770,access,accessed,770,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_base_sparse_matrix.html,3,['access'],"['access', 'accessed']"
Security,"﻿. SOFA API: sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; List of all members . sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes > Class Template Reference . #include <EigenSparseMatrix.h>. Inheritance diagram for sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >:. [legend]; Detailed Description; template<class InDataTypes, class OutDataTypes>; class sofa::linearalgebra::EigenSparseMatrix< InDataTypes, OutDataTypes >; Variant of EigenBaseSparseMatrix, capable of block-view access. The blocks correspond to matrix blocks of the size of the DataTypes Deriv.; There are two ways of filling the matrix:; Random block access is provided by method wBlock. Use compress() after the last insertion.; Block rows can be efficiently appended using methods beginBlockRow, createBlock, endBlockRow. Use compress() after the last insertion. The rows must be created in increasing index order. The two ways of filling the matrix can not be used at the same time. . Classes; struct  map_traits;  . Protected Attributes; BlockMatMap incomingBlocks;  To store block-view data before it is compressed in optimized format. More...;  ;  Protected Attributes inherited from sofa::linearalgebra::EigenBaseSparseMatrix< OutDataTypes::Real >; SimplicialCholesky cholesky;  used to factorize the matrix and solve systems using Cholesky method, for symmetric positive definite matrices only. More...;  . Public Member Functions;  EigenSparseMatrix (int nbRow=0, int nbCol=0);  ; void resizeBlocks (int nbBlockRows, int nbBlockCols);  Resize the matrix without preserving the data (the matrix is set to zero), with the size given in number of blocks. More...;  ; void addBlock (unsigned row, unsigned co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html:799,access,access,799,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_eigen_sparse_matrix.html,2,['access'],['access']
Security,"﻿. SOFA API: sofa::linearalgebra::SparseMatrix< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members . sofa::linearalgebra::SparseMatrix< T > Class Template Reference . #include <SparseMatrix.h>. Inheritance diagram for sofa::linearalgebra::SparseMatrix< T >:. [legend]; Detailed Description; template<typename T>; class sofa::linearalgebra::SparseMatrix< T >; This is basically a map of map of T, wrapped in a linearalgebra::BaseMatrix interface. The const access methods avoid creating the entries when they do not exist. . Protected Attributes; Data data;  ; Index nRow;  ; Index nCol;  . Public Member Functions;  SparseMatrix ();  ;  SparseMatrix (Index nbRow, Index nbCol);  ; LineIterator begin ();  ; LineIterator end ();  ; LineConstIterator begin () const;  ; LineConstIterator end () const;  ; Line & operator[] (Index i);  ; const Line & operator[] (Index i) const;  ; void resize (Index nbRow, Index nbCol) override;  Resize the matrix and reset all values to 0. More...;  ; Index rowSize (void) const override;  Number of rows. More...;  ; Index colSize (void) const override;  Number of columns. More...;  ; SReal element (Index i, Index j) const override;  Read the value of the element at row i, column j (using 0-based indices) More...;  ; void set (Index i, Index j, double v) override;  Write the value of the element at row i, column j (using 0-based indices) More...;  ; void add (Index i, Index j, double v) override;  Add v to the existing value of the element at row i, column j (using 0-based indices) More...;  ; void clear (Index i, Index j) override;  ; void clearRow (Index i) override;  Reset all the values in row i to 0. More...;  ; void clearCol (Index j) override;  Reset the all values in column j to 0. More...;  ; void clearRowCol (Index i) override;  Reset the value of both r",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html:644,access,access,644,api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1linearalgebra_1_1_sparse_matrix.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::ExportVisualModelOBJVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::ExportVisualModelOBJVisitor Class Reference . #include <ExportVisualModelOBJVisitor.h>. Inheritance diagram for sofa::simulation::ExportVisualModelOBJVisitor:. [legend]. Public Attributes; std::ostream * out;  ; std::ostream * mtl;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Protected Attributes; int ID;  ; sofa::Index vindex;  ; sofa::Index nindex;  ; sofa::Index tindex;  ; int count;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  ExportVisualModelOBJVisitor (const core::ExecParams *params, std::ostream *out);  ;  ExportVisualModelOBJVisitor (const core::ExecParams *params, std::ostream *out, std::ostream *mtl);  ;  ~ExportVisualModelOBJVisitor () override;  ; virtual void processVisualModel (Node *node, core::visual::VisualModel *vm);  ; Result processNodeTopDown (Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeT",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_export_visual_model_o_b_j_visitor.html:660,access,access,660,api/master/sofa/html/classsofa_1_1simulation_1_1_export_visual_model_o_b_j_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_export_visual_model_o_b_j_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::FindByTypeVisitor< T > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::FindByTypeVisitor< T > Class Template Reference . #include <FindByTypeVisitor.h>. Inheritance diagram for sofa::simulation::FindByTypeVisitor< T >:. [legend]; Detailed Description; template<class T>; class sofa::simulation::FindByTypeVisitor< T >; Find all components of a given type and store pointers in a list. . Public Attributes; std::vector< T * > found;  The result of the search: contains pointers to all components of the given type found. More...;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  FindByTypeVisitor (const core::ExecParams *params);  ; Result processNodeTopDown (simulation::Node *node) override;  For each component, if it is of the given type, then put it in the list. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Ali",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_find_by_type_visitor.html:866,access,access,866,api/master/sofa/html/classsofa_1_1simulation_1_1_find_by_type_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_find_by_type_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::InitGnuplotVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::InitGnuplotVisitor Class Reference . #include <ExportGnuplotVisitor.h>. Inheritance diagram for sofa::simulation::InitGnuplotVisitor:. [legend]. Public Attributes; std::string gnuplotDirectory;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  InitGnuplotVisitor (const core::ExecParams *params, std::string dir);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_init_gnuplot_visitor.html:589,access,access,589,api/master/sofa/html/classsofa_1_1simulation_1_1_init_gnuplot_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_init_gnuplot_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::Node Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::simulation::Node Class Referenceabstract . #include <Node.h>. Inheritance diagram for sofa::simulation::Node:. [legend]; Detailed Description; Implements the object (component) management of the core::Context. Contains objects in lists and provides accessors. The other nodes are not visible (unknown scene graph).; AuthorThe SOFA team </www.sofa-framework.org> . Public Attributes; NodeSequence< Node, true > child;  ; NodeSequence< sofa::core::objectmodel::BaseObject, true > object;  ; NodeSequence< sofa::core::BehaviorModel > behaviorModel;  ; NodeSequence< sofa::core::BaseMapping > mapping;  ; NodeSequence< sofa::core::behavior::OdeSolver > solver;  ; NodeSequence< sofa::core::behavior::ConstraintSolver > constraintSolver;  ; NodeSequence< sofa::core::behavior::BaseLinearSolver > linearSolver;  ; NodeSequence< sofa::core::topology::BaseTopologyObject > topologyObject;  ; NodeSequence< sofa::core::behavior::BaseForceField > forceField;  ; NodeSequence< sofa::core::behavior::BaseInteractionForceField > interactionForceField;  ; NodeSequence< sofa::core::behavior::BaseProjectiveConstraintSet > projectiveConstraintSet;  ; NodeSequence< sofa::core::behavior::BaseConstraintSet > constraintSet;  ; NodeSequence< sofa::core::objectmodel::ContextObject > contextObject;  ; NodeSequence< sofa::core::objectmodel::ConfigurationSetting > configurationSetting;  ; NodeSequence< sofa::core::visual::Shader > shaders;  ; NodeSequence< sofa::core::visual::VisualModel > visualModel;  ; NodeSequence< sofa::core::visual::VisualManager > visualManager;  ; NodeSequence< sofa::core::CollisionModel > collisionModel;  ; NodeSequence< sofa::core::objectmodel::BaseObject > unsorted;  ; NodeSingle< sof",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:551,access,accessors,551,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,1,['access'],['accessors']
Security,"﻿. SOFA API: sofa::simulation::NodeSingle< T, duplicate > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::NodeSingle< T, duplicate > Class Template Reference . #include <Node.h>. Inheritance diagram for sofa::simulation::NodeSingle< T, duplicate >:. [legend]; Detailed Description; template<class T, bool duplicate = true>; class sofa::simulation::NodeSingle< T, duplicate >; Class to hold 0-or-1 object. Public access is only readonly using an interface similar to std::vector (size/[]/begin/end), plus an automatic conversion to one pointer. UPDATE: it is now an alias for the Link pointer container . Public Member Functions;  NodeSingle (const BaseLink::InitLink< Node > &init);  ; T * operator-> () const;  ; T & operator* () const;  ;  operator T* () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>;  SingleLink ();  ;  SingleLink (const BaseLink::InitLink< OwnerType > &init);  ;  SingleLink (const BaseLink::InitLink< OwnerType > &init, DestPtr val);  ; virtual ~SingleLink ();  ; void setValidator (ValidatorFn fn);  ; DestType * get () const;  ; void reset ();  ; void set (DestPtr v);  ; void set (DestPtr v, const std::string &path);  ; void setPath (const std::string &path);  ;  operator DestType * () const;  Convenient operators to make a SingleLink appear as a regular pointer. More...;  ; DestType * operator-> () const;  ; DestType & operator* () const;  ; DestPtr operator= (DestPtr v);  ;  Public Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >;  TLink ();  ;  TLink (const InitLink< OwnerType > &init);  ;  ~TLink () override;  ; size_t size () const;  ; bool empty () const;  ; const Container & getValue () const;  ; const_iterator begin () const;  ; const_iterator end () const; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html:531,access,access,531,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::Visitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::Visitor Class Reference . #include <Visitor.h>; Base class for visitors propagated recursively through the scenegraph. ; More... Inheritance diagram for sofa::simulation::Visitor:. [legend]; Detailed Description; Base class for visitors propagated recursively through the scenegraph. . Classes; class  VisitorContext;  . Public Attributes; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Protected Attributes; const sofa::core::ExecParams * params;  . Public Member Functions;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual Result processNodeTopDown (simulation::Node *);  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual const char * getClassName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html:725,access,access,725,api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::VisualComputeBBoxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::VisualComputeBBoxVisitor Class Reference . #include <VisualVisitor.h>. Inheritance diagram for sofa::simulation::VisualComputeBBoxVisitor:. [legend]. Public Attributes; SReal minBBox [3];  ; SReal maxBBox [3];  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  VisualComputeBBoxVisitor (const core::ExecParams *params);  ; virtual void processBehaviorModel (simulation::Node *, core::BehaviorModel *vm);  ; virtual void processMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *vm);  ; virtual void processVisualModel (simulation::Node *, core::visual::VisualModel *vm);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor.html:611,access,access,611,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::VisualDrawVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::VisualDrawVisitor Class Reference . #include <VisualVisitor.h>. Inheritance diagram for sofa::simulation::VisualDrawVisitor:. [legend]. Public Attributes; bool hasShader;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  VisualDrawVisitor (core::visual::VisualParams *params);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (simulation::Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual void fwdVisualModel (simulation::Node *node, core::visual::VisualModel *vm);  ; void processVisualModel (simulation::Node *node, core::visual::VisualModel *vm) override;  ; void processObject (simulation::Node *node, core::objectmodel::BaseObject *o) override;  ; virtual void bwdVisualModel (simulation::Node *node, core::visual::VisualModel *vm);  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::VisualVisitor;  VisualVisitor (core::visual::VisualParams *params);  ; const char * getCategoryName () const override;  ; bool treeTraversal (TreeTraversalRepetition &repeat) override;  visual visitor must be executed as a tree, such as forward and backward orders are coherent More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; vi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html:565,access,access,565,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor Class Reference . #include <MechanicalAccFromFVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor:. [legend]; Detailed Description; Compute accelerations generated by given forces . Public Attributes; sofa::core::MultiVecDerivId a;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAccFromFVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId a);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryNam",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html:745,access,access,745,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_acc_from_f_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor Class Reference . #include <MechanicalAddMBK_ToMatrixVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMBK_ToMatrixVisitor:. [legend]; Detailed Description; Accumulate the entries of a mechanical matrix (mass or stiffness) of the whole scene . Public Attributes; const sofa::core::behavior::MultiMatrixAccessor * matrix;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMBK_ToMatrixVisitor (const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *_matrix);  ; const char * getClassName () const override;  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; bool stopAtMechanicalMapping (simulation::Node *node, core::BaseMapping *map) override;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Nod",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html:837,access,access,837,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_b_k___to_matrix_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor Class Reference . #include <MechanicalAddMDxVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddMDxVisitor:. [legend]; Detailed Description; Accumulate the product of the mass matrix by a given vector. Typically used in implicit integration solved by a Conjugate Gradient algorithm. Note that if a dx vector is given, it is used and propagated by the mappings, Otherwise the current value is used. . Public Attributes; sofa::core::MultiVecDerivId res;  ; sofa::core::MultiVecDerivId dx;  ; SReal factor;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddMDxVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, sofa::core::MultiVecDerivId dx, SReal factor);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; bool isThreadSafe () const override;  Specify wheth",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html:1000,access,access,1000,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_m_dx_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalAddSeparateGravityVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalAddSeparateGravityVisitor Class Reference . #include <MechanicalAddSeparateGravityVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalAddSeparateGravityVisitor:. [legend]; Detailed Description; Add dt*mass*Gravity to the velocity This is called if the mass wants to be added separately to the mm from the other forces . Public Attributes; sofa::core::MultiVecDerivId res;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalAddSeparateGravityVisitor (const sofa::core::MechanicalParams *m_mparams, sofa::core::MultiVecDerivId res);  ; Result fwdMass (simulation::Node *, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html:863,access,access,863,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_add_separate_gravity_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalApplyConstraintsVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalApplyConstraintsVisitor Class Reference . #include <MechanicalApplyConstraintsVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalApplyConstraintsVisitor:. [legend]; Detailed Description; Apply the constraints as filters to the given vector. This works for simple independent constraints, like maintaining a fixed point. . Public Attributes; sofa::core::MultiVecDerivId res;  ; double ** W;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalApplyConstraintsVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, double **W=nullptr);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html:880,access,access,880,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_constraints_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalApplyProjectiveConstraint_ToMatrixVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalApplyProjectiveConstraint_ToMatrixVisitor Class Reference . #include <MechanicalApplyProjectiveConstraint_ToMatrixVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalApplyProjectiveConstraint_ToMatrixVisitor:. [legend]; Detailed Description; Apply projective constraints of the whole scene . Public Attributes; const sofa::core::behavior::MultiMatrixAccessor * matrix;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalApplyProjectiveConstraint_ToMatrixVisitor (const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *_matrix);  ; virtual const char * getClassName () const override;  ; virtual Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNode",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html:876,access,access,876,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_apply_projective_constraint___to_matrix_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitor Class Reference . #include <MechanicalBeginIntegrationVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalBeginIntegrationVisitor:. [legend]; Detailed Description; Visitor used to prepare a time integration step. Typically, does nothing. . Public Attributes; SReal dt;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalBeginIntegrationVisitor (const sofa::core::ExecParams *_params, SReal _dt);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const over",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html:782,access,access,782,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_begin_integration_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalComputeContactForceVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalComputeContactForceVisitor Class Reference . #include <MechanicalComputeContactForceVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalComputeContactForceVisitor:. [legend]; Detailed Description; Accumulate only the contact forces computed in applyContactForce. This action is typically called after a MechanicalResetForceVisitor. . Public Attributes; sofa::core::MultiVecDerivId res;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalComputeContactForceVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::Exe",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html:878,access,access,878,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_contact_force_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalComputeDfVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalComputeDfVisitor Class Reference . #include <MechanicalComputeDfVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalComputeDfVisitor:. [legend]; Detailed Description; Compute the variation of force corresponding to a variation of position. This action is typically called after a MechanicalPropagateDxVisitor. . Public Attributes; sofa::core::MultiVecDerivId res;  ; bool accumulate;  Accumulate everything back to the DOFs through the mappings. More...;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalComputeDfVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res);  ;  MechanicalComputeDfVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, bool accumulate);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, sofa::core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Pr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html:937,access,access,937,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_df_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalComputeForceVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalComputeForceVisitor Class Reference . #include <MechanicalComputeForceVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalComputeForceVisitor:. [legend]; Detailed Description; Accumulate the forces (internal and interactions). This action is typically called after a MechanicalResetForceVisitor. . Public Attributes; sofa::core::MultiVecDerivId res;  ; bool accumulate;  Accumulate everything back to the DOFs through the mappings. More...;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalComputeForceVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId res, bool accumulate=true);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdForceField (simulation::Node *, sofa::core::behavior::BaseForceField *ff) override;  Process all the BaseForceField. More...;  ; void bwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; const char * getClassName () co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html:926,access,access,926,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_force_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalComputeGeometricStiffness Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalComputeGeometricStiffness Class Reference . #include <MechanicalComputeGeometricStiffness.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalComputeGeometricStiffness:. [legend]; Detailed Description; Compute the mapping geometric stiffness matrices. This action must be call before BaseMapping::getK() . Public Attributes; sofa::core::ConstMultiVecDerivId childForce;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalComputeGeometricStiffness (const sofa::core::MechanicalParams *mparams, sofa::core::ConstMultiVecDerivId childForce);  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechani",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html:853,access,access,853,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_compute_geometric_stiffness.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalEndIntegrationVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalEndIntegrationVisitor Class Reference . #include <MechanicalEndIntegrationVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalEndIntegrationVisitor:. [legend]; Detailed Description; Visitor applied after a time step has been applied. Does typically nothing. . Public Attributes; SReal dt;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalEndIntegrationVisitor (const sofa::core::ExecParams *_params, SReal _dt);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html:776,access,access,776,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_end_integration_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalGetConstraintJacobianVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalGetConstraintJacobianVisitor Class Reference . #include <MechanicalGetConstraintJacobianVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalGetConstraintJacobianVisitor:. [legend]; Detailed Description; Compute the size of a mechanical matrix (mass or stiffness) of the whole scene . Public Attributes; const core::ConstraintParams * cparams;  ; linearalgebra::BaseMatrix * J;  ; const sofa::core::behavior::MultiMatrixAccessor * matrix;  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalGetConstraintJacobianVisitor (const core::ConstraintParams *cparams, linearalgebra::BaseMatrix *_J, const sofa::core::behavior::MultiMatrixAccessor *_matrix=nullptr);  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *ms) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simul",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html:947,access,access,947,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_constraint_jacobian_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalGetMatrixDimensionVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalGetMatrixDimensionVisitor Class Reference . #include <MechanicalGetMatrixDimensionVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalGetMatrixDimensionVisitor:. [legend]; Detailed Description; Compute the size of a mechanical matrix (mass or stiffness) of the whole scene . Public Attributes; sofa::Size *const nbRow;  ; sofa::Size *const nbCol;  ; sofa::core::behavior::MultiMatrixAccessor * matrix;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalGetMatrixDimensionVisitor (const core::ExecParams *params, sofa::Size *const _nbRow, sofa::Size *const _nbCol, sofa::core::behavior::MultiMatrixAccessor *_matrix=nullptr);  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *ms) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, core::BaseMapping *mm) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *ms) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html:893,access,access,893,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_matrix_dimension_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalGetNonDiagonalMassesCountVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalGetNonDiagonalMassesCountVisitor Class Reference . #include <MechanicalGetNonDiagonalMassesCountVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalGetNonDiagonalMassesCountVisitor:. [legend]; Detailed Description; Count the number of masses which are not diagonal . Public Attributes; sofa::Size *const m_nbNonDiagonalMassesPtr { nullptr };  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalGetNonDiagonalMassesCountVisitor (const sofa::core::MechanicalParams *mparams, SReal *result)=delete;  ;  MechanicalGetNonDiagonalMassesCountVisitor (const sofa::core::MechanicalParams *mparams, sofa::Size *result);  ; Result fwdMass (VisitorContext *ctx, sofa::core::behavior::BaseMass *mass) override;  Process the BaseMass. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result p",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html:840,access,access,840,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_get_non_diagonal_masses_count_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalIntegrationVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalIntegrationVisitor Class Reference . #include <MechanicalIntegrationVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalIntegrationVisitor:. [legend]; Detailed Description; Visitor used to do a time integration step using OdeSolvers . Public Attributes; SReal dt;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalIntegrationVisitor (const sofa::core::ExecParams *m_params, SReal _dt);  ; Result fwdOdeSolver (simulation::Node *node, sofa::core::behavior::OdeSolver *obj) override;  Process the OdeSolver. More...;  ; Result fwdInteractionForceField (simulation::Node *, sofa::core::behavior::BaseInteractionForceField *obj) override;  Process all the InteractionForceField. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html:748,access,access,748,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_integration_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalMultiVectorFromBaseVectorVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalMultiVectorFromBaseVectorVisitor Class Reference . #include <MechanicalMultiVectorFromBaseVectorVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalMultiVectorFromBaseVectorVisitor:. [legend]. Public Attributes; const sofa::linearalgebra::BaseVector * src;  ; sofa::core::MultiVecId dest;  ; const sofa::core::behavior::MultiMatrixAccessor * matrix;  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalMultiVectorFromBaseVectorVisitor (const core::ExecParams *params, sofa::core::MultiVecId _dest, const linearalgebra::BaseVector *_src, const sofa::core::behavior::MultiMatrixAccessor *_matrix=nullptr);  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls t",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html:863,access,access,863,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_from_base_vector_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalMultiVectorPeqBaseVectorVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalMultiVectorPeqBaseVectorVisitor Class Reference . #include <MechanicalMultiVectorPeqBaseVectorVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalMultiVectorPeqBaseVectorVisitor:. [legend]. Public Attributes; const sofa::linearalgebra::BaseVector * src;  ; sofa::core::MultiVecDerivId dest;  ; const sofa::core::behavior::MultiMatrixAccessor * matrix;  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalMultiVectorPeqBaseVectorVisitor (const core::ExecParams *params, sofa::core::MultiVecDerivId _dest, const linearalgebra::BaseVector *_src, const sofa::core::behavior::MultiMatrixAccessor *_matrix=nullptr);  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method ca",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html:864,access,access,864,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_peq_base_vector_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalMultiVectorToBaseVectorVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalMultiVectorToBaseVectorVisitor Class Reference . #include <MechanicalMultiVectorToBaseVectorVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalMultiVectorToBaseVectorVisitor:. [legend]. Public Attributes; sofa::core::ConstMultiVecId src;  ; sofa::linearalgebra::BaseVector * vect;  ; const sofa::core::behavior::MultiMatrixAccessor * matrix;  ; int offset;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalMultiVectorToBaseVectorVisitor (const core::ExecParams *params, sofa::core::ConstMultiVecId _src, linearalgebra::BaseVector *_vect, const sofa::core::behavior::MultiMatrixAccessor *_matrix=nullptr);  ; Result fwdMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* meth",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html:854,access,access,854,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_multi_vector_to_base_vector_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalProjectJacobianMatrixVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalProjectJacobianMatrixVisitor Class Reference . #include <MechanicalProjectJacobianMatrixVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalProjectJacobianMatrixVisitor:. [legend]. Public Attributes; sofa::core::MultiMatrixDerivId cId;  ; SReal t;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalProjectJacobianMatrixVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiMatrixDerivId c=sofa::core::MatrixDerivId::constraintJacobian(), SReal time=0.0);  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html:742,access,access,742,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_jacobian_matrix_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalProjectPositionAndVelocityVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalProjectPositionAndVelocityVisitor Class Reference . #include <MechanicalProjectPositionAndVelocityVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalProjectPositionAndVelocityVisitor:. [legend]. Public Attributes; double t;  ; sofa::core::MultiVecCoordId pos;  ; sofa::core::MultiVecDerivId vel;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalProjectPositionAndVelocityVisitor (const sofa::core::MechanicalParams *mparams, double time=0, sofa::core::MultiVecCoordId x=sofa::core::VecCoordId::position(), sofa::core::MultiVecDerivId v=sofa::core::VecDerivId::velocity());  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual v",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html:796,access,access,796,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_and_velocity_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalProjectPositionVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalProjectPositionVisitor Class Reference . #include <MechanicalProjectPositionVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalProjectPositionVisitor:. [legend]. Public Attributes; SReal t;  ; sofa::core::MultiVecCoordId pos;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalProjectPositionVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecCoordId x=sofa::core::VecCoordId::position());  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html:715,access,access,715,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_position_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalProjectVelocityVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalProjectVelocityVisitor Class Reference . #include <MechanicalProjectVelocityVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalProjectVelocityVisitor:. [legend]. Public Attributes; SReal t;  ; sofa::core::MultiVecDerivId vel;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalProjectVelocityVisitor (const sofa::core::MechanicalParams *mparams, SReal time=0, sofa::core::MultiVecDerivId v=sofa::core::VecDerivId::velocity());  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; Result fwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *c) override;  Process all the BaseProjectiveConstraintSet. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::MechanicalVisitor;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html:715,access,access,715,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_project_velocity_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalPropagateDxAndResetForceVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalPropagateDxAndResetForceVisitor Class Reference . #include <MechanicalPropagateDxAndResetForceVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalPropagateDxAndResetForceVisitor:. [legend]; Detailed Description; Same as MechanicalPropagateDxVisitor followed by MechanicalResetForceVisitor . Public Attributes; sofa::core::MultiVecDerivId dx;  ; sofa::core::MultiVecDerivId f;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalPropagateDxAndResetForceVisitor (const sofa::core::MechanicalParams *mparams, sofa::core::MultiVecDerivId dx, sofa::core::MultiVecDerivId f);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  Process the BaseMechanicalMapping. More...;  ; void bwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState when it is not mapped from parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Mem",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html:873,access,access,873,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_propagate_dx_and_reset_force_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalResetForceVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalResetForceVisitor Class Reference . #include <MechanicalResetForceVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalResetForceVisitor:. [legend]; Detailed Description; Reset the force in all the MechanicalModel This action is typically applied before accumulating all the forces. . Public Attributes; sofa::core::MultiVecDerivId res;  ; bool onlyMapped;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalResetForceVisitor (const sofa::core::ExecParams *mparams, sofa::core::MultiVecDerivId res, bool onlyMapped=false);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=dele",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html:839,access,access,839,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_reset_force_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVAllocVisitor< vtype > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVAllocVisitor< vtype > Class Template Reference . #include <MechanicalVAllocVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVAllocVisitor< vtype >:. [legend]; Detailed Description; template<sofa::core::VecType vtype>; class sofa::simulation::mechanicalvisitor::MechanicalVAllocVisitor< vtype >; Reserve an auxiliary vector identified by a symbolic constant. . Public Attributes; MyMultiVecId v;  ; const core::VecIdProperties & m_properties;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVAllocVisitor (const sofa::core::ExecParams *params, MyMultiVecId v, const core::VecIdProperties &properties={});  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechan",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html:943,access,access,943,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_alloc_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype > Class Template Reference . #include <MechanicalVAvailVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype >:. [legend]; Detailed Description; template<sofa::core::VecType vtype>; class sofa::simulation::mechanicalvisitor::MechanicalVAvailVisitor< vtype >; Find the first available index for a VecId . Public Attributes; MyVecId & v;  ; StateSet states;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVAvailVisitor (const sofa::core::ExecParams *params, MyVecId &v);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simu",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html:893,access,access,893,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_avail_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVDotVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVDotVisitor Class Reference . #include <MechanicalVDotVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVDotVisitor:. [legend]; Detailed Description; Compute the dot product of two vectors . Public Attributes; sofa::core::ConstMultiVecId a;  ; sofa::core::ConstMultiVecId b;  ; SReal *const m_total { nullptr };  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVDotVisitor (const sofa::core::ExecParams *params, sofa::core::ConstMultiVecId a, sofa::core::ConstMultiVecId b, SReal *t);  ; Result fwdMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls th",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html:791,access,access,791,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_dot_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVFreeVisitor< vtype > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVFreeVisitor< vtype > Class Template Reference . #include <MechanicalVFreeVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVFreeVisitor< vtype >:. [legend]; Detailed Description; template<sofa::core::VecType vtype>; class sofa::simulation::mechanicalvisitor::MechanicalVFreeVisitor< vtype >; Free an auxiliary vector identified by a symbolic constant . Public Attributes; MyMultiVecId v;  ; bool interactionForceField;  ; bool propagate;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVFreeVisitor (const sofa::core::ExecParams *params, MyMultiVecId v, bool interactionForceField=false, bool propagate=false);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; Result fwdInteractionForceField (simulation::Node *node, sofa::core::behavior::BaseInteractionForceField *ff) override;  Process all the InteractionForceField. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html:937,access,access,937,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_free_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVInitVisitor< vtype > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVInitVisitor< vtype > Class Template Reference . #include <MechanicalVInitVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVInitVisitor< vtype >:. [legend]; Detailed Description; template<sofa::core::VecType vtype>; class sofa::simulation::mechanicalvisitor::MechanicalVInitVisitor< vtype >; Initialize unset MState destVecId vectors with srcVecId vectors value. . Public Attributes; DestMultiVecId vDest;  ; SrcMultiVecId vSrc;  ; bool m_propagate;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVInitVisitor (const sofa::core::ExecParams *params, DestMultiVecId _vDest, SrcMultiVecId _vSrc=SrcMultiVecId::null(), bool propagate=false);  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *) override;  ; Result fwdMechanicalState (simulation::Node *node, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *node, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool rea",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html:949,access,access,949,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_init_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor Class Reference . #include <MechanicalVMultiOpVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVMultiOpVisitor:. [legend]; Detailed Description; Perform a sequence of linear vector accumulation operation $r_i = sum_j (v_j*f_{ij}); This is used to compute in on steps operations such as $v = v + a*dt, x = x + v*dt$. Note that if the result vector appears inside the expression, it must be the first operand. . Public Attributes; bool mapped;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Protected Attributes; VMultiOp ops;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalVMultiOpVisitor (const sofa::core::ExecParams *params, const VMultiOp &o);  ; MechanicalVMultiOpVisitor & setMapped (bool m=true);  ; Result fwdMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getIn",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html:966,access,access,966,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_multi_op_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVNormVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVNormVisitor Class Reference . #include <MechanicalVNormVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVNormVisitor:. [legend]; Detailed Description; Compute the norm of a vector. The type of norm is set by parameter l. Use 0 for the infinite norm. Note that the 2-norm is more efficiently computed using the square root of the dot product. AuthorFrancois Faure, 2013 . Public Attributes; sofa::core::ConstMultiVecId a;  ; unsigned l;  Type of norm: for l>0, , while we use l=0 for the infinite norm: . More...;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVNormVisitor (const sofa::core::ExecParams *params, sofa::core::ConstMultiVecId a, unsigned l);  ; SReal getResult () const;  ; Result fwdMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char *",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html:995,access,access,995,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_norm_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVOpVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVOpVisitor Class Reference . #include <MechanicalVOpVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVOpVisitor:. [legend]; Detailed Description; Perform a vector operation v=a+b*f . Public Attributes; sofa::core::MultiVecId v;  ; sofa::core::ConstMultiVecId a;  ; sofa::core::ConstMultiVecId b;  ; SReal f;  ; bool mapped;  ; bool only_mapped;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVOpVisitor (const sofa::core::ExecParams *params, sofa::core::MultiVecId v, sofa::core::ConstMultiVecId a=sofa::core::ConstMultiVecId::null(), sofa::core::ConstMultiVecId b=sofa::core::ConstMultiVecId::null(), SReal f=1.0);  ; bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map) override;  ; MechanicalVOpVisitor & setMapped (bool m=true);  ; MechanicalVOpVisitor & setOnlyMapped (bool m=true);  ; Result fwdMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisito",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html:824,access,access,824,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_op_visitor.html,1,['access'],['access']
Security,"﻿. SOFA API: sofa::simulation::mechanicalvisitor::MechanicalVSizeVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::mechanicalvisitor::MechanicalVSizeVisitor Class Reference . #include <MechanicalVSizeVisitor.h>. Inheritance diagram for sofa::simulation::mechanicalvisitor::MechanicalVSizeVisitor:. [legend]; Detailed Description; Get vector size . Public Attributes; sofa::core::ConstMultiVecId v;  ; size_t * result;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  MechanicalVSizeVisitor (const sofa::core::ExecParams *params, size_t *result, sofa::core::ConstMultiVecId v);  ; Result fwdMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is not mapped from the parent level. More...;  ; Result fwdMappedMechanicalState (simulation::Node *, sofa::core::behavior::BaseMechanicalState *mm) override;  Process the BaseMechanicalState if it is mapped from the parent level. More...;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseM",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html:721,access,access,721,api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1mechanicalvisitor_1_1_mechanical_v_size_visitor.html,1,['access'],['access']
Testability," &, collision::geometry::TSphere< T > &, const core::collision::Intersection *currentIntersection)sofa::component::collision::detection::intersection::MeshNewProximityIntersection; testIntersection(collision::geometry::Triangle &, collision::geometry::TSphere< T > &, const core::collision::Intersection *currentIntersection)sofa::component::collision::detection::intersection::MeshNewProximityIntersection; testIntersection(collision::geometry::Point &, collision::geometry::Point &)=deletesofa::component::collision::detection::intersection::MeshNewProximityIntersection; testIntersection(collision::geometry::Line &, collision::geometry::Point &)=deletesofa::component::collision::detection::intersection::MeshNewProximityIntersection; testIntersection(collision::geometry::Line &, collision::geometry::Line &)=deletesofa::component::collision::detection::intersection::MeshNewProximityIntersection; testIntersection(collision::geometry::Triangle &, collision::geometry::Point &)=deletesofa::component::collision::detection::intersection::MeshNewProximityIntersection; testIntersection(collision::geometry::Triangle &, collision::geometry::Line &)=deletesofa::component::collision::detection::intersection::MeshNewProximityIntersection; testIntersection(collision::geometry::Triangle &, collision::geometry::Triangle &)=deletesofa::component::collision::detection::intersection::MeshNewProximityIntersection; testIntersection(collision::geometry::TSphere< T > &sph, collision::geometry::Point &pt)=deletesofa::component::collision::detection::intersection::MeshNewProximityIntersection; testIntersection(collision::geometry::Line &, collision::geometry::TSphere< T > &)=deletesofa::component::collision::detection::intersection::MeshNewProximityIntersection; testIntersection(collision::geometry::Triangle &, collision::geometry::TSphere< T > &)=deletesofa::component::collision::detection::intersection::MeshNewProximityIntersection; ~BaseIntersector()sofa::core::collision::BaseIntersectorinline.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_mesh_new_proximity_intersection-members.html:8818,test,testIntersection,8818,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_mesh_new_proximity_intersection-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_mesh_new_proximity_intersection-members.html,5,['test'],['testIntersection']
Testability," &, const DataVecCoord &, const DataVecDeriv &) overridesofa::component::mechanicalload::DiagonalVelocityDampingForceField< DataTypes >virtual; ForceField< DataTypes >::addForce(const MechanicalParams *mparams, MultiVecDerivId fId) overridesofa::core::behavior::ForceField< DataTypes >virtual; addKToMatrix(sofa::linearalgebra::BaseMatrix *, SReal, unsigned int &) overridesofa::component::mechanicalload::DiagonalVelocityDampingForceField< DataTypes >inlinevirtual; ForceField< DataTypes >::addKToMatrix(const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix) overridesofa::core::behavior::ForceField< DataTypes >virtual; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMBKdx(const MechanicalParams *mparams, MultiVecDerivId dfId)sofa::core::behavior::BaseForceFieldvirtual; addMBKToMatrix(const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix)sofa::core::behavior::BaseForceFieldvirtual; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addToMatrix(sofa::linearalgebra::BaseMatrix *bm, unsigned offset, const IndexArray &nodeIndex, const ElementMat &em, SReal scale)sofa::core::behavior::ForceField< DataTypes >inline; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseForceField()sofa::core::behavior::BaseForceFieldprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildDampingMatrix(core::behavior::DampingMatrix *matrix) overrid",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_diagonal_velocity_damping_force_field-members.html:2934,log,logging,2934,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_diagonal_velocity_damping_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_diagonal_velocity_damping_force_field-members.html,1,['log'],['logging']
Testability," &d_f, const DataVecCoord &d_x, const DataVecDeriv &d_v) overridesofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >virtual; sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField::addForce(const MechanicalParams *mparams, MultiVecDerivId fId) overridesofa::core::behavior::ForceField< DataTypes >virtual; addKToMatrix(sofa::linearalgebra::BaseMatrix *m, SReal kFactor, unsigned int &offset) overridesofa::component::solidmechanics::fem::elastic::TetrahedralCorotationalFEMForceField< DataTypes >virtual; sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField::addKToMatrix(const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix) overridesofa::core::behavior::ForceField< DataTypes >virtual; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMBKdx(const MechanicalParams *mparams, MultiVecDerivId dfId)sofa::core::behavior::BaseForceFieldvirtual; addMBKToMatrix(const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix)sofa::core::behavior::BaseForceFieldvirtual; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addToMatrix(sofa::linearalgebra::BaseMatrix *bm, unsigned offset, const IndexArray &nodeIndex, const ElementMat &em, SReal scale)sofa::core::behavior::ForceField< DataTypes >inline; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyStiffnessLarge(Vector &f, const Vector &x, int i=0, Index a=0, Index b=1, Index c=2, Index d=3, SReal fact=1.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedral_corotational_f_e_m_force_field-members.html:4578,log,logging,4578,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedral_corotational_f_e_m_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_tetrahedral_corotational_f_e_m_force_field-members.html,1,['log'],['logging']
Testability," & ; elems, . const S & ; delim . ). Join a container into a single string, separated by the provided delimiter. . ◆ join() [2/3]. template<class InputIt , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . const S & ; delim . ). ◆ join() [3/3]. template<class InputIt , class UnaryFunction , class S > . std::string sofa::helper::join ; (; InputIt ; first, . InputIt ; last, . UnaryFunction ; f, . const S & ; delim . ). ◆ logFactoryRegister() [1/2]. template SOFA_HELPER_API void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ logFactoryRegister() [2/2]. template<class TKey > . void sofa::helper::logFactoryRegister ; (; const std::string & ; baseclass, . const std::string & ; classname, . TKey ; key, . bool ; multi . ). Log classes registered in the factory. . ◆ logFactoryRegister< std::string >(). template SOFA_HELPER_API void sofa::helper::logFactoryRegister< std::string > ; (; const std::string & ; baseclass, . const std::string & ; classname, . std::string ; key, . bool ; multi . ). ◆ narrow_cast(). template<class T , class U > . constexpr T sofa::helper::narrow_cast ; (; U && ; u). constexpr . Explicit narrow conversion Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) ; Template Parameters. TTarget type ; USource type . Parameters. uValue to cast . ReturnsThe value converted to the target type . ◆ narrow_cast_check(). template<class T , class U > . constexpr T sofa::helper::narrow_cast_check ; (; U ; u). constexpr . Explicit narrow conversion checking that the value is unchanged by the cast. If the value changed, an exception is thrown Inspired by the Guidelines Support Library (https://github.com/microsoft/GSL) . ◆ narrow_cast_nocheck(). template<class T , class U > . constexpr T sofa::helper::narrow_cast_nocheck ; (; U && ; u). constexprnoexcept . Explicit narrow conversion Inspired by the Guidelines ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html:30032,log,logFactoryRegister,30032,api/master/sofa/html/namespacesofa_1_1helper.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa_1_1helper.html,1,['log'],['logFactoryRegister']
Testability," () const;  ; const std::string & sender () const;  ; const std::string messageAsString () const;  ; bool empty () const;  ; template<class T > ; Message & operator<< (const T &x);  ; template<> ; SOFA_HELPER_API Message & operator<< (const FileInfo::SPtr &fi);  . Attribute details. ◆ AnyTypes. Message::TypeSet sofa::helper::logging::Message::AnyTypes. static . Initial value:= {Type::Info,Type::Advice,Type::Deprecated,; Type::Warning,Type::Error,Type::Fatal}. ◆ emptyMsg. Message sofa::helper::logging::Message::emptyMsg. static . ◆ m_class. Class sofa::helper::logging::Message::m_class. protected . who is the attender of the message (developers or users)? . ◆ m_componentinfo. ComponentInfo::SPtr sofa::helper::logging::Message::m_componentinfo. protected . ◆ m_fileInfo. FileInfo::SPtr sofa::helper::logging::Message::m_fileInfo. protected . a trace (name, path) from whom has emitted this message. ; a trace (file,line) from where the message have been created . ◆ m_id. int sofa::helper::logging::Message::m_id. protected . should it be stored here or in the handler that needs it? . ◆ m_stream. std::stringstream sofa::helper::logging::Message::m_stream. protected . the actual message . ◆ m_type. Type sofa::helper::logging::Message::m_type. protected . the message level . Constructor details. ◆ Message() [1/3]. sofa::helper::logging::Message::Message ; (; ). inline . ◆ Message() [2/3]. sofa::helper::logging::Message::Message ; (; const Message & ; msg). ◆ Message() [3/3]. sofa::helper::logging::Message::Message ; (; Class ; mclass, . Type ; type, . const ComponentInfo::SPtr & ; componentInfo = ComponentInfo::SPtr(), . const FileInfo::SPtr & ; fileInfo = EmptyFileInfo . ). Function details. ◆ componentInfo(). const ComponentInfo::SPtr& sofa::helper::logging::Message::componentInfo ; (; ); const. inline . ◆ context(). Class sofa::helper::logging::Message::context ; (; ); const. inline . ◆ empty(). bool sofa::helper::logging::Message::empty ; (; ); const. ◆ fileInfo(). const ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1logging_1_1_message.html:2612,log,logging,2612,api/master/sofa/html/classsofa_1_1helper_1_1logging_1_1_message.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1logging_1_1_message.html,1,['log'],['logging']
Testability," (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  . Public Member Functions;  SOFA_CLASS (TopologyChecker, core::objectmodel::BaseObject);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reinit () override;  Update method called when variables used in precomputation are modified. More...;  ; void handleEvent (sofa::core::objectmodel::Event *event) override;  Handle an event. More...;  ; void draw (const core::visual::VisualParams *vparams) override;  Render internal data of this object, for debugging purposes. More...;  ; bool checkTopology ();  ; bool checkEdgeTopology ();  ; bool checkEdgeContainer ();  Method to test Edge container concistency. More...;  ; bool checkEdgeToVertexCrossContainer ();  Method to test Edge to vertex cross container concistency. More...;  ; bool checkTriangleTopology ();  } More...;  ; bool checkTriangleContainer ();  Method to test Triangle container concistency. More...;  ; bool checkTriangleToEdgeCrossContainer ();  Method to test triangles to edges cross container concistency. More...;  ; bool checkTriangleToVertexCrossContainer ();  Method to test triangles to vertices cross container concistency. More...;  ; bool checkQuadTopology ();  } More...;  ; bool checkQuadContainer ();  Method to test quad container concistency. More...;  ; bool checkQuadToEdgeCrossContainer ();  Method to test quads to edges cross container concistency. More...;  ; bool checkQuadToVertexCrossContainer ();  Method to test quads to vertices cross container concistency. More...;  ; bool checkTetrahedronTopology ();  } More...;  ; bool checkTetrahedronContainer ();  Method to test Tetrahedron container concistency. More...;  ; bool checkTetrahedronToTriangleCrossContainer ();  Met",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topology_checker.html:4121,test,test,4121,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topology_checker.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topology_checker.html,1,['test'],['test']
Testability," (infinite norm of the) difference is less than maxError * numeric_limits<Real>::epsilon. More...;  ;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Public Member Functions;  MultiMapping_test ();  ; void setupScene (int numParents);  ; OutDeriv difference (const OutCoord &c1, const OutCoord &c2);  ; bool runTest (const type::vector< InVecCoord > &parentCoords, const OutVecCoord &expectedChildCoords);  ;  ~MultiMapping_test () override;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  ;  Public Member Functions inherited from sofa::testing::NumericTest< _MultiMapping::In::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  ;  Static Public Member Functions inherited from sofa::testing::NumericTest< _MultiMapping::In::Real >; static Real matrixMaxDiff (const Matrix1 &m1, const Matrix2 &m2);  return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes More...;  ; static Real matrixMaxDiff (const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2);  Return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes. More...;  ; st",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1_multi_mapping__test.html:2626,test,testing,2626,api/master/sofa/html/structsofa_1_1_multi_mapping__test.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1_multi_mapping__test.html,1,['test'],['testing']
Testability," * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; cameraModesofa::component::setting::ViewerSetting; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; ConfigurationSetting()sofa::core::objectmodel::ConfigurationSettingprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_cameraModesofa::component::setting::ViewerSetting; d_componentStatesofa::core::objectmodel::Base; d_fullscreensofa::component::setting::ViewerSetting; d_messageLogCountsofa::core::objectmodel::Basemutable; d_objectPickingMethodsofa::component::setting::ViewerSetting; d_resolutionsofa::component::setting::ViewerSetting; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLin",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_viewer_setting-members.html:2213,log,logging,2213,api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_viewer_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_viewer_setting-members.html,1,['log'],['logging']
Testability," * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; Coord typedefsofa::component::topology::utility::TopologyBoundingTrasher< DataTypes >; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_borderssofa::component::topology::utility::TopologyBoundingTrasher< DataTypes >; d_componentStatesofa::core::objectmodel::Base; d_drawBoxsofa::component::topology::utility::TopologyBoundingTrasher< DataTypes >; d_messageLogCountsofa::core::objectmodel::Basemutable; d_positionssofa::component::topology::utility::TopologyBoundingTrasher< DataTypes >; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *vparams) overridesofa::component::topology::utility::TopologyBoundingTrasher< DataTypes >virtual; edgeModifiersofa::component::topology::utility::TopologyBoundingTrasher< DataTypes >protected; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; filterEleme",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topology_bounding_trasher-members.html:2279,log,logging,2279,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topology_bounding_trasher-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topology_bounding_trasher-members.html,1,['log'],['logging']
Testability," *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanDirty(const core::ExecParams *params=nullptr)sofa::core::DataTrackerDDGNodevirtual; sofa::core::objectmodel::DDGNode::cleanDirty()sofa::core::objectmodel::DDGNode; cleanDirtyOutputsOfInputs()sofa::core::objectmodel::DDGNodeprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; sofa::computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; sofa::core::behavior::SingleStateAccessor::computeBBox(const core::ExecParams *params, bool onlyVisible=false) overridesofa::core::behavior::StateAccessorinlinevirtual; Coord typedefsofa::component::engine::analyze::AverageCoord< DataTypes >; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_averagesofa::component::engine::analyze::AverageCoord< DataTypes >; d_componentStatesofa::core::objectmodel::Base; d_indicessofa::component::engine::analyze::AverageCoord< DataTypes >; d_messageLogCountsofa::core::objectmodel::Basemutable; d_vecIdsofa::component::engine::analyze::AverageCoord< DataTypes >; DataEngine()sofa::core::DataEngineprotected; DataTrackerDDGNode()sofa::core::DataTrackerDDGNodeinline; DDGLinkContainer typedefsofa::core::objectmodel::DDGNode; DDGLinkIterator typedefsofa::core::objectmodel::DDGNode; DDGNode()sofa::core::objectmodel::DDGNode; delInput(DDGNode *n)sofa::core::objectmodel::DDGNode; delOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; doAddInput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doAddOutput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doDel",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_average_coord-members.html:3262,log,logging,3262,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_average_coord-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_average_coord-members.html,1,['log'],['logging']
Testability," *&obj, objectmodel::BaseContext *context, objectmodel::BaseObjectDescription *arg)sofa::core::behavior::ProjectiveConstraintSet< DataTypes >inlinestatic; sofa::core::behavior::BaseProjectiveConstraintSet::canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *params, bool onlyVisible=false) overridesofa::core::behavior::StateAccessorinlinevirtual; Coord typedefsofa::component::constraint::projective::FixedRotationProjectiveConstraint< DataTypes >; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_fixedXRotationsofa::component::constraint::projective::FixedRotationProjectiveConstraint< DataTypes >protected; d_fixedYRotationsofa::component::constraint::projective::FixedRotationProjectiveConstraint< DataTypes >protected; d_fixedZRotationsofa::component::constraint::projective::FixedRotationProjectiveConstraint< DataTypes >protected; d_messageLogCountsofa::core::objectmodel::Basemutable; DataMatrixDeriv typedefsofa::component::constraint::projective::FixedRotationProjectiveConstraint< DataTypes >; DataVecCoord typedefsofa::component::constraint::projective::FixedRotationProjectiveConstraint< DataTypes >; DataVecDeriv typedefsofa::component::constraint::projective::FixedRotationProjectiveConstraint< DataTypes >; Deriv typedefsofa::component::constraint::projective::Fi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_rotation_projective_constraint-members.html:3212,log,logging,3212,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_rotation_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_rotation_projective_constraint-members.html,1,['log'],['logging']
Testability, *) overridesofa::gl::component::shader::OglRenderingSRGBvirtual; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClass() constsofa::core::objectmodel::Baseinlinevirtual; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTopologyChange(core::topology::Topology *t)sofa::core::objectmodel::BaseObjectvirtual; hasDataChanged(const BaseData &data)s,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_rendering_s_r_g_b-members.html:5544,log,logging,5544,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_rendering_s_r_g_b-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_rendering_s_r_g_b-members.html,1,['log'],['logging']
Testability," *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearConstraints()sofa::component::constraint::projective::AffineMovementProjectiveConstraint< TDataTypes >; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *params, bool onlyVisible=false) overridesofa::core::behavior::StateAccessorinlinevirtual; Coord typedefsofa::component::constraint::projective::AffineMovementProjectiveConstraint< TDataTypes >; CoordSizesofa::component::constraint::projective::AffineMovementProjectiveConstraint< TDataTypes >static; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; CPos typedefsofa::component::constraint::projective::AffineMovementProjectiveConstraint< TDataTypes >; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_beginConstraintTimesofa::component::constraint::projective::AffineMovementProjectiveConstraint< TDataTypes >; d_componentStatesofa::core::objectmodel::Base; d_drawConstrainedPointssofa::component::constraint::projective::AffineMovementProjectiveConstraint< TDataTypes >; d_endConstraintTimesofa::component::constraint::projective::AffineMovementProjectiveConstraint< TDataTypes >; d_indicessofa::component::constraint::projective::AffineMovementProjectiveConstraint< TDataTypes >; d_meshIndicessofa::component::constraint::projective::AffineMovementProjectiveConstraint< TDataTypes >; d_messageLogCountsofa::core::objectmodel::Basemutable; d_quaternionsofa::component::constraint::projective::AffineMovementProjectiveConstrai",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_affine_movement_projective_constraint-members.html:3851,log,logging,3851,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_affine_movement_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_affine_movement_projective_constraint-members.html,1,['log'],['logging']
Testability," *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearIndices()sofa::component::constraint::projective::LinearMovementProjectiveConstraint< TDataTypes >; clearKeyMovements()sofa::component::constraint::projective::LinearMovementProjectiveConstraint< TDataTypes >; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *params, bool onlyVisible=false) overridesofa::core::behavior::StateAccessorinlinevirtual; Coord typedefsofa::component::constraint::projective::LinearMovementProjectiveConstraint< TDataTypes >; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_indicessofa::component::constraint::projective::LinearMovementProjectiveConstraint< TDataTypes >; d_keyMovementssofa::component::constraint::projective::LinearMovementProjectiveConstraint< TDataTypes >; d_keyTimessofa::component::constraint::projective::LinearMovementProjectiveConstraint< TDataTypes >; d_messageLogCountsofa::core::objectmodel::Basemutable; d_relativeMovementssofa::component::constraint::projective::LinearMovementProjectiveConstraint< TDataTypes >; d_showMovementsofa::component::constraint::projective::LinearMovementProjectiveConstraint< TDataTypes >; datasofa::component::constraint::projective::LinearMovementProjectiveConstraint< TDataTypes >protected; DataMatrixDeriv typedefsofa::component::constraint::projective::LinearMovementProjectiveConstraint< TDa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_linear_movement_projective_constraint-members.html:3776,log,logging,3776,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_linear_movement_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_linear_movement_projective_constraint-members.html,1,['log'],['logging']
Testability," *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; computeCollisionDetection()=0sofa::core::collision::Pipelinepure virtual; computeCollisionReset()=0sofa::core::collision::Pipelinepure virtual; computeCollisionResponse()=0sofa::core::collision::Pipelinepure virtual; computeCollisions()sofa::core::collision::Pipelineinline; contactManagersofa::core::collision::Pipelineprotected; contactManagerssofa::core::collision::Pipelineprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; doCollisionDetection(const sofa::type::vector< core::CollisionModel * > &collisionModels)=0sofa::core::collision::Pipelineprotectedpure virtual; doCollisionReset()=0sofa::core::collision::Pipelineprotectedpure virtual; doCollisionResponse()=0sofa::core::collision::Pipelineprotectedpure virtual; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Ba",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline-members.html:2579,log,logging,2579,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline-members.html,1,['log'],['logging']
Testability," *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; checkTopologies()sofa::core::topology::TopologicalMappinginlinevirtual; checkTopologyInputTypes()sofa::core::topology::TopologicalMappingprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; copyEdgessofa::component::mapping::linear::Mesh2PointTopologicalMappingprotected; copyTetrahedrasofa::component::mapping::linear::Mesh2PointTopologicalMappingprotected; copyTrianglessofa::component::mapping::linear::Mesh2PointTopologicalMappingprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg)sofa::core::topology::TopologicalMappinginlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; dumpGlob2LocMap()sofa::core::topology::TopologicalMapping; dumpLoc2GlobVec()sofa::core::topology::TopologicalMapping; EDGE enum valuesofa::component::mapping::linear::Mesh2PointTopologicalMapping; edgeBaryCoordssofa::component::mapping::linear::Mesh2PointTopologicalMappingprotected; Element enum namesofa::component::mapping::linear::Mesh2PointTopologicalMapping; ElementType typedefsofa::core::topology::TopologicalMapping; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping-members.html:3422,log,logging,3422,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_mesh2_point_topological_mapping-members.html,1,['log'],['logging']
Testability," *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; computeInverseFromPermutation(int matrixSize, const int *inPermutation, int *outInversePermutation)sofa::core::behavior::BaseOrderingMethodstatic; computePermutation(const SparseMatrixPattern &inPattern, int *outPermutation, int *outInversePermutation) overridesofa::component::linearsolver::ordering::BaseEigenOrderingMethod< EigenOrderingMethodType >virtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)so",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1ordering_1_1_base_eigen_ordering_method-members.html:2591,log,logging,2591,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1ordering_1_1_base_eigen_ordering_method-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1ordering_1_1_base_eigen_ordering_method-members.html,1,['log'],['logging']
Testability," *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseMeshTopology, core::topology::Topology)sofa::core::topology::BaseMeshTopology; SOFA_CLASS(Topology, core::objectmodel::BaseObject)sofa::core::topology::Topology; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; Tetra typedefsofa::core::topology::Topology; TetrahedraAroundEdge typedefsofa::core::topology::BaseMeshTopology; TetrahedraAroundTriangle typedefsofa::core::topology::BaseMeshTopology; TetrahedraAroundVertex typedefsofa::core::topology::BaseMeshTopology; Tetrahedron typedefsofa::core::topology::Topology; TetrahedronID typedefsofa::core::topology::Topology; TetraID typedefsofa::core::topology::Topology; Topology()sofa::core::topology::Topologyinlineprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::topology::Topology; TriangleID typedefsofa::core::topology::Topology; TrianglesAroundEdge typedefsofa::core::topology::BaseMeshTopology; TrianglesAroundVertex typedefsofa::core::topology::BaseMeshTopology; TrianglesInTetrahedron typedefsofa::core::topology::BaseMeshTopology; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VerticesAroundVertex typedefsofa::core::topology::BaseMeshTopology; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~Topology()sofa::core::topology::Topologyinlineprotectedvirtual.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_mesh_topology-members.html:21441,log,logErrors,21441,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_mesh_topology-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_mesh_topology-members.html,1,['log'],['logErrors']
Testability," *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(OglTexture, core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglTexture; SPtr typedefsofa::core::objectmodel::Base; srgbColorspacesofa::gl::component::shader::OglTextureprotected; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; texturesofa::gl::component::shader::OglTextureprotected; textureFilenamesofa::gl::component::shader::OglTextureprotected; textureUnitsofa::gl::component::shader::OglTextureprotected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; unbind()sofa::gl::component::shader::OglTexture; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglTexture() overridesofa::gl::component::shader::OglTextureprotected; ~ShaderElement() overridesofa::core::visual::ShaderElementinlineprotected; ~VisualModel() overridesofa::core::visual::VisualModelinlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture-members.html:14587,log,logErrors,14587,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture-members.html,1,['log'],['logErrors']
Testability," *=nullptr)sofa::core::objectmodel::Baseinlinestatic; sofa::SOFA_ABSTRACT_CLASS(VisualModel, objectmodel::BaseObject)sofa::core::visual::VisualModel; sofa::gl::component::shader::OglShaderElement::SOFA_ABSTRACT_CLASS(ShaderElement, objectmodel::BaseObject)sofa::core::visual::ShaderElement; SOFA_CLASS(OglUIntAttribute, SOFA_TEMPLATE3(OglAttribute, 1, GL_UNSIGNED_INT, unsigned int))sofa::gl::component::shader::OglUIntAttribute; OglAttribute< 1, GL_UNSIGNED_INT, unsigned int >::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE3(OglAttribute, size, type, unsigned int), core::visual::VisualModel, OglShaderElement)sofa::gl::component::shader::OglAttribute< 1, GL_UNSIGNED_INT, unsigned int >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateVisual(const VisualParams *)sofa::core::visual::VisualModel; updateVisual() finalsofa::core::visual::VisualModelvirtual; valuesofa::gl::component::shader::OglAttribute< 1, GL_UNSIGNED_INT, unsigned int >protected; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VisualModel()sofa::core::visual::VisualModelprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~OglAttribute() overridesofa::gl::component::shader::OglAttribute< 1, GL_UNSIGNED_INT, unsigned int >protected; ~OglShaderElement() overridesofa::gl::component::shader::OglShaderElementinline; ~OglUIntAttribute()sofa::gl::compone",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_u_int_attribute-members.html:15379,log,logErrors,15379,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_u_int_attribute-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_u_int_attribute-members.html,1,['log'],['logErrors']
Testability," *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseType typedefsofa::core::objectmodel::Base; checkLinearSolverSymmetry(const core::MechanicalParams *mparams) constsofa::component::mapping::nonlinear::NonLinearMappingData< HasStabilizedGeometricStiffness >protected; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_geometricStiffnesssofa::component::mapping::nonlinear::NonLinearMappingData< HasStabilizedGeometricStiffness >; d_messageLogCountsofa::core::objectmodel::Basemutable; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Baseinline; findLinkDestClass(const BaseClass *destType, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findLinks(const std::string &name) consts",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_non_linear_mapping_data-members.html:1695,log,logging,1695,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_non_linear_mapping_data-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_non_linear_mapping_data-members.html,1,['log'],['logging']
Testability," *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Inherited, Inherit1)sofa::component::engine::select::SelectConnectedLabelsROI< _T >; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Index, sofa::Index)sofa::component::engine::select::SelectConnectedLabelsROI< _T >; SOFA_CLASS(SOFA_TEMPLATE(SelectConnectedLabelsROI, _T), DataEngine)sofa::component::engine::select::SelectConnectedLabelsROI< _T >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; T typedefsofa::component::engine::select::SelectConnectedLabelsROI< _T >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; VecVLabels typedefsofa::component::engine::select::SelectConnectedLabelsROI< _T >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~SelectConnectedLabelsROI() overridesofa::component::engine::select::SelectConnectedLabelsROI< _T >inline.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_select_connected_labels_r_o_i-members.html:13054,log,logErrors,13054,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_select_connected_labels_r_o_i-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_select_connected_labels_r_o_i-members.html,1,['log'],['logErrors']
Testability," *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; checkOutOfBoundsIndices()sofa::component::solidmechanics::spring::RestShapeSpringsForceField< DataTypes >protected; checkOutOfBoundsIndices(const VecIndex &indices, const sofa::Size dimension)sofa::component::solidmechanics::spring::RestShapeSpringsForceField< DataTypes >protected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *params, bool onlyVisible=false) overridesofa::core::behavior::StateAccessorinlinevirtual; Coord typedefsofa::component::solidmechanics::spring::RestShapeSpringsForceField< DataTypes >; coord_total_sizesofa::component::solidmechanics::spring::RestShapeSpringsForceField< DataTypes >static; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; CPos typedefsofa::component::solidmechanics::spring::RestShapeSpringsForceField< DataTypes >; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_activeDirectionssofa::component::solidmechanics::spring::RestShapeSpringsForceField< DataTypes >; d_angularStiffnesssofa::component::solidmechanics::spring::RestShapeSpringsForceField< DataTypes >; d_componentStatesofa::core::objectmodel::Base; d_drawSpringsofa::component::solidmechanics::spring::RestShapeSpringsForceField< DataTypes >; d_external_pointssofa::component::solidmechanics::spring::RestShapeSpringsForceField< DataTypes >; d_messageLogCountsofa::core::objectmodel::Basemutable; d_pivotPointssofa::component::solidmechanics::spring::RestShapeSpringsForceField< DataTypes >; d_pointssofa::component::solidmechanics::spring::RestShapeSpringsForceField< DataTypes >; d_recompute_in",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_rest_shape_springs_force_field-members.html:5568,log,logging,5568,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_rest_shape_springs_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1spring_1_1_rest_shape_springs_force_field-members.html,1,['log'],['logging']
Testability," *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ d_eachStep. Data<bool> sofa::component::topology::utility::TopologyChecker::d_eachStep. bool to check topology at each step. . ◆ l_topology. SingleLink<TopologyChecker, sofa::core::topology::BaseMeshTopology, BaseLink::FLAG_STOREPATH | BaseLink::FLAG_STRONGLINK> sofa::component::topology::utility::TopologyChecker::l_topology. Link to be set to the topology container in the component graph. . ◆ m_topology. core::topology::BaseMeshTopology::SPtr sofa::component::topology::utility::TopologyChecker::m_topology. protected . Constructor details. ◆ TopologyChecker(). sofa::component::topology::utility::TopologyChecker::TopologyChecker ; (; ). protected . } . ◆ ~TopologyChecker(). sofa::component::topology::utility::TopologyChecker::~TopologyChecker ; (; ). overrideprotected . Function details. ◆ checkEdgeContainer(). bool sofa::component::topology::utility::TopologyChecker::checkEdgeContainer ; (; ). Method to test Edge container concistency. . ◆ checkEdgeTopology(). bool sofa::component::topology::utility::TopologyChecker::checkEdgeTopology ; (; ). Edge methods { Full method to check Edge Topology. Will call See alsocheckEdgeContainer and . checkEdgeToVertexCrossContainer . ◆ checkEdgeToVertexCrossContainer(). bool sofa::component::topology::utility::TopologyChecker::checkEdgeToVertexCrossContainer ; (; ). Method to test Edge to vertex cross container concistency. . ◆ checkHexahedronContainer(). bool sofa::component::topology::utility::TopologyChecker::checkHexahedronContainer ; (; ). Method to test Hexahedron container concistency. . ◆ checkHexahedronToEdgeCrossContainer(). bool sofa::component::topology::utility::TopologyChecker::checkHexahedronToEdgeCrossContainer ; (; ). Method to test Hexahedron to edges cross container concistency. . ◆ checkHexahedronTopology(). bool sofa::component::topology::utility::TopologyChecker::checkHexahedronTopology ; (; ). } ; Hexahedron methods { Full method to check",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topology_checker.html:17094,test,test,17094,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topology_checker.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topology_checker.html,1,['test'],['test']
Testability," *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; skipToEOL(FILE *f)sofa::core::loader::BaseLoaderprotectedstatic; SOFA_ABSTRACT_CLASS(MeshLoader, BaseLoader)sofa::core::loader::MeshLoader; sofa::core::loader::BaseLoader::SOFA_ABSTRACT_CLASS(BaseLoader, objectmodel::BaseObject)sofa::core::loader::BaseLoader; SOFA_CLASS(GridMeshCreator, sofa::core::loader::MeshLoader)sofa::component::io::mesh::GridMeshCreator; sofa::core::loader::MeshLoader::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; Tetrahedron typedefsofa::core::loader::MeshLoader; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::core::loader::MeshLoader; trianglePatternsofa::component::io::mesh::GridMeshCreator; type()sofa::component::io::mesh::GridMeshCreatorinlinevirtual; uniqueEdgessofa::component::io::mesh::GridMeshCreatorprotected; updateElements()sofa::core::loader::MeshLoadervirtual; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateMesh()sofa::core::loader::MeshLoadervirtual; updateNormals()sofa::core::loader::MeshLoadervirtual; updatePoints()sofa::core::loader::MeshLoadervirtual; Vec3 typedefsofa::core::loader::MeshLoader; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; vert(unsigned x, unsigned y)sofa::component::io::mesh::GridMeshCreatorinlineprotected; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseLoader() overridesofa::core::loader::BaseLoaderprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_grid_mesh_creator-members.html:17230,log,logErrors,17230,api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_grid_mesh_creator-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_grid_mesh_creator-members.html,1,['log'],['logErrors']
Testability," * ; currentIntersection . ). ◆ testIntersection() [11/22]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testIntersection ; (; collision::geometry::Ray & ; , . collision::geometry::Sphere & ;  . ). delete . ◆ testIntersection() [12/22]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testIntersection ; (; collision::geometry::Ray & ; ray1, . collision::geometry::Sphere & ; sph2, . const core::collision::Intersection * ; currentIntersection . ). ◆ testIntersection() [13/22]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testIntersection ; (; collision::geometry::Ray & ; , . collision::geometry::Triangle & ;  . ). delete . ◆ testIntersection() [14/22]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testIntersection ; (; collision::geometry::Ray & ; t1, . collision::geometry::Triangle & ; t2, . const core::collision::Intersection * ; currentIntersection . ). ◆ testIntersection() [15/22]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testIntersection ; (; collision::geometry::Sphere & ; , . collision::geometry::Point & ;  . ). delete . ◆ testIntersection() [16/22]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testIntersection ; (; collision::geometry::Sphere & ; e1, . collision::geometry::Point & ; e2, . const core::collision::Intersection * ; currentIntersection . ). ◆ testIntersection() [17/22]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testIntersection ; (; collision::geometry::Sphere & ; , . collision::geometry::Sphere & ;  . ). virtualdelete . Reimplemented from sofa::component::collision::detection::intersection::DiscreteIntersection. ◆ testIntersection() [18/22]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testIntersection ; (; collision::geometry::Sphere & ; e1, . collision::geometry::Sphere & ; e2, . const core::collisio",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_local_min_distance.html:36055,test,testIntersection,36055,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_local_min_distance.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_local_min_distance.html,1,['test'],['testIntersection']
Testability," * ; currentIntersection . ). ◆ testIntersection() [13/22]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testIntersection ; (; collision::geometry::Ray & ; , . collision::geometry::Triangle & ;  . ). delete . ◆ testIntersection() [14/22]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testIntersection ; (; collision::geometry::Ray & ; t1, . collision::geometry::Triangle & ; t2, . const core::collision::Intersection * ; currentIntersection . ). ◆ testIntersection() [15/22]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testIntersection ; (; collision::geometry::Sphere & ; , . collision::geometry::Point & ;  . ). delete . ◆ testIntersection() [16/22]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testIntersection ; (; collision::geometry::Sphere & ; e1, . collision::geometry::Point & ; e2, . const core::collision::Intersection * ; currentIntersection . ). ◆ testIntersection() [17/22]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testIntersection ; (; collision::geometry::Sphere & ; , . collision::geometry::Sphere & ;  . ). virtualdelete . Reimplemented from sofa::component::collision::detection::intersection::DiscreteIntersection. ◆ testIntersection() [18/22]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testIntersection ; (; collision::geometry::Sphere & ; e1, . collision::geometry::Sphere & ; e2, . const core::collision::Intersection * ; currentIntersection . ). overridevirtual . Reimplemented from sofa::component::collision::detection::intersection::DiscreteIntersection. ◆ testIntersection() [19/22]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testIntersection ; (; collision::geometry::Triangle & ; , . collision::geometry::Point & ;  . ). delete . ◆ testIntersection() [20/22]. bool sofa::component::collision::detection::intersection::LocalMinDistance::tes",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_local_min_distance.html:36533,test,testIntersection,36533,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_local_min_distance.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_local_min_distance.html,1,['test'],['testIntersection']
Testability," . #include <MultiMappingTestCreation.h>; Base class for the MultiMapping tests, directly adapted from Mapping_test. ; More... Inheritance diagram for sofa::MultiMapping_test< _MultiMapping >:. [legend]; Detailed Description; template<class _MultiMapping>; struct sofa::MultiMapping_test< _MultiMapping >; Base class for the MultiMapping tests, directly adapted from Mapping_test. ; See alsoMapping_test; AuthorFrançois Faure ; Date2014 . Public Attributes; core::MultiMapping< In, Out > * mapping;  the mapping to be tested More...;  ; type::vector< typename InDOFs::SPtr > inDofs;  mapping input More...;  ; OutDOFs::SPtr outDofs;  mapping output More...;  ; simulation::Node::SPtr root;  Root of the scene graph, created by the constructor an re-used in the tests. More...;  ; simulation::Node::SPtr child;  Child node, created by setupScene. More...;  ; type::vector< simulation::Node::SPtr > parents;  Parent nodes, created by setupScene. More...;  ; simulation::Simulation * simulation;  created by the constructor an re-used in the tests More...;  ; std::pair< Real, Real > deltaRange;  The minimum and maximum magnitudes of the change of each scalar value of the small displacement is deltaRange * numeric_limits<Real>::epsilon. This epsilon is 1.19209e-07 for float and 2.22045e-16 for double. More...;  ; Real errorMax;  The test is successful if the (infinite norm of the) difference is less than maxError * numeric_limits<Real>::epsilon. More...;  ;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Public Member Functions;  MultiMapping_test ();  ; void setupScene (int numParents);  ; OutDeriv difference (const OutCoord &c1, const OutCoord &c2);  ; bool runTest (const type::vector< InVecCoord > &parentCoords, const OutVecCoord &expectedChildCoords);  ;  ~MultiMapping_test () override;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulatio",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1_multi_mapping__test.html:1330,test,tests,1330,api/master/sofa/html/structsofa_1_1_multi_mapping__test.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1_multi_mapping__test.html,1,['test'],['tests']
Testability," . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Static Public Member Functions |; List of all members . sofa::type::trait::is_vector< T > Struct Template Reference . #include <is_vector.h>; Detect if a type T has iterator/const iterator function and operator[](size_t) ; More...; Detailed Description; template<typename T>; struct sofa::type::trait::is_vector< T >; Detect if a type T has iterator/const iterator function and operator[](size_t) . Static Public Attributes; static const bool value = test<test_type>(nullptr);  . Static Public Member Functions; template<typename A > ; static constexpr bool test (A *pt, A const *cpt=nullptr, decltype(pt->begin()) *=nullptr, decltype(pt->end()) *=nullptr, decltype(cpt->begin()) *=nullptr, decltype(cpt->end()) *=nullptr, typename std::decay< decltype((*pt)[0])>::type *=nullptr, typename A::iterator *=nullptr, typename A::const_iterator *=nullptr, typename A::value_type *=nullptr);  ; template<typename A > ; static constexpr bool test (...);  . Attribute details. ◆ value. template<typename T > . const bool sofa::type::trait::is_vector< T >::value = test<test_type>(nullptr). static . Function details. ◆ test() [1/2]. template<typename T > . template<typename A > . static constexpr bool sofa::type::trait::is_vector< T >::test ; (;  ; ...). inlinestaticconstexpr . ◆ test() [2/2]. template<typename T > . template<typename A > . static constexpr bool sofa::type::trait::is_vector< T >::test ; (; A * ; pt, . A const * ; cpt = nullptr, . decltype(pt->begin()) * ; = nullptr, . decltype(pt->end()) * ; = nullptr, . decltype(cpt->begin()) * ; = nullptr, . decltype(cpt->end()) * ; = nullptr, . typename std::decay< decltype((*pt)[0])>::type * ; = nullptr, . typename A::iterator * ; = nullptr, . typename A::const_iterator * ; = nullptr, . typename A::value_type * ; = nullptr . ). inlinestaticconstexpr . sofatypetraitis_vector; Generated on Mon Nov 11 2024 03:36:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1type_1_1trait_1_1is__vector.html:1232,test,test,1232,api/master/sofa/html/structsofa_1_1type_1_1trait_1_1is__vector.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1type_1_1trait_1_1is__vector.html,5,['test'],['test']
Testability," . Tells if it must be activated automatically(value false : the visitor will switch the shader) or manually (value true : useful when another component wants to use it for itself only) ; Implements sofa::core::visual::Shader. ◆ parse(). void sofa::gl::component::shader::OglShader::parse ; (; core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ reinit(). void sofa::gl::component::shader::OglShader::reinit ; (; ). overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ removeInNode(). bool sofa::gl::component::shader::OglShader::removeInNode ; (; core::objectmodel::BaseNode * ; ). inlineoverridevirtual . the component can remove itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was removed ; Reimplemented from sofa::core::visual::Shader. ◆ setCurrentIndex(). void sofa::gl::component::shader::OglShader::setCurrentIndex ; (; const unsigned int ; index). ◆ setFloat(). void sofa::gl::component::shader::OglShader::setFloat ; (; const unsigned int ; index, . const char * ; name, . float ; f1 . ). ◆ setFloat2(). void sofa::gl::component::shader::OglShader::setFloat2 ; (; const unsigned int ; index, . const char * ; name, . float ; f1, . float ; f2 . ). ◆ setFloat3(). void sofa::gl::component::shader::OglShader::setFloat3 ; (; const unsigned int ; index, . const char * ; name, . float ; f1, . float ; f2, . float ; f3 . ). ◆ setFloat4(). void sofa::gl::component::shader::OglShader::setFloat4 ; (; const unsigned int ; index, . const char * ; name, . float ; f1, . float ; f2, . float ; f3, . float ; f4 . ). ◆ setFloatVector(). void sofa::gl::component::shader::OglShader::setFloatVector ; (; const unsigned int ; ind",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader.html:24181,test,test,24181,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader.html,1,['test'],['test']
Testability," . int ; numY, . int ; numZ, . sofa::type::Vec< 6, SReal > ; entireBoxRoi, . sofa::type::Vec< 6, SReal > ; inclusiveBox, . sofa::type::Vec< 6, SReal > ; includedBox . ). Create a scene with a regular grid and an affine constraint for patch test. . ◆ initSofaConfig(). SOFA_EXPORT_DYNAMIC_LIBRARY void sofa::initSofaConfig ; (; ). ◆ TEST_F() [1/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . End ;  . ). ◆ TEST_F() [2/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . IsEnabled ;  . ). ◆ TEST_F() [3/5]. sofa::TEST_F ; (; AdvancedTimerTest ; , . SetOutputType ;  . ). ◆ TEST_F() [4/5]. sofa::TEST_F ; (; DefaultAnimationLoop_test ; , . testOneStep ;  . ). ◆ TEST_F() [5/5]. sofa::TEST_F ; (; TemplateAliasTest ; , . Register ;  . ). ◆ TYPED_TEST() [1/4]. sofa::TYPED_TEST ; (; AffinePatch_sofa_test ; , . patchTest2D ;  . ). ◆ TYPED_TEST() [2/4]. sofa::TYPED_TEST ; (; AffinePatch_sofa_test ; , . patchTest3D ;  . ). ◆ TYPED_TEST() [3/4]. sofa::TYPED_TEST ; (; LinearElasticity_test ; , . testTractionCorotational ;  . ). ◆ TYPED_TEST() [4/4]. sofa::TYPED_TEST ; (; LinearElasticity_test ; , . testTractionTensorMass ;  . ). ◆ TYPED_TEST_SUITE() [1/2]. sofa::TYPED_TEST_SUITE ; (; AffinePatch_sofa_test ; , . DataTypes ;  . ). ◆ TYPED_TEST_SUITE() [2/2]. sofa::TYPED_TEST_SUITE ; (; LinearElasticity_test ; , . DataTypes ;  . ). Variable Documentation. ◆ poissonRatioArray. const double sofa::poissonRatioArray[] = {0.0,0.3,0.49}. ◆ pressureArray. const double sofa::pressureArray[] = {0.6, 0.2, -0.2, -0.6}. ◆ sizePoissonRatioArray. const size_t sofa::sizePoissonRatioArray = sizeof(poissonRatioArray)/sizeof(poissonRatioArray[0]). ◆ sizePressureArray. const size_t sofa::sizePressureArray = sizeof(pressureArray)/sizeof(pressureArray[0]). ◆ sizeYoungModulusArray. const size_t sofa::sizeYoungModulusArray = sizeof(youngModulusArray)/sizeof(youngModulusArray[0]). ◆ youngModulusArray. const double sofa::youngModulusArray[] = {1.0,2.0}. sofa; Generated on Mon Nov 11 2024 02:16:34 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html:8072,test,testTractionTensorMass,8072,api/master/sofa/html/namespacesofa.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/namespacesofa.html,1,['test'],['testTractionTensorMass']
Testability," . unsigned char flags;  ; static const unsigned char TEST_POTENTIAL_ENERGY = 1;  testing getPotentialEnergy function. The tests will only work with conservative forces (if dissipative forces such as viscosity or damping are computed, the test is wrong) More...;  ; static const unsigned char TEST_ALL = UCHAR_MAX;  testing everything More...;  ;  ForceField_test ();  } More...;  ;  ForceField_test (std::string filename);  ; void run_test (const VecCoord &x, const VecDeriv &v, const VecDeriv &ef, bool initScene=true);  Given positions and velocities, checks that the expected forces are obtained, and that a small change of positions generates the corresponding change of forces. More...;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  ;  Public Member Functions inherited from sofa::testing::BaseSimulationTest;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  ;  Public Member Functions inherited from sofa::testing::NumericTest< _ForceFieldType::DataTypes::Real >;  NumericTest ();  ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Static Public Member Functions inherited from sofa::testing::NumericTest< _ForceFieldType::DataTypes::Real >; static Real matrixMaxDiff (const Matrix1 &m1, const Matrix2 &m2);  return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes More...;  ; static Real matrixMaxDiff (const sofa::type::Mat< M, N, ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1_force_field__test.html:3483,test,testing,3483,api/master/sofa/html/structsofa_1_1_force_field__test.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1_force_field__test.html,2,['test'],['testing']
Testability," ; (; collision::geometry::Cube & ; cube1, . collision::geometry::Cube & ; cube2, . const core::collision::Intersection * ; currentIntersection . ). overridevirtual . Intersectors for cubes using proximities. ; Reimplemented from sofa::component::collision::detection::intersection::BaseProximityIntersection. ◆ testIntersection() [3/22]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testIntersection ; (; collision::geometry::Line & ; , . collision::geometry::Line & ;  . ). delete . ◆ testIntersection() [4/22]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testIntersection ; (; collision::geometry::Line & ; e1, . collision::geometry::Line & ; e2, . const core::collision::Intersection * ; currentIntersection . ). ◆ testIntersection() [5/22]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testIntersection ; (; collision::geometry::Line & ; , . collision::geometry::Point & ;  . ). delete . ◆ testIntersection() [6/22]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testIntersection ; (; collision::geometry::Line & ; e2, . collision::geometry::Point & ; e1, . const core::collision::Intersection * ; currentIntersection . ). ◆ testIntersection() [7/22]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testIntersection ; (; collision::geometry::Line & ; , . collision::geometry::Sphere & ;  . ). delete . ◆ testIntersection() [8/22]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testIntersection ; (; collision::geometry::Line & ; e2, . collision::geometry::Sphere & ; e1, . const core::collision::Intersection * ; currentIntersection . ). ◆ testIntersection() [9/22]. bool sofa::component::collision::detection::intersection::LocalMinDistance::testIntersection ; (; collision::geometry::Point & ; , . collision::geometry::Point & ;  . ). delete . ◆ testIntersection() [10/22]. bool sofa::component::collision::dete",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_local_min_distance.html:33885,test,testIntersection,33885,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_local_min_distance.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_local_min_distance.html,1,['test'],['testIntersection']
Testability," ; (; collision::geometry::Line & ; , . collision::geometry::TSphere< T > & ;  . ). delete . ◆ testIntersection() [6/18]. template<class T > . bool sofa::component::collision::detection::intersection::MeshNewProximityIntersection::testIntersection ; (; collision::geometry::Line & ; e1, . collision::geometry::TSphere< T > & ; e2, . const core::collision::Intersection * ; currentIntersection . ). ◆ testIntersection() [7/18]. bool sofa::component::collision::detection::intersection::MeshNewProximityIntersection::testIntersection ; (; collision::geometry::Point & ; , . collision::geometry::Point & ;  . ). delete . ◆ testIntersection() [8/18]. bool sofa::component::collision::detection::intersection::MeshNewProximityIntersection::testIntersection ; (; collision::geometry::Point & ; pt1, . collision::geometry::Point & ; pt2, . const core::collision::Intersection * ; currentIntersection . ). ◆ testIntersection() [9/18]. bool sofa::component::collision::detection::intersection::MeshNewProximityIntersection::testIntersection ; (; collision::geometry::Triangle & ; , . collision::geometry::Line & ;  . ). delete . ◆ testIntersection() [10/18]. bool sofa::component::collision::detection::intersection::MeshNewProximityIntersection::testIntersection ; (; collision::geometry::Triangle & ; tri, . collision::geometry::Line & ; line, . const core::collision::Intersection * ; currentIntersection . ). ◆ testIntersection() [11/18]. bool sofa::component::collision::detection::intersection::MeshNewProximityIntersection::testIntersection ; (; collision::geometry::Triangle & ; , . collision::geometry::Point & ;  . ). delete . ◆ testIntersection() [12/18]. bool sofa::component::collision::detection::intersection::MeshNewProximityIntersection::testIntersection ; (; collision::geometry::Triangle & ; tri, . collision::geometry::Point & ; pt, . const core::collision::Intersection * ; currentIntersection . ). ◆ testIntersection() [13/18]. bool sofa::component::collision::detection::intersection::M",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_mesh_new_proximity_intersection.html:16533,test,testIntersection,16533,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_mesh_new_proximity_intersection.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_mesh_new_proximity_intersection.html,1,['test'],['testIntersection']
Testability," = SReal> . template<typename _AScalar , int _AOptions, typename _AStorageIndex , typename _BScalar , int _BOptions, typename _BStorageIndex > . static bool sofa::testing::SparseMatrixTest< TReal >::compareSparseMatrix ; (; const Eigen::SparseMatrix< _AScalar, _AOptions, _AStorageIndex > & ; A, . const Eigen::SparseMatrix< _BScalar, _BOptions, _BStorageIndex > & ; B . ). inlinestatic . ◆ copyFromEigen() [1/2]. template<typename TReal = SReal> . template<typename _DstScalar , int _DstOptions, typename _DstStorageIndex , typename _SrcScalar , int _SrcOptions, typename _SrcStorageIndex > . static void sofa::testing::SparseMatrixTest< TReal >::copyFromEigen ; (; Eigen::SparseMatrix< _DstScalar, _DstOptions, _DstStorageIndex > & ; dst, . const Eigen::SparseMatrix< _SrcScalar, _SrcOptions, _SrcStorageIndex > & ; src . ). inlinestatic . ◆ copyFromEigen() [2/2]. template<typename TReal = SReal> . static void sofa::testing::SparseMatrixTest< TReal >::copyFromEigen ; (; linearalgebra::BaseMatrix & ; dst, . const Eigen::SparseMatrix< TReal > & ; src . ). inlinestatic . ◆ generateFromTriplets(). template<typename TReal = SReal> . template<class InputIt > . static void sofa::testing::SparseMatrixTest< TReal >::generateFromTriplets ; (; Eigen::SparseMatrix< TReal > & ; eigenMatrix, . InputIt ; first, . InputIt ; last, . Eigen::Index ; nbRows, . Eigen::Index ; nbCols . ). inlinestatic . ◆ generateRandomSparseMatrix(). template<typename TReal = SReal> . template<int EigenSparseMatrixOptions> . static void sofa::testing::SparseMatrixTest< TReal >::generateRandomSparseMatrix ; (; Eigen::SparseMatrix< TReal, EigenSparseMatrixOptions > & ; eigenMatrix, . Eigen::Index ; nbRows, . Eigen::Index ; nbCols, . TReal ; sparsity . ). inlinestatic . Generate a sparse matrix of size nbRows x nbCols. The sparsity is the ratio of non-zero values compared to the total size of the matrix (= nbRows x nbCols). . sofatestingSparseMatrixTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1testing_1_1_sparse_matrix_test.html:5760,test,testing,5760,api/master/sofa/html/structsofa_1_1testing_1_1_sparse_matrix_test.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1testing_1_1_sparse_matrix_test.html,2,['test'],['testing']
Testability," > &, collision::geometry::Point &, OutputVector *, const core::collision::Intersection *currentIntersection);  ; int computeIntersection (collision::geometry::Line &, collision::geometry::Point &, OutputVector *, const core::collision::Intersection *currentIntersection);  ; template<class T > ; int computeIntersection (collision::geometry::Line &, collision::geometry::TSphere< T > &, OutputVector *, const core::collision::Intersection *currentIntersection);  ; int computeIntersection (collision::geometry::Line &, collision::geometry::Line &, OutputVector *, const core::collision::Intersection *currentIntersection);  ; int computeIntersection (collision::geometry::Triangle &, collision::geometry::Point &, OutputVector *, const core::collision::Intersection *currentIntersection);  ; template<class T > ; int computeIntersection (collision::geometry::Triangle &, collision::geometry::TSphere< T > &, OutputVector *, const core::collision::Intersection *currentIntersection);  ; bool testIntersection (collision::geometry::Point &, collision::geometry::Point &)=delete;  ; template<class T > ; bool testIntersection (collision::geometry::TSphere< T > &, collision::geometry::Point &)=delete;  ; bool testIntersection (collision::geometry::Line &, collision::geometry::Point &)=delete;  ; template<class T > ; bool testIntersection (collision::geometry::Line &, collision::geometry::TSphere< T > &)=delete;  ; bool testIntersection (collision::geometry::Line &, collision::geometry::Line &)=delete;  ; bool testIntersection (collision::geometry::Triangle &, collision::geometry::Point &)=delete;  ; template<class T > ; bool testIntersection (collision::geometry::Triangle &, collision::geometry::TSphere< T > &)=delete;  ; int computeIntersection (collision::geometry::Point &, collision::geometry::Point &, OutputVector *)=delete;  ; template<class T > ; int computeIntersection (collision::geometry::TSphere< T > &, collision::geometry::Point &, OutputVector *)=delete;  ; int computeInterse",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_mesh_min_proximity_intersection.html:2948,test,testIntersection,2948,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_mesh_min_proximity_intersection.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_mesh_min_proximity_intersection.html,1,['test'],['testIntersection']
Testability," > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Inherited, Inherit1)sofa::component::engine::select::SelectLabelROI< _T >; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Index, sofa::Index)sofa::component::engine::select::SelectLabelROI< _T >; SOFA_CLASS(SOFA_TEMPLATE(SelectLabelROI, _T), DataEngine)sofa::component::engine::select::SelectLabelROI< _T >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; T typedefsofa::component::engine::select::SelectLabelROI< _T >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual; ~SelectLabelROI() overridesofa::component::engine::select::SelectLabelROI< _T >inlineprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_select_label_r_o_i-members.html:12705,log,logErrors,12705,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_select_label_r_o_i-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_select_label_r_o_i-members.html,1,['log'],['logErrors']
Testability," > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(DataEngine, core::objectmodel::BaseObject)sofa::core::DataEngine; SOFA_CLASS(SOFA_TEMPLATE(DisplacementMatrixEngine, DataTypes), SOFA_TEMPLATE2(DisplacementTransformEngine, DataTypes, type::Mat4x4))sofa::component::engine::transform::DisplacementMatrixEngine< DataTypes >; DisplacementTransformEngine< DataTypes, type::Mat4x4 >::SOFA_CLASS(SOFA_TEMPLATE2(DisplacementTransformEngine, DataTypes, type::Mat4x4), sofa::core::DataEngine)sofa::component::engine::transform::DisplacementTransformEngine< DataTypes, type::Mat4x4 >; sofa::core::DataEngine::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; SxInversessofa::component::engine::transform::DisplacementMatrixEngine< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; update() finalsofa::core::DataEnginevirtual; updateAllInputsIfDirty()sofa::core::DataTrackerDDGNode; updateIfDirty() constsofa::core::objectmodel::DDGNode; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::engine::transform::DisplacementMatrixEngine< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~DataEngine() overridesofa::core::DataEngineprotected; ~DDGNode()sofa::core::objectmodel::DDGNodevirtual.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_displacement_matrix_engine-members.html:15416,log,logErrors,15416,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_displacement_matrix_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_displacement_matrix_engine-members.html,1,['log'],['logErrors']
Testability," > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_aliassofa::component::sceneutility::makealiascomponent::MakeAliasComponent; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; d_targetcomponentsofa::component::sceneutility::makealiascomponent::MakeAliasComponent; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGloba",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1makealiascomponent_1_1_make_alias_component-members.html:2144,log,logging,2144,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1makealiascomponent_1_1_make_alias_component-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1makealiascomponent_1_1_make_alias_component-members.html,1,['log'],['logging']
Testability," > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_aliassofa::component::sceneutility::makedataaliascomponent::MakeDataAliasComponent; d_componentnamesofa::component::sceneutility::makedataaliascomponent::MakeDataAliasComponent; d_componentStatesofa::core::objectmodel::Base; d_datanamesofa::component::sceneutility::makedataaliascomponent::MakeDataAliasComponent; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseDa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1makedataaliascomponent_1_1_make_data_alias_component-members.html:2160,log,logging,2160,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1makedataaliascomponent_1_1_make_data_alias_component-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1makedataaliascomponent_1_1_make_data_alias_component-members.html,1,['log'],['logging']
Testability," > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_filenamesofa::component::sceneutility::FileMessageHandlerComponent; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; FileMessageHandlerComponent()sofa::component::sceneutility::FileMessageHandlerComponent; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_file_message_handler_component-members.html:2122,log,logging,2122,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_file_message_handler_component-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_file_message_handler_component-members.html,1,['log'],['logging']
Testability," > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_loadedPluginssofa::simulation::RequiredPlugin; d_messageLogCountsofa::core::objectmodel::Basemutable; d_pluginNamesofa::simulation::RequiredPlugin; d_requireAllsofa::simulation::RequiredPlugin; d_requireOnesofa::simulation::RequiredPlugin; d_stopAfterFirstNameFoundsofa::simulation::RequiredPlugin; d_stopAfterFirstSuffixFoundsofa::simulation::RequiredPlugin; d_suffixMapsofa::simulation::RequiredPlugin; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html:2070,log,logging,2070,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html,1,['log'],['logging']
Testability," > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; d_typesofa::component::sceneutility::MessageHandlerComponent; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_message_handler_component-members.html:2114,log,logging,2114,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_message_handler_component-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_message_handler_component-members.html,1,['log'],['logging']
Testability," > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; Edge typedefsofa::core::topology::Topology; EdgeID typedefsofa::core::topology::Topology; ElemID typedefsofa::core::topology::Topology; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology-members.html:2066,log,logging,2066,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology-members.html,1,['log'],['logging']
Testability," > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_input_event_reader-members.html:2092,log,logging,2092,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_input_event_reader-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_input_event_reader-members.html,13,['log'],['logging']
Testability," > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, sofa::core::objectmodel::BaseContext *context, sofa::core::objectmodel::BaseObjectDescription *arg)sofa::component::collision::detection::algorithm::DirectSAPinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; DirectSAP()=defaultsofa::component::collision::detection::algorithm::DirectSAPprotected; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalFi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p-members.html:2124,log,logging,2124,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p-members.html,1,['log'],['logging']
Testability," > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, sofa::core::objectmodel::BaseContext *context, sofa::core::objectmodel::BaseObjectDescription *arg)sofa::component::collision::detection::algorithm::RayTraceDetectioninlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const s",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_ray_trace_detection-members.html:2140,log,logging,2140,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_ray_trace_detection-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_ray_trace_detection-members.html,1,['log'],['logging']
Testability," > outputs)sofa::core::objectmodel::Base; apply()=0sofa::core::objectmodel::ContextObjectpure virtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; ContextObject()sofa::core::objectmodel::ContextObjectinlineprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html:2213,log,logging,2213,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html,1,['log'],['logging']
Testability," >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >, and sofa::component::mass::DiagonalMass< DataTypes, GeometricalTypes >. ◆ removeInNode(). virtual bool sofa::core::objectmodel::BaseObject::removeInNode ; (; BaseNode * ; ). inlinevirtual . the component can remove itself directly in the right sequence in the Node so the Node does not have to test its type against all known types Returnstrue if the component was removed ; Reimplemented in sofa::core::visual::VisualModel, sofa::core::visual::VisualManager, sofa::core::visual::VisualLoop, sofa::core::visual::Shader, sofa::core::topology::Topology, sofa::core::topology::BaseTopologyObject, sofa::core::topology::TopologyContainer, sofa::core::topology::BaseMeshTopology, sofa::core::objectmodel::ContextObject, sofa::core::objectmodel::ConfigurationSetting, sofa::core::CollisionModel, sofa::core::collision::Pipeline, sofa::core::BehaviorModel, sofa::core::behavior::OdeSolver, sofa::core::behavior::Mass< DataTypes >, sofa::core::behavior::ConstraintSolver, sofa::core::behavior::BaseProjectiveConstraintSet, sofa::core::behavior::BaseMechanicalState, sofa::core::behavior::BaseMass, sofa::core::behavior::BaseLinearSolver, sofa::core::behavior::BaseInteractionForceField, sofa::core::behavior::BaseForceField, sofa::core::behavior::BaseConstraintSet, sofa::core::behavior::BaseAnimationLoop, sofa::core::BaseState, sofa::core::BaseMapping, sofa::gl::component::shader::OglShader, sofa::gl::component::rendering3d::OglCylinderModel, sofa::gl::component::rendering3d::DataDisplay, and sofa::component::visual::VisualModelImpl. ◆ removeSlave(). void sofa::core::objectmodel::BaseObject::removeSlave ; (; BaseObject::SPtr ; s). virtual . ◆ reset(). void sofa::core::objectmodel::BaseObject::reset ; (; ). virtual . Reset to initial state. ; Reimplemented in sofa::core::collision::Pipeline, sofa::simulation::PipelineImpl, sofa::component::visual::TrailRend",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html:76513,test,test,76513,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object.html,1,['test'],['test']
Testability," >:. [legend]; Detailed Description; template<class T>; struct sofa::linearalgebra::testing::TestSparseMatrixProduct< T >; Test the class SparseMatrixProduct The class is designed to use the templates defined in TestSparseMatrixProductTraits The type of matrix can be any of the types supported by SparseMatrixProduct. . Public Member Functions; bool checkMatrix (typename LHSMatrix::Index nbRowsA, typename LHSMatrix::Index nbColsA, typename RHSMatrix::Index nbColsB, Real sparsity);  ;  Public Member Functions inherited from sofa::testing::NumericTest< _Real >;  NumericTest ();  ; template<class Container1 , class Container2 > ; Real vectorMaxDiff (const Container1 &c1, const Container2 &c2);  Return the maximum difference between two containers. Issues a failure if sizes are different. More...;  ; template<class Container > ; Real vectorMaxAbs (const Container &c);  Return the maximum absolute value of a container. More...;  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Static Public Member Functions; template<int EigenSparseMatrixOptions> ; static void generateRandomSparseMatrix (Eigen::SparseMatrix< TReal, EigenSparseMatrixOptions > &eigenMatrix, Eigen::Index nbRows, Eigen::Index nbCols, TReal sparsity);  ; template<typename _DstScalar , int _DstOptions, typename _DstStorageIndex , typename _SrcScalar , int _SrcOptions, typename _SrcStorageIndex > ; static void copyFromEigen (Eigen::SparseMatrix< _DstScalar, _DstOptions, _DstStorageIndex > &dst, const Eigen::SparseMatrix< _SrcScalar, _SrcOptions, _SrcStorageIndex > &src);  ; static void copyFromEigen (linearalgebra::BaseMatrix &dst, const Eigen::SparseMatrix< TReal > &src);  ; template<typename _AScalar , int _AOptions, typename _AStorageIndex , typename _BScalar , int _BOptions, typename _BStorageIndex > ; static bool compareSparseMatri",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1linearalgebra_1_1testing_1_1_test_sparse_matrix_product.html:1447,test,testing,1447,api/master/sofa/html/structsofa_1_1linearalgebra_1_1testing_1_1_test_sparse_matrix_product.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1linearalgebra_1_1testing_1_1_test_sparse_matrix_product.html,1,['test'],['testing']
Testability," >; SOFA_CLASS(SOFA_TEMPLATE(PositionBasedDynamicsProjectiveConstraint, DataTypes), SOFA_TEMPLATE(sofa::core::behavior::ProjectiveConstraintSet, DataTypes))sofa::component::constraint::projective::PositionBasedDynamicsProjectiveConstraint< DataTypes >; sofa::core::behavior::ProjectiveConstraintSet::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SOFA_CLASS2(SOFA_TEMPLATE(ProjectiveConstraintSet, DataTypes), BaseProjectiveConstraintSet, SOFA_TEMPLATE(SingleStateAccessor, DataTypes))sofa::core::behavior::ProjectiveConstraintSet< DataTypes >; SPtr typedefsofa::core::objectmodel::Base; StateAccessor()sofa::core::behavior::StateAccessorinlineprotected; stiffnesssofa::component::constraint::projective::PositionBasedDynamicsProjectiveConstraint< DataTypes >; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecCoord typedefsofa::component::constraint::projective::PositionBasedDynamicsProjectiveConstraint< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::constraint::projective::PositionBasedDynamicsProjectiveConstraint< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; velocitysofa::component::constraint::projective::PositionBasedDynamicsProjectiveConstraint< DataTypes >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~BaseProjectiveConstraintSet() overridesofa::core::behavior::BaseProjectiveConstraintSetinlineprotected; ~PositionBasedDynamicsProjectiveConstraint()sofa::component::constra",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_position_based_dynamics_projective_constraint-members.html:17605,log,logErrors,17605,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_position_based_dynamics_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_position_based_dynamics_projective_constraint-members.html,1,['log'],['logErrors']
Testability," >; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSystemSolution(core::MultiVecDerivId v)sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >virtual; setSystemSolution(core::MultiVecDerivId v)sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >; setSystemSolution(core::MultiVecDerivId v)sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(BaseMatrixLinearSystem, core::objectmodel::BaseObject)sofa::core::behavior::BaseMatrixLinearSystem; SOFA_CLASS(SOFA_TEMPLATE2(TypedMatrixLinearSystem, TMatrix, TVector), sofa::core::behavior::BaseMatrixLinearSystem)sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >; sofa::core::behavior::BaseMatrixLinearSystem::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; Vector typedefsofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected.",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_typed_matrix_linear_system-members.html:14938,log,logErrors,14938,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_typed_matrix_linear_system-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_typed_matrix_linear_system-members.html,1,['log'],['logErrors']
Testability," >virtual; ForceField< DataTypes >::addForce(const MechanicalParams *mparams, MultiVecDerivId fId) overridesofa::core::behavior::ForceField< DataTypes >virtual; addKToMatrix(sofa::linearalgebra::BaseMatrix *mat, SReal k, unsigned int &offset) overridesofa::component::mechanicalload::ConstantForceField< DataTypes >virtual; addKToMatrix(const sofa::core::behavior::MultiMatrixAccessor *, SReal)sofa::component::mechanicalload::ConstantForceField< DataTypes >virtual; ForceField< DataTypes >::addKToMatrix(const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix) overridesofa::core::behavior::ForceField< DataTypes >virtual; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMBKdx(const MechanicalParams *mparams, MultiVecDerivId dfId)sofa::core::behavior::BaseForceFieldvirtual; addMBKToMatrix(const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix)sofa::core::behavior::BaseForceFieldvirtual; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addToMatrix(sofa::linearalgebra::BaseMatrix *bm, unsigned offset, const IndexArray &nodeIndex, const ElementMat &em, SReal scale)sofa::core::behavior::ForceField< DataTypes >inline; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseForceField()sofa::core::behavior::BaseForceFieldprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildDampingMatrix(core::behavior::DampingMatrix *) finalsofa::co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_constant_force_field-members.html:2951,log,logging,2951,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_constant_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_constant_force_field-members.html,1,['log'],['logging']
Testability," AABB_TYPE enum valuesofa::core::CollisionModel; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addContact(response::contact::BaseRayContact *contact)sofa::component::collision::geometry::RayCollisionModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addGroup(const int groupId)sofa::core::CollisionModelinline; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addRay(const type::Vec3 &origin, const type::Vec3 &direction, SReal length)sofa::component::collision::geometry::RayCollisionModel; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyTranslation(const double dx, const double dy, const double dz)sofa::component::collision::geometry::RayCollisionModel; bActivesofa::core::CollisionModelprotected; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; begin()sofa::core::Colli",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_ray_collision_model-members.html:983,log,logging,983,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_ray_collision_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_ray_collision_model-members.html,1,['log'],['logging']
Testability," AABB_TYPE enum valuesofa::core::CollisionModel; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addCube(Cube subcellsBegin, Cube subcellsEnd)sofa::component::collision::geometry::CubeCollisionModel; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addGroup(const int groupId)sofa::core::CollisionModelinline; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; bActivesofa::core::CollisionModelprotected; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; begin()sofa::core::CollisionModelinline; bMovingsofa::core::CollisionModelprotected; bSelfCollisionsofa::core::CollisionModelprotected; bSimulatedsofa::core::CollisionModelprotected; bwdInit() overridesofa::core::CollisionModelvirtual; canCollideWith(CollisionModel *model)sofa::core::CollisionModel",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_cube_collision_model-members.html:964,log,logging,964,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_cube_collision_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_cube_collision_model-members.html,1,['log'],['logging']
Testability," AABB_TYPE enum valuesofa::core::CollisionModel; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addGroup(const int groupId)sofa::core::CollisionModelinline; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addTetraToDraw(const Tetrahedron &t, std::vector< sofa::type::Vec3 > &tetraVertices, std::vector< sofa::type::Vec3 > &normalVertices)sofa::component::collision::geometry::TetrahedronCollisionModelprotected; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; bActivesofa::core::CollisionModelprotected; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; begin()sofa::core::CollisionModelinline; bMovingsofa::core::CollisionModelprotected; bSelfCollisionsofa::core::CollisionModelprotected; bSimulatedsofa::core::CollisionModelprotected",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_tetrahedron_collision_model-members.html:875,log,logging,875,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_tetrahedron_collision_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_tetrahedron_collision_model-members.html,1,['log'],['logging']
Testability," AABB_TYPE enum valuesofa::core::CollisionModel; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addGroup(const int groupId)sofa::core::CollisionModelinline; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; axis(sofa::Index index) constsofa::component::collision::geometry::CylinderCollisionModel< TDataTypes >; bActivesofa::core::CollisionModelprotected; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; begin()sofa::core::CollisionModelinline; bMovingsofa::core::CollisionModelprotected; bSelfCollisionsofa::core::CollisionModelprotected; bSimulatedsofa::core::CollisionModelprotected; bwdInit() overridesofa::core::CollisionModelvirtual; canCollideWith(CollisionM",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_cylinder_collision_model-members.html:897,log,logging,897,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_cylinder_collision_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_cylinder_collision_model-members.html,1,['log'],['logging']
Testability," AABB_TYPE enum valuesofa::core::CollisionModel; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addGroup(const int groupId)sofa::core::CollisionModelinline; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; bActivesofa::core::CollisionModelprotected; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; begin()sofa::core::CollisionModelinline; bMovingsofa::core::CollisionModelprotected; bSelfCollisionsofa::core::CollisionModelprotected; bSimulatedsofa::core::CollisionModelprotected; buildOctree()sofa::component::collision::geometry::TriangleOctreeModel; sofa::helper::TriangleOctreeRoot::buildOctree(const SeqTriangles *triangles, const VecCoord *pos)sofa::helper::TriangleOctreeRootinline; bwdInit(",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_octree_model-members.html:863,log,logging,863,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_octree_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_octree_model-members.html,1,['log'],['logging']
Testability," AABB_TYPE enum valuesofa::core::CollisionModel; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addGroup(const int groupId)sofa::core::CollisionModelinline; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; bActivesofa::core::CollisionModelprotected; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; begin()sofa::core::CollisionModelinline; bMovingsofa::core::CollisionModelprotected; bSelfCollisionsofa::core::CollisionModelprotected; bSimulatedsofa::core::CollisionModelprotected; bwdInit() overridesofa::core::CollisionModelvirtual; canCollideWith(CollisionModel *model)sofa::core::CollisionModelvirtual; canCollideWithElement(Index, CollisionModel *, Index)sofa::cor",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_sphere_collision_model-members.html:893,log,logging,893,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_sphere_collision_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_sphere_collision_model-members.html,1,['log'],['logging']
Testability," AABB_TYPE enum valuesofa::core::CollisionModel; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addGroup(const int groupId)sofa::core::CollisionModelinline; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; bActivesofa::core::CollisionModelprotected; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; begin()sofa::core::CollisionModelinline; bMovingsofa::core::CollisionModelprotected; bSelfCollisionsofa::core::CollisionModelprotected; bSimulatedsofa::core::CollisionModelprotected; bwdInit() overridesofa::core::CollisionModelvirtual; canCollideWith(CollisionModel *model)sofa::core::CollisionModelvirtual; canCollideWithElement(Index, CollisionModel *, Index)sofa::core::CollisionModelinlinevirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_collision_model-members.html:801,log,logging,801,api/master/sofa/html/classsofa_1_1core_1_1_collision_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_collision_model-members.html,1,['log'],['logging']
Testability," AABB_TYPE enum valuesofa::core::CollisionModel; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addGroup(const int groupId)sofa::core::CollisionModelinline; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; bActivesofa::core::CollisionModelprotected; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; begin()sofa::core::CollisionModelinline; bMovingsofa::core::CollisionModelprotected; bSelfCollisionsofa::core::CollisionModelprotected; bSimulatedsofa::core::CollisionModelprotected; bwdInit() overridesofa::core::CollisionModelvirtual; canCollideWith(CollisionModel *model)sofa::core::CollisionModelvirtual; canCollideWithElement(sofa::Index index, CollisionModel *m",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model-members.html:897,log,logging,897,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_collision_model-members.html,1,['log'],['logging']
Testability," AABB_TYPE enum valuesofa::core::CollisionModel; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addGroup(const int groupId)sofa::core::CollisionModelinline; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; bActivesofa::core::CollisionModelprotected; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; begin()sofa::core::CollisionModelinline; bMovingsofa::core::CollisionModelprotected; bothSidesofa::component::collision::geometry::LineCollisionModel< TDataTypes >; bSelfCollisionsofa::core::CollisionModelprotected; bSimulatedsofa::core::CollisionModelprotected; bwdInit() overridesofa::core::CollisionModelvirtual; canCollideWith(CollisionModel *model)sofa::core::Collision",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model-members.html:889,log,logging,889,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_line_collision_model-members.html,1,['log'],['logging']
Testability," AABB_TYPE enum valuesofa::core::CollisionModel; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addGroup(const int groupId)sofa::core::CollisionModelinline; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; bActivesofa::core::CollisionModelprotected; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; begin()sofa::core::CollisionModelinline; bMovingsofa::core::CollisionModelprotected; bothSidesofa::component::collision::geometry::PointCollisionModel< TDataTypes >; bSelfCollisionsofa::core::CollisionModelprotected; bSimulatedsofa::core::CollisionModelprotected; bwdInit() overridesofa::core::CollisionModelvirtual; canCollideWith(CollisionModel *model)sofa::core::Collis",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_point_collision_model-members.html:891,log,logging,891,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_point_collision_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_point_collision_model-members.html,1,['log'],['logging']
Testability," ACUTE enum valuesofa::component::topology::container::dynamic::PointSetGeometryAlgorithms< DataTypes >; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Angle enum namesofa::component::topology::container::dynamic::PointSetGeometryAlgorithms< DataTypes >; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseTopologyObject()sofa::core::topology::BaseTopologyObjectinlineprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *&obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg)sofa::component::topology::container::dynamic::Point",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_geometry_algorithms-members.html:916,log,logging,916,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_geometry_algorithms-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_geometry_algorithms-members.html,1,['log'],['logging']
Testability," AbstractTransformMatrixEngine()sofa::component::engine::transform::AbstractTransformMatrixEngineprotected; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObjec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_translate_transform_matrix_engine-members.html:1147,log,logging,1147,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_translate_transform_matrix_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_translate_transform_matrix_engine-members.html,1,['log'],['logging']
Testability," AbstractTransformMatrixEngine()sofa::component::engine::transform::AbstractTransformMatrixEngineprotected; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject(",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_abstract_transform_matrix_engine-members.html:1145,log,logging,1145,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_abstract_transform_matrix_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_abstract_transform_matrix_engine-members.html,1,['log'],['logging']
Testability," AbstractTransformMatrixEngine()sofa::component::engine::transform::AbstractTransformMatrixEngineprotected; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sof",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_rotate_transform_matrix_engine-members.html:1141,log,logging,1141,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_rotate_transform_matrix_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_rotate_transform_matrix_engine-members.html,2,['log'],['logging']
Testability," AbstractTransformMatrixEngine()sofa::component::engine::transform::AbstractTransformMatrixEngineprotected; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_scale_transform_matrix_engine-members.html:1139,log,logging,1139,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_scale_transform_matrix_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_scale_transform_matrix_engine-members.html,1,['log'],['logging']
Testability," Advice enum valuesofa::helper::logging::Message; AnyTypessofa::helper::logging::Messagestatic; CEmpty enum valuesofa::helper::logging::Message; Class enum namesofa::helper::logging::Message; ClassCount enum valuesofa::helper::logging::Message; componentInfo() constsofa::helper::logging::Messageinline; context() constsofa::helper::logging::Messageinline; Deprecated enum valuesofa::helper::logging::Message; Dev enum valuesofa::helper::logging::Message; empty() constsofa::helper::logging::Message; emptyMsgsofa::helper::logging::Messagestatic; Error enum valuesofa::helper::logging::Message; Fatal enum valuesofa::helper::logging::Message; fileInfo() constsofa::helper::logging::Messageinline; Info enum valuesofa::helper::logging::Message; Log enum valuesofa::helper::logging::Message; m_classsofa::helper::logging::Messageprotected; m_componentinfosofa::helper::logging::Messageprotected; m_fileInfosofa::helper::logging::Messageprotected; m_idsofa::helper::logging::Messageprotected; m_streamsofa::helper::logging::Messageprotected; m_typesofa::helper::logging::Messageprotected; message() constsofa::helper::logging::Messageinline; Message()sofa::helper::logging::Messageinline; Message(const Message &msg)sofa::helper::logging::Message; Message(Class mclass, Type type, const ComponentInfo::SPtr &=ComponentInfo::SPtr(), const FileInfo::SPtr &fileInfo=EmptyFileInfo)sofa::helper::logging::Message; messageAsString() constsofa::helper::logging::Messageinline; operator<<(const T &x)sofa::helper::logging::Messageinline; operator<<(const FileInfo::SPtr &fi)sofa::helper::logging::Message; operator=(const Message &msg)sofa::helper::logging::Message; Runtime enum valuesofa::helper::logging::Message; sender() constsofa::helper::logging::Messagei",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1logging_1_1_message-members.html:282,log,logging,282,api/master/sofa/html/classsofa_1_1helper_1_1logging_1_1_message-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1logging_1_1_message-members.html,20,['log'],['logging']
Testability," Base typedefsofa::linearalgebra::testing::TestSparseMatrixProduct< T >; BaseTest()sofa::testing::BaseTest; checkMatrix(typename LHSMatrix::Index nbRowsA, typename LHSMatrix::Index nbColsA, typename RHSMatrix::Index nbColsB, Real sparsity)sofa::linearalgebra::testing::TestSparseMatrixProduct< T >inline; compareEigenSparseMatrix(const Eigen::SparseMatrix< _AScalar, _AOptions, _AStorageIndex > &A, const Eigen::SparseMatrix< _BScalar, _BOptions, _BStorageIndex > &B)sofa::testing::SparseMatrixTest< T::LhsScalar >inlinestatic; compareSparseMatrix(const Eigen::SparseMatrix< _AScalar, _AOptions, _AStorageIndex > &A, const Eigen::SparseMatrix< _BScalar, _BOptions, _BStorageIndex > &B)sofa::linearalgebra::testing::TestSparseMatrixProduct< T >inlinestatic; SparseMatrixTest< T::LhsScalar >::compareSparseMatrix(const Eigen::SparseMatrix< _AScalar, _AOptions, _AStorageIndex > &A, const Eigen::SparseMatrix< _BScalar, _BOptions, _BStorageIndex > &B)sofa::testing::SparseMatrixTest< T::LhsScalar >inlinestatic; copyFromEigen(Eigen::SparseMatrix< _DstScalar, _DstOptions, _DstStorageIndex > &dst, const Eigen::SparseMatrix< _SrcScalar, _SrcOptions, _SrcStorageIndex > &src)sofa::linearalgebra::testing::TestSparseMatrixProduct< T >inlinestatic; copyFromEigen(linearalgebra::BaseMatrix &dst, const Eigen::SparseMatrix< TReal > &src)sofa::linearalgebra::testing::TestSparseMatrixProduct< T >inlinestatic; SparseMatrixTest< T::LhsScalar >::copyFromEigen(Eigen::SparseMatrix< _DstScalar, _DstOptions, _DstStorageIndex > &dst, const Eigen::SparseMatrix< _SrcScalar, _SrcOptions, _SrcStorageIndex > &src)sofa::testing::SparseMatrixTest< T::LhsScalar >inlinestatic; SparseMatrixTest< T::LhsScalar >::copyF",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1linearalgebra_1_1testing_1_1_test_sparse_matrix_product-members.html:340,test,testing,340,api/master/sofa/html/structsofa_1_1linearalgebra_1_1testing_1_1_test_sparse_matrix_product-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1linearalgebra_1_1testing_1_1_test_sparse_matrix_product-members.html,6,['test'],['testing']
Testability," Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buttonsofa::component::setting::MouseButtonSetting; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; ConfigurationSetting()sofa::core::objectmodel::ConfigurationSettingprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_arrowSizesofa::gui::component::AttachBodyButtonSetting; d_buttonsofa::component::setting::MouseButtonSetting; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; d_showFactorSizesofa::gui::component::AttachBodyButtonSetting; d_stiffnesssofa::gui::component::AttachBodyButtonSetting; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmode",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_attach_body_button_setting-members.html:2349,log,logging,2349,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_attach_body_button_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_attach_body_button_setting-members.html,1,['log'],['logging']
Testability," Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buttonsofa::component::setting::MouseButtonSetting; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; ConfigurationSetting()sofa::core::objectmodel::ConfigurationSettingprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_buttonsofa::component::setting::MouseButtonSetting; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_mouse_button_setting-members.html:2266,log,logging,2266,api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_mouse_button_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_mouse_button_setting-members.html,6,['log'],['logging']
Testability," BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; checkLinearSolverSymmetry(const core::MechanicalParams *mparams) constsofa::component::mapping::nonlinear::NonLinearMappingData< HasStabilizedGeometricStiffness >protected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeAccFromMapping(const MechanicalParams *mparams, MultiVecDerivId outAcc, ConstMultiVecDerivId inVel, ConstMultiVecDerivId inAcc) overridesofa::core::Mapping< TIn, TOut >virtual; computeAccFromMapping(const MechanicalParams *, OutDataVecDeriv &, const InDataVecDeriv &, const InDataVecDeriv &)sofa::core::Mapping< TIn, TOut >inlinevirtual; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg)sofa::core::Mapping< TIn, TOut >inlinestatic; createMappedMatrix(const behavior::BaseMechanicalState *state1, const behavior::BaseMechanicalState *state2, func_createMappedMatrix) overridesofa::core::Mapping< TIn, TOut >virtual; d_componentStatesofa::core::objectmodel::Base; d_geometricStiffnesssofa::component::mapping::nonlinear::NonLinearMappingData< HasStabilizedGeometricStiffness >; d_messageLogCountsofa::core::objectmodel::Basemutable; disable() overridesofa::core::Mapping< TIn, TOut >virtual; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; doUpdateK(const core::MechanicalParams *mparams, const Data< VecDeriv_t< Out > > &childForce, SparseKMatrixEigen &matrix) overridesofa::component::mapping::nonlinear::SquareMapping< TIn, TOut >protectedvirtual; draw(const co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_square_mapping-members.html:5555,log,logging,5555,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_square_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_square_mapping-members.html,1,['log'],['logging']
Testability," BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; checkLinearSolverSymmetry(const core::MechanicalParams *mparams) constsofa::component::mapping::nonlinear::NonLinearMappingData< HasStabilizedGeometricStiffness >protected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeAccFromMapping(const MechanicalParams *mparams, MultiVecDerivId outAcc, ConstMultiVecDerivId inVel, ConstMultiVecDerivId inAcc) overridesofa::core::Mapping< TIn, TOut >virtual; computeAccFromMapping(const MechanicalParams *, OutDataVecDeriv &, const InDataVecDeriv &, const InDataVecDeriv &)sofa::core::Mapping< TIn, TOut >inlinevirtual; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg)sofa::core::Mapping< TIn, TOut >inlinestatic; createMappedMatrix(const behavior::BaseMechanicalState *state1, const behavior::BaseMechanicalState *state2, func_createMappedMatrix) overridesofa::core::Mapping< TIn, TOut >virtual; d_componentStatesofa::core::objectmodel::Base; d_geometricStiffnesssofa::component::mapping::nonlinear::NonLinearMappingData< HasStabilizedGeometricStiffness >; d_messageLogCountsofa::core::objectmodel::Basemutable; disable() overridesofa::core::Mapping< TIn, TOut >virtual; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; doUpdateK(const core::MechanicalParams *mparams, const Data< VecDeriv_t< Out > > &childForce, SparseKMatrixEigen &matrix)=0sofa::component::mapping::nonlinear::BaseNonLinearMapping< TIn, TOut, HasStabilizedGeometricStiffness",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_non_linear_mapping-members.html:5428,log,logging,5428,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_non_linear_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_non_linear_mapping-members.html,1,['log'],['logging']
Testability," BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; computeCollisionDetection() overridesofa::simulation::PipelineImplvirtual; computeCollisionReset() overridesofa::simulation::PipelineImplvirtual; computeCollisionResponse() overridesofa::simulation::PipelineImplvirtual; computeCollisions()sofa::core::collision::Pipelineinline; contactManagersofa::core::collision::Pipelineprotected; contactManagerssofa::core::collision::Pipelineprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; doCollisionDetection(const sofa::type::vector< core::CollisionModel * > &collisionModels)=0sofa::core::collision::Pipelineprotectedpure virtual; doCollisionReset()=0sofa::core::collision::Pipelineprotectedpure virtual; doCollisionResponse()=0sofa::core::collision::Pipelineprotectedpure virtual; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Ba",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html:2580,log,logging,2580,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,1,['log'],['logging']
Testability," BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; ConfigurationSetting()sofa::core::objectmodel::ConfigurationSettingprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_dumpStatesofa::component::setting::StatsSetting; d_exportStatesofa::component::setting::StatsSetting; d_logTimesofa::component::setting::StatsSetting; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; dumpStatesofa::component::setting::StatsSetting; exportStatesofa::component::setting::StatsSetting; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)so",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_stats_setting-members.html:2202,log,logging,2202,api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_stats_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_stats_setting-members.html,1,['log'],['logging']
Testability," BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; ConfigurationSetting()sofa::core::objectmodel::ConfigurationSettingprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_gnuplotPathsofa::component::setting::SofaDefaultPathSetting; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLin",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_sofa_default_path_setting-members.html:2222,log,logging,2222,api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_sofa_default_path_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_sofa_default_path_setting-members.html,1,['log'],['logging']
Testability," BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; ConfigurationSetting()sofa::core::objectmodel::ConfigurationSettingprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std::string &name) constsofa::core::objectmodel::Base; findLinkDest(T *&ptr, const std::string &path, const BaseLink *link)so",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html:2216,log,logging,2216,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_configuration_setting-members.html,1,['log'],['logging']
Testability," BaseMapping)sofa::core::Mapping< TIn, TOut >; sofa::core::BaseMapping::SOFA_ABSTRACT_CLASS(BaseMapping, objectmodel::BaseObject)sofa::core::BaseMapping; SOFA_CLASS(SOFA_TEMPLATE2(SquareMapping, TIn, TOut), SOFA_TEMPLATE3(BaseNonLinearMapping, TIn, TOut, false))sofa::component::mapping::nonlinear::SquareMapping< TIn, TOut >; BaseNonLinearMapping< TIn, TOut, false >::SOFA_CLASS(SOFA_TEMPLATE3(BaseNonLinearMapping, TIn, TOut, HasStabilizedGeometricStiffness), SOFA_TEMPLATE2(core::Mapping, TIn, TOut))sofa::component::mapping::nonlinear::BaseNonLinearMapping< TIn, TOut, false >; sofa::core::Mapping::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SparseKMatrixEigen typedefsofa::component::mapping::nonlinear::BaseNonLinearMapping< TIn, TOut, false >protected; SparseMatrixEigen typedefsofa::component::mapping::nonlinear::BaseNonLinearMapping< TIn, TOut, false >; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; testMechanicalState(BaseState *state)sofa::core::BaseMappingprotected; toModelsofa::core::Mapping< TIn, TOut >protected; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateK(const core::MechanicalParams *mparams, core::ConstMultiVecDerivId childForceId) finalsofa::component::mapping::nonlinear::BaseNonLinearMapping< TIn, TOut, false >virtual; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseMapping() overridesofa::core::BaseMappingprotected; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotecte",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_square_mapping-members.html:17971,test,testMechanicalState,17971,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_square_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_square_mapping-members.html,1,['test'],['testMechanicalState']
Testability," BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildGrid()sofa::component::visual::VisualGrid; bwdDraw(VisualParams *)sofa::core::visual::VisualModelinlinevirtual; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; clearVisual()sofa::core::visual::VisualModelinlinevirtual; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_colorsofa::component::visual::VisualGrid; d_componentStatesofa::core::objectmodel::Base; d_drawsofa::component::visual::VisualGrid; d_enablesofa::core::visual::VisualModel; d_messageLogCountsofa::core::objectmodel::Basemutable; d_nbSubdivsofa::component::visual::VisualGrid; d_planesofa::component::visual::VisualGrid; d_sizesofa::component::visual::VisualGrid; d_thicknesssofa::component::visual::VisualGrid; doDrawVisual(const core::visual::VisualParams *) overridesofa::component::visual::VisualGridvirtual; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; doUpdateVisual(const core::visual::VisualParams *) overridesofa::component::visual::VisualGridvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; drawShadow(const VisualParams *vparams)sofa::core::vi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_grid-members.html:2745,log,logging,2745,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_grid-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_grid-members.html,1,['log'],['logging']
Testability," BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanDirty(const core::ExecParams *params=nullptr)sofa::core::DataTrackerDDGNodevirtual; sofa::core::objectmodel::DDGNode::cleanDirty()sofa::core::objectmodel::DDGNode; cleanDirtyOutputsOfInputs()sofa::core::objectmodel::DDGNodeprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *params, bool onlyVisible) overridesofa::component::engine::transform::SmoothMeshEngine< DataTypes >virtual; Coord typedefsofa::component::engine::transform::SmoothMeshEngine< DataTypes >; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; DataEngine()sofa::core::DataEngineprotected; DataTrackerDDGNode()sofa::core::DataTrackerDDGNodeinline; DDGLinkContainer typedefsofa::core::objectmodel::DDGNode; DDGLinkIterator typedefsofa::core::objectmodel::DDGNode; DDGNode()sofa::core::objectmodel::DDGNode; delInput(DDGNode *n)sofa::core::objectmodel::DDGNode; delOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; doAddInput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doAddOutput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doDelInput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doDelOutput(DDGNode *n)sofa::core::objectmodel::DDGNodeprotectedvirtual; doInternalUpdate() finalsofa::core::DataEngineinlineprotectedvirtual",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_smooth_mesh_engine-members.html:3066,log,logging,3066,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_smooth_mesh_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_smooth_mesh_engine-members.html,1,['log'],['logging']
Testability," ConstMultiMatrixDerivId id, type::vector< const InDataMatrixDeriv * > &v) const;  ; void getVecOutCoord (const MultiVecCoordId id, type::vector< OutDataVecCoord * > &v) const;  ; void getConstVecOutCoord (const ConstMultiVecCoordId id, type::vector< const OutDataVecCoord * > &v) const;  ; void getVecOutDeriv (const MultiVecDerivId id, type::vector< OutDataVecDeriv * > &v) const;  ; void getConstVecOutDeriv (const ConstMultiVecDerivId id, type::vector< const OutDataVecDeriv * > &v) const;  ; void getMatOutDeriv (const MultiMatrixDerivId id, type::vector< OutDataMatrixDeriv * > &v) const;  ; void getConstMatOutDeriv (const ConstMultiMatrixDerivId id, type::vector< const OutDataMatrixDeriv * > &v) const;  ;  Protected Member Functions inherited from sofa::core::BaseMapping;  BaseMapping ();  Constructor. More...;  ;  ~BaseMapping () override;  Destructor. More...;  ; bool testMechanicalState (BaseState *state);  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitD",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_distance_multi_mapping.html:22300,test,testMechanicalState,22300,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_distance_multi_mapping.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_distance_multi_mapping.html,2,['test'],['testMechanicalState']
Testability," Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (LocalMinDistance, BaseProximityIntersection);  ; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; bool testIntersection (collision::geometry::Cube &, collision::geometry::Cube &, const core::collision::Intersection *currentIntersection) override;  Intersectors for cubes using proximities. More...;  ; bool testIntersection (collision::geometry::Point &, collision::geometry::Point &, const core::collision::Intersection *currentIntersection);  ; bool testIntersection (collision::geometry::Sphere &, collision::geometry::Point &, const core::collision::Intersection *currentIntersection);  ; bool testIntersection (collision::geometry::Sphere &, collision::geometry::Sphere &, const core::collision::Intersection *currentIntersection) override;  ; bool testIntersection (collision::geometry::Line &, collision::geometry::Point &, const core::collision::Intersection *currentIntersection);  ; bool testIntersection (collision::geometry::Line &, collision::geometry::Sphere &, const core::collision::Intersection *currentIntersection);  ; bool testIntersection (collision::geometry::Line &, collision::geometry::Line &, const core::collision::Intersection *currentIntersection);  ; bool testI",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_local_min_distance.html:3409,test,testIntersection,3409,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_local_min_distance.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_local_min_distance.html,1,['test'],['testIntersection']
Testability," DataTypes >inline; getElementMass(sofa::Index index) const overridesofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >virtual; sofa::core::behavior::Mass::getElementMass(sofa::Index index, linearalgebra::BaseMatrix *m) const overridesofa::core::behavior::Mass< DataTypes >virtual; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getKineticEnergy(const core::MechanicalParams *, const DataVecDeriv &) const overridesofa::component::solidmechanics::fem::elastic::HexahedralFEMForceFieldAndMass< DataTypes >inlinevirtual; sofa::core::behavior::Mass::getKineticEnergy(const MechanicalParams *mparams) const overridesofa::core::behavior::Mass< DataTypes >virtual; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getMechanicalStates() constsofa::core::behavior::StateAccessorinlinevirtual; getMomentum(const MechanicalParams *mparams) const overridesofa::core::behavior::Mass< DataTypes >virtual; getMomentum(const MechanicalParams *, const DataVecCoord &, const DataVecDeriv &) constsofa::core::behavior::Mass< DataTypes >virtual; getMState()sofa::core::behavior::SingleStateAccessor< DataTypes >inline; getMState() constsofa::core::behavior::SingleStateAccessor< DataTypes >inline; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getPoissonRatioInElement(sofa::Size elementId) constsofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField< DataTypes >;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field_and_mass-members.html:16930,log,logging,16930,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field_and_mass-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_hexahedral_f_e_m_force_field_and_mass-members.html,2,['log'],['logging']
Testability," DataTypes >protected; _outputCoordsofa::gl::component::engine::TextureInterpolation< DataTypes >protected; _scalarFieldsofa::gl::component::engine::TextureInterpolation< DataTypes >protected; _vertexPlotedsofa::gl::component::engine::TextureInterpolation< DataTypes >protected; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1engine_1_1_texture_interpolation-members.html:1702,log,logging,1702,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1engine_1_1_texture_interpolation-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1engine_1_1_texture_interpolation-members.html,1,['log'],['logging']
Testability," DataTypes >virtual; sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField::addForce(const MechanicalParams *mparams, MultiVecDerivId fId) overridesofa::core::behavior::ForceField< DataTypes >virtual; addKToMatrix(sofa::linearalgebra::BaseMatrix *mat, SReal k, unsigned int &offset) overridesofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >virtual; sofa::component::solidmechanics::fem::elastic::BaseLinearElasticityFEMForceField::addKToMatrix(const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix) overridesofa::core::behavior::ForceField< DataTypes >virtual; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMBKdx(const MechanicalParams *mparams, MultiVecDerivId dfId)sofa::core::behavior::BaseForceFieldvirtual; addMBKToMatrix(const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix)sofa::core::behavior::BaseForceFieldvirtual; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addToMatrix(sofa::linearalgebra::BaseMatrix *bm, unsigned offset, const IndexArray &nodeIndex, const ElementMat &em, SReal scale)sofa::core::behavior::ForceField< DataTypes >inline; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyStiffness(VecCoord &f, Real h, const VecCoord &x, const Real &kFactor)sofa::component::solidmechanics::fem::elastic::TriangularFEMForceField< DataTypes >protectedvirtual; applyStiffnessLarge(VecCoord &f, Real h, const VecCoord &x, const Real &kFactor)sofa::component::solidm",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_anisotropic_f_e_m_force_field-members.html:3499,log,logging,3499,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_anisotropic_f_e_m_force_field-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1elastic_1_1_triangular_anisotropic_f_e_m_force_field-members.html,2,['log'],['logging']
Testability," Detailed Description; A simple deterministic and portable random number generator. ; This class implements a Linear Congruential Generator (LCG) algorithm to generate pseudo-random numbers. It is designed to provide deterministic and portable random number generation, making it well-suited for testing purposes. . Public Member Functions;  LinearCongruentialRandomGenerator (unsigned int initialSeed);  ; unsigned int generateRandom ();  Generates the next pseudo-random number. More...;  ; template<class Scalar > ; Scalar generateInUnitRange ();  Generates a pseudo-random value within the unit interval [0, 1]. More...;  ; double generateInRange (double rmin, double rmax);  Generates a pseudo-random double value within a specified range. More...;  ; float generateInRange (float rmin, float rmax);  Generates a pseudo-random float value within a specified range. More...;  . Constructor details. ◆ LinearCongruentialRandomGenerator(). sofa::testing::LinearCongruentialRandomGenerator::LinearCongruentialRandomGenerator ; (; unsigned int ; initialSeed). explicit . Function details. ◆ generateInRange() [1/2]. double sofa::testing::LinearCongruentialRandomGenerator::generateInRange ; (; double ; rmin, . double ; rmax . ). Generates a pseudo-random double value within a specified range. ; This function generates a pseudo-random double value between the provided minimum (rmin) and maximum (rmax) values.; Parameters. rminThe minimum value of the desired range (inclusive). ; rmaxThe maximum value of the desired range (inclusive). . ReturnsA pseudo-random double value in the specified range [rmin, rmax].; Example usage: double randomValue = generateInRange(10.0, 20.0);; sofa::testing::LinearCongruentialRandomGenerator::generateInRangedouble generateInRange(double rmin, double rmax)Generates a pseudo-random double value within a specified range.Definition: LinearCongruentialRandomGenerator.cpp:41. ◆ generateInRange() [2/2]. float sofa::testing::LinearCongruentialRandomGenerator::gene",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html:1336,test,testing,1336,api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html,1,['test'],['testing']
Testability, ForceFeedback()sofa::component::haptics::ForceFeedbackprotected; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClass() constsofa::core::objectmodel::Baseinlinevirtual; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTopologyChange(core::topology::Topology *t)sofa::core::objectmodel::BaseObjectvirtual; hasDataChanged(const BaseData &data)s,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_mechanical_state_force_feedback-members.html:5234,log,logging,5234,api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_mechanical_state_force_feedback-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_mechanical_state_force_feedback-members.html,3,['log'],['logging']
Testability, ForceFeedback()sofa::component::haptics::ForceFeedbackprotected; getClass() constsofa::core::objectmodel::Baseinlinevirtual; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTopologyChange(core::topology::Topology *t)sofa::core::objectmodel::BaseObjectvirtual; hasDataChanged(const BaseData &data)s,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_force_feedback-members.html:4876,log,logging,4876,api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_force_feedback-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_force_feedback-members.html,1,['log'],['logging']
Testability, ForceFeedback()sofa::component::haptics::ForceFeedbackprotected; getClass() constsofa::core::objectmodel::Baseinlinevirtual; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; handleEvent(sofa::core::objectmodel::Event *event) overridesofa::component::haptics::LCPForceFeedback< TDataTypes >virtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTopologyChange(core::topology::Topology *t)sofa::core::objectmod,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_l_c_p_force_feedback-members.html:7097,log,logging,7097,api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_l_c_p_force_feedback-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_l_c_p_force_feedback-members.html,1,['log'],['logging']
Testability," Functions |; List of all members . sofa::DataEngine_test< DataEngineType > Struct Template Reference . #include <DataEngineTestCreation.h>; Helper for writing DataEngine tests. ; More... Inheritance diagram for sofa::DataEngine_test< DataEngineType >:. [legend]; Detailed Description; template<typename DataEngineType>; struct sofa::DataEngine_test< DataEngineType >; Helper for writing DataEngine tests. ; AuthorMatthieu Nesme, 2015 . Public Attributes; Engine::SPtr m_engine;  the real tested engine More...;  ; DataEngineType::SPtr m_engineInput;  an other identical engine, where only inputs are used (not the engine itself). It is an easy way to create all inputs of the right type, to be able to link with them. More...;  ;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Public Member Functions;  DataEngine_test ();  ; virtual void init ();  ; void run_basic_test ();  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Attribute details. ◆ m_engine. template<typename DataEngineType > . Engine::SPtr sofa::DataEngine_test< DataEngineType >::m_engine. the real tested engine . ◆ m_engineInput. template<typename DataEngineType > . DataEngineType::SPtr sofa::DataEngine_test< DataEngineType >::m_engineInput. an other identical engine, where only inputs are used (not the engine itself). It is an easy way to create all inputs of the right type, to be able to link with them. . Constructor details. ◆ DataEngine_test(). template<typename DataEngineType > . sofa::DataEngine_test< DataEngineType >::DataEngine_test ; (; ). inline . Function",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1_data_engine__test.html:1221,test,testing,1221,api/master/sofa/html/structsofa_1_1_data_engine__test.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1_data_engine__test.html,1,['test'],['testing']
Testability," GetClass()sofa::core::objectmodel::Baseinlinestatic; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefault()sofa::core::objectmodel::BaseContextstatic; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getDt() const overridesofa::core::objectmodel::Contextvirtual; getGravity() const overridesofa::core::objectmodel::Contextvirtual; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMass() constsofa::core::objectmodel::BaseContextvirtual; getMechanicalState() constsofa::core::objectmodel::BaseContextvirtual; getMeshTopology(SearchDirection dir=SearchUp) constsofa::core::objectmodel::BaseContextvirtual; getMeshTopologyLink(SearchDirection dir=SearchUp) constsofa::core::objectmodel::BaseContextvirtual; getName() constsofa::core::objectmodel::Baseinline; getNameHelper()sofa::core::objectmodel::BaseContextinline; getNameSpaceName() constsofa::core::objectmodel::Base; getObject(const ClassInfo &class_info, SearchDirection dir=SearchUp) constsofa::core::objectmodel::BaseContextvirtual; getObject(const ClassInfo &class_info, const TagSet &tags, SearchDirection dir=SearchUp) constsofa::core::objectmodel::BaseContextvirtual; getObject(const ClassInfo &class_info, const std::string &path) constsofa::core::objectmodel::BaseContextvirtual; getObjects(const ClassInfo &class_info, GetObjectsCallBack &container, Sear",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html:5712,log,logging,5712,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html,1,['log'],['logging']
Testability," Jacobian, then we check that J.vIn = vOut; to validate mapping->applyJT, we apply it after setting the child force fc=vOut, then we check that parent force fp = J^T.fc; to validate mapping->applyDJT, we set the child force, and we compare the parent force before and after a small displacement. The magnitude of the small random changes applied in finite differences is between deltaRange.first*epsilon and deltaRange.second*epsilon, and a failure is issued if the error is greater than errorMax*epsilon, where epsilon=std::numeric_limits<Real>::epsilon() is 1.19209e-07 for float and 2.22045e-16 for double.; AuthorFrançois Faure ; Date2013 . Public Attributes; core::Mapping< In, Out > * mapping;  the mapping to be tested More...;  ; InDOFs::SPtr inDofs;  mapping input More...;  ; OutDOFs::SPtr outDofs;  mapping output More...;  ; simulation::Node::SPtr root;  Root of the scene graph, created by the constructor an re-used in the tests. More...;  ; simulation::Simulation * simulation;  created by the constructor an re-used in the tests More...;  ; std::pair< Real, Real > deltaRange;  The minimum and maximum magnitudes of the change of each scalar value of the small displacement is perturbation * numeric_limits<Real>::epsilon. This epsilon is 1.19209e-07 for float and 2.22045e-16 for double. More...;  ; Real errorMax;  The test is successful if the (infinite norm of the) difference is less than errorMax * numeric_limits<Real>::epsilon. More...;  ; Real errorFactorDJ;  The test for geometric stiffness is successful if the (infinite norm of the) difference is less than errorFactorDJ * errorMax * numeric_limits<Real>::epsilon. More...;  ; unsigned char flags;  testing options. (all by default). To be used with precaution. Please implement the missing API in the mapping rather than not testing it. More...;  ;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Static Public Att",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1mapping__test_1_1_mapping__test.html:2852,test,tests,2852,api/master/sofa/html/structsofa_1_1mapping__test_1_1_mapping__test.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1mapping__test_1_1_mapping__test.html,1,['test'],['tests']
Testability," Member List; SOFA API: sofa::linearalgebra::testing::SparseMatrixProductInit< T > Struct Template Reference; SOFA API: Member List; SOFA API: sofa::linearalgebra::testing::TestBaseMatrixTraits< TMatrix, TNbRows, TNbCols, TReal > Struct Template Reference; SOFA API: Member List; SOFA API: sofa::linearalgebra::testing::TestSparseMatrixProduct< T > Struct Template Reference; SOFA API: Member List; SOFA API: sofa::mapping_test::Mapping_test< _Mapping > Struct Template Reference; SOFA API: Member List; SOFA API: sofa::simulation::Range< InputIt > Struct Template Reference; SOFA API: Member List; SOFA API: sofa::simulation::SceneLoader::Listener Struct Reference; SOFA API: Member List; SOFA API: sofa::simulation::common::VisitorExecuteFunc Struct Reference; SOFA API: Member List; SOFA API: sofa::simulation::graph::DAGNode::StatusStruct Struct Reference; SOFA API: Member List; SOFA API: sofa::testing::NumericTest< _Real > Struct Template Reference; SOFA API: Member List; SOFA API: sofa::testing::SparseMatrixTest< TReal > Struct Template Reference; SOFA API: Member List; SOFA API: sofa::testing::data_traits< _DataTypes > Struct Template Reference; SOFA API: Member List; SOFA API: sofa::testing::setRotWrapper< DataTypes, N, isVector > Struct Template Reference; SOFA API: sofa::testing::setRotWrapper< DataTypes, N, false > Struct Template Reference; SOFA API: Member List; SOFA API: sofa::testing::setRotWrapper< DataTypes, N, true > Struct Template Reference; SOFA API: Member List; SOFA API: sofa::testing::setRotWrapper< DataTypes, 2, false > Struct Template Reference; SOFA API: Member List; SOFA API: Member List; SOFA API: sofa::topology::Element< GeometryElement > Struct Template Reference; SOFA API: Member List; SOFA API: sofa::type::HasRebindTypedef< T, OtherType, class > Struct Template Reference; SOFA API: sofa::type::HasRebindTypedef< T, OtherType, std::void_t< typename T::template rebind_to< OtherType > > > Struct Template Reference; SOFA API: sofa::type::NoInit Struc",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:241812,test,testing,241812,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['test'],['testing']
Testability," ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ independentOnly. bool sofa::component::odesolver::testing::GetAssembledSizeVisitor::independentOnly { false }. protected . ◆ vsize. std::size_t sofa::component::odesolver::testing::GetAssembledSizeVisitor::vsize { 0 }. protected . ◆ xsize. std::size_t sofa::component::odesolver::testing::GetAssembledSizeVisitor::xsize { 0 }. protected . Constructor details. ◆ GetAssembledSizeVisitor(). sofa::component::odesolver::testing::GetAssembledSizeVisitor::GetAssembledSizeVisitor ; (; const sofa::core::ExecParams * ; params = sofa::core::mechanicalparams::castToExecParams(core::mechanicalparams::defaultInstance())). inline . ◆ ~GetAssembledSizeVisitor(). sofa::component::odesolver::testing::GetAssembledSizeVisitor::~GetAssembledSizeVisitor ; (; ). inlineoverride . Function details. ◆ getClassName(). const char* sofa::component::odesolver::testing::GetAssembledSizeVisitor::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ posi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1testing_1_1_get_assembled_size_visitor.html:5125,test,testing,5125,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1testing_1_1_get_assembled_size_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1testing_1_1_get_assembled_size_visitor.html,1,['test'],['testing']
Testability," PointID &ind1, PointID &ind2)sofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; Triangle typedefsofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >; TriangleID typedefsofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >; triangleNumericalIntegrationsofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >protected; TrianglesAroundEdge typedefsofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >; TrianglesAroundVertex typedefsofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >; TriangleSetGeometryAlgorithms()sofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >inlineprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; Vec3 typedefsofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >; Vec3d typedefsofa::component::topology::container::dynamic::EdgeSetGeometryAlgorithms< DataTypes >; VecCoord typedefsofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >; VecData typedefsofa::core::objectmodel::Base; VecDeriv typedefsofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; writeMSHfile(const char *filename) constsofa::component::topology::container::dynamic::TriangleSetGeometryAlgorithms< DataTypes >inline; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() over",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_geometry_algorithms-members.html:32998,log,logErrors,32998,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_geometry_algorithms-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_geometry_algorithms-members.html,1,['log'],['logErrors']
Testability," PointID v6, PointID v7, PointID v8)sofa::core::topology::BaseMeshTopologyvirtual; getHexas()sofa::core::topology::BaseMeshTopologyinlinevirtual; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLine(LineID i)sofa::core::topology::BaseMeshTopologyinline; getLines()sofa::core::topology::BaseMeshTopologyinline; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLocalEdgesInHexahedron(const PointID i) constsofa::core::topology::BaseMeshTopologyvirtual; getLocalEdgesInTetrahedron(const PointID i) constsofa::core::topology::BaseMeshTopologyvirtual; getLocalQuadsInHexahedron(const PointID i) constsofa::core::topology::BaseMeshTopologyvirtual; getLocalTrianglesInTetrahedron(const PointID i) constsofa::core::topology::BaseMeshTopologyvirtual; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getNbEdges()sofa::core::topology::BaseMeshTopologyinlinevirtual; getNbHexahedra()sofa::core::topology::BaseMeshTopologyinlinevirtual; getNbHexas()sofa::core::topology::BaseMeshTopologyinlinevirtual; getNbLines()sofa::core::topology::BaseMeshTopologyinline; getNbPoints() const overridesofa::component::topology::container::dynamic::PointSetTopologyContainerinlinevirtual; getNbQuads()sofa::core::topology::BaseMeshTopologyinlinevirtual; getNbTetrahedra()sofa::core::topology::BaseMeshTopologyinlinevirtual; getNbTetras()sofa::core::topology::BaseMeshTopologyinlinevirtual; getNbTriangles()sofa::core::topology::BaseMeshTopologyinlinevirtual; getNumberConnectedComponents(sofa::type::vector",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_topology_container-members.html:12606,log,logging,12606,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_topology_container-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_topology_container-members.html,3,['log'],['logging']
Testability," PointID v6, PointID v7, PointID v8)sofa::core::topology::BaseMeshTopologyvirtual; getHexas()sofa::core::topology::BaseMeshTopologyinlinevirtual; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLine(LineID i)sofa::core::topology::BaseMeshTopologyinline; getLines()sofa::core::topology::BaseMeshTopologyinline; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLocalEdgesInHexahedron(const PointID i) constsofa::core::topology::BaseMeshTopologyvirtual; getLocalEdgesInTetrahedron(const PointID i) constsofa::core::topology::BaseMeshTopologyvirtual; getLocalQuadsInHexahedron(const PointID i) constsofa::core::topology::BaseMeshTopologyvirtual; getLocalTrianglesInTetrahedron(const PointID i) constsofa::core::topology::BaseMeshTopologyvirtual; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getNbEdges()sofa::core::topology::BaseMeshTopologyinlinevirtual; getNbHexahedra()sofa::core::topology::BaseMeshTopologyinlinevirtual; getNbHexas()sofa::core::topology::BaseMeshTopologyinlinevirtual; getNbLines()sofa::core::topology::BaseMeshTopologyinline; getNbPoints() const overridesofa::component::topology::container::dynamic::PointSetTopologyContainerinlinevirtual; getNbQuads()sofa::core::topology::BaseMeshTopologyinlinevirtual; getNbTetrahedra()sofa::core::topology::BaseMeshTopologyinlinevirtual; getNbTetras()sofa::core::topology::BaseMeshTopologyinlinevirtual; getNbTriangles()sofa::core::topology::BaseMeshTopologyinlinevirtual; getNumberOfConnectedComponent()sofa::core::topo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_container-members.html:9997,log,logging,9997,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_container-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_container-members.html,1,['log'],['logging']
Testability," PointID v6, PointID v7, PointID v8)sofa::core::topology::BaseMeshTopologyvirtual; getHexas()sofa::core::topology::BaseMeshTopologyinlinevirtual; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLine(LineID i)sofa::core::topology::BaseMeshTopologyinline; getLines()sofa::core::topology::BaseMeshTopologyinline; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLocalEdgesInHexahedron(const PointID i) constsofa::core::topology::BaseMeshTopologyvirtual; getLocalEdgesInTetrahedron(const PointID i) constsofa::core::topology::BaseMeshTopologyvirtual; getLocalQuadsInHexahedron(const PointID i) constsofa::core::topology::BaseMeshTopologyvirtual; getLocalTrianglesInTetrahedron(const PointID i) constsofa::core::topology::BaseMeshTopologyvirtual; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getNbEdges()sofa::core::topology::BaseMeshTopologyinlinevirtual; getNbHexahedra()sofa::core::topology::BaseMeshTopologyinlinevirtual; getNbHexas()sofa::core::topology::BaseMeshTopologyinlinevirtual; getNbLines()sofa::core::topology::BaseMeshTopologyinline; getNbPoints() constsofa::core::topology::Topologyinlinevirtual; getNbQuads()sofa::core::topology::BaseMeshTopologyinlinevirtual; getNbTetrahedra()sofa::core::topology::BaseMeshTopologyinlinevirtual; getNbTetras()sofa::core::topology::BaseMeshTopologyinlinevirtual; getNbTriangles()sofa::core::topology::BaseMeshTopologyinlinevirtual; getNumberOfConnectedComponent()sofa::core::topology::BaseMeshTopologyinlinevirtual; getPathName() ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_mesh_topology-members.html:8642,log,logging,8642,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_mesh_topology-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_mesh_topology-members.html,2,['log'],['logging']
Testability," Public Member Functions;  MeshMinProximityIntersection (MinProximityIntersection *intersection, bool addSelf=true);  ; bool testIntersection (collision::geometry::Point &, collision::geometry::Point &, const core::collision::Intersection *currentIntersection);  ; template<class T > ; bool testIntersection (collision::geometry::TSphere< T > &, collision::geometry::Point &, const core::collision::Intersection *currentIntersection);  ; bool testIntersection (collision::geometry::Line &, collision::geometry::Point &, const core::collision::Intersection *currentIntersection);  ; template<class T > ; bool testIntersection (collision::geometry::Line &, collision::geometry::TSphere< T > &, const core::collision::Intersection *currentIntersection);  ; bool testIntersection (collision::geometry::Line &, collision::geometry::Line &, const core::collision::Intersection *currentIntersection);  ; bool testIntersection (collision::geometry::Triangle &, collision::geometry::Point &, const core::collision::Intersection *currentIntersection);  ; template<class T > ; bool testIntersection (collision::geometry::Triangle &, collision::geometry::TSphere< T > &, const core::collision::Intersection *currentIntersection);  ; int computeIntersection (collision::geometry::Point &, collision::geometry::Point &, OutputVector *, const core::collision::Intersection *currentIntersection);  ; template<class T > ; int computeIntersection (collision::geometry::TSphere< T > &, collision::geometry::Point &, OutputVec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_mesh_min_proximity_intersection.html:620,test,testIntersection,620,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_mesh_min_proximity_intersection.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_mesh_min_proximity_intersection.html,6,['test'],['testIntersection']
Testability," Public Member Functions;  MeshNewProximityIntersection (NewProximityIntersection *intersection, bool addSelf=true);  ; bool testIntersection (collision::geometry::Point &, collision::geometry::Point &, const core::collision::Intersection *currentIntersection);  ; int computeIntersection (collision::geometry::Point &, collision::geometry::Point &, OutputVector *, const core::collision::Intersection *currentIntersection);  ; bool testIntersection (collision::geometry::Line &, collision::geometry::Point &, const core::collision::Intersection *currentIntersection);  ; int computeIntersection (collision::geometry::Line &, collision::geometry::Point &, OutputVector *, const core::collision::Intersection *currentIntersection);  ; bool testIntersection (collision::geometry::Line &, collision::geometry::Line &, const core::collision::Intersection *currentIntersection);  ; int computeIntersection (collision::geometry::Line &, collision::geometry::Line &, OutputVector *, const core::collision::Intersection *currentIntersection);  ; bool testIntersection (collision::geometry::Triangle &, collision::geometry::Point &, const core::collision::Intersection *currentIntersection);  ; int computeIntersection (collision::geometry::Triangle &, collision::geometry::Point &, OutputVector *, const core::collision::Intersection *currentIntersection);  ; bool testIntersection (collision::geometry::Triangle &, collision::geometry::Line &, const core::collision::Intersection",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_mesh_new_proximity_intersection.html:654,test,testIntersection,654,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_mesh_new_proximity_intersection.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_mesh_new_proximity_intersection.html,3,['test'],['testIntersection']
Testability, SOFA - Topic Tag: HDMI. /headers; . /feed; ; headers – SOFA. SOFA - Topic Tag: headers. /heat-diffusion; . /feed; ; Heat diffusion – SOFA. SOFA - Topic Tag: Heat diffusion. /heat-diffusion-fem-tetrahedra; . /feed; ; heat diffusion fem tetrahedra – SOFA. SOFA - Topic Tag: heat diffusion fem tetrahedra. /help-with-bilateralinteractionconstraint; . /feed; ; Help with BilateralInteractionConstraint – SOFA. SOFA - Topic Tag: Help with BilateralInteractionConstraint. /hexahedral; . /feed; ; hexahedral – SOFA. SOFA - Topic Tag: hexahedral. /hexahedron; . /feed; ; hexahedron – SOFA. SOFA - Topic Tag: hexahedron. /histogram; . /feed; ; histogram – SOFA. SOFA - Topic Tag: histogram. /hmsim-conference; . /feed; ; HMSIM conference – SOFA. SOFA - Topic Tag: HMSIM conference. /how-to-solve-this-problem; . /feed; ; how to solve this problem? – SOFA. SOFA - Topic Tag: how to solve this problem?. /hyperelastic; . /feed; ; hyperelastic – SOFA. SOFA - Topic Tag: hyperelastic. /hyper-elastic-mass-links-method-performance-testing; . /feed; ; Hyper-Elastic Mass Links method; performance testing – SOFA. SOFA - Topic Tag: Hyper-Elastic Mass Links method; performance testing. /hyper-elastic-material; . /feed; ; Hyper-elastic Material – SOFA. SOFA - Topic Tag: Hyper-elastic Material. /i; . /feed; ; I – SOFA. SOFA - Topic Tag: I. /ide-operating-system-development-environment; . /feed; ; IDE; Operating System; Development Environment; – SOFA. SOFA - Topic Tag: IDE; Operating System; Development Environment;. /iga-xfem-cad; . /feed; ; IGA XFEM CAD – SOFA. SOFA - Topic Tag: IGA XFEM CAD. /image; . /feed; ; Image – SOFA. SOFA - Topic Tag: Image. /image-viewer; . /feed; ; Image Viewer – SOFA. SOFA - Topic Tag: Image Viewer. /imgui; . /feed; ; ImGUI – SOFA. SOFA - Topic Tag: ImGUI. /implicit-solver; . /feed; ; implicit solver – SOFA. SOFA - Topic Tag: implicit solver. /import-include; . /feed; ; import include – SOFA. SOFA - Topic Tag: import include. /import-mesh; . /feed; ; import mesh – SOFA. S,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:448658,test,testing,448658,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['test'],['testing']
Testability," SOFA API: Member List; SOFA API: sofa::simulation::xml::NodeElement Class Reference; SOFA API: Member List; SOFA API: sofa::simulation::xml::ObjectElement Class Reference; SOFA API: Member List; SOFA API: sofa::testing::BaseSimulationTest Class Reference; SOFA API: sofa::testing::BaseSimulationTest::SceneInstance Class Reference; SOFA API: Member List; SOFA API: Member List; SOFA API: sofa::testing::BaseTest Class Reference; SOFA API: Member List; SOFA API: sofa::testing::ExpectMessage Class Reference; SOFA API: Member List; SOFA API: sofa::testing::GtestMessageFrame Class Reference; SOFA API: sofa::testing::GtestMessageFrameFailure Class Reference; SOFA API: sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference; SOFA API: Member List; SOFA API: Member List; SOFA API: sofa::testing::GtestMessageFrameIgnore Class Reference; SOFA API: Member List; SOFA API: Member List; SOFA API: sofa::testing::GtestMessageHandler Class Reference; SOFA API: Member List; SOFA API: sofa::testing::IgnoreMessage Class Reference; SOFA API: Member List; SOFA API: sofa::testing::LinearCongruentialRandomGenerator Class Reference; SOFA API: Member List; SOFA API: sofa::testing::MainGtestMessageHandler Class Reference; SOFA API: sofa::testing::MainGtestMessageHandlerPrivate Class Reference; SOFA API: Member List; SOFA API: Member List; SOFA API: sofa::testing::MessageAsTestFailure Class Reference; SOFA API: Member List; SOFA API: sofa::type::BoundingBox Class Reference; SOFA API: sofa::type::BoundingBox1D Class Reference; SOFA API: Member List; SOFA API: sofa::type::BoundingBox2D Class Reference; SOFA API: Member List; SOFA API: Member List; SOFA API: sofa::type::CPUMemoryManager< T > Class Template Reference; SOFA API: sofa::type::DualQuatCoord3< real > Class Template Reference; SOFA API: Member List; SOFA API: sofa::type::Frame Class Reference; SOFA API: Member List; SOFA API: sofa::type::Mat< L, C, real > Class Template Reference; SOFA API: sofa::type::MatNoInit< L, C, real > C",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:194985,test,testing,194985,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['test'],['testing']
Testability," SOFA API: sofa::MultiMapping_test< _MultiMapping > Struct Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::MultiMapping_test< _MultiMapping > Struct Template Reference . #include <MultiMappingTestCreation.h>; Base class for the MultiMapping tests, directly adapted from Mapping_test. ; More... Inheritance diagram for sofa::MultiMapping_test< _MultiMapping >:. [legend]; Detailed Description; template<class _MultiMapping>; struct sofa::MultiMapping_test< _MultiMapping >; Base class for the MultiMapping tests, directly adapted from Mapping_test. ; See alsoMapping_test; AuthorFrançois Faure ; Date2014 . Public Attributes; core::MultiMapping< In, Out > * mapping;  the mapping to be tested More...;  ; type::vector< typename InDOFs::SPtr > inDofs;  mapping input More...;  ; OutDOFs::SPtr outDofs;  mapping output More...;  ; simulation::Node::SPtr root;  Root of the scene graph, created by the constructor an re-used in the tests. More...;  ; simulation::Node::SPtr child;  Child node, created by setupScene. More...;  ; type::vector< simulation::Node::SPtr > parents;  Parent nodes, created by setupScene. More...;  ; simulation::Simulation * simulation;  created by the constructor an re-used in the tests More...;  ; std::pair< Real, Real > deltaRange;  The minimum and maximum magnitudes of the change of each scalar value of the small displacement is deltaRange * numeric_limits<Real>::epsilon. This epsilon is 1.19209e-07 for float and 2.22045e-16 for double. More...;  ; Real errorMax;  The test is successful if the (infinite norm of the) difference is less than maxError * numeric_limits<Real>::epsilon. More...;  ;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Public Member Functions;  MultiMapping_test ();  ; void setupScene (int numParents);  ; OutDeri",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1_multi_mapping__test.html:1052,test,tests,1052,api/master/sofa/html/structsofa_1_1_multi_mapping__test.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1_multi_mapping__test.html,1,['test'],['tests']
Testability," Template Reference . #include <SparseMatrixTest.h>. Inheritance diagram for sofa::testing::SparseMatrixTest< TReal >:. [legend]. Static Public Member Functions; template<int EigenSparseMatrixOptions> ; static void generateRandomSparseMatrix (Eigen::SparseMatrix< TReal, EigenSparseMatrixOptions > &eigenMatrix, Eigen::Index nbRows, Eigen::Index nbCols, TReal sparsity);  ; template<class InputIt > ; static void generateFromTriplets (Eigen::SparseMatrix< TReal > &eigenMatrix, InputIt first, InputIt last, Eigen::Index nbRows, Eigen::Index nbCols);  ; template<typename _DstScalar , int _DstOptions, typename _DstStorageIndex , typename _SrcScalar , int _SrcOptions, typename _SrcStorageIndex > ; static void copyFromEigen (Eigen::SparseMatrix< _DstScalar, _DstOptions, _DstStorageIndex > &dst, const Eigen::SparseMatrix< _SrcScalar, _SrcOptions, _SrcStorageIndex > &src);  ; static void copyFromEigen (linearalgebra::BaseMatrix &dst, const Eigen::SparseMatrix< TReal > &src);  ; template<typename _AScalar , int _AOptions, typename _AStorageIndex , typename _BScalar , int _BOptions, typename _BStorageIndex > ; static bool compareSparseMatrix (const Eigen::SparseMatrix< _AScalar, _AOptions, _AStorageIndex > &A, const Eigen::SparseMatrix< _BScalar, _BOptions, _BStorageIndex > &B);  ; template<typename _AScalar , int _AOptions, typename _AStorageIndex , typename _BScalar , int _BOptions, typename _BStorageIndex > ; static bool compareEigenSparseMatrix (const Eigen::SparseMatrix< _AScalar, _AOptions, _AStorageIndex > &A, const Eigen::SparseMatrix< _BScalar, _BOptions, _BStorageIndex > &B);  ;  Static Public Member Functions inherited from sofa::testing::NumericTest< SReal >; static Real matrixMaxDiff (const Matrix1 &m1, const Matrix2 &m2);  return the maximum difference between corresponding entries, or the infinity if the matrices have different sizes More...;  ; static Real matrixMaxDiff (const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2);  Return the maximum difference bet",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1testing_1_1_sparse_matrix_test.html:1913,test,testing,1913,api/master/sofa/html/structsofa_1_1testing_1_1_sparse_matrix_test.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1testing_1_1_sparse_matrix_test.html,1,['test'],['testing']
Testability," Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Public Member Functions |; Static Protected Member Functions |; List of all members . sofa::mapping_test::Mapping_test< _Mapping > Struct Template Reference . #include <MappingTestCreation.h>; Base class for the Mapping tests, with helpers to automatically test applyJ, applyJT, applyDJT and getJs using finite differences. ; More... Inheritance diagram for sofa::mapping_test::Mapping_test< _Mapping >:. [legend]; Detailed Description; template<class _Mapping>; struct sofa::mapping_test::Mapping_test< _Mapping >; Base class for the Mapping tests, with helpers to automatically test applyJ, applyJT, applyDJT and getJs using finite differences. ; Specific test cases can be created using a derived class instantiated on the mapping class to test, and calling function runTest( const InVecCoord& parentInit, const OutVecCoord& childInit, const InVecCoord parentNew, const OutVecCoord expectedChildNew);; This function compares the actual output positions with the expected ones, then automatically tests the methods related to the Jacobian using finite differences.; A small change of the input positions dxIn is randomly chosen and added to the current position. The same is set as velocity.; mapping->apply is called, and the difference dXout between the new output positions and the previous positions is computed; to validate mapping->applyJ, dXin is converted to input velocity vIn and mapping->applyJ is called. dXout and the output velocity vOut must be the same (up to linear approximations errors, thus we apply a very small change of position).; to validate mapping->getJs, we use it to get the Jacobian, then we check that J.vIn = vOut; to validate mapping->applyJT, we apply it after setting the child force fc=vOut, then we check that parent force fp = J^T.fc; to validate mapping->applyDJT, we set the child force, and we compare the parent ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1mapping__test_1_1_mapping__test.html:866,test,test,866,api/master/sofa/html/structsofa_1_1mapping__test_1_1_mapping__test.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1mapping__test_1_1_mapping__test.html,3,['test'],"['test', 'tests']"
Testability," Tetrahedron to vertices cross container concistency. . ◆ checkTopology(). bool sofa::component::topology::utility::TopologyChecker::checkTopology ; (; ). ◆ checkTriangleContainer(). bool sofa::component::topology::utility::TopologyChecker::checkTriangleContainer ; (; ). Method to test Triangle container concistency. . ◆ checkTriangleToEdgeCrossContainer(). bool sofa::component::topology::utility::TopologyChecker::checkTriangleToEdgeCrossContainer ; (; ). Method to test triangles to edges cross container concistency. . ◆ checkTriangleTopology(). bool sofa::component::topology::utility::TopologyChecker::checkTriangleTopology ; (; ). } ; Triangle methods { Full method to check Triangle Topology. Will call See alsocheckTriangleContainer, . checkTriangleToEdgeCrossContainer and . checkTriangleToVertexCrossContainer . ◆ checkTriangleToVertexCrossContainer(). bool sofa::component::topology::utility::TopologyChecker::checkTriangleToVertexCrossContainer ; (; ). Method to test triangles to vertices cross container concistency. . ◆ draw(). void sofa::component::topology::utility::TopologyChecker::draw ; (; const core::visual::VisualParams * ; ). overridevirtual . Render internal data of this object, for debugging purposes. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ handleEvent(). void sofa::component::topology::utility::TopologyChecker::handleEvent ; (; sofa::core::objectmodel::Event * ; ). overridevirtual . Handle an event. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ init(). void sofa::component::topology::utility::TopologyChecker::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ reinit(). void sofa::component::topology::utility::TopologyChecker::reinit ; (; ). overridevirtual . Update method called when variables used in precomputation are modified. ; Reimplemented from sofa::core::objectmodel::BaseObje",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topology_checker.html:21651,test,test,21651,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topology_checker.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topology_checker.html,1,['test'],['test']
Testability, Topic Tag: SurfacePressureConstarint SurfacePressureForcefield SoftRobots Sliding Friction. /surgerysimulation; . /feed; ; #surgerysimulation – SOFA. SOFA - Topic Tag: #surgerysimulation. /suture-simulaion; . /feed; ; suture simulaion – SOFA. SOFA - Topic Tag: suture simulaion. /suturing; . /feed; ; Suturing – SOFA. SOFA - Topic Tag: Suturing. /system; . /feed; ; system – SOFA. SOFA - Topic Tag: system. /tactile; . /feed; ; Tactile – SOFA. SOFA - Topic Tag: Tactile. /tags; . /feed; ; tags – SOFA. SOFA - Topic Tag: tags. /target-points; . /feed; ; target points – SOFA. SOFA - Topic Tag: target points. /teaching; . /feed; ; teaching – SOFA. SOFA - Topic Tag: teaching. /tearing; . /feed; ; tearing – SOFA. SOFA - Topic Tag: tearing. /template; . /feed; ; template – SOFA. SOFA - Topic Tag: template. /tendonrobot; . /feed; ; TendonRobot – SOFA. SOFA - Topic Tag: TendonRobot. /test; . /feed; ; test – SOFA. SOFA - Topic Tag: test. /test-animate; . /feed; ; test animate – SOFA. SOFA - Topic Tag: test animate. /tetrahedra; . /feed; ; tetrahedra – SOFA. SOFA - Topic Tag: tetrahedra. /tetrahedralcorotationalfemforcefield; . /feed; ; TetrahedralCorotationalFEMForceField – SOFA. SOFA - Topic Tag: TetrahedralCorotationalFEMForceField. /tetrahedralfem; . /feed; ; TetrahedralFEM – SOFA. SOFA - Topic Tag: TetrahedralFEM. /tetrahedraltensormassforcefield; . /feed; ; TetrahedralTensorMassForceField – SOFA. SOFA - Topic Tag: TetrahedralTensorMassForceField. /tetrahedron; . /feed; ; Tetrahedron – SOFA. SOFA - Topic Tag: Tetrahedron. /tetrahedronsettopologyalgorithms; . /feed; ; TetrahedronSetTopologyAlgorithms – SOFA. SOFA - Topic Tag: TetrahedronSetTopologyAlgorithms. /textile; . /feed; ; textile – SOFA. SOFA - Topic Tag: textile. /texture; . /feed; ; texture – SOFA. SOFA - Topic Tag: texture. /the-legged-robot-with-flexible-passive-trunk; . /feed; ; The Legged Robot with Flexible Passive Trunk. – SOFA. SOFA - Topic Tag: The Legged Robot with Flexible Passive Trunk. /theory; . /feed; ;,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:485693,test,test,485693,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['test'],['test']
Testability, Topic Tag: transform. /tree; . /feed; ; tree – SOFA. SOFA - Topic Tag: tree. /triangles; . /feed; ; triangles – SOFA. SOFA - Topic Tag: triangles. /triangularfem; . /feed; ; TriangularFEM – SOFA. SOFA - Topic Tag: TriangularFEM. /tutorials; . /feed; ; tutorials – SOFA. SOFA - Topic Tag: tutorials. /two-haptic-devices; . /feed; ; two haptic devices – SOFA. SOFA - Topic Tag: two haptic devices. /two-haptic-forcefeedback; . /feed; ; two haptic forcefeedback – SOFA. SOFA - Topic Tag: two haptic forcefeedback. /two-rigid-parts; . /feed; ; two rigid parts – SOFA. SOFA - Topic Tag: two rigid parts. /ubuntu; . /feed; ; ubuntu – SOFA. SOFA - Topic Tag: ubuntu. /ubuntu16-04-lts; . /feed; ; UBUNTU(16.04 LTS) – SOFA. SOFA - Topic Tag: UBUNTU(16.04 LTS). /unable-to-determine-the-path; . /feed; ; Unable to determine the path – SOFA. SOFA - Topic Tag: Unable to determine the path. /unit; . /feed; ; unit – SOFA. SOFA - Topic Tag: unit. /units; . /feed; ; units – SOFA. SOFA - Topic Tag: units. /unit-testing; . /feed; ; unit testing – SOFA. SOFA - Topic Tag: unit testing. /unity3d-digital-trainers-blender-sofa; . /feed; ; Unity3d Digital-Trainers Blender-SOFA – SOFA. SOFA - Topic Tag: Unity3d Digital-Trainers Blender-SOFA. /unreal; . /feed; ; Unreal – SOFA. SOFA - Topic Tag: Unreal. /unreal-engine; . /feed; ; Unreal Engine – SOFA. SOFA - Topic Tag: Unreal Engine. /urdf; . /feed; ; urdf – SOFA. SOFA - Topic Tag: urdf. /using-sofa; . /feed; ; using sofa – SOFA. SOFA - Topic Tag: using sofa. /using-sofapython3; . /feed; ; using sofapython3 – SOFA. SOFA - Topic Tag: using sofapython3. /v16-08; . /feed; ; v16.08 – SOFA. SOFA - Topic Tag: v16.08. /v18-06; . /feed; ; v18.06 – SOFA. SOFA - Topic Tag: v18.06. /v19-06; . /feed; ; v19.06 – SOFA. SOFA - Topic Tag: v19.06. /v19-12-plugin-linking; . /feed; ; v19.12 plugin linking – SOFA. SOFA - Topic Tag: v19.12 plugin linking. /v20; . /feed; ; v20 – SOFA. SOFA - Topic Tag: v20. /v20-12; . /feed; ; v20.12 – SOFA. SOFA - Topic Tag: v20.12. /v20-12-,MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/index-wcopy.html:488838,test,testing,488838,index-wcopy.html,https://www.sofa-framework.org,https://www.sofa-framework.org/index-wcopy.html,1,['test'],['testing']
Testability," VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ independentOnly. bool sofa::component::odesolver::testing::GetAssembledSizeVisitor::independentOnly { false }. protected . ◆ vsize. std::size_t sofa::component::odesolver::testing::GetAssembledSizeVisitor::vsize { 0 }. protected . ◆ xsize. std::size_t sofa::component::odesolver::testing::GetAssembledSizeVisitor::xsize { 0 }. protected . Constructor details. ◆ GetAssembledSizeVisitor(). sofa::component::odesolver::testing::GetAssembledSizeVisitor::GetAssembledSizeVisitor ; (; const sofa::core::ExecParams * ; params = sofa::core::mechanicalparams::castToExecParams(core::mechanicalparams::defaultInstance())). inline . ◆ ~GetAssembledSizeVisitor(). sofa::component::odesolver::testing::GetAssembledSizeVisitor::~GetAssembledSizeVisitor ; (; ). inlineoverride . Function details. ◆ getClassName(). const char* sofa::component::odesolver::testing::GetAssembledSizeVisitor::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ positionSize(). unsigned sofa::component::odesolver::testing::GetAssembledSizeVisitor::positionSize ; (; ); const. inline . ◆ processNodeTopDown(). Result sofa::component::odesolver::testing::GetAssembledSizeVisitor::processNodeTopDown ; (; simulation::Node * ; ). inlineoverridevirtual . Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. ; Reimplemented from sofa::simulation::Visitor. ◆ setIndependentOnly(). void sofa::component::odesolver::testing::GetAssembledSizeVisitor::setIndependentOnly ; (; bool ; b). inline . ◆ velocitySize(). unsigned sofa::component::odesolver::tes",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1testing_1_1_get_assembled_size_visitor.html:5756,test,testing,5756,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1testing_1_1_get_assembled_size_visitor.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1testing_1_1_get_assembled_size_visitor.html,1,['test'],['testing']
Testability," [7/18]. bool sofa::component::collision::detection::intersection::MeshNewProximityIntersection::testIntersection ; (; collision::geometry::Point & ; , . collision::geometry::Point & ;  . ). delete . ◆ testIntersection() [8/18]. bool sofa::component::collision::detection::intersection::MeshNewProximityIntersection::testIntersection ; (; collision::geometry::Point & ; pt1, . collision::geometry::Point & ; pt2, . const core::collision::Intersection * ; currentIntersection . ). ◆ testIntersection() [9/18]. bool sofa::component::collision::detection::intersection::MeshNewProximityIntersection::testIntersection ; (; collision::geometry::Triangle & ; , . collision::geometry::Line & ;  . ). delete . ◆ testIntersection() [10/18]. bool sofa::component::collision::detection::intersection::MeshNewProximityIntersection::testIntersection ; (; collision::geometry::Triangle & ; tri, . collision::geometry::Line & ; line, . const core::collision::Intersection * ; currentIntersection . ). ◆ testIntersection() [11/18]. bool sofa::component::collision::detection::intersection::MeshNewProximityIntersection::testIntersection ; (; collision::geometry::Triangle & ; , . collision::geometry::Point & ;  . ). delete . ◆ testIntersection() [12/18]. bool sofa::component::collision::detection::intersection::MeshNewProximityIntersection::testIntersection ; (; collision::geometry::Triangle & ; tri, . collision::geometry::Point & ; pt, . const core::collision::Intersection * ; currentIntersection . ). ◆ testIntersection() [13/18]. bool sofa::component::collision::detection::intersection::MeshNewProximityIntersection::testIntersection ; (; collision::geometry::Triangle & ; , . collision::geometry::Triangle & ;  . ). delete . ◆ testIntersection() [14/18]. bool sofa::component::collision::detection::intersection::MeshNewProximityIntersection::testIntersection ; (; collision::geometry::Triangle & ; tri1, . collision::geometry::Triangle & ; tri2, . const core::collision::Intersection * ; currentIntersect",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_mesh_new_proximity_intersection.html:16924,test,testIntersection,16924,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_mesh_new_proximity_intersection.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_mesh_new_proximity_intersection.html,1,['test'],['testIntersection']
Testability," _Esofa::component::solidmechanics::fem::hyperelastic::material::PlasticMaterial; _epsilonsofa::component::solidmechanics::fem::hyperelastic::material::PlasticMaterial; _poissonRatiosofa::component::solidmechanics::fem::hyperelastic::material::PlasticMaterial; _previousVonMisesStrainsofa::component::solidmechanics::fem::hyperelastic::material::PlasticMaterial; _sigmasofa::component::solidmechanics::fem::hyperelastic::material::PlasticMaterial; _youngModulussofa::component::solidmechanics::fem::hyperelastic::material::PlasticMaterial; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseMaterial()sofa::component::solidmechanics::fem::hyperelastic::material::Bas",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_plastic_material-members.html:1333,log,logging,1333,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_plastic_material-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_plastic_material-members.html,1,['log'],['logging']
Testability," _ForceFieldType >::errorFactorPotentialEnergy. The test for potential energy is successful if the (infinite norm of the) difference is less than errorFactorPotentialEnergy * errorMax *epsilon (default = 1) . ◆ errorMax. template<typename _ForceFieldType > . SReal sofa::ForceField_test< _ForceFieldType >::errorMax. tolerance in precision test. The actual value is this one times the epsilon of the Real numbers (typically float or double) . ◆ flags. template<typename _ForceFieldType > . unsigned char sofa::ForceField_test< _ForceFieldType >::flags. testing options. (all by default). To be used with precaution. . ◆ force. template<typename _ForceFieldType > . ForceField::SPtr sofa::ForceField_test< _ForceFieldType >::force. ◆ node. template<typename _ForceFieldType > . simulation::Node::SPtr sofa::ForceField_test< _ForceFieldType >::node. ◆ TEST_ALL. template<typename _ForceFieldType > . const unsigned char sofa::ForceField_test< _ForceFieldType >::TEST_ALL = UCHAR_MAX. static . testing everything . ◆ TEST_POTENTIAL_ENERGY. template<typename _ForceFieldType > . const unsigned char sofa::ForceField_test< _ForceFieldType >::TEST_POTENTIAL_ENERGY = 1. static . testing getPotentialEnergy function. The tests will only work with conservative forces (if dissipative forces such as viscosity or damping are computed, the test is wrong) . Constructor details. ◆ ForceField_test() [1/2]. template<typename _ForceFieldType > . sofa::ForceField_test< _ForceFieldType >::ForceField_test ; (; ). inline . } ; Create a scene with a node, a state and a forcefield.; . ◆ ForceField_test() [2/2]. template<typename _ForceFieldType > . sofa::ForceField_test< _ForceFieldType >::ForceField_test ; (; std::string ; filename). inline . Create a scene from a xml file. . Function details. ◆ run_test(). template<typename _ForceFieldType > . void sofa::ForceField_test< _ForceFieldType >::run_test ; (; const VecCoord & ; x, . const VecDeriv & ; v, . const VecDeriv & ; ef, . bool ; initScene = true . ). inl",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1_force_field__test.html:7450,test,testing,7450,api/master/sofa/html/structsofa_1_1_force_field__test.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1_force_field__test.html,1,['test'],['testing']
Testability," _Mapping::In::Real >inlinestatic; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; Mapping typedefsofa::mapping_test::Mapping_test< _Mapping >; mappingsofa::mapping_test::Mapping_test< _Mapping >; Mapping_test()sofa::mapping_test::Mapping_test< _Mapping >inline; Mapping_test(std::string fileName)sofa::mapping_test::Mapping_test< _Mapping >inline; matrixMaxDiff(const Matrix1 &m1, const Matrix2 &m2)sofa::testing::NumericTest< _Mapping::In::Real >inlinestatic; matrixMaxDiff(const sofa::type::Mat< M, N, Real > &m1, const Matrix2 &m2)sofa::testing::NumericTest< _Mapping::In::Real >inlinestatic; norm(float a)sofa::testing::NumericTest< _Mapping::In::Real >inlineprotectedstatic; norm(double a)sofa::testing::NumericTest< _Mapping::In::Real >inlineprotectedstatic; norm(T a)sofa::testing::NumericTest< _Mapping::In::Real >inlineprotectedstatic; NumericTest()sofa::testing::NumericTest< _Mapping::In::Real >inline; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; Out typedefsofa::mapping_test::Mapping_test< _Mapping >; OutCoord typedefsofa::mapping_test::Mapping_test< _Mapping >; OutDataMatrixDeriv typedefsofa::mapping_test::Mapping_test< _Mapping >; OutDataVecCoord typedefsofa::mapping_test::Mapping_test< _Mapping >; OutDataVecDeriv typedefsofa::mapping_test::Mapping_test< _Mapping >; OutDeriv typedefsofa::mapping_test::Mapping_test< _Mapping >; OutDOFs typedefsofa::mapping_test::Mapping_test< _Mapping >; outDofssofa::mapping_test::Mapping_test< _Mapping >; OutMatrixDeriv typedefsofa::mapping_test::Mapping_test< _Mapping >; OutVecCoord typedefsofa::mapping_test::Mapping_test< _Mapping >; OutVecDeriv typedefsofa::mapping_test::Mapping_test< _Mapping >; preTreatment(const OutVecDeriv &f)sofa::mapping_test::Mapping_test< _Mapping >inlinevirtual; ReadInVecCoord typedefsofa::mapping_test::Mapping_test< _Mapping >; ReadInVecDeriv typedefsofa::mapping_test::Mapping_test< _Mapping >; ReadOutVecCoord typedefsofa::mapping_tes",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1mapping__test_1_1_mapping__test-members.html:2983,test,testing,2983,api/master/sofa/html/structsofa_1_1mapping__test_1_1_mapping__test-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/structsofa_1_1mapping__test_1_1_mapping__test-members.html,1,['test'],['testing']
Testability," _contextsofa::simulation::Nodeprotected; _descendancysofa::simulation::graph::DAGNodeprotected; _precomputedTraversalOrdersofa::simulation::graph::DAGNodeprotected; actionStacksofa::simulation::Nodeprotected; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addChild(BaseNode::SPtr node) finalsofa::simulation::Nodevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addListener(MutationListener *obj)sofa::simulation::Nodevirtual; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addObject(sofa::core::objectmodel::BaseObject::SPtr obj, sofa::core::objectmodel::TypeOfInsertion insertionLocation=sofa::core::objectmodel::TypeOfInsertion::AtEnd) finalsofa::simulation::Nodevirtual; sofa::core::objectmodel::Context::addObject(sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd)sofa::core::objectmodel::BaseContextinlinevirtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; animate_sofa::core::objectmodel::Context; animationManagersofa::simulation::Node; Base()sofa::core::objectmodel::Baseprotected; Bas",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html:1044,log,logging,1044,api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1graph_1_1_d_a_g_node-members.html,1,['log'],['logging']
Testability," _contextsofa::simulation::Nodeprotected; actionStacksofa::simulation::Nodeprotected; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addChild(BaseNode::SPtr node) finalsofa::simulation::Nodevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addListener(MutationListener *obj)sofa::simulation::Nodevirtual; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addObject(sofa::core::objectmodel::BaseObject::SPtr obj, sofa::core::objectmodel::TypeOfInsertion insertionLocation=sofa::core::objectmodel::TypeOfInsertion::AtEnd) finalsofa::simulation::Nodevirtual; sofa::core::objectmodel::Context::addObject(sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd)sofa::core::objectmodel::BaseContextinlinevirtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; animate_sofa::core::objectmodel::Context; animationManagersofa::simulation::Node; Base()sofa::core::objectmodel::Baseprotected; BaseContext()sofa::core::objectmodel::BaseContextprotected; BaseNode()sofa::core::objectmodel::BaseNodeprotected; BaseType typedefsofa::core::objec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html:900,log,logging,900,api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html,1,['log'],['logging']
Testability," _drawColorsofa::component::topology::container::dynamic::EdgeSetGeometryAlgorithms< DataTypes >protected; ACUTE enum valuesofa::component::topology::container::dynamic::PointSetGeometryAlgorithms< DataTypes >; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Angle enum namesofa::component::topology::container::dynamic::PointSetGeometryAlgorithms< DataTypes >; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseTopologyObject()sofa::core::topology::BaseTopologyObjectinlineprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *&obj, core::objectmodel::BaseContext *con",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_geometry_algorithms-members.html:1020,log,logging,1020,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_geometry_algorithms-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_geometry_algorithms-members.html,1,['log'],['logging']
Testability," _drawColorsofa::component::topology::container::dynamic::QuadSetGeometryAlgorithms< DataTypes >protected; _drawQuadssofa::component::topology::container::dynamic::QuadSetGeometryAlgorithms< DataTypes >protected; ACUTE enum valuesofa::component::topology::container::dynamic::PointSetGeometryAlgorithms< DataTypes >; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Angle enum namesofa::component::topology::container::dynamic::PointSetGeometryAlgorithms< DataTypes >; Base()sofa::core::objectmodel::Baseprotected; BaseMeshTopology typedefsofa::component::topology::container::dynamic::HexahedronSetGeometryAlgorithms< DataTypes >; BaseObject()sofa::core::objectmodel::BaseObjec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_geometry_algorithms-members.html:1146,log,logging,1146,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_geometry_algorithms-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_geometry_algorithms-members.html,1,['log'],['logging']
Testability," _drawColorsofa::component::topology::container::dynamic::QuadSetGeometryAlgorithms< DataTypes >protected; _drawQuadssofa::component::topology::container::dynamic::QuadSetGeometryAlgorithms< DataTypes >protected; ACUTE enum valuesofa::component::topology::container::dynamic::PointSetGeometryAlgorithms< DataTypes >; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Angle enum namesofa::component::topology::container::dynamic::PointSetGeometryAlgorithms< DataTypes >; Base()sofa::core::objectmodel::Baseprotected; BaseMeshTopology typedefsofa::component::topology::container::dynamic::HexahedronSetGeometryAlgorithms< DataTypes >; BaseObject()sofa::core::objectmodel::BaseObjectprotect",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_geometry_algorithms-members.html:1138,log,logging,1138,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_geometry_algorithms-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_geometry_algorithms-members.html,1,['log'],['logging']
Testability," _drawColorsofa::component::topology::container::dynamic::QuadSetGeometryAlgorithms< DataTypes >protected; _drawQuadssofa::component::topology::container::dynamic::QuadSetGeometryAlgorithms< DataTypes >protected; ACUTE enum valuesofa::component::topology::container::dynamic::PointSetGeometryAlgorithms< DataTypes >; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Angle enum namesofa::component::topology::container::dynamic::PointSetGeometryAlgorithms< DataTypes >; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseTopologyObject()sofa::core::topology::BaseTopologyObjectinlineprotected; BaseType typedefsofa::core::objectmodel::Base; b",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_geometry_algorithms-members.html:1126,log,logging,1126,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_geometry_algorithms-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_geometry_algorithms-members.html,1,['log'],['logging']
Testability," _drawSizesofa::component::constraint::projective::FixedTranslationProjectiveConstraint< DataTypes >; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addIndex(Index index)sofa::component::constraint::projective::FixedTranslationProjectiveConstraint< DataTypes >; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyConstraint(const MechanicalParams *, const sofa::core::behavior::MultiMatrixAccessor *) overridesofa::core::behavior::ProjectiveConstraintSet< DataTypes >inlinevirtual; applyConstraint(const MechanicalParams *, linearalgebra::BaseVector *, const sofa::core::behavior::MultiMatrixAccessor *) overridesofa::core::behavior::ProjectiveConstraintSet< DataTypes >inlinevirtual; sofa::core::behavior::BaseProjectiveConstraintS",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_translation_projective_constraint-members.html:1034,log,logging,1034,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_translation_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_translation_projective_constraint-members.html,1,['log'],['logging']
Testability," _drawSizesofa::component::engine::select::PairBoxROI< DataTypes >; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType ty",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_pair_box_r_o_i-members.html:1087,log,logging,1087,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_pair_box_r_o_i-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_pair_box_r_o_i-members.html,1,['log'],['logging']
Testability," _drawSizesofa::component::engine::select::PlaneROI< DataTypes >; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefs",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_plane_r_o_i-members.html:1081,log,logging,1081,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_plane_r_o_i-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_plane_r_o_i-members.html,1,['log'],['logging']
Testability," _drawSizesofa::component::engine::select::ProximityROI< DataTypes >; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseT",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_proximity_r_o_i-members.html:1093,log,logging,1093,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_proximity_r_o_i-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_proximity_r_o_i-members.html,1,['log'],['logging']
Testability," _drawSizesofa::component::engine::select::SubsetTopology< DataTypes >; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_subset_topology-members.html:1099,log,logging,1099,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_subset_topology-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_subset_topology-members.html,1,['log'],['logging']
Testability," _higher_mstatesofa::component::collision::geometry::TriangleModelInRegularGrid; _higher_toposofa::component::collision::geometry::TriangleModelInRegularGrid; _topologysofa::component::collision::geometry::TriangleModelInRegularGrid; AABB_TYPE enum valuesofa::core::CollisionModel; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addGroup(const int groupId)sofa::core::CollisionModelinline; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; bActivesofa::core::CollisionModelprotected; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; begin()sofa::core::CollisionModelinline; bMovingsofa::core::CollisionModelprotected; bSelfCollisionsofa::core::CollisionModelprotected; bSimulatedsofa::c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_model_in_regular_grid-members.html:1110,log,logging,1110,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_model_in_regular_grid-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1geometry_1_1_triangle_model_in_regular_grid-members.html,1,['log'],['logging']
Testability," _levelsofa::component::topology::container::dynamic::MultilevelHexahedronSetTopologyContainer; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addEdge(Index a, Index b) overridesofa::component::topology::container::dynamic::EdgeSetTopologyContainervirtual; addHexa(Index a, Index b, Index c, Index d, Index e, Index f, Index g, Index h) overridesofa::component::topology::container::dynamic::HexahedronSetTopologyContainervirtual; addLine(Index a, Index b)sofa::core::topology::BaseMeshTopologyinline; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addPoint(SReal px, SReal py, SReal pz) overridesofa::component::topology::container::dynamic::PointSetTopologyContainervirtual; addPoint()sofa::component::topology::container::dynamic::PointSetTopologyContainer; addPoints(const Size nPoints)sofa::component::topology::container::dynamic::PointSetTopologyContainer; addQuad(Index a, Index b, Index c, Index d) overridesofa::component::topology::container::dynamic::QuadSetTopologyContainervirtual; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addStateChange(const TopologyChange ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_multilevel_hexahedron_set_topology_container-members.html:1268,log,logging,1268,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_multilevel_hexahedron_set_topology_container-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_multilevel_hexahedron_set_topology_container-members.html,1,['log'],['logging']
Testability," _timersofa::component::haptics::LCPForceFeedback< TDataTypes >protected; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *&obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg)sofa::component::haptics::LCPForceFeedback< TDataTypes >inlinestatic; sofa::component::haptics::MechanicalStateForceFeedback::canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObject",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_l_c_p_force_feedback-members.html:825,log,logging,825,api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_l_c_p_force_feedback-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_l_c_p_force_feedback-members.html,1,['log'],['logging']
Testability," _zeroCollisionsofa::core::collision::NarrowPhaseDetectionprotected; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addCollisionPair(const std::pair< core::CollisionModel *, core::CollisionModel * > &cmPair) overridesofa::component::collision::detection::algorithm::BVHNarrowPhasevirtual; addCollisionPairs(const sofa::type::vector< std::pair< core::CollisionModel *, core::CollisionModel * > > &v)sofa::core::collision::NarrowPhaseDetectionvirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; beginNarrowPhase()sofa::core::collision::NarrowPhaseDetectionvirtual; BVHNarrowPhase()sofa::component::collision::detection::algorithm::B",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase-members.html:1170,log,logging,1170,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_b_v_h_narrow_phase-members.html,1,['log'],['logging']
Testability," _zeroCollisionsofa::core::collision::NarrowPhaseDetectionprotected; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addCollisionPair(const std::pair< core::CollisionModel *, core::CollisionModel * > &cmPair) overridesofa::component::collision::detection::algorithm::DirectSAPNarrowPhasevirtual; addCollisionPairs(const sofa::type::vector< std::pair< core::CollisionModel *, core::CollisionModel * > > &v)sofa::core::collision::NarrowPhaseDetectionvirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; beginNarrowPhase() overridesofa::component::collision::detection::algorithm::DirectSAPNarrowPhasevirtual; bwdInit()sofa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase-members.html:1188,log,logging,1188,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p_narrow_phase-members.html,1,['log'],['logging']
Testability," _zeroCollisionsofa::core::collision::NarrowPhaseDetectionprotected; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addCollisionPair(const std::pair< core::CollisionModel *, core::CollisionModel * > &cmPair) overridesofa::component::collision::detection::algorithm::RayTraceNarrowPhasevirtual; addCollisionPairs(const sofa::type::vector< std::pair< core::CollisionModel *, core::CollisionModel * > > &v)sofa::core::collision::NarrowPhaseDetectionvirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; beginNarrowPhase()sofa::core::collision::NarrowPhaseDetectionvirtual; bwdInit()sofa::core::objectmodel::BaseObjectvirtual;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_ray_trace_narrow_phase-members.html:1185,log,logging,1185,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_ray_trace_narrow_phase-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_ray_trace_narrow_phase-members.html,1,['log'],['logging']
Testability," _zeroCollisionsofa::core::collision::NarrowPhaseDetectionprotected; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addCollisionPair(const std::pair< core::CollisionModel *, core::CollisionModel * > &cmPair)=0sofa::core::collision::NarrowPhaseDetectionpure virtual; addCollisionPairs(const sofa::type::vector< std::pair< core::CollisionModel *, core::CollisionModel * > > &v)sofa::core::collision::NarrowPhaseDetectionvirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; beginNarrowPhase()sofa::core::collision::NarrowPhaseDetectionvirtual; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_narrow_phase_detection-members.html:1105,log,logging,1105,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_narrow_phase_detection-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_narrow_phase_detection-members.html,1,['log'],['logging']
Testability," abosofa::gl::component::shader::OglShaderVisualModelprotected; accumulatedForcessofa::core::State< TDataTypes >; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addToTotalForces(core::ConstVecDerivId forceId) overridesofa::core::State< TDataTypes >virtual; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; alphaBlendsofa::gl::component::rendering3d::OglModelprotected; applyRotation(const SReal rx, const SReal ry, const SReal rz) overridesofa::component::visual::VisualModelImplvirtual; applyRotation(const sofa::type::Quat< SReal > q) overridesofa::component::visual::VisualModelImplvirtual; applyScale(const SReal sx, const SReal sy, const SReal sz) overridesofa::component::visual::VisualModelImplvirtual; applyTranslation(const SReal dx, con",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader_visual_model-members.html:922,log,logging,922,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader_visual_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader_visual_model-members.html,1,['log'],['logging']
Testability," accFromF(const MechanicalParams *mparams, MultiVecDerivId aid)=0sofa::core::behavior::BaseMasspure virtual; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addGravityToV(const MechanicalParams *mparams, MultiVecDerivId vid)=0sofa::core::behavior::BaseMasspure virtual; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMDx(const MechanicalParams *mparams, MultiVecDerivId fid, SReal factor)=0sofa::core::behavior::BaseMasspure virtual; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addMToMatrix(const MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix)=0sofa::core::behavior::BaseMasspure virtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseMass()sofa::core::behavior::BaseMassprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildMassMatrix(sofa::core::behavior::MassMatrixAccumulator *matric",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mass-members.html:1041,log,logging,1041,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mass-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_mass-members.html,1,['log'],['logging']
Testability," accumulateMatrixDeriv(const core::ConstraintParams *cparams)sofa::component::constraint::lagrangian::solver::ConstraintSolverImplprotected; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; allVerifiedsofa::component::constraint::lagrangian::solver::GenericConstraintSolver; applyCorrection(const core::ConstraintParams *, MultiVecId res1, MultiVecId res2=MultiVecId::null()) overridesofa::component::constraint::lagrangian::solver::GenericConstraintSolvervirtual; applyCorrectionTask(const ConstraintParams *, MultiVecId res1, MultiVecId res2)sofa::core::behavior::ConstraintSolverprotected; applyProjectiveConstraintOnConstraintMatrix(const core::ConstraintParams *cparams)sofa::component::constraint::lagrangian::solver::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_generic_constraint_solver-members.html:924,log,logging,924,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_generic_constraint_solver-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_generic_constraint_solver-members.html,1,['log'],['logging']
Testability," accumulateMatrixDeriv(const core::ConstraintParams *cparams)sofa::component::constraint::lagrangian::solver::ConstraintSolverImplprotected; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyCorrection(const ConstraintParams *, MultiVecId res1, MultiVecId res2=MultiVecId::null())=0sofa::core::behavior::ConstraintSolverpure virtual; applyCorrectionTask(const ConstraintParams *, MultiVecId res1, MultiVecId res2)sofa::core::behavior::ConstraintSolverprotected; applyProjectiveConstraintOnConstraintMatrix(const core::ConstraintParams *cparams)sofa::component::constraint::lagrangian::solver::ConstraintSolverImplprotected; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_constraint_solver_impl-members.html:918,log,logging,918,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_constraint_solver_impl-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_constraint_solver_impl-members.html,1,['log'],['logging']
Testability," accumulateMatrixDeriv(const core::ConstraintParams *cparams)sofa::component::constraint::lagrangian::solver::ConstraintSolverImplprotected; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyCorrection(const core::ConstraintParams *, MultiVecId res1, MultiVecId res2=MultiVecId::null()) overridesofa::component::constraint::lagrangian::solver::LCPConstraintSolvervirtual; applyCorrectionTask(const ConstraintParams *, MultiVecId res1, MultiVecId res2)sofa::core::behavior::ConstraintSolverprotected; applyProjectiveConstraintOnConstraintMatrix(const core::ConstraintParams *cparams)sofa::component::constraint::lagrangian::solver::ConstraintSolverImplprotected; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_l_c_p_constraint_solver-members.html:916,log,logging,916,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_l_c_p_constraint_solver-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1solver_1_1_l_c_p_constraint_solver-members.html,1,['log'],['logging']
Testability," accumulateMatrixDeriv(sofa::core::ConstraintParams cparams) constsofa::simulation::DefaultAnimationLoopprotected; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; animate(const sofa::core::ExecParams *params, SReal dt) constsofa::simulation::DefaultAnimationLoopprotected; Base()sofa::core::objectmodel::Baseprotected; BaseAnimationLoop()sofa::core::behavior::BaseAnimationLoopprotected; BaseContext typedefsofa::simulation::DefaultAnimationLoop; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseObjectDescription typedefsofa::simulation::DefaultAnimationLoop; BaseType typedefsofa::core::objectmodel::Base; beginIntegration(const sofa::core::ExecParams *params, SReal dt) constsofa::simulation::DefaultAnimationLoopprotected; behaviorUpdatePosition(const sofa::core::ExecParams",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_default_animation_loop-members.html:830,log,logging,830,api/master/sofa/html/classsofa_1_1simulation_1_1_default_animation_loop-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_default_animation_loop-members.html,1,['log'],['logging']
Testability," accumulatedForcessofa::core::State< DataTypes >; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addToTotalForces(core::ConstVecDerivId forceId) overridesofa::core::State< DataTypes >virtual; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; baseRead(ConstVecId v) const overridesofa::core::State< DataTypes >virtual; BaseState()sofa::core::BaseStateinlineprotected; BaseType typedefsofa::core::objectmodel::Base; baseWrite(VecId v) overridesofa::core::State< DataTypes >virtual; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)s",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mapped_object-members.html:805,log,logging,805,api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mapped_object-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1statecontainer_1_1_mapped_object-members.html,1,['log'],['logging']
Testability," accumulatedForcessofa::core::State< DataTypes >; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addToTotalForces(core::ConstVecDerivId forceId) overridesofa::core::State< DataTypes >virtual; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; baseRead(ConstVecId v) const overridesofa::core::State< DataTypes >virtual; BaseState()sofa::core::BaseStateinlineprotected; BaseType typedefsofa::core::objectmodel::Base; baseWrite(VecId v) overridesofa::core::State< DataTypes >virtual; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::Base",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_state-members.html:777,log,logging,777,api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_state-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_state-members.html,1,['log'],['logging']
Testability," accumulatedForcessofa::core::State< TDataTypes >; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addToTotalForces(core::ConstVecDerivId forceId) overridesofa::core::State< TDataTypes >virtual; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; alphaBlendsofa::gl::component::rendering3d::OglModelprotected; applyRotation(const SReal rx, const SReal ry, const SReal rz) overridesofa::component::visual::VisualModelImplvirtual; applyRotation(const sofa::type::Quat< SReal > q) overridesofa::component::visual::VisualModelImplvirtual; applyScale(const SReal sx, const SReal sy, const SReal sz) overridesofa::component::visual::VisualModelImplvirtual; applyTranslation(const SReal dx, const SReal dy, const SReal dz) overridesofa::component::visua",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models-members.html:863,log,logging,863,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_merge_visual_models-members.html,1,['log'],['logging']
Testability," accumulatedForcessofa::core::State< TDataTypes >; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addToTotalForces(core::ConstVecDerivId forceId) overridesofa::core::State< TDataTypes >virtual; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; alphaBlendsofa::gl::component::rendering3d::OglModelprotected; applyRotation(const SReal rx, const SReal ry, const SReal rz) overridesofa::component::visual::VisualModelImplvirtual; applyRotation(const sofa::type::Quat< SReal > q) overridesofa::component::visual::VisualModelImplvirtual; applyScale(const SReal sx, const SReal sy, const SReal sz) overridesofa::component::visual::VisualModelImplvirtual; applyTranslation(const SReal dx, const SReal dy, const SReal dz) overridesofa::component::visual::VisualModelImpl",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model-members.html:845,log,logging,845,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_model-members.html,1,['log'],['logging']
Testability," accumulatedForcessofa::core::State< TDataTypes >; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addToTotalForces(core::ConstVecDerivId forceId) overridesofa::core::State< TDataTypes >virtual; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal rx, const SReal ry, const SReal rz) overridesofa::component::visual::VisualModelImplvirtual; applyRotation(const sofa::type::Quat< SReal > q) overridesofa::component::visual::VisualModelImplvirtual; applyScale(const SReal sx, const SReal sy, const SReal sz) overridesofa::component::visual::VisualModelImplvirtual; applyTranslation(const SReal dx, const SReal dy, const SReal dz) overridesofa::component::visual::VisualModelImplvirtual; applyUVScale(const Real su, const Real sv)sofa::component:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl-members.html:841,log,logging,841,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_model_impl-members.html,1,['log'],['logging']
Testability," accumulatedForcessofa::core::State< TDataTypes >; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addToTotalForces(core::ConstVecDerivId forceId) overridesofa::core::State< TDataTypes >virtual; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; baseRead(ConstVec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_cylinder_model-members.html:861,log,logging,861,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_cylinder_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_cylinder_model-members.html,1,['log'],['logging']
Testability," accumulatedForcessofa::core::State< TDataTypes >; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addToTotalForces(core::ConstVecDerivId forceId) overridesofa::core::State< TDataTypes >virtual; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; baseRead(ConstVecId v) cons",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_data_display-members.html:851,log,logging,851,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_data_display-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_data_display-members.html,1,['log'],['logging']
Testability," accumulatedForcessofa::core::State< TDataTypes >; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addToTotalForces(core::ConstVecDerivId forceId) overridesofa::core::State< TDataTypes >virtual; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; baseRead(ConstVecId v) const overridesofa::core::State< TDataTypes >virtual; BaseState()sofa::core::BaseStateinlineprotected; BaseType typedefsofa::core::objectmodel::Base; baseWrite(VecId v) overridesofa::core::State< TDataTypes >virtual; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; chang",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_state-members.html:752,log,logging,752,api/master/sofa/html/classsofa_1_1core_1_1_state-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_state-members.html,1,['log'],['logging']
Testability," accumulationShader()sofa::gl::component::shader::OglOITShader; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDefineMacro(const unsigned int index, const std::string &name, const std::string &value)sofa::gl::component::shader::OglShader; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; backfaceWritingsofa::gl::component::shader::OglShader; Base()sofa::core::objectmodel::Basep",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_o_i_t_shader-members.html:987,log,logging,987,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_o_i_t_shader-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_o_i_t_shader-members.html,1,['log'],['logging']
Testability," activate()sofa::component::visual::BaseCamera; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; b_setDefaultParameterssofa::component::visual::BaseCameraprotected; Base()sofa::core::objectmodel::Baseprotected; BaseCamera()sofa::component::visual::BaseCamera; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit() overridesofa::component::visual::BaseCameravirtual; CAMERA_LOOKAT_PIVOT enum valuesofa::component::visual::InteractiveCamera; CAMERA_POSITION_PIVOT enum valuesofa::component::visual::InteractiveCamera; cameraToWorldCoordinates(const type::Vec3 &p)sofa::component::visual::BaseCamera; cameraToWorldTransform(const type::Vec3 &v)sofa::component::visual::BaseCamera; canCreate(T *, BaseContext *, BaseObjectDescr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_interactive_camera-members.html:771,log,logging,771,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_interactive_camera-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_interactive_camera-members.html,1,['log'],['logging']
Testability," activate()sofa::component::visual::BaseCamera; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; b_setDefaultParameterssofa::component::visual::BaseCameraprotected; Base()sofa::core::objectmodel::Baseprotected; BaseCamera()sofa::component::visual::BaseCamera; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit() overridesofa::component::visual::BaseCameravirtual; Camera()sofa::component::visual::Cameraprotected; cameraToWorldCoordinates(const type::Vec3 &p)sofa::component::visual::BaseCamera; cameraToWorldTransform(const type::Vec3 &v)sofa::component::visual::BaseCamera; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_camera-members.html:749,log,logging,749,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_camera-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_camera-members.html,1,['log'],['logging']
Testability," activate()sofa::component::visual::BaseCamera; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; b_setDefaultParameterssofa::component::visual::BaseCameraprotected; Base()sofa::core::objectmodel::Baseprotected; BaseCamera()sofa::component::visual::BaseCamera; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit() overridesofa::component::visual::BaseCameravirtual; cameraToWorldCoordinates(const type::Vec3 &p)sofa::component::visual::BaseCamera; cameraToWorldTransform(const type::Vec3 &v)sofa::component::visual::BaseCamera; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprot",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_recorded_camera-members.html:765,log,logging,765,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_recorded_camera-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_recorded_camera-members.html,1,['log'],['logging']
Testability," activate()sofa::component::visual::BaseCamera; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; b_setDefaultParameterssofa::component::visual::BaseCameraprotected; Base()sofa::core::objectmodel::Baseprotected; BaseCamera()sofa::component::visual::BaseCamera; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit() overridesofa::component::visual::BaseCameravirtual; cameraToWorldCoordinates(const type::Vec3 &p)sofa::component::visual::BaseCamera; cameraToWorldTransform(const type::Vec3 &v)sofa::component::visual::BaseCamera; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_base_camera-members.html:757,log,logging,757,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_base_camera-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_base_camera-members.html,1,['log'],['logging']
Testability," activateMappers()sofa::component::collision::response::contact::FrictionContact< TCollisionModel1, TCollisionModel2, ResponseDataTypes >protectedvirtual; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_friction_contact-members.html:1032,log,logging,1032,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_friction_contact-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_friction_contact-members.html,1,['log'],['logging']
Testability," activateMappers()sofa::component::collision::response::contact::StickContactConstraint< TCollisionModel1, TCollisionModel2 >protected; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_stick_contact_constraint-members.html:989,log,logging,989,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_stick_contact_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_stick_contact_constraint-members.html,1,['log'],['logging']
Testability," activeFlagssofa::component::constraint::projective::AttachProjectiveConstraint< DataTypes >; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyConstraint(const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix) overridesofa::component::constraint::projective::AttachProjectiveConstraint< DataTypes >virtual; applyConstraint(const core::MechanicalParams *mparams, linearalgebra::BaseVector *vector, const sofa::core::behavior::MultiMatrixAccessor *matrix) overridesofa::component::constraint::projective::AttachProjectiveConstraint< DataTypes >virtual; applyConstraint(sofa::core::behavior::ZeroDirichletCondition *matrix) overridesofa::component::constraint::proje",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_attach_projective_constraint-members.html:893,log,logging,893,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_attach_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_attach_projective_constraint-members.html,1,['log'],['logging']
Testability," activesofa::component::constraint::projective::SkeletalMotionProjectiveConstraint< TDataTypes >protected; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addChannel(unsigned int jointIndex, Coord channel, double time)sofa::component::constraint::projective::SkeletalMotionProjectiveConstraint< TDataTypes >; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; animationSpeedsofa::component::constraint::projective::SkeletalMotionProjectiveConstraint< TDataTypes >protected; applyConstraint(const core::MechanicalParams *mparams, linearalgebra::BaseVector *vector, const sofa::core::behavior::MultiMatrixAccessor *matrix) overridesofa::component::constraint::projective::SkeletalMotionProjectiveConstraint< TDataTypes >virtual; applyConstrai",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_skeletal_motion_projective_constraint-members.html:1078,log,logging,1078,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_skeletal_motion_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_skeletal_motion_projective_constraint-members.html,1,['log'],['logging']
Testability," activesofa::gl::component::rendering3d::ClipPlane; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdDraw(core::visual::VisualParams *) overridesofa::gl::component::rendering3d:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_clip_plane-members.html:848,log,logging,848,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_clip_plane-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_clip_plane-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::BehaviorModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInteractionPerformer(InteractionPerformer *i)sofa::gui::component::performer::BaseMouseInteractor; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseMouseInteractor()sofa::gui::component::performer::BaseMouseInteractorinlineprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; BehaviorModel()sofa::core::BehaviorModelinlineprotected; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::obje",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1performer_1_1_mouse_interactor-members.html:929,log,logging,929,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1performer_1_1_mouse_interactor-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1performer_1_1_mouse_interactor-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::BehaviorModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInteractionPerformer(InteractionPerformer *i)sofa::gui::component::performer::BaseMouseInteractor; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseMouseInteractor()sofa::gui::component::performer::BaseMouseInteractorinlineprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; BehaviorModel()sofa::core::BehaviorModelinlineprotected; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1performer_1_1_base_mouse_interactor-members.html:911,log,logging,911,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1performer_1_1_base_mouse_interactor-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1performer_1_1_base_mouse_interactor-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::BehaviorModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; BehaviorModel()sofa::core::BehaviorModelinlineprotected; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMes",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_behavior_model-members.html:755,log,logging,755,api/master/sofa/html/classsofa_1_1core_1_1_behavior_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_behavior_model-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDefineMacro(const unsigned int index, const std::string &name, const std::string &value)sofa::gl::component::shader::OglShader; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; backfaceWritingsofa::gl::component::shader::OglShader; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObject",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shadow_shader-members.html:930,log,logging,930,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shadow_shader-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shadow_shader-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDefineMacro(const unsigned int index, const std::string &name, const std::string &value)sofa::gl::component::shader::OglShader; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; backfaceWritingsofa::gl::component::shader::OglShader; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; B",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader-members.html:918,log,logging,918,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_shader-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseContext typedefsofa::simulation::DefaultVisualManagerLoop; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseObjectDescription typedefsofa::simulation::DefaultVisualManagerLoop; BaseType typedefsofa::core:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_compositing_visual_loop-members.html:811,log,logging,811,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_compositing_visual_loop-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_compositing_visual_loop-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseContext typedefsofa::simulation::DefaultVisualManagerLoop; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseObjectDescription typedefsofa::simulation::DefaultVisualManagerLoop; BaseType typedefsofa::core::objectmodel::Ba",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_default_visual_manager_loop-members.html:795,log,logging,795,api/master/sofa/html/classsofa_1_1simulation_1_1_default_visual_manager_loop-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_default_visual_manager_loop-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bind()sofa::gl::component::shader::OglTexture; bwdDraw(core::visual::VisualParams *) overridesofa::gl::component::shader::OglTexturevi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture2_d-members.html:793,log,logging,793,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture2_d-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture2_d-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bind()sofa::gl::component::shader::OglTexture; bwdDraw(core::visual::VisualParams *) overridesofa::gl::component::shader::OglTexturevirtua",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture-members.html:789,log,logging,789,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bind()sofa::gl::component::shader::OglTexturePointer; bwdDraw(core::visual::VisualParams *) overridesofa::gl::component::sha",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture_pointer-members.html:803,log,logging,803,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture_pointer-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_texture_pointer-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bindInput(core::visual::VisualParams *)sofa::gl::component::shader::VisualManagerSecondaryPass; bwdDraw(co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_visual_manager_secondary_pass-members.html:821,log,logging,821,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_visual_manager_secondary_pass-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_visual_manager_secondary_pass-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildGrid()sofa::component::visual::VisualGrid; bwdDraw(VisualParams *)sofa::core::visual::VisualModelinlinevirtual; bwdInit()sofa::core::objectmo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_grid-members.html:781,log,logging,781,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_grid-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_grid-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdDraw(VisualParams *)sofa::core::visual::VisualModelinlinevirtual; bwdInit()sofa::core::objectmodel::BaseObj",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4_vector_variable-members.html:817,log,logging,817,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4_vector_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_matrix4_vector_variable-members.html,2,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdDraw(VisualParams *)sofa::core::visual::VisualModelinlinevirtual; bwdInit()sofa::core::objectmodel::BaseObjec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector2_variable-members.html:815,log,logging,815,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector2_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float_vector2_variable-members.html,3,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdDraw(VisualParams *)sofa::core::visual::VisualModelinlinevirtual; bwdInit()sofa::core::objectmodel::BaseObjectv",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_trail_renderer-members.html:813,log,logging,813,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_trail_renderer-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_trail_renderer-members.html,2,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdDraw(VisualParams *)sofa::core::visual::VisualModelinlinevirtual; bwdInit()sofa::core::objectmodel::BaseObjectvir",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector2_variable-members.html:811,log,logging,811,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector2_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_vector2_variable-members.html,3,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdDraw(VisualParams *)sofa::core::visual::VisualModelinlinevirtual; bwdInit()sofa::core::objectmodel::BaseObjectvirtu",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_point_splat_model-members.html:809,log,logging,809,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_point_splat_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_point_splat_model-members.html,8,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdDraw(VisualParams *)sofa::core::visual::VisualModelinlinevirtual; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_scene_frame-members.html:805,log,logging,805,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_scene_frame-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering3d_1_1_ogl_scene_frame-members.html,5,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdDraw(VisualParams *)sofa::core::visual::VisualModelinlinevirtual; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; ca",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float2_variable-members.html:803,log,logging,803,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float2_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_float2_variable-members.html,3,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdDraw(VisualParams *)sofa::core::visual::VisualModelinlinevirtual; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canC",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering2d_1_1_ogl_color_map-members.html:801,log,logging,801,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering2d_1_1_ogl_color_map-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering2d_1_1_ogl_color_map-members.html,3,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdDraw(VisualParams *)sofa::core::visual::VisualModelinlinevirtual; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCre",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int2_variable-members.html:799,log,logging,799,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int2_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int2_variable-members.html,3,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdDraw(VisualParams *)sofa::core::visual::VisualModelinlinevirtual; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreat",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_variable-members.html:797,log,logging,797,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_variable-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_int_variable-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdDraw(VisualParams *)sofa::core::visual::VisualModelinlinevirtual; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering2d_1_1_ogl_label-members.html:795,log,logging,795,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering2d_1_1_ogl_label-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1rendering2d_1_1_ogl_label-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdDraw(VisualParams *)sofa::core::visual::VisualModelinlinevirtual; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseC",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual3_d_text-members.html:785,log,logging,785,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual3_d_text-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual3_d_text-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdDraw(VisualParams *)sofa::core::visual::VisualModelinlinevirtual; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_line_axis-members.html:777,log,logging,777,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_line_axis-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_line_axis-members.html,2,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdDraw(VisualParams *)sofa::core::visual::VisualModelinlinevirtual; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, Ba",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_model-members.html:773,log,logging,773,api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_model-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_model-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdDraw(VisualParams *)sofa::core::visual::VisualModelinlinevirtual; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, Base",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_loop-members.html:771,log,logging,771,api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_loop-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_visual_loop-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdDraw(core::visual::VisualParams *) overridesofa::gl::component::shader::LightManagervirtual; bwdInit() overridesofa::gl::component:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_light_manager-members.html:793,log,logging,793,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_light_manager-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_light_manager-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdDraw(core::visual::VisualParams *) overridesofa::gl::component::shader::OglRenderingSRGBvirtual; bwdInit()sofa::core::objec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_rendering_s_r_g_b-members.html:801,log,logging,801,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_rendering_s_r_g_b-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_ogl_rendering_s_r_g_b-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdDraw(core::visual::VisualParams *) overridesofa::gl::component::shader::OrderIndepend",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_order_independent_transparency_manager-members.html:839,log,logging,839,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_order_independent_transparency_manager-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_order_independent_transparency_manager-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdDraw(core::visual::VisualParams *) overridesofa::gl::component::shader::VisualManagerPassvirtual; bwdInit()sofa::core::ob",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_visual_manager_pass-members.html:803,log,logging,803,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_visual_manager_pass-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_visual_manager_pass-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdDraw(sofa::core::visual::VisualParams *vparams) overridesofa::component::visual::VisualTransformvirtual; bwdInit()sofa::core::objectm",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_transform-members.html:791,log,logging,791,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_transform-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_transform-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; b_needUpdatesofa::gl::component::shader::Lightprotected; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; blurDepthTexture()sofa::gl::component::shader::Lightprotected; bwdDra",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_directional_light-members.html:801,log,logging,801,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_directional_light-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_directional_light-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; b_needUpdatesofa::gl::component::shader::Lightprotected; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; blurDepthTexture()sofa::gl::component::shader::Lightprotected; bwdDraw(",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_positional_light-members.html:799,log,logging,799,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_positional_light-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_positional_light-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; b_needUpdatesofa::gl::component::shader::Lightprotected; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; blurDepthTexture()sofa::gl::component::shader::Lightprotected; bwdDraw(VisualParams",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_spot_light-members.html:787,log,logging,787,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_spot_light-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_spot_light-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; b_needUpdatesofa::gl::component::shader::Lightprotected; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; blurDepthTexture()sofa::gl::component::shader::Lightprotected; bwdDraw(VisualParams *)sofa:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_light-members.html:779,log,logging,779,api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_light-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gl_1_1component_1_1shader_1_1_light-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addBBox(SReal *, SReal *)sofa::core::visual::VisualModelinlinevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyRotation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyRotation(const type::Quat< SReal >)sofa::core::visual::VisualModelinlinevirtual; applyScale(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; applyTranslation(const SReal, const SReal, const SReal)sofa::core::visual::VisualModelinlinevirtual; backupFlagssofa::component::visual::VisualStyleprotected; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdDraw(VisualParams *) overridesofa::component::visual::VisualStylevirtual; bwdInit()",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_style-members.html:783,log,logging,783,api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_style-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1visual_1_1_visual_style-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addChild(BaseNode::SPtr node)=0sofa::core::objectmodel::BaseNodepure virtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addObject(BaseObject::SPtr obj, TypeOfInsertion=TypeOfInsertion::AtEnd)=0sofa::core::objectmodel::BaseNodepure virtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseNode()sofa::core::objectmodel::BaseNodeprotected; BaseType typedefsofa::core::objectmodel::Base; Children typedefsofa::core::objectmodel::BaseNode; clearLoggedMessages() constsofa::core::objectmodel::Base; clearObjectContext(BaseObject::SPtr obj)sofa::core::objectmodel::BaseNodeprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; detachFromGraph()=0sofa::core::objectmodel::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html:784,log,logging,784,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_node-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addCollisionModel(core::CollisionModel *cm) overridesofa::component::collision::detection::algorithm::BruteForceBroadPhasevirtual; addCollisionModels(const sofa::type::vector< core::CollisionModel * > &v)sofa::core::collision::BroadPhaseDetectionvirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; beginBroadPhase() overridesofa::component::collision::detection::algorithm::BruteForceBroadPhasevirtual; boxModelsofa::component::collision::detection::algorithm::BruteForceBroadPhaseprotected; BruteForceBroadPhase()sofa::component::collision::detection::algorithm::BruteF",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase-members.html:1035,log,logging,1035,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_broad_phase-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addCollisionModel(core::CollisionModel *cm)=0sofa::core::collision::BroadPhaseDetectionpure virtual; addCollisionModels(const sofa::type::vector< core::CollisionModel * > &v)sofa::core::collision::BroadPhaseDetectionvirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; beginBroadPhase()sofa::core::collision::BroadPhaseDetectionvirtual; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeInstance(Instance inst)",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_broad_phase_detection-members.html:949,log,logging,949,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_broad_phase_detection-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_broad_phase_detection-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addComplianceInConstraintSpace(const ConstraintParams *, linearalgebra::BaseMatrix *W)=0sofa::core::behavior::BaseConstraintCorrectionpure virtual; addConstraintDisplacement(SReal *, int, int)sofa::core::behavior::BaseConstraintCorrectionvirtual; addConstraintSolver(ConstraintSolver *s)=0sofa::core::behavior::BaseConstraintCorrectionpure virtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyContactForce(const linearalgebra::BaseVector *f)=0sofa::core::behavior::BaseConstraintCorrectionpure virtual; applyMotionCorrection(const ConstraintParams *cparams, MultiVecCoordId x, MultiVecDerivId v, MultiVecDerivId dx, ConstMultiVecDerivId correction)=0sofa::core::behavior::BaseConstraintCorrectionpure virtual; applyPositionCorrection(const ConstraintParams *cparams",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_constraint_correction-members.html:1081,log,logging,1081,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_constraint_correction-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_constraint_correction-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addComplianceInConstraintSpace(const ConstraintParams *, linearalgebra::BaseMatrix *W)=0sofa::core::behavior::BaseConstraintCorrectionpure virtual; addConstraintDisplacement(SReal *, int, int)sofa::core::behavior::BaseConstraintCorrectionvirtual; addConstraintSolver(core::behavior::ConstraintSolver *s) overridesofa::core::behavior::ConstraintCorrection< TDataTypes >virtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyContactForce(const linearalgebra::BaseVector *f)=0sofa::core::behavior::BaseConstraintCorrectionpure virtual; applyMotionCorrection(const core::ConstraintParams *cparams, core::MultiVecCoordId x, core::MultiVecDerivId v, core::MultiVecDerivId dx, core::ConstMultiVecDerivId correction) overridesofa::core::behavior::Constrai",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_constraint_correction-members.html:1129,log,logging,1129,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_constraint_correction-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_constraint_correction-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addComplianceInConstraintSpace(const core::ConstraintParams *cparams, linearalgebra::BaseMatrix *W) overridesofa::component::constraint::lagrangian::correction::GenericConstraintCorrectionvirtual; addConstraintDisplacement(SReal *, int, int)sofa::core::behavior::BaseConstraintCorrectionvirtual; addConstraintSolver(core::behavior::ConstraintSolver *s) overridesofa::component::constraint::lagrangian::correction::GenericConstraintCorrectionvirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyContactForce(const linearalgebra::BaseVector *f) overridesofa::component::constraint::lagrangian::correction::GenericConstraintCorrectionvirtual; applyMotionCorrection(const core::ConstraintParams *cpara",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_generic_constraint_correction-members.html:1250,log,logging,1250,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_generic_constraint_correction-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_generic_constraint_correction-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addComplianceInConstraintSpace(const sofa::core::ConstraintParams *cparams, linearalgebra::BaseMatrix *W) overridesofa::component::constraint::lagrangian::correction::LinearSolverConstraintCorrection< TDataTypes >virtual; addConstraintDisplacement(SReal *d, int begin, int end) overridesofa::component::constraint::lagrangian::correction::LinearSolverConstraintCorrection< TDataTypes >virtual; addConstraintSolver(core::behavior::ConstraintSolver *s) overridesofa::core::behavior::ConstraintCorrection< TDataTypes >virtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyContactForce(const linearalgebra::BaseVector *f) overridesofa::component::constraint::lagra",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_linear_solver_constraint_correction-members.html:1362,log,logging,1362,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_linear_solver_constraint_correction-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_linear_solver_constraint_correction-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addComplianceInConstraintSpace(const sofa::core::ConstraintParams *cparams, sofa::linearalgebra::BaseMatrix *W) overridesofa::component::constraint::lagrangian::correction::UncoupledConstraintCorrection< TDataTypes >virtual; addConstraintDisplacement(SReal *d, int begin, int end) overridesofa::component::constraint::lagrangian::correction::UncoupledConstraintCorrection< TDataTypes >virtual; addConstraintSolver(core::behavior::ConstraintSolver *s) overridesofa::core::behavior::ConstraintCorrection< TDataTypes >virtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyContactForce(const linearalgebra::BaseVector *f) overridesofa::component::constraint::lagrangian:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_uncoupled_constraint_correction-members.html:1356,log,logging,1356,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_uncoupled_constraint_correction-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1correction_1_1_uncoupled_constraint_correction-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addConstraint(Index index)sofa::component::constraint::projective::AffineMovementProjectiveConstraint< TDataTypes >; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; AffineMovementProjectiveConstraint()sofa::component::constraint::projective::AffineMovementProjectiveConstraint< TDataTypes >protected; AffineMovementProjectiveConstraintInternalData< DataTypes > classsofa::component::constraint::projective::AffineMovementProjectiveConstraint< TDataTypes >friend; applyConstraint(const MechanicalParams *, const sofa::core::behavior::MultiMatrixAccessor *) overridesofa::core::behavior::ProjectiveConstraintSet< TDataTypes >inlinevirtual; applyConstraint(const MechanicalParams *, linearal",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_affine_movement_projective_constraint-members.html:935,log,logging,935,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_affine_movement_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_affine_movement_projective_constraint-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addConstraint(Index index)sofa::component::constraint::projective::DirectionProjectiveConstraint< DataTypes >; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyConstraint(const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix) overridesofa::component::constraint::projective::DirectionProjectiveConstraint< DataTypes >virtual; applyConstraint(const core::MechanicalParams *mparams, linearalgebra::BaseVector *vector, const sofa::core::behavior::MultiMatrixAccessor *matrix) overridesofa::component::constraint::projective::DirectionProjectiveConstraint< DataTypes >virtual; sofa::core::behavior::BaseProjectiveConstraintSet::applyConstraint(sofa::core::beh",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_direction_projective_constraint-members.html:917,log,logging,917,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_direction_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_direction_projective_constraint-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addConstraint(Index index)sofa::component::constraint::projective::FixedPlaneProjectiveConstraint< DataTypes >; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyConstraint(const MechanicalParams *mparams, const MultiMatrixAccessor *matrix) overridesofa::component::constraint::projective::FixedPlaneProjectiveConstraint< DataTypes >virtual; applyConstraint(const MechanicalParams *mparams, BaseVector *vect, const MultiMatrixAccessor *matrix) overridesofa::component::constraint::projective::FixedPlaneProjectiveConstraint< DataTypes >virtual; applyConstraint(sofa::core::behavior::ZeroDirichletCondition *matrix) overridesofa::component::constraint::projective::FixedPlaneProjectiveConstraint<",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_plane_projective_constraint-members.html:920,log,logging,920,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_plane_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_plane_projective_constraint-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addConstraint(Index index)sofa::component::constraint::projective::FixedProjectiveConstraint< DataTypes >; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyConstraint(const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix) overridesofa::component::constraint::projective::FixedProjectiveConstraint< DataTypes >virtual; applyConstraint(const core::MechanicalParams *mparams, linearalgebra::BaseVector *vect, const sofa::core::behavior::MultiMatrixAccessor *matrix) overridesofa::component::constraint::projective::FixedProjectiveConstraint< DataTypes >virtual; applyConstraint(sofa::core::behavior::ZeroDirichletCondition *matrix) overridesofa::component::constrain",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_projective_constraint-members.html:905,log,logging,905,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_projective_constraint-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addConstraint(Index index)sofa::component::constraint::projective::FixedProjectiveConstraint< DataTypes >; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyConstraint(const core::MechanicalParams *mparams, linearalgebra::BaseVector *vector, const sofa::core::behavior::MultiMatrixAccessor *matrix) overridesofa::component::constraint::projective::PartialFixedProjectiveConstraint< DataTypes >virtual; applyConstraint(const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix) overridesofa::component::constraint::projective::PartialFixedProjectiveConstraint< DataTypes >virtual; applyConstraint(sofa::core::behavior::ZeroDirichletCondition *matrix) over",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_partial_fixed_projective_constraint-members.html:919,log,logging,919,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_partial_fixed_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_partial_fixed_projective_constraint-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addConstraint(Index index)sofa::component::constraint::projective::LineProjectiveConstraint< DataTypes >; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyConstraint(const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix) overridesofa::component::constraint::projective::LineProjectiveConstraint< DataTypes >virtual; applyConstraint(const core::MechanicalParams *mparams, linearalgebra::BaseVector *vector, const sofa::core::behavior::MultiMatrixAccessor *matrix) overridesofa::component::constraint::projective::LineProjectiveConstraint< DataTypes >virtual; sofa::core::behavior::BaseProjectiveConstraintSet::applyConstraint(sofa::core::behavior::ZeroDirichletCondi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_line_projective_constraint-members.html:902,log,logging,902,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_line_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_line_projective_constraint-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addConstraint(Index index)sofa::component::constraint::projective::PatchTestMovementProjectiveConstraint< TDataTypes >; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyConstraint(const MechanicalParams *, const sofa::core::behavior::MultiMatrixAccessor *) overridesofa::core::behavior::ProjectiveConstraintSet< TDataTypes >inlinevirtual; applyConstraint(const MechanicalParams *, linearalgebra::BaseVector *, const sofa::core::behavior::MultiMatrixAccessor *) overridesofa::core::behavior::ProjectiveConstraintSet< TDataTypes >inlinevirtual; sofa::core::behavior::BaseProjectiveConstraintSet::applyConstraint(sofa::core::behavior::ZeroDirichletCondition *)sofa::core::behavior:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_patch_test_movement_projective_constraint-members.html:944,log,logging,944,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_patch_test_movement_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_patch_test_movement_projective_constraint-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addConstraint(Index index)sofa::component::constraint::projective::PlaneProjectiveConstraint< DataTypes >; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyConstraint(const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix) overridesofa::component::constraint::projective::PlaneProjectiveConstraint< DataTypes >virtual; applyConstraint(const core::MechanicalParams *mparams, linearalgebra::BaseVector *vector, const sofa::core::behavior::MultiMatrixAccessor *matrix) overridesofa::component::constraint::projective::PlaneProjectiveConstraint< DataTypes >virtual; sofa::core::behavior::BaseProjectiveConstraintSet::applyConstraint(sofa::core::behavior::ZeroDirichlet",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_plane_projective_constraint-members.html:905,log,logging,905,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_plane_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_plane_projective_constraint-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addConstraint(Index index)sofa::component::constraint::projective::PointProjectiveConstraint< DataTypes >; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyConstraint(const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix) overridesofa::component::constraint::projective::PointProjectiveConstraint< DataTypes >virtual; applyConstraint(const core::MechanicalParams *mparams, linearalgebra::BaseVector *vector, const sofa::core::behavior::MultiMatrixAccessor *matrix) overridesofa::component::constraint::projective::PointProjectiveConstraint< DataTypes >virtual; applyConstraint(sofa::core::behavior::ZeroDirichletCondition *matrix) overridesofa::component::constra",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_point_projective_constraint-members.html:905,log,logging,905,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_point_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_point_projective_constraint-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addConstraint(unsigned index)sofa::component::constraint::projective::HermiteSplineProjectiveConstraint< DataTypes >; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyConstraint(const MechanicalParams *, const sofa::core::behavior::MultiMatrixAccessor *) overridesofa::core::behavior::ProjectiveConstraintSet< DataTypes >inlinevirtual; applyConstraint(const MechanicalParams *, linearalgebra::BaseVector *, const sofa::core::behavior::MultiMatrixAccessor *) overridesofa::core::behavior::ProjectiveConstraintSet< DataTypes >inlinevirtual; sofa::core::behavior::BaseProjectiveConstraintSet::applyConstraint(sofa::core::behavior::ZeroDirichletCondition *)sofa::core::behavior::BaseProjectiv",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_hermite_spline_projective_constraint-members.html:932,log,logging,932,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_hermite_spline_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_hermite_spline_projective_constraint-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addConstraint(unsigned index)sofa::component::constraint::projective::ParabolicProjectiveConstraint< DataTypes >; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyConstraint(const MechanicalParams *, const sofa::core::behavior::MultiMatrixAccessor *) overridesofa::core::behavior::ProjectiveConstraintSet< DataTypes >inlinevirtual; applyConstraint(const MechanicalParams *, linearalgebra::BaseVector *, const sofa::core::behavior::MultiMatrixAccessor *) overridesofa::core::behavior::ProjectiveConstraintSet< DataTypes >inlinevirtual; sofa::core::behavior::BaseProjectiveConstraintSet::applyConstraint(sofa::core::behavior::ZeroDirichletCondition *)sofa::core::behavior::BaseProjectiveConstraintS",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_parabolic_projective_constraint-members.html:920,log,logging,920,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_parabolic_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_parabolic_projective_constraint-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addConstraint(unsigned index, const Coord &mean, const Deriv &amplitude, Real pulsation, Real phase)sofa::component::constraint::projective::OscillatorProjectiveConstraint< TDataTypes >; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyConstraint(const MechanicalParams *, const sofa::core::behavior::MultiMatrixAccessor *) overridesofa::core::behavior::ProjectiveConstraintSet< TDataTypes >inlinevirtual; applyConstraint(const MechanicalParams *, linearalgebra::BaseVector *, const sofa::core::behavior::MultiMatrixAccessor *) overridesofa::core::behavior::ProjectiveConstraintSet< TDataTypes >inlinevirtual; sofa::core::behavior::BaseProjectiveConstraintSet::applyConstraint(sofa::core::beh",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_oscillator_projective_constraint-members.html:997,log,logging,997,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_oscillator_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_oscillator_projective_constraint-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; AddFrameButtonSetting()sofa::gui::component::AddFrameButtonSettingprotected; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buttonsofa::component::setting::MouseButtonSetting; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::obj",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_add_frame_button_setting-members.html:803,log,logging,803,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_add_frame_button_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_add_frame_button_setting-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addEdge(Index a, Index b) overridesofa::component::topology::container::dynamic::EdgeSetTopologyContainervirtual; addHexa(Index a, Index b, Index c, Index d, Index e, Index f, Index g, Index h) overridesofa::component::topology::container::dynamic::HexahedronSetTopologyContainervirtual; addLine(Index a, Index b)sofa::core::topology::BaseMeshTopologyinline; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addPoint(SReal px, SReal py, SReal pz) overridesofa::component::topology::container::dynamic::PointSetTopologyContainervirtual; addPoint()sofa::component::topology::container::dynamic::PointSetTopologyContainer; addPoints(const Size nPoints)sofa::component::topology::container::dynamic::PointSetTopologyContainer; addQuad(Index a, Index b, Index c, Index d) overridesofa::component::topology::container::dynamic::QuadSetTopologyContainervirtual; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addStateChange(const TopologyChange *topologyChange)sofa::core::topology::TopologyContainervirtual; addTag(Tag t)sofa::core::objectmodel::Base;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_container-members.html:1161,log,logging,1161,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_container-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_dynamic_sparse_grid_topology_container-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addEdge(Index a, Index b) overridesofa::component::topology::container::dynamic::EdgeSetTopologyContainervirtual; addHexa(Index a, Index b, Index c, Index d, Index e, Index f, Index g, Index h) overridesofa::component::topology::container::dynamic::HexahedronSetTopologyContainervirtual; addLine(Index a, Index b)sofa::core::topology::BaseMeshTopologyinline; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addPoint(SReal px, SReal py, SReal pz) overridesofa::component::topology::container::dynamic::PointSetTopologyContainervirtual; addPoint()sofa::component::topology::container::dynamic::PointSetTopologyContainer; addPoints(const Size nPoints)sofa::component::topology::container::dynamic::PointSetTopologyContainer; addQuad(Index a, Index b, Index c, Index d) overridesofa::component::topology::container::dynamic::QuadSetTopologyContainervirtual; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addStateChange(const TopologyChange *topologyChange)sofa::core::topology::TopologyContainervirtual; addTag(Tag t)sofa::core::objectmodel::Base; addTetr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_container-members.html:1153,log,logging,1153,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_container-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_hexahedron_set_topology_container-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addEdge(Index a, Index b) overridesofa::component::topology::container::dynamic::EdgeSetTopologyContainervirtual; addHexa(Index a, Index b, Index c, Index d, Index e, Index f, Index g, Index h)sofa::core::topology::BaseMeshTopologyvirtual; addLine(Index a, Index b)sofa::core::topology::BaseMeshTopologyinline; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addPoint(SReal px, SReal py, SReal pz) overridesofa::component::topology::container::dynamic::PointSetTopologyContainervirtual; addPoint()sofa::component::topology::container::dynamic::PointSetTopologyContainer; addPoints(const Size nPoints)sofa::component::topology::container::dynamic::PointSetTopologyContainer; addQuad(Index a, Index b, Index c, Index d) overridesofa::component::topology::container::dynamic::QuadSetTopologyContainervirtual; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addStateChange(const TopologyChange *topologyChange)sofa::core::topology::TopologyContainervirtual; addTag(Tag t)sofa::core::objectmodel::Base; addTetra(Index a, Index b, Index c, Index d)sofa::core::topology::B",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_topology_container-members.html:1093,log,logging,1093,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_topology_container-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_quad_set_topology_container-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addEdge(Index a, Index b) overridesofa::component::topology::container::dynamic::EdgeSetTopologyContainervirtual; addHexa(Index a, Index b, Index c, Index d, Index e, Index f, Index g, Index h)sofa::core::topology::BaseMeshTopologyvirtual; addLine(Index a, Index b)sofa::core::topology::BaseMeshTopologyinline; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addPoint(SReal px, SReal py, SReal pz) overridesofa::component::topology::container::dynamic::PointSetTopologyContainervirtual; addPoint()sofa::component::topology::container::dynamic::PointSetTopologyContainer; addPoints(const Size nPoints)sofa::component::topology::container::dynamic::PointSetTopologyContainer; addQuad(Index a, Index b, Index c, Index d)sofa::core::topology::BaseMeshTopologyvirtual; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addStateChange(const TopologyChange *topologyChange)sofa::core::topology::TopologyContainervirtual; addTag(Tag t)sofa::core::objectmodel::Base; addTetra(Index a, Index b, Index c, Index d)sofa::core::topology::BaseMeshTopologyvirtual; addTopologyChange(",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_topology_container-members.html:1093,log,logging,1093,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_topology_container-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_edge_set_topology_container-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addEdge(Index a, Index b)sofa::core::topology::BaseMeshTopologyvirtual; addHexa(Index a, Index b, Index c, Index d, Index e, Index f, Index g, Index h)sofa::core::topology::BaseMeshTopologyvirtual; addLine(Index a, Index b)sofa::core::topology::BaseMeshTopologyinline; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addPoint(SReal px, SReal py, SReal pz) overridesofa::component::topology::container::dynamic::PointSetTopologyContainervirtual; addPoint()sofa::component::topology::container::dynamic::PointSetTopologyContainer; addPoints(const Size nPoints)sofa::component::topology::container::dynamic::PointSetTopologyContainer; addQuad(Index a, Index b, Index c, Index d)sofa::core::topology::BaseMeshTopologyvirtual; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addStateChange(const TopologyChange *topologyChange)sofa::core::topology::TopologyContainervirtual; addTag(Tag t)sofa::core::objectmodel::Base; addTetra(Index a, Index b, Index c, Index d)sofa::core::topology::BaseMeshTopologyvirtual; addTopologyChange(const TopologyChange *topologyChange)sof",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_container-members.html:1053,log,logging,1053,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_container-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_container-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addEdge(Index a, Index b)sofa::core::topology::BaseMeshTopologyvirtual; addHexa(Index a, Index b, Index c, Index d, Index e, Index f, Index g, Index h)sofa::core::topology::BaseMeshTopologyvirtual; addLine(Index a, Index b)sofa::core::topology::BaseMeshTopologyinline; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addPoint(SReal px, SReal py, SReal pz)sofa::core::topology::BaseMeshTopologyvirtual; addQuad(Index a, Index b, Index c, Index d)sofa::core::topology::BaseMeshTopologyvirtual; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addStateChange(const TopologyChange *topologyChange)sofa::core::topology::TopologyContainervirtual; addTag(Tag t)sofa::core::objectmodel::Base; addTetra(Index a, Index b, Index c, Index d)sofa::core::topology::BaseMeshTopologyvirtual; addTopologyChange(const TopologyChange *topologyChange)sofa::core::topology::TopologyContainervirtual; addTopologyHandler(TopologyHandler *_TopologyHandler, sofa::geometry::ElementType elementType)sofa::core::topology::TopologyContainer; addTriangle(Index a, Index b, Index c)sofa::core::topology::BaseMeshTopologyvirtual; addUpdateCallback(const std::st",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_container-members.html:987,log,logging,987,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_container-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_container-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addEdge(Index a, Index b)sofa::core::topology::BaseMeshTopologyvirtual; addHexa(Index a, Index b, Index c, Index d, Index e, Index f, Index g, Index h)sofa::core::topology::BaseMeshTopologyvirtual; addLine(Index a, Index b)sofa::core::topology::BaseMeshTopologyinline; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addPoint(SReal px, SReal py, SReal pz)sofa::core::topology::BaseMeshTopologyvirtual; addQuad(Index a, Index b, Index c, Index d)sofa::core::topology::BaseMeshTopologyvirtual; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addTetra(Index a, Index b, Index c, Index d)sofa::core::topology::BaseMeshTopologyvirtual; addTriangle(Index a, Index b, Index c)sofa::core::topology::BaseMeshTopologyvirtual; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseMeshTopology()sofa::core::topology::BaseMeshTopologyprotected; BaseObjec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_mesh_topology-members.html:985,log,logging,985,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_mesh_topology-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_mesh_topology-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addEdge(Index, Index) overridesofa::component::topology::container::dynamic::TriangleSetTopologyContainerinlinevirtual; addHexa(Index a, Index b, Index c, Index d, Index e, Index f, Index g, Index h)sofa::core::topology::BaseMeshTopologyvirtual; addLine(Index a, Index b)sofa::core::topology::BaseMeshTopologyinline; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addPoint(SReal px, SReal py, SReal pz) overridesofa::component::topology::container::dynamic::PointSetTopologyContainervirtual; addPoint()sofa::component::topology::container::dynamic::PointSetTopologyContainer; addPoints(const Size nPoints)sofa::component::topology::container::dynamic::PointSetTopologyContainer; addQuad(Index a, Index b, Index c, Index d)sofa::core::topology::BaseMeshTopologyvirtual; addRemovedTetraIndex(sofa::type::vector< TetrahedronID > &tetrahedra)sofa::component::topology::container::dynamic::TetrahedronSetTopologyContainer; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addStateChange(const TopologyChange *topologyChange)sofa::core::topology::TopologyCo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_container-members.html:1113,log,logging,1113,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_container-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_tetrahedron_set_topology_container-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addEdge(Index, Index) overridesofa::component::topology::container::dynamic::TriangleSetTopologyContainerinlinevirtual; addHexa(Index a, Index b, Index c, Index d, Index e, Index f, Index g, Index h)sofa::core::topology::BaseMeshTopologyvirtual; addLine(Index a, Index b)sofa::core::topology::BaseMeshTopologyinline; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addPoint(SReal px, SReal py, SReal pz) overridesofa::component::topology::container::dynamic::PointSetTopologyContainervirtual; addPoint()sofa::component::topology::container::dynamic::PointSetTopologyContainer; addPoints(const Size nPoints)sofa::component::topology::container::dynamic::PointSetTopologyContainer; addQuad(Index a, Index b, Index c, Index d)sofa::core::topology::BaseMeshTopologyvirtual; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addStateChange(const TopologyChange *topologyChange)sofa::core::topology::TopologyContainervirtual; addTag(Tag t)sofa::core::objectmodel::Base; addTetra(Index a, Index b, Index c, Index d)sofa::core::topology::BaseMeshTopologyvirtual; addT",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_topology_container-members.html:1107,log,logging,1107,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_topology_container-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_triangle_set_topology_container-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addElt(const Coord &elt, VecCoord beginElts=VecCoord(), const double &distMax=0)sofa::component::engine::analyze::Distances< DataTypes >; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_distances-members.html:1158,log,logging,1158,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_distances-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_distances-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addFinalTetra(SeqTetrahedra &outT, SeqPoints &outP, int p1, int p2, int p3, int p4, bool flip=false, int line=0)sofa::component::engine::generate::MeshTetraStuffing; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addTetra(SeqTetrahedra &outT, SeqPoints &outP, int p1, int p2, int p3, int p4, int line=0)sofa::component::engine::generate::MeshTetraStuffing; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::Co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_mesh_tetra_stuffing-members.html:1178,log,logging,1178,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_mesh_tetra_stuffing-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_mesh_tetra_stuffing-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addHexahedron(type::vector< Hexahedron > *pHexahedra, const type::fixed_array< unsigned int, 8 > &p)sofa::core::loader::VoxelLoader; addHexahedron(type::vector< Hexahedron > *pHexahedra, unsigned int p0, unsigned int p1, unsigned int p2, unsigned int p3, unsigned int p4, unsigned int p5, unsigned int p6, unsigned int p7)sofa::core::loader::VoxelLoader; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseLoader()sofa::core::loader::BaseLoaderprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad()sofa::core::loader::BaseLoadervi",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html:1057,log,logging,1057,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_voxel_loader-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addIndex(Index index)sofa::component::constraint::projective::LinearMovementProjectiveConstraint< TDataTypes >; addKeyMovement(Real time, Deriv movement)sofa::component::constraint::projective::LinearMovementProjectiveConstraint< TDataTypes >; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyConstraint(const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix) overridesofa::component::constraint::projective::LinearMovementProjectiveConstraint< TDataTypes >virtual; applyConstraint(const core::MechanicalParams *mparams, linearalgebra::BaseVector *vector, const sofa::core::behavior::MultiMatrixAccessor *matrix) overridesofa::component::constr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_linear_movement_projective_constraint-members.html:1062,log,logging,1062,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_linear_movement_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_linear_movement_projective_constraint-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addIndex(Index index)sofa::component::constraint::projective::LinearVelocityProjectiveConstraint< TDataTypes >; addKeyVelocity(Real time, Deriv movement)sofa::component::constraint::projective::LinearVelocityProjectiveConstraint< TDataTypes >; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyConstraint(const MechanicalParams *, const sofa::core::behavior::MultiMatrixAccessor *) overridesofa::core::behavior::ProjectiveConstraintSet< TDataTypes >inlinevirtual; applyConstraint(const MechanicalParams *, linearalgebra::BaseVector *, const sofa::core::behavior::MultiMatrixAccessor *) overridesofa::core::behavior::ProjectiveConstraintSet< TDataTypes >inlinevirtual; sofa::core::behav",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_linear_velocity_projective_constraint-members.html:1062,log,logging,1062,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_linear_velocity_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_linear_velocity_projective_constraint-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addIndex(Index index)sofa::component::constraint::projective::PartialLinearMovementProjectiveConstraint< TDataTypes >; addKeyMovement(Real time, Deriv movement)sofa::component::constraint::projective::PartialLinearMovementProjectiveConstraint< TDataTypes >; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyConstraint(const core::MechanicalParams *mparams, const sofa::core::behavior::MultiMatrixAccessor *matrix) overridesofa::component::constraint::projective::PartialLinearMovementProjectiveConstraint< TDataTypes >virtual; applyConstraint(const core::MechanicalParams *mparams, linearalgebra::BaseVector *vector, const sofa::core::behavior::MultiMatrixAccessor *matr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_partial_linear_movement_projective_constraint-members.html:1090,log,logging,1090,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_partial_linear_movement_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_partial_linear_movement_projective_constraint-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addPointInCube(const sofa::Index cubeIndex, const SReal *baryCoords)sofa::component::engine::generate::MeshBarycentricMapperEngine< DataTypes >; addPointInLine(const sofa::Index lineIndex, const SReal *baryCoords)sofa::component::engine::generate::MeshBarycentricMapperEngine< DataTypes >; addPointInQuad(const sofa::Index quadIndex, const SReal *baryCoords)sofa::component::engine::generate::MeshBarycentricMapperEngine< DataTypes >; addPointInTetra(const sofa::Index tetraIndex, const SReal *baryCoords, con",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_mesh_barycentric_mapper_engine-members.html:1058,log,logging,1058,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_mesh_barycentric_mapper_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_mesh_barycentric_mapper_engine-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; AFFINE enum valuesofa::component::engine::transform::TransformPosition< DataTypes >; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectm",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_transform_position-members.html:1040,log,logging,1040,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_transform_position-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_transform_position-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; AverageCoord()sofa::component::engine::analyze::AverageCoord< DataTypes >protected; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_average_coord-members.html:1026,log,logging,1026,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_average_coord-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_average_coord-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseROI()sofa::component::engine::select::BaseROI< DataTypes >protecte",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1boxroi_1_1_box_r_o_i-members.html:1028,log,logging,1028,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1boxroi_1_1_box_r_o_i-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1boxroi_1_1_box_r_o_i-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseROI()sofa::component::engine::select::BaseROI< DataTypes >protected; BaseTyp",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_sphere_r_o_i-members.html:1018,log,logging,1018,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_sphere_r_o_i-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_sphere_r_o_i-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseROI()sofa::component::engine::select::BaseROI< DataTypes >protected; BaseType ty",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_base_r_o_i-members.html:1014,log,logging,1014,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_base_r_o_i-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_base_r_o_i-members.html,2,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typed",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_displacement_transform_engine-members.html:1084,log,logging,1084,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_displacement_transform_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_displacement_transform_engine-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::ob",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_random_point_distribution_in_surface-members.html:1068,log,logging,1068,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_random_point_distribution_in_surface-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_random_point_distribution_in_surface-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology_1_1_primitive_update-members.html:1062,log,logging,1062,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology_1_1_primitive_update-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1constant_1_1_mesh_topology_1_1_primitive_update-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmode",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_edges_and_generate_quads-members.html:1060,log,logging,1060,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_edges_and_generate_quads-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_edges_and_generate_quads-members.html,2,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::B",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_projective_transform_engine-members.html:1056,log,logging,1056,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_projective_transform_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_projective_transform_engine-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Bas",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_displacement_matrix_engine-members.html:1054,log,logging,1054,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_displacement_matrix_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_displacement_matrix_engine-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; b",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_group_filter_young_modulus-members.html:1050,log,logging,1050,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_group_filter_young_modulus-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_group_filter_young_modulus-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdIn",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_indices2_values_mapper-members.html:1046,log,logging,1046,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_indices2_values_mapper-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_indices2_values_mapper-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()so",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_quat_to_rigid_engine-members.html:1040,log,logging,1040,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_quat_to_rigid_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_quat_to_rigid_engine-members.html,2,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_smooth_mesh_engine-members.html:1038,log,logging,1038,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_smooth_mesh_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_smooth_mesh_engine-members.html,7,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_transform_engine-members.html:1036,log,logging,1036,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_transform_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_transform_engine-members.html,3,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_clustering_engine-members.html:1034,log,logging,1034,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_clustering_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_clustering_engine-members.html,3,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_surface-members.html:1032,log,logging,1032,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_surface-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_extrude_surface-members.html,4,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_vertex2_frame-members.html:1030,log,logging,1030,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_vertex2_frame-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_vertex2_frame-members.html,3,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::ob",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_grid-members.html:1028,log,logging,1028,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_grid-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_grid-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::obje",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_meshes-members.html:1026,log,logging,1026,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_meshes-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_meshes-members.html,2,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::object",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_join_points-members.html:1024,log,logging,1024,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_join_points-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_join_points-members.html,2,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_sampler-members.html:1022,log,logging,1022,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_sampler-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_sampler-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmode",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_sum_engine-members.html:1020,log,logging,1020,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_sum_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_sum_engine-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_vectors-members.html:1018,log,logging,1018,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_vectors-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_vectors-members.html,3,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::B",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_spiral-members.html:1016,log,logging,1016,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_spiral-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_spiral-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::Bas",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_select_label_r_o_i-members.html:1014,log,logging,1014,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_select_label_r_o_i-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_select_label_r_o_i-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_math_op-members.html:1008,log,logging,1008,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_math_op-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_math_op-members.html,2,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectv",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_sets-members.html:1006,log,logging,1006,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_sets-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_merge_sets-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvir",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_boundary_r_o_i-members.html:1004,log,logging,1004,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_boundary_r_o_i-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_mesh_boundary_r_o_i-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCre",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_merge_r_o_is-members.html:992,log,logging,992,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_merge_r_o_is-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1select_1_1_merge_r_o_is-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescri",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_engine-members.html:952,log,logging,952,api/master/sofa/html/classsofa_1_1core_1_1_data_engine-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_data_engine-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; afIntegralsofa::component::engine::generate::GenerateRigidMass< DataTypes, MassType >protected; Base()sofa::core::objectmodel::Baseprotected; Ba",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_rigid_mass-members.html:1058,log,logging,1058,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_rigid_mass-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1generate_1_1_generate_rigid_mass-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; affineRatiosofa::component::engine::analyze::ShapeMatching< DataTypes >; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotecte",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_shape_matching-members.html:1028,log,logging,1028,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_shape_matching-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1analyze_1_1_shape_matching-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInput(sofa::core::objectmodel::BaseData *data)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addInput(DDGNode *n)sofa::core::objectmodel::DDGNode; addInputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutput(objectmodel::BaseData *n)sofa::core::DataEngine; sofa::core::DataTrackerDDGNode::addOutput(DDGNode *n)sofa::core::objectmodel::DDGNode; addOutputs(std::initializer_list< sofa::core::objectmodel::BaseData * > datas)sofa::core::DataTrackerDDGNode; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; apply(Value &v, const MapIndex &m)sofa::component::engine::transform::MapIndices< T >inline; apply(Value &v, const MapIndex &m)sofa::component::engine::transform::MapIndices< T >inline; apply(",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_map_indices-members.html:1010,log,logging,1010,api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_map_indices-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1engine_1_1transform_1_1_map_indices-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInputModel(BaseState *model, const std::string &path="""")sofa::core::MultiMapping< TIn, TOut >; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputModel(BaseState *model, const std::string &path="""")sofa::core::MultiMapping< TIn, TOut >; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addPoint(const core::BaseState *fromModel, int index)sofa::component::mapping::nonlinear::DistanceMultiMapping< TIn, TOut >; addPoint(int fromModel, int index)sofa::component::mapping::nonlinear::DistanceMultiMapping< TIn, TOut >; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; apply(const core::MechanicalParams *mparams, const type::vector< OutDataVecCoord * > &dataVecOutPos, const type::vector< const InDataVecCoord * > &dataVecInPos) overridesofa::component::mapping::nonlinear::DistanceMultiMapping< TIn, TOut >inlinevirtu",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_distance_multi_mapping-members.html:878,log,logging,878,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_distance_multi_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_distance_multi_mapping-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInputModel(BaseState *model, const std::string &path="""")sofa::core::MultiMapping< TIn, TOut >; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputModel(BaseState *model, const std::string &path="""")sofa::core::MultiMapping< TIn, TOut >; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; apply(const MechanicalParams *mparams, MultiVecCoordId outPos, ConstMultiVecCoordId inPos) overridesofa::core::MultiMapping< TIn, TOut >virtual; apply(const MechanicalParams *mparams, const type::vector< OutDataVecCoord * > &dataVecOutPos, const type::vector< const InDataVecCoord * > &dataVecInPos)=0sofa::core::MultiMapping< TIn, TOut >pure virtual; applyDJT(const MechanicalParams *mparams, MultiVecDerivId inForce, ConstMultiVecDerivId outForce)=0sofa::core::BaseMappingpure virtual; applyJ(const MechanicalParams *mparams, MultiVecDerivId out",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_multi_mapping-members.html:812,log,logging,812,api/master/sofa/html/classsofa_1_1core_1_1_multi_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_multi_mapping-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addInputModel1(State< In1 > *, const std::string &path="""")sofa::core::Multi2Mapping< TIn1, TIn2, TOut >virtual; addInputModel2(State< In2 > *, const std::string &path="""")sofa::core::Multi2Mapping< TIn1, TIn2, TOut >virtual; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputModel(State< Out > *, const std::string &path="""")sofa::core::Multi2Mapping< TIn1, TIn2, TOut >virtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; apply(const MechanicalParams *mparams, MultiVecCoordId outPos, ConstMultiVecCoordId inPos) overridesofa::core::Multi2Mapping< TIn1, TIn2, TOut >virtual; apply(const MechanicalParams *mparams, const type::vector< DataVecCoord_t< Out > * > &dataVecOutPos, const type::vector< const DataVecCoord_t< In1 > * > &dataVecIn1Pos, const type::vector< const DataVecCoord_t< In2 > * > &dataVecIn2Pos)=0s",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_multi2_mapping-members.html:954,log,logging,954,api/master/sofa/html/classsofa_1_1core_1_1_multi2_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_multi2_mapping-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addJMInvJt(linearalgebra::BaseMatrix *result, linearalgebra::BaseMatrix *J, SReal fact) overridesofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager >virtual; addJMInvJtLocal(Matrix *, ResMatrixType *result, const JMatrixType *J, SReal fact)sofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager >virtual; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addMInvJt(linearalgebra::BaseMatrix *result, linearalgebra::BaseMatrix *J, SReal fact) overridesofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager >virtual; addMInvJtLocal(Matrix *, ResMatrixType *result, const JMatrixType *J, SReal fact)sofa::component::linearsolver::MatrixLinearSolver< Matrix, Vector, NoThreadManager >virtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function,",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_matrix_linear_solver_3_01_matrix_00_01_vector_00_01_no_thread_manager_01_4-members.html:1172,log,logging,1172,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_matrix_linear_solver_3_01_matrix_00_01_vector_00_01_no_thread_manager_01_4-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_matrix_linear_solver_3_01_matrix_00_01_vector_00_01_no_thread_manager_01_4-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addJMInvJt(linearalgebra::BaseMatrix *result, linearalgebra::BaseMatrix *J, SReal fact)sofa::core::behavior::LinearSolverinlinevirtual; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addMInvJt(linearalgebra::BaseMatrix *result, linearalgebra::BaseMatrix *J, SReal fact)sofa::core::behavior::LinearSolverinlinevirtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyConstraintForce(const sofa::core::ConstraintParams *, sofa::core::MultiVecDerivId, const linearalgebra::BaseVector *)sofa::core::behavior::LinearSolverinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildComplianceMatrix(const sofa::core::ConstraintParams *cparams, linearalgebra::B",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_base_matrix_linear_solver-members.html:918,log,logging,918,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_base_matrix_linear_solver-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1_base_matrix_linear_solver-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addJMInvJt(linearalgebra::BaseMatrix *result, linearalgebra::BaseMatrix *J, SReal fact)sofa::core::behavior::LinearSolverinlinevirtual; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addMInvJt(linearalgebra::BaseMatrix *result, linearalgebra::BaseMatrix *J, SReal fact)sofa::core::behavior::LinearSolverinlinevirtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyConstraintForce(const sofa::core::ConstraintParams *, sofa::core::MultiVecDerivId, const linearalgebra::BaseVector *)sofa::core::behavior::LinearSolverinlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildComplianceMatrix(const sofa::core::ConstraintParams *cparams, linearalgebra::BaseMatrix *result, SReal fact)sofa::core::behavior::LinearSolverinlinevirt",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver-members.html:844,log,logging,844,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMappedMatrixToGlobalMatrixEigen(sofa::type::fixed_array< core::behavior::BaseMechanicalState *, 2 > mstatePair, TMatrix *mappedMatrix, sofa::type::fixed_array< MappingJacobians< TMatrix >, 2 > jacobians, const MappingGraph &mappingGraph, linearalgebra::BaseMatrix *globalMatrix)sofa::component::linearsystem::MatrixProjectionMethod< TMatrix >protected; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseMatrixProjectionMethod(const PairMechanicalStates &states)sofa::component::linearsystem::BaseMatrixProjectionMethod< TMatrix >explicitprotected; BaseMatrixProjectionMethod()=defaultsofa::component::linearsystem::BaseMatrixProjectionMethod< TMatrix >protected; Base",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_constant_sparsity_projection_method-members.html:1144,log,logging,1144,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_constant_sparsity_projection_method-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_constant_sparsity_projection_method-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMappedMatrixToGlobalMatrixEigen(sofa::type::fixed_array< core::behavior::BaseMechanicalState *, 2 > mstatePair, TMatrix *mappedMatrix, sofa::type::fixed_array< MappingJacobians< TMatrix >, 2 > jacobians, const MappingGraph &mappingGraph, linearalgebra::BaseMatrix *globalMatrix)sofa::component::linearsystem::MatrixProjectionMethod< TMatrix >protected; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseMatrixProjectionMethod(const PairMechanicalStates &states)sofa::component::linearsystem::BaseMatrixProjectionMethod< TMatrix >explicitprotected; BaseMatrixProjectionMethod()=defaultsofa::component::linearsystem::BaseMatrixProjectionMethod< TMatrix >protected; BaseObject()sofa::core::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_projection_method-members.html:1124,log,logging,1124,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_projection_method-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_projection_method-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addObject(sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd)sofa::core::objectmodel::BaseContextinlinevirtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseContext()sofa::core::objectmodel::BaseContextprotected; BaseType typedefsofa::core::objectmodel::Base; canChangeSleepingState() constsofa::core::objectmodel::BaseContextvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; executeVisitor(simulation::Visitor *, bool precomputedOrder=false)sofa::core::objectmodel::BaseContextvirtual; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html:712,log,logging,712,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_context-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addObject(sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd)sofa::core::objectmodel::BaseContextinlinevirtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; animate_sofa::core::objectmodel::Context; Base()sofa::core::objectmodel::Baseprotected; BaseContext()sofa::core::objectmodel::BaseContextprotected; BaseType typedefsofa::core::objectmodel::Base; canChangeSleepingState() const overridesofa::core::objectmodel::Contextvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; Context()sofa::core::objectmodel::Contextprotected; copyContext(const Context &c)sofa::core::objectmodel::Context; copySimulationContext(const Context &c)sofa::core::objectmodel::Context; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_canChangeSleepingStatesofa::core::objectmod",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html:704,log,logging,704,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; AddRecordedCameraButtonSetting()sofa::gui::component::AddRecordedCameraButtonSettinginlineprotected; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buttonsofa::component::setting::MouseButtonSetting; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::Bas",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_add_recorded_camera_button_setting-members.html:744,log,logging,744,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_add_recorded_camera_button_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_add_recorded_camera_button_setting-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addPoint(const OutCoord &c)sofa::component::mapping::nonlinear::RigidMapping< TIn, TOut >; addPoint(const OutCoord &c, sofa::Index indexFrom)sofa::component::mapping::nonlinear::RigidMapping< TIn, TOut >; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; apply(const core::MechanicalParams *mparams, Data< OutVecCoord > &out, const Data< InVecCoord > &in) overridesofa::component::mapping::nonlinear::RigidMapping< TIn, TOut >; sofa::core::Mapping::apply(const MechanicalParams *mparams, MultiVecCoordId outPos, ConstMultiVecCoordId inPos) overridesofa::core::Mapping< TIn, TOut >virtual; sofa::core::Mapping::apply(const MechanicalParams *mparams, OutDataVecCoord &out, const InDataVecCoord &in)=0sofa::core::Mapping< TIn, TOut >pure virtual; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping-members.html:764,log,logging,764,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_rigid_mapping-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addPoints(const sofa::Size nPoints, const bool addDOF=true)sofa::component::topology::container::dynamic::PointSetTopologyModifiervirtual; addPoints(const sofa::Size nPoints, const sofa::type::vector< sofa::type::vector< PointID > > &ancestors, const sofa::type::vector< sofa::type::vector< SReal > > &coefs, const bool addDOF=true)sofa::component::topology::container::dynamic::PointSetTopologyModifiervirtual; addPoints(const sofa::Size nPoints, const sofa::type::vector< core::topology::PointAncestorElem > &ancestorElems, const bool addDOF=true)sofa::component::topology::container::dynamic::PointSetTopologyModifiervirtual; addPointsProcess(const sofa::Size nPoints)sofa::component::topology::container::dynamic::PointSetTopologyModifierprotectedvirtual; addPointsWarning(const sofa::Size nPoints, const bool addDOF=true)sofa::component::topology::container::dynamic::PointSetTopologyModifierprotected; addPointsWarning(const sofa::Size nPoints, const sofa::type::vector< sofa::type::vector< PointID > > &ancestors, const sofa::type::ve",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_modifier-members.html:782,log,logging,782,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_modifier-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1container_1_1dynamic_1_1_point_set_topology_modifier-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSeparateGravity(sofa::simulation::common::MechanicalOperations *mop, SReal dt, core::MultiVecDerivId v)sofa::component::odesolver::forward::EulerExplicitSolverprotectedstatic; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; assembleSystemMatrix(sofa::simulation::common::MechanicalOperations *mop) constsofa::component::odesolver::forward::EulerExplicitSolverprotected; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::obj",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_euler_explicit_solver-members.html:752,log,logging,752,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_euler_explicit_solver-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_euler_explicit_solver-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addStateChange(const TopologyChange *topologyChange)sofa::core::topology::TopologyModifierprotected; addTag(Tag t)sofa::core::objectmodel::Base; addTopologyChange(const TopologyChange *topologyChange)sofa::core::topology::TopologyModifierprotected; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseTopologyObject()sofa::core::topology::BaseTopologyObjectinlineprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_modifier-members.html:716,log,logging,716,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_modifier-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topology_modifier-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addToTotalForces(core::ConstVecDerivId forceId)sofa::core::BaseStatevirtual; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; baseRead(ConstVecId v) const =0sofa::core::BaseStatepure virtual; BaseState()sofa::core::BaseStateinlineprotected; BaseType typedefsofa::core::objectmodel::Base; baseWrite(VecId v)=0sofa::core::BaseStatepure virtual; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTrack",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_base_state-members.html:682,log,logging,682,api/master/sofa/html/classsofa_1_1core_1_1_base_state-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_base_state-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; AttachBodyButtonSetting()sofa::gui::component::AttachBodyButtonSettingprotected; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buttonsofa::component::setting::MouseButtonSetting; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_attach_body_button_setting-members.html:730,log,logging,730,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_attach_body_button_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_attach_body_button_setting-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; BackgroundSetting()sofa::component::setting::BackgroundSettingprotected; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() const",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_background_setting-members.html:726,log,logging,726,api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_background_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_background_setting-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; BarycentricPenalityContact(CollisionModel1 *model1, CollisionModel2 *model2, Intersection *intersectionMethod)sofa::component::collision::response::contact::BarycentricPenalityContact< TCollisionModel1, TCollisionModel2, ResponseDataTypes >protected; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_barycentric_penality_contact-members.html:900,log,logging,900,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_barycentric_penality_contact-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_barycentric_penality_contact-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; BarycentricStickContact(CollisionModel1 *model1, CollisionModel2 *model2, Intersection *intersectionMethod)sofa::component::collision::response::contact::BarycentricStickContact< TCollisionModel1, TCollisionModel2, ResponseDataTypes >protected; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContex",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_barycentric_stick_contact-members.html:894,log,logging,894,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_barycentric_stick_contact-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_barycentric_stick_contact-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseAddResourceRepository()sofa::component::sceneutility::BaseAddResourceRepositoryprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup() overridesofa::component",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_base_add_resource_repository-members.html:752,log,logging,752,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_base_add_resource_repository-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_base_add_resource_repository-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseAddResourceRepository()sofa::component::sceneutility::BaseAddResourceRepositoryprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup() overridesofa::component::sceneutili",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_add_plugin_repository-members.html:740,log,logging,740,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_add_plugin_repository-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_add_plugin_repository-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseAddResourceRepository()sofa::component::sceneutility::BaseAddResourceRepositoryprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup() overridesofa::component::sceneutility::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_add_data_repository-members.html:736,log,logging,736,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_add_data_repository-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_add_data_repository-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseAnimationLoop()sofa::core::behavior::BaseAnimationLoopprotected; BaseContext typedefsofa::simulation::CollisionAnimationLoop; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseObjectDescription typedefsofa::simulation::CollisionAnimationLoop; BaseType typedefsofa::core::objectmodel::Base; bufCP1sofa::component::animationloop::ConstraintAnimationLoopprotected; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseOb",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_constraint_animation_loop-members.html:750,log,logging,750,api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_constraint_animation_loop-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_constraint_animation_loop-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseAnimationLoop()sofa::core::behavior::BaseAnimationLoopprotected; BaseContext typedefsofa::simulation::CollisionAnimationLoop; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseObjectDescription typedefsofa::simulation::CollisionAnimationLoop; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_free_motion_animation_loop-members.html:750,log,logging,750,api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_free_motion_animation_loop-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_free_motion_animation_loop-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseAnimationLoop()sofa::core::behavior::BaseAnimationLoopprotected; BaseContext typedefsofa::simulation::CollisionAnimationLoop; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseObjectDescription typedefsofa::simulation::CollisionAnimationLoop; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectp",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_multi_step_animation_loop-members.html:748,log,logging,748,api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_multi_step_animation_loop-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_multi_step_animation_loop-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseAnimationLoop()sofa::core::behavior::BaseAnimationLoopprotected; BaseContext typedefsofa::simulation::CollisionAnimationLoop; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseObjectDescription typedefsofa::simulation::CollisionAnimationLoop; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectpro",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_multi_tag_animation_loop-members.html:746,log,logging,746,api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_multi_tag_animation_loop-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1animationloop_1_1_multi_tag_animation_loop-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseAnimationLoop()sofa::core::behavior::BaseAnimationLoopprotected; BaseContext typedefsofa::simulation::CollisionAnimationLoop; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseObjectDescription typedefsofa::simulation::CollisionAnimationLoop; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html:720,log,logging,720,api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_collision_animation_loop-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseAnimationLoop()sofa::core::behavior::BaseAnimationLoopprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_animation_loop-members.html:718,log,logging,718,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_animation_loop-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_animation_loop-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseConstraint()sofa::core::behavior::BaseConstraintinlineprotected; BaseConstraintSet()sofa::core::behavior::BaseConstraintSetprotected; BaseInteractionConstraint()sofa::core::behavior::BaseInteractionConstraintinlineprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildConstraintMatrix(const ConstraintParams *cParams, MultiMatrixDerivId cId, unsigned int &cIndex) overridesofa::core::behavior::MixedInteractionConstraint< TDataTypes1, TDataTypes2 >virtual; buildConstraintMatrix(const ConstraintParams *cParams, DataMatrixDeriv1 &c1, DataMatrixDeriv",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_constraint-members.html:792,log,logging,792,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_mixed_interaction_constraint-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseConstraint()sofa::core::behavior::BaseConstraintinlineprotected; BaseConstraintSet()sofa::core::behavior::BaseConstraintSetprotected; BaseInteractionConstraint()sofa::core::behavior::BaseInteractionConstraintinlineprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildConstraintMatrix(const ConstraintParams *cParams, MultiMatrixDerivId cId, unsigned int &cIndex) overridesofa::core::behavior::PairInteractionConstraint< TDataTypes >virtual; buildConstraintMatrix(const ConstraintParams *cParams, DataMatrixDeriv &c1, DataMatrixDeriv &c2, unsigned int &cIndex, const DataVecCoord",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_constraint-members.html:762,log,logging,762,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_constraint-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseConstraint()sofa::core::behavior::BaseConstraintinlineprotected; BaseConstraintSet()sofa::core::behavior::BaseConstraintSetprotected; BaseInteractionConstraint()sofa::core::behavior::BaseInteractionConstraintinlineprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildConstraintMatrix(const ConstraintParams *cParams, MultiMatrixDerivId cId, unsigned int &cIndex)=0sofa::core::behavior::BaseConstraintSetpure virtual; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *be",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_constraint-members.html:734,log,logging,734,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_constraint-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseConstraint()sofa::core::behavior::BaseConstraintinlineprotected; BaseConstraintSet()sofa::core::behavior::BaseConstraintSetprotected; BaseInteractionConstraint()sofa::core::behavior::BaseInteractionConstraintinlineprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildConstraintMatrix(const core::ConstraintParams *cParams, DataMatrixDeriv &c1, DataMatrixDeriv &c2, unsigned int &cIndex, const DataVecCoord &x1, const DataVecCoord &x2) overridesofa::component::constraint::lagrangian::model::SlidingLagrangianConstraint< Data",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_sliding_lagrangian_constraint-members.html:816,log,logging,816,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_sliding_lagrangian_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_sliding_lagrangian_constraint-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseConstraint()sofa::core::behavior::BaseConstraintinlineprotected; BaseConstraintSet()sofa::core::behavior::BaseConstraintSetprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildConstraintMatrix(const ConstraintParams *cParams, MultiMatrixDerivId cId, unsigned int &cIndex) overridesofa::core::behavior::Constraint< DataTypes >virtual; buildConstraintMatrix(const ConstraintParams *cParams, DataMatrixDeriv &c, unsigned int &cIndex, const DataVecCoord &x)=0sofa::core::behavior::Constraint< DataTypes >pure virtual; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *&obj, objectmodel::BaseContext",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_constraint-members.html:730,log,logging,730,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_constraint-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseConstraint()sofa::core::behavior::BaseConstraintinlineprotected; BaseConstraintSet()sofa::core::behavior::BaseConstraintSetprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildConstraintMatrix(const ConstraintParams *cParams, MultiMatrixDerivId cId, unsigned int &cIndex)=0sofa::core::behavior::BaseConstraintSetpure virtual; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, st",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_constraint-members.html:712,log,logging,712,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_constraint-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseConstraint()sofa::core::behavior::BaseConstraintinlineprotected; BaseConstraintSet()sofa::core::behavior::BaseConstraintSetprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildConstraintMatrix(const core::ConstraintParams *cParams, DataMatrixDeriv &c_d, unsigned int &cIndex, const DataVecCoord &x) overridesofa::component::constraint::lagrangian::model::FixedLagrangianConstraint< DataTypes >virtual; sofa::core::behavior::Constraint::buildConstraintMatrix(const ConstraintParams *cParams, MultiMatrixDerivId cId, unsigned int ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_fixed_lagrangian_constraint-members.html:812,log,logging,812,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_fixed_lagrangian_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_fixed_lagrangian_constraint-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseConstraint()sofa::core::behavior::BaseConstraintinlineprotected; BaseConstraintSet()sofa::core::behavior::BaseConstraintSetprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildConstraintMatrix(const core::ConstraintParams *cParams, DataMatrixDeriv &c_d, unsigned int &cIndex, const DataVecCoord &x) overridesofa::component::constraint::lagrangian::model::StopperLagrangianConstraint< DataTypes >virtual; sofa::core::behavior::Constraint::buildConstraintMatrix(const ConstraintParams *cParams, MultiMatrixDerivId cId, unsigne",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_stopper_lagrangian_constraint-members.html:816,log,logging,816,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_stopper_lagrangian_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_stopper_lagrangian_constraint-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseConstraint()sofa::core::behavior::BaseConstraintinlineprotected; BaseConstraintSet()sofa::core::behavior::BaseConstraintSetprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildConstraintMatrix(const sofa::core::ConstraintParams *cParams, DataMatrixDeriv &c, unsigned int &cIndex, const DataVecCoord &x) overridesofa::component::constraint::lagrangian::model::UniformLagrangianConstraint< DataTypes >virtual; sofa::core::behavior::Constraint::buildConstraintMatrix(const ConstraintParams *cParams, MultiMatrixDerivId cId, uns",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_uniform_lagrangian_constraint-members.html:816,log,logging,816,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_uniform_lagrangian_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1lagrangian_1_1model_1_1_uniform_lagrangian_constraint-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseConstraintSet()sofa::core::behavior::BaseConstraintSetprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildConstraintMatrix(const ConstraintParams *cParams, MultiMatrixDerivId cId, unsigned int &cIndex)=0sofa::core::behavior::BaseConstraintSetpure virtual; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotecte",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_constraint_set-members.html:718,log,logging,718,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_constraint_set-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_constraint_set-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseIntersector()sofa::core::collision::BaseIntersectorinline; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; beginBroadPhase()sofa::core::collision::Intersectioninlinevirtual; beginIntersection(sofa::core::CollisionModel *, sofa::core::CollisionModel *, OutputVector *)sofa::core::collision::BaseIntersectorinline; beginNarrowPhase()sofa::core::collision::Intersectioninlinevirtual; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContex",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_discrete_intersection-members.html:786,log,logging,786,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_discrete_intersection-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_discrete_intersection-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseLoader()sofa::core::loader::BaseLoaderprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad() overridesofa::core::loader::SceneLoadervirtual; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMe",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html:702,log,logging,702,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_scene_loader-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseLoader()sofa::core::loader::BaseLoaderprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad()sofa::core::loader::BaseLoadervirtual; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_image_loader-members.html:702,log,logging,702,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_image_loader-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_image_loader-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseLoader()sofa::core::loader::BaseLoaderprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad()sofa::core::loader::BaseLoadervirtual; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() con",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_base_loader-members.html:700,log,logging,700,api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_base_loader-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1loader_1_1_base_loader-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseMaterial()sofa::component::solidmechanics::fem::hyperelastic::material::BaseMaterialinline; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_base_material-members.html:788,log,logging,788,api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_base_material-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1solidmechanics_1_1fem_1_1hyperelastic_1_1material_1_1_base_material-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseMatrixProjectionMethod(const PairMechanicalStates &states)sofa::component::linearsystem::BaseMatrixProjectionMethod< TMatrix >explicitprotected; BaseMatrixProjectionMethod()=defaultsofa::component::linearsystem::BaseMatrixProjectionMethod< TMatrix >protected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; change",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_base_matrix_projection_method-members.html:776,log,logging,776,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_base_matrix_projection_method-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_base_matrix_projection_method-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseNode classsofa::core::objectmodel::BaseObjectfriend; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html:710,log,logging,710,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_base_object-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseRayContact(CollisionModel1 *model1, core::collision::Intersection *instersectionMethod)sofa::component::collision::response::contact::BaseRayContactprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTra",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_ray_contact-members.html:768,log,logging,768,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_ray_contact-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_ray_contact-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseRayContact(CollisionModel1 *model1, core::collision::Intersection *instersectionMethod)sofa::component::collision::response::contact::BaseRayContactprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_base_ray_contact-members.html:762,log,logging,762,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_base_ray_contact-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_base_ray_contact-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseTopologyObject()sofa::core::topology::BaseTopologyObjectinlineprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constso",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_topology_object-members.html:720,log,logging,720,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_topology_object-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_base_topology_object-members.html,2,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; BaseVTKDataIO()sofa::component::io::mesh::basevtkreader::BaseVTKReader::BaseVTKDataIOinline; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; clea",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1basevtkreader_1_1_base_v_t_k_reader_1_1_v_t_k_data_i_o-members.html:782,log,logging,782,api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1basevtkreader_1_1_base_v_t_k_reader_1_1_v_t_k_data_i_o-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1basevtkreader_1_1_base_v_t_k_reader_1_1_v_t_k_data_i_o-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; BaseVTKDataIO()sofa::component::io::mesh::basevtkreader::BaseVTKReader::BaseVTKDataIOinline; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanu",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1basevtkreader_1_1_base_v_t_k_reader_1_1_base_v_t_k_data_i_o-members.html:780,log,logging,780,api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1basevtkreader_1_1_base_v_t_k_reader_1_1_base_v_t_k_data_i_o-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1basevtkreader_1_1_base_v_t_k_reader_1_1_base_v_t_k_data_i_o-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; BaseVTKReader()sofa::component::io::mesh::basevtkreader::BaseVTKReader; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clea",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1basevtkreader_1_1_base_v_t_k_reader-members.html:750,log,logging,750,api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1basevtkreader_1_1_base_v_t_k_reader-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1basevtkreader_1_1_base_v_t_k_reader-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; BaseVTKReader()sofa::component::io::mesh::basevtkreader::BaseVTKReader; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsof",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_legacy_v_t_k_reader-members.html:724,log,logging,724,api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_legacy_v_t_k_reader-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_legacy_v_t_k_reader-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; BaseVTKReader()sofa::component::io::mesh::basevtkreader::BaseVTKReader; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::cor",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_x_m_l_v_t_k_reader-members.html:718,log,logging,718,api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_x_m_l_v_t_k_reader-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_x_m_l_v_t_k_reader-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; BruteForceDetection()=defaultsofa::component::collision::detection::algorithm::BruteForceDetectionprotected; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectpro",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_detection-members.html:778,log,logging,778,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_detection-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_brute_force_detection-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; beginBroadPhase()sofa::core::collision::Intersectioninlinevirtual; beginNarrowPhase()sofa::core::collision::Intersectioninlinevirtual; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_intersection-members.html:710,log,logging,710,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_intersection-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_intersection-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; broadPhaseDetectionsofa::core::collision::Pipelineprotected; broadPhaseDetectionssofa::core::collision::Pipelineprotected; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; checkDataValues()sofa::component::collisio",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_collision_pipeline-members.html:774,log,logging,774,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_collision_pipeline-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_collision_pipeline-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; broadPhaseDetectionsofa::core::collision::Pipelineprotected; broadPhaseDetectionssofa::core::collision::Pipelineprotected; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline-members.html:702,log,logging,702,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_pipeline-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; broadPhaseDetectionsofa::core::collision::Pipelineprotected; broadPhaseDetectionssofa::core::collision::Pipelineprotected; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; cle",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html:700,log,logging,700,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buttonsofa::component::setting::MouseButtonSetting; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsof",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_fix_picked_particle_button_setting-members.html:744,log,logging,744,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_fix_picked_particle_button_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_fix_picked_particle_button_setting-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buttonsofa::component::setting::MouseButtonSetting; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_constraint_attach_button_setting-members.html:742,log,logging,742,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_constraint_attach_button_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_constraint_attach_button_setting-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buttonsofa::component::setting::MouseButtonSetting; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_start_navigation_button_setting-members.html:740,log,logging,740,api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_start_navigation_button_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1gui_1_1component_1_1_start_navigation_button_setting-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buttonsofa::component::setting::MouseButtonSetting; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectm",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_mouse_button_setting-members.html:728,log,logging,728,api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_mouse_button_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_mouse_button_setting-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit() overridesofa::component::playback::ReadStatevirtual; canCreate(T *&obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg)sofa::component::playback::CompareStateinlinestatic; sofa::component::playback::ReadState::canCreate(T *obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg)sofa::component::playback::ReadStateinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_compare_state-members.html:718,log,logging,718,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_compare_state-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_compare_state-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit() overridesofa::component::playback::ReadStatevirtual; canCreate(T *obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg)sofa::component::playback::ReadStateinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_state-members.html:712,log,logging,712,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_state-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_state-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; cameraModesofa::component::setting::ViewerSetting; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base;",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_viewer_setting-members.html:718,log,logging,718,api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_viewer_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_viewer_setting-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *&obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg)sofa::component::collision::response::contact::ContactListenerinlinestatic; sofa::core::objectmodel::BaseObject::canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)so",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_contact_listener-members.html:764,log,logging,764,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_contact_listener-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_contact_listener-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *&obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg)sofa::component::playback::CompareTopologyinlinestatic; sofa::component::playback::ReadTopology::canCreate(T *obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg)sofa::component::playback::ReadTopologyinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sof",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_compare_topology-members.html:724,log,logging,724,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_compare_topology-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_compare_topology-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *&obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg)sofa::component::playback::WriteStateinlinestatic; sofa::core::objectmodel::BaseObject::canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_state-members.html:714,log,logging,714,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_state-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_state-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *&obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg)sofa::component::playback::WriteTopologyinlinestatic; sofa::core::objectmodel::BaseObject::canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_topology-members.html:720,log,logging,720,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_topology-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_write_topology-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *&obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg)sofa::component::topology::utility::TopologicalChangeProcessorinlinestatic; sofa::core::objectmodel::BaseObject::canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)so",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topological_change_processor-members.html:764,log,logging,764,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topological_change_processor-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topological_change_processor-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *&obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg)sofa::core::topology::TopologicalMappinginlinestatic; sofa::core::objectmodel::BaseObject::canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; CenterPointTopologicalMapping()sofa::component::topology::mapping::CenterPointTopologicalMappingprotected; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::object",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_center_point_topological_mapping-members.html:770,log,logging,770,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_center_point_topological_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_center_point_topological_mapping-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *&obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg)sofa::core::topology::TopologicalMappinginlinestatic; sofa::core::objectmodel::BaseObject::canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)so",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_tetra_topological_mapping-members.html:786,log,logging,786,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_tetra_topological_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_tetra_topological_mapping-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *&obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg)sofa::core::topology::TopologicalMappinginlinestatic; sofa::core::objectmodel::BaseObject::canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_hexa_topological_mapping-members.html:784,log,logging,784,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_hexa_topological_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1linear_1_1_simple_tesselated_hexa_topological_mapping-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *&obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg)sofa::core::topology::TopologicalMappinginlinestatic; sofa::core::objectmodel::BaseObject::canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::ob",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_quad2_triangle_topological_mapping-members.html:774,log,logging,774,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_quad2_triangle_topological_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_quad2_triangle_topological_mapping-members.html,2,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *&obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg)sofa::core::topology::TopologicalMappinginlinestatic; sofa::core::objectmodel::BaseObject::canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_hexa2_tetra_topological_mapping-members.html:768,log,logging,768,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_hexa2_tetra_topological_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_hexa2_tetra_topological_mapping-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *&obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg)sofa::core::topology::TopologicalMappinginlinestatic; sofa::core::objectmodel::BaseObject::canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmode",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_edge2_quad_topological_mapping-members.html:766,log,logging,766,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_edge2_quad_topological_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_edge2_quad_topological_mapping-members.html,2,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *&obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg)sofa::core::topology::TopologicalMappinginlinestatic; sofa::core::objectmodel::BaseObject::canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_identity_topological_mapping-members.html:764,log,logging,764,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_identity_topological_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_identity_topological_mapping-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *&obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg)sofa::core::topology::TopologicalMappinginlinestatic; sofa::core::objectmodel::BaseObject::canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::Bas",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_subset_topological_mapping-members.html:760,log,logging,760,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_subset_topological_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1mapping_1_1_subset_topological_mapping-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *&obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg)sofa::core::topology::TopologicalMappinginlinestatic; sofa::core::objectmodel::BaseObject::canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; checkTopologies()sofa:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping-members.html:720,log,logging,720,api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1topology_1_1_topological_mapping-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; CentralDifferenceSolver()sofa::component::odesolver::forward::CentralDifferenceSolverprotected; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::ob",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_central_difference_solver-members.html:760,log,logging,760,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_central_difference_solver-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_central_difference_solver-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeInstance(Instance inst) overridesofa::component::collision::response::contact::CollisionResponseprotectedvirtual; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_rule_based_contact_manager-members.html:780,log,logging,780,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_rule_based_contact_manager-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_rule_based_contact_manager-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeInstance(Instance inst) overridesofa::component::collision::response::contact::CollisionResponseprotectedvirtual; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectpr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_collision_response-members.html:768,log,logging,768,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_collision_response-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1response_1_1contact_1_1_collision_response-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeInstance(Instance inst) overridesofa::core::collision::CollisionGroupManagerinlineprotectedvirtual; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectv",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_group_manager-members.html:728,log,logging,728,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_group_manager-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_group_manager-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeInstance(Instance inst) overridesofa::core::collision::ContactManagerinlineprotectedvirtual; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMe",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_contact_manager-members.html:714,log,logging,714,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_contact_manager-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_contact_manager-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeInstance(Instance inst) overridesofa::core::collision::Detectioninlineprotectedvirtual; changeInstanceBP(Instance)sofa::core::collision::Detectioninlineprotectedvirtual; changeInstanceNP(Instance)sofa::core::collision::Detectioninlineprotectedvirtual; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_detection-members.html:704,log,logging,704,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_detection-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_detection-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeInstance(Instance)=0sofa::core::collision::CollisionAlgorithmprotectedpure virtual; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMes",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_algorithm-members.html:722,log,logging,722,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_algorithm-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_collision_algorithm-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; checkEdgeContainer()sofa::component::topology::utility::TopologyChecker; checkEdgeTopology()sofa::component::topology::utility::TopologyChecker; checkEdgeToVertexCrossContainer()sofa::component::to",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topology_checker-members.html:742,log,logging,742,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topology_checker-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topology_checker-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup() overridesofa::component::odesolver::backward::EulerImplicitSolvervirtual; clearLoggedMessages() constsofa::core::ob",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_euler_implicit_solver-members.html:754,log,logging,754,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_euler_implicit_solver-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_euler_implicit_solver-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clea",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1ordering_1_1_base_eigen_ordering_method-members.html:822,log,logging,822,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1ordering_1_1_base_eigen_ordering_method-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1ordering_1_1_base_eigen_ordering_method-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1makedataaliascomponent_1_1_make_data_alias_component-members.html:794,log,logging,794,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1makedataaliascomponent_1_1_make_data_alias_component-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1makedataaliascomponent_1_1_make_data_alias_component-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::obj",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topology_bounding_trasher-members.html:784,log,logging,784,api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topology_bounding_trasher-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1topology_1_1utility_1_1_topology_bounding_trasher-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmod",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1makealiascomponent_1_1_make_alias_component-members.html:778,log,logging,778,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1makealiascomponent_1_1_make_alias_component-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1makealiascomponent_1_1_make_alias_component-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_mechanical_state_force_feedback-members.html:776,log,logging,776,api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_mechanical_state_force_feedback-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_mechanical_state_force_feedback-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_ray_trace_detection-members.html:774,log,logging,774,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_ray_trace_detection-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_ray_trace_detection-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver-members.html:770,log,logging,770,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_variational_symplectic_solver-members.html,2,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; comp",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1ordering_1_1_natural_ordering_method-members.html:764,log,logging,764,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1ordering_1_1_natural_ordering_method-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1ordering_1_1_natural_ordering_method-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; comput",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1ordering_1_1_c_o_l_a_m_d_ordering_method-members.html:762,log,logging,762,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1ordering_1_1_c_o_l_a_m_d_ordering_method-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1ordering_1_1_c_o_l_a_m_d_ordering_method-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p-members.html:758,log,logging,758,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1algorithm_1_1_direct_s_a_p-members.html,3,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_null_force_feedback_t-members.html:756,log,logging,756,api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_null_force_feedback_t-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_null_force_feedback_t-members.html,3,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_damp_velocity_solver-members.html:750,log,logging,750,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_damp_velocity_solver-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_damp_velocity_solver-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const co",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_runge_kutta2_solver-members.html:748,log,logging,748,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_runge_kutta2_solver-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1forward_1_1_runge_kutta2_solver-members.html,4,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_pause_animation_on_event-members.html:744,log,logging,744,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_pause_animation_on_event-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_pause_animation_on_event-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::Exec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_static_solver-members.html:740,log,logging,740,api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_static_solver-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1odesolver_1_1backward_1_1_static_solver-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecPa",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_rotation_finder-members.html:738,log,logging,738,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_rotation_finder-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_rotation_finder-members.html,2,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecPara",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_sofa_default_path_setting-members.html:736,log,logging,736,api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_sofa_default_path_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_sofa_default_path_setting-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, ",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_pause_animation-members.html:730,log,logging,730,api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_pause_animation-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1sceneutility_1_1_pause_animation-members.html,3,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_null_force_feedback-members.html:726,log,logging,726,api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_null_force_feedback-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_null_force_feedback-members.html,3,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=f",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver_accessor-members.html:724,log,logging,724,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver_accessor-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_linear_solver_accessor-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_ordering_method-members.html:720,log,logging,720,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_ordering_method-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_ordering_method-members.html,2,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)s",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_force_feedback-members.html:718,log,logging,718,api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_force_feedback-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1haptics_1_1_force_feedback-members.html,2,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sof",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_stats_setting-members.html:716,log,logging,716,api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_stats_setting-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1setting_1_1_stats_setting-members.html,2,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::c",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_controller-members.html:712,log,logging,712,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_controller-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_controller-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::o",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_shader_element-members.html:706,log,logging,706,api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_shader_element-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_shader_element-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::obj",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html:704,log,logging,704,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objec",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_ode_solver-members.html:702,log,logging,702,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_ode_solver-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_ode_solver-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectm",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_contact-members.html:700,log,logging,700,api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_contact-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1collision_1_1_contact-members.html,2,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::Ba",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_shader-members.html:692,log,logging,692,api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_shader-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1visual_1_1_shader-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *params, bool onlyVisib",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_state_accessor-members.html:710,log,logging,710,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_state_accessor-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_state_accessor-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *obj, core::objectmodel::BaseContext *context, core::objectmodel::BaseObjectDescription *arg)sofa::component::playback::ReadTopologyinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::B",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_topology-members.html:718,log,logging,718,api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_topology-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1playback_1_1_read_topology-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; alarmDistancesofa::component::collision::detection::intersection::BaseProximityIntersection; Base()sofa::core::objectmodel::Baseprotected; BaseIntersector()sofa::core::collision::BaseIntersectorinline; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseProximityIntersection()sofa::component::collision::detection::intersection::BaseProximityIntersectionprotected; BaseType typedefsofa::core::objectmodel::Base; beginBroadPhase()sofa::core::collision::Intersectioninlinevirtual; beginIntersection(sofa::core::CollisionModel *, sofa::core::CollisionModel *, OutputVector *)sofa::core::collision::BaseIntersectorinline; beginNarrowPhase()sofa::core::col",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_base_proximity_intersection-members.html:796,log,logging,796,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_base_proximity_intersection-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_base_proximity_intersection-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; alarmDistancesofa::component::collision::detection::intersection::BaseProximityIntersection; Base()sofa::core::objectmodel::Baseprotected; BaseIntersector()sofa::core::collision::BaseIntersectorinline; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseProximityIntersection()sofa::component::collision::detection::intersection::BaseProximityIntersectionprotected; BaseType typedefsofa::core::objectmodel::Base; beginBroadPhase()sofa::core::collision::Intersectioninlinevirtual; beginIntersection(sofa::core::CollisionModel *, sofa::core::CollisionModel *, OutputVector *)sofa::core::collision::BaseIntersectorinline; beginNarrowPhase()sofa::core::colli",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_min_proximity_intersection-members.html:794,log,logging,794,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_min_proximity_intersection-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_min_proximity_intersection-members.html,2,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; alarmDistancesofa::component::collision::detection::intersection::BaseProximityIntersection; angleConesofa::component::collision::detection::intersection::LocalMinDistance; Base()sofa::core::objectmodel::Baseprotected; BaseIntersector()sofa::core::collision::BaseIntersectorinline; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseProximityIntersection()sofa::component::collision::detection::intersection::BaseProximityIntersectionprotected; BaseType typedefsofa::core::objectmodel::Base; beginBroadPhase()sofa::core::collision::Intersectioninlinevirtual; beginIntersection(sofa::core::CollisionModel *, sofa::core::CollisionModel *, OutputVector *)sofa::core::colli",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_local_min_distance-members.html:778,log,logging,778,api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_local_min_distance-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1collision_1_1detection_1_1intersection_1_1_local_min_distance-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; allocateSystem() overridesofa::component::linearsystem::CompositeLinearSystem< TMatrix, TVector >protectedvirtual; assembleSystem(const core::MechanicalParams *) overridesofa::component::linearsystem::CompositeLinearSystem< TMatrix, TVector >protectedvirtual; associateLocalMatrixToComponents(const core::MechanicalParams *)sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >inlineprotectedvirtual; Base()sofa::core::objectmodel::Baseprotected; BaseMatrixLinearSystem()sofa::core::behavior::BaseMatrixLinearSystemprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildSystemMatrix(cons",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_composite_linear_system-members.html:784,log,logging,784,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_composite_linear_system-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_composite_linear_system-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; allocateSystem()sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >protectedvirtual; applyProjectiveConstraints(const core::MechanicalParams *mparams) overridesofa::component::linearsystem::ConstantSparsityPatternSystem< TMatrix, TVector >virtual; assembleMappedMatrices(const core::MechanicalParams *mparams)sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >protectedvirtual; assemblePrecomputedMappedMassMatrix(const core::MechanicalParams *mparams, linearalgebra::BaseMatrix *destination)sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >protected; assembleSystem(const core::MechanicalParams *",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_constant_sparsity_pattern_system-members.html:800,log,logging,800,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_constant_sparsity_pattern_system-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_constant_sparsity_pattern_system-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; allocateSystem()sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >protectedvirtual; applyProjectiveConstraints(const core::MechanicalParams *mparams)sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >protectedvirtual; assembleMappedMatrices(const core::MechanicalParams *mparams)sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >protectedvirtual; assemblePrecomputedMappedMassMatrix(const core::MechanicalParams *mparams, linearalgebra::BaseMatrix *destination)sofa::component::linearsystem::MatrixLinearSystem< TMatrix, TVector >protected; assembleSystem(const core::MechanicalParams *mparams) overridesofa::component:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_linear_system-members.html:778,log,logging,778,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_linear_system-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_linear_system-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; allocateSystem()sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >protectedvirtual; assembleSystem(const core::MechanicalParams *) overridesofa::component::linearsystem::MatrixFreeSystem< TMatrix, TVector >inlinevirtual; associateLocalMatrixToComponents(const core::MechanicalParams *) overridesofa::component::linearsystem::MatrixFreeSystem< TMatrix, TVector >inlinevirtual; Base()sofa::core::objectmodel::Baseprotected; BaseMatrixLinearSystem()sofa::core::behavior::BaseMatrixLinearSystemprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildSystemMatrix(const core::MechanicalParams *mparam",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_free_system-members.html:774,log,logging,774,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_free_system-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_matrix_free_system-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; allocateSystem()sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >protectedvirtual; assembleSystem(const core::MechanicalParams *)sofa::core::behavior::BaseMatrixLinearSystemprotectedvirtual; associateLocalMatrixToComponents(const core::MechanicalParams *)sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >inlineprotectedvirtual; Base()sofa::core::objectmodel::Baseprotected; BaseMatrixLinearSystem()sofa::core::behavior::BaseMatrixLinearSystemprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildSystemMatrix(const core::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_precomputed_matrix_system-members.html:820,log,logging,820,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_precomputed_matrix_system-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_precomputed_matrix_system-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; allocateSystem()sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >protectedvirtual; assembleSystem(const core::MechanicalParams *)sofa::core::behavior::BaseMatrixLinearSystemprotectedvirtual; associateLocalMatrixToComponents(const core::MechanicalParams *)sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >inlineprotectedvirtual; Base()sofa::core::objectmodel::Baseprotected; BaseMatrixLinearSystem()sofa::core::behavior::BaseMatrixLinearSystemprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildSystemMatrix(const core::Mechan",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_rotation_matrix_system-members.html:814,log,logging,814,api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_rotation_matrix_system-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsolver_1_1preconditioner_1_1_rotation_matrix_system-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; allocateSystem()sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >protectedvirtual; assembleSystem(const core::MechanicalParams *)sofa::core::behavior::BaseMatrixLinearSystemprotectedvirtual; associateLocalMatrixToComponents(const core::MechanicalParams *)sofa::component::linearsystem::TypedMatrixLinearSystem< TMatrix, TVector >inlineprotectedvirtual; Base()sofa::core::objectmodel::Baseprotected; BaseMatrixLinearSystem()sofa::core::behavior::BaseMatrixLinearSystemprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildSystemMatrix(const core::MechanicalParams *mparams)sofa::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_typed_matrix_linear_system-members.html:788,log,logging,788,api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_typed_matrix_linear_system-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1linearsystem_1_1_typed_matrix_linear_system-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; apply() overridesofa::component::mechanicalload::Gravityvirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::ob",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_gravity-members.html:720,log,logging,720,api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_gravity-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mechanicalload_1_1_gravity-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; apply()=0sofa::core::objectmodel::ContextObjectpure virtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmode",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html:716,log,logging,716,api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1objectmodel_1_1_context_object-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; apply(const MechanicalParams *mparams, MultiVecCoordId outPos, ConstMultiVecCoordId inPos) overridesofa::core::Mapping< TIn, TOut >virtual; apply(const MechanicalParams *mparams, OutDataVecCoord &out, const InDataVecCoord &in)=0sofa::core::Mapping< TIn, TOut >pure virtual; applyDJT(const MechanicalParams *, MultiVecDerivId, ConstMultiVecDerivId) overridesofa::core::Mapping< TIn, TOut >virtual; applyJ(const MechanicalParams *mparams, MultiVecDerivId outVel, ConstMultiVecDerivId inVel) overridesofa::core::Mapping< TIn, TOut >virtual; applyJ(const MechanicalParams *mparams, OutDataVecDeriv &out, const InDataVecDeriv &in)=0sofa::core::Mapping< TIn, TOut >pure virtual; applyJT(const MechanicalParams *mparams, MultiVecDerivId inForce, ConstMultiVecDe",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mapping-members.html:704,log,logging,704,api/master/sofa/html/classsofa_1_1core_1_1_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_mapping-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; apply(const MechanicalParams *mparams, MultiVecCoordId outPos, ConstMultiVecCoordId inPos) overridesofa::core::Mapping< TIn, TOut >virtual; apply(const MechanicalParams *mparams, OutDataVecCoord &out, const InDataVecCoord &in)=0sofa::core::Mapping< TIn, TOut >pure virtual; applyDJT(const core::MechanicalParams *mparams, core::MultiVecDerivId parentForceId, core::ConstMultiVecDerivId childForceId) finalsofa::component::mapping::nonlinear::BaseNonLinearMapping< TIn, TOut, HasStabilizedGeometricStiffness >virtual; applyJ(const core::MechanicalParams *mparams, DataVecDeriv_t< Out > &out, const DataVecDeriv_t<",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_non_linear_mapping-members.html:846,log,logging,846,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_non_linear_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_base_non_linear_mapping-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; apply(const MechanicalParams *mparams=mechanicalparams::defaultInstance(), MultiVecCoordId outPos=VecCoordId::position(), ConstMultiVecCoordId inPos=ConstVecCoordId::position())=0sofa::core::BaseMappingpure virtual; applyDJT(const MechanicalParams *mparams, MultiVecDerivId inForce, ConstMultiVecDerivId outForce)=0sofa::core::BaseMappingpure virtual; applyJ(const MechanicalParams *mparams=mechanicalparams::defaultInstance(), MultiVecDerivId outVel=VecDerivId::velocity(), ConstMultiVecDerivId inVel=ConstVecDerivId::velocity())=0sofa::core::BaseMappingpure virtual; applyJT(const MechanicalParams *mparams, MultiVecDerivId inForce, ConstMultiVecDerivId outForce)=0sofa::core::BaseMappingpure virtual; applyJT(const ConstraintParams *mparams, MultiMatrixDerivId inConst,",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_base_mapping-members.html:686,log,logging,686,api/master/sofa/html/classsofa_1_1core_1_1_base_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_base_mapping-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; apply(const core::MechanicalParams *mparams, DataVecCoord_t< Out > &out, const DataVecCoord_t< In > &in) overridesofa::component::mapping::nonlinear::AreaMapping< TIn, TOut >; BaseNonLinearMapping< TIn, TOut, true >::apply(const MechanicalParams *mparams, MultiVecCoordId outPos, ConstMultiVecCoordId inPos) overridesofa::core::Mapping< TIn, TOut >virtual; BaseNonLinearMapping< TIn, TOut, true >::apply(const MechanicalParams *mparams, OutDataVecCoord &out, const InDataVecCoord &in)=0sofa::core::Mapping< TIn, TOut >pure virtual; applyDJT(const core::MechanicalParams *mparams, core::MultiVecDerivId parentForceId, core::ConstMultiVecDerivId childForceId) finalsofa::component::mapping::nonline",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_area_mapping-members.html:762,log,logging,762,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_area_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_area_mapping-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; apply(const core::MechanicalParams *mparams, DataVecCoord_t< Out > &out, const DataVecCoord_t< In > &in) overridesofa::component::mapping::nonlinear::DistanceFromTargetMapping< TIn, TOut >; BaseNonLinearMapping< TIn, TOut, true >::apply(const MechanicalParams *mparams, MultiVecCoordId outPos, ConstMultiVecCoordId inPos) overridesofa::core::Mapping< TIn, TOut >virtual; BaseNonLinearMapping< TIn, TOut, true >::apply(const MechanicalParams *mparams, OutDataVecCoord &out, const InDataVecCoord &in)=0sofa::core::Mapping< TIn, TOut >pure virtual; applyDJT(const core::MechanicalParams *mparams, core::MultiVecDerivId parentForceId, core::ConstMultiVecDerivId childForce",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_distance_from_target_mapping-members.html:790,log,logging,790,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_distance_from_target_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_distance_from_target_mapping-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; apply(const core::MechanicalParams *mparams, DataVecCoord_t< Out > &out, const DataVecCoord_t< In > &in) overridesofa::component::mapping::nonlinear::DistanceMapping< TIn, TOut >; BaseNonLinearMapping< TIn, TOut, true >::apply(const MechanicalParams *mparams, MultiVecCoordId outPos, ConstMultiVecCoordId inPos) overridesofa::core::Mapping< TIn, TOut >virtual; BaseNonLinearMapping< TIn, TOut, true >::apply(const MechanicalParams *mparams, OutDataVecCoord &out, const InDataVecCoord &in)=0sofa::core::Mapping< TIn, TOut >pure virtual; applyDJT(const core::MechanicalParams *mparams, core::MultiVecDerivId parentForceId, core::ConstMultiVecDerivId childForceId) finalsofa::component::mapp",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_distance_mapping-members.html:770,log,logging,770,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_distance_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_distance_mapping-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; apply(const core::MechanicalParams *mparams, DataVecCoord_t< Out > &out, const DataVecCoord_t< In > &in) overridesofa::component::mapping::nonlinear::SquareDistanceMapping< TIn, TOut >; BaseNonLinearMapping< TIn, TOut, true >::apply(const MechanicalParams *mparams, MultiVecCoordId outPos, ConstMultiVecCoordId inPos) overridesofa::core::Mapping< TIn, TOut >virtual; BaseNonLinearMapping< TIn, TOut, true >::apply(const MechanicalParams *mparams, OutDataVecCoord &out, const InDataVecCoord &in)=0sofa::core::Mapping< TIn, TOut >pure virtual; applyDJT(const core::MechanicalParams *mparams, core::MultiVecDerivId parentForceId, core::ConstMultiVecDerivId childForceId) finalsof",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_square_distance_mapping-members.html:782,log,logging,782,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_square_distance_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_square_distance_mapping-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; apply(const core::MechanicalParams *mparams, DataVecCoord_t< Out > &out, const DataVecCoord_t< In > &in) overridesofa::component::mapping::nonlinear::SquareMapping< TIn, TOut >; BaseNonLinearMapping< TIn, TOut, false >::apply(const MechanicalParams *mparams, MultiVecCoordId outPos, ConstMultiVecCoordId inPos) overridesofa::core::Mapping< TIn, TOut >virtual; BaseNonLinearMapping< TIn, TOut, false >::apply(const MechanicalParams *mparams, OutDataVecCoord &out, const InDataVecCoord &in)=0sofa::core::Mapping< TIn, TOut >pure virtual; applyDJT(const core::MechanicalParams *mparams, core::MultiVecDerivId parentForceId, core::ConstMultiVecDerivId childForceId) finalsofa::component::mapping:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_square_mapping-members.html:766,log,logging,766,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_square_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_square_mapping-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; apply(const core::MechanicalParams *mparams, DataVecCoord_t< Out > &out, const DataVecCoord_t< In > &in) overridesofa::component::mapping::nonlinear::VolumeMapping< TIn, TOut >; BaseNonLinearMapping< TIn, TOut, true >::apply(const MechanicalParams *mparams, MultiVecCoordId outPos, ConstMultiVecCoordId inPos) overridesofa::core::Mapping< TIn, TOut >virtual; BaseNonLinearMapping< TIn, TOut, true >::apply(const MechanicalParams *mparams, OutDataVecCoord &out, const InDataVecCoord &in)=0sofa::core::Mapping< TIn, TOut >pure virtual; applyDJT(const core::MechanicalParams *mparams, core::MultiVecDerivId parentForceId, core::ConstMultiVecDerivId childForceId) finalsofa::component::mapping::n",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_volume_mapping-members.html:766,log,logging,766,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_volume_mapping-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_volume_mapping-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyConstraint(const MechanicalParams *, const behavior::MultiMatrixAccessor *)sofa::core::behavior::BaseProjectiveConstraintSetinlinevirtual; applyConstraint(const MechanicalParams *, linearalgebra::BaseVector *, const behavior::MultiMatrixAccessor *)sofa::core::behavior::BaseProjectiveConstraintSetinlinevirtual; applyConstraint(sofa::core::behavior::ZeroDirichletCondition *)sofa::core::behavior::BaseProjectiveConstraintSetvirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseProjectiveConstraintSet()sofa::core::behavior::BaseProjectiveConstraintSetinlineprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_projective_constraint_set-members.html:760,log,logging,760,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_projective_constraint_set-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_interaction_projective_constraint_set-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyConstraint(const MechanicalParams *, const behavior::MultiMatrixAccessor *)sofa::core::behavior::BaseProjectiveConstraintSetinlinevirtual; applyConstraint(const MechanicalParams *, linearalgebra::BaseVector *, const behavior::MultiMatrixAccessor *)sofa::core::behavior::BaseProjectiveConstraintSetinlinevirtual; applyConstraint(sofa::core::behavior::ZeroDirichletCondition *)sofa::core::behavior::BaseProjectiveConstraintSetvirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseProjectiveConstraintSet()sofa::core::behavior::BaseProjectiveConstraintSetinlineprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::Ba",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_projective_constraint_set-members.html:738,log,logging,738,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_projective_constraint_set-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_projective_constraint_set-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyConstraint(const MechanicalParams *, const sofa::core::behavior::MultiMatrixAccessor *) overridesofa::core::behavior::PairInteractionProjectiveConstraintSet< TDataTypes >inlinevirtual; applyConstraint(const MechanicalParams *, linearalgebra::BaseVector *, const sofa::core::behavior::MultiMatrixAccessor *) overridesofa::core::behavior::PairInteractionProjectiveConstraintSet< TDataTypes >inlinevirtual; sofa::core::behavior::BaseInteractionProjectiveConstraintSet::applyConstraint(sofa::core::behavior::ZeroDirichletCondition *)sofa::core::behavior::BaseProjectiveConstraintSetvirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_projective_constraint_set-members.html:788,log,logging,788,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_projective_constraint_set-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_pair_interaction_projective_constraint_set-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyConstraint(const MechanicalParams *, const sofa::core::behavior::MultiMatrixAccessor *) overridesofa::core::behavior::ProjectiveConstraintSet< DataTypes >inlinevirtual; applyConstraint(const MechanicalParams *, linearalgebra::BaseVector *, const sofa::core::behavior::MultiMatrixAccessor *) overridesofa::core::behavior::ProjectiveConstraintSet< DataTypes >inlinevirtual; sofa::core::behavior::BaseProjectiveConstraintSet::applyConstraint(sofa::core::behavior::ZeroDirichletCondition *)sofa::core::behavior::BaseProjectiveConstraintSetvirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmod",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_position_based_dynamics_projective_constraint-members.html:830,log,logging,830,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_position_based_dynamics_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_position_based_dynamics_projective_constraint-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyConstraint(const MechanicalParams *, const sofa::core::behavior::MultiMatrixAccessor *) overridesofa::core::behavior::ProjectiveConstraintSet< DataTypes >inlinevirtual; applyConstraint(const MechanicalParams *, linearalgebra::BaseVector *, const sofa::core::behavior::MultiMatrixAccessor *) overridesofa::core::behavior::ProjectiveConstraintSet< DataTypes >inlinevirtual; sofa::core::behavior::BaseProjectiveConstraintSet::applyConstraint(sofa::core::behavior::ZeroDirichletCondition *)sofa::core::behavior::BaseProjectiveConstraintSetvirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectpr",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_rotation_projective_constraint-members.html:814,log,logging,814,api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_rotation_projective_constraint-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1constraint_1_1projective_1_1_fixed_rotation_projective_constraint-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyConstraint(const MechanicalParams *, const sofa::core::behavior::MultiMatrixAccessor *) overridesofa::core::behavior::ProjectiveConstraintSet< DataTypes >inlinevirtual; applyConstraint(const MechanicalParams *, linearalgebra::BaseVector *, const sofa::core::behavior::MultiMatrixAccessor *) overridesofa::core::behavior::ProjectiveConstraintSet< DataTypes >inlinevirtual; sofa::core::behavior::BaseProjectiveConstraintSet::applyConstraint(sofa::core::behavior::ZeroDirichletCondition *)sofa::core::behavior::BaseProjectiveConstraintSetvirtual; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseProjectiveConstraintSet()sofa::core::behavior",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_projective_constraint_set-members.html:756,log,logging,756,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_projective_constraint_set-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_projective_constraint_set-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyController(void)sofa::component::controller::MechanicalStateController< DataTypes >; applyController()sofa::component::controller::MechanicalStateController< DataTypes >; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; BtLeft enum valuesofa::component::controller::MechanicalStateController< DataTypes >protected; BtMiddle enum valuesofa::component::controller::MechanicalStateController< DataTypes >protected; BtRight enum valuesofa::component::controller::MechanicalStateController< DataTypes >protected; buttonDevicesofa::component::controller::MechanicalStateController< D",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1controller_1_1_mechanical_state_controller-members.html:774,log,logging,774,api/master/sofa/html/classsofa_1_1component_1_1controller_1_1_mechanical_state_controller-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1controller_1_1_mechanical_state_controller-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyCorrection(const ConstraintParams *, MultiVecId res1, MultiVecId res2=MultiVecId::null())=0sofa::core::behavior::ConstraintSolverpure virtual; applyCorrectionTask(const ConstraintParams *, MultiVecId res1, MultiVecId res2)sofa::core::behavior::ConstraintSolverprotected; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildSystem(const ConstraintParams *, MultiVecId res1, MultiVecId res2=MultiVecId::null())=0sofa::core::behavior::ConstraintSolverpure virtual; buildSystemTask(const ConstraintParams *, MultiVecId res1, MultiVecId res2)sofa::core::behavior::ConstraintSolverprotected; bwdInit()sofa::core::objectmodel::BaseObjectvir",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_constraint_solver-members.html:716,log,logging,716,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_constraint_solver-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_constraint_solver-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; applyTransform()sofa::component::io::mesh::SphereLoader; Base()sofa::core::objectmodel::Baseprotected; BaseLoader()sofa::core::loader::BaseLoaderprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; canLoad()sofa::core::loader::BaseLoadervirtual; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cle",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_sphere_loader-members.html:718,log,logging,718,api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_sphere_loader-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1io_1_1mesh_1_1_sphere_loader-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; assembleSystem(const core::MechanicalParams *)sofa::core::behavior::BaseMatrixLinearSystemprotectedvirtual; Base()sofa::core::objectmodel::Baseprotected; BaseMatrixLinearSystem()sofa::core::behavior::BaseMatrixLinearSystemprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; buildSystemMatrix(const core::MechanicalParams *mparams)sofa::core::behavior::BaseMatrixLinearSystem; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_matrix_linear_system-members.html:728,log,logging,728,api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_matrix_linear_system-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1behavior_1_1_base_matrix_linear_system-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; associateObject(ComponentType *object)sofa::core::BaseMatrixAccumulatorComponent< c >inline; Base()sofa::core::objectmodel::Baseprotected; BaseMatrixAccumulatorComponent()sofa::core::BaseMatrixAccumulatorComponent< c >inline; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core:",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_base_matrix_accumulator_component-members.html:734,log,logging,734,api/master/sofa/html/classsofa_1_1core_1_1_base_matrix_accumulator_component-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1core_1_1_base_matrix_accumulator_component-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseType typedefsofa::core::objectmodel::Base; checkLinearSolverSymmetry(const core::MechanicalParams *mparams) constsofa::component::mapping::nonlinear::NonLinearMappingData< HasStabilizedGeometricStiffness >protected; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_geometricStiffnesssofa::component::mapping::nonlinear::NonLinearMappingData< HasStabilizedGeometricStiffness >; d_messageLogCountsofa::core::objectmodel::Basemutable; f_bboxsofa::core::objectmo",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_non_linear_mapping_data-members.html:824,log,logging,824,api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_non_linear_mapping_data-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1component_1_1mapping_1_1nonlinear_1_1_non_linear_mapping_data-members.html,1,['log'],['logging']
Testability," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseType typedefsofa::core::objectmodel::Base; clearLoggedMessages() constsofa::core::objectmodel::Base; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; f_bboxsofa::core::objectmodel::Base; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const std::string &path, const BaseLink *link)sofa::core::objectmodel::Basevirtual; findGlobalField(const std::string &name) constsofa::core::objectmodel::Base; findLink(const std",MatchSource.WIKI,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html:740,log,logging,740,api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1helper_1_1_advanced_timer_1_1_id_1_1_id_factory-members.html,1,['log'],['logging']
