quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Security,". TString& operator=(const TString& s); Assignment operator. TString& operator=(const TSubString& s); Assign a TSubString substr to TString. TString& Append(char c, Ssiz_t rep = 1); Append character c rep times to string. Ssiz_t Capacity(Ssiz_t n); Return string capacity. If nc != current capacity Clone() the string; in a string with the desired capacity. int CompareTo(const char* cs, TString::ECaseCompare cmp = kExact) const; Compare a string to char *cs2. int CompareTo(const TString& st, TString::ECaseCompare cmp = kExact) const; Compare a string to another string. Int_t CountChar(Int_t c) const; Return number of times character c occurs in the string. TString Copy() const; Copy a string. UInt_t Hash(TString::ECaseCompare cmp = kExact) const; Return hash value. UInt_t Hash(const void* txt, Int_t ntxt); Calculates hash index from any char string. (static function); Based on precalculated table of 256 specially selected numbers.; These numbers are selected in such a way, that for string; length == 4 (integer number) the hash is unambigous, i.e.; from hash value we can recalculate input (no degeneration). The quality of hash method is good enough, that; ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); tested by <R>, <R*R>, <Ri*Ri+1> gives the same result; as for libc rand(). For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. V.Perev. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Search for a string in the TString. Plen is the length of pattern,; startIndex is the index from which to start and cmp selects the type; of case-comparison. Bool_t MaybeRegexp() const; Returns true if string contains one of the regexp characters ""^$.[]*+?"". Bool_t MaybeWildcard() const; Returns true if string contains one of the wildcard characters ""[]*?"". TString& Prepend(char c, Ssiz_t rep = 1); Prepend characters to self. TString & R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TString.html:9909,hash,hash,9909,root/html528/TString.html,https://root.cern,https://root.cern/root/html528/TString.html,1,['hash'],['hash']
Security,". TString. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TString. class TString. TString. Basic string class. Cannot be stored in a TCollection... use TObjString instead. The underlying string is stored as a char* that can be accessed via; TString::Data().; TString provides Short String Optimization (SSO) so that short; strings (<15 on 64-bit and <11 on 32-bit) are contained in the; TString internal data structure without the need for mallocing the; required space. Substring operations are provided by the TSubString class, which; holds a reference to the original string and its data, along with; the offset and length of the substring. To retrieve the substring; as a TString, construct a TString from it, eg:; root [0] TString s(""hello world""); root [1] TString s2( s(0,5) ); root [2] s2; (class TString)""hello"". Function Members (Methods); public:. virtual~TString(); TString&Append(const char* cs); TString&Append(const TString& s); TString&Append(const char* cs, Ssiz_t n); TString&Append(const TString& s, Ssiz_t n); TString&Append(char c, Ssiz_t rep = 1); Double_tAtof() const; Int_tAtoi() const; Long64_tAtoll() const; static TStringBaseConvert(const TString& s_in, Int_t base_in, Int_t base_out); Bool_tBeginsWith(const char* s, TString::ECaseCompare cmp = kExact) const; Bool_tBeginsWith(const TString& pat, TString::ECaseCompare cmp = kExact) const; Ssiz_tCapacity() const; Ssiz_tCapacity(Ssiz_t n); TString&Chop(); static TClass*Class(); voidClear(); intCompareTo(const char* cs, TString::ECaseCompare cmp = kExact) const; intCompareTo(const TString& st, TString::ECaseCompare cmp = kExact) const; Bool_tContains(const TRegexp& pat) const; Bool_tContains(TPRegexp& pat) const; Bool_tContains(const char* pat, TString::ECaseCompare cmp = kExact) const; Bool_tContains(const T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TString.html:435,access,accessed,435,root/html602/TString.html,https://root.cern,https://root.cern/root/html602/TString.html,2,['access'],['accessed']
Security,". TString. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TString. class TString. TString. Basic string class. Cannot be stored in a TCollection... use TObjString instead. The underlying string is stored as a char* that can be accessed via; TString::Data().; TString provides Short String Optimization (SSO) so that short; strings (<15 on 64-bit and <11 on 32-bit) are contained in the; TString internal data structure without the need for mallocing the; required space. Substring operations are provided by the TSubString class, which; holds a reference to the original string and its data, along with; the offset and length of the substring. To retrieve the substring; as a TString, construct a TString from it, eg:; root [0] TString s(""hello world""); root [1] TString s2( s(0,5) ); root [2] s2; (class TString)""hello"". This class is also known as (typedefs to this class)vector<TString,allocator<TString> >::value_type. Function Members (Methods); public:. TString(); TString(Ssiz_t ic); TString(const TString& s); TString(const char* s); TString(const string& s); TString(char c); TString(const TSubString& sub); TString(const char* s, Ssiz_t n); TString(char c, Ssiz_t s); virtual~TString(); TString&Append(const char* cs); TString&Append(const TString& s); TString&Append(const char* cs, Ssiz_t n); TString&Append(const TString& s, Ssiz_t n); TString&Append(char c, Ssiz_t rep = 1); Double_tAtof() const; Int_tAtoi() const; Long64_tAtoll() const; static TStringBaseConvert(const TString& s_in, Int_t base_in, Int_t base_out); Bool_tBeginsWith(const char* s, TString::ECaseCompare cmp = kExact) const; Bool_tBeginsWith(const TString& pat, TString::ECaseCompare cmp = kExact) const; Ssiz_tCapacity() const; Ssiz_tCapacity(Ssiz_t n); TString&Chop(); static TClass*Class(); voidClear(); intCompareTo(const char* cs,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TString.html:411,access,accessed,411,root/html534/TString.html,https://root.cern,https://root.cern/root/html534/TString.html,1,['access'],['accessed']
Security,". TString. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TString. class TString. TString. Basic string class. Cannot be stored in a TCollection... use TObjString instead. The underlying string is stored as a char* that can be accessed via; TString::Data().; TString provides copy-on-write semantics with reference counting; so that multiple TString objects can refer to the same data.; For example:; root [0] TString orig(""foo""); root [1] TString copy(orig) // 'orig' and 'copy' point to the; same data...; root [2] orig.Data(); (const char* 0x98936f8)""foo""; root [3] copy.Data(); (const char* 0x98936f8)""foo""; root [4] copy=""bar"" // Editing 'copy' makes it point; // elsewhere; (class TString)""bar""; root [5] copy.Data(); (const char* 0x98939b8)""bar"". Substring operations are provided by the TSubString class, which; holds a reference to the original string and its data, along with; the offset and length of the substring. To retrieve the substring; as a TString, construct a TString from it, eg:; root [0] TString s(""hello world""); root [1] TString s2( s(0,5) ); root [2] s2; (class TString)""hello"". This class is also known as (typedefs to this class)vector<TString,allocator<TString> >::value_type. Function Members (Methods); public:. TString(); TString(Ssiz_t ic); TString(const TString& s); TString(const char* s); TString(const string& s); TString(char c); TString(const TSubString& sub); TString(const char* s, Ssiz_t n); TString(char c, Ssiz_t s); virtual~TString(); TString&Append(const char* cs); TString&Append(const TString& s); TString&Append(const char* cs, Ssiz_t n); TString&Append(const TString& s, Ssiz_t n); TString&Append(char c, Ssiz_t rep = 1); Double_tAtof() const; Int_tAtoi() const; Long64_tAtoll() const; Bool_tBeginsWith(const char* s, TString::ECaseCompare cmp = kExact) const; Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TString.html:411,access,accessed,411,root/html528/TString.html,https://root.cern,https://root.cern/root/html528/TString.html,1,['access'],['accessed']
Security,". TStyle. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TStyle. class TStyle: public TNamed, public TAttLine, public TAttFill, public TAttMarker, public TAttText. TStyle objects may be created to define special styles.; By default ROOT creates a default style that can be accessed via; the gStyle pointer. This class includes functions to set some of the following object attributes.; - Canvas; - Pad; - Histogram axis; - Lines; - Fill areas; - Text; - Markers; - Functions; - Histogram Statistics and Titles. Function Members (Methods); public:. virtual~TStyle(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); Int_tAxisChoice(Option_t* axis) const; virtual voidBrowse(TBrowser* b); static voidBuildStyles(); virtual voidcd(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& style) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TStyle.html:481,access,accessed,481,root/html602/TStyle.html,https://root.cern,https://root.cern/root/html602/TStyle.html,2,['access'],['accessed']
Security,". TStyle. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TStyle. class TStyle: public TNamed, public TAttLine, public TAttFill, public TAttMarker, public TAttText. TStyle objects may be created to define special styles.; By default ROOT creates a default style that can be accessed via; the gStyle pointer. This class includes functions to set some of the following object attributes.; - Canvas; - Pad; - Histogram axis; - Lines; - Fill areas; - Text; - Markers; - Functions; - Histogram Statistics and Titles. Function Members (Methods); public:. TStyle(); TStyle(const TStyle& style); TStyle(const char* name, const char* title); virtual~TStyle(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); Int_tAxisChoice(Option_t* axis) const; virtual voidBrowse(TBrowser* b); static voidBuildStyles(); virtual voidcd(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& style) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStyle.html:457,access,accessed,457,root/html528/TStyle.html,https://root.cern,https://root.cern/root/html528/TStyle.html,4,['access'],['accessed']
Security,". TSubString. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TSubString. class TSubString. TString. Basic string class. Cannot be stored in a TCollection... use TObjString instead. The underlying string is stored as a char* that can be accessed via; TString::Data().; TString provides Short String Optimization (SSO) so that short; strings (<15 on 64-bit and <11 on 32-bit) are contained in the; TString internal data structure without the need for mallocing the; required space. Substring operations are provided by the TSubString class, which; holds a reference to the original string and its data, along with; the offset and length of the substring. To retrieve the substring; as a TString, construct a TString from it, eg:; root [0] TString s(""hello world""); root [1] TString s2( s(0,5) ); root [2] s2; (class TString)""hello"". Function Members (Methods); public:. ~TSubString(); const char*Data() const; Bool_tIsNull() const; Ssiz_tLength() const; intoperator!() const; char&operator()(Ssiz_t i); charoperator()(Ssiz_t i) const; TSubString&operator=(const char* s); TSubString&operator=(const TString& s); TSubString&operator=(const TSubString& s); char&operator[](Ssiz_t i); charoperator[](Ssiz_t i) const; Ssiz_tStart() const; TString&String(); voidToLower(); voidToUpper(); TSubString(const TSubString& s). protected:. voidAssertElement(Ssiz_t i) const; voidSubStringError(Ssiz_t, Ssiz_t, Ssiz_t) const. private:. TSubString(const TString& s, Ssiz_t start, Ssiz_t len). Data Members; private:. Ssiz_tfBeginIndex of starting character; Ssiz_tfExtentLength of TSubString; TString&fStrReferenced string. Class Charts. Inheritance Chart:. TSubString. Function documentation; TSubString(const TString& s, Ssiz_t start, Ssiz_t len); Private constructor. char& operator[](Ssiz_t i); Return cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSubString.html:444,access,accessed,444,root/html602/TSubString.html,https://root.cern,https://root.cern/root/html602/TSubString.html,1,['access'],['accessed']
Security,". TSubString. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TSubString. class TSubString. TString. Basic string class. Cannot be stored in a TCollection... use TObjString instead. The underlying string is stored as a char* that can be accessed via; TString::Data().; TString provides Short String Optimization (SSO) so that short; strings (<15 on 64-bit and <11 on 32-bit) are contained in the; TString internal data structure without the need for mallocing the; required space. Substring operations are provided by the TSubString class, which; holds a reference to the original string and its data, along with; the offset and length of the substring. To retrieve the substring; as a TString, construct a TString from it, eg:; root [0] TString s(""hello world""); root [1] TString s2( s(0,5) ); root [2] s2; (class TString)""hello"". Function Members (Methods); public:. ~TSubString(); const char*Data() const; Bool_tIsNull() const; Ssiz_tLength() const; stringoperator basic_string() const; string_viewoperator basic_string_view() const; intoperator!() const; char&operator()(Ssiz_t i); charoperator()(Ssiz_t i) const; TSubString&operator=(const char* s); TSubString&operator=(const TString& s); TSubString&operator=(const TSubString& s); char&operator[](Ssiz_t i); charoperator[](Ssiz_t i) const; Ssiz_tStart() const; TString&String(); voidToLower(); voidToUpper(); TSubString(const TSubString& s). protected:. voidAssertElement(Ssiz_t i) const; voidSubStringError(Ssiz_t, Ssiz_t, Ssiz_t) const. private:. TSubString(const TString& s, Ssiz_t start, Ssiz_t len). Data Members; private:. Ssiz_tfBeginIndex of starting character; Ssiz_tfExtentLength of TSubString; TString&fStrReferenced string. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSubString(const TString& s, Ssiz_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TSubString.html:420,access,accessed,420,root/html604/TSubString.html,https://root.cern,https://root.cern/root/html604/TSubString.html,1,['access'],['accessed']
Security,". TTabCom. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » RINT; » TTabCom. class TTabCom. TTabCom. This class performs basic tab completion.; You should be able to hit [TAB] to complete a partially typed:. username; environment variable; preprocessor directive; pragma; filename (with a context-sensitive path); public member function or data member (including base classes); global variable, function, or class name. Also, something like. someObject->Func([TAB]; someObject.Func([TAB]; someClass::Func([TAB]; someClass var([TAB]; new someClass([TAB]. will print a list of prototypes for the indicated; method or constructor. Current limitations and bugs:. 1. you can only use one member access operator at a time.; eg, this will work: gROOT->GetListOfG[TAB]; but this will not: gROOT->GetListOfGlobals()->Conta[TAB]. 2. nothing is guaranteed to work on windows; (for one thing, /bin/env and /etc/passwd are hardcoded). 3. CINT shortcut #2 is deliberately not supported.; (using ""operator.()"" instead of ""operator->()""). 4. most identifiers (including C++ identifiers, usernames,; environment variables, etc); are restriceted to this character set: [_a-zA-Z0-9]; therefore, you won't be able to complete things like. operator new; operator+; etc. 5. ~whatever[TAB] always tries to complete a username.; use whitespace (~ whatever[TAB]) if you want to complete a global; identifier. 6. CINT shortcut #3 is not supported when trying to complete; the name of a global object. (it is supported when trying to; complete a member of a global object). 7. the list of #pragma's is hardcoded; (ie not obtained from the interpreter at runtime); ==> user-defined #pragma's will not be recognized. 8. the system include directories are also hardcoded; because i don't know how to get them from the interpreter.; f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTabCom.html:888,access,access,888,root/html602/TTabCom.html,https://root.cern,https://root.cern/root/html602/TTabCom.html,2,['access'],['access']
Security,". TTabCom. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » RINT; » TTabCom. class TTabCom. TTabCom. This class performs basic tab completion.; You should be able to hit [TAB] to complete a partially typed:. username; environment variable; preprocessor directive; pragma; filename (with a context-sensitive path); public member function or data member (including base classes); global variable, function, or class name. Also, something like. someObject->Func([TAB]; someObject.Func([TAB]; someClass::Func([TAB]; someClass var([TAB]; new someClass([TAB]. will print a list of prototypes for the indicated; method or constructor. Current limitations and bugs:. 1. you can only use one member access operator at a time.; eg, this will work: gROOT->GetListOfG[TAB]; but this will not: gROOT->GetListOfGlobals()->Conta[TAB]. 2. nothing is guaranteed to work on windows or VMS; (for one thing, /bin/env and /etc/passwd are hardcoded). 3. CINT shortcut #2 is deliberately not supported.; (using ""operator.()"" instead of ""operator->()""). 4. most identifiers (including C++ identifiers, usernames,; environment variables, etc); are restriceted to this character set: [_a-zA-Z0-9]; therefore, you won't be able to complete things like. operator new; operator+; etc. 5. ~whatever[TAB] always tries to complete a username.; use whitespace (~ whatever[TAB]) if you want to complete a global; identifier. 6. CINT shortcut #3 is not supported when trying to complete; the name of a global object. (it is supported when trying to; complete a member of a global object). 7. the list of #pragma's is hardcoded; (ie not obtained from the interpreter at runtime); ==> user-defined #pragma's will not be recognized. 8. the system include directories are also hardcoded; because i don't know how to get them from the interpreter.; fons, maybe they s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTabCom.html:864,access,access,864,root/html528/TTabCom.html,https://root.cern,https://root.cern/root/html528/TTabCom.html,3,['access'],['access']
Security,". TTabCom. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » RINT; » TTabCom. class TTabCom. TTabCom. This class performs basic tab completion.; You should be able to hit [TAB] to complete a partially typed:. username; environment variable; preprocessor directive; pragma; filename (with a context-sensitive path); public member function or data member (including base classes); global variable, function, or class name. Also, something like. someObject->Func([TAB]; someObject.Func([TAB]; someClass::Func([TAB]; someClass var([TAB]; new someClass([TAB]. will print a list of prototypes for the indicated; method or constructor. Current limitations and bugs:. 1. you can only use one member access operator at a time.; eg, this will work: gROOT->GetListOfG[TAB]; but this will not: gROOT->GetListOfGlobals()->Conta[TAB]. 2. nothing is guaranteed to work on windows; (for one thing, /bin/env and /etc/passwd are hardcoded). 3. CINT shortcut #2 is deliberately not supported.; (using ""operator.()"" instead of ""operator->()""). 4. most identifiers (including C++ identifiers, usernames,; environment variables, etc); are restriceted to this character set: [_a-zA-Z0-9]; therefore, you won't be able to complete things like. operator new; operator+; etc. 5. ~whatever[TAB] always tries to complete a username.; use whitespace (~ whatever[TAB]) if you want to complete a global; identifier. 6. CINT shortcut #3 is not supported when trying to complete; the name of a global object. (it is supported when trying to; complete a member of a global object). 7. the list of #pragma's is hardcoded; (ie not obtained from the interpreter at runtime); ==> user-defined #pragma's will not be recognized. 8. the system include directories are also hardcoded; because i don't know how to get them from the interpreter.; fons, maybe they should b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTabCom.html:864,access,access,864,root/html534/TTabCom.html,https://root.cern,https://root.cern/root/html534/TTabCom.html,1,['access'],['access']
Security,". TTableSorter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MISC; » TABLE; » TTableSorter. class TTableSorter: public TNamed. TTableSorter - Is an ""observer"" class to sort the TTable objects; The class provides an interface to the standard ""C/C++"". qsort and bsearch subroutines (for further information see your local C/C++ docs); ===== =======. - This class DOESN'T change / touch the ""host"" table itself; For any TTable object one can create as many different ""sorter""; as one finds useful for one's code; - Any instance of this class is meaningful as long as the ""host"" object; ""TTable"" does exist and is not changed; - Any attempt to access this TTableSorter after the ""host"" object deleted; causes the program abnormal termination; - Any attempt to access this TTableSorter after the ""host"" object been changed; causes an unpredictable result; - Any instance (object) of this class is NOT deleted ""by automatic"" just; the ""host object ""TTable"" deleted. It is the responsibility of the user's code; keeping TTableSorter and the the ""host"" TTable objects consistent. ""To do"" list. 1. A separate method to provide lexicographical sort if the ""sorted"" column is a kind of array. Usage:; 1. Create an instance of the sorter for the selected column of your table. new TTableSorter(TTable &table, TString &colName,Int_t firstRow,Int_t numberRows). All sort actions are performed within TTableSorter ctor.; This means one needs no extra effort to SORT table. ""Sorter"" contains; the ""sorted index array"" as soon as you create the sorter. TTableSorter sorter(MyTable,""id"",20, 34);; - Creates a sorter for MyTable column ""id"" ordering; its 34 rows from 20 row with standard ""C"" qsort subroutine. 2. You may use this instance to search any ""id"" value with operator []; to get the table row index as follows:. Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTableSorter.html:834,access,access,834,root/html602/TTableSorter.html,https://root.cern,https://root.cern/root/html602/TTableSorter.html,4,['access'],['access']
Security,". TTableSorter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MISC; » TABLE; » TTableSorter. class TTableSorter: public TNamed. TTableSorter - Is an ""observer"" class to sort the TTable objects; The class provides an interface to the standard ""C/C++"". qsort and bsearch subroutines (for further information see your local C/C++ docs); ===== =======. - This class DOESN'T change / touch the ""host"" table itself; For any TTable object one can create as many different ""sorter""; as he/she finds useful for his/her code; - Any instance of this class is meaningful as long as the ""host"" object; ""TTable"" does exist and is not changed; - Any attempt to access this TTableSorter after the ""host"" object deleted; causes the program abnormal termination; - Any attempt to access this TTableSorter after the ""host"" object been changed; causes an unpredictable result; - Any instance (object) of this class is NOT deleted ""by automatic"" just; the ""host object ""TTable"" deleted. It is the responsibility of the user's code; keeping TTableSorter and the the ""host"" TTable objects consistent. ""To do"" list. 1. A separate method to provide lexicographical sort if the ""sorted"" column is a kind of array. Usage:; 1. Create an instance of the sorter for the selected column of your table. new TTableSorter(TTable &table, TString &colName,Int_t firstRow,Int_t numberRows). All sort actions are performed within TTableSorter ctor.; This means one needs no extra effort to SORT table. ""Sorter"" contains; the ""sorted index array"" as soon as you create the sorter. TTableSorter sorter(MyTable,""id"",20, 34);; - Creates a sorter for MyTable column ""id"" ordering; its 34 rows from 20 row with standard ""C"" qsort subroutine. 2. You may use this instance to search any ""id"" value with operator []; to get the table row index as follows:. Int_t id = 5;; Int_t i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTableSorter.html:815,access,access,815,root/html528/TTableSorter.html,https://root.cern,https://root.cern/root/html528/TTableSorter.html,8,['access'],['access']
Security,". TTreeCache. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TTreeCache. class TTreeCache: public TFileCacheRead. TTreeCache. A specialized TFileCacheRead object for a TTree; This class acts as a file cache, registering automatically the; baskets from the branches being processed (TTree::Draw or; TTree::Process and TSelectors) when in the learning phase.; The learning phase is by default 100 entries.; It can be changed via TTreeCache::SetLearnEntries. This cache speeds-up considerably the performance, in particular; when the Tree is accessed remotely via a high latency network. The default cache size (10 Mbytes) may be changed via the function; TTreeCache::SetCacheSize. Only the baskets for the requested entry range are put in the cache. For each Tree being processed a TTreeCache object is created.; This object is automatically deleted when the Tree is deleted or; when the file is deleted. -Special case of a TChain; Once the training is done on the first Tree, the list of branches; in the cache is kept for the following files. -Special case of a TEventlist; if the Tree or TChain has a TEventlist, only the buffers; referenced by the list are put in the cache. The learning period is started or restarted when:; - A TTree automatically creates a cache; - TTree::SetCacheSize is called for the first time.; - TTree::SetCacheSize is called a second time with a different size.; - TTreeCache::StartLearningPhase is called.; - TTree[Cache]::SetEntryRange is called; * and the learning is not yet finished; * and has not been set to manual; * and the new minimun entry is different. The learning period is stopped (and prefetching is actually started) when:; - TTree[Cache]::StopLearningPhase is called.; - An entry outside the 'learning' range is requested; The 'learning range is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeCache.html:747,access,accessed,747,root/html602/TTreeCache.html,https://root.cern,https://root.cern/root/html602/TTreeCache.html,1,['access'],['accessed']
Security,". TTreeCache. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TTreeCache. class TTreeCache: public TFileCacheRead. TTreeCache. A specialized TFileCacheRead object for a TTree; This class acts as a file cache, registering automatically the; baskets from the branches being processed (TTree::Draw or; TTree::Process and TSelectors) when in the learning phase.; The learning phase is by default 100 entries.; It can be changed via TTreeCache::SetLearnEntries. This cache speeds-up considerably the performance, in particular; when the Tree is accessed remotely via a high latency network. The default cache size (10 Mbytes) may be changed via the function; TTreeCache::SetCacheSize. Only the baskets for the requested entry range are put in the cache. For each Tree being processed a TTreeCache object is created.; This object is automatically deleted when the Tree is deleted or; when the file is deleted. -Special case of a TChain; Once the training is done on the first Tree, the list of branches; in the cache is kept for the following files. -Special case of a TEventlist; if the Tree or TChain has a TEventlist, only the buffers; referenced by the list are put in the cache. The learning period is started or restarted when:; - TTree automatically creates a cache. This feature can be; controlled with an env. variable or the TTreeCache.Size option.; - TTree::SetCacheSize is called with a non-zero size and a cache; did not previously exist; - TTreeCache::StartLearningPhase is called.; - TTree[Cache]::SetEntryRange is called; * and the learning is not yet finished; * and has not been set to manual; * and the new minimun entry is different. The learning period is stopped (and prefetching is actually started) when:; - TTree[Cache]::StopLearningPhase is called.; - An entry outside the '",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeCache.html:747,access,accessed,747,root/html604/TTreeCache.html,https://root.cern,https://root.cern/root/html604/TTreeCache.html,1,['access'],['accessed']
Security,". TTreeCache. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TTreeCache. class TTreeCache: public TFileCacheRead. TTreeCache. A specialized TFileCacheRead object for a TTree; This class acts as a file cache, registering automatically the; baskets from the branches being processed (TTree::Draw or; TTree::Process and TSelectors) when in the learning phase.; The learning phase is by default 100 entries.; It can be changed via TTreeCache::SetLearnEntries. This cache speeds-up considerably the performance, in particular; when the Tree is accessed remotely via a high latency network. The default cache size (10 Mbytes) may be changed via the function; TTreeCache::SetCacheSize. Only the baskets for the requested entry range are put in the cache. For each Tree being processed a TTreeCache object is created.; This object is automatically deleted when the Tree is deleted or; when the file is deleted. -Special case of a TChain; Once the training is done on the first Tree, the list of branches; in the cache is kept for the following files. -Special case of a TEventlist; if the Tree or TChain has a TEventlist, only the buffers; referenced by the list are put in the cache. The learning period is started or restarted when:; - A TTree automatically creates a cache; - TTree::SetCacheSize is called for the first time.; - TTree::SetCacheSize is called a second time with a different size.; - TTreeCache::StartLearningPhase is called.; - TTree[Cache]::SetEntryRange is called; * and the learning is not yet finished; * and has not been set to manual; * and the new minimun entry is different. The learning period is stopped (and prefetching is actually started) when:; - TTree[Cache]::StopLearningPhase is called.; - An entry outside the 'learning' range is requested; The 'learning range is from fEntryMin (default ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCache.html:723,access,accessed,723,root/html534/TTreeCache.html,https://root.cern,https://root.cern/root/html534/TTreeCache.html,1,['access'],['accessed']
Security,". TTreeCache. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TTreeCache. class TTreeCache: public TFileCacheRead. TTreeCache. A specialized TFileCacheRead object for a TTree; This class acts as a file cache, registering automatically the; baskets from the branches being processed (TTree::Draw or; TTree::Process and TSelectors) when in the learning phase.; The learning phase is by default 100 entries.; It can be changed via TTreeCache::SetLearnEntries. This cache speeds-up considerably the performance, in particular; when the Tree is accessed remotely via a high latency network. The default cache size (10 Mbytes) may be changed via the function; TTreeCache::SetCacheSize. Only the baskets for the requested entry range are put in the cache. For each Tree being processed a TTreeCache object is created.; This object is automatically deleted when the Tree is deleted or; when the file is deleted. -Special case of a TChain; Once the training is done on the first Tree, the list of branches; in the cache is kept for the following files. -Special case of a TEventlist; if the Tree or TChain has a TEventlist, only the buffers; referenced by the list are put in the cache. The learning period is started or restarted when:; - TTree::SetCacheSize is called for the first time.; - TTree::SetCacheSize is called a second time with a different size.; - TTreeCache::StartLearningPhase is called.; - TTree[Cache]::SetEntryRange is called; * and the learning is not yet finished; * and has not been set to manual; * and the new minimun entry is different. The learning period is stopped (and prefetching is actually started) when:; - TTree[Cache]::StopLearningPhase is called.; - An entry outside the 'learning' range is requested; The 'learning range is from fEntryMin (default to 0) to; fEntryMin + fgLearnEntries (def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeCache.html:723,access,accessed,723,root/html528/TTreeCache.html,https://root.cern,https://root.cern/root/html528/TTreeCache.html,3,['access'],['accessed']
Security,". TTreePlayer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEPLAYER; » TTreePlayer. class TTreePlayer: public TVirtualTreePlayer. TTreePlayer. Implement some of the functionality of the class TTree requiring access to; extra libraries (Histogram, display, etc). Function Members (Methods); public:. virtual~TTreePlayer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual TVirtualIndex*BuildIndex(const TTree* T, const char* majorname, const char* minorname); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual TTree*CopyTree(const char* selection, Option_t* option, Long64_t nentries, Long64_t firstentry); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Long64_tDrawScript(const char* wrapperPrefix, const char* macrofilename, const char* cutfilename, Option_t* option, Long64_t nentries, Long64_t firstentry); virtual Long64_tDrawSelect(const char* varexp, const char* selection, Option_t* option, Long64_t nentries, Long64_t firstentry); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreePlayer.html:413,access,access,413,root/html602/TTreePlayer.html,https://root.cern,https://root.cern/root/html602/TTreePlayer.html,1,['access'],['access']
Security,". TTreePlayer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEPLAYER; » TTreePlayer. class TTreePlayer: public TVirtualTreePlayer. TTreePlayer. Implement some of the functionality of the class TTree requiring access to; extra libraries (Histogram, display, etc). Function Members (Methods); public:. TTreePlayer(); virtual~TTreePlayer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual TVirtualIndex*BuildIndex(const TTree* T, const char* majorname, const char* minorname); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual TTree*CopyTree(const char* selection, Option_t* option, Long64_t nentries, Long64_t firstentry); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Long64_tDrawScript(const char* wrapperPrefix, const char* macrofilename, const char* cutfilename, Option_t* option, Long64_t nentries, Long64_t firstentry); virtual Long64_tDrawSelect(const char* varexp, const char* selection, Option_t* option, Long64_t nentries, Long64_t firstentry); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreePlayer.html:389,access,access,389,root/html530/TTreePlayer.html,https://root.cern,https://root.cern/root/html530/TTreePlayer.html,3,['access'],['access']
Security,". TTreePlayer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEPLAYER; » TTreePlayer. class TTreePlayer: public TVirtualTreePlayer. TTreePlayer. Implement some of the functionality of the class TTree requiring access to; extra libraries (Histogram, display, etc). Function Members (Methods); public:. virtual~TTreePlayer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual TVirtualIndex*BuildIndex(const TTree* T, const char* majorname, const char* minorname); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual TTree*CopyTree(const char* selection, Option_t* option, Long64_t nentries, Long64_t firstentry); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Long64_tDrawScript(const char* wrapperPrefix, const char* macrofilename, const char* cutfilename, Option_t* option, Long64_t nentries, Long64_t firstentry); virtual Long64_tDrawSelect(const char* varexp, const char* selection, Option_t* option, Long64_t nentries, Long64_t firstentry); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreePlayer.html:389,access,access,389,root/html604/TTreePlayer.html,https://root.cern,https://root.cern/root/html604/TTreePlayer.html,1,['access'],['access']
Security,". TTreeReader. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEPLAYER; » TTreeReader. class TTreeReader: public TObject. TTreeReader is a simple, robust and fast interface to read values from a TTree,; TChain or TNtuple. It uses TTreeReaderValue<T> and; TTreeReaderArray<T> to access the data. Example code can be found in; tutorials/tree/hsimpleReader.C and tutorials/trees/h1analysisTreeReader.h and; tutorials/trees/h1analysisTreeReader.C for a TSelector.; Roottest contains an; example; showing the full power.; A simpler analysis example - the one from the tutorials - can be found below:; it histograms a function of the px and py branches.;  ; // A simple TTreeReader use: read data from hsimple.root (written by hsimple.C);  ; #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h"";  ; void hsimpleReader() {; // Create a histogram for the values we read.; TH1F *myHist = new TH1F(""h1"", ""ntuple"", 100, -4, 4);;  ; // Open the file containing the tree.; TFile *myFile = TFile::Open(""$ROOTSYS/tutorials/hsimple.root"");;  ; // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);;  ; // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");;  ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; };  ; myHist->Draw();; }. A more complete example including error handling and a few combinations of; TTreeReaderValue and TTreeReaderArr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeReader.html:480,access,access,480,root/html602/TTreeReader.html,https://root.cern,https://root.cern/root/html602/TTreeReader.html,2,['access'],['access']
Security,". TUnfoldBinning. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TUnfoldBinning. class TUnfoldBinning: public TNamed. TUnfoldBinning. This class serves as a container of analysis bins; analysis bins are specified by defining the axes of a distribution.; It is also possible to have unconnected analysis bins without axis.; Multiple TUnfoldBinning objects may be arranged in a tree,; such that a full tree structure of histograms and bins is supported. If you use this software, please consider the following citation; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201]. More documentation and updates are available on; http://www.desy.de/~sschmitt. Functionality. The class gives access to all analysis bins numbered in sequence.; Such a sequence of bins may be stored in a 1-dimension histogram.; Correlations between two TUnfoldBinning objects may be stored in; a 2-dimensional histogram. This type of ordering is required for; the TUnfold class. In addition, it is possible to have root histograms, using the; axes as defined with the distributions. Underflow/overflow bins; can be included or excluded when mapping bins on root histograms.; In addition, it is possible to collapse one of more axes when going; from a N-dimensional distribution to a root histogram. Function Members (Methods); public:. virtual~TUnfoldBinning(); voidTObject::AbstractMethod(const char* method) const; Bool_tAddAxis(const TAxis& axis, Bool_t includeUnderflow, Bool_t includeOverflow); Bool_tAddAxis(const char* name, Int_t nBins, const Double_t* binBorders, Bool_t hasUnderflow, Bool_t hasOverflow); Bool_tAddAxis(const char* name, Int_t nBins, Double_t xMin, Double_t xMax, Bool_t hasUnderflow, Bool_t hasOverflow); TUnfoldBinning*AddBinning(TUnfoldBinning* binning); TUnfoldBinning*AddBinning(const char* n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnfoldBinning.html:888,access,access,888,root/html602/TUnfoldBinning.html,https://root.cern,https://root.cern/root/html602/TUnfoldBinning.html,2,['access'],['access']
Security,". TUnfoldBinning. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TUnfoldBinning. class TUnfoldBinning: public TNamed. TUnfoldBinning. This class serves as a container of analysis bins; analysis bins are specified by defining the axes of a distribution.; It is also possible to have unconnected analysis bins without axis.; Multiple TUnfoldBinning objects may be arranged in a tree,; such that a full tree structure of histograms and bins is supported. If you use this software, please consider the following citation; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201]. More documentation and updates are available on; http://www.desy.de/~sschmitt. Functionality. The class gives access to all analysis bins numbered in sequence.; Such a sequence of bins may be stored in a 1-dimension histogram.; Correlations between two TUnfoldBinning objects may be stored in; a 2-dimensional histogram. This type of ordering is required for; the TUnfold class. In addition, it is possible to have root histograms, using the; axes as defined with the distributions. Underflow/overflow bins; can be included or excluded when mapping bins on root histograms.; In addition, it is possible to collapse one of more axes when going; from a N-dimensional distribution to a root histogram. Function Members (Methods); public:. TUnfoldBinning(const TUnfoldBinning&); TUnfoldBinning(const char* name = 0, Int_t nBins = 0, const char* binNames = 0); TUnfoldBinning(const TAxis& axis, Int_t includeUnderflow, Int_t includeOverflow); virtual~TUnfoldBinning(); voidTObject::AbstractMethod(const char* method) const; Bool_tAddAxis(const TAxis& axis, Bool_t includeUnderflow, Bool_t includeOverflow); Bool_tAddAxis(const char* name, Int_t nBins, const Double_t* binBorders, Bool_t hasUnderflow, Bool_t hasOverflow); Bool_tAddAxis(const char* name",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldBinning.html:864,access,access,864,root/html534/TUnfoldBinning.html,https://root.cern,https://root.cern/root/html534/TUnfoldBinning.html,1,['access'],['access']
Security,". TUri. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TUri. class TUri: public TObject. TUri. This class represents a RFC 3986 compatible URI.; See http://rfc.net/rfc3986.html.; It provides member functions to set and return the different; the different parts of an URI. The functionality is that of; a validating parser. Function Members (Methods); public:. virtual~TUri(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const TStringGetAuthority() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TStringGetFragme",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUri.html:512,validat,validating,512,root/html602/TUri.html,https://root.cern,https://root.cern/root/html602/TUri.html,2,['validat'],['validating']
Security,". TUri. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TUri. class TUri: public TObject. TUri. This class represents a RFC 3986 compatible URI.; See http://rfc.net/rfc3986.html.; It provides member functions to set and return the different; the different parts of an URI. The functionality is that of; a validating parser. Function Members (Methods); public:. TUri(); TUri(const TUri& uri); TUri(const TString& uri); TUri(const char* uri); virtual~TUri(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const TStringGetAuthority() const; virtual Option_t*TObject::GetDrawOption() const; sta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUri.html:488,validat,validating,488,root/html528/TUri.html,https://root.cern,https://root.cern/root/html528/TUri.html,4,['validat'],['validating']
Security,". TVirtualArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TVirtualArray. class TVirtualArray. TVirtualArray. Wrapper around an object and giving indirect access to its content; even if the object is not of a class in the Cint/Reflex dictionary. Function Members (Methods); public:. TVirtualArray(const TVirtualArray&); TVirtualArray(TClass* cl, UInt_t size); ~TVirtualArray(); TClass*GetClass(); char*GetObjectAt(UInt_t ind) const; TVirtualArray&operator=(const TVirtualArray&); char*operator[](UInt_t ind) const. Data Members; public:. char*fArray[fSize] ; TClassReffClass; UInt_tfSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TVirtualArray(TClass* cl, UInt_t size); {}. ~TVirtualArray(); { if (fClass) fClass->DeleteArray( fArray ); }. TClass * GetClass(); { return fClass; }. char * operator[](UInt_t ind) const; { return GetObjectAt(ind); }. char * GetObjectAt(UInt_t ind) const; { return fArray+fClass->Size()*ind; }. » Author: Philippe Canal July, 2008 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TVirtualArray.h 25450 2008-09-18 21:13:42Z pcanal $ » Last generated: 2010-09-23 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualArray.html:314,access,access,314,root/html528/TVirtualArray.html,https://root.cern,https://root.cern/root/html528/TVirtualArray.html,1,['access'],['access']
Security,". TVirtualArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; inheritance tree (.pdf) viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TVirtualArray. class TVirtualArray. TVirtualArray. Wrapper around an object and giving indirect access to its content; even if the object is not of a class in the Cint/Reflex dictionary. Function Members (Methods); public:. ~TVirtualArray(); TClass*GetClass(); char*GetObjectAt(UInt_t ind) const; TVirtualArray&operator=(const TVirtualArray&); char*operator[](UInt_t ind) const; voidSetSize(UInt_t size); TVirtualArray(const TVirtualArray&); TVirtualArray(TClass* cl, UInt_t size). Data Members; public:. char*fArray[fSize]; UInt_tfCapacity; TClassReffClass; UInt_tfSize. Class Charts. Inheritance Chart:. TVirtualArray. Function documentation; TVirtualArray(TClass* cl, UInt_t size); {}. ~TVirtualArray(); { if (fClass) fClass->DeleteArray( fArray ); }. TClass * GetClass(); { return fClass; }. char * operator[](UInt_t ind) const; { return GetObjectAt(ind); }. char * GetObjectAt(UInt_t ind) const; { return fArray+fClass->Size()*ind; }. void SetSize(UInt_t size); Set the used size of this array to 'size'. If size is greater than the existing; capacity, reallocate the array BUT no data is preserved. » Author: Philippe Canal July, 2008 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualArray.html:340,access,access,340,root/html602/TVirtualArray.html,https://root.cern,https://root.cern/root/html602/TVirtualArray.html,1,['access'],['access']
Security,". TVirtualArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TVirtualArray. class TVirtualArray. TVirtualArray. Wrapper around an object and giving indirect access to its content; even if the object is not of a class in the Cint/Reflex dictionary. Function Members (Methods); public:. TVirtualArray(const TVirtualArray&); TVirtualArray(TClass* cl, UInt_t size); ~TVirtualArray(); TClass*GetClass(); char*GetObjectAt(UInt_t ind) const; TVirtualArray&operator=(const TVirtualArray&); char*operator[](UInt_t ind) const. Data Members; public:. char*fArray[fSize] ; TClassReffClass; UInt_tfSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TVirtualArray(TClass* cl, UInt_t size); {}. ~TVirtualArray(); { if (fClass) fClass->DeleteArray( fArray ); }. TClass * GetClass(); { return fClass; }. char * operator[](UInt_t ind) const; { return GetObjectAt(ind); }. char * GetObjectAt(UInt_t ind) const; { return fArray+fClass->Size()*ind; }. » Author: Philippe Canal July, 2008 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TVirtualArray.h 25450 2008-09-18 21:13:42Z pcanal $ » Last generated: 2011-07-04 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVirtualArray.html:316,access,access,316,root/html530/TVirtualArray.html,https://root.cern,https://root.cern/root/html530/TVirtualArray.html,1,['access'],['access']
Security,". TVirtualArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TVirtualArray. class TVirtualArray. TVirtualArray. Wrapper around an object and giving indirect access to its content; even if the object is not of a class in the Cint/Reflex dictionary. Function Members (Methods); public:. TVirtualArray(const TVirtualArray&); TVirtualArray(TClass* cl, UInt_t size); ~TVirtualArray(); TClass*GetClass(); char*GetObjectAt(UInt_t ind) const; TVirtualArray&operator=(const TVirtualArray&); char*operator[](UInt_t ind) const; voidSetSize(UInt_t size). Data Members; public:. char*fArray[fSize] ; UInt_tfCapacity; TClassReffClass; UInt_tfSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TVirtualArray(TClass* cl, UInt_t size); {}. ~TVirtualArray(); { if (fClass) fClass->DeleteArray( fArray ); }. TClass * GetClass(); { return fClass; }. char * operator[](UInt_t ind) const; { return GetObjectAt(ind); }. char * GetObjectAt(UInt_t ind) const; { return fArray+fClass->Size()*ind; }. void SetSize(UInt_t size); Set the used size of this array to 'size'. If size is greater than the existing; capacity, reallocate the array BUT no data is preserved. » Author: Philippe Canal July, 2008 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-09-08 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualArray.html:316,access,access,316,root/html534/TVirtualArray.html,https://root.cern,https://root.cern/root/html534/TVirtualArray.html,1,['access'],['access']
Security,". TVirtualArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TVirtualArray. class TVirtualArray. TVirtualArray. Wrapper around an object and giving indirect access to its content; even if the object is not of a class in the Cint/Reflex dictionary. Function Members (Methods); public:. TVirtualArray(const TVirtualArray&); TVirtualArray(TClass* cl, UInt_t size); ~TVirtualArray(); TClass*GetClass(); char*GetObjectAt(UInt_t ind) const; TVirtualArray&operator=(const TVirtualArray&); char*operator[](UInt_t ind) const; voidSetSize(UInt_t size). Data Members; public:. char*fArray[fSize] ; UInt_tfCapacity; TClassReffClass; UInt_tfSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TVirtualArray(TClass* cl, UInt_t size); {}. ~TVirtualArray(); { if (fClass) fClass->DeleteArray( fArray ); }. TClass * GetClass(); { return fClass; }. char * operator[](UInt_t ind) const; { return GetObjectAt(ind); }. char * GetObjectAt(UInt_t ind) const; { return fArray+fClass->Size()*ind; }. void SetSize(UInt_t size); Set the used size of this array to 'size'. If size is greater than the existing; capacity, reallocate the array BUT no data is preserved. » Author: Philippe Canal July, 2008 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TVirtualArray.h 41520 2011-10-20 17:10:04Z pcanal $ » Last generated: 2011-11-03 20:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TVirtualArray.html:316,access,access,316,root/html532/TVirtualArray.html,https://root.cern,https://root.cern/root/html532/TVirtualArray.html,1,['access'],['access']
Security,". TVirtualArray. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TVirtualArray. class TVirtualArray. TVirtualArray. Wrapper around an object and giving indirect access to its content; even if the object is not of a class in the Cint/Reflex dictionary. Function Members (Methods); public:. ~TVirtualArray(); TClass*GetClass(); char*GetObjectAt(UInt_t ind) const; TVirtualArray&operator=(const TVirtualArray&); char*operator[](UInt_t ind) const; voidSetSize(UInt_t size); TVirtualArray(const TVirtualArray&); TVirtualArray(TClass* cl, UInt_t size). Data Members; public:. char*fArray[fSize]; UInt_tfCapacity; TClassReffClass; UInt_tfSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TVirtualArray(TClass* cl, UInt_t size); {}. ~TVirtualArray(); { if (fClass) fClass->DeleteArray( fArray ); }. TClass * GetClass(); { return fClass; }. char * operator[](UInt_t ind) const; { return GetObjectAt(ind); }. char * GetObjectAt(UInt_t ind) const; { return fArray+fClass->Size()*ind; }. void SetSize(UInt_t size); Set the used size of this array to 'size'. If size is greater than the existing; capacity, reallocate the array BUT no data is preserved. » Author: Philippe Canal July, 2008 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-09-08 17:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TVirtualArray.html:316,access,access,316,root/html604/TVirtualArray.html,https://root.cern,https://root.cern/root/html604/TVirtualArray.html,1,['access'],['access']
Security,". TVirtualAuth. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TVirtualAuth. class TVirtualAuth. TVirtualAuth. Abstract interface for client authentication code. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TVirtualAuth(); virtual TSecContext*Authenticate(TSocket*, const char* host, const char* user, Option_t* options); static TClass*Class(); virtual Int_tClientVersion(); virtual voidErrorMsg(const char* where, Int_t ecode); virtual TClass*IsA() const; virtual const char*Name(); TVirtualAuth&operator=(const TVirtualAuth&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TVirtualAuth(); { }. TSecContext * Authenticate(TSocket* , const char* host, const char* user, Option_t* options). void ErrorMsg(const char* where, Int_t ecode). const char * Name(). » Author: G. Ganis 08/07/05 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: Thu Sep 23 20:22:18 2010 » Last generated: 2010-09-23 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualAuth.html:299,authenticat,authentication,299,root/html528/TVirtualAuth.html,https://root.cern,https://root.cern/root/html528/TVirtualAuth.html,1,['authenticat'],['authentication']
Security,". TVirtualAuth. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; inheritance tree (.pdf) viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TVirtualAuth. class TVirtualAuth. TVirtualAuth. Abstract interface for client authentication code. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TVirtualAuth(); virtual TSecContext*Authenticate(TSocket*, const char* host, const char* user, Option_t* options); static TClass*Class(); virtual Int_tClientVersion(); virtual voidErrorMsg(const char* where, Int_t ecode); virtual TClass*IsA() const; virtual const char*Name(); TVirtualAuth&operator=(const TVirtualAuth&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TVirtualAuth(); TVirtualAuth(const TVirtualAuth&). Class Charts. Inheritance Chart:. TVirtualAuth. ←. TRootAuth. Function documentation; TVirtualAuth(); { }. virtual ~TVirtualAuth(); { }. TSecContext * Authenticate(TSocket* , const char* host, const char* user, Option_t* options). void ErrorMsg(const char* where, Int_t ecode). const char * Name(). » Author: G. Ganis 08/07/05 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: Tue Jun 30 15:32:34 2015 » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualAuth.html:325,authenticat,authentication,325,root/html602/TVirtualAuth.html,https://root.cern,https://root.cern/root/html602/TVirtualAuth.html,1,['authenticat'],['authentication']
Security,". TVirtualAuth. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TVirtualAuth. class TVirtualAuth. TVirtualAuth. Abstract interface for client authentication code. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TVirtualAuth(); virtual TSecContext*Authenticate(TSocket*, const char* host, const char* user, Option_t* options); static TClass*Class(); virtual Int_tClientVersion(); virtual voidErrorMsg(const char* where, Int_t ecode); virtual TClass*IsA() const; virtual const char*Name(); TVirtualAuth&operator=(const TVirtualAuth&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TVirtualAuth(); TVirtualAuth(const TVirtualAuth&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TVirtualAuth(); { }. virtual ~TVirtualAuth(); { }. TSecContext * Authenticate(TSocket* , const char* host, const char* user, Option_t* options). void ErrorMsg(const char* where, Int_t ecode). const char * Name(). » Author: G. Ganis 08/07/05 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: Tue Sep 8 17:49:45 2015 » Last generated: 2015-09-08 17:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TVirtualAuth.html:301,authenticat,authentication,301,root/html604/TVirtualAuth.html,https://root.cern,https://root.cern/root/html604/TVirtualAuth.html,1,['authenticat'],['authentication']
Security,". TVirtualAuth. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TVirtualAuth. class TVirtualAuth. TVirtualAuth. Abstract interface for client authentication code. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TVirtualAuth(); virtual TSecContext*Authenticate(TSocket*, const char* host, const char* user, Option_t* options); static TClass*Class(); virtual Int_tClientVersion(); virtual voidErrorMsg(const char* where, Int_t ecode); virtual TClass*IsA() const; virtual const char*Name(); TVirtualAuth&operator=(const TVirtualAuth&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TVirtualAuth(); { }. TSecContext * Authenticate(TSocket* , const char* host, const char* user, Option_t* options). void ErrorMsg(const char* where, Int_t ecode). const char * Name(). » Author: G. Ganis 08/07/05 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: Mon Jul 4 15:38:47 2011 » Last generated: 2011-07-04 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVirtualAuth.html:301,authenticat,authentication,301,root/html530/TVirtualAuth.html,https://root.cern,https://root.cern/root/html530/TVirtualAuth.html,1,['authenticat'],['authentication']
Security,". TVirtualAuth. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TVirtualAuth. class TVirtualAuth. TVirtualAuth. Abstract interface for client authentication code. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TVirtualAuth(); virtual TSecContext*Authenticate(TSocket*, const char* host, const char* user, Option_t* options); static TClass*Class(); virtual Int_tClientVersion(); virtual voidErrorMsg(const char* where, Int_t ecode); virtual TClass*IsA() const; virtual const char*Name(); TVirtualAuth&operator=(const TVirtualAuth&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TVirtualAuth(); { }. TSecContext * Authenticate(TSocket* , const char* host, const char* user, Option_t* options). void ErrorMsg(const char* where, Int_t ecode). const char * Name(). » Author: G. Ganis 08/07/05 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: Thu Nov 3 20:24:07 2011 » Last generated: 2011-11-03 20:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TVirtualAuth.html:301,authenticat,authentication,301,root/html532/TVirtualAuth.html,https://root.cern,https://root.cern/root/html532/TVirtualAuth.html,1,['authenticat'],['authentication']
Security,". TVirtualAuth. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TVirtualAuth. class TVirtualAuth. TVirtualAuth. Abstract interface for client authentication code. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TVirtualAuth(); virtual TSecContext*Authenticate(TSocket*, const char* host, const char* user, Option_t* options); static TClass*Class(); virtual Int_tClientVersion(); virtual voidErrorMsg(const char* where, Int_t ecode); virtual TClass*IsA() const; virtual const char*Name(); TVirtualAuth&operator=(const TVirtualAuth&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TVirtualAuth(); { }. TSecContext * Authenticate(TSocket* , const char* host, const char* user, Option_t* options). void ErrorMsg(const char* where, Int_t ecode). const char * Name(). » Author: G. Ganis 08/07/05 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: Tue Sep 8 17:05:51 2015 » Last generated: 2015-09-08 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualAuth.html:301,authenticat,authentication,301,root/html534/TVirtualAuth.html,https://root.cern,https://root.cern/root/html534/TVirtualAuth.html,1,['authenticat'],['authentication']
Security,". TVirtualCollectionProxy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TVirtualCollectionProxy. class TVirtualCollectionProxy. TVirtualCollectionProxy. Virtual interface of a proxy object for a collection class; In particular this is used to implement splitting, emulation,; and TTreeFormula access to STL containers. This class is also known as (typedefs to this class)TCollectionProxyFactory::Proxy_t. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TVirtualCollectionProxy(); virtual void*Allocate(UInt_t n, Bool_t forceDelete); virtual void*At(UInt_t idx); virtual voidClear(const char* opt = """"); virtual voidCommit(void*); virtual voidDeleteArray(void* p, Bool_t dtorOnly = kFALSE); virtual voidDestructor(void* p, Bool_t dtorOnly = kFALSE); virtual TVirtualCollectionProxy*Generate() const; virtual TClass*GetCollectionClass(); virtual Int_tGetCollectionType(); virtual TStreamerInfoActions::TActionSequence*GetConversionReadMemberWiseActions(TClass* oldClass, Int_t version); virtual TVirtualCollectionProxy::CopyIterator_tGetFunctionCopyIterator(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::CreateIterators_tGetFunctionCreateIterators(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::DeleteIterator_tGetFunctionDeleteIterator(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::DeleteTwoIterators_tGetFunctionDeleteTwoIterators(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::Next_tGetFunctionNext(Bool_t read = kTRUE); virtual ULong_tGetIncrement(); virtual Int_tGetProperties(); virtual TStreamerInfoActions::TActionSequence*GetReadMemberWiseActions(Int_t version); virtual EDataTypeGetType(); virtual TClass*GetValueClass(); virtual TStreamerInfoActions::TActionSequence*Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualCollectionProxy.html:453,access,access,453,root/html528/TVirtualCollectionProxy.html,https://root.cern,https://root.cern/root/html528/TVirtualCollectionProxy.html,1,['access'],['access']
Security,". TVirtualCollectionProxy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; inheritance tree (.pdf) viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TVirtualCollectionProxy. class TVirtualCollectionProxy. TVirtualCollectionProxy. Virtual interface of a proxy object for a collection class; In particular this is used to implement splitting, emulation,; and TTreeFormula access to STL containers. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TVirtualCollectionProxy(); virtual void*Allocate(UInt_t n, Bool_t forceDelete); virtual void*At(UInt_t idx); virtual voidClear(const char* opt = """"); virtual voidCommit(void*); virtual voidDeleteArray(void* p, Bool_t dtorOnly = kFALSE) const; virtual voidDestructor(void* p, Bool_t dtorOnly = kFALSE) const; virtual TVirtualCollectionProxy*Generate() const; virtual TClass*GetCollectionClass() const; virtual Int_tGetCollectionType() const; virtual TStreamerInfoActions::TActionSequence*GetConversionReadMemberWiseActions(TClass* oldClass, Int_t version); virtual TVirtualCollectionProxy::CopyIterator_tGetFunctionCopyIterator(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::CreateIterators_tGetFunctionCreateIterators(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::DeleteIterator_tGetFunctionDeleteIterator(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::DeleteTwoIterators_tGetFunctionDeleteTwoIterators(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::Next_tGetFunctionNext(Bool_t read = kTRUE); virtual ULong_tGetIncrement() const; virtual Int_tGetProperties() const; virtual TStreamerInfoActions::TActionSequence*GetReadMemberWiseActions(Int_t version); virtual EDataTypeGetType() const; virtual TClass*GetValueClass() const; virtual TStreamerInfoActions::TActionSequence*GetWriteMemberW",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualCollectionProxy.html:479,access,access,479,root/html602/TVirtualCollectionProxy.html,https://root.cern,https://root.cern/root/html602/TVirtualCollectionProxy.html,1,['access'],['access']
Security,". TVirtualCollectionProxy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TVirtualCollectionProxy. class TVirtualCollectionProxy. TVirtualCollectionProxy. Virtual interface of a proxy object for a collection class; In particular this is used to implement splitting, emulation,; and TTreeFormula access to STL containers. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TVirtualCollectionProxy(); virtual void*Allocate(UInt_t n, Bool_t forceDelete); virtual void*At(UInt_t idx); virtual voidClear(const char* opt = """"); virtual voidCommit(void*); virtual voidDeleteArray(void* p, Bool_t dtorOnly = kFALSE) const; virtual voidDestructor(void* p, Bool_t dtorOnly = kFALSE) const; virtual TVirtualCollectionProxy*Generate() const; virtual TClass*GetCollectionClass() const; virtual Int_tGetCollectionType() const; virtual TStreamerInfoActions::TActionSequence*GetConversionReadMemberWiseActions(TClass* oldClass, Int_t version); virtual TVirtualCollectionProxy::CopyIterator_tGetFunctionCopyIterator(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::CreateIterators_tGetFunctionCreateIterators(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::DeleteIterator_tGetFunctionDeleteIterator(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::DeleteTwoIterators_tGetFunctionDeleteTwoIterators(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::Next_tGetFunctionNext(Bool_t read = kTRUE); virtual ULong_tGetIncrement() const; virtual Int_tGetProperties() const; virtual TStreamerInfoActions::TActionSequence*GetReadMemberWiseActions(Int_t version); virtual EDataTypeGetType() const; virtual TClass*GetValueClass() const; virtual TStreamerInfoActions::TActionSequence*GetWriteMemberWiseActions(); virtual Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TVirtualCollectionProxy.html:455,access,access,455,root/html604/TVirtualCollectionProxy.html,https://root.cern,https://root.cern/root/html604/TVirtualCollectionProxy.html,1,['access'],['access']
Security,". TVirtualCollectionProxy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TVirtualCollectionProxy. class TVirtualCollectionProxy. TVirtualCollectionProxy. Virtual interface of a proxy object for a collection class; In particular this is used to implement splitting, emulation,; and TTreeFormula access to STL containers. This class is also known as (typedefs to this class)TCollectionProxyFactory::Proxy_t. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TVirtualCollectionProxy(); virtual void*Allocate(UInt_t n, Bool_t forceDelete); virtual void*At(UInt_t idx); virtual voidClear(const char* opt = """"); virtual voidCommit(void*); virtual voidDeleteArray(void* p, Bool_t dtorOnly = kFALSE) const; virtual voidDestructor(void* p, Bool_t dtorOnly = kFALSE) const; virtual TVirtualCollectionProxy*Generate() const; virtual TClass*GetCollectionClass() const; virtual Int_tGetCollectionType() const; virtual TStreamerInfoActions::TActionSequence*GetConversionReadMemberWiseActions(TClass* oldClass, Int_t version); virtual TVirtualCollectionProxy::CopyIterator_tGetFunctionCopyIterator(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::CreateIterators_tGetFunctionCreateIterators(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::DeleteIterator_tGetFunctionDeleteIterator(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::DeleteTwoIterators_tGetFunctionDeleteTwoIterators(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::Next_tGetFunctionNext(Bool_t read = kTRUE); virtual ULong_tGetIncrement() const; virtual Int_tGetProperties() const; virtual TStreamerInfoActions::TActionSequence*GetReadMemberWiseActions(Int_t version); virtual EDataTypeGetType() const; virtual TClass*GetValueClass() const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualCollectionProxy.html:455,access,access,455,root/html534/TVirtualCollectionProxy.html,https://root.cern,https://root.cern/root/html534/TVirtualCollectionProxy.html,1,['access'],['access']
Security,". TVirtualCollectionProxy. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TVirtualCollectionProxy. class TVirtualCollectionProxy. TVirtualCollectionProxy. Virtual interface of a proxy object for a collection class; In particular this is used to implement splitting, emulation,; and TTreeFormula access to STL containers. This class is also known as (typedefs to this class)TCollectionProxyFactory::Proxy_t. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TVirtualCollectionProxy(); virtual void*Allocate(UInt_t n, Bool_t forceDelete); virtual void*At(UInt_t idx); virtual voidClear(const char* opt = """"); virtual voidCommit(void*); virtual voidDeleteArray(void* p, Bool_t dtorOnly = kFALSE); virtual voidDestructor(void* p, Bool_t dtorOnly = kFALSE); virtual TVirtualCollectionProxy*Generate() const; virtual TClass*GetCollectionClass(); virtual Int_tGetCollectionType(); virtual TStreamerInfoActions::TActionSequence*GetConversionReadMemberWiseActions(TClass* oldClass, Int_t version); virtual TVirtualCollectionProxy::CopyIterator_tGetFunctionCopyIterator(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::CreateIterators_tGetFunctionCreateIterators(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::DeleteIterator_tGetFunctionDeleteIterator(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::DeleteTwoIterators_tGetFunctionDeleteTwoIterators(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::Next_tGetFunctionNext(Bool_t read = kTRUE); virtual ULong_tGetIncrement(); virtual Int_tGetProperties(); virtual TStreamerInfoActions::TActionSequence*GetReadMemberWiseActions(Int_t version); virtual EDataTypeGetType(); virtual TClass*GetValueClass(); virtual TStreamerInfoActions::TActionSequence*G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVirtualCollectionProxy.html:455,access,access,455,root/html530/TVirtualCollectionProxy.html,https://root.cern,https://root.cern/root/html530/TVirtualCollectionProxy.html,2,['access'],['access']
Security,". TVirtualObject. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TVirtualObject. class TVirtualObject. TVirtualObject. Wrapper around an object and giving indirect access to its content; even if the object is not of a class in the Cint/Reflex dictionary. Function Members (Methods); public:. TVirtualObject(TClass* cl); ~TVirtualObject(); TClass*GetClass() const; void*GetObject() const. private:. TVirtualObject(const TVirtualObject&); TVirtualObject&operator=(const TVirtualObject&). Data Members; public:. TClassReffClass; void*fObject. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TVirtualObject(const TVirtualObject& ). TVirtualObject & operator=(const TVirtualObject& ). TVirtualObject(TClass* cl); { }. ~TVirtualObject(); { if (fClass) fClass->Destructor(fObject); }. TClass * GetClass() const; { return fClass; }. void * GetObject() const; { return fObject; }. » Author: Philippe Canal July, 2008 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TVirtualObject.h 30902 2009-10-28 15:13:43Z pcanal $ » Last generated: 2010-09-23 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualObject.html:318,access,access,318,root/html528/TVirtualObject.html,https://root.cern,https://root.cern/root/html528/TVirtualObject.html,1,['access'],['access']
Security,". TVirtualObject. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; inheritance tree (.pdf) viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TVirtualObject. class TVirtualObject. TVirtualObject. Wrapper around an object and giving indirect access to its content; even if the object is not of a class in the Cint/Reflex dictionary. Function Members (Methods); public:. ~TVirtualObject(); TClass*GetClass() const; void*GetObject() const; TVirtualObject(TClass* cl). private:. TVirtualObject&operator=(const TVirtualObject&); TVirtualObject(const TVirtualObject&). Data Members; public:. TClassReffClass; void*fObject. Class Charts. Inheritance Chart:. TVirtualObject. Function documentation; TVirtualObject(const TVirtualObject& ). TVirtualObject & operator=(const TVirtualObject& ). TVirtualObject(TClass* cl); { }. ~TVirtualObject(); { if (fClass) fClass->Destructor(fObject); }. TClass * GetClass() const; { return fClass; }. void * GetObject() const; { return fObject; }. » Author: Philippe Canal July, 2008 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualObject.html:344,access,access,344,root/html602/TVirtualObject.html,https://root.cern,https://root.cern/root/html602/TVirtualObject.html,1,['access'],['access']
Security,". TVirtualObject. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TVirtualObject. class TVirtualObject. TVirtualObject. Wrapper around an object and giving indirect access to its content; even if the object is not of a class in the Cint/Reflex dictionary. Function Members (Methods); public:. TVirtualObject(TClass* cl); ~TVirtualObject(); TClass*GetClass() const; void*GetObject() const. private:. TVirtualObject(const TVirtualObject&); TVirtualObject&operator=(const TVirtualObject&). Data Members; public:. TClassReffClass; void*fObject. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TVirtualObject(const TVirtualObject& ). TVirtualObject & operator=(const TVirtualObject& ). TVirtualObject(TClass* cl); { }. ~TVirtualObject(); { if (fClass) fClass->Destructor(fObject); }. TClass * GetClass() const; { return fClass; }. void * GetObject() const; { return fObject; }. » Author: Philippe Canal July, 2008 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-09-08 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualObject.html:320,access,access,320,root/html534/TVirtualObject.html,https://root.cern,https://root.cern/root/html534/TVirtualObject.html,1,['access'],['access']
Security,". TVirtualObject. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TVirtualObject. class TVirtualObject. TVirtualObject. Wrapper around an object and giving indirect access to its content; even if the object is not of a class in the Cint/Reflex dictionary. Function Members (Methods); public:. TVirtualObject(TClass* cl); ~TVirtualObject(); TClass*GetClass() const; void*GetObject() const. private:. TVirtualObject(const TVirtualObject&); TVirtualObject&operator=(const TVirtualObject&). Data Members; public:. TClassReffClass; void*fObject. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TVirtualObject(const TVirtualObject& ). TVirtualObject & operator=(const TVirtualObject& ). TVirtualObject(TClass* cl); { }. ~TVirtualObject(); { if (fClass) fClass->Destructor(fObject); }. TClass * GetClass() const; { return fClass; }. void * GetObject() const; { return fObject; }. » Author: Philippe Canal July, 2008 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TVirtualObject.h 30902 2009-10-28 15:13:43Z pcanal $ » Last generated: 2011-07-04 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVirtualObject.html:320,access,access,320,root/html530/TVirtualObject.html,https://root.cern,https://root.cern/root/html530/TVirtualObject.html,1,['access'],['access']
Security,". TVirtualObject. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TVirtualObject. class TVirtualObject. TVirtualObject. Wrapper around an object and giving indirect access to its content; even if the object is not of a class in the Cint/Reflex dictionary. Function Members (Methods); public:. TVirtualObject(TClass* cl); ~TVirtualObject(); TClass*GetClass() const; void*GetObject() const. private:. TVirtualObject(const TVirtualObject&); TVirtualObject&operator=(const TVirtualObject&). Data Members; public:. TClassReffClass; void*fObject. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TVirtualObject(const TVirtualObject& ). TVirtualObject & operator=(const TVirtualObject& ). TVirtualObject(TClass* cl); { }. ~TVirtualObject(); { if (fClass) fClass->Destructor(fObject); }. TClass * GetClass() const; { return fClass; }. void * GetObject() const; { return fObject; }. » Author: Philippe Canal July, 2008 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TVirtualObject.h 30902 2009-10-28 15:13:43Z pcanal $ » Last generated: 2011-11-03 20:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TVirtualObject.html:320,access,access,320,root/html532/TVirtualObject.html,https://root.cern,https://root.cern/root/html532/TVirtualObject.html,1,['access'],['access']
Security,". TVirtualObject. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » IO; » IO; » TVirtualObject. class TVirtualObject. TVirtualObject. Wrapper around an object and giving indirect access to its content; even if the object is not of a class in the Cint/Reflex dictionary. Function Members (Methods); public:. ~TVirtualObject(); TClass*GetClass() const; void*GetObject() const; TVirtualObject(TClass* cl). private:. TVirtualObject&operator=(const TVirtualObject&); TVirtualObject(const TVirtualObject&). Data Members; public:. TClassReffClass; void*fObject. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TVirtualObject(const TVirtualObject& ). TVirtualObject & operator=(const TVirtualObject& ). TVirtualObject(TClass* cl); { }. ~TVirtualObject(); { if (fClass) fClass->Destructor(fObject); }. TClass * GetClass() const; { return fClass; }. void * GetObject() const; { return fObject; }. » Author: Philippe Canal July, 2008 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id$ » Last generated: 2015-09-08 17:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TVirtualObject.html:320,access,access,320,root/html604/TVirtualObject.html,https://root.cern,https://root.cern/root/html604/TVirtualObject.html,1,['access'],['access']
Security,". TVolumeViewIter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MISC; » TABLE; » TVolumeViewIter. class TVolumeViewIter: public TDataSetIter. TVolumeViewIter is a special class-iterator to; iterate over GEANT geometry dataset TVolumeView.; Class should provide a ""standard"" well-known; ""TDataSetIter"" interface to navigate and access; the geometry information supplied by Tgeant_Maker; as the TVolume object. Apart of the the base; TDataSetIter this special class may supply; not only pointer to the selected dataset but some; ""position"" information (like translate vectors and; rotation matrice). Function Members (Methods); public:. virtual~TVolumeViewIter(); voidTObject::AbstractMethod(const char* method) const; virtual TDataSet*TDataSetIter::Add(TDataSet* set); virtual TDataSet*TDataSetIter::Add(TDataSet* set, const Char_t* path); virtual TDataSet*TDataSetIter::Add(TDataSet* set, TDataSet* dataset); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual TDataSet*TDataSetIter::Cd(const Char_t* dirname); virtual TDataSet*TDataSetIter::Cd(TDataSet* ds); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual TDataSet*TDataSetIter::Cwd() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTDataSetIter::Df() const; virtual TDataSet*TDataSetIter::Dir(Char_t* dirname); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVolumeViewIter.html:521,access,access,521,root/html602/TVolumeViewIter.html,https://root.cern,https://root.cern/root/html602/TVolumeViewIter.html,2,['access'],['access']
Security,". TVolumeViewIter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MISC; » TABLE; » TVolumeViewIter. class TVolumeViewIter: public TDataSetIter. TVolumeViewIter is a special class-iterator to; iterate over GEANT geometry dataset TVolumeView.; Class should provide a ""standard"" well-known; ""TDataSetIter"" interface to navigate and access; the geometry information supplied by Tgeant_Maker; as the TVolume object. Apart of the the base; TDataSetIter this special class may supply; not only pointer to the selected dataset but some; ""position"" information (like translate vectors and; rotation matrice). Function Members (Methods); public:. TVolumeViewIter(TVolumeView* view, Int_t depth = 1, Bool_t dir = kIterForward); virtual~TVolumeViewIter(); voidTObject::AbstractMethod(const char* method) const; virtual TDataSet*TDataSetIter::Add(TDataSet* set); virtual TDataSet*TDataSetIter::Add(TDataSet* set, const Char_t* path); virtual TDataSet*TDataSetIter::Add(TDataSet* set, TDataSet* dataset); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual TDataSet*TDataSetIter::Cd(const Char_t* dirname); virtual TDataSet*TDataSetIter::Cd(TDataSet* ds); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual TDataSet*TDataSetIter::Cwd() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTDataSetIter::Df() const; virtual TDataSet*TDataSetIter::Dir(Char_t* dirname); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVolumeViewIter.html:497,access,access,497,root/html534/TVolumeViewIter.html,https://root.cern,https://root.cern/root/html534/TVolumeViewIter.html,1,['access'],['access']
Security,". TVolumeViewIter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » MISC; » TABLE; » TVolumeViewIter. class TVolumeViewIter: public TDataSetIter. TVolumeViewIter is a special class-iterator to; iterate over GEANT geometry dataset TVolumeView.; Class should provide a ""standard"" well-known; ""TDataSetIter"" interface to navigate and access; the geometry information supplied by Tgeant_Maker; as the TVolume object. Apart of the the base; TDataSetIter this special class may supply; not only pointer to the selected dataset but some; ""position"" information (like translate vectors and; rotation matrice). Function Members (Methods); public:. TVolumeViewIter(const TVolumeViewIter&); TVolumeViewIter(TVolumeView* view, Int_t depth = 1, Bool_t dir = kIterForward); virtual~TVolumeViewIter(); voidTObject::AbstractMethod(const char* method) const; virtual TDataSet*TDataSetIter::Add(TDataSet* set); virtual TDataSet*TDataSetIter::Add(TDataSet* set, const Char_t* path); virtual TDataSet*TDataSetIter::Add(TDataSet* set, TDataSet* dataset); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual TDataSet*TDataSetIter::Cd(const Char_t* dirname); virtual TDataSet*TDataSetIter::Cd(TDataSet* ds); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual TDataSet*TDataSetIter::Cwd() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTDataSetIter::Df() const; virtual TDataSet*TDataSetIter::Dir(Char_t* dirname); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVolumeViewIter.html:497,access,access,497,root/html528/TVolumeViewIter.html,https://root.cern,https://root.cern/root/html528/TVolumeViewIter.html,3,['access'],['access']
Security,". TXMLNode. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XMLPARSER; » TXMLNode. class TXMLNode: public TObject. TXMLNode. TXMLNode contains a pointer to xmlNode, which is a node under the; DOM tree. A node can be an Element, an Attribute, a Text Node; or a Comment Node.; One can navigate the DOM tree by accessing the siblings and; parent or child nodes. Also retriving the Attribute or the Text in; an Element node. Function Members (Methods); public:. virtual~TXMLNode(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TList*GetAttributes(); TXMLNode*GetChildren(); const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXMLNode.html:505,access,accessing,505,root/html602/TXMLNode.html,https://root.cern,https://root.cern/root/html602/TXMLNode.html,2,['access'],['accessing']
Security,". TXMLNode. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » IO; » XMLPARSER; » TXMLNode. class TXMLNode: public TObject. TXMLNode. TXMLNode contains a pointer to xmlNode, which is a node under the; DOM tree. A node can be an Element, an Attribute, a Text Node; or a Comment Node.; One can navigate the DOM tree by accessing the siblings and; parent or child nodes. Also retriving the Attribute or the Text in; an Element node. Function Members (Methods); public:. TXMLNode(_xmlNode* node, TXMLNode* parent = 0, TXMLNode* previous = 0); virtual~TXMLNode(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TLis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLNode.html:481,access,accessing,481,root/html528/TXMLNode.html,https://root.cern,https://root.cern/root/html528/TXMLNode.html,4,['access'],['accessing']
Security,". The ""Undo"" button becomes active after the first modification has been applied. It allows restoring the initial parameters of the shape.; NOTE: In this version the ""Undo"" does not allow restoring an intermediate state of the parameters that was applied - it will always restore the parameters at the moment the shape was edited.; All material properties changes are undoable. The mixture editor currently allows adding elements one by one in the mixture composition. This can be done either by element weight fraction or by number of atoms. Once an element was added using one method the other method is not selectable anymore. Summing component fractions up to 1 in the final mixture is the user responsibility. Adding materials as components of a mixture is not supported in this version.; The elements that were added to the mixture appear in the bottom of the mixture editor. The operations performed on mixture are not undoable. Creation of New Objects; As described above, all geometry object creators are accessible within the geometry manager editor frame. Generally, if the new object that needs to be created does not depend on other objects, it will be built with a set of default parameters. This is the case for all shapes (except composite shapes) and matrices. For all the other objects the interface forces the selection of components before creating the object. Editing Volumes; Volumes are hierarchical components in the geometry, therefore their editor is more complex. It provides the following functionalities:. General. This category allows changing the name of the volume and selecting other shape or medium among existing ones.; Daughters. The category allows removing existing daughter nodes or adding new ones. The button ""Position"" allows editing the positioning matrix of a given node. Setting volume properties and modifying volume hierarchy. Visualization. This category allows changing the visibility of the edited volume or for its daughters, as well as other visuali",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:141969,access,accessible,141969,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['access'],['accessible']
Security,". The histogram fill style is set with:; root[] h->SetFillStyle(style); The convention for style is: 0:hollow, 1001:solid, 2001:hatch style, 3000+pattern number:patterns, 4000 to 4100:transparency, 4000:fully transparent, 4100: fully opaque.; Fill styles >3100 and <3999 are hatches. They are defined according to the FillStyle=3ijk value as follows:. i(1-9) specifies the space between each hatch (1=minimum space, 9=maximum). The final spacing is set by SetHatchesSpacing() method and it is*GetHatchesSpacing().; j(0-9) specifies the angle between 0 and 90 degres as follows: 0=0, 1=10, 2=20, 3=30, 4=45, 5=not drawn, 6=60, 7=70, 8=80 and 9=90.; k(0-9) specifies the angle between 0 and 90 degres as follows: 0=180, 1=170, 2=160, 3=150, 4=135, 5=not drawn, 6=120, 7=110, 8=100 and 9=90. The various patterns. 9.6.4 Color and Color Palettes; At initialization time, a table of basic colors is generated when the first Canvas constructor is called. This table is a linked list, which can be accessed from the gROOT object (see TROOT::GetListOfColors()). Each color has an index and when a basic color is defined, two “companion” colors are defined: the dark version and the bright version. Two static functions are available that return the bright or dark color number corresponding to a given color index. If these variants don’t already exist, they are created as needed:; Int_t dark = TColor::GetColorDark(color_index);; Int_t bright = TColor::GetColorBright(color_index);; The dark and bright colors are used to give 3-D effects when drawing various boxes (see TWbox, TPave, TPaveText, TPaveLabel, etc). If you have a black and white copy of the manual, here are the basic colors and their indices. The basic ROOT colors. The list of currently supported basic colors (here dark and bright colors are not shown) are shown. The color numbers specified in the basic palette, and the picture above, can be viewed by selecting the menu entry Colors in the View canvas menu. The user may define other co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:361109,access,accessed,361109,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['access'],['accessed']
Security,". Using TTree::Draw() to access a TTree | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Using TTree::Draw() to access a TTree. Now close the browser, quit and restart",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/using-ttreedraw-access-ttree.html:25,access,access,25,d/using-ttreedraw-access-ttree.html,https://root.cern,https://root.cern/d/using-ttreedraw-access-ttree.html,1,['access'],['access']
Security,". inline . Definition at line 206 of file DataSet.h. ◆ GetNEvtBkgdTest(). Long64_t TMVA::DataSet::GetNEvtBkgdTest ; (; ). return number of background test events in dataset ; Definition at line 435 of file DataSet.cxx. ◆ GetNEvtBkgdTrain(). Long64_t TMVA::DataSet::GetNEvtBkgdTrain ; (; ). return number of background training events in dataset ; Definition at line 451 of file DataSet.cxx. ◆ GetNEvtSigTest(). Long64_t TMVA::DataSet::GetNEvtSigTest ; (; ). return number of signal test events in dataset ; Definition at line 427 of file DataSet.cxx. ◆ GetNEvtSigTrain(). Long64_t TMVA::DataSet::GetNEvtSigTrain ; (; ). return number of signal training events in dataset ; Definition at line 443 of file DataSet.cxx. ◆ GetNSpectators(). UInt_t TMVA::DataSet::GetNSpectators ; (; ); const. access the number of targets through the datasetinfo ; Definition at line 232 of file DataSet.cxx. ◆ GetNTargets(). UInt_t TMVA::DataSet::GetNTargets ; (; ); const. access the number of targets through the datasetinfo ; Definition at line 224 of file DataSet.cxx. ◆ GetNTestEvents(). Long64_t TMVA::DataSet::GetNTestEvents ; (; ); const. inline . Definition at line 69 of file DataSet.h. ◆ GetNTrainingEvents(). Long64_t TMVA::DataSet::GetNTrainingEvents ; (; ); const. inline . Definition at line 68 of file DataSet.h. ◆ GetNVariables(). UInt_t TMVA::DataSet::GetNVariables ; (; ); const. access the number of variables through the datasetinfo ; Definition at line 216 of file DataSet.cxx. ◆ GetResults(). TMVA::Results * TMVA::DataSet::GetResults ; (; const TString & ; resultsName, . Types::ETreeType ; type, . Types::EAnalysisType ; analysistype . ). Definition at line 265 of file DataSet.cxx. ◆ GetTestEvent(). const Event * TMVA::DataSet::GetTestEvent ; (; Long64_t ; ievt); const. inline . Definition at line 75 of file DataSet.h. ◆ GetTrainingEvent(). const Event * TMVA::DataSet::GetTrainingEvent ; (; Long64_t ; ievt); const. inline . Definition at line 74 of file DataSet.h. ◆ GetTree(). TTree * TMVA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSet.html:21597,access,access,21597,doc/master/classTMVA_1_1DataSet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSet.html,1,['access'],['access']
Security,". protected:. TStringAccessHeader(TString& buf, const char* name, const char* value = 0, Bool_t doing_set = kFALSE); TStringCountHeader(const TString& buf, Int_t number = -1111) const; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Bool_tIsBinData() const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. void*fBinData! binary data, assigned with http call; Long_tfBinDataLength! length of binary data; TConditionfCond! condition used to wait for processing; TStringfContent! text content (if any); TStringfContentType! type of content; TStringfFileName! file name; TStringfHeader! response header like ContentEncoding, Cache-Control and so on; TStringfMethod! request method like GET or POST; TStringfPathName! item path; void*fPostData! binary data received with post request; Long_tfPostDataLength! length of binary data; TStringfQuery! additional arguments; TStringfRequestHeader! complete header, provided with request; TStringfTopName! top item name; TStringfUserName! authenticated user name (if any); Int_tfZipping! indicate if content should be zipped. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THttpCallArg(); constructor. ~THttpCallArg(); destructor. TString AccessHeader(TString& buf, const char* name, const char* value = 0, Bool_t doing_set = kFALSE); method used to get or set http header in the string buffer; Header has following format:; field1 : value1\r\n; field2 : value2\r\n; Such format corresponds to header format in HTTP requests. TString CountHeader(const TString& buf, Int_t number = -1111) const; method used to counter number of headers or returns name of specified header. void SetPostData(void* data, L",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THttpCallArg.html:7533,authenticat,authenticated,7533,root/html534/THttpCallArg.html,https://root.cern,https://root.cern/root/html534/THttpCallArg.html,1,['authenticat'],['authenticated']
Security,". static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSocket::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSocket::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 171 of file TSocket.h. ◆ Close(). void TSocket::Close ; (; Option_t * ; option = """"). virtual . Close the socket. ; If option is ""force"", calls shutdown(id,2) to shut down the connection. This will close the connection also for the parent of this process. Also called via the dtor (without option ""force"", call explicitly Close(""force"") if this is desired). ; Reimplemented in TPSocket, and TSSLSocket.; Definition at line 389 of file TSocket.cxx. ◆ CreateAuthSocket() [1/2]. TSocket * TSocket::CreateAuthSocket ; (; const char * ; url, . Int_t ; size = 0, . Int_t ; tcpwindowsize = -1, . TSocket * ; opensock = nullptr, . Int_t * ; err = nullptr . ). static . Creates a socket or a parallel socket and authenticates to the remote server. ; url: [[proto][p][auth]://][user@]host[:port][/service][?options]; where proto = ""sockd"", ""rootd"", ""proofd"" indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates any remote server session using TServerSocket) [p] = for parallel sockets (forced internally for rootd; ignored for proofd) [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication [port] = is the remote port number [service] = service name used to determine the port (for backward compatibility, specification of port as priority) options = ""m"" or ""s"", when proto=proofd indicates whether we are master or slave (used internally by TSlave); An already opened connection can be used by passing its socket in opensock.; If 'err' is defined, '*err' on return from a failed call contains an error code (see NetErrors.h).; Example:; TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3); creates an authenticated parallel socket of size 3 to a sockd server r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSocket.html:23348,authenticat,authenticates,23348,doc/master/classTSocket.html,https://root.cern,https://root.cern/doc/master/classTSocket.html,1,['authenticat'],['authenticates']
Security,". template Int_t TStreamerInfo::ReadBufferConv< TVirtualArray > ; (; TBuffer & ; b, . const T & ; arrptr, . const TCompInfo * ; compinfo, . Int_t ; kase, . TStreamerElement * ; aElement, . Int_t ; narr, . Int_t ; eoffset . ). Convert elements of a TClonesArray. ; Definition at line 568 of file TStreamerInfoReadBuffer.cxx. ◆ ReadBufferSkip(). template<class T > . template Int_t TStreamerInfo::ReadBufferSkip< TVirtualArray > ; (; TBuffer & ; b, . const T & ; arrptr, . const TCompInfo * ; compinfo, . Int_t ; kase, . TStreamerElement * ; aElement, . Int_t ; narr, . Int_t ; eoffset . ). Skip an element. ; Definition at line 182 of file TStreamerInfoReadBuffer.cxx. ◆ ReadBufferSTL(). Int_t TStreamerInfo::ReadBufferSTL ; (; TBuffer & ; b, . TVirtualCollectionProxy * ; cont, . Int_t ; nc, . Int_t ; eoffset, . Bool_t ; v7 = kTRUE . ). The STL vector/list is deserialized from the buffer b. ; Definition at line 1737 of file TStreamerInfoReadBuffer.cxx. ◆ SetCheckSum(). void TStreamerInfo::SetCheckSum ; (; UInt_t ; checksum). inlineoverridevirtual . Implements TVirtualStreamerInfo.; Definition at line 218 of file TStreamerInfo.h. ◆ SetClass(). void TStreamerInfo::SetClass ; (; TClass * ; cl). overridevirtual . Replace the TClass this streamerInfo is pointing to (belongs to) ; Implements TVirtualStreamerInfo.; Definition at line 5254 of file TStreamerInfo.cxx. ◆ SetClassVersion(). void TStreamerInfo::SetClassVersion ; (; Int_t ; vers). inlineoverridevirtual . Implements TVirtualStreamerInfo.; Definition at line 220 of file TStreamerInfo.h. ◆ SetOnFileClassVersion(). void TStreamerInfo::SetOnFileClassVersion ; (; Int_t ; vers). inline . Definition at line 221 of file TStreamerInfo.h. ◆ Streamer(). void TStreamerInfo::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TStreamerInfo. ; Reimplemented from TNamed.; Definition at line 5266 of file TStreamerInfo.cxx. ◆ StreamerNVirtual(). void TStreamerInfo::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerInfo.html:64736,checksum,checksum,64736,doc/master/classTStreamerInfo.html,https://root.cern,https://root.cern/doc/master/classTStreamerInfo.html,1,['checksum'],['checksum']
Security,". thus, the server must have real files */; 14283#if defined(NO_FILES); 14284 if (1) {; 14285#else; 14286 if (conn->dom_ctx->config[DOCUMENT_ROOT] == NULL) {; 14287#endif; 14288 /* This code path will not be called for request handlers */; 14289 DEBUG_ASSERT(handler_info == NULL);; 14290 ; 14291 /* This server does not have any real files, thus the; 14292 * PUT/DELETE methods are not valid. */; 14293 mg_send_http_error(conn,; 14294 405,; 14295 ""%s method not allowed"",; 14296 conn->request_info.request_method);; 14297 return;; 14298 }; 14299 ; 14300#if !defined(NO_FILES); 14301 /* 6.2.2. Check if put authorization for static files is; 14302 * available.; 14303 */; 14304 if (!is_authorized_for_put(conn)) {; 14305 send_authorization_request(conn, NULL);; 14306 return;; 14307 }; 14308#endif; 14309 ; 14310 } else {; 14311 /* 6.3. This is either a OPTIONS, GET, HEAD or POST request,; 14312 * or it is a PUT or DELETE request to a resource that does not; 14313 * correspond to a file. Check authorization. */; 14314 if (!check_authorization(conn, path)) {; 14315 send_authorization_request(conn, NULL);; 14316 ; 14317 /* Callback handler will not be used anymore. Release it */; 14318 release_handler_ref(conn, handler_info);; 14319 ; 14320 return;; 14321 }; 14322 }; 14323 ; 14324 /* request is authorized or does not need authorization */; 14325 ; 14326 /* 7. check if there are request handlers for this uri */; 14327 if (is_callback_resource) {; 14328 HTTP1_only;; 14329 if (!is_websocket_request) {; 14330 i = callback_handler(conn, callback_data);; 14331 ; 14332 /* Callback handler will not be used anymore. Release it */; 14333 release_handler_ref(conn, handler_info);; 14334 ; 14335 if (i > 0) {; 14336 /* Do nothing, callback has served the request. Store; 14337 * then return value as status code for the log and discard; 14338 * all data from the client not used by the callback. */; 14339 conn->status_code = i;; 14340 if (!conn->must_close) {; 14341 discard_unread_request_data(con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:421006,authoriz,authorization,421006,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['authoriz'],['authorization']
Security,". thus, the server must have real files */; 14284#if defined(NO_FILES); 14285 if (1) {; 14286#else; 14287 if (conn->dom_ctx->config[DOCUMENT_ROOT] == NULL) {; 14288#endif; 14289 /* This code path will not be called for request handlers */; 14290 DEBUG_ASSERT(handler_info == NULL);; 14291 ; 14292 /* This server does not have any real files, thus the; 14293 * PUT/DELETE methods are not valid. */; 14294 mg_send_http_error(conn,; 14295 405,; 14296 ""%s method not allowed"",; 14297 conn->request_info.request_method);; 14298 return;; 14299 }; 14300 ; 14301#if !defined(NO_FILES); 14302 /* 6.2.2. Check if put authorization for static files is; 14303 * available.; 14304 */; 14305 if (!is_authorized_for_put(conn)) {; 14306 send_authorization_request(conn, NULL);; 14307 return;; 14308 }; 14309#endif; 14310 ; 14311 } else {; 14312 /* 6.3. This is either a OPTIONS, GET, HEAD or POST request,; 14313 * or it is a PUT or DELETE request to a resource that does not; 14314 * correspond to a file. Check authorization. */; 14315 if (!check_authorization(conn, path)) {; 14316 send_authorization_request(conn, NULL);; 14317 ; 14318 /* Callback handler will not be used anymore. Release it */; 14319 release_handler_ref(conn, handler_info);; 14320 ; 14321 return;; 14322 }; 14323 }; 14324 ; 14325 /* request is authorized or does not need authorization */; 14326 ; 14327 /* 7. check if there are request handlers for this uri */; 14328 if (is_callback_resource) {; 14329 HTTP1_only;; 14330 if (!is_websocket_request) {; 14331 i = callback_handler(conn, callback_data);; 14332 ; 14333 /* Callback handler will not be used anymore. Release it */; 14334 release_handler_ref(conn, handler_info);; 14335 ; 14336 if (i > 0) {; 14337 /* Do nothing, callback has served the request. Store; 14338 * then return value as status code for the log and discard; 14339 * all data from the client not used by the callback. */; 14340 conn->status_code = i;; 14341 if (!conn->must_close) {; 14342 discard_unread_request_data(con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:421039,authoriz,authorization,421039,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['authoriz'],['authorization']
Security,". virtual void TMVA::DataSet::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::DataSet::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 175 of file DataSet.h. ◆ TreeIndex(). UInt_t TMVA::DataSet::TreeIndex ; (; Types::ETreeType ; type); const. inline . Definition at line 181 of file DataSet.h. Member Data Documentation. ◆ fBlockBelongToTraining. std::vector<Char_t> TMVA::DataSet::fBlockBelongToTraining. private . when dividing the dataset to blocks, sets whether the certain block is in the Training set or else in the validation set boolean are stored, taken std::vector<Char_t> for performance reasons (instead of std::vector<Bool_t>) ; Definition at line 165 of file DataSet.h. ◆ fClassEvents. std::vector< std::vector<Long64_t> > TMVA::DataSet::fClassEvents. private . number of events of class 0,1,2,... in training[0] and testing[1] (+validation, trainingoriginal) ; Definition at line 158 of file DataSet.h. ◆ fCurrentEventIdx. Long64_t TMVA::DataSet::fCurrentEventIdx. mutableprivate . Definition at line 146 of file DataSet.h. ◆ fCurrentTreeIdx. UInt_t TMVA::DataSet::fCurrentTreeIdx. mutableprivate . Definition at line 145 of file DataSet.h. ◆ fdsi. const DataSetInfo* TMVA::DataSet::fdsi. private . -> datasetinfo that created this dataset ; Definition at line 139 of file DataSet.h. ◆ fEventCollection. std::vector< std::vector<Event*> > TMVA::DataSet::fEventCollection. private . list of events for training/testing/... ; Definition at line 141 of file DataSet.h. ◆ fHasNegativeEventWeights. Bool_t TMVA::DataSet::fHasNegativeEventWeights. private . true if at least one signal or bkg event has negative weight ; Definition at line 161 of file DataSet.h. ◆ fLogger. MsgLogger* TMVA::DataSet::fLogger. mutableprivate . ! message logger ; Definition at line 163 of file DataSet.h. ◆ fResults. std::vector< std::map< TString, Results* > > TMVA::Data",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSet.html:25537,validat,validation,25537,doc/master/classTMVA_1_1DataSet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSet.html,1,['validat'],['validation']
Security,". void SetCompressionAlgorithm(Int_t algorithm = 0). void SetCompressionLevel(Int_t level = 1). void SetCompressionSettings(Int_t settings = 1). void SetEntryOffsetLen(Int_t len, Bool_t updateSubBranches = kFALSE); Update the default value for the branch's fEntryOffsetLen if and only if; it was already non zero (and the new value is not zero); If updateExisting is true, also update all the existing branches. void SetEntries(Long64_t entries); Set the number of entries in this branch. void SetFile(TFile* file = 0); Set file where this branch writes/reads its buffers.; By default the branch buffers reside in the file where the; Tree was created.; If the file name where the tree was created is an absolute; path name or an URL (e.g. /castor/... or root://host/...); and if the fname is not an absolute path name or an URL then; the path of the tree file is prepended to fname to make the; branch file relative to the tree file. In this case one can; move the tree + all branch files to a different location in; the file system and still access the branch files.; The ROOT file will be connected only when necessary.; If called by TBranch::Fill (via TBasket::WriteFile), the file; will be created with the option ""recreate"".; If called by TBranch::GetEntry (via TBranch::GetBasket), the file; will be opened in read mode.; To open a file in ""update"" mode or with a certain compression; level, use TBranch::SetFile(TFile *file). void SetFile(const char* filename); Set file where this branch writes/reads its buffers.; By default the branch buffers reside in the file where the; Tree was created.; If the file name where the tree was created is an absolute; path name or an URL (e.g. /castor/... or root://host/...); and if the fname is not an absolute path name or an URL then; the path of the tree file is prepended to fname to make the; branch file relative to the tree file. In this case one can; move the tree + all branch files to a different location in; the file system and still access t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBranch.html:27087,access,access,27087,root/html530/TBranch.html,https://root.cern,https://root.cern/root/html530/TBranch.html,5,['access'],['access']
Security,". void TSQLFile::InitSqlDatabase ; (; Bool_t ; create). protected . initialize sql database and correspondent structures identical to TFile::Init() function ; Definition at line 998 of file TSQLFile.cxx. ◆ IsA(). TClass * TSQLFile::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TFile.; Definition at line 254 of file TSQLFile.h. ◆ IsLongStringCode(). Int_t TSQLFile::IsLongStringCode ; (; Long64_t ; objid, . const char * ; value . ). protected . Checks if this is long string code returns 0, if not or string id. ; Definition at line 2225 of file TSQLFile.cxx. ◆ IsMySQL(). Bool_t TSQLFile::IsMySQL ; (; ); const. checks, if MySQL database ; Definition at line 467 of file TSQLFile.cxx. ◆ IsODBC(). Bool_t TSQLFile::IsODBC ; (; ); const. checks, if ODBC driver used for database connection ; Definition at line 487 of file TSQLFile.cxx. ◆ IsOpen(). Bool_t TSQLFile::IsOpen ; (; ); const. finalvirtual . return kTRUE if file is opened and can be accessed ; Reimplemented from TFile.; Definition at line 710 of file TSQLFile.cxx. ◆ IsOracle(). Bool_t TSQLFile::IsOracle ; (; ); const. checks, if Oracle database ; Definition at line 477 of file TSQLFile.cxx. ◆ IsReadAccess(). Bool_t TSQLFile::IsReadAccess ; (; ). protected . dummy, in future should check about read access to database ; Definition at line 1372 of file TSQLFile.cxx. ◆ IsTablesExists(). Bool_t TSQLFile::IsTablesExists ; (; ). protected . Checks if main keys table is existing. ; Definition at line 1318 of file TSQLFile.cxx. ◆ IsWriteAccess(). Bool_t TSQLFile::IsWriteAccess ; (; ). protected . Checkis, if lock is free in configuration tables. ; Definition at line 1326 of file TSQLFile.cxx. ◆ MakeFree(). void TSQLFile::MakeFree ; (; Long64_t ; first, . Long64_t ; last . ). inlinefinalvirtual . Mark unused bytes on the file. ; The list of free segments is in the fFree linked list. When an object is deleted from the file, the freed space is added into the FREE linked li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:73420,access,accessed,73420,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,1,['access'],['accessed']
Security,". voidNotSupported(const char* func) const. private:. TEveListTreeItem&operator=(const TEveListTreeItem&); TEveListTreeItem(const TEveListTreeItem&). Data Members; protected:. TGClient*TGListTreeItem::fClientpointer to TGClient; Int_tTGListTreeItem::fDNDStateEDNDFlags; TEveElement*fElement; TGListTreeItem*TGListTreeItem::fFirstchildpointer to first child item; UInt_tTGListTreeItem::fHeightitem height; TGListTreeItem*TGListTreeItem::fLastchildpointer to last child item; TGListTreeItem*TGListTreeItem::fNextsiblingpointer to next sibling; Bool_tTGListTreeItem::fOpentrue if item is open; TGListTreeItem*TGListTreeItem::fParentpointer to parent; TGListTreeItem*TGListTreeItem::fPrevsiblingpointer to previous sibling; Int_tTGListTreeItem::fXtextx position of item text; Int_tTGListTreeItem::fYy position of item; Int_tTGListTreeItem::fYtexty position of item text. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void NotSupported(const char* func) const; Warn about access to function members that should never be called.; TGListTree calls them in cases that are not used by Eve. Pixel_t GetActiveColor() const; Return highlight color corresponding to current state of TEveElement. void Toggle(); Item's check-box state has been toggled ... forward to element's; render-state. TEveListTreeItem(const TEveListTreeItem& ). TEveListTreeItem& operator=(const TEveListTreeItem& ). TEveListTreeItem(TEveElement* el); {}. virtual ~TEveListTreeItem(); {}. Bool_t IsActive() const; { return fElement->GetSelectedLevel() != 0; }. void SetActive(Bool_t ); { NotSupported(""SetActive""); }. const char * GetText() const; { return fElement->GetElementName(); }. Int_t GetTextLength() const; { return strlen(fElement->GetElementName()); }. const char * GetTipText() const; { return fElement->GetElementTitle(); }. Int_t GetTipTextLength() const; { return strlen(fElement->GetElementTitle()); }. void SetText(const char* ); { NotSupported(""SetText""); }. void SetTipText(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveListTreeItem.html:3935,access,access,3935,root/html602/TEveListTreeItem.html,https://root.cern,https://root.cern/root/html602/TEveListTreeItem.html,2,['access'],['access']
Security,". voidNotSupported(const char* func) const. private:. TEveListTreeItem(const TEveListTreeItem&); TEveListTreeItem&operator=(const TEveListTreeItem&). Data Members; protected:. TGClient*TGListTreeItem::fClientpointer to TGClient; Int_tTGListTreeItem::fDNDStateEDNDFlags; TEveElement*fElement; TGListTreeItem*TGListTreeItem::fFirstchildpointer to first child item; UInt_tTGListTreeItem::fHeightitem height; TGListTreeItem*TGListTreeItem::fLastchildpointer to last child item; TGListTreeItem*TGListTreeItem::fNextsiblingpointer to next sibling; Bool_tTGListTreeItem::fOpentrue if item is open; TGListTreeItem*TGListTreeItem::fParentpointer to parent; TGListTreeItem*TGListTreeItem::fPrevsiblingpointer to previous sibling; Int_tTGListTreeItem::fXtextx position of item text; Int_tTGListTreeItem::fYy position of item; Int_tTGListTreeItem::fYtexty position of item text. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void NotSupported(const char* func) const; Warn about access to function members that should never be called.; TGListTree calls them in cases that are not used by Eve. Pixel_t GetActiveColor() const; Return highlight color corresponding to current state of TEveElement. void Toggle(); Item's check-box state has been toggled ... forward to element's; render-state. TEveListTreeItem(const TEveListTreeItem& ). TEveListTreeItem& operator=(const TEveListTreeItem& ). TEveListTreeItem(TEveElement* el); {}. virtual ~TEveListTreeItem(); {}. Bool_t IsActive() const; { return fElement->GetSelectedLevel() != 0; }. void SetActive(Bool_t ); { NotSupported(""SetActive""); }. const char * GetText() const; { return fElement->GetElementName(); }. Int_t GetTextLength() const; { return strlen(fElement->GetElementName()); }. const char * GetTipText() const; { return fElement->GetElementTitle(); }. Int_t GetTipTextLength() const; { return strlen(fElement->GetElementTitle()); }. void SetText(const char* ); { NotSupported(""SetText""); }. void SetTipText(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveListTreeItem.html:3905,access,access,3905,root/html528/TEveListTreeItem.html,https://root.cern,https://root.cern/root/html528/TEveListTreeItem.html,4,['access'],['access']
Security,". ◆ Delete(). void TListOfFunctionTemplates::Delete ; (; Option_t * ; option = """"). overridevirtual . Delete all TFunction object files. ; Reimplemented from THashList.; Definition at line 164 of file TListOfFunctionTemplates.cxx. ◆ FindObject() [1/3]. TObject * THashList::FindObject ; (; const char * ; name); const. overridevirtual . Find object using its name. ; Uses the hash value returned by the TString::Hash() after converting name to a TString. ; Reimplemented from THashList.; Definition at line 51 of file THashList.cxx. ◆ FindObject() [2/3]. TObject * TListOfFunctionTemplates::FindObject ; (; const char * ; name); const. overridevirtual . Specialize FindObject to do search for the a function just by name or create it if its not already in the list. ; Reimplemented from THashList.; Definition at line 175 of file TListOfFunctionTemplates.cxx. ◆ FindObject() [3/3]. TObject * THashList::FindObject ; (; const TObject * ; obj); const. overridevirtual . Find object using its hash value (returned by its Hash() member). ; Reimplemented from THashList.; Definition at line 52 of file THashList.cxx. ◆ Get(). TFunctionTemplate * TListOfFunctionTemplates::Get ; (; DeclId_t ; id). Return (after creating it if necessary) the TMethod or TFunction describing the function corresponding to the Decl 'id'. ; Definition at line 253 of file TListOfFunctionTemplates.cxx. ◆ GetListForObject() [1/2]. TList * TListOfFunctionTemplates::GetListForObject ; (; const char * ; name); const. virtual . Return the set of overloads for this name, collecting all available ones. ; Can construct and insert new TFunction-s. ; Definition at line 233 of file TListOfFunctionTemplates.cxx. ◆ GetListForObject() [2/2]. TList * TListOfFunctionTemplates::GetListForObject ; (; const TObject * ; obj); const. virtual . Return the set of overloads for function obj, collecting all available ones. ; Can construct and insert new TFunction-s. ; Definition at line 242 of file TListOfFunctionTemplates.cxx. ◆ GetListFo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfFunctionTemplates.html:28278,hash,hash,28278,doc/master/classTListOfFunctionTemplates.html,https://root.cern,https://root.cern/doc/master/classTListOfFunctionTemplates.html,1,['hash'],['hash']
Security,". ◆ Downsample(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::Downsample ; (; AFloat * ; output, . AFloat * ; indexMatrix, . const AFloat * ; input, . int ; depth, . int ; imgHeight, . int ; imgWidth, . int ; fltHeight, . int ; fltWidth, . int ; strideRows, . int ; strideCols . ). Downsampling kernel used as the forward propagation step of a Max-Pooling layer. ; Parameters. [out]AThe output matrix. Each row corresponds to a slice and each element is the max within a receptive field. ; [out]BThe winning indices matrix. Each element is the index of the max element. ; [in]CThe input matrix. Each row is a slice. ; [in]imgHeightThe heigh of the input. ; [in]imgWidthThe output of the input. ; [in]fltHeightHeight of the kernel. ; [in]fltWidthWidth of the kernel. ; [in]strideRowsstride size in the horizontal dimension. ; [in]strideColsstride size in the vertical dimension. Each output element is the maximum of the receptive field. The caller launches one thread per output element in order to eliminate shared write access. ; Definition at line 1002 of file Kernels.cuh. ◆ Dropout(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::Dropout ; (; AFloat * ; A, . int ; m, . int ; n, . AFloat ; dropoutProbability, . curandState_t * ; state . ). Definition at line 964 of file Kernels.cuh. ◆ Flatten(). template<typename AFloat > . __global__ void TMVA::DNN::Cuda::Flatten ; (; AFloat * ; A, . const AFloat * ; B, . int ; size, . int ; nRows, . int ; nCols . ). Flatten an array of 2D-arrays into a single 2D-array. ; Parameters. [out]AOutput 2D-array saved in column major order. ; [in]BInput array of 2D-arrays. Each element is a matrix to be concatenated. ; [in]sizeNumber of 2D-arrays in the input. ; [in]nRowsNumber of rows in each matrix of the input. ; [in]nColsNumber of columns on each matrix of the input. B is a pointer to size raw TCudaMatrix pointers. Each of those contains elements saved on column major order. However the concatenation is performed r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html:13900,access,access,13900,doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html,1,['access'],['access']
Security,". ◆ FindClassOrBaseMethodWithId(). TMethod * TClass::FindClassOrBaseMethodWithId ; (; DeclId_t ; faddr). private . Find a method with decl id in this class or its bases. ; Definition at line 4440 of file TClass.cxx. ◆ FindConversionStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindConversionStreamerInfo ; (; const char * ; onfile_classname, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. ; Definition at line 7193 of file TClass.cxx. ◆ FindConversionStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindConversionStreamerInfo ; (; const TClass * ; onfile_cl, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class represented by cl for the layout represented by 'checksum' to this class, if any. ; Definition at line 7204 of file TClass.cxx. ◆ FindStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; TObjArray * ; arr, . UInt_t ; checksum . ); const. protected . Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7066 of file TClass.cxx. ◆ FindStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; UInt_t ; checksum, . Bool_t ; isTransient = kFALSE . ); const. Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7036 of file TClass.cxx. ◆ FindStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::FindStreamerInfoAbstractEmulated ; (; UInt_t ; checksum); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If the object does not exist, it is created; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable pro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:67665,checksum,checksum,67665,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,1,['checksum'],['checksum']
Security,". ◆ FindClassOrBaseMethodWithId(). TMethod * TClass::FindClassOrBaseMethodWithId ; (; DeclId_t ; faddr). private . Find a method with decl id in this class or its bases. ; Definition at line 4507 of file TClass.cxx. ◆ FindConversionStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindConversionStreamerInfo ; (; const char * ; onfile_classname, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. ; Definition at line 7260 of file TClass.cxx. ◆ FindConversionStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindConversionStreamerInfo ; (; const TClass * ; onfile_cl, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class represented by cl for the layout represented by 'checksum' to this class, if any. ; Definition at line 7271 of file TClass.cxx. ◆ FindStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; TObjArray * ; arr, . UInt_t ; checksum . ); const. protected . Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7133 of file TClass.cxx. ◆ FindStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; UInt_t ; checksum, . Bool_t ; isTransient = kFALSE . ); const. Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7103 of file TClass.cxx. ◆ FindStreamerInfoAbstractEmulated(). TVirtualStreamerInfo * TClass::FindStreamerInfoAbstractEmulated ; (; UInt_t ; checksum); const. For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ; If the object does not exist, it is created; Warning: If we create a new streamer info, whether or not the build optimizes is controlled externally to us by a global variable! Don't call us unless you have set that variable pro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass.html:67666,checksum,checksum,67666,doc/master/classTClass.html,https://root.cern,https://root.cern/doc/master/classTClass.html,1,['checksum'],['checksum']
Security,".. lname Number of bytes in the object name . ..->.. Name lName bytes with the name of the object . ..->.. lTitle Number of bytes in the object title . ..->.. Title Title of the object . --—> DATA Data bytes associated to the object . The structure of a directory is shown in TDirectoryFile::TDirectoryFile. PyROOT; In the same way as for TDirectory, it is possible to get the content of a TFile object with the familiar item-getting syntax. For more information, please refer to the TDirectory documentation.; In addition, TFile instances can be inspected via the Get method, a feature that is inherited from TDirectoryFile (please see the documentation of TDirectoryFile for examples on how to use it).; In order to write objects into a TFile, the WriteObject Python method can be used (more information in the documentation of TDirectoryFile).; PyROOT modifies the TFile constructor and the TFile::Open method to make them behave in a more pythonic way. In particular, they both throw an OSError if there was a problem accessing the file (e.g. non-existent or corrupted file).; This class can also be used as a context manager, with the goal of opening a file and doing some quick manipulations of the objects inside it. The TFile::Close method will be automatically called at the end of the context. For example: from ROOT import TFile; with TFile(""file1.root"", ""recreate"") as outfile:; hout = ROOT.TH1F(...); outfile.WriteObject(hout, ""myhisto""); TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; Since the file is closed at the end of the context, all objects created or read from the file inside the context are not accessible anymore in the application (but they will be stored in the file if they were written to it). ROOT objects like histograms can be detached from a file with the SetDirectory method. This will leave the object untouched so that it can be accessed after the end of the context: import ROO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:3964,access,accessing,3964,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,2,['access'],['accessing']
Security,"..; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TROOT Class ReferenceCore ROOT classes » Base ROOT classes. ; ROOT top level object description. ; The TROOT object is the entry point to the ROOT system. The single instance of TROOT is accessible via the global gROOT. Using the gROOT pointer one has access to basically every object created in a ROOT based program. The TROOT object is essentially a container of several lists pointing to the main ROOT objects.; The following lists are accessible from gROOT object:; gROOT->GetListOfClasses; gROOT->GetListOfColors; gROOT->GetListOfTypes; gROOT->GetListOfGlobals; gROOT->GetListOfGlobalFunctions; gROOT->GetListOfFiles; gROOT->GetListOfMappedFiles; gROOT->GetListOfSockets; gROOT->GetListOfSecContexts; gROOT->GetListOfCanvases; gROOT->GetListOfStyles; gROOT->GetListOfFunctions; gROOT->GetListOfSpecials (for example graphical cuts); gROOT->GetListOfGeometries; gROOT->GetListOfBrowsers; gROOT->GetListOfCleanups; gROOT->GetListOfMessageHandlers; gROOT#define gROOTDefinition TROOT.h:406; The TROOT class provides also many useful services:; Get pointer to an object in any of the lists above; Time utilities TROOT::Time. The ROOT object must be created as a static object. An example of a main program creating an interactive version is shown below:. Example of a main program; #include ""TRint.h""; ; int main(int argc, char **argv); {; TRint *theApp = new TRint(""ROOT example"", &argc, argv);; ; // Init Intrinsics, build all windows, and enter event loop; theApp->Run();; ; return(0);; }; mainint main()Definition Prototype.cxx:12; TRint.h; TRintDefinition TRint.h:31; TRint::Runvoid Run(Bool_t retrn=kFALSE) overrideMain application eventloop.Definition TRint.cxx:384. Definition at line 94 of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTROOT.html:836,access,accessible,836,doc/master/classTROOT.html,https://root.cern,https://root.cern/doc/master/classTROOT.html,1,['access'],['accessible']
Security,"..; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TROOT Class ReferenceCore ROOT classes » Base ROOT classes. ; ROOT top level object description. ; The TROOT object is the entry point to the ROOT system. The single instance of TROOT is accessible via the global gROOT. Using the gROOT pointer one has access to basically every object created in a ROOT based program. The TROOT object is essentially a container of several lists pointing to the main ROOT objects.; The following lists are accessible from gROOT object:; gROOT->GetListOfClasses; gROOT->GetListOfColors; gROOT->GetListOfTypes; gROOT->GetListOfGlobals; gROOT->GetListOfGlobalFunctions; gROOT->GetListOfFiles; gROOT->GetListOfMappedFiles; gROOT->GetListOfSockets; gROOT->GetListOfSecContexts; gROOT->GetListOfCanvases; gROOT->GetListOfStyles; gROOT->GetListOfFunctions; gROOT->GetListOfSpecials (for example graphical cuts); gROOT->GetListOfGeometries; gROOT->GetListOfBrowsers; gROOT->GetListOfCleanups; gROOT->GetListOfMessageHandlers; gROOT#define gROOTDefinition TROOT.h:406; exampleDefinition example.py:1; The TROOT class provides also many useful services:; Get pointer to an object in any of the lists above; Time utilities TROOT::Time. The ROOT object must be created as a static object. An example of a main program creating an interactive version is shown below:. Example of a main program; #include ""TRint.h""; ; int main(int argc, char **argv); {; TRint *theApp = new TRint(""ROOT example"", &argc, argv);; ; // Init Intrinsics, build all windows, and enter event loop; theApp->Run();; ; return(0);; }; mainint main()Definition Prototype.cxx:12; TRint.h; TRintDefinition TRint.h:31; TRint::Runvoid Run(Bool_t retrn=kFALSE) overrideMain application eventloop.Definition TRint.cx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTROOT.html:835,access,accessible,835,doc/v632/classTROOT.html,https://root.cern,https://root.cern/doc/v632/classTROOT.html,1,['access'],['accessible']
Security,".2.2 Data Encapsulation; We have seen previously the keyword “public”. This keyword means that every name declared public is seen by the outside world. This is opposed to “private” that means only the class where the name was declared private could see this name. For example, suppose we declare in TArrow the variable ArrowHeadSize private.; private:; int ArrowHeadSize;; Then, only the methods (i.e. member functions) of TArrow will be able to access this variable. Nobody else will see it. Even the classes that we could derive from TArrow will not see it. On the other hand, if we declare the method Draw() as public, everybody will be able to see it and use it. You see that the character public or private does not depend of the type of argument. It can be a data member, a member function, or even a class. For example, in the case of TArrow, the base class TLine is declared as public:; class TArrow : public TLine { ...; This means that all methods of TArrow will be able to access all methods of TLine, but this will be also true for anybody in the outside world. Of course, this is true if TLine accepts the outside world to see its methods/data members. If something is declared private in TLine, nobody will see it, not even TArrow members, even if TLine is declared as a public base class.; What if TLine is declared “private” instead of “public” ? Well, it will behave as any other name declared private in TArrow: only the data members and methods of TArrow will be able to access TLine, its methods and data members, nobody else. This may seem a little bit confusing and readers should read a good C++ book if they want more details. Especially since, besides public and private, a member can be protected. Usually, one puts private the methods that the class uses internally, like some utilities classes, and that the programmer does not want to be seen in the outside world.; With “good” C++ practice (which we have tried to use in ROOT), all data members of a class are private. Th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:246119,access,access,246119,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['access'],['access']
Security,".924) 0.942 (0.933) 0.866 (0.887) - ; : ; : -------------------------------------------------------------------------------------------------------; : ; Dataset:dataset : Created tree 'TestTree' with 4000 events; : ; Dataset:dataset : Created tree 'TrainTree' with 4000 events; : ; Factory : ␛[1mThank you for using TMVA!␛[0m; : ␛[1mFor citation information, please visit: http://tmva.sf.net/citeTMVA.html␛[0m; ==> Wrote root file: TMVAMulticlass.root; ==> TMVAMulticlass is done!; ; #include <cstdlib>; #include <iostream>; #include <map>; #include <string>; ; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include ""TSystem.h""; #include ""TROOT.h""; ; ; #include ""TMVA/Tools.h""; #include ""TMVA/Factory.h""; #include ""TMVA/DataLoader.h""; #include ""TMVA/TMVAMultiClassGui.h""; ; ; using namespace TMVA;; ; void TMVAMulticlass( TString myMethodList = """" ); {; ; // This loads the library; TMVA::Tools::Instance();; ; // to get access to the GUI and all tmva macros; //; // TString tmva_dir(TString(gRootDir) + ""/tmva"");; // if(gSystem->Getenv(""TMVASYS"")); // tmva_dir = TString(gSystem->Getenv(""TMVASYS""));; // gROOT->SetMacroPath(tmva_dir + ""/test/:"" + gROOT->GetMacroPath() );; // gROOT->ProcessLine("".L TMVAMultiClassGui.C"");; ; ; //---------------------------------------------------------------; // Default MVA methods to be trained + tested; std::map<std::string,int> Use;; Use[""MLP""] = 1;; Use[""BDTG""] = 1;; #ifdef R__HAS_TMVAGPU; Use[""DL_CPU""] = 1;; Use[""DL_GPU""] = 1;; #else; Use[""DL_CPU""] = 1;; Use[""DL_GPU""] = 0;; #endif; Use[""FDA_GA""] = 0;; Use[""PDEFoam""] = 1;; ; //---------------------------------------------------------------; ; std::cout << std::endl;; std::cout << ""==> Start TMVAMulticlass"" << std::endl;; ; if (myMethodList != """") {; for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) it->second = 0;; ; std::vector<TString> mlist = TMVA::gTools().SplitString( myMethodList, ',' );; for (UInt_t i=0; i<mlist.size(); i++) {; std::string re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:31849,access,access,31849,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['access'],['access']
Security,.; 200 TList *fRealData; //linked list for persistent members including base classes; 201 std::atomic<TList*> fBase; //linked list for base classes; 202 std::atomic<TListOfDataMembers*> fData; //linked list for data members; non-owning.; 203 std::atomic<TListOfDataMembers*> fUsingData;//linked list for data members pulled in through using decls.; 204 ; 205 std::atomic<TListOfEnums*> fEnums; //linked list for the enums; 206 TListOfFunctionTemplates *fFuncTemplate; //linked list for function templates [Not public until implemented as active list]; 207 std::atomic<TListOfFunctions*> fMethod; //linked list for methods; 208 ; 209 TViewPubDataMembers*fAllPubData; //all public data members (including from base classes); 210 TViewPubFunctions *fAllPubMethod; //all public methods (including from base classes); 211 mutable TList *fClassMenuList; //list of class menu items; 212 ; 213 const char *fDeclFileName; //name of class declaration file; 214 const char *fImplFileName; //name of class implementation file; 215 Short_t fDeclFileLine; //line of class declaration; 216 Short_t fImplFileLine; //line of class implementation; 217 UInt_t fInstanceCount; //number of instances of this class; 218 UInt_t fOnHeap; //number of instances on heap; 219 mutable std::atomic<UInt_t> fCheckSum; //checksum of data members and base classes; 220 TVirtualCollectionProxy *fCollectionProxy; //Collection interface; 221 Version_t fClassVersion; //Class version Identifier; 222 ClassInfo_t *fClassInfo; //pointer to CINT class info class; 223 TString fContextMenuTitle;//context menu title; 224 const std::type_info *fTypeInfo; //pointer to the C++ type information.; 225 ShowMembersFunc_t fShowMembers; //pointer to the class's ShowMembers function; 226 TClassStreamer *fStreamer; //pointer to streamer function; 227 TString fSharedLibs; //shared libraries containing class code; 228 ; 229 TVirtualIsAProxy *fIsA; //!pointer to the class's IsA proxy.; 230 IsAGlobalFunc_t fGlobalIsA; //pointer to a global IsA fu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8h_source.html:8901,checksum,checksum,8901,doc/master/TClass_8h_source.html,https://root.cern,https://root.cern/doc/master/TClass_8h_source.html,2,['checksum'],['checksum']
Security,".; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TSecContext Class Reference. . Definition at line 36 of file TSecContext.h. Public Member Functions;  TSecContext (const char *url, Int_t meth, Int_t offset, const char *id, const char *token, TDatime expdate=kROOTTZERO, void *ctx=nullptr);  Ctor for SecContext object. ;  ;  TSecContext (const char *user, const char *host, Int_t meth, Int_t offset, const char *id, const char *token, TDatime expdate=kROOTTZERO, void *ctx=nullptr);  Ctor for SecContext object. ;  ; virtual ~TSecContext ();  Dtor: delete (deActivate, local/remote cleanup, list removal) all what is still active. ;  ; void AddForCleanup (Int_t port, Int_t proto, Int_t type);  Create a new TSecContextCleanup Internally is added to the list. ;  ; virtual const char * AsString (TString &out);  Returns short string with relevant information about this security context. ;  ; virtual void DeActivate (Option_t *opt=""CR"");  Set OffSet to -1 and expiring Date to default Remove from the list If Opt contains ""C"" or ""c"", ask for remote cleanup If Opt contains ""R"" or ""r"", remove from the list Default Opt=""CR"". ;  ; void * GetContext () const;  ; TDatime GetExpDate () const;  ; const char * GetHost () const;  ; const char * GetID () const;  ; Int_t GetMethod () const;  ; const char * GetMethodName () const;  ; Int_t GetOffSet () const;  ; TList * GetSecContextCleanup () const;  ; const char * GetToken () const;  ; const char * GetUser () const;  ; TClass * IsA () const override;  ; Bool_t IsA (const char *methodname);  Checks if this security context is for method named 'methname' Case sensitive. ;  ; Bool_t IsActive () const;  Check remote OffSet and expiring Date. ;  ; void Print (Option_t *option=""F"") const override;  If opt is ""F"" (default) print object content. ;  ; void SetExpDate (TDatime ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSecContext.html:1136,secur,security,1136,doc/master/classTSecContext.html,https://root.cern,https://root.cern/doc/master/classTSecContext.html,1,['secur'],['security']
Security,".; git pull --rebase. or; git fetch <remote>; git rebase <remote>/<branch>. Resolving conflicts; Any pull, merge, or rebase operation can result in a conflict during the application of a particular change from the remote branch. Follow the on-screen instructions to resolve problems. This will usually consist of doing a git status to list conflicts, editing the files and using git add to mark each conflict resolved. The process must either be allowed to continue by issuing a git rebase --continue or git merge --continue command, or the operation can be reverted with --abort instead of --continue. If in doubt, copy your repository.; Making a new remote branch. Create a new local branch based on an existing one:; git checkout -b <branch>. Do stuff.; Push the branch to the remote:; git push <remote> <local-branch-name>[:<new-remote-branch-name>]. Tagging. Tag the current state of a branch (eg for release):; git tag -am <message> <version>. Note that the -a creates an annotated tag, which is itself a commit with a hash and a commit message. This is the closest analogue to the CVS tag command. Omitting the -a option will create a, ""simple tag"" which is actually a branch. In general, you will probably prefer annotated tags with version-branches created explicitly as desired.; Push the tag to the remote:; git push --tags. Special notes on mis-tagging.; There are several things that can go wrong with tagging:. One can omit an intended -a option;; One can misspell the tag; or; One can omit or (horror!) fix a file and wish to update the tag. If you have not pushed tags yet (See above) then the fix is trivial: for the first two cases, remove the erroneous tag with git tag -d <tag>; for the third, re-tag with git tag -am <mesasge> [<tree-ish>]. However, if you have already pushed tags, there are wider consequences. For this reason, altering pushed tags is emphatically discouraged: create a new tag. However, since you're going to ignore me and do it anyway, here's how to do what ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-tips-and-tricks.html:13634,hash,hash,13634,d/git-tips-and-tricks.html,https://root.cern,https://root.cern/d/git-tips-and-tricks.html,1,['hash'],['hash']
Security,".Browse"",""Print"");; gEnvR__EXTERN TEnv * gEnvDefinition TEnv.h:170; TEnv::SetValuevirtual void SetValue(const char *name, const char *value, EEnvLevel level=kEnvChange, const char *type=nullptr)Set the value of a resource or create a new resource.Definition TEnv.cxx:736; By default TMacro.Browse="""" -if TMacro.Browse ="""" the macro is executed -if TMacro.Browse =""Print"" the macro is printed in stdout -if TMacro.Browse is of the form ""mymacro.C"" the macro void mymacro.C(TMacro *m) is called where m=this macro An example of macro.C saving the macro into a file and viewing it with emacs is shown below: void mymacro(TMacro *m) {; m->SaveSource(""xx.log"");; gSystem->Exec(""emacs xx.log&"");; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TSystem::Execvirtual Int_t Exec(const char *shellcmd)Execute a command.Definition TSystem.cxx:653. Reimplemented from TObject.; Definition at line 171 of file TMacro.cxx. ◆ Checksum(). TMD5 * TMacro::Checksum ; (; ). virtual . Returns checksum of the current content. ; The returned TMD5 object must be deleted by the user. Returns 0 in case of error. ; Definition at line 192 of file TMacro.cxx. ◆ Class(). static TClass * TMacro::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMacro::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMacro::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 59 of file TMacro.h. ◆ DeclFileName(). static const char * TMacro::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 59 of file TMacro.h. ◆ Exec(). Longptr_t TMacro::Exec ; (; const char * ; params = nullptr, . Int_t * ; error = nullptr . ). virtual . Execute this macro with params, if params is 0, default parameters (set via SetParams) are used. ; error is set to an TInterpreter::EErrorCode by TApplication::ProcessLine(). Returns the r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMacro.html:16774,checksum,checksum,16774,doc/master/classTMacro.html,https://root.cern,https://root.cern/doc/master/classTMacro.html,1,['checksum'],['checksum']
Security,".Definition RWebWindow.cxx:1753; ROOT::RWebWindow::GetConnectionsstd::vector< unsigned > GetConnections(unsigned excludeid=0) constreturns vector with all existing connections ids One also can exclude specified connection from retur...Definition RWebWindow.cxx:1387; ROOT::RWebWindow::SetDataCallBackvoid SetDataCallBack(WebWindowDataCallback_t func)Set call-back function for data, received from the clients via websocket.Definition RWebWindow.cxx:1733; ROOT::RWebWindow::fOperationTmoutfloat fOperationTmout! timeout in seconds to perform synchronous operation, default 50sDefinition RWebWindow.hxx:168; ROOT::RWebWindow::fRequireAuthKeybool fRequireAuthKey! defines if authentication key always required when connect to the widgetDefinition RWebWindow.hxx:146; ROOT::RWebWindow::gStartDialogFuncstatic std::function< bool(const std::shared_ptr< RWebWindow > &, unsigned, const std::string &)> gStartDialogFuncDefinition RWebWindow.hxx:235; ROOT::RWebWindow::SetUserArgsvoid SetUserArgs(const std::string &args)Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON co...Definition RWebWindow.cxx:1310; ROOT::RWebWindow::fConnTokenstd::string fConnToken! value of ""token"" URL parameter which should be provided for connecting windowDefinition RWebWindow.hxx:153; ROOT::RWebWindow::GetHeightunsigned GetHeight() constreturns configured window height (0 - default)Definition RWebWindow.hxx:282; ROOT::RWebWindow::ShowWindowstatic unsigned ShowWindow(std::shared_ptr< RWebWindow > window, const RWebDisplayArgs &args="""")Static method to show web window Has to be used instead of RWebWindow::Show() when window potentially...Definition RWebWindow.cxx:1915; ROOT::RWebWindow::fWSHandlerstd::shared_ptr< RWebWindowWSHandler > fWSHandler! specialize websocket handler for all incoming connectionsDefinition RWebWindow.hxx:147; ROOT::RWebWindow::StopThreadvoid StopThread()Stop special thread.Definition RWebWindow.cxx:1702; ROOT::RWebWindow::SubmitDatavoid Submi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RWebWindow_8hxx_source.html:31926,access,accessible,31926,doc/v632/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RWebWindow_8hxx_source.html,1,['access'],['accessible']
Security,".Definition RWebWindow.cxx:1795; ROOT::RWebWindow::GetConnectionsstd::vector< unsigned > GetConnections(unsigned excludeid=0) constreturns vector with all existing connections ids One also can exclude specified connection from retur...Definition RWebWindow.cxx:1429; ROOT::RWebWindow::SetDataCallBackvoid SetDataCallBack(WebWindowDataCallback_t func)Set call-back function for data, received from the clients via websocket.Definition RWebWindow.cxx:1775; ROOT::RWebWindow::fOperationTmoutfloat fOperationTmout! timeout in seconds to perform synchronous operation, default 50sDefinition RWebWindow.hxx:171; ROOT::RWebWindow::fRequireAuthKeybool fRequireAuthKey! defines if authentication key always required when connect to the widgetDefinition RWebWindow.hxx:149; ROOT::RWebWindow::gStartDialogFuncstatic std::function< bool(const std::shared_ptr< RWebWindow > &, unsigned, const std::string &)> gStartDialogFuncDefinition RWebWindow.hxx:238; ROOT::RWebWindow::SetUserArgsvoid SetUserArgs(const std::string &args)Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON co...Definition RWebWindow.cxx:1352; ROOT::RWebWindow::fConnTokenstd::string fConnToken! value of ""token"" URL parameter which should be provided for connecting windowDefinition RWebWindow.hxx:156; ROOT::RWebWindow::GetHeightunsigned GetHeight() constreturns configured window height (0 - default)Definition RWebWindow.hxx:285; ROOT::RWebWindow::ShowWindowstatic unsigned ShowWindow(std::shared_ptr< RWebWindow > window, const RWebDisplayArgs &args="""")Static method to show web window Has to be used instead of RWebWindow::Show() when window potentially...Definition RWebWindow.cxx:1957; ROOT::RWebWindow::fWSHandlerstd::shared_ptr< RWebWindowWSHandler > fWSHandler! specialize websocket handler for all incoming connectionsDefinition RWebWindow.hxx:150; ROOT::RWebWindow::StopThreadvoid StopThread()Stop special thread.Definition RWebWindow.cxx:1744; ROOT::RWebWindow::SubmitDatavoid Submi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RWebWindow_8hxx_source.html:32315,access,accessible,32315,doc/master/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RWebWindow_8hxx_source.html,1,['access'],['accessible']
Security,".Definition TListOfFunctionTemplates.h:35; TListOfFunctionTemplates::GetTFunctionTemplate * Get(DeclId_t id)Return (after creating it if necessary) the TMethod or TFunction describing the function correspondin...Definition TListOfFunctionTemplates.cxx:253; TListOfFunctionsA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFu...Definition TListOfFunctions.h:35; TListOfFunctions::FindTFunction * Find(DeclId_t id) constReturn the TMethod or TFunction describing the function corresponding to the Decl 'id'.Definition TListOfFunctions.cxx:250; TListA doubly linked list.Definition TList.h:38; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TList::AtTObject * At(Int_t idx) const overrideReturns the object at position idx. Returns 0 if idx is out of range.Definition TList.cxx:355; TMemFileA TMemFile is like a normal TFile except that it reads and writes only from memory.Definition TMemFile.h:19; TMemberInspectorAbstract base class for accessing the data-members of a class.Definition TMemberInspector.h:31; TMemberInspector::GetParentconst char * GetParent() constDefinition TMemberInspector.cxx:75; TMemberInspector::Inspectvirtual void Inspect(TClass *cl, const char *parent, const char *name, const void *addr)Definition TMemberInspector.cxx:99; TMemberInspector::GetObjectValidityEObjectPointerState GetObjectValidity() constDefinition TMemberInspector.h:50; TMemberInspector::IsTreatingNonAccessibleTypesvirtual Bool_t IsTreatingNonAccessibleTypes()Definition TMemberInspector.h:60; TMemberInspector::SetObjectValidityvoid SetObjectValidity(EObjectPointerState val)Definition TMemberInspector.h:51; TMemberInspector::InspectMembervoid InspectMember(const T &obj, const char *name, Bool_t isTransient)Definition TMemberInspector.h:63; TMemberInspector::kValidObjectGiven@ kValidObjectGivenDefinition TMemberInspector.h:36; TMemberInspector::kNoObjectGiven@ kNoObjectGivenDefinition TMemberInspector.h:35; TMemberInspector::kUns",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:472770,access,accessing,472770,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['access'],['accessing']
Security,".Histo1D(""b1""); // OK, the type of ""b1"" is deduced at runtime; df.Min<MyNumber_t>(""myObject""); // OK, ""myObject"" is deduced to be of type `MyNumber_t`; Deducing types at runtime requires the just-in-time compilation of the relevant actions, which has a small runtime overhead, so specifying the type of the columns as template parameters to the action is good practice when performance is a goal.; When strings are passed as expressions to Filter() or Define(), fundamental types are passed as constants. This avoids certaincommon mistakes such as typing x = 0 rather than x == 0:; // this throws an error (note the typo); df.Define(""x"", ""0"").Filter(""x = 0"");. User-defined custom actions; RDataFrame strives to offer a comprehensive set of standard actions that can be performed on each event. At the same time, it allows users to inject their own action code to perform arbitrarily complex data reductions.; Implementing custom actions with Book(); Through the Book() method, users can implement a custom action and have access to the same features that built-in RDataFrame actions have, e.g. hooks to events related to the start, end and execution of the event loop, or the possibility to return a lazy RResultPtr to an arbitrary type of result:; #include <ROOT/RDataFrame.hxx>; #include <memory>; ; class MyCounter : public ROOT::Detail::RDF::RActionImpl<MyCounter> {; std::shared_ptr<int> fFinalResult = std::make_shared<int>(0);; std::vector<int> fPerThreadResults;; ; public:; // We use a public type alias to advertise the type of the result of this action; using Result_t = int;; ; MyCounter(unsigned int nSlots) : fPerThreadResults(nSlots) {}; ; // Called before the event loop to retrieve the address of the result that will be filled/generated.; std::shared_ptr<int> GetResultPtr() const { return fFinalResult; }; ; // Called at the beginning of the event loop.; void Initialize() {}; ; // Called at the beginning of each processing task.; void InitTask(TTreeReader *, int) {}; ; /// Call",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:65253,access,access,65253,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['access'],['access']
Security,".c_str();; 2938 // Check if the file exists; 2939 std::ifstream ifile(tmpName);; 2940 if (!ifile); 2941 ROOT::TMetaUtils::Error(nullptr, ""Cannot find %s!\n"", tmpName);; 2942 // Make sure the file is closed, mostly for Windows FS, also when; 2943 // accessing it from a Linux VM via a shared folder; 2944 if (ifile.is_open()); 2945 ifile.close();; 2946 if (0 != std::remove(tmpName)) {; 2947 ROOT::TMetaUtils::Error(nullptr, ""Removing %s!\n"", tmpName);; 2948 retval++;; 2949 }; 2950 }; 2951 return retval;; 2952 }; 2953 ; 2954 /////////////////////////////////////////////////////////////////////////////; 2955 ; 2956 int commit() {; 2957 int retval = 0;; 2958 // rename the temp files into the normal ones; 2959 for (unsigned int i = 0; i < m_size; ++i) {; 2960 const char *tmpName = m_tempNames[i].c_str();; 2961 const char *name = m_names[i].c_str();; 2962 // Check if the file exists; 2963 std::ifstream ifile(tmpName);; 2964 if (!ifile); 2965 ROOT::TMetaUtils::Error(nullptr, ""Cannot find %s!\n"", tmpName);; 2966 // Make sure the file is closed, mostly for Windows FS, also when; 2967 // accessing it from a Linux VM via a shared folder; 2968 if (ifile.is_open()); 2969 ifile.close();; 2970#ifdef WIN32; 2971 // Sometimes files cannot be renamed on Windows if they don't have; 2972 // been released by the system. So just copy them and try to delete; 2973 // the old one afterwards.; 2974 if (0 != std::rename(tmpName , name)) {; 2975 if (llvm::sys::fs::copy_file(tmpName , name)) {; 2976 llvm::sys::fs::remove(tmpName);; 2977 }; 2978 }; 2979#else; 2980 if (0 != std::rename(tmpName , name)) {; 2981 ROOT::TMetaUtils::Error(nullptr, ""Renaming %s into %s!\n"", tmpName, name);; 2982 retval++;; 2983 }; 2984#endif; 2985 }; 2986 return retval;; 2987 }; 2988 ; 2989 /////////////////////////////////////////////////////////////////////////////; 2990 ; 2991 const std::string &getFileName(const std::string &tmpFileName) {; 2992 size_t i = std::distance(m_tempNames.begin(),; 2993 find(m_tempNames.begin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:117938,access,accessing,117938,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['access'],['accessing']
Security,".cxx. ◆ StartGarbageCollection(). void TCollection::StartGarbageCollection ; (; ). static . Set up for garbage collection. ; Definition at line 696 of file TCollection.cxx. ◆ Streamer(). void TCollection::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the collection to or from the I/O buffer. ; Reimplemented from TObject.; Reimplemented in TQCommand, TQUndoManager, TQConnection, THashList, THashTable, TList, TMap, TObjArray, TOrdCollection, TRefArray, TSeqCollection, TSortedList, TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, TListOfFunctionTemplates, TGeoNavigatorArray, TGridJobStatusList, and TParallelCoordSelect.; Definition at line 606 of file TCollection.cxx. ◆ StreamerNVirtual(). void TCollection::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 222 of file TCollection.h. ◆ UseRWLock(). bool TCollection::UseRWLock ; (; Bool_t ; enable = true). virtual . Set this collection to use a RW lock upon access, making it thread safe. ; Return the previous state.; Note: To test whether the usage is enabled do: collection->TestBit(TCollection::kUseRWLock); ; Reimplemented in THashList.; Definition at line 761 of file TCollection.cxx. ◆ Write() [1/2]. Int_t TCollection::Write ; (; const char * ; name = nullptr, . Int_t ; option = 0, . Int_t ; bsize = 0 . ); const. overridevirtual . Write all objects in this collection. ; By default all objects in the collection are written individually (each object gets its own key). Note, this is recursive, i.e. objects in collections in the collection are also written individually. To write all objects using a single key specify a name and set option to TObject::kSingleKey (i.e. 1). ; Reimplemented from TObject.; Reimplemented in TMap.; Definition at line 648 of file TCollection.cxx. ◆ Write() [2/2]. Int_t TCollection::Write ; (; const char * ; name = nullptr, . Int_t ; option = 0, . Int_t ; bsize = 0 . ). overridevirtual . Write all objects in t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCollection.html:34417,access,access,34417,doc/v632/classTCollection.html,https://root.cern,https://root.cern/doc/v632/classTCollection.html,2,['access'],['access']
Security,.d.f. or extended p.d.f? ;  ;  Protected Attributes inherited from RooAbsOptTestStatistic; RooArgSet _cachedNodes;  ! List of nodes that are cached as constant expressions ;  ; RooAbsData * _dataClone = nullptr;  Pointer to internal clone if input data. ;  ; RooAbsReal * _funcClone = nullptr;  Pointer to internal clone of input function. ;  ; RooArgSet * _funcCloneSet = nullptr;  Set owning all components of internal clone of input function. ;  ; RooArgSet * _funcObsSet = nullptr;  List of observables in the pdf expression. ;  ; double _integrateBinsPrecision {-1.};  ; RooArgSet * _normSet = nullptr;  Pointer to set with observables used for normalization. ;  ; bool _optimized = false;  ! ;  ; RooAbsData * _origData = nullptr;  Original data. ;  ; RooAbsReal * _origFunc = nullptr;  Original function. ;  ; bool _ownData = false;  Do we own the dataset. ;  ; RooArgSet * _projDeps = nullptr;  Set of projected observable. ;  ; bool _sealed = false;  Is test statistic sealed – i.e. no access to data. ;  ; TString _sealNotice;  User-defined notice shown when reading a sealed likelihood. ;  ; bool _skipZeroWeights = false;  ! Whether to skip entries with weight zero in the evaluation ;  ;  Protected Attributes inherited from RooAbsTestStatistic; std::string _addCoefRangeName;  Name of reference to be used for RooAddPdf components. ;  ; RooAbsData * _data = nullptr;  Pointer to original input dataset. ;  ; bool _doOffset = false;  Apply interval value offset to control numeric precision? ;  ; double _evalCarry = 0.0;  ! carry of Kahan sum in evaluatePartition ;  ; Int_t _extSet = 0;  ! Number of designated set to calculated extended term ;  ; RooAbsReal * _func = nullptr;  Pointer to original input function. ;  ; std::vector< std::unique_ptr< RooAbsTestStatistic > > _gofArray;  ! Array of sub-contexts representing part of the combined test statistic ;  ; GOFOpMode _gofOpMode = Slave;  Operation mode of test statistic instance. ;  ; bool _init = false;  ! Is object initialize,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChi2Var.html:60730,access,access,60730,doc/master/classRooChi2Var.html,https://root.cern,https://root.cern/doc/master/classRooChi2Var.html,1,['access'],['access']
Security,".h""; 125#include ""TRefArray.h""; 126 ; 127using std::multimap, std::make_pair, std::string;; 128 ; 129// Mutex to protect CINT and META operations; 130// (exported to be used for similar cases in related classes); 131 ; 132TVirtualMutex* gInterpreterMutex = nullptr;; 133 ; 134namespace {; 135 ; 136 static constexpr const char kUndeterminedClassInfoName[] = ""<NOT YET DETERMINED FROM fClassInfo>"";; 137 ; 138 class TMmallocDescTemp {; 139 private:; 140 void *fSave;; 141 public:; 142 TMmallocDescTemp(void *value = nullptr) :; 143 fSave(ROOT::Internal::gMmallocDesc) { ROOT::Internal::gMmallocDesc = value; }; 144 ~TMmallocDescTemp() { ROOT::Internal::gMmallocDesc = fSave; }; 145 };; 146 ; 147 // When a new class is created, we need to be able to find; 148 // if there are any existing classes that have the same name; 149 // after any typedefs are expanded. (This only really affects; 150 // template arguments.) To avoid having to search through all classes; 151 // in that case, we keep a hash table mapping from the fully; 152 // typedef-expanded names to the original class names.; 153 // An entry is made in the table only if they are actually different.; 154 //; 155 // In these objects, the TObjString base holds the typedef-expanded; 156 // name (the hash key), and fOrigName holds the original class name; 157 // (the value to which the key maps).; 158 //; 159 class TNameMapNode : public TObjString {; 160 public:; 161 TString fOrigName;; 162 ; 163 TNameMapNode(const char *typedf, const char *orig) :; 164 TObjString (typedf),; 165 fOrigName (orig); 166 {; 167 }; 168 };; 169 ; 170}; 171 ; 172std::atomic<Int_t> TClass::fgClassCount;; 173 ; 174static bool IsFromRootCling() {; 175 // rootcling also uses TCling for generating the dictionary ROOT files.; 176 const static bool foundSymbol = dlsym(RTLD_DEFAULT, ""usedToIdentifyRootClingByDlSym"");; 177 return foundSymbol;; 178}; 179 ; 180// Implementation of the TDeclNameRegistry; 181 ; 182////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:5599,hash,hash,5599,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,2,['hash'],['hash']
Security,".h:35; TClassMenuItem::kPopupSeparator@ kPopupSeparatorDefinition TClassMenuItem.h:35; TClassMenuItem::kPopupUserFunction@ kPopupUserFunctionDefinition TClassMenuItem.h:35; TClassRefTClassRef is used to implement a permanent reference to a TClass object.Definition TClassRef.h:28; TClassStreamerDefinition TClassStreamer.h:26; TClassStreamer::Streamvirtual void Stream(TBuffer &b, void *objp, const TClass *onfileClass)Definition TClassStreamer.h:51; TClassStreamer::Generatevirtual TClassStreamer * Generate() constDefinition TClassStreamer.h:38; TClassTable::GetDictstatic DictFuncPtr_t GetDict(const char *cname)Given the class name returns the Dictionary() function of a class (uses hash of name).Definition TClassTable.cxx:674; TClassTable::GetProtoNormstatic TProtoClass * GetProtoNorm(const char *cname)Given the class normalized name returns the TClassProto object for the class.Definition TClassTable.cxx:770; TClassTable::GetDictNormstatic DictFuncPtr_t GetDictNorm(const char *cname)Given the normalized class name returns the Dictionary() function of a class (uses hash of name).Definition TClassTable.cxx:717; TClass::InsertTClassInRegistryRAIIDefinition TClass.h:173; TClass::InsertTClassInRegistryRAII::~InsertTClassInRegistryRAII~InsertTClassInRegistryRAII()Definition TClass.cxx:254; TClass::InsertTClassInRegistryRAII::InsertTClassInRegistryRAIIInsertTClassInRegistryRAII(TClass::EState &state, const char *name, TDeclNameRegistry &emuRegistry)Definition TClass.cxx:248; TClass::TDeclNameRegistryDefinition TClass.h:158; TClass::TDeclNameRegistry::~TDeclNameRegistry~TDeclNameRegistry()Definition TClass.cxx:235; TClass::TDeclNameRegistry::HasDeclNameBool_t HasDeclName(const char *name) constDefinition TClass.cxx:223; TClass::TDeclNameRegistry::AddQualifiedNamevoid AddQualifiedName(const char *name)Extract this part of the name.Definition TClass.cxx:196; TClass::TDeclNameRegistry::TDeclNameRegistryTDeclNameRegistry(Int_t verbLevel=0)TDeclNameRegistry class constructor.Definiti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:309204,hash,hash,309204,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,2,['hash'],['hash']
Security,".h:40; TExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad.Definition TExec.h:26; TF2::Drawvoid Draw(Option_t *option="""") overrideDraw this function with its current attributes.Definition TF2.cxx:259; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; bool; c3return c3Definition legend3.C:15; . Since6.26: The function TColor::CreateColorTableFromFile(""filename.txt"") allows you to create a color palette based on an input ASCII file. In contrast to TColor::CreateGradientColorTable(), here the length (spacing) is constant and can not be tuned. There is no gradient being interpolated between adjacent colors. The palette will contain the exact colors stored in the file, that comprises one line per color in the format ""r g b"" as floats. High quality predefined palettes; Since6.04: 63 high quality palettes are predefined with 255 colors each.; These palettes can be accessed ""by name"" with gStyle->SetPalette(num). num can be taken within the following enum:; kDeepSea=51, kGreyScale=52, kDarkBodyRadiator=53,; kBlueYellow= 54, kRainBow=55, kInvertedDarkBodyRadiator=56,; kBird=57, kCubehelix=58, kGreenRedViolet=59,; kBlueRedYellow=60, kOcean=61, kColorPrintableOnGrey=62,; kAlpine=63, kAquamarine=64, kArmy=65,; kAtlantic=66, kAurora=67, kAvocado=68,; kBeach=69, kBlackBody=70, kBlueGreenYellow=71,; kBrownCyan=72, kCMYK=73, kCandy=74,; kCherry=75, kCoffee=76, kDarkRainBow=77,; kDarkTerrain=78, kFall=79, kFruitPunch=80,; kFuchsia=81, kGreyYellow=82, kGreenBrownTerrain=83,; kGreenPink=84, kIsland=85, kLake=86,; kLightTemperature=87, kLightTerrain=88, kMint=89,; kNeon=90, kPastel=91, kPearl=92,; kPigeon=93, kPlum=94, kRedBlue=95,; kRose=96, kRust=97, kSandyTerrain=98,; kSienna=99, kSolar=100, kSouthWest=101,; kStarryNight=102, kSunset=103, kTemperatureMap=104,; kThermometer=105, kValentine=106, kVisibleSpectrum=107,; kWaterMelon=108, kCool=109, kCopper=110,; kGistEart",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTColor.html:13764,access,accessed,13764,doc/master/classTColor.html,https://root.cern,https://root.cern/doc/master/classTColor.html,1,['access'],['accessed']
Security,"/ after the host or port specifier; (see last example). Further the expansion of the standard shell; characters, like ~, $, .., are handled as expected.; TNetFile (actually TUrl) uses 1094 as default port for rootd. Connecting to a rootd requires the remote user id and password.; TNetFile allows three ways for you to provide your login:; 1) Setting it globally via the static functions:; TAuthenticate::SetGlobalUser() and; TAuthenticate::SetGlobalPasswd(); 2) Getting it from the ~/.netrc file (same file as used by ftp); 3) Command line prompt; The different methods will be tried in the order given above.; On machines with AFS rootd will authenticate using AFS (if it was; compiled with AFS support). If the protocol is specified as ""roots"" a secure authetication; method will be used. The secure method uses the SRP, Secure Remote; Passwords, package. SRP uses a so called ""asymmetric key exchange //; protocol"" in which no passwords are ever send over the wire. This //; protocol is safe against all known security attacks. For more see:. NetFile //; ; //; If the protocol is specified as ""rootk"" kerberos5 will be used for; authentication. The rootd daemon lives in the directory $ROOTSYS/bin. It can be; started either via inetd or by hand from the command line (no need; to be super user). For more info about rootd see the web page:. NetFile //; ; //. Function Members (Methods); public:. TNetFile(); TNetFile(const char* url, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual~TNetFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TNetFile.html:1932,secur,security,1932,root/html528/TNetFile.html,https://root.cern,https://root.cern/root/html528/TNetFile.html,8,"['attack', 'secur']","['attacks', 'security']"
Security,"/ after the host or port specifier; (see last example). Further the expansion of the standard shell; characters, like ~, $, .., are handled as expected.; TNetFile (actually TUrl) uses 1094 as default port for rootd. Connecting to a rootd requires the remote user id and password.; TNetFile allows three ways for you to provide your login:; 1) Setting it globally via the static functions:; TAuthenticate::SetGlobalUser() and; TAuthenticate::SetGlobalPasswd(); 2) Getting it from the ~/.netrc file (same file as used by ftp); 3) Command line prompt; The different methods will be tried in the order given above.; On machines with AFS rootd will authenticate using AFS (if it was; compiled with AFS support). If the protocol is specified as ""roots"" a secure authetication; method will be used. The secure method uses the SRP, Secure Remote; Passwords, package. SRP uses a so called ""asymmetric key exchange //; protocol"" in which no passwords are ever send over the wire. This //; protocol is safe against all known security attacks. For more see:. NetFile //; ; //; If the protocol is specified as ""rootk"" kerberos5 will be used for; authentication. The rootd daemon lives in the directory $ROOTSYS/bin. It can be; started either via inetd or by hand from the command line (no need; to be super user). For more info about rootd see the web page:. NetFile //; ; //. Function Members (Methods); public:. TNetSystem(Bool_t ftpowner = kTRUE); TNetSystem(const char* url, Bool_t ftpowner = kTRUE); virtual~TNetSystem(); virtual voidTSystem::Abort(int code = 0); voidTObject::AbstractMethod(const char* method) const; virtual intTSystem::AcceptConnection(int sock); virtual Bool_tAccessPathName(const char* path, EAccessMode mode); virtual voidTSystem::AddDynamicPath(const char* pathname); virtual voidTSystem::AddFileHandler(TFileHandler* fh); virtual voidTSystem::AddIncludePath(const char* includePath); virtual voidTSystem::AddLinkedLibs(const char* linkedLib); virtual voidTSystem::AddSignalHandler(TS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TNetSystem.html:1940,secur,security,1940,root/html530/TNetSystem.html,https://root.cern,https://root.cern/root/html530/TNetSystem.html,6,"['attack', 'secur']","['attacks', 'security']"
Security,"/ after the host or port specifier; (see last example). Further the expansion of the standard shell; characters, like ~, $, .., are handled as expected.; TNetFile (actually TUrl) uses 1094 as default port for rootd. Connecting to a rootd requires the remote user id and password.; TNetFile allows three ways for you to provide your login:; 1) Setting it globally via the static functions:; TAuthenticate::SetGlobalUser() and; TAuthenticate::SetGlobalPasswd(); 2) Getting it from the ~/.netrc file (same file as used by ftp); 3) Command line prompt; The different methods will be tried in the order given above.; On machines with AFS rootd will authenticate using AFS (if it was; compiled with AFS support). If the protocol is specified as ""roots"" a secure authetication; method will be used. The secure method uses the SRP, Secure Remote; Passwords, package. SRP uses a so called ""asymmetric key exchange //; protocol"" in which no passwords are ever send over the wire. This //; protocol is safe against all known security attacks. For more see:. NetFile //; ; //; If the protocol is specified as ""rootk"" kerberos5 will be used for; authentication. The rootd daemon lives in the directory $ROOTSYS/bin. It can be; started either via inetd or by hand from the command line (no need; to be super user). For more info about rootd see the web page:. NetFile //; ; //. Function Members (Methods); public:. TNetSystem(Bool_t ftpowner = kTRUE); TNetSystem(const char* url, Bool_t ftpowner = kTRUE); virtual~TNetSystem(); virtual voidTSystem::Abort(int code = 0); voidTObject::AbstractMethod(const char* method) const; virtual intTSystem::AcceptConnection(int sock); virtual Bool_tAccessPathName(const char* path, EAccessMode mode); virtual voidTSystem::AddFileHandler(TFileHandler* fh); virtual voidTSystem::AddIncludePath(const char* includePath); virtual voidTSystem::AddLinkedLibs(const char* linkedLib); virtual voidTSystem::AddSignalHandler(TSignalHandler* sh); virtual voidTSystem::AddStdExceptionHand",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TNetSystem.html:1940,secur,security,1940,root/html528/TNetSystem.html,https://root.cern,https://root.cern/root/html528/TNetSystem.html,2,"['attack', 'secur']","['attacks', 'security']"
Security,"/ after the host or port specifier; (see last example). Further the expansion of the standard shell; characters, like ~, $, .., are handled as expected.; TNetFile (actually TUrl) uses 1094 as default port for rootd. Connecting to a rootd requires the remote user id and password.; TNetFile allows three ways for you to provide your login:; 1) Setting it globally via the static functions:; TAuthenticate::SetGlobalUser() and; TAuthenticate::SetGlobalPasswd(); 2) Getting it from the ~/.netrc file (same file as used by ftp); 3) Command line prompt; The different methods will be tried in the order given above.; On machines with AFS rootd will authenticate using AFS (if it was; compiled with AFS support). If the protocol is specified as ""roots"" a secure authetication; method will be used. The secure method uses the SRP, Secure Remote; Passwords, package. SRP uses a so called ""asymmetric key exchange //; protocol"" in which no passwords are ever send over the wire. This //; protocol is safe against all known security attacks. For more see:. NetFile //; ; //; If the protocol is specified as ""rootk"" kerberos5 will be used for; authentication. The rootd daemon lives in the directory $ROOTSYS/bin. It can be; started either via inetd or by hand from the command line (no need; to be super user). For more info about rootd see the web page:. NetFile //; ; //. Function Members (Methods); public:. virtual~TNetFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option = """"); static TFileOpenHandle*TFile::AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual voidTDirectory",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TNetFile.html:1932,secur,security,1932,root/html602/TNetFile.html,https://root.cern,https://root.cern/root/html602/TNetFile.html,4,"['attack', 'secur']","['attacks', 'security']"
Security,"/ after the host or port specifier; (see last example). Further the expansion of the standard shell; characters, like ~, $, .., are handled as expected.; TNetFile (actually TUrl) uses 1094 as default port for rootd. Connecting to a rootd requires the remote user id and password.; TNetFile allows three ways for you to provide your login:; 1) Setting it globally via the static functions:; TAuthenticate::SetGlobalUser() and; TAuthenticate::SetGlobalPasswd(); 2) Getting it from the ~/.netrc file (same file as used by ftp); 3) Command line prompt; The different methods will be tried in the order given above.; On machines with AFS rootd will authenticate using AFS (if it was; compiled with AFS support). If the protocol is specified as ""roots"" a secure authetication; method will be used. The secure method uses the SRP, Secure Remote; Passwords, package. SRP uses a so called ""asymmetric key exchange //; protocol"" in which no passwords are ever send over the wire. This //; protocol is safe against all known security attacks. For more see:. NetFile //; ; //; If the protocol is specified as ""rootk"" kerberos5 will be used for; authentication. The rootd daemon lives in the directory $ROOTSYS/bin. It can be; started either via inetd or by hand from the command line (no need; to be super user). For more info about rootd see the web page:. NetFile //; ; //. Function Members (Methods); public:. virtual~TNetSystem(); virtual voidTSystem::Abort(int code = 0); voidTObject::AbstractMethod(const char* method) const; virtual intTSystem::AcceptConnection(int sock); virtual Bool_tAccessPathName(const char* path, EAccessMode mode); virtual voidTSystem::AddDynamicPath(const char* pathname); virtual voidTSystem::AddFileHandler(TFileHandler* fh); virtual voidTSystem::AddIncludePath(const char* includePath); virtual voidTSystem::AddLinkedLibs(const char* linkedLib); virtual voidTSystem::AddSignalHandler(TSignalHandler* sh); virtual voidTSystem::AddStdExceptionHandler(TStdExceptionHandler* eh); v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TNetSystem.html:1940,secur,security,1940,root/html602/TNetSystem.html,https://root.cern,https://root.cern/root/html602/TNetSystem.html,4,"['attack', 'secur']","['attacks', 'security']"
Security,"/ overload this one for individual initialisation of the testing,; 307 // it is then called automatically within the global ""TestInit""; 308 ; 309 // variables (and private member functions) for the Evaluation:; 310 // get the efficiency. It fills a histogram for efficiency/vs/bkg; 311 // and returns the one value fo the efficiency demanded for; 312 // in the TString argument. (Watch the string format); 313 virtual Double_t GetEfficiency( const TString&, Types::ETreeType, Double_t& err );; 314 virtual Double_t GetTrainingEfficiency(const TString& );; 315 virtual std::vector<Float_t> GetMulticlassEfficiency( std::vector<std::vector<Float_t> >& purity );; 316 virtual std::vector<Float_t> GetMulticlassTrainingEfficiency(std::vector<std::vector<Float_t> >& purity );; 317 virtual TMatrixD GetMulticlassConfusionMatrix(Double_t effB, Types::ETreeType type);; 318 virtual Double_t GetSignificance() const;; 319 virtual Double_t GetROCIntegral(TH1D *histS, TH1D *histB) const;; 320 virtual Double_t GetROCIntegral(PDF *pdfS=nullptr, PDF *pdfB=nullptr) const;; 321 virtual Double_t GetMaximumSignificance( Double_t SignalEvents, Double_t BackgroundEvents,; 322 Double_t& optimal_significance_value ) const;; 323 virtual Double_t GetSeparation( TH1*, TH1* ) const;; 324 virtual Double_t GetSeparation( PDF* pdfS = nullptr, PDF* pdfB = nullptr ) const;; 325 ; 326 virtual void GetRegressionDeviation(UInt_t tgtNum, Types::ETreeType type, Double_t& stddev,Double_t& stddev90Percent ) const;; 327 // ---------- public accessors -----------------------------------------------; 328 ; 329 // classifier naming (a lot of names ... aren't they ;-); 330 const TString& GetJobName () const { return fJobName; }; 331 const TString& GetMethodName () const { return fMethodName; }; 332 TString GetMethodTypeName() const { return Types::Instance().GetMethodName(fMethodType); }; 333 Types::EMVA GetMethodType () const { return fMethodType; }; 334 const char* GetName () const { return fMethodName.Data(); }; 335 c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodBase_8h_source.html:13369,access,accessors,13369,doc/master/MethodBase_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html,1,['access'],['accessors']
Security,"/ returns the MVA response for given event; 87 Double_t EvaluateMVA( const std::vector<Float_t> &, const TString& methodTag, Double_t aux = 0 );; 88 Double_t EvaluateMVA( const std::vector<Double_t>&, const TString& methodTag, Double_t aux = 0 );; 89 Double_t EvaluateMVA( MethodBase* method, Double_t aux = 0 );; 90 Double_t EvaluateMVA( const TString& methodTag, Double_t aux = 0 );; 91 ; 92 // returns error on MVA response for given event; 93 // NOTE: must be called AFTER ""EvaluateMVA(...)"" call !; 94 Double_t GetMVAError() const { return fMvaEventError; }; 95 Double_t GetMVAErrorLower() const { return fMvaEventError; }; 96 Double_t GetMVAErrorUpper() const { return fMvaEventErrorUpper; }; 97 ; 98 // regression response; 99 const std::vector< Float_t >& EvaluateRegression( const TString& methodTag, Double_t aux = 0 );; 100 const std::vector< Float_t >& EvaluateRegression( MethodBase* method, Double_t aux = 0 );; 101 Float_t EvaluateRegression( UInt_t tgtNumber, const TString& methodTag, Double_t aux = 0 );; 102 ; 103 // multiclass response; 104 const std::vector< Float_t >& EvaluateMulticlass( const TString& methodTag, Double_t aux = 0 );; 105 const std::vector< Float_t >& EvaluateMulticlass( MethodBase* method, Double_t aux = 0 );; 106 Float_t EvaluateMulticlass( UInt_t clsNumber, const TString& methodTag, Double_t aux = 0 );; 107 ; 108 // probability and rarity accessors (see Users Guide for definition of Rarity); 109 Double_t GetProba ( const TString& methodTag, Double_t ap_sig=0.5, Double_t mvaVal=-9999999 );; 110 Double_t GetRarity( const TString& methodTag, Double_t mvaVal=-9999999 );; 111 ; 112 // accessors; 113 virtual const char* GetName() const { return ""Reader""; }; 114 Bool_t Verbose( void ) const { return fVerbose; }; 115 void SetVerbose( Bool_t v ) { fVerbose = v; }; 116 ; 117 const DataSetInfo& DataInfo() const { return fDataSetInfo; }; 118 DataSetInfo& DataInfo() { return fDataSetInfo; }; 119 ; 120 void AddVariable( const TString& expression, Float_t* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Reader_8h_source.html:4722,access,accessors,4722,doc/master/Reader_8h_source.html,https://root.cern,https://root.cern/doc/master/Reader_8h_source.html,1,['access'],['accessors']
Security,"// don't know).; 1161 ; 1162 // if (this has only base classes) {; 1163 // warn = kFALSE;; 1164 // }; 1165 }; 1166#endif // TEST_FOR_BACKWARD_COMPATIBILITY; 1167 if (warn && (fOldVersion <= 2)) {; 1168 // Names of STL base classes was modified in vers==3. Allocators removed; 1169 //; 1170 TIter nextBC(fClass->GetListOfBases());; 1171 TBaseClass* bc = 0;; 1172 while ((bc = (TBaseClass*) nextBC())) {; 1173 if (bc->GetClassPointer()->GetCollectionType()) {; 1174 warn = kFALSE;; 1175 }; 1176 }; 1177 }; 1178 if (warn) {; 1179 if (file) {; 1180 Warning(""BuildCheck"", ""\n\; 1181 The StreamerInfo of class %s read from file %s\n\; 1182 has the same version (=%d) as the active class but a different checksum.\n\; 1183 You should update the version to ClassDef(%s,%d).\n\; 1184 Do not try to write objects with the current class definition,\n\; 1185 the files will not be readable.\n"", GetName(), file->GetName(), fClassVersion, GetName(), fClassVersion + 1);; 1186 } else {; 1187 Warning(""BuildCheck"", ""\n\; 1188 The StreamerInfo of class %s \n\; 1189 has the same version (=%d) as the active class but a different checksum.\n\; 1190 You should update the version to ClassDef(%s,%d).\n\; 1191 Do not try to write objects with the current class definition,\n\; 1192 the files will not be readable.\n"", GetName(), fClassVersion, GetName(), fClassVersion + 1);; 1193 }; 1194 CompareContent(fClass,0,kTRUE,kTRUE,file);; 1195 fClass->SetBit(TClass::kWarned);; 1196 }; 1197 } else {; 1198 if (!fClass->IsVersioned()) {; 1199 Fatal(""BuildCheck"", ""\n\; 1200 The StreamerInfo of unversioned class %s \n\; 1201 has the same version (=%d) as the active class but an old checksum.\n\; 1202 This should not happen. An assert will follow.\n"", GetName(), fClassVersion);; 1203 }; 1204 }; 1205 }; 1206 if (!fClass->IsLoaded() && this->fOnFileClassVersion>1); 1207 {; 1208 ROOT::ResetClassVersion(fClass,(const char*)-1, this->fClassVersion);; 1209 }; 1210 }; 1211 // FIXME: This code can never execute because Build() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:45410,checksum,checksum,45410,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['checksum'],['checksum']
Security,"// internally) for 2-fold cross validation.; //; // The split type can be ""Random"", ""RandomStratified"" or ""Deterministic"".; // For the last option, check the comment below. Random splitting randomises; // the order of events and distributes events as evenly as possible.; // RandomStratified applies the same logic but distributes events within a; // class as evenly as possible over the folds.; //; UInt_t numFolds = 2;; TString analysisType = ""Classification"";; ; TString splitType = (useRandomSplitting) ? ""Random"" : ""Deterministic"";; ; //; // One can also use a custom splitting function for producing the folds.; // The example uses a dataset spectator `eventID`.; //; // The idea here is that eventID should be an event number that is integral,; // random and independent of the data, generated only once. This last; // property ensures that if a calibration is changed the same event will; // still be assigned the same fold.; //; // This can be used to use the cross validated classifiers in application,; // a technique that can simplify statistical analysis.; //; // If you want to run TMVACrossValidationApplication, make sure you have; // run this tutorial with Deterministic splitting type, i.e.; // with the option useRandomSPlitting = false; //; ; TString splitExpr = (!useRandomSplitting) ? ""int(fabs([eventID]))%int([NumFolds])"" : """";; ; TString cvOptions = Form(""!V""; "":!Silent""; "":ModelPersistence""; "":AnalysisType=%s""; "":SplitType=%s""; "":NumFolds=%i""; "":SplitExpr=%s"",; analysisType.Data(), splitType.Data(), numFolds,; splitExpr.Data());; ; TMVA::CrossValidation cv{""TMVACrossValidation"", dataloader, outputFile, cvOptions};; ; // --------------------------------------------------------------------------; ; //; // Books a method to use for evaluation; //; cv.BookMethod(TMVA::Types::kBDT, ""BDTG"",; ""!H:!V:NTrees=100:MinNodeSize=2.5%:BoostType=Grad""; "":NegWeightTreatment=Pray:Shrinkage=0.10:nCuts=20""; "":MaxDepth=2"");; ; cv.BookMethod(TMVA::Types::kFisher, ""Fisher"",; ""!H:!V:Fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidation_8C.html:23054,validat,validated,23054,doc/master/TMVACrossValidation_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidation_8C.html,1,['validat'],['validated']
Security,"// name of ROOT file to load; 1.6 Configuring user access; By default, the http server is open for anonymous access. One could restrict the access to the server for authenticated users only. First of all, one should create a password file, using the htdigest utility.; [shell] htdigest -c .htdigest domain_name user_name; It is recommended not to use special symbols in domain or user names. Several users can be add to the “.htdigest” file. When starting the server, the following arguments should be specified:; auto serv = new THttpServer(""http:8080?auth_file=.htdigest&auth_domain=domain_name"");; After that, the web browser will automatically request to input a name/password for the domain “domain_name”; Based on authorized accounts, one could restrict or enable access to some elements in the server objects hierarchy, using THttpServer::Restrict() method.; For instance, one could hide complete folder from ‘guest’ account:; serv->Restrict(""/Folder"", ""hidden=guest"");; Or one could hide from all but ‘admin’ account:; serv->Restrict(""/Folder"", ""visible=admin"");; Hidden folders or objects can not be accessed via http protocol.; By default server runs in readonly mode and do not allow methods execution via ‘exe.json’ or ‘exe.bin’ requests. To allow such action, one could either grant generic access for all or one could allow to execute only special method:; serv->Restrict(""/Folder/histo1"", ""allow=all"");; serv->Restrict(""/Folder/histo1"", ""allow_method=GetTitle"");; One could provide several options for the same item, separating them with ‘&’ sign:; serv->Restrict(""/Folder/histo1"", ""allow_method=GetTitle&hide=guest"");; Complete list of supported options could be found in TRootSniffer:Restrict() method documentation.; 1.7 Using FastCGI interface; FastCGI is a protocol for interfacing interactive programs with a web server like Apache, lighttpd, Microsoft ISS and many others.; When starting THttpServer, one could specify:; serv = new THttpServer(""fastcgi:9000"");; In fact, the Fas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html:8644,access,accessed,8644,root/htmldoc/guides/HttpServer/HttpServer.html,https://root.cern,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html,1,['access'],['accessed']
Security,"/// In read-only server is not allowed to change any ROOT object, registered to the server; 294/// Server also cannot execute objects method via exe.json request; 295 ; 296void THttpServer::SetReadOnly(Bool_t readonly); 297{; 298 if (fSniffer); 299 fSniffer->SetReadOnly(readonly);; 300}; 301 ; 302////////////////////////////////////////////////////////////////////////////////; 303/// returns true if only websockets are handled by the server; 304///; 305/// Typically used by WebGui; 306 ; 307Bool_t THttpServer::IsWSOnly() const; 308{; 309 return fWSOnly;; 310}; 311 ; 312////////////////////////////////////////////////////////////////////////////////; 313/// Set websocket-only mode.; 314///; 315/// If true, server will only handle websockets connection; 316/// plus serving file requests to access jsroot/ui5 scripts; 317 ; 318void THttpServer::SetWSOnly(Bool_t on); 319{; 320 fWSOnly = on;; 321}; 322 ; 323////////////////////////////////////////////////////////////////////////////////; 324/// Add files location, which could be used in the server; 325///; 326/// One could map some system folder to the server like; 327///; 328/// serv->AddLocation(""mydir/"", ""/home/user/specials"");; 329///; 330/// Than files from this directory could be addressed via server like `http://localhost:8080/mydir/myfile.root`; 331 ; 332void THttpServer::AddLocation(const char *prefix, const char *path); 333{; 334 if (!prefix || (*prefix == 0)); 335 return;; 336 ; 337 if (!path); 338 fLocations.erase(fLocations.find(prefix));; 339 else; 340 fLocations[prefix] = path;; 341}; 342 ; 343////////////////////////////////////////////////////////////////////////////////; 344/// Set location of JSROOT to use with the server; 345///; 346/// One could specify address like:; 347///; 348/// * https://root.cern/js/7.6.0/; 349/// * https://jsroot.gsi.de/7.6.0/; 350///; 351/// This allows to get new JSROOT features with old server,; 352/// reduce load on THttpServer instance, also startup time can be improved; 35",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THttpServer_8cxx_source.html:10397,access,access,10397,doc/master/THttpServer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THttpServer_8cxx_source.html,1,['access'],['access']
Security,"/// gSystem->ProcessEvents() calls. But be aware, that such timer can interrupt any system call; 488/// (like malloc) and can lead to dead locks, especially in multi-threaded applications.; 489 ; 490void THttpServer::SetTimer(Long_t milliSec, Bool_t mode); 491{; 492 if (fTimer) {; 493 fTimer->Stop();; 494 fTimer.reset();; 495 }; 496 if (milliSec > 0) {; 497 if (fOwnThread) {; 498 Error(""SetTimer"", ""Server runs already in special thread, therefore no any timer can be created"");; 499 } else {; 500 fTimer = std::make_unique<THttpTimer>(milliSec, mode, *this);; 501 fTimer->TurnOn();; 502 }; 503 }; 504}; 505 ; 506////////////////////////////////////////////////////////////////////////////////; 507/// Creates special thread to process all requests, directed to http server; 508///; 509/// Should be used with care - only dedicated instance of TRootSniffer is allowed; 510/// By default THttpServer allows to access global lists pointers gROOT or gFile.; 511/// To be on the safe side, all kind of such access performed from the main thread.; 512/// Therefore usage of specialized thread means that no any global pointers will; 513/// be accessible by THttpServer; 514 ; 515void THttpServer::CreateServerThread(); 516{; 517 if (fOwnThread); 518 return;; 519 ; 520 SetTimer(0);; 521 fMainThrdId = 0;; 522 fOwnThread = true;; 523 ; 524 std::thread thrd([this] {; 525 int nempty = 0;; 526 while (fOwnThread && !fTerminated) {; 527 int nprocess = ProcessRequests();; 528 if (nprocess > 0); 529 nempty = 0;; 530 else; 531 nempty++;; 532 if (nempty > 1000) {; 533 nempty = 0;; 534 std::this_thread::sleep_for(std::chrono::milliseconds(1));; 535 }; 536 }; 537 });; 538 ; 539 fThrd = std::move(thrd);; 540}; 541 ; 542////////////////////////////////////////////////////////////////////////////////; 543/// Stop server thread; 544///; 545/// Normally called shortly before http server destructor; 546 ; 547void THttpServer::StopServerThread(); 548{; 549 if (!fOwnThread); 550 return;; 551 ; 552 fOwnThread ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THttpServer_8cxx_source.html:17031,access,access,17031,doc/master/THttpServer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THttpServer_8cxx_source.html,1,['access'],['access']
Security,"/// it is used as a 2 dimensional array of fixed size.; 175/// - In case of the truncated floating point types (Float16_t and Double32_t) you can; 176/// furthermore specify the range in the style [xmin,xmax] or [xmin,xmax,nbits] after; 177/// the type character. See `TStreamerElement::GetRange()` for further information.; 178/// - Any of other form is not supported.; 179///; 180/// Note that the TTree will assume that all the item are contiguous in memory.; 181/// On some platform, this is not always true of the member of a struct or a class,; 182/// due to padding and alignment. Sorting your data member in order of decreasing; 183/// sizeof usually leads to their being contiguous in memory.; 184///; 185/// * bufsize is the buffer size in bytes for this branch; 186/// The default value is 32000 bytes and should be ok for most cases.; 187/// You can specify a larger value (e.g. 256000) if your Tree is not split; 188/// and each entry is large (Megabytes); 189/// A small value for bufsize is optimum if you intend to access; 190/// the entries in the Tree randomly and your Tree is in split mode.; 191///; 192/// See an example of a Branch definition in the TTree constructor.; 193///; 194/// Note that in case the data type is an object, this branch can contain; 195/// only this object.; 196///; 197/// Note that this function is invoked by TTree::Branch; 198 ; 199TBranch::TBranch(TTree *tree, const char *name, void *address, const char *leaflist, Int_t basketsize, Int_t compress); 200 : TNamed(name, leaflist); 201, TAttFill(0, 1001); 202, fCompress(compress); 203, fBasketSize((basketsize < 100) ? 100 : basketsize); 204, fEntryOffsetLen(0); 205, fWriteBasket(0); 206, fEntryNumber(0); 207, fExtraBasket(nullptr); 208, fIOFeatures(tree ? tree->GetIOFeatures().GetFeatures() : 0); 209, fOffset(0); 210, fMaxBaskets(10); 211, fNBaskets(0); 212, fSplitLevel(0); 213, fNleaves(0); 214, fReadBasket(0); 215, fReadEntry(-1); 216, fFirstBasketEntry(-1); 217, fNextBasketEntry(-1); 218, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranch_8cxx_source.html:7401,access,access,7401,doc/master/TBranch_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranch_8cxx_source.html,1,['access'],['access']
Security,"///////////////////////////////////////////////////////////////////////////////; 1426/// Returns true if this branch supports bulk IO, false otherwise.; 1427///; 1428/// This will return true if all the various preconditions necessary hold true; 1429/// to perform bulk IO (reasonable type, single TLeaf, etc); the bulk IO may; 1430/// still fail, depending on the contents of the individual TBaskets loaded.; 1431bool TBranch::SupportsBulkRead() const {; 1432 return (fNleaves == 1) &&; 1433 (static_cast<TLeaf*>(fLeaves.UncheckedAt(0))->GetDeserializeType() != TLeaf::DeserializeType::kExternal);; 1434}; 1435 ; 1436////////////////////////////////////////////////////////////////////////////////; 1437/// \brief Read a basket of events into the given buffer with byte swapping.; 1438///; 1439/// \return On success, the number of events of the type held by this branch; 1440/// that have been read into the buffer. -1 on failure.; 1441///; 1442/// On success, the caller should be able to access the contents of buf as they; 1443/// are with:; 1444///; 1445/// ~~~{.cpp}; 1446/// static_cast<T*>(buf.GetCurrent()); 1447/// ~~~; 1448///; 1449/// where T is the type stored on this branch.; 1450///; 1451/// When `count_buf` points to a valid TBuffer and the branch has a branch count,; 1452/// `count_buf` will be filled (via a call to GetEntriesSerialized) with the data; 1453/// from the branchCount. After deserialization those value can be used to calculate; 1454/// the number of elements corresponding to each entries.; 1455///; 1456/// For each entry the number of elements is the multiplication of; 1457/// ; 1458/// ~~~{.cpp}; 1459/// TLeaf *leaf = static_cast<TLeaf*>(branch->GetListOfLeaves()->At(0));; 1460/// auto len = leaf->GetLen();; 1461/// ~~~; 1462///; 1463/// and the value in the BranchCount corresponding to that entry (can be obtained; 1464/// from `branch->GetBranchCount()`).; 1465///; 1466/// \note This interface is not meant to be exposed to end users, but rather it shou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranch_8cxx_source.html:51610,access,access,51610,doc/master/TBranch_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranch_8cxx_source.html,1,['access'],['access']
Security,"//////////////////////////////////////////////////////////////////////////; 658/// Returns the pragma bits as specified in the LinkDef.h file.; 659 ; 660Int_t TClassTable::GetPragmaBits(const char *cname); 661{; 662 NormalizeThenLock guard(cname);; 663 ; 664 TClassRec *r = FindElement(guard.GetNormalizedName().c_str(), kFALSE);; 665 if (r); 666 return r->fBits;; 667 return 0;; 668}; 669 ; 670////////////////////////////////////////////////////////////////////////////////; 671/// Given the class name returns the Dictionary() function of a class; 672/// (uses hash of name).; 673 ; 674DictFuncPtr_t TClassTable::GetDict(const char *cname); 675{; 676 if (gDebug > 9) {; 677 ::Info(""GetDict"", ""searches for %s"", cname);; 678 fgIdMap->Print();; 679 }; 680 NormalizeThenLock guard(cname);; 681 ; 682 TClassRec *r = FindElement(guard.GetNormalizedName().c_str(), kFALSE);; 683 if (r); 684 return r->fDict;; 685 return nullptr;; 686}; 687 ; 688////////////////////////////////////////////////////////////////////////////////; 689/// Given the std::type_info returns the Dictionary() function of a class; 690/// (uses hash of std::type_info::name()).; 691 ; 692DictFuncPtr_t TClassTable::GetDict(const std::type_info& info); 693{; 694 if (!CheckClassTableInit()); 695 return nullptr;; 696 ; 697 if (gDebug > 9); 698 ROOT::GetROOT(); // Info might recursively call TClassTable during the gROOT init; 699 ; 700 std::lock_guard<std::mutex> lock(GetClassTableMutex());; 701 ; 702 if (gDebug > 9) {; 703 ::Info(""GetDict"", ""searches for %s at 0x%zx"", info.name(), (size_t)&info);; 704 fgIdMap->Print();; 705 }; 706 ; 707 TClassRec *r = fgIdMap->Find(info.name());; 708 if (r); 709 return r->fDict;; 710 return nullptr;; 711}; 712 ; 713////////////////////////////////////////////////////////////////////////////////; 714/// Given the normalized class name returns the Dictionary() function of a class; 715/// (uses hash of name).; 716 ; 717DictFuncPtr_t TClassTable::GetDictNorm(const char *cname); 718{; 719 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClassTable_8cxx_source.html:22577,hash,hash,22577,doc/master/TClassTable_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClassTable_8cxx_source.html,2,['hash'],['hash']
Security,"/////////////////////////////////////////////////////////////////////; 325/// Return all the rules that applies to the specified version of the given 'source' class.; 326/// User has to delete the returned array; 327 ; 328const TSchemaRuleSet::TMatches TSchemaRuleSet::FindRules( const TString &source, Int_t version ) const; 329{; 330 TObject* obj;; 331 TObjArrayIter it( fAllRules );; 332 TMatches arr;; 333 // arr->SetOwner( kFALSE );; 334 ; 335 while( (obj = it.Next()) ) {; 336 TSchemaRule* rule = (TSchemaRule*)obj;; 337 if( rule->GetSourceClass() == source && rule->TestVersion( version ) ); 338 arr.push_back( rule );; 339 }; 340 ; 341 return arr;; 342}; 343 ; 344////////////////////////////////////////////////////////////////////////////////; 345/// Return all the rules that applies to the specified checksum of the given 'source' class.; 346/// User has to delete the returned array; 347 ; 348const TSchemaRuleSet::TMatches TSchemaRuleSet::FindRules( const TString &source, UInt_t checksum ) const; 349{; 350 TObject* obj;; 351 TObjArrayIter it( fAllRules );; 352 TMatches arr;; 353 // arr->SetOwner( kFALSE );; 354 ; 355 while( (obj = it.Next()) ) {; 356 TSchemaRule* rule = (TSchemaRule*)obj;; 357 if( rule->GetSourceClass() == source && rule->TestChecksum( checksum ) ); 358 arr.push_back( rule );; 359 }; 360 ; 361 return arr;; 362}; 363 ; 364////////////////////////////////////////////////////////////////////////////////; 365/// Return all the rules that applies to the specified version OR checksum of the given 'source' class.; 366/// User has to delete the returned array; 367 ; 368const TSchemaRuleSet::TMatches TSchemaRuleSet::FindRules( const TString &source, Int_t version, UInt_t checksum ) const; 369{; 370 TObject* obj;; 371 TObjArrayIter it( fAllRules );; 372 TMatches arr;; 373 // arr->SetOwner( kFALSE );; 374 ; 375 while( (obj = it.Next()) ) {; 376 TSchemaRule* rule = (TSchemaRule*)obj;; 377 if( rule->GetSourceClass() == source && ( rule->TestVersion( version ) || ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRuleSet_8cxx_source.html:12876,checksum,checksum,12876,doc/master/TSchemaRuleSet_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRuleSet_8cxx_source.html,1,['checksum'],['checksum']
Security,//////////////////////////////////////////////////////////////////; 303 /// Return maximal queue length of data which can be held by window; 304 unsigned GetMaxQueueLength() const { return fMaxQueueLength; }; 305 ; 306 /////////////////////////////////////////////////////////////////////////; 307 /// configures that only native (own-created) connections are allowed; 308 void SetNativeOnlyConn(bool on = true) { fNativeOnlyConn = on; }; 309 ; 310 /////////////////////////////////////////////////////////////////////////; 311 /// returns true if only native (own-created) connections are allowed; 312 bool IsNativeOnlyConn() const { return fNativeOnlyConn; }; 313 ; 314 /////////////////////////////////////////////////////////////////////////; 315 /// Configure if authentication key in connection string is required; 316 void SetRequireAuthKey(bool on) { fRequireAuthKey = on; }; 317 ; 318 /////////////////////////////////////////////////////////////////////////; 319 /// returns true if authentication string is required; 320 bool IsRequireAuthKey() const { return fRequireAuthKey; }; 321 ; 322 /////////////////////////////////////////////////////////////////////////; 323 /// Configure if window can access local files via currentdir/ path of http server; 324 void SetUseCurrentDir(bool on = true) { fUseCurrentDir = on; }; 325 ; 326 /////////////////////////////////////////////////////////////////////////; 327 /// returns true if window can access local files via currentdir/ path of http server; 328 bool IsUseCurrentDir() const { return fUseCurrentDir; }; 329 ; 330 void SetClientVersion(const std::string &vers);; 331 ; 332 std::string GetClientVersion() const;; 333 ; 334 void SetUserArgs(const std::string &args);; 335 ; 336 std::string GetUserArgs() const;; 337 ; 338 int NumConnections(bool with_pending = false) const;; 339 ; 340 unsigned GetConnectionId(int num = 0) const;; 341 ; 342 std::vector<unsigned> GetConnections(unsigned excludeid = 0) const;; 343 ; 344 bool HasConnectio,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RWebWindow_8hxx_source.html:15023,authenticat,authentication,15023,doc/v632/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RWebWindow_8hxx_source.html,1,['authenticat'],['authentication']
Security,//////////////////////////////////////////////////////////////////; 306 /// Return maximal queue length of data which can be held by window; 307 unsigned GetMaxQueueLength() const { return fMaxQueueLength; }; 308 ; 309 /////////////////////////////////////////////////////////////////////////; 310 /// configures that only native (own-created) connections are allowed; 311 void SetNativeOnlyConn(bool on = true) { fNativeOnlyConn = on; }; 312 ; 313 /////////////////////////////////////////////////////////////////////////; 314 /// returns true if only native (own-created) connections are allowed; 315 bool IsNativeOnlyConn() const { return fNativeOnlyConn; }; 316 ; 317 /////////////////////////////////////////////////////////////////////////; 318 /// Configure if authentication key in connection string is required; 319 void SetRequireAuthKey(bool on) { fRequireAuthKey = on; }; 320 ; 321 /////////////////////////////////////////////////////////////////////////; 322 /// returns true if authentication string is required; 323 bool IsRequireAuthKey() const { return fRequireAuthKey; }; 324 ; 325 /////////////////////////////////////////////////////////////////////////; 326 /// Configure if window can access local files via currentdir/ path of http server; 327 void SetUseCurrentDir(bool on = true) { fUseCurrentDir = on; }; 328 ; 329 /////////////////////////////////////////////////////////////////////////; 330 /// returns true if window can access local files via currentdir/ path of http server; 331 bool IsUseCurrentDir() const { return fUseCurrentDir; }; 332 ; 333 void SetClientVersion(const std::string &vers);; 334 ; 335 std::string GetClientVersion() const;; 336 ; 337 void SetUserArgs(const std::string &args);; 338 ; 339 std::string GetUserArgs() const;; 340 ; 341 int NumConnections(bool with_pending = false) const;; 342 ; 343 unsigned GetConnectionId(int num = 0) const;; 344 ; 345 std::vector<unsigned> GetConnections(unsigned excludeid = 0) const;; 346 ; 347 bool HasConnectio,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RWebWindow_8hxx_source.html:15174,authenticat,authentication,15174,doc/master/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RWebWindow_8hxx_source.html,1,['authenticat'],['authentication']
Security,"//////////////////////////////////////////////////////////; 1636/// \brief Build a dataframe that generates numEntries entries.; 1637/// \param[in] numEntries The number of entries to generate.; 1638///; 1639/// An empty-source dataframe constructed with a number of entries will; 1640/// generate those entries on the fly when some action is triggered,; 1641/// and it will do so for all the previously-defined columns.; 1642/// \see ROOT::RDF::RInterface for the documentation of the methods available.; 1643RDataFrame::RDataFrame(ULong64_t numEntries); 1644 : RInterface(std::make_shared<RDFDetail::RLoopManager>(numEntries)); 1645 ; 1646{; 1647}; 1648 ; 1649//////////////////////////////////////////////////////////////////////////; 1650/// \brief Build dataframe associated to data source.; 1651/// \param[in] ds The data source object.; 1652/// \param[in] defaultColumns Collection of default column names to fall back to when none is specified.; 1653///; 1654/// A dataframe associated to a data source will query it to access column values.; 1655/// \see ROOT::RDF::RInterface for the documentation of the methods available.; 1656RDataFrame::RDataFrame(std::unique_ptr<ROOT::RDF::RDataSource> ds, const ColumnNames_t &defaultColumns); 1657 : RInterface(std::make_shared<RDFDetail::RLoopManager>(std::move(ds), defaultColumns)); 1658{; 1659}; 1660 ; 1661//////////////////////////////////////////////////////////////////////////; 1662/// \brief Build dataframe from an RDatasetSpec object.; 1663/// \param[in] spec The dataset specification object.; 1664///; 1665/// A dataset specification includes trees and file names,; 1666/// as well as an optional friend list and/or entry range.; 1667///; 1668/// ### Example usage from Python:; 1669/// ~~~{.py}; 1670/// spec = (; 1671/// ROOT.RDF.Experimental.RDatasetSpec(); 1672/// .AddSample((""data"", ""tree"", ""file.root"")); 1673/// .WithGlobalFriends(""friendTree"", ""friend.root"", ""alias""); 1674/// .WithGlobalRange((100, 200)); 1675/// ); 1676/// d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:92729,access,access,92729,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['access'],['access']
Security,"//////////////////////////////////////////////////////////; 1813/// \brief Build a dataframe that generates numEntries entries.; 1814/// \param[in] numEntries The number of entries to generate.; 1815///; 1816/// An empty-source dataframe constructed with a number of entries will; 1817/// generate those entries on the fly when some action is triggered,; 1818/// and it will do so for all the previously-defined columns.; 1819/// \see ROOT::RDF::RInterface for the documentation of the methods available.; 1820RDataFrame::RDataFrame(ULong64_t numEntries); 1821 : RInterface(std::make_shared<RDFDetail::RLoopManager>(numEntries)); 1822 ; 1823{; 1824}; 1825 ; 1826//////////////////////////////////////////////////////////////////////////; 1827/// \brief Build dataframe associated to data source.; 1828/// \param[in] ds The data source object.; 1829/// \param[in] defaultColumns Collection of default column names to fall back to when none is specified.; 1830///; 1831/// A dataframe associated to a data source will query it to access column values.; 1832/// \see ROOT::RDF::RInterface for the documentation of the methods available.; 1833RDataFrame::RDataFrame(std::unique_ptr<ROOT::RDF::RDataSource> ds, const ColumnNames_t &defaultColumns); 1834 : RInterface(std::make_shared<RDFDetail::RLoopManager>(std::move(ds), defaultColumns)); 1835{; 1836}; 1837 ; 1838//////////////////////////////////////////////////////////////////////////; 1839/// \brief Build dataframe from an RDatasetSpec object.; 1840/// \param[in] spec The dataset specification object.; 1841///; 1842/// A dataset specification includes trees and file names,; 1843/// as well as an optional friend list and/or entry range.; 1844///; 1845/// ### Example usage from Python:; 1846/// ~~~{.py}; 1847/// spec = (; 1848/// ROOT.RDF.Experimental.RDatasetSpec(); 1849/// .AddSample((""data"", ""tree"", ""file.root"")); 1850/// .WithGlobalFriends(""friendTree"", ""friend.root"", ""alias""); 1851/// .WithGlobalRange((100, 200)); 1852/// ); 1853/// d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:100568,access,access,100568,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['access'],['access']
Security,"//////////////////////////////////////////////////////////; 95/// As the database is read-only, syncing data to disc is a no-op and always succeeds; 96int VfsRdOnlySync(sqlite3_file * /*pFile*/, int /*flags*/); 97{; 98 return SQLITE_OK;; 99}; 100 ; 101////////////////////////////////////////////////////////////////////////////; 102/// Returns the cached file size; 103int VfsRdOnlyFileSize(sqlite3_file *pFile, sqlite_int64 *pSize); 104{; 105 VfsRootFile *p = reinterpret_cast<VfsRootFile *>(pFile);; 106 *pSize = p->fRawFile->GetSize();; 107 return SQLITE_OK;; 108}; 109 ; 110////////////////////////////////////////////////////////////////////////////; 111/// As the database is read-only, locks for concurrent access are no-ops and always succeeds; 112int VfsRdOnlyLock(sqlite3_file * /*pFile*/, int /*level*/); 113{; 114 return SQLITE_OK;; 115}; 116 ; 117////////////////////////////////////////////////////////////////////////////; 118/// As the database is read-only, locks for concurrent access are no-ops and always succeeds; 119int VfsRdOnlyUnlock(sqlite3_file * /*pFile*/, int /*level*/); 120{; 121 return SQLITE_OK;; 122}; 123 ; 124////////////////////////////////////////////////////////////////////////////; 125/// As the database is read-only, locks for concurrent access are no-ops and always succeeds; 126int VfsRdOnlyCheckReservedLock(sqlite3_file * /*pFile*/, int *pResOut); 127{; 128 *pResOut = 0;; 129 return SQLITE_OK;; 130}; 131 ; 132////////////////////////////////////////////////////////////////////////////; 133/// As the database is read-only, we know there are no additional control files such as a database journal; 134int VfsRdOnlyFileControl(sqlite3_file * /*p*/, int /*op*/, void * /*pArg*/); 135{; 136 return SQLITE_NOTFOUND;; 137}; 138 ; 139////////////////////////////////////////////////////////////////////////////; 140/// The database device's sector size is only needed for writing; 141int VfsRdOnlySectorSize(sqlite3_file * /*pFile*/); 142{; 143 return SQLITE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RSqliteDS_8cxx_source.html:5486,access,access,5486,doc/master/RSqliteDS_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RSqliteDS_8cxx_source.html,1,['access'],['access']
Security,"/////////////////////////////////////////////////////////; 739/// Given the class name returns the TClassProto object for the class.; 740/// (uses hash of name).; 741 ; 742TProtoClass *TClassTable::GetProto(const char *cname); 743{; 744 if (gDebug > 9) {; 745 ::Info(""GetDict"", ""searches for %s"", cname);; 746 }; 747 ; 748 if (!CheckClassTableInit()); 749 return nullptr;; 750 ; 751 NormalizeThenLock guard(cname);; 752 ; 753 if (gDebug > 9) {; 754 // Because of the early call to Info, gROOT is already initialized; 755 // and thus this will not cause a recursive call to TClassTable.; 756 ::Info(""GetDict"", ""searches for %s"", cname);; 757 fgIdMap->Print();; 758 }; 759 ; 760 TClassRec *r = FindElement(guard.GetNormalizedName().c_str(), kFALSE);; 761 if (r); 762 return r->fProto;; 763 return nullptr;; 764}; 765 ; 766////////////////////////////////////////////////////////////////////////////////; 767/// Given the class normalized name returns the TClassProto object for the class.; 768/// (uses hash of name).; 769 ; 770TProtoClass *TClassTable::GetProtoNorm(const char *cname); 771{; 772 if (gDebug > 9) {; 773 ::Info(""GetDict"", ""searches for %s"", cname);; 774 }; 775 ; 776 if (!CheckClassTableInit()); 777 return nullptr;; 778 ; 779 std::lock_guard<std::mutex> lock(GetClassTableMutex());; 780 ; 781 if (gDebug > 9) {; 782 fgIdMap->Print();; 783 }; 784 ; 785 TClassRec *r = FindElement(cname, kFALSE);; 786 if (r); 787 return r->fProto;; 788 return nullptr;; 789}; 790 ; 791////////////////////////////////////////////////////////////////////////////////; 792 ; 793extern ""C"" {; 794 static int ClassComp(const void *a, const void *b); 795 {; 796 // Function used for sorting classes alphabetically.; 797 ; 798 return strcmp((*(TClassRec **)a)->fName, (*(TClassRec **)b)->fName);; 799 }; 800}; 801 ; 802////////////////////////////////////////////////////////////////////////////////; 803/// Returns next class from sorted class table. Don't use this iterator; 804/// while modifying the class ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClassTable_8cxx_source.html:24950,hash,hash,24950,doc/master/TClassTable_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClassTable_8cxx_source.html,2,['hash'],['hash']
Security,///////////////////////////////////////////////////////; 299 /// configures maximal queue length of data which can be held by window; 300 void SetMaxQueueLength(unsigned len = 10) { fMaxQueueLength = len; }; 301 ; 302 /////////////////////////////////////////////////////////////////////////; 303 /// Return maximal queue length of data which can be held by window; 304 unsigned GetMaxQueueLength() const { return fMaxQueueLength; }; 305 ; 306 /////////////////////////////////////////////////////////////////////////; 307 /// configures that only native (own-created) connections are allowed; 308 void SetNativeOnlyConn(bool on = true) { fNativeOnlyConn = on; }; 309 ; 310 /////////////////////////////////////////////////////////////////////////; 311 /// returns true if only native (own-created) connections are allowed; 312 bool IsNativeOnlyConn() const { return fNativeOnlyConn; }; 313 ; 314 /////////////////////////////////////////////////////////////////////////; 315 /// Configure if authentication key in connection string is required; 316 void SetRequireAuthKey(bool on) { fRequireAuthKey = on; }; 317 ; 318 /////////////////////////////////////////////////////////////////////////; 319 /// returns true if authentication string is required; 320 bool IsRequireAuthKey() const { return fRequireAuthKey; }; 321 ; 322 /////////////////////////////////////////////////////////////////////////; 323 /// Configure if window can access local files via currentdir/ path of http server; 324 void SetUseCurrentDir(bool on = true) { fUseCurrentDir = on; }; 325 ; 326 /////////////////////////////////////////////////////////////////////////; 327 /// returns true if window can access local files via currentdir/ path of http server; 328 bool IsUseCurrentDir() const { return fUseCurrentDir; }; 329 ; 330 void SetClientVersion(const std::string &vers);; 331 ; 332 std::string GetClientVersion() const;; 333 ; 334 void SetUserArgs(const std::string &args);; 335 ; 336 std::string GetUserArgs() const;; 3,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RWebWindow_8hxx_source.html:14798,authenticat,authentication,14798,doc/v632/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RWebWindow_8hxx_source.html,1,['authenticat'],['authentication']
Security,///////////////////////////////////////////////////////; 302 /// configures maximal queue length of data which can be held by window; 303 void SetMaxQueueLength(unsigned len = 10) { fMaxQueueLength = len; }; 304 ; 305 /////////////////////////////////////////////////////////////////////////; 306 /// Return maximal queue length of data which can be held by window; 307 unsigned GetMaxQueueLength() const { return fMaxQueueLength; }; 308 ; 309 /////////////////////////////////////////////////////////////////////////; 310 /// configures that only native (own-created) connections are allowed; 311 void SetNativeOnlyConn(bool on = true) { fNativeOnlyConn = on; }; 312 ; 313 /////////////////////////////////////////////////////////////////////////; 314 /// returns true if only native (own-created) connections are allowed; 315 bool IsNativeOnlyConn() const { return fNativeOnlyConn; }; 316 ; 317 /////////////////////////////////////////////////////////////////////////; 318 /// Configure if authentication key in connection string is required; 319 void SetRequireAuthKey(bool on) { fRequireAuthKey = on; }; 320 ; 321 /////////////////////////////////////////////////////////////////////////; 322 /// returns true if authentication string is required; 323 bool IsRequireAuthKey() const { return fRequireAuthKey; }; 324 ; 325 /////////////////////////////////////////////////////////////////////////; 326 /// Configure if window can access local files via currentdir/ path of http server; 327 void SetUseCurrentDir(bool on = true) { fUseCurrentDir = on; }; 328 ; 329 /////////////////////////////////////////////////////////////////////////; 330 /// returns true if window can access local files via currentdir/ path of http server; 331 bool IsUseCurrentDir() const { return fUseCurrentDir; }; 332 ; 333 void SetClientVersion(const std::string &vers);; 334 ; 335 std::string GetClientVersion() const;; 336 ; 337 void SetUserArgs(const std::string &args);; 338 ; 339 std::string GetUserArgs() const;; 3,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RWebWindow_8hxx_source.html:14949,authenticat,authentication,14949,doc/master/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RWebWindow_8hxx_source.html,1,['authenticat'],['authentication']
Security,"/////////////////////////////////////////////////////; 509/// Return true if the Value has been properly initialized.; 510 ; 511Bool_t TGenCollectionProxy::Value::IsValid(); 512{; 513 ; 514 ; 515 return fSize != std::string::npos;; 516}; 517 ; 518void TGenCollectionProxy::Value::DeleteItem(void* ptr); 519{; 520 // Delete an item.; 521 ; 522 if ( ptr && fCase&kIsPointer ) {; 523 if ( fDelete ) {; 524 (*fDelete)(ptr);; 525 }; 526 else if ( fType ) {; 527 fType->Destructor(ptr);; 528 }; 529 else {; 530 ::operator delete(ptr);; 531 }; 532 }; 533}; 534 ; 535/**; 536 \class TGenCollectionProxy TGenCollectionProxy.cxx; 537 \ingroup IO; 538 ; 539 Proxy around an arbitrary container, which implements basic; 540 functionality and iteration.; 541 ; 542 The purpose of this implementation; 543 is to shield any generated dictionary implementation from the; 544 underlying streamer/proxy implementation and only expose; 545 the creation functions.; 546 ; 547 In particular this is used to implement splitting and abstract; 548 element access of any container. Access to compiled code is necessary; 549 to implement the abstract iteration sequence and functionality like; 550 size(), clear(), resize(). resize() may be a void operation.; 551*/; 552 ; 553////////////////////////////////////////////////////////////////////////////////; 554/// Build a proxy for an emulated container.; 555 ; 556TGenCollectionProxy::TGenCollectionProxy(const TGenCollectionProxy& copy); 557 : TVirtualCollectionProxy(copy.fClass),; 558 fTypeinfo(copy.fTypeinfo); 559{; 560 fEnv = 0;; 561 fName = copy.fName;; 562 fPointers = copy.fPointers;; 563 fSTL_type = copy.fSTL_type;; 564 fSize.call = copy.fSize.call;; 565 fNext.call = copy.fNext.call;; 566 fFirst.call = copy.fFirst.call;; 567 fClear.call = copy.fClear.call;; 568 fResize = copy.fResize;; 569 fDestruct = copy.fDestruct;; 570 fConstruct = copy.fConstruct;; 571 fFeed = copy.fFeed;; 572 fCollect = copy.fCollect;; 573 fCreateEnv.call = copy.fCreateEnv.call;; 574 f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:16351,access,access,16351,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['access'],['access']
Security,"///////////////////////////////////////////////; 6752/// Update all canvases at end the terminal input command.; 6753 ; 6754void TCling::UpdateAllCanvases(); 6755{; 6756 TIter next(gROOT->GetListOfCanvases());; 6757 TVirtualPad* canvas;; 6758 while ((canvas = (TVirtualPad*)next())) {; 6759 canvas->Update();; 6760 }; 6761}; 6762 ; 6763////////////////////////////////////////////////////////////////////////////////; 6764 ; 6765void TCling::UpdateListsOnCommitted(const cling::Transaction &T) {; 6766 std::set<TClass*> modifiedTClasses; // TClasses that require update after this transaction; 6767 ; 6768 // If the transaction does not contain anything we can return earlier.; 6769 if (!HandleNewTransaction(T)) return;; 6770 ; 6771 bool isTUTransaction = false;; 6772 if (!T.empty() && T.decls_begin() + 1 == T.decls_end() && !T.hasNestedTransactions()) {; 6773 clang::Decl* FirstDecl = *(T.decls_begin()->m_DGR.begin());; 6774 if (llvm::isa<clang::TranslationUnitDecl>(FirstDecl)) {; 6775 // The is the first transaction, we have to expose to meta; 6776 // what's already in the AST.; 6777 isTUTransaction = true;; 6778 }; 6779 }; 6780 ; 6781 std::set<const void*> TransactionDeclSet;; 6782 if (!isTUTransaction && T.decls_end() - T.decls_begin()) {; 6783 const clang::Decl* WrapperFD = T.getWrapperFD();; 6784 for (cling::Transaction::const_iterator I = T.decls_begin(), E = T.decls_end();; 6785 I != E; ++I) {; 6786 if (I->m_Call != cling::Transaction::kCCIHandleTopLevelDecl; 6787 && I->m_Call != cling::Transaction::kCCIHandleTagDeclDefinition); 6788 continue;; 6789 ; 6790 for (DeclGroupRef::const_iterator DI = I->m_DGR.begin(),; 6791 DE = I->m_DGR.end(); DI != DE; ++DI) {; 6792 if (*DI == WrapperFD); 6793 continue;; 6794 TransactionDeclSet.insert(*DI);; 6795 ((TCling*)gCling)->HandleNewDecl(*DI, false, modifiedTClasses);; 6796 }; 6797 }; 6798 }; 6799 ; 6800 // The above might trigger more decls to be deserialized.; 6801 // Thus the iteration over the deserialized decls must be last.;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:264427,expose,expose,264427,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['expose'],['expose']
Security,"/////////////////////////////////////////////; 267/// Calculate hash from bin indexes.; 268 ; 269ULong64_t THnSparseCoordCompression::GetHashFromCoords(const Int_t* coord) const; 270{; 271 // Bins are addressed in two different modes, depending; 272 // on whether the compact bin index fits into a Long64_t or not.; 273 // If it does, we can use it as a ""perfect hash"" for the TExMap.; 274 // If not we build a hash from the compact bin index, and use that; 275 // as the TExMap's hash.; 276 ; 277 if (fCoordBufferSize <= 8) {; 278 // fits into a Long64_t; 279 ULong64_t hash1 = 0;; 280 for (Int_t i = 0; i < fNdimensions; ++i) {; 281 hash1 += coord[i] << fBitOffsets[i];; 282 }; 283 return hash1;; 284 }; 285 ; 286 // else: doesn't fit into a Long64_t:; 287 memset(coord, 0, fCoordBufferSize);; 288 for (Int_t i = 0; i < fNdimensions; ++i) {; 289 const Int_t offset = fBitOffsets[i] / 8;; 290 const Int_t shift = fBitOffsets[i] % 8;; 291 ULong64_t val = coord[i];; 292 ; 293 Char_t* pbuf = fCoordBuffer + offset;; 294 *pbuf += 0xff & (val << shift);; 295 val = val >> (8 - shift);; 296 while (val) {; 297 ++pbuf;; 298 *pbuf += 0xff & val;; 299 val = val >> 8;; 300 }; 301 }; 302 ; 303 ULong64_t hash = 5381;; 304 Char_t* str = fCoordBuffer;; 305 while (str - fCoordBuffer < fCoordBufferSize) {; 306 hash *= 5;; 307 hash += *(str++);; 308 }; 309 return hash;; 310}; 311*/; 312 ; 313 ; 314////////////////////////////////////////////////////////////////////////////////; 315/// Calculate hash from compact bin index.; 316 ; 317ULong64_t THnSparseCoordCompression::GetHashFromBuffer(const Char_t* buf) const; 318{; 319 // Bins are addressed in two different modes, depending; 320 // on whether the compact bin index fits into a Long64_t or not.; 321 // If it does, we can use it as a ""perfect hash"" for the TExMap.; 322 // If not we build a hash from the compact bin index, and use that; 323 // as the TExMap's hash.; 324 ; 325 if (fCoordBufferSize <= 8) {; 326 // fits into a Long64_t; 327 ULong64_t ha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THnSparse_8cxx_source.html:10434,hash,hash,10434,doc/master/THnSparse_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THnSparse_8cxx_source.html,5,['hash'],['hash']
Security,"/////////////////////////////////////////////; 345/// Return all the rules that applies to the specified checksum of the given 'source' class.; 346/// User has to delete the returned array; 347 ; 348const TSchemaRuleSet::TMatches TSchemaRuleSet::FindRules( const TString &source, UInt_t checksum ) const; 349{; 350 TObject* obj;; 351 TObjArrayIter it( fAllRules );; 352 TMatches arr;; 353 // arr->SetOwner( kFALSE );; 354 ; 355 while( (obj = it.Next()) ) {; 356 TSchemaRule* rule = (TSchemaRule*)obj;; 357 if( rule->GetSourceClass() == source && rule->TestChecksum( checksum ) ); 358 arr.push_back( rule );; 359 }; 360 ; 361 return arr;; 362}; 363 ; 364////////////////////////////////////////////////////////////////////////////////; 365/// Return all the rules that applies to the specified version OR checksum of the given 'source' class.; 366/// User has to delete the returned array; 367 ; 368const TSchemaRuleSet::TMatches TSchemaRuleSet::FindRules( const TString &source, Int_t version, UInt_t checksum ) const; 369{; 370 TObject* obj;; 371 TObjArrayIter it( fAllRules );; 372 TMatches arr;; 373 // arr->SetOwner( kFALSE );; 374 ; 375 while( (obj = it.Next()) ) {; 376 TSchemaRule* rule = (TSchemaRule*)obj;; 377 if( rule->GetSourceClass() == source && ( rule->TestVersion( version ) || rule->TestChecksum( checksum ) ) ); 378 arr.push_back( rule );; 379 }; 380 ; 381 return arr;; 382}; 383 ; 384////////////////////////////////////////////////////////////////////////////////; 385 ; 386TClass* TSchemaRuleSet::GetClass(); 387{; 388 return fClass;; 389}; 390 ; 391////////////////////////////////////////////////////////////////////////////////; 392 ; 393UInt_t TSchemaRuleSet::GetClassCheckSum() const; 394{; 395 if (fCheckSum == 0 && fClass) {; 396 const_cast<TSchemaRuleSet*>(this)->fCheckSum = fClass->GetCheckSum();; 397 }; 398 return fCheckSum;; 399}; 400 ; 401////////////////////////////////////////////////////////////////////////////////; 402 ; 403TString TSchemaRuleSet::GetClassNam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRuleSet_8cxx_source.html:13590,checksum,checksum,13590,doc/master/TSchemaRuleSet_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRuleSet_8cxx_source.html,1,['checksum'],['checksum']
Security,"////////////////////////////////////////////; 102/// Returns the cached file size; 103int VfsRdOnlyFileSize(sqlite3_file *pFile, sqlite_int64 *pSize); 104{; 105 VfsRootFile *p = reinterpret_cast<VfsRootFile *>(pFile);; 106 *pSize = p->fRawFile->GetSize();; 107 return SQLITE_OK;; 108}; 109 ; 110////////////////////////////////////////////////////////////////////////////; 111/// As the database is read-only, locks for concurrent access are no-ops and always succeeds; 112int VfsRdOnlyLock(sqlite3_file * /*pFile*/, int /*level*/); 113{; 114 return SQLITE_OK;; 115}; 116 ; 117////////////////////////////////////////////////////////////////////////////; 118/// As the database is read-only, locks for concurrent access are no-ops and always succeeds; 119int VfsRdOnlyUnlock(sqlite3_file * /*pFile*/, int /*level*/); 120{; 121 return SQLITE_OK;; 122}; 123 ; 124////////////////////////////////////////////////////////////////////////////; 125/// As the database is read-only, locks for concurrent access are no-ops and always succeeds; 126int VfsRdOnlyCheckReservedLock(sqlite3_file * /*pFile*/, int *pResOut); 127{; 128 *pResOut = 0;; 129 return SQLITE_OK;; 130}; 131 ; 132////////////////////////////////////////////////////////////////////////////; 133/// As the database is read-only, we know there are no additional control files such as a database journal; 134int VfsRdOnlyFileControl(sqlite3_file * /*p*/, int /*op*/, void * /*pArg*/); 135{; 136 return SQLITE_NOTFOUND;; 137}; 138 ; 139////////////////////////////////////////////////////////////////////////////; 140/// The database device's sector size is only needed for writing; 141int VfsRdOnlySectorSize(sqlite3_file * /*pFile*/); 142{; 143 return SQLITE_OPEN_READONLY;; 144}; 145 ; 146////////////////////////////////////////////////////////////////////////////; 147/// The database device's properties are only needed for writing; 148int VfsRdOnlyDeviceCharacteristics(sqlite3_file * /*pFile*/); 149{; 150 return SQLITE_OPEN_READONLY;; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RSqliteDS_8cxx_source.html:5770,access,access,5770,doc/master/RSqliteDS_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RSqliteDS_8cxx_source.html,1,['access'],['access']
Security,"///////////////////////////////////////////; 1839/// Read a class.rules file which contains one rule per line with comment; 1840/// starting with a #; 1841/// - Returns the number of rules loaded.; 1842/// - Returns -1 in case of error.; 1843 ; 1844Int_t TClass::ReadRules( const char *filename ); 1845{; 1846 if (!filename || !filename[0]) {; 1847 ::Error(""TClass::ReadRules"", ""no file name specified"");; 1848 return -1;; 1849 }; 1850 ; 1851 FILE * f = fopen(filename,""r"");; 1852 if (f == nullptr) {; 1853 ::Error(""TClass::ReadRules"",""Failed to open %s\n"",filename);; 1854 return -1;; 1855 }; 1856 Int_t count = ReadRulesContent(f);; 1857 ; 1858 fclose(f);; 1859 return count;; 1860 ; 1861}; 1862 ; 1863////////////////////////////////////////////////////////////////////////////////; 1864/// Add a schema evolution customization rule.; 1865/// The syntax of the rule can be either the short form:; 1866/// ~~~ {.cpp}; 1867/// [type=Read] classname membername [attributes=... ] [version=[...] ] [checksum=[...] ] [oldtype=...] [code={...}]; 1868/// ~~~; 1869/// or the long form; 1870/// ~~~ {.cpp}; 1871/// [type=Read] sourceClass=classname [targetclass=newClassname] [ source=""type membername; [type2 membername2]"" ]; 1872/// [target=""membername3;membername4""] [attributes=... ] [version=...] [checksum=...] [code={...}|functionname]; 1873/// ~~~; 1874///; 1875/// For example to set HepMC::GenVertex::m_event to _not_ owned the object it is pointing to:; 1876/// HepMC::GenVertex m_event attributes=NotOwner; 1877///; 1878/// Semantic of the tags:; 1879/// - type : the type of the rule, valid values: Read, ReadRaw, Write, WriteRaw, the default is 'Read'.; 1880/// - sourceClass : the name of the class as it is on the rule file; 1881/// - targetClass : the name of the class as it is in the current code ; defaults to the value of sourceClass; 1882/// - source : the types and names of the data members from the class on file that are needed, the list is separated by semi-colons ';'; 1883/// -",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:69786,checksum,checksum,69786,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['checksum'],['checksum']
Security,"///////////////////////////////////////////; 1906/// Read a class.rules file which contains one rule per line with comment; 1907/// starting with a #; 1908/// - Returns the number of rules loaded.; 1909/// - Returns -1 in case of error.; 1910 ; 1911Int_t TClass::ReadRules( const char *filename ); 1912{; 1913 if (!filename || !filename[0]) {; 1914 ::Error(""TClass::ReadRules"", ""no file name specified"");; 1915 return -1;; 1916 }; 1917 ; 1918 FILE * f = fopen(filename,""r"");; 1919 if (f == nullptr) {; 1920 ::Error(""TClass::ReadRules"",""Failed to open %s\n"",filename);; 1921 return -1;; 1922 }; 1923 Int_t count = ReadRulesContent(f);; 1924 ; 1925 fclose(f);; 1926 return count;; 1927 ; 1928}; 1929 ; 1930////////////////////////////////////////////////////////////////////////////////; 1931/// Add a schema evolution customization rule.; 1932/// The syntax of the rule can be either the short form:; 1933/// ~~~ {.cpp}; 1934/// [type=Read] classname membername [attributes=... ] [version=[...] ] [checksum=[...] ] [oldtype=...] [code={...}]; 1935/// ~~~; 1936/// or the long form; 1937/// ~~~ {.cpp}; 1938/// [type=Read] sourceClass=classname [targetclass=newClassname] [ source=""type membername; [type2 membername2]"" ]; 1939/// [target=""membername3;membername4""] [attributes=... ] [version=...] [checksum=...] [code={...}|functionname]; 1940/// ~~~; 1941///; 1942/// For example to set HepMC::GenVertex::m_event to _not_ owned the object it is pointing to:; 1943/// HepMC::GenVertex m_event attributes=NotOwner; 1944///; 1945/// Semantic of the tags:; 1946/// - type : the type of the rule, valid values: Read, ReadRaw, Write, WriteRaw, the default is 'Read'.; 1947/// - sourceClass : the name of the class as it is on the rule file; 1948/// - targetClass : the name of the class as it is in the current code ; defaults to the value of sourceClass; 1949/// - source : the types and names of the data members from the class on file that are needed, the list is separated by semi-colons ';'; 1950/// -",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:72537,checksum,checksum,72537,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['checksum'],['checksum']
Security,"///////////////////////////////////////////; 636/// Add a TFriendElement to the list of friends of this chain.; 637///; 638/// A TChain has a list of friends similar to a tree (see TTree::AddFriend).; 639/// You can add a friend to a chain with the TChain::AddFriend method, and you; 640/// can retrieve the list of friends with TChain::GetListOfFriends.; 641/// This example has four chains each has 20 ROOT trees from 20 ROOT files.; 642/// ~~~ {.cpp}; 643/// TChain ch(""t""); // a chain with 20 trees from 20 files; 644/// TChain ch1(""t1"");; 645/// TChain ch2(""t2"");; 646/// TChain ch3(""t3"");; 647/// ~~~; 648/// Now we can add the friends to the first chain.; 649/// ~~~ {.cpp}; 650/// ch.AddFriend(""t1""); 651/// ch.AddFriend(""t2""); 652/// ch.AddFriend(""t3""); 653/// ~~~; 654/// \image html tchain_friend.png; 655///; 656///; 657/// The parameter is the name of friend chain (the name of a chain is always; 658/// the name of the tree from which it was created).; 659/// The original chain has access to all variable in its friends.; 660/// We can use the TChain::Draw method as if the values in the friends were; 661/// in the original chain.; 662/// To specify the chain to use in the Draw method, use the syntax:; 663/// ~~~ {.cpp}; 664/// <chainname>.<branchname>.<varname>; 665/// ~~~; 666/// If the variable name is enough to uniquely identify the variable, you can; 667/// leave out the chain and/or branch name.; 668/// For example, this generates a 3-d scatter plot of variable ""var"" in the; 669/// TChain ch versus variable v1 in TChain t1 versus variable v2 in TChain t2.; 670/// ~~~ {.cpp}; 671/// ch.Draw(""var:t1.v1:t2.v2"");; 672/// ~~~; 673/// When a TChain::Draw is executed, an automatic call to TTree::AddFriend; 674/// connects the trees in the chain. When a chain is deleted, its friend; 675/// elements are also deleted.; 676///; 677/// The number of entries in the friend must be equal or greater to the number; 678/// of entries of the original chain. If the friend has fewer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:25433,access,access,25433,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,1,['access'],['access']
Security,"////////////////////////////////////////; 885/// Check if specified checksum string is correct and build checksum vector.; 886 ; 887Bool_t TSchemaRule::ProcessChecksum( const TString& checksum ) const; 888{; 889 //---------------------------------------------------------------------------; 890 // Check if we have valid list; 891 /////////////////////////////////////////////////////////////////////////////; 892 ; 893 if (!checksum[0]); 894 return kFALSE;; 895 std::string chk = (const char*)checksum;; 896 if( chk[0] != '[' || chk[chk.size()-1] != ']' ); 897 return kFALSE;; 898 ; 899 std::list<std::string> checksums;; 900 Internal::TSchemaRuleProcessor::SplitList( chk.substr( 1, chk.size()-2), checksums );; 901 ; 902 if( checksums.empty() ) {; 903 delete fChecksumVect;; 904 fChecksumVect = nullptr;; 905 return kFALSE;; 906 }; 907 ; 908 if( !fChecksumVect ); 909 fChecksumVect = new std::vector<UInt_t>;; 910 fChecksumVect->clear();; 911 ; 912 //---------------------------------------------------------------------------; 913 // Check the validity of each list element; 914 /////////////////////////////////////////////////////////////////////////////; 915 ; 916 for( const auto& checksumStr : checksums ) {; 917 auto chksum = ParseChecksum( checksumStr.c_str() );; 918 if (chksum == 0u) {; 919 delete fChecksumVect;; 920 fChecksumVect = nullptr;; 921 return kFALSE;; 922 }; 923 ; 924 fChecksumVect->push_back( chksum );; 925 }; 926 return kTRUE;; 927}; 928 ; 929////////////////////////////////////////////////////////////////////////////////; 930/// Parse the checksum in the given string. Returns either the checksum or zero; 931/// if the string is not a hex or decimal number.; 932 ; 933UInt_t TSchemaRule::ParseChecksum(const char* checksum) const {; 934 std::istringstream converter(checksum);; 935 UInt_t chksum;; 936 converter >> std::hex >> chksum;; 937 if (converter.fail()) {; 938 converter.clear();; 939 converter.seekg(0);; 940 converter >> std::dec >> chksum;; 941 }; 942 ; 943",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRule_8cxx_source.html:29910,checksum,checksumStr,29910,doc/master/TSchemaRule_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRule_8cxx_source.html,3,['checksum'],"['checksumStr', 'checksums']"
Security,"//////////////////////////////////////; 288/// Returns element with path, specified as string; 289 ; 290std::shared_ptr<Browsable::RElement> RBrowserData::GetElement(const std::string &str); 291{; 292 auto path = DecomposePath(str, true);; 293 ; 294 return GetSubElement(path);; 295}; 296 ; 297/////////////////////////////////////////////////////////////////////////; 298/// Returns element with path, specified as Browsable::RElementPath_t; 299 ; 300std::shared_ptr<Browsable::RElement> RBrowserData::GetElementFromTop(const Browsable::RElementPath_t &path); 301{; 302 return GetSubElement(path);; 303}; 304 ; 305/////////////////////////////////////////////////////////////////////////; 306/// Returns sub-element starting from top, using cached data; 307 ; 308std::shared_ptr<Browsable::RElement> RBrowserData::GetSubElement(const Browsable::RElementPath_t &path); 309{; 310 if (path.empty()); 311 return fTopElement;; 312 ; 313 // validate cache - removes no longer actual elements; 314 RemoveFromCache(nullptr);; 315 ; 316 // first check direct match in cache; 317 for (auto &entry : fCache); 318 if (entry.first == path); 319 return entry.second;; 320 ; 321 // find best possible entry in cache; 322 int pos = 0;; 323 auto elem = fTopElement;; 324 ; 325 for (auto &entry : fCache) {; 326 if (entry.first.size() >= path.size()); 327 continue;; 328 ; 329 auto comp = Browsable::RElement::ComparePaths(path, entry.first);; 330 ; 331 if ((comp > pos) && (comp == (int) entry.first.size())) {; 332 pos = comp;; 333 elem = entry.second;; 334 }; 335 }; 336 ; 337 while (pos < (int) path.size()) {; 338 std::string subname = path[pos];; 339 int indx = Browsable::RElement::ExtractItemIndex(subname);; 340 ; 341 auto iter = elem->GetChildsIter();; 342 if (!iter); 343 return nullptr;; 344 ; 345 if (!iter->Find(subname, indx)) {; 346 if (indx < 0); 347 return nullptr;; 348 iter = elem->GetChildsIter();; 349 if (!iter || !iter->Find(subname)); 350 return nullptr;; 351 }; 352 ; 353 elem = iter->GetElem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RBrowserData_8cxx_source.html:9973,validat,validate,9973,doc/master/RBrowserData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RBrowserData_8cxx_source.html,2,['validat'],['validate']
Security,"//////////////////////////////////; 3751/// Reset the Cling 'user' global objects/variables state to the state saved by the last; 3752/// call to TCling::SaveGlobalsContext().; 3753 ; 3754void TCling::ResetGlobalVar(void* obj); 3755{; 3756#if defined(R__MUST_REVISIT); 3757#if R__MUST_REVISIT(6,2); 3758 R__LOCKGUARD(gInterpreterMutex);; 3759 Warning(""ResetGlobalVar"",""Cling should support the equivalent of resetglobalvar(obj)"");; 3760#endif; 3761#endif; 3762}; 3763 ; 3764////////////////////////////////////////////////////////////////////////////////; 3765/// Rewind Cling dictionary to the point where it was before executing; 3766/// the current macro. This function is typically called after SEGV or; 3767/// ctlr-C after doing a longjmp back to the prompt.; 3768 ; 3769void TCling::RewindDictionary(); 3770{; 3771#if defined(R__MUST_REVISIT); 3772#if R__MUST_REVISIT(6,2); 3773 R__LOCKGUARD(gInterpreterMutex);; 3774 Warning(""RewindDictionary"",""Cling should provide a way to revert transaction similar to rewinddictionary()"");; 3775#endif; 3776#endif; 3777}; 3778 ; 3779////////////////////////////////////////////////////////////////////////////////; 3780/// Delete obj from Cling symbol table so it cannot be accessed anymore.; 3781/// Returns 1 in case of success and 0 in case object was not in table.; 3782 ; 3783Int_t TCling::DeleteGlobal(void* obj); 3784{; 3785#if defined(R__MUST_REVISIT); 3786#if R__MUST_REVISIT(6,2); 3787 R__LOCKGUARD(gInterpreterMutex);; 3788 Warning(""DeleteGlobal"",""Cling should provide the equivalent of deleteglobal(obj), see also DeleteVariable."");; 3789#endif; 3790#endif; 3791 return 0;; 3792}; 3793 ; 3794////////////////////////////////////////////////////////////////////////////////; 3795/// Undeclare obj called name.; 3796/// Returns 1 in case of success, 0 for failure.; 3797 ; 3798Int_t TCling::DeleteVariable(const char* name); 3799{; 3800#if defined(R__MUST_REVISIT); 3801#if R__MUST_REVISIT(6,2); 3802 Warning(""DeleteVariable"",""should do more tha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:146712,access,accessed,146712,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['access'],['accessed']
Security,"////////////////////////////////; 1263/// Add a TFriendElement to the list of friends.; 1264///; 1265/// This function:; 1266/// - opens a file if filename is specified; 1267/// - reads a Tree with name treename from the file (current directory); 1268/// - adds the Tree to the list of friends; 1269/// see other AddFriend functions; 1270///; 1271/// A TFriendElement TF describes a TTree object TF in a file.; 1272/// When a TFriendElement TF is added to the list of friends of an; 1273/// existing TTree T, any variable from TF can be referenced in a query; 1274/// to T.; 1275///; 1276/// A tree keeps a list of friends. In the context of a tree (or a chain),; 1277/// friendship means unrestricted access to the friends data. In this way; 1278/// it is much like adding another branch to the tree without taking the risk; 1279/// of damaging it. To add a friend to the list, you can use the TTree::AddFriend; 1280/// method. The tree in the diagram below has two friends (friend_tree1 and; 1281/// friend_tree2) and now has access to the variables a,b,c,i,j,k,l and m.; 1282///; 1283/// \image html ttree_friend1.png; 1284///; 1285/// The AddFriend method has two parameters, the first is the tree name and the; 1286/// second is the name of the ROOT file where the friend tree is saved.; 1287/// AddFriend automatically opens the friend file. If no file name is given,; 1288/// the tree called ft1 is assumed to be in the same file as the original tree.; 1289///; 1290/// tree.AddFriend(""ft1"",""friendfile1.root"");; 1291/// If the friend tree has the same name as the original tree, you can give it; 1292/// an alias in the context of the friendship:; 1293///; 1294/// tree.AddFriend(""tree1 = tree"",""friendfile1.root"");; 1295/// Once the tree has friends, we can use TTree::Draw as if the friend's; 1296/// variables were in the original tree. To specify which tree to use in; 1297/// the Draw method, use the syntax:; 1298/// ~~~ {.cpp}; 1299/// <treeName>.<branchname>.<varname>; 1300/// ~~~; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:46039,access,access,46039,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['access'],['access']
Security,"////////////////////////////////; 841/// Calculates hash index from any char string. (static function); 842/// - For string: i = TString::Hash(string,nstring);; 843/// - For int: i = TString::Hash(&intword,sizeof(int));; 844/// - For pointer: i = TString::Hash(&pointer,sizeof(void*));; 845///; 846/// This employs two different hash functions, depending on ntxt:; 847/// - ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; 848/// - else: MurmurHash3_x64_128 http://code.google.com/p/smhasher/; 849 ; 850UInt_t TString::Hash(const void *txt, Int_t ntxt); 851{; 852 if (ntxt != sizeof(void*)) {; 853 uint64_t buf[2] = {0};; 854 MurmurHash3_x64_128(txt, ntxt, 0x6384BA69, buf);; 855 return (UInt_t) buf[0];; 856 } else {; 857 // simple, superfast hash for pointers and alike; 858 UInt_t ret = (UInt_t)0x6384BA69;; 859 // aligned?; 860 if (((size_t)txt) % sizeof(void*)) {; 861 UInt_t* itxt = (UInt_t*)txt;; 862 ret ^= itxt[0];; 863 if (sizeof(void*) > sizeof(UInt_t)) {; 864 ret ^= itxt[1];; 865 }; 866 } else {; 867 const unsigned char* ctxt = (const unsigned char*) txt;; 868 for (unsigned int i = 0; i < 4; ++i) {; 869 ret ^= ctxt[i] << (i * 8);; 870 }; 871 if (sizeof(void*) > sizeof(UInt_t)) {; 872 ctxt += 4;; 873 for (unsigned int i = 0; i < 4; ++i) {; 874 ret ^= ctxt[i] << (i * 8);; 875 }; 876 }; 877 }; 878 return ret;; 879 }; 880}; 881 ; 882////////////////////////////////////////////////////////////////////////////////; 883/// Returns false if strings are not equal.; 884 ; 885static int MemIsEqual(const char *p, const char *q, Ssiz_t n); 886{; 887 while (n--); 888 {; 889 if (tolower((unsigned char)*p) != tolower((unsigned char)*q)); 890 return kFALSE;; 891 p++; q++;; 892 }; 893 return kTRUE;; 894}; 895 ; 896////////////////////////////////////////////////////////////////////////////////; 897/// Search for a string in the TString. Plen is the length of pattern,; 898/// startIndex is the index from which to start and cmp selects the type; 899/// of case-comp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8cxx_source.html:25959,hash,hash,25959,doc/master/TString_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TString_8cxx_source.html,1,['hash'],['hash']
Security,"//////////////////////////////; 1617/// Set maximum.; 1618 ; 1619void TGraph2D::SetMaximum(Double_t maximum); 1620{; 1621 fMaximum = maximum;; 1622 TH1 * h = GetHistogram();; 1623 if (h) h->SetMaximum(maximum);; 1624}; 1625 ; 1626 ; 1627////////////////////////////////////////////////////////////////////////////////; 1628/// Set minimum.; 1629 ; 1630void TGraph2D::SetMinimum(Double_t minimum); 1631{; 1632 fMinimum = minimum;; 1633 TH1 * h = GetHistogram();; 1634 if (h) h->SetMinimum(minimum);; 1635}; 1636 ; 1637 ; 1638////////////////////////////////////////////////////////////////////////////////; 1639/// Changes the name of this 2D graph; 1640 ; 1641void TGraph2D::SetName(const char *name); 1642{; 1643 // 2D graphs are named objects in a THashList.; 1644 // We must update the hashlist if we change the name; 1645 if (fDirectory) fDirectory->Remove(this);; 1646 fName = name;; 1647 if (fDirectory) fDirectory->Append(this);; 1648}; 1649 ; 1650 ; 1651////////////////////////////////////////////////////////////////////////////////; 1652/// Change the name and title of this 2D graph; 1653///; 1654 ; 1655void TGraph2D::SetNameTitle(const char *name, const char *title); 1656{; 1657 // 2D graphs are named objects in a THashList.; 1658 // We must update the hashlist if we change the name; 1659 if (fDirectory) fDirectory->Remove(this);; 1660 fName = name;; 1661 SetTitle(title);; 1662 if (fDirectory) fDirectory->Append(this);; 1663}; 1664 ; 1665 ; 1666////////////////////////////////////////////////////////////////////////////////; 1667/// Sets the number of bins along X used to draw the function; 1668 ; 1669void TGraph2D::SetNpx(Int_t npx); 1670{; 1671 if (npx < 4) {; 1672 Warning(""SetNpx"", ""Number of points must be >4 && < 500, fNpx set to 4"");; 1673 fNpx = 4;; 1674 } else if (npx > 500) {; 1675 Warning(""SetNpx"", ""Number of points must be >4 && < 500, fNpx set to 500"");; 1676 fNpx = 500;; 1677 } else {; 1678 fNpx = npx;; 1679 }; 1680 if (fHistogram) {; 1681 delete fHistogram",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph2D_8cxx_source.html:52579,hash,hashlist,52579,doc/master/TGraph2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph2D_8cxx_source.html,1,['hash'],['hashlist']
Security,"//////////////////////////////; 167void MethodDL::DeclareOptions(); 168{; 169 // Set default values for all option strings; 170 ; 171 DeclareOptionRef(fInputLayoutString = ""0|0|0"", ""InputLayout"", ""The Layout of the input"");; 172 ; 173 DeclareOptionRef(fBatchLayoutString = ""0|0|0"", ""BatchLayout"", ""The Layout of the batch"");; 174 ; 175 DeclareOptionRef(fLayoutString = ""DENSE|(N+100)*2|SOFTSIGN,DENSE|0|LINEAR"", ""Layout"", ""Layout of the network."");; 176 ; 177 DeclareOptionRef(fErrorStrategy = ""CROSSENTROPY"", ""ErrorStrategy"", ""Loss function: Mean squared error (regression)""; 178 "" or cross entropy (binary classification)."");; 179 AddPreDefVal(TString(""CROSSENTROPY""));; 180 AddPreDefVal(TString(""SUMOFSQUARES""));; 181 AddPreDefVal(TString(""MUTUALEXCLUSIVE""));; 182 ; 183 DeclareOptionRef(fWeightInitializationString = ""XAVIER"", ""WeightInitialization"", ""Weight initialization strategy"");; 184 AddPreDefVal(TString(""XAVIER""));; 185 AddPreDefVal(TString(""XAVIERUNIFORM""));; 186 AddPreDefVal(TString(""GAUSS""));; 187 AddPreDefVal(TString(""UNIFORM""));; 188 AddPreDefVal(TString(""IDENTITY""));; 189 AddPreDefVal(TString(""ZERO""));; 190 ; 191 DeclareOptionRef(fRandomSeed = 0, ""RandomSeed"", ""Random seed used for weight initialization and batch shuffling"");; 192 ; 193 DeclareOptionRef(fNumValidationString = ""20%"", ""ValidationSize"", ""Part of the training data to use for validation. ""; 194 ""Specify as 0.2 or 20% to use a fifth of the data set as validation set. ""; 195 ""Specify as 100 to use exactly 100 events. (Default: 20%)"");; 196 ; 197 DeclareOptionRef(fArchitectureString = ""CPU"", ""Architecture"", ""Which architecture to perform the training on."");; 198 AddPreDefVal(TString(""STANDARD"")); // deprecated and not supported anymore; 199 AddPreDefVal(TString(""CPU""));; 200 AddPreDefVal(TString(""GPU""));; 201 AddPreDefVal(TString(""OPENCL"")); // not yet implemented; 202 AddPreDefVal(TString(""CUDNN"")); // not needed (by default GPU is now CUDNN if available); 203 ; 204 // define training strategy separat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:6848,validat,validation,6848,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['validat'],['validation']
Security,"//////////////////////////////; 3267/// Return true if the checksum passed as argument is one of the checksum; 3268/// value produced by the older checksum calculation algorithm.; 3269 ; 3270Bool_t TStreamerInfo::MatchLegacyCheckSum(UInt_t checksum) const; 3271{; 3272 for(UInt_t i = 1; i < TClass::kLatestCheckSum; ++i) {; 3273 if ( checksum == GetCheckSum( (TClass::ECheckSum) i) ) return kTRUE;; 3274 }; 3275 return kFALSE;; 3276}; 3277 ; 3278////////////////////////////////////////////////////////////////////////////////; 3279/// Recalculate the checksum of this TStreamerInfo based on its code.; 3280///; 3281/// The class ckecksum is used by the automatic schema evolution algorithm; 3282/// to uniquely identify a class version.; 3283/// The check sum is built from the names/types of base classes and; 3284/// data members.; 3285/// The valid range of code is determined by ECheckSum.; 3286/// - kNoEnum: data members of type enum are not counted in the checksum; 3287/// - kNoRange: return the checksum of data members and base classes, not including the ranges and array size found in comments.; 3288/// - kWithTypeDef: use the sugared type name in the calculation.; 3289///; 3290/// This is needed for backward compatibility.; 3291/// ### WARNING; 3292/// This function must be kept in sync with TClass::GetCheckSum.; 3293/// They are both used to handle backward compatibility and should both return the same values.; 3294/// TStreamerInfo uses the information in TStreamerElement while TClass uses the information; 3295/// from TClass::GetListOfBases and TClass::GetListOfDataMembers.; 3296/// Original algorithm from Victor Perevovchikov (perev@bnl.gov).; 3297 ; 3298UInt_t TStreamerInfo::GetCheckSum(TClass::ECheckSum code) const; 3299{; 3300 // kCurrentCheckSum (0) should be kept for backward compatibility, to be; 3301 // able to use the inequality checks, we need to set the code to the largest; 3302 // value.; 3303 if (code == TClass::kCurrentCheckSum) code = TClass::kLatestCh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:132545,checksum,checksum,132545,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,2,['checksum'],['checksum']
Security,"/////////////////////////; 1271/// Internal constructor.; 1272///; 1273/// \note Use `TClass::GetClass(""class"")` to get access to a TClass object for a certain class!; 1274 ; 1275TClass::TClass(const char *name, Version_t cversion,; 1276 const char *dfil, const char *ifil, Int_t dl, Int_t il, Bool_t silent) :; 1277 TDictionary(name),; 1278 fPersistentRef(nullptr),; 1279 fStreamerInfo(nullptr), fConversionStreamerInfo(nullptr), fRealData(nullptr),; 1280 fBase(nullptr), fData(nullptr), fUsingData(nullptr), fEnums(nullptr), fFuncTemplate(nullptr), fMethod(nullptr), fAllPubData(nullptr),; 1281 fAllPubMethod(nullptr), fClassMenuList(nullptr),; 1282 fDeclFileName(""""), fImplFileName(""""), fDeclFileLine(0), fImplFileLine(0),; 1283 fInstanceCount(0), fOnHeap(0),; 1284 fCheckSum(0), fCollectionProxy(nullptr), fClassVersion(0), fClassInfo(nullptr),; 1285 fTypeInfo(nullptr), fShowMembers(nullptr),; 1286 fStreamer(nullptr), fIsA(nullptr), fGlobalIsA(nullptr), fIsAMethod(nullptr),; 1287 fMerge(nullptr), fResetAfterMerge(nullptr), fNew(nullptr), fNewArray(nullptr), fDelete(nullptr), fDeleteArray(nullptr),; 1288 fDestructor(nullptr), fDirAutoAdd(nullptr), fStreamerFunc(nullptr), fConvStreamerFunc(nullptr), fSizeof(-1),; 1289 fCanSplit(-1), fIsSyntheticPair(kFALSE), fHasCustomStreamerMember(kFALSE), fProperty(0), fClassProperty(0), fHasRootPcmInfo(kFALSE), fCanLoadClassInfo(kFALSE),; 1290 fIsOffsetStreamerSet(kFALSE), fVersionUsed(kFALSE), fRuntimeProperties(0), fOffsetStreamer(0), fStreamerType(TClass::kDefault),; 1291 fState(kNoInfo),; 1292 fCurrentInfo(nullptr), fLastReadInfo(nullptr), fRefProxy(nullptr),; 1293 fSchemaRules(nullptr), fStreamerImpl(&TClass::StreamerDefault); 1294{; 1295 R__LOCKGUARD(gInterpreterMutex);; 1296 Init(name,cversion, nullptr, nullptr, dfil, ifil, dl, il, nullptr, silent);; 1297}; 1298 ; 1299////////////////////////////////////////////////////////////////////////////////; 1300/// Internal constructor.; 1301///; 1302/// \note Use `TClass::GetClass(""class"")`",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:48106,access,access,48106,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['access'],['access']
Security,"/////////////////////////; 1338/// Internal constructor.; 1339///; 1340/// \note Use `TClass::GetClass(""class"")` to get access to a TClass object for a certain class!; 1341 ; 1342TClass::TClass(const char *name, Version_t cversion,; 1343 const char *dfil, const char *ifil, Int_t dl, Int_t il, Bool_t silent) :; 1344 TDictionary(name),; 1345 fPersistentRef(nullptr),; 1346 fStreamerInfo(nullptr), fConversionStreamerInfo(nullptr), fRealData(nullptr),; 1347 fBase(nullptr), fData(nullptr), fUsingData(nullptr), fEnums(nullptr), fFuncTemplate(nullptr), fMethod(nullptr), fAllPubData(nullptr),; 1348 fAllPubMethod(nullptr), fClassMenuList(nullptr),; 1349 fDeclFileName(""""), fImplFileName(""""), fDeclFileLine(0), fImplFileLine(0),; 1350 fInstanceCount(0), fOnHeap(0),; 1351 fCheckSum(0), fCollectionProxy(nullptr), fClassVersion(0), fClassInfo(nullptr),; 1352 fTypeInfo(nullptr), fShowMembers(nullptr),; 1353 fStreamer(nullptr), fIsA(nullptr), fGlobalIsA(nullptr), fIsAMethod(nullptr),; 1354 fMerge(nullptr), fResetAfterMerge(nullptr), fNew(nullptr), fNewArray(nullptr), fDelete(nullptr), fDeleteArray(nullptr),; 1355 fDestructor(nullptr), fDirAutoAdd(nullptr), fStreamerFunc(nullptr), fConvStreamerFunc(nullptr), fSizeof(-1),; 1356 fCanSplit(-1), fIsSyntheticPair(kFALSE), fHasCustomStreamerMember(kFALSE), fProperty(0), fClassProperty(0), fHasRootPcmInfo(kFALSE), fCanLoadClassInfo(kFALSE),; 1357 fIsOffsetStreamerSet(kFALSE), fVersionUsed(kFALSE), fRuntimeProperties(0), fOffsetStreamer(0), fStreamerType(TClass::kDefault),; 1358 fState(kNoInfo),; 1359 fCurrentInfo(nullptr), fLastReadInfo(nullptr), fRefProxy(nullptr),; 1360 fSchemaRules(nullptr), fStreamerImpl(&TClass::StreamerDefault); 1361{; 1362 R__LOCKGUARD(gInterpreterMutex);; 1363 Init(name,cversion, nullptr, nullptr, dfil, ifil, dl, il, nullptr, silent);; 1364}; 1365 ; 1366////////////////////////////////////////////////////////////////////////////////; 1367/// Internal constructor.; 1368///; 1369/// \note Use `TClass::GetClass(""class"")`",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:50857,access,access,50857,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['access'],['access']
Security,"///////////////////////; 88/// We do not write to a database in the RDataSource and therefore can simply return an error for this callback; 89int VfsRdOnlyTruncate(sqlite3_file * /*pFile*/, sqlite_int64 /*size*/); 90{; 91 return SQLITE_OPEN_READONLY;; 92}; 93 ; 94////////////////////////////////////////////////////////////////////////////; 95/// As the database is read-only, syncing data to disc is a no-op and always succeeds; 96int VfsRdOnlySync(sqlite3_file * /*pFile*/, int /*flags*/); 97{; 98 return SQLITE_OK;; 99}; 100 ; 101////////////////////////////////////////////////////////////////////////////; 102/// Returns the cached file size; 103int VfsRdOnlyFileSize(sqlite3_file *pFile, sqlite_int64 *pSize); 104{; 105 VfsRootFile *p = reinterpret_cast<VfsRootFile *>(pFile);; 106 *pSize = p->fRawFile->GetSize();; 107 return SQLITE_OK;; 108}; 109 ; 110////////////////////////////////////////////////////////////////////////////; 111/// As the database is read-only, locks for concurrent access are no-ops and always succeeds; 112int VfsRdOnlyLock(sqlite3_file * /*pFile*/, int /*level*/); 113{; 114 return SQLITE_OK;; 115}; 116 ; 117////////////////////////////////////////////////////////////////////////////; 118/// As the database is read-only, locks for concurrent access are no-ops and always succeeds; 119int VfsRdOnlyUnlock(sqlite3_file * /*pFile*/, int /*level*/); 120{; 121 return SQLITE_OK;; 122}; 123 ; 124////////////////////////////////////////////////////////////////////////////; 125/// As the database is read-only, locks for concurrent access are no-ops and always succeeds; 126int VfsRdOnlyCheckReservedLock(sqlite3_file * /*pFile*/, int *pResOut); 127{; 128 *pResOut = 0;; 129 return SQLITE_OK;; 130}; 131 ; 132////////////////////////////////////////////////////////////////////////////; 133/// As the database is read-only, we know there are no additional control files such as a database journal; 134int VfsRdOnlyFileControl(sqlite3_file * /*p*/, int /*op*/, void * /*p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RSqliteDS_8cxx_source.html:5204,access,access,5204,doc/master/RSqliteDS_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RSqliteDS_8cxx_source.html,1,['access'],['access']
Security,"///////////////////; 1147/// Internal constructor.; 1148///; 1149/// \note Use `TClass::GetClass(""ClassName"")` to get access to a TClass object for a certain class!; 1150 ; 1151TClass::TClass(const char *name, Version_t cversion, Bool_t silent) :; 1152 TDictionary(name),; 1153 fPersistentRef(nullptr),; 1154 fStreamerInfo(nullptr), fConversionStreamerInfo(nullptr), fRealData(nullptr),; 1155 fBase(nullptr), fData(nullptr), fUsingData(nullptr), fEnums(nullptr), fFuncTemplate(nullptr), fMethod(nullptr), fAllPubData(nullptr),; 1156 fAllPubMethod(nullptr), fClassMenuList(nullptr),; 1157 fDeclFileName(""""), fImplFileName(""""), fDeclFileLine(0), fImplFileLine(0),; 1158 fInstanceCount(0), fOnHeap(0),; 1159 fCheckSum(0), fCollectionProxy(nullptr), fClassVersion(0), fClassInfo(nullptr),; 1160 fTypeInfo(nullptr), fShowMembers(nullptr),; 1161 fStreamer(nullptr), fIsA(nullptr), fGlobalIsA(nullptr), fIsAMethod(nullptr),; 1162 fMerge(nullptr), fResetAfterMerge(nullptr), fNew(nullptr), fNewArray(nullptr), fDelete(nullptr), fDeleteArray(nullptr),; 1163 fDestructor(nullptr), fDirAutoAdd(nullptr), fStreamerFunc(nullptr), fConvStreamerFunc(nullptr), fSizeof(-1),; 1164 fCanSplit(-1), fIsSyntheticPair(kFALSE), fHasCustomStreamerMember(kFALSE), fProperty(0), fClassProperty(0), fHasRootPcmInfo(kFALSE), fCanLoadClassInfo(kFALSE),; 1165 fIsOffsetStreamerSet(kFALSE), fVersionUsed(kFALSE), fRuntimeProperties(0), fOffsetStreamer(0), fStreamerType(TClass::kDefault),; 1166 fState(kNoInfo),; 1167 fCurrentInfo(nullptr), fLastReadInfo(nullptr), fRefProxy(nullptr),; 1168 fSchemaRules(nullptr), fStreamerImpl(&TClass::StreamerDefault); 1169{; 1170 R__LOCKGUARD(gInterpreterMutex);; 1171 Init(name, cversion, nullptr, nullptr, nullptr, nullptr, -1, -1, nullptr, silent);; 1172}; 1173 ; 1174////////////////////////////////////////////////////////////////////////////////; 1175/// Internal constructor, mimicing the case of a class fwd declared in the interpreter.; 1176///; 1177/// \note Use `TClass::GetClass(""Cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:40991,access,access,40991,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['access'],['access']
Security,"///////////////////; 1214/// Internal constructor.; 1215///; 1216/// \note Use `TClass::GetClass(""ClassName"")` to get access to a TClass object for a certain class!; 1217 ; 1218TClass::TClass(const char *name, Version_t cversion, Bool_t silent) :; 1219 TDictionary(name),; 1220 fPersistentRef(nullptr),; 1221 fStreamerInfo(nullptr), fConversionStreamerInfo(nullptr), fRealData(nullptr),; 1222 fBase(nullptr), fData(nullptr), fUsingData(nullptr), fEnums(nullptr), fFuncTemplate(nullptr), fMethod(nullptr), fAllPubData(nullptr),; 1223 fAllPubMethod(nullptr), fClassMenuList(nullptr),; 1224 fDeclFileName(""""), fImplFileName(""""), fDeclFileLine(0), fImplFileLine(0),; 1225 fInstanceCount(0), fOnHeap(0),; 1226 fCheckSum(0), fCollectionProxy(nullptr), fClassVersion(0), fClassInfo(nullptr),; 1227 fTypeInfo(nullptr), fShowMembers(nullptr),; 1228 fStreamer(nullptr), fIsA(nullptr), fGlobalIsA(nullptr), fIsAMethod(nullptr),; 1229 fMerge(nullptr), fResetAfterMerge(nullptr), fNew(nullptr), fNewArray(nullptr), fDelete(nullptr), fDeleteArray(nullptr),; 1230 fDestructor(nullptr), fDirAutoAdd(nullptr), fStreamerFunc(nullptr), fConvStreamerFunc(nullptr), fSizeof(-1),; 1231 fCanSplit(-1), fIsSyntheticPair(kFALSE), fHasCustomStreamerMember(kFALSE), fProperty(0), fClassProperty(0), fHasRootPcmInfo(kFALSE), fCanLoadClassInfo(kFALSE),; 1232 fIsOffsetStreamerSet(kFALSE), fVersionUsed(kFALSE), fRuntimeProperties(0), fOffsetStreamer(0), fStreamerType(TClass::kDefault),; 1233 fState(kNoInfo),; 1234 fCurrentInfo(nullptr), fLastReadInfo(nullptr), fRefProxy(nullptr),; 1235 fSchemaRules(nullptr), fStreamerImpl(&TClass::StreamerDefault); 1236{; 1237 R__LOCKGUARD(gInterpreterMutex);; 1238 Init(name, cversion, nullptr, nullptr, nullptr, nullptr, -1, -1, nullptr, silent);; 1239}; 1240 ; 1241////////////////////////////////////////////////////////////////////////////////; 1242/// Internal constructor, mimicing the case of a class fwd declared in the interpreter.; 1243///; 1244/// \note Use `TClass::GetClass(""Cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:43742,access,access,43742,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['access'],['access']
Security,"/////////; 1652/// Change the name and title of this 2D graph; 1653///; 1654 ; 1655void TGraph2D::SetNameTitle(const char *name, const char *title); 1656{; 1657 // 2D graphs are named objects in a THashList.; 1658 // We must update the hashlist if we change the name; 1659 if (fDirectory) fDirectory->Remove(this);; 1660 fName = name;; 1661 SetTitle(title);; 1662 if (fDirectory) fDirectory->Append(this);; 1663}; 1664 ; 1665 ; 1666////////////////////////////////////////////////////////////////////////////////; 1667/// Sets the number of bins along X used to draw the function; 1668 ; 1669void TGraph2D::SetNpx(Int_t npx); 1670{; 1671 if (npx < 4) {; 1672 Warning(""SetNpx"", ""Number of points must be >4 && < 500, fNpx set to 4"");; 1673 fNpx = 4;; 1674 } else if (npx > 500) {; 1675 Warning(""SetNpx"", ""Number of points must be >4 && < 500, fNpx set to 500"");; 1676 fNpx = 500;; 1677 } else {; 1678 fNpx = npx;; 1679 }; 1680 if (fHistogram) {; 1681 delete fHistogram;; 1682 fHistogram = nullptr;; 1683 fDelaunay = nullptr;; 1684 }; 1685}; 1686 ; 1687 ; 1688////////////////////////////////////////////////////////////////////////////////; 1689/// Sets the number of bins along Y used to draw the function; 1690 ; 1691void TGraph2D::SetNpy(Int_t npy); 1692{; 1693 if (npy < 4) {; 1694 Warning(""SetNpy"", ""Number of points must be >4 && < 500, fNpy set to 4"");; 1695 fNpy = 4;; 1696 } else if (npy > 500) {; 1697 Warning(""SetNpy"", ""Number of points must be >4 && < 500, fNpy set to 500"");; 1698 fNpy = 500;; 1699 } else {; 1700 fNpy = npy;; 1701 }; 1702 if (fHistogram) {; 1703 delete fHistogram;; 1704 fHistogram = nullptr;; 1705 fDelaunay = nullptr;; 1706 }; 1707}; 1708 ; 1709 ; 1710////////////////////////////////////////////////////////////////////////////////; 1711/// Sets point number n.; 1712/// If n is greater than the current size, the arrays are automatically; 1713/// extended.; 1714 ; 1715void TGraph2D::SetPoint(Int_t n, Double_t x, Double_t y, Double_t z); 1716{; 1717 if (n < 0) retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph2D_8cxx_source.html:53059,hash,hashlist,53059,doc/master/TGraph2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph2D_8cxx_source.html,1,['hash'],['hashlist']
Security,"///; 1481/// Return the user's home directory.; 1482 ; 1483const char *TUnixSystem::HomeDirectory(const char *userName); 1484{; 1485 return UnixHomedirectory(userName);; 1486}; 1487 ; 1488//////////////////////////////////////////////////////////////////////////////; 1489/// Return the user's home directory.; 1490 ; 1491std::string TUnixSystem::GetHomeDirectory(const char *userName) const; 1492{; 1493 char path[kMAXPATHLEN], mydir[kMAXPATHLEN] = { '\0' };; 1494 auto res = UnixHomedirectory(userName, path, mydir);; 1495 if (res) return std::string(res);; 1496 else return std::string();; 1497}; 1498 ; 1499////////////////////////////////////////////////////////////////////////////////; 1500/// Return a user configured or systemwide directory to create; 1501/// temporary files in.; 1502 ; 1503const char *TUnixSystem::TempDirectory() const; 1504{; 1505 const char *dir = gSystem->Getenv(""TMPDIR"");; 1506 if (!dir || gSystem->AccessPathName(dir, kWritePermission)); 1507 dir = ""/tmp"";; 1508 ; 1509 return dir;; 1510}; 1511 ; 1512////////////////////////////////////////////////////////////////////////////////; 1513/// Create a secure temporary file by appending a unique; 1514/// 6 letter string to base. The file will be created in; 1515/// a standard (system) directory or in the directory; 1516/// provided in dir. Optionally one can provide suffix; 1517/// append to the final name - like extension "".txt"" or "".html"".; 1518/// The full filename is returned in base; 1519/// and a filepointer is returned for safely writing to the file; 1520/// (this avoids certain security problems). Returns 0 in case; 1521/// of error.; 1522 ; 1523FILE *TUnixSystem::TempFileName(TString &base, const char *dir, const char *suffix); 1524{; 1525 char *b = ConcatFileName(dir ? dir : TempDirectory(), base);; 1526 base = b;; 1527 base += ""XXXXXX"";; 1528 const bool hasSuffix = suffix && *suffix;; 1529 if (hasSuffix); 1530 base.Append(suffix);; 1531 delete [] b;; 1532 ; 1533 char *arg = StrDup(base);; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8cxx_source.html:46022,secur,secure,46022,doc/master/TUnixSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8cxx_source.html,1,['secur'],['secure']
Security,"///; 958/// Note that the generated histograms are added to the list of objects; 959/// in the current directory. It is the user's responsibility to delete; 960/// these histograms.; 961///; 962/// Example: Assume a 3-d histogram h3; 963/// Root > h3->FitSlicesZ(); produces 4 TH2D histograms; 964/// with h3_0 containing parameter 0(Constant) for a Gaus fit; 965/// of each cell in X,Y projected along Z; 966/// with h3_1 containing parameter 1(Mean) for a gaus fit; 967/// with h3_2 containing parameter 2(StdDev) for a gaus fit; 968/// with h3_chi2 containing the chisquare/number of degrees of freedom for a gaus fit; 969///; 970/// Root > h3->Fit(0,15,22,0,0,10);; 971/// same as above, but only for bins 15 to 22 along X; 972/// and only for cells in X,Y for which the corresponding projection; 973/// along Z has more than cut bins filled.; 974///; 975/// NOTE: To access the generated histograms in the current directory, do eg:; 976/// TH2D *h3_1 = (TH2D*)gDirectory->Get(""h3_1"");; 977 ; 978void TH3::FitSlicesZ(TF1 *f1, Int_t binminx, Int_t binmaxx, Int_t binminy, Int_t binmaxy, Int_t cut, Option_t *option); 979{; 980 //Int_t nbinsz = fZaxis.GetNbins();; 981 ; 982 // get correct first and last bins for outer axes used in the loop doing the slices; 983 // when using default values (0,-1) check if an axis range is set in outer axis; 984 // do same as in DoProjection for inner axis; 985 auto computeFirstAndLastBin = [](const TAxis & outerAxis, Int_t &firstbin, Int_t &lastbin) {; 986 Int_t nbins = outerAxis.GetNbins();; 987 if ( lastbin < firstbin && outerAxis.TestBit(TAxis::kAxisRange) ) {; 988 firstbin = outerAxis.GetFirst();; 989 lastbin = outerAxis.GetLast();; 990 // For special case of TAxis::SetRange, when first == 1 and last; 991 // = N and the range bit has been set, the TAxis will return 0; 992 // for both.; 993 if (firstbin == 0 && lastbin == 0) {; 994 firstbin = 1;; 995 lastbin = nbins;; 996 }; 997 }; 998 if (firstbin < 0) firstbin = 0;; 999 if (lastbin < 0 || last",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:37840,access,access,37840,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['access'],['access']
Security,"//; 4764/// If the object does not exist, it is created; 4765///; 4766/// Warning: If we create a new streamer info, whether or not the build; 4767/// optimizes is controlled externally to us by a global variable!; 4768/// Don't call us unless you have set that variable properly; 4769/// with TStreamer::Optimize()!; 4770///; 4771 ; 4772TVirtualStreamerInfo* TClass::FindStreamerInfoAbstractEmulated(UInt_t checksum) const; 4773{; 4774 TVirtualStreamerInfo *sinfo = nullptr;; 4775 ; 4776 TString newname(GetName());; 4777 newname += ""@@emulated"";; 4778 ; 4779 R__LOCKGUARD(gInterpreterMutex);; 4780 ; 4781 TClass *emulated = TClass::GetClass(newname);; 4782 ; 4783 if (emulated); 4784 sinfo = emulated->FindStreamerInfo(checksum);; 4785 ; 4786 if (!sinfo) {; 4787 // The emulated version of the streamerInfo is explicitly requested and has; 4788 // not been built yet.; 4789 ; 4790 sinfo = (TVirtualStreamerInfo*) FindStreamerInfo(checksum);; 4791 ; 4792 if (!sinfo && (checksum != fCheckSum)) {; 4793 // When the requested version does not exist we return; 4794 // the TVirtualStreamerInfo for the currently loaded class version.; 4795 // FIXME: This arguably makes no sense, we should warn and return nothing instead.; 4796 sinfo = (TVirtualStreamerInfo*) fStreamerInfo->At(fClassVersion);; 4797 }; 4798 ; 4799 if (!sinfo) {; 4800 // Let's take the first available StreamerInfo as a start; 4801 Int_t ninfos = fStreamerInfo->GetEntriesFast() - 1;; 4802 for (Int_t i = -1; sinfo == nullptr && i < ninfos; ++i); 4803 sinfo = (TVirtualStreamerInfo *)fStreamerInfo->UncheckedAt(i);; 4804 }; 4805 ; 4806 if (sinfo) {; 4807 sinfo = dynamic_cast<TVirtualStreamerInfo*>( sinfo->Clone() );; 4808 if (sinfo) {; 4809 sinfo->SetClass(nullptr);; 4810 sinfo->SetName( newname );; 4811 sinfo->BuildCheck();; 4812 sinfo->BuildOld();; 4813 sinfo->GetClass()->AddRule(TString::Format(""sourceClass=%s targetClass=%s"",GetName(),newname.Data()));; 4814 } else {; 4815 Error(""GetStreamerInfoAbstractEmulated"", ""could no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:181892,checksum,checksum,181892,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,2,['checksum'],['checksum']
Security,"//; 4831/// If the object does not exist, it is created; 4832///; 4833/// Warning: If we create a new streamer info, whether or not the build; 4834/// optimizes is controlled externally to us by a global variable!; 4835/// Don't call us unless you have set that variable properly; 4836/// with TStreamer::Optimize()!; 4837///; 4838 ; 4839TVirtualStreamerInfo* TClass::FindStreamerInfoAbstractEmulated(UInt_t checksum) const; 4840{; 4841 TVirtualStreamerInfo *sinfo = nullptr;; 4842 ; 4843 TString newname(GetName());; 4844 newname += ""@@emulated"";; 4845 ; 4846 R__LOCKGUARD(gInterpreterMutex);; 4847 ; 4848 TClass *emulated = TClass::GetClass(newname);; 4849 ; 4850 if (emulated); 4851 sinfo = emulated->FindStreamerInfo(checksum);; 4852 ; 4853 if (!sinfo) {; 4854 // The emulated version of the streamerInfo is explicitly requested and has; 4855 // not been built yet.; 4856 ; 4857 sinfo = (TVirtualStreamerInfo*) FindStreamerInfo(checksum);; 4858 ; 4859 if (!sinfo && (checksum != fCheckSum)) {; 4860 // When the requested version does not exist we return; 4861 // the TVirtualStreamerInfo for the currently loaded class version.; 4862 // FIXME: This arguably makes no sense, we should warn and return nothing instead.; 4863 sinfo = (TVirtualStreamerInfo*) fStreamerInfo->At(fClassVersion);; 4864 }; 4865 ; 4866 if (!sinfo) {; 4867 // Let's take the first available StreamerInfo as a start; 4868 Int_t ninfos = fStreamerInfo->GetEntriesFast() - 1;; 4869 for (Int_t i = -1; sinfo == nullptr && i < ninfos; ++i); 4870 sinfo = (TVirtualStreamerInfo *)fStreamerInfo->UncheckedAt(i);; 4871 }; 4872 ; 4873 if (sinfo) {; 4874 sinfo = dynamic_cast<TVirtualStreamerInfo*>( sinfo->Clone() );; 4875 if (sinfo) {; 4876 sinfo->SetClass(nullptr);; 4877 sinfo->SetName( newname );; 4878 sinfo->BuildCheck();; 4879 sinfo->BuildOld();; 4880 sinfo->GetClass()->AddRule(TString::Format(""sourceClass=%s targetClass=%s"",GetName(),newname.Data()));; 4881 } else {; 4882 Error(""GetStreamerInfoAbstractEmulated"", ""could no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:184643,checksum,checksum,184643,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,2,['checksum'],['checksum']
Security,"/; 151 inline static AFloat * GetDeviceReturnPointer() {return fDeviceReturn;}; 152 inline static curandState_t * GetCurandStatesPointer() {return fCurandStates;}; 153 ; 154 /** Blocking synchronization with the associated compute stream, if it's; 155 * not the default stream. */; 156 inline void Synchronize(const TCudaMatrix &) const;; 157 ; 158 static size_t GetNDim() {return 2;}; 159 size_t GetNrows() const {return fNRows;}; 160 size_t GetNcols() const {return fNCols;}; 161 size_t GetNoElements() const {return fNRows * fNCols;}; 162 ; 163 const AFloat * GetDataPointer() const {return fElementBuffer.data();}; 164 AFloat * GetDataPointer() {return fElementBuffer.data();}; 165 const cublasHandle_t & GetCublasHandle() const {return fCublasHandle;}; 166 ; 167 inline TCudaDeviceBuffer<AFloat> GetDeviceBuffer() const { return fElementBuffer;}; 168 ; 169 /** Access to elements of device matrices provided through TCudaDeviceReference; 170 * class. Note that access is synchronous end enforces device synchronization; 171 * on all streams. Only used for testing. */; 172 TCudaDeviceReference<AFloat> operator()(size_t i, size_t j) const;; 173 ; 174 void Print() const {; 175 TMatrixT<AFloat> mat(*this);; 176 mat.Print();; 177 }; 178 ; 179 void Zero() {; 180 cudaMemset(GetDataPointer(), 0, sizeof(AFloat) * GetNoElements());; 181 }; 182 ; 183 ; 184private:; 185 ; 186 /** Initializes all shared devices resource and makes sure that a sufficient; 187 * number of curand states are allocated on the device and initialized as; 188 * well as that the one-vector for the summation over columns has the right; 189 * size. */; 190 void InitializeCuda();; 191 void InitializeCurandStates();; 192 ; 193};; 194 ; 195//; 196// Inline Functions.; 197//______________________________________________________________________________; 198inline void cudaError(cudaError_t code, const char *file, int line, bool abort); 199{; 200 if (code != cudaSuccess); 201 {; 202 fprintf(stderr,""CUDA Error: %s %s %d\n"", c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/CudaMatrix_8h_source.html:6901,access,access,6901,doc/master/CudaMatrix_8h_source.html,https://root.cern,https://root.cern/doc/master/CudaMatrix_8h_source.html,1,['access'],['access']
Security,"/Folder/histo1"", ""allow_method=GetTitle&hide=guest"");; Complete list of supported options could be found in TRootSniffer:Restrict() method documentation.; 1.7 Using FastCGI interface; FastCGI is a protocol for interfacing interactive programs with a web server like Apache, lighttpd, Microsoft ISS and many others.; When starting THttpServer, one could specify:; serv = new THttpServer(""fastcgi:9000"");; In fact, the FastCGI interface can run in parallel to http server. One can just call:; serv = new THttpServer(""http:8080"");; serv->CreateEngine(""fastcgi:9000"");; One could specify a debug parameter to be able to adjust the FastCGI configuration on the web server:; serv->CreateEngine(""fastcgi:9000?debug=1"");; By default 10 threads are used to process FastCGI requests. This number can be changed with “thrds” url parameter:; serv->CreateEngine(""fastcgi:9000?thrds=20"");; If thrds=0 parameter specified, the only thread will be use to received and process all requests.; All user access will be ruled by the main web server. Authorized account names could be used to configure access restriction in THttpServer.; 1.7.1 Configure fastcgi with Apache2; Since Apache version 2.4 FastCGI is directly supported - there is no need to compile and install external modules any more. One only need to enable mod_proxy and mod_proxy_fcgi modules and add following line to Apache2 configuration file:; ProxyPass ""/root.app/"" ""fcgi://localhost:9000/"" enablereuse=on; More information can be found in FastCGI proxy docu. After restarting apache server one should be able to open address: http://apache_host_name/root.app/. There are many ways to configure user authentication in Apache. Example of digest auth for FastCGI server:; <Location ""/root.app/"">; AuthType Digest; AuthName ""root""; AuthDigestDomain ""/root.app/"" ""root""; AuthDigestProvider file; AuthUserFile ""/srv/auth/auth.txt""; Require valid-user; </Location>; 1.7.2 Configure fastcgi with lighttpd; An example of configuration file for lighttpd serv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html:10099,access,access,10099,root/htmldoc/guides/HttpServer/HttpServer.html,https://root.cern,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html,1,['access'],['access']
Security,"/host.example.com/bucket/path/to/my/file"",; ""NOPROXY AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");; TFile* f2 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file"",; ""AUTH=F38XYZABCDeFgH4D0E1F:V+frt4re7J1euSNFnmaf8wwmI4AAAE7kzxZ/TTM+"");. If there is no authentication information in the 'options' argument; (i.e. not AUTH=""...."") the values of the environmental variables; S3_ACCESS_KEY and S3_SECRET_KEY (if set) are expected to contain; the access key id and the secret access key, respectively. You have; been provided with these credentials by your S3 service provider. If neither the AUTH information is provided in the 'options' argument; nor the environmental variables are set, we try to open the file; without providing any authentication information to the server. This; is useful when the file is set an access control that allows for; any unidentified user to read the file. Bool_t ParseOptions(Option_t* options, TString& accessKey, TString& secretKey); Extracts the S3 authentication key pair (access key and secret key); from the options. The authentication credentials can be specified in; the options provided to the constructor of this class as a string; containing: ""AUTH=<access key>:<secret key>"" and can include other; options, for instance ""NOPROXY"" for not using the HTTP proxy for; accessing this file's contents.; For instance:; ""NOPROXY AUTH=F38XYZABCDeFgHiJkLm:V+frt4re7J1euSNFnmaf8wwmI401234E7kzxZ/TTM+"". Int_t GetHead(); Overwrites TWebFile::GetHead() for retrieving the HTTP headers of this; file. Uses TS3HTTPRequest to generate an HTTP HEAD request which includes; the authorization header expected by the S3 server. void SetMsgReadBuffer10(const char* redirectLocation = 0, Bool_t tempRedirect = kFALSE); Overwrites TWebFile::SetMsgReadBuffer10() for setting the HTTP GET; request compliant to the authentication mechanism used by the S3; protocol. The GET request must contain an ""Authorization"" header with; the signature of the reque",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TS3WebFile.html:29684,access,accessKey,29684,root/html534/TS3WebFile.html,https://root.cern,https://root.cern/root/html534/TS3WebFile.html,9,"['access', 'authenticat']","['access', 'accessKey', 'authentication']"
Security,"/httpcontrol.C macro.; 1.4 Configuring user access; By default, the http server is open for anonymous access. One could restrict the access to the server for authenticated users only. First of all, one should create a password file, using the htdigest utility.; [shell] htdigest -c .htdigest domain_name user_name; It is recommended not to use special symbols in domain or user names. Several users can be add to the “.htdigetst” file. When starting the server, the following arguments should be specified:; root [0] new THttpServer(""http:8080?auth_file=.htdigest&auth_domain=domain_name"");; After that, the web browser will automatically request to input a name/password for the domain “domain_name”; Based on authorized accounts, one could restrict or enable access to some elements in the server objects hierarchy, using THttpServer::Restrict() method.; For instance, one could hide complete folder from ‘guest’ account:; root [6] serv->Restrict(""/Folder"", ""hidden=guest"");; Or one could hide from all but ‘admin’ account:; root [7] serv->Restrict(""/Folder"", ""visible=admin"");; Hidden folders or objects can not be accessed via http protocol.; By default server runs in readonly mode and do not allow methods execution via ‘exe.json’ or ‘exe.bin’ requests. To allow such action, one could either grant generic access for all or one could allow to execute only special method:; root [8] serv->Restrict(""/Folder/histo1"", ""allow=all"");; root [9] serv->Restrict(""/Folder/histo1"", ""allow_method=GetTitle"");; One could provide several options for the same item, separating them with ‘&’ sign:; root [10] serv->Restrict(""/Folder/histo1"", ""allow_method=GetTitle&hide=guest"");; Complete list of supported options could be found in TRootSniffer:Restrict() method documentation.; 1.5 Using FastCGI interface; FastCGI is a protocol for interfacing interactive programs with a web server like Apache, lighttpd, Microsoft ISS and many others.; When starting THttpServer, one could specify:; serv = new THttpServ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/HttpServer/HttpServer.html:5167,access,accessed,5167,root/html534/guides/HttpServer/HttpServer.html,https://root.cern,https://root.cern/root/html534/guides/HttpServer/HttpServer.html,1,['access'],['accessed']
Security,"0 ; 3321 if (GetXaxis()) GetXaxis()->SaveAttributes(out, f1Name.Data(), ""->GetXaxis()"");; 3322 if (GetYaxis()) GetYaxis()->SaveAttributes(out, f1Name.Data(), ""->GetYaxis()"");; 3323 ; 3324 Double_t parmin, parmax;; 3325 for (i = 0; i < GetNpar(); i++) {; 3326 out << "" "" << f1Name.Data() << ""->SetParameter("" << i << "","" << GetParameter(i) << "");"" << std::endl;; 3327 out << "" "" << f1Name.Data() << ""->SetParError("" << i << "","" << GetParError(i) << "");"" << std::endl;; 3328 GetParLimits(i, parmin, parmax);; 3329 out << "" "" << f1Name.Data() << ""->SetParLimits("" << i << "","" << parmin << "","" << parmax << "");"" << std::endl;; 3330 }; 3331 if (!strstr(option, ""nodraw"")) {; 3332 out << "" "" << f1Name.Data() << ""->Draw(""; 3333 << quote << option << quote << "");"" << std::endl;; 3334 }; 3335}; 3336 ; 3337 ; 3338////////////////////////////////////////////////////////////////////////////////; 3339/// Static function setting the current function.; 3340/// the current function may be accessed in static C-like functions; 3341/// when fitting or painting a function.; 3342 ; 3343void TF1::SetCurrent(TF1 *f1); 3344{; 3345 fgCurrent = f1;; 3346}; 3347 ; 3348////////////////////////////////////////////////////////////////////////////////; 3349/// Set the result from the fit; 3350/// parameter values, errors, chi2, etc...; 3351/// Optionally a pointer to a vector (with size fNpar) of the parameter indices in the FitResult can be passed; 3352/// This is useful in the case of a combined fit with different functions, and the FitResult contains the global result; 3353/// By default it is assume that indpar = {0,1,2,....,fNpar-1}.; 3354 ; 3355void TF1::SetFitResult(const ROOT::Fit::FitResult &result, const Int_t *indpar); 3356{; 3357 Int_t npar = GetNpar();; 3358 if (result.IsEmpty()) {; 3359 Warning(""SetFitResult"", ""Empty Fit result - nothing is set in TF1"");; 3360 return;; 3361 }; 3362 if (indpar == nullptr && npar != (int) result.NPar()) {; 3363 Error(""SetFitResult"", ""Invalid Fit result passed -",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:127532,access,accessed,127532,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['access'],['accessed']
Security,"0 assert(std::distance(carryBegin, carryEnd) == N);; 151 std::copy(sumBegin, sumEnd, std::begin(fSum));; 152 std::copy(carryBegin, carryEnd, std::begin(fCarry));; 153 }; 154 ; 155 /// Constructor to create a KahanSum from another KahanSum with a different number of accumulators; 156 template <unsigned int M>; 157 KahanSum(KahanSum<T,M> const& other) {; 158 fSum[0] = other.Sum();; 159 fCarry[0] = other.Carry();; 160 std::fill(std::begin(fSum)+1, std::end(fSum), 0.);; 161 std::fill(std::begin(fCarry)+1, std::end(fCarry), 0.);; 162 }; 163 ; 164 /// Single-element accumulation. Will not vectorise.; 165 void Add(T x) {; 166 auto y = x - fCarry[0];; 167 auto t = fSum[0] + y;; 168 fCarry[0] = (t - fSum[0]) - y;; 169 fSum[0] = t;; 170 }; 171 ; 172 ; 173 /// Accumulate from a range denoted by iterators.; 174 ///; 175 /// This function will auto-vectorise with random-access iterators.; 176 /// \param[in] begin Beginning of a range. Needs to be a random access iterator for automatic; 177 /// vectorisation, because a contiguous block of memory needs to be read.; 178 /// \param[in] end End of the range.; 179 template <class Iterator>; 180 void Add(Iterator begin, Iterator end) {; 181 static_assert(std::is_floating_point<; 182 typename std::remove_reference<decltype(*begin)>::type>::value,; 183 ""Iterator needs to point to floating-point values."");; 184 const std::size_t n = std::distance(begin, end);; 185 ; 186 for (std::size_t i=0; i<n; ++i) {; 187 AddIndexed(*(begin++), i);; 188 }; 189 }; 190 ; 191 ; 192 /// Fill from a container that supports index access.; 193 /// \param[in] inputs Container with index access such as std::vector or array.; 194 template<class Container_t>; 195 void Add(const Container_t& inputs) {; 196 static_assert(std::is_floating_point<typename Container_t::value_type>::value,; 197 ""Container does not hold floating-point values."");; 198 for (std::size_t i=0; i < inputs.size(); ++i) {; 199 AddIndexed(inputs[i], i);; 200 }; 201 }; 202 ; 203 ; 204 /// Iterate ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Util_8h_source.html:6949,access,access,6949,doc/master/Util_8h_source.html,https://root.cern,https://root.cern/doc/master/Util_8h_source.html,1,['access'],['access']
Security,"0 corresponds to blocking i/o; static Int_tTFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLFile(); default TSQLFile constructor. TSQLFile(const char* dbname, Option_t* option = ""read"", const char* user = ""user"", const char* pass = ""pass""); Connects to SQL server with provided arguments.; If the constructor fails in any way IsZombie() will; return true. Use IsOpen() to check if the file is (still) open. If option = NEW or CREATE create a ROOT tables in database; if the tables already exists connection is; not opened.; = RECREATE create completely new tables. Any existing tables; will be deleted; = UPDATE open an existing database for writing.; If data base open by other TSQLFile instance for writing,; write access will be rejected; = BREAKLOCK Special case when lock was not correctly released; by TSQLFile instance. This may happen if program crashed when; TSQLFile was open with write access mode.; = READ or OPEN open an existing data base for reading. For more details see comments for TFile::TFile() constructor. For a moment TSQLFile does not support TTree objects and subdirectories. void StartLogFile(const char* fname); start logging of all SQL statements in specified file. void StopLogFile(); close logging file. Bool_t IsMySQL() const; checks, if MySQL database. Bool_t IsOracle() const; checks, if Oracle database. Bool_t IsODBC() const; checks, if ODBC driver used for database connection. void SetUseSuffixes(Bool_t on = kTRUE); enable/disable uasge of suffixes in columns names; can be changed before first object is saved into file. void SetArrayLimit(Int_t limit = 20); Defines maximum number of columns for array representation; If array size bigger than limit, array data will be converted to raw format; Thi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSQLFile.html:33908,access,access,33908,root/html530/TSQLFile.html,https://root.cern,https://root.cern/root/html530/TSQLFile.html,3,['access'],['access']
Security,"0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const. protected:. virtual voidDeclareOptions(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); const TString&TMVA::Configurable::GetReferenceFile() const; TMVA::MsgLogger&Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; voidTObject::MakeZombie(); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::Configurable::WriteOptionsReferenceToFile(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfClassNameremove TMVA:: from TObject name; TMVA::IFitterTarget&fFitterTargetpointer to target of fitting procedure; TMVA::MsgLogger*fLoggermessage logger; Int_tfNparsnumber of parameters; const vector<TMVA::Interval*>fRangesallowed intervals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t Run(); estimator function interface for fitting. Double_t EstimatorFunction(vector<Double_t>& parameters); estimator function interface for fitting. virtual ~FitterBase(); {}. Double_t Run(). IFitterTarget& GetFitterTarget() const; { return fFitterTarget; }. Int_t GetNpars() const; accessor. { return fNpars; }. const char* GetName() const; remove namespace in name. { return fClassName; }. void DeclareOptions(); need to implement option declaration. » Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__FitterBase.html:7319,access,accessor,7319,root/html534/TMVA__FitterBase.html,https://root.cern,https://root.cern/root/html534/TMVA__FitterBase.html,1,['access'],['accessor']
Security,"0.01, Option_t *option=""va"");  Estimate weight of volume VOL with a precision SIGMA(W)/W better than PRECISION. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:51862,hash,hash,51862,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['hash'],['hash']
Security,"0.root. The only difference with the well known httpd URL's is that the root; of the remote file tree is the user's home directory. Therefore an; absolute pathname requires a // after the host or port specifier; (see last example). Further the expansion of the standard shell; characters, like ~, $, .., are handled as expected.; TNetFile (actually TUrl) uses 1094 as default port for rootd. Connecting to a rootd requires the remote user id and password.; TNetFile allows three ways for you to provide your login:; 1) Setting it globally via the static functions:; TAuthenticate::SetGlobalUser() and; TAuthenticate::SetGlobalPasswd(); 2) Getting it from the ~/.netrc file (same file as used by ftp); 3) Command line prompt; The different methods will be tried in the order given above.; On machines with AFS rootd will authenticate using AFS (if it was; compiled with AFS support). If the protocol is specified as ""roots"" a secure authetication; method will be used. The secure method uses the SRP, Secure Remote; Passwords, package. SRP uses a so called ""asymmetric key exchange //; protocol"" in which no passwords are ever send over the wire. This //; protocol is safe against all known security attacks. For more see:. NetFile //; ; //; If the protocol is specified as ""rootk"" kerberos5 will be used for; authentication. The rootd daemon lives in the directory $ROOTSYS/bin. It can be; started either via inetd or by hand from the command line (no need; to be super user). For more info about rootd see the web page:. NetFile //; ; //. Function Members (Methods); public:. TNetFile(); TNetFile(const char* url, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); virtual~TNetFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TNetFile.html:1714,secur,secure,1714,root/html528/TNetFile.html,https://root.cern,https://root.cern/root/html528/TNetFile.html,4,['secur'],['secure']
Security,"0.root. The only difference with the well known httpd URL's is that the root; of the remote file tree is the user's home directory. Therefore an; absolute pathname requires a // after the host or port specifier; (see last example). Further the expansion of the standard shell; characters, like ~, $, .., are handled as expected.; TNetFile (actually TUrl) uses 1094 as default port for rootd. Connecting to a rootd requires the remote user id and password.; TNetFile allows three ways for you to provide your login:; 1) Setting it globally via the static functions:; TAuthenticate::SetGlobalUser() and; TAuthenticate::SetGlobalPasswd(); 2) Getting it from the ~/.netrc file (same file as used by ftp); 3) Command line prompt; The different methods will be tried in the order given above.; On machines with AFS rootd will authenticate using AFS (if it was; compiled with AFS support). If the protocol is specified as ""roots"" a secure authetication; method will be used. The secure method uses the SRP, Secure Remote; Passwords, package. SRP uses a so called ""asymmetric key exchange //; protocol"" in which no passwords are ever send over the wire. This //; protocol is safe against all known security attacks. For more see:. NetFile //; ; //; If the protocol is specified as ""rootk"" kerberos5 will be used for; authentication. The rootd daemon lives in the directory $ROOTSYS/bin. It can be; started either via inetd or by hand from the command line (no need; to be super user). For more info about rootd see the web page:. NetFile //; ; //. Function Members (Methods); public:. TNetSystem(Bool_t ftpowner = kTRUE); TNetSystem(const char* url, Bool_t ftpowner = kTRUE); virtual~TNetSystem(); virtual voidTSystem::Abort(int code = 0); voidTObject::AbstractMethod(const char* method) const; virtual intTSystem::AcceptConnection(int sock); virtual Bool_tAccessPathName(const char* path, EAccessMode mode); virtual voidTSystem::AddDynamicPath(const char* pathname); virtual voidTSystem::AddFileHandler(TFile",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TNetSystem.html:1722,secur,secure,1722,root/html530/TNetSystem.html,https://root.cern,https://root.cern/root/html530/TNetSystem.html,3,['secur'],['secure']
Security,"0.root. The only difference with the well known httpd URL's is that the root; of the remote file tree is the user's home directory. Therefore an; absolute pathname requires a // after the host or port specifier; (see last example). Further the expansion of the standard shell; characters, like ~, $, .., are handled as expected.; TNetFile (actually TUrl) uses 1094 as default port for rootd. Connecting to a rootd requires the remote user id and password.; TNetFile allows three ways for you to provide your login:; 1) Setting it globally via the static functions:; TAuthenticate::SetGlobalUser() and; TAuthenticate::SetGlobalPasswd(); 2) Getting it from the ~/.netrc file (same file as used by ftp); 3) Command line prompt; The different methods will be tried in the order given above.; On machines with AFS rootd will authenticate using AFS (if it was; compiled with AFS support). If the protocol is specified as ""roots"" a secure authetication; method will be used. The secure method uses the SRP, Secure Remote; Passwords, package. SRP uses a so called ""asymmetric key exchange //; protocol"" in which no passwords are ever send over the wire. This //; protocol is safe against all known security attacks. For more see:. NetFile //; ; //; If the protocol is specified as ""rootk"" kerberos5 will be used for; authentication. The rootd daemon lives in the directory $ROOTSYS/bin. It can be; started either via inetd or by hand from the command line (no need; to be super user). For more info about rootd see the web page:. NetFile //; ; //. Function Members (Methods); public:. TNetSystem(Bool_t ftpowner = kTRUE); TNetSystem(const char* url, Bool_t ftpowner = kTRUE); virtual~TNetSystem(); virtual voidTSystem::Abort(int code = 0); voidTObject::AbstractMethod(const char* method) const; virtual intTSystem::AcceptConnection(int sock); virtual Bool_tAccessPathName(const char* path, EAccessMode mode); virtual voidTSystem::AddFileHandler(TFileHandler* fh); virtual voidTSystem::AddIncludePath(const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TNetSystem.html:1722,secur,secure,1722,root/html528/TNetSystem.html,https://root.cern,https://root.cern/root/html528/TNetSystem.html,1,['secur'],['secure']
Security,"0.root. The only difference with the well known httpd URL's is that the root; of the remote file tree is the user's home directory. Therefore an; absolute pathname requires a // after the host or port specifier; (see last example). Further the expansion of the standard shell; characters, like ~, $, .., are handled as expected.; TNetFile (actually TUrl) uses 1094 as default port for rootd. Connecting to a rootd requires the remote user id and password.; TNetFile allows three ways for you to provide your login:; 1) Setting it globally via the static functions:; TAuthenticate::SetGlobalUser() and; TAuthenticate::SetGlobalPasswd(); 2) Getting it from the ~/.netrc file (same file as used by ftp); 3) Command line prompt; The different methods will be tried in the order given above.; On machines with AFS rootd will authenticate using AFS (if it was; compiled with AFS support). If the protocol is specified as ""roots"" a secure authetication; method will be used. The secure method uses the SRP, Secure Remote; Passwords, package. SRP uses a so called ""asymmetric key exchange //; protocol"" in which no passwords are ever send over the wire. This //; protocol is safe against all known security attacks. For more see:. NetFile //; ; //; If the protocol is specified as ""rootk"" kerberos5 will be used for; authentication. The rootd daemon lives in the directory $ROOTSYS/bin. It can be; started either via inetd or by hand from the command line (no need; to be super user). For more info about rootd see the web page:. NetFile //; ; //. Function Members (Methods); public:. virtual~TNetFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTDirectoryFile::Add(TObject* obj, Bool_t replace = kFALSE); static voidTDirectory::AddDirectory(Bool_t add = kTRUE); static Bool_tTDirectory::AddDirectoryStatus(); virtual voidTDirectoryFile::Append(TObject* obj, Bool_t replace = kFALSE); virtual Int_tTDirectoryFile::AppendKey(TKey* key); virtual voidTObject::AppendPad(Option_t* option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TNetFile.html:1714,secur,secure,1714,root/html602/TNetFile.html,https://root.cern,https://root.cern/root/html602/TNetFile.html,2,['secur'],['secure']
Security,"0.root. The only difference with the well known httpd URL's is that the root; of the remote file tree is the user's home directory. Therefore an; absolute pathname requires a // after the host or port specifier; (see last example). Further the expansion of the standard shell; characters, like ~, $, .., are handled as expected.; TNetFile (actually TUrl) uses 1094 as default port for rootd. Connecting to a rootd requires the remote user id and password.; TNetFile allows three ways for you to provide your login:; 1) Setting it globally via the static functions:; TAuthenticate::SetGlobalUser() and; TAuthenticate::SetGlobalPasswd(); 2) Getting it from the ~/.netrc file (same file as used by ftp); 3) Command line prompt; The different methods will be tried in the order given above.; On machines with AFS rootd will authenticate using AFS (if it was; compiled with AFS support). If the protocol is specified as ""roots"" a secure authetication; method will be used. The secure method uses the SRP, Secure Remote; Passwords, package. SRP uses a so called ""asymmetric key exchange //; protocol"" in which no passwords are ever send over the wire. This //; protocol is safe against all known security attacks. For more see:. NetFile //; ; //; If the protocol is specified as ""rootk"" kerberos5 will be used for; authentication. The rootd daemon lives in the directory $ROOTSYS/bin. It can be; started either via inetd or by hand from the command line (no need; to be super user). For more info about rootd see the web page:. NetFile //; ; //. Function Members (Methods); public:. virtual~TNetSystem(); virtual voidTSystem::Abort(int code = 0); voidTObject::AbstractMethod(const char* method) const; virtual intTSystem::AcceptConnection(int sock); virtual Bool_tAccessPathName(const char* path, EAccessMode mode); virtual voidTSystem::AddDynamicPath(const char* pathname); virtual voidTSystem::AddFileHandler(TFileHandler* fh); virtual voidTSystem::AddIncludePath(const char* includePath); virtual voidTSy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TNetSystem.html:1722,secur,secure,1722,root/html602/TNetSystem.html,https://root.cern,https://root.cern/root/html602/TNetSystem.html,2,['secur'],['secure']
Security,"00 Hz for complex data structure. A factor of few improvement for complex data can be a difference between requiring just one machine or a small farm. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:51 Permalink . Re: I/O Performance . Hi ROOT User,; We have dramatically improved the I/O performance over the last two years. If you use the latest production release also for writing data you might be able to see a performance improvement of an order of magnitude compared to e.g. 5.26, both in real and CPU time! See e.g. this blog entry.; We have been comparing the performance of ROOT I/O with competitors like Google ProtoBuf; we know exactly where we spend extra time and why, e.g. for schema evolution, proper C++ type support, introspection, pointers.; On the other hand, are you sure you make use of all the performance features ROOT offers? Did you enable the tree cache (on by default for PROOF and one tree per file, off - for now, still - otherwise)? Do you only read the branches you need? I am working on a new TTree read access class that should simplify all of that considerably (and is type safe - no more void*&!); maybe I should take your comment as an invitation to speed up :-); Cheers, Axel. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:51 Permalink . Re: Interpreters . Hi ROOT user,; Thanks for your comments - they are excellent!; Your scenario would probably work - but we decided against it, and I believe that we have good reasons for that :-); GCCXML's future is limited; there is a re-write based on GCC's plugin mechanism, but both suffer from the same problems: we cannot influence what the GCC parser does. And reading headers, writing XML, parsing XML, writing (huge files of) C++, compiling, linking, loading - that's really, really inefficient and error prone.; Python is much simpler than C++. But it's still a horrible language in our environment, unless it's used as bash++. Not a single algorithm should be written in Python: it'",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:15997,access,access,15997,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['access'],['access']
Security,"000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TDatabasePDG.h>. Inheritance diagram for TDatabasePDG:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TDatabasePDG() [1/2]. TDatabasePDG::TDatabasePDG ; (; const TDatabasePDG & ; db). inlineprotected . hash-map from pdg-code to particle ; Definition at line 29 of file TDatabasePDG.h. ◆ TDatabasePDG() [2/2]. TDatabasePDG::TDatabasePDG ; (; ). Create PDG database. ; Initialization of the DB has to be done via explicit call to ReadDataBasePDG (also done by GetParticle methods) ; Definition at line 68 of file TDatabasePDG.cxx. ◆ ~TDatabasePDG(). TDatabasePDG::~TDatabasePDG ; (; ). override . Cleanup the PDG database. ; Definition at line 85 of file TDatabasePDG.cxx. Member Function Documentation. ◆ AddAntiParticle(). TParticlePDG * TDatabasePDG::AddAntiParticle ; (; const char * ; Name, . Int_t ; PdgCode . ). virtual . assuming particle has already been defined ; Definition at line 193 of file TDatabasePDG.cxx. ◆ AddParticle(). TParticlePDG * TDatabasePDG::AddParticle ; (; const char * ; name, . const char * ; title, . Double_t ; mass, . Bool_t ; stable, . Double_t ; width, . Double_t ; charge, . const char * ; ParticleClass, . Int_t ; PDGcode, . Int_t ; Anti = -1, . Int_t ; TrackingCode = 0 . ). virtual . Particle definition ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDatabasePDG.html:14243,hash,hash-map,14243,doc/master/classTDatabasePDG.html,https://root.cern,https://root.cern/doc/master/classTDatabasePDG.html,1,['hash'],['hash-map']
Security,"0310 __func__,; 10311 path);; 10312 }; 10313}; 10314 ; 10315 ; 10316long long; 10317mg_store_body(struct mg_connection *conn, const char *path); 10318{; 10319 char buf[MG_BUF_LEN];; 10320 long long len = 0;; 10321 int ret, n;; 10322 struct mg_file fi;; 10323 ; 10324 if (conn->consumed_content != 0) {; 10325 mg_cry_internal(conn, ""%s: Contents already consumed"", __func__);; 10326 return -11;; 10327 }; 10328 ; 10329 ret = put_dir(conn, path);; 10330 if (ret < 0) {; 10331 /* -1 for path too long,; 10332 * -2 for path can not be created. */; 10333 return ret;; 10334 }; 10335 if (ret != 1) {; 10336 /* Return 0 means, path itself is a directory. */; 10337 return 0;; 10338 }; 10339 ; 10340 if (mg_fopen(conn, path, MG_FOPEN_MODE_WRITE, &fi) == 0) {; 10341 return -12;; 10342 }; 10343 ; 10344 ret = mg_read(conn, buf, sizeof(buf));; 10345 while (ret > 0) {; 10346 n = (int)fwrite(buf, 1, (size_t)ret, fi.access.fp);; 10347 if (n != ret) {; 10348 (void)mg_fclose(; 10349 &fi.access); /* File is bad and will be removed anyway. */; 10350 remove_bad_file(conn, path);; 10351 return -13;; 10352 }; 10353 len += ret;; 10354 ret = mg_read(conn, buf, sizeof(buf));; 10355 }; 10356 ; 10357 /* File is open for writing. If fclose fails, there was probably an; 10358 * error flushing the buffer to disk, so the file on disk might be; 10359 * broken. Delete it and return an error to the caller. */; 10360 if (mg_fclose(&fi.access) != 0) {; 10361 remove_bad_file(conn, path);; 10362 return -14;; 10363 }; 10364 ; 10365 return len;; 10366}; 10367#endif /* NO_FILESYSTEMS */; 10368 ; 10369 ; 10370/* Parse a buffer:; 10371 * Forward the string pointer till the end of a word, then; 10372 * terminate it and forward till the begin of the next word.; 10373 */; 10374static int; 10375skip_to_end_of_word_and_terminate(char **ppw, int eol); 10376{; 10377 /* Forward until a space is found - use isgraph here */; 10378 /* See http://www.cplusplus.com/reference/cctype/ */; 10379 while (isgraph((unsigned char)**ppw)) {",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:297473,access,access,297473,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['access'],['access']
Security,"0311 __func__,; 10312 path);; 10313 }; 10314}; 10315 ; 10316 ; 10317long long; 10318mg_store_body(struct mg_connection *conn, const char *path); 10319{; 10320 char buf[MG_BUF_LEN];; 10321 long long len = 0;; 10322 int ret, n;; 10323 struct mg_file fi;; 10324 ; 10325 if (conn->consumed_content != 0) {; 10326 mg_cry_internal(conn, ""%s: Contents already consumed"", __func__);; 10327 return -11;; 10328 }; 10329 ; 10330 ret = put_dir(conn, path);; 10331 if (ret < 0) {; 10332 /* -1 for path too long,; 10333 * -2 for path can not be created. */; 10334 return ret;; 10335 }; 10336 if (ret != 1) {; 10337 /* Return 0 means, path itself is a directory. */; 10338 return 0;; 10339 }; 10340 ; 10341 if (mg_fopen(conn, path, MG_FOPEN_MODE_WRITE, &fi) == 0) {; 10342 return -12;; 10343 }; 10344 ; 10345 ret = mg_read(conn, buf, sizeof(buf));; 10346 while (ret > 0) {; 10347 n = (int)fwrite(buf, 1, (size_t)ret, fi.access.fp);; 10348 if (n != ret) {; 10349 (void)mg_fclose(; 10350 &fi.access); /* File is bad and will be removed anyway. */; 10351 remove_bad_file(conn, path);; 10352 return -13;; 10353 }; 10354 len += ret;; 10355 ret = mg_read(conn, buf, sizeof(buf));; 10356 }; 10357 ; 10358 /* File is open for writing. If fclose fails, there was probably an; 10359 * error flushing the buffer to disk, so the file on disk might be; 10360 * broken. Delete it and return an error to the caller. */; 10361 if (mg_fclose(&fi.access) != 0) {; 10362 remove_bad_file(conn, path);; 10363 return -14;; 10364 }; 10365 ; 10366 return len;; 10367}; 10368#endif /* NO_FILESYSTEMS */; 10369 ; 10370 ; 10371/* Parse a buffer:; 10372 * Forward the string pointer till the end of a word, then; 10373 * terminate it and forward till the begin of the next word.; 10374 */; 10375static int; 10376skip_to_end_of_word_and_terminate(char **ppw, int eol); 10377{; 10378 /* Forward until a space is found - use isgraph here */; 10379 /* See http://www.cplusplus.com/reference/cctype/ */; 10380 while (isgraph((unsigned char)**ppw)) {",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:297506,access,access,297506,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['access'],['access']
Security,"06 }; 8607 }; 8608 ; 8609 return is_authorized;; 8610}; 8611 ; 8612 ; 8613/* Authorize against the opened passwords file. Return 1 if authorized. */; 8614static int; 8615authorize(struct mg_connection *conn, struct mg_file *filep, const char *realm); 8616{; 8617 struct read_auth_file_struct workdata;; 8618 char buf[MG_BUF_LEN];; 8619 ; 8620 if (!conn || !conn->dom_ctx) {; 8621 return 0;; 8622 }; 8623 ; 8624 memset(&workdata, 0, sizeof(workdata));; 8625 workdata.conn = conn;; 8626 ; 8627 if (!parse_auth_header(conn, buf, sizeof(buf), &workdata.ah)) {; 8628 return 0;; 8629 }; 8630 ; 8631 if (realm) {; 8632 workdata.domain = realm;; 8633 } else {; 8634 workdata.domain = conn->dom_ctx->config[AUTHENTICATION_DOMAIN];; 8635 }; 8636 ; 8637 return read_auth_file(filep, &workdata, INITIAL_DEPTH);; 8638}; 8639 ; 8640 ; 8641/* Public function to check http digest authentication header */; 8642int; 8643mg_check_digest_access_authentication(struct mg_connection *conn,; 8644 const char *realm,; 8645 const char *filename); 8646{; 8647 struct mg_file file = STRUCT_FILE_INITIALIZER;; 8648 int auth;; 8649 ; 8650 if (!conn || !filename) {; 8651 return -1;; 8652 }; 8653 if (!mg_fopen(conn, filename, MG_FOPEN_MODE_READ, &file)) {; 8654 return -2;; 8655 }; 8656 ; 8657 auth = authorize(conn, &file, realm);; 8658 ; 8659 mg_fclose(&file.access);; 8660 ; 8661 return auth;; 8662}; 8663#endif /* NO_FILESYSTEMS */; 8664 ; 8665 ; 8666/* Return 1 if request is authorised, 0 otherwise. */; 8667static int; 8668check_authorization(struct mg_connection *conn, const char *path); 8669{; 8670#if !defined(NO_FILESYSTEMS); 8671 char fname[UTF8_PATH_MAX];; 8672 struct vec uri_vec, filename_vec;; 8673 const char *list;; 8674 struct mg_file file = STRUCT_FILE_INITIALIZER;; 8675 int authorized = 1, truncated;; 8676 ; 8677 if (!conn || !conn->dom_ctx) {; 8678 return 0;; 8679 }; 8680 ; 8681 list = conn->dom_ctx->config[PROTECT_URI];; 8682 while ((list = next_option(list, &uri_vec, &filename_vec)) != NULL) {; 868",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:249172,authenticat,authentication,249172,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,"['authenticat', 'authoriz']","['authentication', 'authorize']"
Security,"07 if (r != 0) {; 10308 mg_cry_internal(conn,; 10309 ""%s: Cannot remove invalid file %s"",; 10310 __func__,; 10311 path);; 10312 }; 10313}; 10314 ; 10315 ; 10316long long; 10317mg_store_body(struct mg_connection *conn, const char *path); 10318{; 10319 char buf[MG_BUF_LEN];; 10320 long long len = 0;; 10321 int ret, n;; 10322 struct mg_file fi;; 10323 ; 10324 if (conn->consumed_content != 0) {; 10325 mg_cry_internal(conn, ""%s: Contents already consumed"", __func__);; 10326 return -11;; 10327 }; 10328 ; 10329 ret = put_dir(conn, path);; 10330 if (ret < 0) {; 10331 /* -1 for path too long,; 10332 * -2 for path can not be created. */; 10333 return ret;; 10334 }; 10335 if (ret != 1) {; 10336 /* Return 0 means, path itself is a directory. */; 10337 return 0;; 10338 }; 10339 ; 10340 if (mg_fopen(conn, path, MG_FOPEN_MODE_WRITE, &fi) == 0) {; 10341 return -12;; 10342 }; 10343 ; 10344 ret = mg_read(conn, buf, sizeof(buf));; 10345 while (ret > 0) {; 10346 n = (int)fwrite(buf, 1, (size_t)ret, fi.access.fp);; 10347 if (n != ret) {; 10348 (void)mg_fclose(; 10349 &fi.access); /* File is bad and will be removed anyway. */; 10350 remove_bad_file(conn, path);; 10351 return -13;; 10352 }; 10353 len += ret;; 10354 ret = mg_read(conn, buf, sizeof(buf));; 10355 }; 10356 ; 10357 /* File is open for writing. If fclose fails, there was probably an; 10358 * error flushing the buffer to disk, so the file on disk might be; 10359 * broken. Delete it and return an error to the caller. */; 10360 if (mg_fclose(&fi.access) != 0) {; 10361 remove_bad_file(conn, path);; 10362 return -14;; 10363 }; 10364 ; 10365 return len;; 10366}; 10367#endif /* NO_FILESYSTEMS */; 10368 ; 10369 ; 10370/* Parse a buffer:; 10371 * Forward the string pointer till the end of a word, then; 10372 * terminate it and forward till the begin of the next word.; 10373 */; 10374static int; 10375skip_to_end_of_word_and_terminate(char **ppw, int eol); 10376{; 10377 /* Forward until a space is found - use isgraph here */; 10378 /* See ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:297403,access,access,297403,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['access'],['access']
Security,"07 }; 8608 }; 8609 ; 8610 return is_authorized;; 8611}; 8612 ; 8613 ; 8614/* Authorize against the opened passwords file. Return 1 if authorized. */; 8615static int; 8616authorize(struct mg_connection *conn, struct mg_file *filep, const char *realm); 8617{; 8618 struct read_auth_file_struct workdata;; 8619 char buf[MG_BUF_LEN];; 8620 ; 8621 if (!conn || !conn->dom_ctx) {; 8622 return 0;; 8623 }; 8624 ; 8625 memset(&workdata, 0, sizeof(workdata));; 8626 workdata.conn = conn;; 8627 ; 8628 if (!parse_auth_header(conn, buf, sizeof(buf), &workdata.ah)) {; 8629 return 0;; 8630 }; 8631 ; 8632 if (realm) {; 8633 workdata.domain = realm;; 8634 } else {; 8635 workdata.domain = conn->dom_ctx->config[AUTHENTICATION_DOMAIN];; 8636 }; 8637 ; 8638 return read_auth_file(filep, &workdata, INITIAL_DEPTH);; 8639}; 8640 ; 8641 ; 8642/* Public function to check http digest authentication header */; 8643int; 8644mg_check_digest_access_authentication(struct mg_connection *conn,; 8645 const char *realm,; 8646 const char *filename); 8647{; 8648 struct mg_file file = STRUCT_FILE_INITIALIZER;; 8649 int auth;; 8650 ; 8651 if (!conn || !filename) {; 8652 return -1;; 8653 }; 8654 if (!mg_fopen(conn, filename, MG_FOPEN_MODE_READ, &file)) {; 8655 return -2;; 8656 }; 8657 ; 8658 auth = authorize(conn, &file, realm);; 8659 ; 8660 mg_fclose(&file.access);; 8661 ; 8662 return auth;; 8663}; 8664#endif /* NO_FILESYSTEMS */; 8665 ; 8666 ; 8667/* Return 1 if request is authorised, 0 otherwise. */; 8668static int; 8669check_authorization(struct mg_connection *conn, const char *path); 8670{; 8671#if !defined(NO_FILESYSTEMS); 8672 char fname[UTF8_PATH_MAX];; 8673 struct vec uri_vec, filename_vec;; 8674 const char *list;; 8675 struct mg_file file = STRUCT_FILE_INITIALIZER;; 8676 int authorized = 1, truncated;; 8677 ; 8678 if (!conn || !conn->dom_ctx) {; 8679 return 0;; 8680 }; 8681 ; 8682 list = conn->dom_ctx->config[PROTECT_URI];; 8683 while ((list = next_option(list, &uri_vec, &filename_vec)) != NULL) {; 868",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:249204,authenticat,authentication,249204,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,2,"['authenticat', 'authoriz']","['authentication', 'authorize']"
Security,"08 if (r != 0) {; 10309 mg_cry_internal(conn,; 10310 ""%s: Cannot remove invalid file %s"",; 10311 __func__,; 10312 path);; 10313 }; 10314}; 10315 ; 10316 ; 10317long long; 10318mg_store_body(struct mg_connection *conn, const char *path); 10319{; 10320 char buf[MG_BUF_LEN];; 10321 long long len = 0;; 10322 int ret, n;; 10323 struct mg_file fi;; 10324 ; 10325 if (conn->consumed_content != 0) {; 10326 mg_cry_internal(conn, ""%s: Contents already consumed"", __func__);; 10327 return -11;; 10328 }; 10329 ; 10330 ret = put_dir(conn, path);; 10331 if (ret < 0) {; 10332 /* -1 for path too long,; 10333 * -2 for path can not be created. */; 10334 return ret;; 10335 }; 10336 if (ret != 1) {; 10337 /* Return 0 means, path itself is a directory. */; 10338 return 0;; 10339 }; 10340 ; 10341 if (mg_fopen(conn, path, MG_FOPEN_MODE_WRITE, &fi) == 0) {; 10342 return -12;; 10343 }; 10344 ; 10345 ret = mg_read(conn, buf, sizeof(buf));; 10346 while (ret > 0) {; 10347 n = (int)fwrite(buf, 1, (size_t)ret, fi.access.fp);; 10348 if (n != ret) {; 10349 (void)mg_fclose(; 10350 &fi.access); /* File is bad and will be removed anyway. */; 10351 remove_bad_file(conn, path);; 10352 return -13;; 10353 }; 10354 len += ret;; 10355 ret = mg_read(conn, buf, sizeof(buf));; 10356 }; 10357 ; 10358 /* File is open for writing. If fclose fails, there was probably an; 10359 * error flushing the buffer to disk, so the file on disk might be; 10360 * broken. Delete it and return an error to the caller. */; 10361 if (mg_fclose(&fi.access) != 0) {; 10362 remove_bad_file(conn, path);; 10363 return -14;; 10364 }; 10365 ; 10366 return len;; 10367}; 10368#endif /* NO_FILESYSTEMS */; 10369 ; 10370 ; 10371/* Parse a buffer:; 10372 * Forward the string pointer till the end of a word, then; 10373 * terminate it and forward till the begin of the next word.; 10374 */; 10375static int; 10376skip_to_end_of_word_and_terminate(char **ppw, int eol); 10377{; 10378 /* Forward until a space is found - use isgraph here */; 10379 /* See ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:297436,access,access,297436,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['access'],['access']
Security,"082 for (size_t l = 0; l < net.GetDepth(); l++) {; 1083 fNet.GetLayer(l).GetWeights() = (TMatrixT<Scalar_t>) net.GetLayer(l).GetWeights();; 1084 fNet.GetLayer(l).GetBiases() = (TMatrixT<Scalar_t>) net.GetLayer(l).GetBiases();; 1085 }; 1086 }; 1087 ; 1088#else // DNNCUDA flag not set.; 1089 ; 1090 Log() << kFATAL << ""CUDA backend not enabled. Please make sure ""; 1091 ""you have CUDA installed and it was successfully ""; 1092 ""detected by CMAKE."" << Endl;; 1093#endif // DNNCUDA; 1094}; 1095 ; 1096////////////////////////////////////////////////////////////////////////////////; 1097 ; 1098void TMVA::MethodDNN::TrainCpu(); 1099{; 1100 ; 1101#ifdef DNNCPU // Included only if DNNCPU flag is set.; 1102 Log() << kINFO << ""Start of neural network training on CPU."" << Endl << Endl;; 1103 ; 1104 size_t nValidationSamples = GetNumValidationSamples();; 1105 size_t nTrainingSamples = GetEventCollection(Types::kTraining).size() - nValidationSamples;; 1106 size_t nTestSamples = nValidationSamples;; 1107 ; 1108 Log() << kDEBUG << ""Using "" << nValidationSamples << "" validation samples."" << Endl;; 1109 Log() << kDEBUG << ""Using "" << nTestSamples << "" training samples."" << Endl;; 1110 ; 1111 fNet.Initialize(fWeightInitialization);; 1112 ; 1113 size_t trainingPhase = 1;; 1114 for (TTrainingSettings & settings : fTrainingSettings) {; 1115 ; 1116 if (fInteractive){; 1117 fInteractive->ClearGraphs();; 1118 }; 1119 ; 1120 Log() << ""Training phase "" << trainingPhase << "" of ""; 1121 << fTrainingSettings.size() << "":"" << Endl;; 1122 trainingPhase++;; 1123 ; 1124 TNet<TCpu<>> net(settings.batchSize, fNet);; 1125 net.SetWeightDecay(settings.weightDecay);; 1126 net.SetRegularization(settings.regularization);; 1127 // Need to convert dropoutprobabilities to conventions used; 1128 // by backend implementation.; 1129 std::vector<Double_t> dropoutVector(settings.dropoutProbabilities);; 1130 for (auto & p : dropoutVector) {; 1131 p = 1.0 - p;; 1132 }; 1133 net.SetDropoutProbabilities(dropoutVector);; 11",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:39776,validat,validation,39776,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['validat'],['validation']
Security,"0] new THttpServer(""http:8080?auth_file=.htdigest&auth_domain=domain_name"");; After that, the web browser will automatically request to input a name/password for the domain “domain_name”; Based on authorized accounts, one could restrict or enable access to some elements in the server objects hierarchy, using THttpServer::Restrict() method.; For instance, one could hide complete folder from ‘guest’ account:; root [6] serv->Restrict(""/Folder"", ""hidden=guest"");; Or one could hide from all but ‘admin’ account:; root [7] serv->Restrict(""/Folder"", ""visible=admin"");; Hidden folders or objects can not be accessed via http protocol.; By default server runs in readonly mode and do not allow methods execution via ‘exe.json’ or ‘exe.bin’ requests. To allow such action, one could either grant generic access for all or one could allow to execute only special method:; root [8] serv->Restrict(""/Folder/histo1"", ""allow=all"");; root [9] serv->Restrict(""/Folder/histo1"", ""allow_method=GetTitle"");; One could provide several options for the same item, separating them with ‘&’ sign:; root [10] serv->Restrict(""/Folder/histo1"", ""allow_method=GetTitle&hide=guest"");; Complete list of supported options could be found in TRootSniffer:Restrict() method documentation.; 1.5 Using FastCGI interface; FastCGI is a protocol for interfacing interactive programs with a web server like Apache, lighttpd, Microsoft ISS and many others.; When starting THttpServer, one could specify:; serv = new THttpServer(""fastcgi:9000"");; In fact, the FastCGI interface can run in parallel to http server. One can just call:; serv = new THttpServer(""http:8080"");; serv->CreateEngine(""fastcgi:9000"");; One could specify a debug parameter to be able to adjust the FastCGI configuration on the web server:; serv->CreateEngine(""fastcgi:9000?debug=1"");; All user access will be ruled by the main web server - for the moment one cannot restrict access with fastcgi engine.; 1.5.1 Configure fastcgi with Apcahe2; First of all, one should co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/HttpServer/HttpServer.html:5362,access,access,5362,root/html534/guides/HttpServer/HttpServer.html,https://root.cern,https://root.cern/root/html534/guides/HttpServer/HttpServer.html,1,['access'],['access']
Security,"0};  Number of bytes in TNamed at creation time. ;  ; Long64_t fSeekDir {0};  Location of directory on file. ;  ; Long64_t fSeekKeys {0};  Location of Keys record on file. ;  ; Long64_t fSeekParent {0};  Location of parent directory on file. ;  ; Bool_t fWritable {kFALSE};  True if directory is writable. ;  ;  Protected Attributes inherited from TDirectory; TContext * fContext {nullptr};  Buffer for GetPath() function. ;  ; std::atomic< size_t > fContextPeg {0};  thread local gDirectory pointing to this object. ;  ; std::vector< SharedGDirectory_t > fGDirectories;  ; TList * fList {nullptr};  ; TObject * fMother {nullptr};  ; TString fPathBuffer;  ; std::atomic_flag fSpinLock;  Counter delaying the TDirectory destructor from finishing. ;  ; TUUID fUUID;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions;  TS3WebFile ();  ; Bool_t GetCredentialsFromEnv (const char *accessKeyEnv, const char *secretKeyEnv, const char *tokenEnv, TString &outAccessKey, TString &outSecretKey, TString &outToken);  Sets the access and secret keys from the environmental variables, if they are both set. ;  ; Bool_t ParseOptions (Option_t *options, TString &accessKey, TString &secretKey, TString &token);  Extracts the S3 authentication key pair (access key and secret key) from the options. ;  . Additional Inherited Members;  Public Types inherited from TFile; enum  { kStartBigFile = 2000000000; };  ; enum  EAsyncOpenStatus { kAOSNotAsync = -1; , kAOSFailure = 0; , kAOSInProgress = 1; , kAOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTS3WebFile.html:42690,access,accessKeyEnv,42690,doc/master/classTS3WebFile.html,https://root.cern,https://root.cern/doc/master/classTS3WebFile.html,2,['access'],"['access', 'accessKeyEnv']"
Security,"1 *f1, Option_t *opt="""")Fits the efficiency using the TBinomialEfficiencyFitter class.Definition TEfficiency.cxx:2555; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TList::AddFirstvoid AddFirst(TObject *obj) overrideAdd object at the beginning of the list.Definition TList.cxx:98. VI.3 Draw a TEfficiency object; A TEfficiency object can be drawn by calling the usual TEfficiency::Draw method. At the moment drawing is only supported for 1- and 2-dimensional TEfficiency objects. In the 1-dimensional case, you can use the same options as for the TGraphAsymmErrors::Draw method. For 2-dimensional TEfficiency objects, you can pass the same options as for a TH2::Draw object. VI.4 TEfficiency object's axis customisation; The axes of a TEfficiency object can be accessed and customised by calling the GetPaintedGraph method and then GetXaxis() or GetYaxis() and the corresponding TAxis methods. Note that in order to access the painted graph via GetPaintedGraph(), one should either call Paint or, better, gPad->Update().; {; //canvas only needed for this documentation; TCanvas* c1 = new TCanvas(""example"","""",600,400);; c1->SetFillStyle(1001);; c1->SetFillColor(kWhite);; c1->Divide(2,1);; ; //create one-dimensional TEfficiency object with fixed bin size; TEfficiency* pEff = new TEfficiency(""eff"",""my efficiency;x;#epsilon"",20,0,10);; TRandom3 rand3;; ; bool bPassed;; double x;; for(int i=0; i<10000; ++i); {; //simulate events with variable under investigation; x = rand3.Uniform(10);; //check selection: bPassed = DoesEventPassSelection(x); bPassed = rand3.Rndm() < TMath::Gaus(x,5,4);; pEff->Fill(bPassed,x);; }; c1->cd(1);; pEff->Draw(""AP"");; c1->cd(2);; pEff->Draw(""AP"");; gPad->Update();; pEff->GetPaintedGraph()->GetXaxis()->SetTitleSize(0.05);; pEff->GetPaintedGraph()->GetXaxis()->SetLabelFont(42);; pEff->GetPaintedGraph()->GetXaxis()->SetLabelSize(0.05);; pEff->GetPaintedGraph()->GetYaxis()->SetTitleOffset(0.85);; pEff->GetPaintedGraph()->Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEfficiency.html:28510,access,access,28510,doc/master/classTEfficiency.html,https://root.cern,https://root.cern/doc/master/classTEfficiency.html,1,['access'],['access']
Security,"1 - default) ; Definition at line 290 of file RWebWindow.hxx. ◆ HasConnection(). bool RWebWindow::HasConnection ; (; unsigned ; connid = 0, . bool ; only_active = true . ); const. returns true if specified connection id exists ; Parameters. connidconnection id (0 - any) ; only_activewhen true only active connection will be checked, otherwise also pending (not yet established) connections are checked . Definition at line 1413 of file RWebWindow.cxx. ◆ HasKey(). bool RWebWindow::HasKey ; (; const std::string & ; key, . bool ; also_newkey = false . ); const. private . Returns true if provided key value already exists (in processes map or in existing connections) In special cases one also can check if key value exists as newkey. ; Definition at line 558 of file RWebWindow.cxx. ◆ HMAC(). std::string RWebWindow::HMAC ; (; const std::string & ; key, . const std::string & ; sessionKey, . const char * ; msg, . int ; msglen . ). staticprivate . Calculate HMAC checksum for provided key and message Key combained from connection key and session key. ; Definition at line 1992 of file RWebWindow.cxx. ◆ InvokeCallbacks(). void RWebWindow::InvokeCallbacks ; (; bool ; force = false). private . Invoke callbacks with existing data Must be called from appropriate thread. ; Definition at line 438 of file RWebWindow.cxx. ◆ IsFileDialogMessage(). bool RWebWindow::IsFileDialogMessage ; (; const std::string & ; msg). static . Check if this could be the message send by client to start new file dialog If returns true, one can call RWebWindow::EmbedFileDialog() to really create file dialog instance inside existing widget. ; Definition at line 1963 of file RWebWindow.cxx. ◆ IsNativeOnlyConn(). bool ROOT::RWebWindow::IsNativeOnlyConn ; (; ); const. inline . returns true if only native (own-created) connections are allowed ; Definition at line 312 of file RWebWindow.hxx. ◆ IsRequireAuthKey(). bool ROOT::RWebWindow::IsRequireAuthKey ; (; ); const. inline . returns true if authentication string is r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:36430,checksum,checksum,36430,doc/v632/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html,1,['checksum'],['checksum']
Security,"1 - default) ; Definition at line 293 of file RWebWindow.hxx. ◆ HasConnection(). bool RWebWindow::HasConnection ; (; unsigned ; connid = 0, . bool ; only_active = true . ); const. returns true if specified connection id exists ; Parameters. connidconnection id (0 - any) ; only_activewhen true only active connection will be checked, otherwise also pending (not yet established) connections are checked . Definition at line 1455 of file RWebWindow.cxx. ◆ HasKey(). bool RWebWindow::HasKey ; (; const std::string & ; key, . bool ; also_newkey = false . ); const. private . Returns true if provided key value already exists (in processes map or in existing connections) In special cases one also can check if key value exists as newkey. ; Definition at line 559 of file RWebWindow.cxx. ◆ HMAC(). std::string RWebWindow::HMAC ; (; const std::string & ; key, . const std::string & ; sessionKey, . const char * ; msg, . int ; msglen . ). staticprivate . Calculate HMAC checksum for provided key and message Key combained from connection key and session key. ; Definition at line 2034 of file RWebWindow.cxx. ◆ InvokeCallbacks(). void RWebWindow::InvokeCallbacks ; (; bool ; force = false). private . Invoke callbacks with existing data Must be called from appropriate thread. ; Definition at line 439 of file RWebWindow.cxx. ◆ IsFileDialogMessage(). bool RWebWindow::IsFileDialogMessage ; (; const std::string & ; msg). static . Check if this could be the message send by client to start new file dialog If returns true, one can call RWebWindow::EmbedFileDialog() to really create file dialog instance inside existing widget. ; Definition at line 2005 of file RWebWindow.cxx. ◆ IsNativeOnlyConn(). bool ROOT::RWebWindow::IsNativeOnlyConn ; (; ); const. inline . returns true if only native (own-created) connections are allowed ; Definition at line 315 of file RWebWindow.hxx. ◆ IsRequireAuthKey(). bool ROOT::RWebWindow::IsRequireAuthKey ; (; ); const. inline . returns true if authentication string is r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindow.html:35314,checksum,checksum,35314,doc/master/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html,1,['checksum'],['checksum']
Security,"1 return out;; 702}; 703 ; 704////////////////////////////////////////////////////////////////////////////////; 705/// Get process id.; 706 ; 707int TSystem::GetPid(); 708{; 709 AbstractMethod(""GetPid"");; 710 return -1;; 711}; 712 ; 713////////////////////////////////////////////////////////////////////////////////; 714/// Exit the application.; 715 ; 716void TSystem::Exit(int, Bool_t); 717{; 718 AbstractMethod(""Exit"");; 719 throw; // unreachable; 720}; 721 ; 722////////////////////////////////////////////////////////////////////////////////; 723/// Abort the application.; 724 ; 725void TSystem::Abort(int); 726{; 727 AbstractMethod(""Abort"");; 728 throw; // unreachable; 729}; 730 ; 731////////////////////////////////////////////////////////////////////////////////; 732/// Print a stack trace.; 733 ; 734void TSystem::StackTrace(); 735{; 736 AbstractMethod(""StackTrace"");; 737}; 738 ; 739 ; 740//---- Directories -------------------------------------------------------------; 741 ; 742////////////////////////////////////////////////////////////////////////////////; 743/// Create helper TSystem to handle file and directory operations that; 744/// might be special for remote file access.; 745 ; 746TSystem *TSystem::FindHelper(const char *path, void *dirptr); 747{; 748 TSystem *helper = nullptr;; 749 {; 750 R__READ_LOCKGUARD(ROOT::gCoreMutex);; 751 ; 752 if (!fHelpers) {; 753 R__WRITE_LOCKGUARD(ROOT::gCoreMutex);; 754 fHelpers = new TOrdCollection;; 755 }; 756 ; 757 if (path) {; 758 if (!GetDirPtr()) {; 759 TUrl url(path, kTRUE);; 760 if (!strcmp(url.GetProtocol(), ""file"")); 761 return nullptr;; 762 }; 763 }; 764 ; 765 // look for existing helpers; 766 TIter next(fHelpers);; 767 while ((helper = (TSystem*) next())); 768 if (helper->ConsistentWith(path, dirptr)); 769 return helper;; 770 ; 771 if (!path); 772 return nullptr;; 773 }; 774 ; 775 // create new helper; 776 TRegexp re(""^root.*:""); // also roots, rootk, etc; 777 TString pname = path;; 778 TPluginHandler *h;; 779 if (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:22618,access,access,22618,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['access'],['access']
Security,"1"", ""h1 title"", 100, 0, 4.4);; TH2F *h2 = new TH2F(""h2"", ""h2 title"", 40, 0, 4, 30, -3, 3);. Histograms may also be created by:; ; calling the Clone function, see below; making a projection from a 2-D or 3-D histogram, see below; reading an histogram from a file; ; When an histogram is created, a reference to it is automatically added; to the list of in-memory objects for the current file or directory.; This default behaviour can be changed by:. h->SetDirectory(0); for the current histogram h; TH1::AddDirectory(kFALSE); sets a global switch disabling the reference. When the histogram is deleted, the reference to it is removed from; the list of objects in memory.; When a file is closed, all histograms in memory associated with this file; are automatically deleted.; Fix or variable bin size; All histogram types support either fix or variable bin sizes.; 2-D histograms may have fix size bins along X and variable size bins; along Y or vice-versa. The functions to fill, manipulate, draw or access; histograms are identical in both cases.; Each histogram always contains 3 objects TAxis: fXaxis, fYaxis and fZaxis; To access the axis parameters, do:. TAxis *xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc. See class TAxis for a description of all the access functions.; The axis range is always stored internally in double precision.; Convention for numbering bins; For all histogram types: nbins, xlow, xup. bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin. In case of 2-D or 3-D histograms, a ""global bin"" number is defined.; For example, assuming a 3-D histogram with (binx, biny, binz), the function. Int_t gbin = h->GetBin(binx, biny, binz);. returns a global/linearized gbin number. This global gbin is useful; to access the bin content/error information independently of the dimension.; Note that to access the information other than bin content and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:3966,access,access,3966,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,6,['access'],['access']
Security,"1); Add object to the fMap container.; If obj is not 0 add object to the map (in read mode also add 0 objects to; the map). This method may only be called outside this class just before; calling obj->Streamer() to prevent self reference of obj, in case obj; contains (via via) a pointer to itself. In that case offset must be 1; (default value for offset). void SetReadParam(Int_t mapsize); Set the initial size of the map used to store object and class; references during reading. The default size is kMapSize=503.; Increasing the default has the benefit that when reading many; small objects the map does not need to be resized too often; (the system is always dynamic, even with the default everything; will work, only the initial resizing will cost some time).; This method can only be called directly after the creation of; the TBuffer, before any reading is done. Globally this option; can be changed using SetGlobalReadParam(). void SetWriteParam(Int_t mapsize); Set the initial size of the hashtable used to store object and class; references during writing. The default size is kMapSize=503.; Increasing the default has the benefit that when writing many; small objects the hashtable does not get too many collisions; (the system is always dynamic, even with the default everything; will work, only a large number of collisions will cost performance).; For optimal performance hashsize should always be a prime.; This method can only be called directly after the creation of; the TBuffer, before any writing is done. Globally this option; can be changed using SetGlobalWriteParam(). void InitMap(); Create the fMap container and initialize them; with the null object. void ResetMap(); Delete existing fMap and reset map counter. Int_t ReadBuf(void* buf, Int_t max); Read max bytes from the I/O buffer into buf. The function returns; the actual number of bytes read. void WriteBuf(const void* buf, Int_t max); Write max bytes from buf into the I/O buffer. char * ReadString(char* s, Int_t max",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBufferFile.html:39996,hash,hashtable,39996,root/html526/TBufferFile.html,https://root.cern,https://root.cern/root/html526/TBufferFile.html,7,['hash'],['hashtable']
Security,"10() for setting the HTTP GET; request compliant to the authentication mechanism used by the S3; protocol. The GET request must contain an ""Authorization"" header with; the signature of the request, generated using the user's secret access; key. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf). void ProcessHttpHeader(const TString& headerLine); This method is called by the super-class TWebFile when a HTTP header; for this file is retrieved. We scan the 'Server' header to detect the; type of S3 server this file is hosted on and to determine if it is; known to support multi-range HTTP GET requests. Some S3 servers (for; instance Amazon's) do not support that feature and when they; receive a multi-range request they sent back the whole file contents.; For this class, if the server do not support multirange requests; we issue multiple single-range requests instead. Bool_t GetCredentialsFromEnv(const char* accessKeyEnv, const char* secretKeyEnv, TString& outAccessKey, TString& outSecretKey); Sets the access and secret keys from the environmental variables, if; they are both set. TS3WebFile(). void SetAccessKey(const TString& accessKey); Modifiers of data members (to be used mainly by subclasses). { fS3Request.SetAccessKey(accessKey); }. void SetSecretKey(const TString& secretKey); { fS3Request.SetSecretKey(secretKey); }. TS3WebFile(const char* url, Option_t* options = """"); Constructors & Destructor. virtual ~TS3WebFile(); {}. const TString& GetAccessKey() const; Selectors. { return fS3Request.GetAccessKey(); }. const TString& GetSecretKey() const; { return fS3Request.GetSecretKey(); }. const TString& GetBucket() const; { return fS3Request.GetBucket(); }. const TString& GetObjectKey() const; { return fS3Request.GetObjectKey(); }. const TUrl& GetUrl() const; { return fUrl; }. » Author: Fabio Hernandez 22/01/2013 » Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TS3WebFile.h$ » Last generated: 2015-06-02 16:32; This",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TS3WebFile.html:32503,access,accessKeyEnv,32503,root/html604/TS3WebFile.html,https://root.cern,https://root.cern/root/html604/TS3WebFile.html,2,['access'],"['access', 'accessKeyEnv']"
Security,"10() for setting the HTTP GET; request compliant to the authentication mechanism used by the S3; protocol. The GET request must contain an ""Authorization"" header with; the signature of the request, generated using the user's secret access; key. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf). void ProcessHttpHeader(const TString& headerLine); This method is called by the super-class TWebFile when a HTTP header; for this file is retrieved. We scan the 'Server' header to detect the; type of S3 server this file is hosted on and to determine if it is; known to support multi-range HTTP GET requests. Some S3 servers (for; instance Amazon's) do not support that feature and when they; receive a multi-range request they sent back the whole file contents.; For this class, if the server do not support multirange requests; we issue multiple single-range requests instead. Bool_t GetCredentialsFromEnv(const char* accessKeyEnv, const char* secretKeyEnv, TString& outAccessKey, TString& outSecretKey); Sets the access and secret keys from the environmental variables, if; they are both set. TS3WebFile(). void SetAccessKey(const TString& accessKey); Modifiers of data members (to be used mainly by subclasses). { fS3Request.SetAccessKey(accessKey); }. void SetSecretKey(const TString& secretKey); { fS3Request.SetSecretKey(secretKey); }. TS3WebFile(const char* url, Option_t* options = """"); Constructors & Destructor. virtual ~TS3WebFile(); {}. const TString& GetAccessKey() const; Selectors. { return fS3Request.GetAccessKey(); }. const TString& GetSecretKey() const; { return fS3Request.GetSecretKey(); }. const TString& GetBucket() const; { return fS3Request.GetBucket(); }. const TString& GetObjectKey() const; { return fS3Request.GetObjectKey(); }. const TUrl& GetUrl() const; { return fUrl; }. » Author: Fabio Hernandez 22/01/2013 » Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TS3WebFile.h$ » Last generated: 2015-06-30 15:29; This",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TS3WebFile.html:32503,access,accessKeyEnv,32503,root/html602/TS3WebFile.html,https://root.cern,https://root.cern/root/html602/TS3WebFile.html,2,['access'],"['access', 'accessKeyEnv']"
Security,"10() for setting the HTTP GET; request compliant to the authentication mechanism used by the S3; protocol. The GET request must contain an ""Authorization"" header with; the signature of the request, generated using the user's secret access; key. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf). void ProcessHttpHeader(const TString& headerLine); This method is called by the super-class TWebFile when a HTTP header; for this file is retrieved. We scan the 'Server' header to detect the; type of S3 server this file is hosted on and to determine if it is; known to support multi-range HTTP GET requests. Some S3 servers (for; instance Amazon's) do not support that feature and when they; receive a multi-range request they sent back the whole file contents.; For this class, if the server do not support multirange requests; we issue multiple single-range requests instead. Bool_t GetCredentialsFromEnv(const char* accessKeyEnv, const char* secretKeyEnv, TString& outAccessKey, TString& outSecretKey); Sets the access and secret keys from the environmental variables, if; they are both set. TS3WebFile(). void SetAccessKey(const TString& accessKey); Modifiers of data members (to be used mainly by subclasses). { fS3Request.SetAccessKey(accessKey); }. void SetSecretKey(const TString& secretKey); { fS3Request.SetSecretKey(secretKey); }. virtual ~TS3WebFile(); {}. const TString& GetAccessKey() const; Selectors. { return fS3Request.GetAccessKey(); }. const TString& GetSecretKey() const; { return fS3Request.GetSecretKey(); }. const TString& GetBucket() const; { return fS3Request.GetBucket(); }. const TString& GetObjectKey() const; { return fS3Request.GetObjectKey(); }. const TUrl& GetUrl() const; { return fUrl; }. » Author: Fabio Hernandez 22/01/2013 » Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TS3WebFile.h$ » Last generated: 2015-03-14 16:49; This page has been automatically generated. For comments or suggestions regarding th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TS3WebFile.html:31459,access,accessKeyEnv,31459,root/html534/TS3WebFile.html,https://root.cern,https://root.cern/root/html534/TS3WebFile.html,2,['access'],"['access', 'accessKeyEnv']"
Security,"104 TString /*methodOption*/,; 105 TMVA::Types::EMVA /*theComposite*/,; 106 TString /*compositeOption = """"*/ ) { return nullptr; }; 107 ; 108 // optimize all booked methods (well, if desired by the method); 109 std::map<TString,Double_t> OptimizeAllMethods (TString fomType=""ROCIntegral"", TString fitType=""FitGA"");; 110 void OptimizeAllMethodsForClassification(TString fomType=""ROCIntegral"", TString fitType=""FitGA"") { OptimizeAllMethods(fomType,fitType); }; 111 void OptimizeAllMethodsForRegression (TString fomType=""ROCIntegral"", TString fitType=""FitGA"") { OptimizeAllMethods(fomType,fitType); }; 112 ; 113 // training for all booked methods; 114 void TrainAllMethods ();; 115 void TrainAllMethodsForClassification( void ) { TrainAllMethods(); }; 116 void TrainAllMethodsForRegression ( void ) { TrainAllMethods(); }; 117 ; 118 // testing; 119 void TestAllMethods();; 120 ; 121 // performance evaluation; 122 void EvaluateAllMethods( void );; 123 void EvaluateAllVariables(DataLoader *loader, TString options = """" );; 124 ; 125 TH1F* EvaluateImportance( DataLoader *loader,VIType vitype, Types::EMVA theMethod, TString methodTitle, const char *theOption = """" );; 126 ; 127 // delete all methods and reset the method vector; 128 void DeleteAllMethods( void );; 129 ; 130 // accessors; 131 IMethod* GetMethod( const TString& datasetname, const TString& title ) const;; 132 Bool_t HasMethod( const TString& datasetname, const TString& title ) const;; 133 ; 134 Bool_t Verbose( void ) const { return fVerbose; }; 135 void SetVerbose( Bool_t v=kTRUE );; 136 ; 137 // make ROOT-independent C++ class for classifier response; 138 // (classifier-specific implementation); 139 // If no classifier name is given, help messages for all booked; 140 // classifiers are printed; 141 virtual void MakeClass(const TString& datasetname , const TString& methodTitle = """" ) const;; 142 ; 143 // prints classifier-specific help messages, dedicated to; 144 // help with the optimisation and configuration options tuning.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html:5194,access,accessors,5194,doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2Factory_8h_source.html,1,['access'],['accessors']
Security,"1175 }; 1176 }; 1177 }; 1178 if (warn) {; 1179 if (file) {; 1180 Warning(""BuildCheck"", ""\n\; 1181 The StreamerInfo of class %s read from file %s\n\; 1182 has the same version (=%d) as the active class but a different checksum.\n\; 1183 You should update the version to ClassDef(%s,%d).\n\; 1184 Do not try to write objects with the current class definition,\n\; 1185 the files will not be readable.\n"", GetName(), file->GetName(), fClassVersion, GetName(), fClassVersion + 1);; 1186 } else {; 1187 Warning(""BuildCheck"", ""\n\; 1188 The StreamerInfo of class %s \n\; 1189 has the same version (=%d) as the active class but a different checksum.\n\; 1190 You should update the version to ClassDef(%s,%d).\n\; 1191 Do not try to write objects with the current class definition,\n\; 1192 the files will not be readable.\n"", GetName(), fClassVersion, GetName(), fClassVersion + 1);; 1193 }; 1194 CompareContent(fClass,0,kTRUE,kTRUE,file);; 1195 fClass->SetBit(TClass::kWarned);; 1196 }; 1197 } else {; 1198 if (!fClass->IsVersioned()) {; 1199 Fatal(""BuildCheck"", ""\n\; 1200 The StreamerInfo of unversioned class %s \n\; 1201 has the same version (=%d) as the active class but an old checksum.\n\; 1202 This should not happen. An assert will follow.\n"", GetName(), fClassVersion);; 1203 }; 1204 }; 1205 }; 1206 if (!fClass->IsLoaded() && this->fOnFileClassVersion>1); 1207 {; 1208 ROOT::ResetClassVersion(fClass,(const char*)-1, this->fClassVersion);; 1209 }; 1210 }; 1211 // FIXME: This code can never execute because Build() calls; 1212 // TStreamerElement::Class()->IgnoreTObjectStreamer(); 1213 // so our bits are never saved to the file.; 1214 if (TestBit(kIgnoreTObjectStreamer)) {; 1215 fClass->IgnoreTObjectStreamer();; 1216 }; 1217 if ((fClassVersion < -1) || (fClassVersion > 65000)) {; 1218 printf(""ERROR reading TStreamerInfo: %s fClassVersion=%d\n"", GetName(), fClassVersion);; 1219 SetBit(kCanDelete);; 1220 fNumber = -1;; 1221 return;; 1222 }; 1223 ; 1224 if (!fClass->TestBit(TClass::kWarned",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:45954,checksum,checksum,45954,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['checksum'],['checksum']
Security,"12{; 1913 if (!filename || !filename[0]) {; 1914 ::Error(""TClass::ReadRules"", ""no file name specified"");; 1915 return -1;; 1916 }; 1917 ; 1918 FILE * f = fopen(filename,""r"");; 1919 if (f == nullptr) {; 1920 ::Error(""TClass::ReadRules"",""Failed to open %s\n"",filename);; 1921 return -1;; 1922 }; 1923 Int_t count = ReadRulesContent(f);; 1924 ; 1925 fclose(f);; 1926 return count;; 1927 ; 1928}; 1929 ; 1930////////////////////////////////////////////////////////////////////////////////; 1931/// Add a schema evolution customization rule.; 1932/// The syntax of the rule can be either the short form:; 1933/// ~~~ {.cpp}; 1934/// [type=Read] classname membername [attributes=... ] [version=[...] ] [checksum=[...] ] [oldtype=...] [code={...}]; 1935/// ~~~; 1936/// or the long form; 1937/// ~~~ {.cpp}; 1938/// [type=Read] sourceClass=classname [targetclass=newClassname] [ source=""type membername; [type2 membername2]"" ]; 1939/// [target=""membername3;membername4""] [attributes=... ] [version=...] [checksum=...] [code={...}|functionname]; 1940/// ~~~; 1941///; 1942/// For example to set HepMC::GenVertex::m_event to _not_ owned the object it is pointing to:; 1943/// HepMC::GenVertex m_event attributes=NotOwner; 1944///; 1945/// Semantic of the tags:; 1946/// - type : the type of the rule, valid values: Read, ReadRaw, Write, WriteRaw, the default is 'Read'.; 1947/// - sourceClass : the name of the class as it is on the rule file; 1948/// - targetClass : the name of the class as it is in the current code ; defaults to the value of sourceClass; 1949/// - source : the types and names of the data members from the class on file that are needed, the list is separated by semi-colons ';'; 1950/// - oldtype: in the short form only, indicates the type on disk of the data member.; 1951/// - target : the names of the data members updated by this rule, the list is separated by semi-colons ';'; 1952/// - attributes : list of possible qualifiers among: Owner, NotOwner; 1953/// - version : list of the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:72837,checksum,checksum,72837,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['checksum'],['checksum']
Security,"1389 (void *)proc,; 11390 NULL);; 11391 }; 11392#endif; 11393 ; 11394 /* Parent closes only one side of the pipes.; 11395 * If we don't mark them as closed, close() attempt before; 11396 * return from this function throws an exception on Windows.; 11397 * Windows does not like when closed descriptor is closed again. */; 11398 (void)close(fdin[0]);; 11399 (void)close(fdout[1]);; 11400 (void)close(fderr[1]);; 11401 fdin[0] = fdout[1] = fderr[1] = -1;; 11402 ; 11403 if (((in = fdopen(fdin[1], ""wb"")) == NULL); 11404 || ((out = fdopen(fdout[0], ""rb"")) == NULL); 11405 || ((err = fdopen(fderr[0], ""rb"")) == NULL)) {; 11406 status = strerror(ERRNO);; 11407 mg_cry_internal(conn,; 11408 ""Error: CGI program \""%s\"": Can not open fd: %s"",; 11409 prog,; 11410 status);; 11411 mg_send_http_error(conn,; 11412 500,; 11413 ""Error: CGI can not open fd\nfdopen: %s"",; 11414 status);; 11415 goto done;; 11416 }; 11417 ; 11418 setbuf(in, NULL);; 11419 setbuf(out, NULL);; 11420 setbuf(err, NULL);; 11421 fout.access.fp = out;; 11422 ; 11423 if ((conn->content_len != 0) || (conn->is_chunked)) {; 11424 DEBUG_TRACE(""CGI: send body data (%"" INT64_FMT "")\n"",; 11425 conn->content_len);; 11426 ; 11427 /* This is a POST/PUT request, or another request with body data. */; 11428 if (!forward_body_data(conn, in, INVALID_SOCKET, NULL)) {; 11429 /* Error sending the body data */; 11430 mg_cry_internal(; 11431 conn,; 11432 ""Error: CGI program \""%s\"": Forward body data failed"",; 11433 prog);; 11434 goto done;; 11435 }; 11436 }; 11437 ; 11438 /* Close so child gets an EOF. */; 11439 fclose(in);; 11440 in = NULL;; 11441 fdin[1] = -1;; 11442 ; 11443 /* Now read CGI reply into a buffer. We need to set correct; 11444 * status code, thus we need to see all HTTP headers first.; 11445 * Do not send anything back to client, until we buffer in all; 11446 * HTTP headers. */; 11447 data_len = 0;; 11448 buf = (char *)mg_malloc_ctx(buflen, conn->phys_ctx);; 11449 if (buf == NULL) {; 11450 mg_send_http_error(conn,; 11451 50",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:330356,access,access,330356,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['access'],['access']
Security,"1390 (void *)proc,; 11391 NULL);; 11392 }; 11393#endif; 11394 ; 11395 /* Parent closes only one side of the pipes.; 11396 * If we don't mark them as closed, close() attempt before; 11397 * return from this function throws an exception on Windows.; 11398 * Windows does not like when closed descriptor is closed again. */; 11399 (void)close(fdin[0]);; 11400 (void)close(fdout[1]);; 11401 (void)close(fderr[1]);; 11402 fdin[0] = fdout[1] = fderr[1] = -1;; 11403 ; 11404 if (((in = fdopen(fdin[1], ""wb"")) == NULL); 11405 || ((out = fdopen(fdout[0], ""rb"")) == NULL); 11406 || ((err = fdopen(fderr[0], ""rb"")) == NULL)) {; 11407 status = strerror(ERRNO);; 11408 mg_cry_internal(conn,; 11409 ""Error: CGI program \""%s\"": Can not open fd: %s"",; 11410 prog,; 11411 status);; 11412 mg_send_http_error(conn,; 11413 500,; 11414 ""Error: CGI can not open fd\nfdopen: %s"",; 11415 status);; 11416 goto done;; 11417 }; 11418 ; 11419 setbuf(in, NULL);; 11420 setbuf(out, NULL);; 11421 setbuf(err, NULL);; 11422 fout.access.fp = out;; 11423 ; 11424 if ((conn->content_len != 0) || (conn->is_chunked)) {; 11425 DEBUG_TRACE(""CGI: send body data (%"" INT64_FMT "")\n"",; 11426 conn->content_len);; 11427 ; 11428 /* This is a POST/PUT request, or another request with body data. */; 11429 if (!forward_body_data(conn, in, INVALID_SOCKET, NULL)) {; 11430 /* Error sending the body data */; 11431 mg_cry_internal(; 11432 conn,; 11433 ""Error: CGI program \""%s\"": Forward body data failed"",; 11434 prog);; 11435 goto done;; 11436 }; 11437 }; 11438 ; 11439 /* Close so child gets an EOF. */; 11440 fclose(in);; 11441 in = NULL;; 11442 fdin[1] = -1;; 11443 ; 11444 /* Now read CGI reply into a buffer. We need to set correct; 11445 * status code, thus we need to see all HTTP headers first.; 11446 * Do not send anything back to client, until we buffer in all; 11447 * HTTP headers. */; 11448 data_len = 0;; 11449 buf = (char *)mg_malloc_ctx(buflen, conn->phys_ctx);; 11450 if (buf == NULL) {; 11451 mg_send_http_error(conn,; 11452 50",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:330389,access,access,330389,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['access'],['access']
Security,"1395 }; 1396 ; 1397 if (lookupSICache) {; 1398 // key data must be excluded from the hash, otherwise the timestamp will; 1399 // always lead to unique hashes for each file; 1400 hash = fgTsSIHashes.Hash(buf + key->GetKeylen(), fNbytesInfo - key->GetKeylen());; 1401 auto si_uids = fgTsSIHashes.Find(hash);; 1402 if (si_uids) {; 1403 if (gDebug > 0); 1404 Info(""GetStreamerInfo"", ""The streamer info record for file %s has already been treated, skipping it."", GetName());; 1405 for(auto uid : *si_uids); 1406 fClassIndex->fArray[uid] = 1;; 1407 return {nullptr, 0, hash};; 1408 }; 1409 }; 1410 key->ReadKeyBuffer(buf);; 1411 list = dynamic_cast<TList*>(key->ReadObjWithBuffer(buffer.data()));; 1412 if (list) list->SetOwner();; 1413 } else {; 1414 list = (TList*)Get(""StreamerInfo""); //for versions 2.26 (never released); 1415 }; 1416 ; 1417 if (!list) {; 1418 Info(""GetStreamerInfoList"", ""cannot find the StreamerInfo record in file %s"",; 1419 GetName());; 1420 return {nullptr, 1, hash};; 1421 }; 1422 ; 1423 return {list, 0, hash};; 1424}; 1425 ; 1426////////////////////////////////////////////////////////////////////////////////; 1427/// Read the list of TStreamerInfo objects written to this file.; 1428///; 1429/// The function returns a TList. It is the user's responsibility; 1430/// to delete the list created by this function.; 1431///; 1432/// Note the list, in addition to TStreamerInfo object, contains sometimes; 1433/// a TList named 'listOfRules' and containing the schema evolution rules; 1434/// related to the file's content.; 1435///; 1436/// Using the list, one can access additional information, e.g.:; 1437/// ~~~{.cpp}; 1438/// TFile f(""myfile.root"");; 1439/// auto list = f.GetStreamerInfoList();; 1440/// auto info = dynamic_cast<TStreamerInfo*>(list->FindObject(""MyClass""));; 1441/// if (info) auto classversionid = info->GetClassVersion();; 1442/// delete list;; 1443/// ~~~; 1444///; 1445 ; 1446TList *TFile::GetStreamerInfoList(); 1447{; 1448 return GetStreamerInfoListIm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:50741,hash,hash,50741,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,2,['hash'],['hash']
Security,"14087 * ri->local_uri_raw still points to memory allocated in; 14088 * worker_thread_run(). ri->local_uri is private to the request so we; 14089 * don't have to use preallocated memory here. */; 14090 tmp = mg_strdup(ri->local_uri_raw);; 14091 if (!tmp) {; 14092 /* Out of memory. We cannot do anything reasonable here. */; 14093 return;; 14094 }; 14095 remove_dot_segments(tmp);; 14096 ri->local_uri = tmp;; 14097 ; 14098 /* step 1. completed, the url is known now */; 14099 DEBUG_TRACE(""URL: %s"", ri->local_uri);; 14100 ; 14101 /* 2. if this ip has limited speed, set it for this connection */; 14102 conn->throttle = set_throttle(conn->dom_ctx->config[THROTTLE],; 14103 &conn->client.rsa,; 14104 ri->local_uri);; 14105 ; 14106 /* 3. call a ""handle everything"" callback, if registered */; 14107 if (conn->phys_ctx->callbacks.begin_request != NULL) {; 14108 /* Note that since V1.7 the ""begin_request"" function is called; 14109 * before an authorization check. If an authorization check is; 14110 * required, use a request_handler instead. */; 14111 i = conn->phys_ctx->callbacks.begin_request(conn);; 14112 if (i > 0) {; 14113 /* callback already processed the request. Store the; 14114 return value as a status code for the access log. */; 14115 conn->status_code = i;; 14116 if (!conn->must_close) {; 14117 discard_unread_request_data(conn);; 14118 }; 14119 return;; 14120 } else if (i == 0) {; 14121 /* civetweb should process the request */; 14122 } else {; 14123 /* unspecified - may change with the next version */; 14124 return;; 14125 }; 14126 }; 14127 ; 14128 /* request not yet handled by a handler or redirect, so the request; 14129 * is processed here */; 14130 ; 14131 /* 4. Check for CORS preflight requests and handle them (if configured).; 14132 * https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS; 14133 */; 14134 if (!strcmp(ri->request_method, ""OPTIONS"")) {; 14135 /* Send a response to CORS preflights only if; 14136 * access_control_allow_methods is not NULL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:413988,authoriz,authorization,413988,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['authoriz'],['authorization']
Security,"14088 * ri->local_uri_raw still points to memory allocated in; 14089 * worker_thread_run(). ri->local_uri is private to the request so we; 14090 * don't have to use preallocated memory here. */; 14091 tmp = mg_strdup(ri->local_uri_raw);; 14092 if (!tmp) {; 14093 /* Out of memory. We cannot do anything reasonable here. */; 14094 return;; 14095 }; 14096 remove_dot_segments(tmp);; 14097 ri->local_uri = tmp;; 14098 ; 14099 /* step 1. completed, the url is known now */; 14100 DEBUG_TRACE(""URL: %s"", ri->local_uri);; 14101 ; 14102 /* 2. if this ip has limited speed, set it for this connection */; 14103 conn->throttle = set_throttle(conn->dom_ctx->config[THROTTLE],; 14104 &conn->client.rsa,; 14105 ri->local_uri);; 14106 ; 14107 /* 3. call a ""handle everything"" callback, if registered */; 14108 if (conn->phys_ctx->callbacks.begin_request != NULL) {; 14109 /* Note that since V1.7 the ""begin_request"" function is called; 14110 * before an authorization check. If an authorization check is; 14111 * required, use a request_handler instead. */; 14112 i = conn->phys_ctx->callbacks.begin_request(conn);; 14113 if (i > 0) {; 14114 /* callback already processed the request. Store the; 14115 return value as a status code for the access log. */; 14116 conn->status_code = i;; 14117 if (!conn->must_close) {; 14118 discard_unread_request_data(conn);; 14119 }; 14120 return;; 14121 } else if (i == 0) {; 14122 /* civetweb should process the request */; 14123 } else {; 14124 /* unspecified - may change with the next version */; 14125 return;; 14126 }; 14127 }; 14128 ; 14129 /* request not yet handled by a handler or redirect, so the request; 14130 * is processed here */; 14131 ; 14132 /* 4. Check for CORS preflight requests and handle them (if configured).; 14133 * https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS; 14134 */; 14135 if (!strcmp(ri->request_method, ""OPTIONS"")) {; 14136 /* Send a response to CORS preflights only if; 14137 * access_control_allow_methods is not NULL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:414021,authoriz,authorization,414021,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['authoriz'],['authorization']
Security,"151 *begin = fAngle;; 152 }; 153 ; 154 /**; 155 Set components from a non-zero vector (x,y,z) and an angle.; 156 Precondition: the Vector needs to implement x(), y(), z(), and unit(); 157 */; 158 template<class AnyVector>; 159 void SetComponents(const AnyVector & v, Scalar angle) {; 160 fAxis=v.unit();; 161 fAngle=angle;; 162 }; 163 ; 164 /**; 165 Set components into a non-zero vector (x,y,z) and an angle.; 166 The vector is intended to be a cartesian displacement vector; 167 but any vector class assignable from one will work.; 168 */; 169 template<class AnyVector>; 170 void GetComponents(AnyVector & axis, Scalar & angle) const {; 171 axis = fAxis;; 172 angle = fAngle;; 173 }; 174 ; 175 /**; 176 access to rotation axis; 177 */; 178 AxisVector Axis() const { return fAxis; }; 179 ; 180 /**; 181 access to rotation angle; 182 */; 183 Scalar Angle() const { return fAngle; }; 184 ; 185 // =========== operations ==============; 186 ; 187 /**; 188 Rotation operation on a cartesian vector; 189 */; 190 typedef DisplacementVector3D<Cartesian3D<double>, DefaultCoordinateSystemTag > XYZVector;; 191 XYZVector operator() (const XYZVector & v) const;; 192 ; 193 /**; 194 Rotation operation on a displacement vector in any coordinate system; 195 */; 196 template <class CoordSystem, class Tag>; 197 DisplacementVector3D<CoordSystem, Tag>; 198 operator() (const DisplacementVector3D<CoordSystem, Tag> & v) const {; 199 DisplacementVector3D< Cartesian3D<double> > xyz(v.X(), v.Y(), v.Z());; 200 DisplacementVector3D< Cartesian3D<double> > rxyz = operator()(xyz);; 201 DisplacementVector3D< CoordSystem, Tag > vNew;; 202 vNew.SetXYZ( rxyz.X(), rxyz.Y(), rxyz.Z() );; 203 return vNew;; 204 }; 205 ; 206 /**; 207 Rotation operation on a position vector in any coordinate system; 208 */; 209 template <class CoordSystem, class Tag>; 210 PositionVector3D<CoordSystem, Tag>; 211 operator() (const PositionVector3D<CoordSystem,Tag> & p) const {; 212 DisplacementVector3D< Cartesian3D<double>,Tag > xyz(p);; 21",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2AxisAngle_8h_source.html:5602,access,access,5602,doc/master/GenVector_2AxisAngle_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2AxisAngle_8h_source.html,2,['access'],['access']
Security,"16161 __func__,; 16162 pem,; 16163 ssl_error());; 16164 return 0;; 16165 }; 16166 ; 16167 /* could use SSL_CTX_set_default_passwd_cb_userdata */; 16168 if (SSL_CTX_use_PrivateKey_file(dom_ctx->ssl_ctx, pem, 1) == 0) {; 16169 mg_cry_ctx_internal(phys_ctx,; 16170 ""%s: cannot open private key file %s: %s"",; 16171 __func__,; 16172 pem,; 16173 ssl_error());; 16174 return 0;; 16175 }; 16176 ; 16177 if (SSL_CTX_check_private_key(dom_ctx->ssl_ctx) == 0) {; 16178 mg_cry_ctx_internal(phys_ctx,; 16179 ""%s: certificate and private key do not match: %s"",; 16180 __func__,; 16181 pem);; 16182 return 0;; 16183 }; 16184 ; 16185 /* In contrast to OpenSSL, wolfSSL does not support certificate; 16186 * chain files that contain private keys and certificates in; 16187 * SSL_CTX_use_certificate_chain_file.; 16188 * The CivetWeb-Server used pem-Files that contained both information.; 16189 * In order to make wolfSSL work, it is split in two files.; 16190 * One file that contains key and certificate used by the server and; 16191 * an optional chain file for the ssl stack.; 16192 */; 16193 if (chain) {; 16194 if (SSL_CTX_use_certificate_chain_file(dom_ctx->ssl_ctx, chain) == 0) {; 16195 mg_cry_ctx_internal(phys_ctx,; 16196 ""%s: cannot use certificate chain file %s: %s"",; 16197 __func__,; 16198 chain,; 16199 ssl_error());; 16200 return 0;; 16201 }; 16202 }; 16203 return 1;; 16204}; 16205 ; 16206 ; 16207#if defined(OPENSSL_API_1_1); 16208static unsigned long; 16209ssl_get_protocol(int version_id); 16210{; 16211 long unsigned ret = (long unsigned)SSL_OP_ALL;; 16212 if (version_id > 0); 16213 ret |= SSL_OP_NO_SSLv2;; 16214 if (version_id > 1); 16215 ret |= SSL_OP_NO_SSLv3;; 16216 if (version_id > 2); 16217 ret |= SSL_OP_NO_TLSv1;; 16218 if (version_id > 3); 16219 ret |= SSL_OP_NO_TLSv1_1;; 16220 if (version_id > 4); 16221 ret |= SSL_OP_NO_TLSv1_2;; 16222#if defined(SSL_OP_NO_TLSv1_3); 16223 if (version_id > 5); 16224 ret |= SSL_OP_NO_TLSv1_3;; 16225#endif; 16226 return ret;; 16227}; 16228#else; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:478146,certificate,certificate,478146,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['certificate'],['certificate']
Security,"16162 __func__,; 16163 pem,; 16164 ssl_error());; 16165 return 0;; 16166 }; 16167 ; 16168 /* could use SSL_CTX_set_default_passwd_cb_userdata */; 16169 if (SSL_CTX_use_PrivateKey_file(dom_ctx->ssl_ctx, pem, 1) == 0) {; 16170 mg_cry_ctx_internal(phys_ctx,; 16171 ""%s: cannot open private key file %s: %s"",; 16172 __func__,; 16173 pem,; 16174 ssl_error());; 16175 return 0;; 16176 }; 16177 ; 16178 if (SSL_CTX_check_private_key(dom_ctx->ssl_ctx) == 0) {; 16179 mg_cry_ctx_internal(phys_ctx,; 16180 ""%s: certificate and private key do not match: %s"",; 16181 __func__,; 16182 pem);; 16183 return 0;; 16184 }; 16185 ; 16186 /* In contrast to OpenSSL, wolfSSL does not support certificate; 16187 * chain files that contain private keys and certificates in; 16188 * SSL_CTX_use_certificate_chain_file.; 16189 * The CivetWeb-Server used pem-Files that contained both information.; 16190 * In order to make wolfSSL work, it is split in two files.; 16191 * One file that contains key and certificate used by the server and; 16192 * an optional chain file for the ssl stack.; 16193 */; 16194 if (chain) {; 16195 if (SSL_CTX_use_certificate_chain_file(dom_ctx->ssl_ctx, chain) == 0) {; 16196 mg_cry_ctx_internal(phys_ctx,; 16197 ""%s: cannot use certificate chain file %s: %s"",; 16198 __func__,; 16199 chain,; 16200 ssl_error());; 16201 return 0;; 16202 }; 16203 }; 16204 return 1;; 16205}; 16206 ; 16207 ; 16208#if defined(OPENSSL_API_1_1); 16209static unsigned long; 16210ssl_get_protocol(int version_id); 16211{; 16212 long unsigned ret = (long unsigned)SSL_OP_ALL;; 16213 if (version_id > 0); 16214 ret |= SSL_OP_NO_SSLv2;; 16215 if (version_id > 1); 16216 ret |= SSL_OP_NO_SSLv3;; 16217 if (version_id > 2); 16218 ret |= SSL_OP_NO_TLSv1;; 16219 if (version_id > 3); 16220 ret |= SSL_OP_NO_TLSv1_1;; 16221 if (version_id > 4); 16222 ret |= SSL_OP_NO_TLSv1_2;; 16223#if defined(SSL_OP_NO_TLSv1_3); 16224 if (version_id > 5); 16225 ret |= SSL_OP_NO_TLSv1_3;; 16226#endif; 16227 return ret;; 16228}; 16229#else; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:478179,certificate,certificate,478179,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['certificate'],['certificate']
Security,"17.4.1 Declaration; TLorentzVector has been implemented as a set a TVector3 and a Double_t variable. By default, all components are initialized by zero.; TLorentzVector v1; // initialized by (0.,0.,0.,0.); TLorentzVector v2(1.,1.,1.,1.);; TLorentzVector v3(v1);; TLorentzVector v4(TVector3(1.,2.,3.),4.);; For backward compatibility there are two constructors from a Double_t and Float_t array.; 17.4.2 Access to Components; There are two sets of access functions to the components of a TLorentzVector: X(), Y(), Z(), T() and Px(), Py(), Pz() and E(). Both sets return the same values but the first set is more relevant for use where TLorentzVector describes a combination of position and time and the second set is more relevant where TLorentzVector describes momentum and energy:; Double_t xx =v.X();; ...; Double_t tt = v.T();; Double_t px = v.Px();; ...; Double_t ee = v.E();; The components of TLorentzVector can also accessed by index:; xx = v(0);orxx = v[0];; yy = v(1);yy = v[1];; zz = v(2);zz = v[2];; tt = v(3);tt = v[3];; You can use the Vect() method to get the vector component of TLorentzVector:; TVector3 p = v.Vect();; For setting components there are two methods: SetX(),.., SetPx(),..:; v.SetX(1.); orv.SetPx(1.);; ......; v.SetT(1.);v.SetE(1.);; To set more the one component by one call you can use the SetVect() function for the TVector3 part or SetXYZT(), SetPxPyPzE(). For convenience there is also a SetXYZM():; v.SetVect(TVector3(1,2,3));; v.SetXYZT(x,y,z,t);; v.SetPxPyPzE(px,py,pz,e);; v.SetXYZM(x,y,z,m); // v = (x,y,z,e = Sqrt(x*x+y*y+z*z+m*m)); 17.4.3 Vector Components in Non-Cartesian Coordinates; There are a couple of methods to get and set the TVector3 part of the parameters in spherical coordinate systems:; Double_t m, theta, cost, phi, pp, pp2, ppv2, pp2v2;; m = v.Rho();; t = v.Theta();; cost = v.CosTheta();; phi = v.Phi();; v.SetRho(10.);; v.SetTheta(TMath::Pi()*.3);; v.SetPhi(TMath::Pi());; or get information about the r-coordinate in cylindrical systems:;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:867321,access,accessed,867321,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['access'],['accessed']
Security,"177 } else {; 3178 // __attribute__((used)) extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret); 3179 // {; 3180 // ((void (&)(double*, double*, double*))TFormula____id_grad_1)(*(double**)args[0],; 3181 // *(double**)args[1],; 3182 // *(double**)args[2]);; 3183 // return;; 3184 // }; 3185 args[1] = &pars;; 3186 args[2] = &result;; 3187 (*FuncPtr)(nullptr, 3, args, /*ret*/nullptr); // We do not use ret in a return-void func.; 3188 }; 3189}; 3190 ; 3191/// returns true on success.; 3192bool TFormula::GenerateGradientPar() {; 3193 // We already have generated the gradient.; 3194 if (fGradFuncPtr); 3195 return true;; 3196 ; 3197 if (HasGradientGenerationFailed()); 3198 return false;; 3199 ; 3200 IncludeCladRuntime(fIsCladRuntimeIncluded);; 3201 ; 3202 // Check if the gradient request was made as part of another TFormula.; 3203 // This can happen when we create multiple TFormula objects with the same; 3204 // formula. In that case, the hasher will give identical id and we can; 3205 // reuse the already generated gradient function.; 3206 if (!functionExists(GetGradientFuncName())) {; 3207 std::string GradientCall; 3208 (""clad::gradient("" + std::string(fClingName.Data()) + "", \""p\"");"");; 3209 if (!DeclareGenerationInput(GetGradientFuncName(),; 3210 GradientCall,; 3211 fGradGenerationInput)); 3212 return false;; 3213 }; 3214 ; 3215 fGradFuncPtr = GetFuncPtr(GetGradientFuncName(), fNpar, fNdim, fVectorized);; 3216 return true;; 3217}; 3218 ; 3219// Compute the gradient with respect to the parameter passing; 3220/// a CladStorageObject, i.e. a std::vector, which has the size as the nnumber of parameters.; 3221/// Note that the result buffer needs to be initialized to zero before passing it to this function.; 3222void TFormula::GradientPar(const Double_t *x, TFormula::CladStorage& result); 3223{; 3224 if (DoEval(x) == TMath::QuietNaN()); 3225 return;; 3226 ; 3227 if (!fClingInitialized) {; 3228 Error(""GradientPar"", ""Could not initialize the formula!"");; 3229 re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:121950,hash,hasher,121950,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,1,['hash'],['hasher']
Security,"1898 file_name[511] = 0;; 11899 (void)mg_snprintf(conn, &truncated, path, sizeof(path), ""%s"", ssi);; 11900 ; 11901 if (!truncated) {; 11902 if ((p = strrchr(path, '/')) != NULL) {; 11903 p[1] = '\0';; 11904 }; 11905 len = strlen(path);; 11906 (void)mg_snprintf(conn,; 11907 &truncated,; 11908 path + len,; 11909 sizeof(path) - len,; 11910 ""%s"",; 11911 file_name);; 11912 }; 11913 ; 11914 } else {; 11915 mg_cry_internal(conn, ""Bad SSI #include: [%s]"", tag);; 11916 return;; 11917 }; 11918 ; 11919 if (truncated) {; 11920 mg_cry_internal(conn, ""SSI #include path length overflow: [%s]"", tag);; 11921 return;; 11922 }; 11923 ; 11924 if (!mg_fopen(conn, path, MG_FOPEN_MODE_READ, &file)) {; 11925 mg_cry_internal(conn,; 11926 ""Cannot open SSI #include: [%s]: fopen(%s): %s"",; 11927 tag,; 11928 path,; 11929 strerror(ERRNO));; 11930 } else {; 11931 fclose_on_exec(&file.access, conn);; 11932 if (match_prefix_strlen(conn->dom_ctx->config[SSI_EXTENSIONS], path); 11933 > 0) {; 11934 send_ssi_file(conn, path, &file, include_level + 1);; 11935 } else {; 11936 send_file_data(conn, &file, 0, INT64_MAX);; 11937 }; 11938 (void)mg_fclose(&file.access); /* Ignore errors for readonly files */; 11939 }; 11940}; 11941 ; 11942 ; 11943#if !defined(NO_POPEN); 11944static void; 11945do_ssi_exec(struct mg_connection *conn, char *tag); 11946{; 11947 char cmd[1024] = """";; 11948 struct mg_file file = STRUCT_FILE_INITIALIZER;; 11949 ; 11950 if (sscanf(tag, "" \""%1023[^\""]\"""", cmd) != 1) {; 11951 mg_cry_internal(conn, ""Bad SSI #exec: [%s]"", tag);; 11952 } else {; 11953 cmd[1023] = 0;; 11954 if ((file.access.fp = popen(cmd, ""r"")) == NULL) {; 11955 mg_cry_internal(conn,; 11956 ""Cannot SSI #exec: [%s]: %s"",; 11957 cmd,; 11958 strerror(ERRNO));; 11959 } else {; 11960 send_file_data(conn, &file, 0, INT64_MAX);; 11961 pclose(file.access.fp);; 11962 }; 11963 }; 11964}; 11965#endif /* !NO_POPEN */; 11966 ; 11967 ; 11968static int; 11969mg_fgetc(struct mg_file *filep); 11970{; 11971 if (filep == NULL) {; 11972 return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:345533,access,access,345533,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['access'],['access']
Security,"1899 file_name[511] = 0;; 11900 (void)mg_snprintf(conn, &truncated, path, sizeof(path), ""%s"", ssi);; 11901 ; 11902 if (!truncated) {; 11903 if ((p = strrchr(path, '/')) != NULL) {; 11904 p[1] = '\0';; 11905 }; 11906 len = strlen(path);; 11907 (void)mg_snprintf(conn,; 11908 &truncated,; 11909 path + len,; 11910 sizeof(path) - len,; 11911 ""%s"",; 11912 file_name);; 11913 }; 11914 ; 11915 } else {; 11916 mg_cry_internal(conn, ""Bad SSI #include: [%s]"", tag);; 11917 return;; 11918 }; 11919 ; 11920 if (truncated) {; 11921 mg_cry_internal(conn, ""SSI #include path length overflow: [%s]"", tag);; 11922 return;; 11923 }; 11924 ; 11925 if (!mg_fopen(conn, path, MG_FOPEN_MODE_READ, &file)) {; 11926 mg_cry_internal(conn,; 11927 ""Cannot open SSI #include: [%s]: fopen(%s): %s"",; 11928 tag,; 11929 path,; 11930 strerror(ERRNO));; 11931 } else {; 11932 fclose_on_exec(&file.access, conn);; 11933 if (match_prefix_strlen(conn->dom_ctx->config[SSI_EXTENSIONS], path); 11934 > 0) {; 11935 send_ssi_file(conn, path, &file, include_level + 1);; 11936 } else {; 11937 send_file_data(conn, &file, 0, INT64_MAX);; 11938 }; 11939 (void)mg_fclose(&file.access); /* Ignore errors for readonly files */; 11940 }; 11941}; 11942 ; 11943 ; 11944#if !defined(NO_POPEN); 11945static void; 11946do_ssi_exec(struct mg_connection *conn, char *tag); 11947{; 11948 char cmd[1024] = """";; 11949 struct mg_file file = STRUCT_FILE_INITIALIZER;; 11950 ; 11951 if (sscanf(tag, "" \""%1023[^\""]\"""", cmd) != 1) {; 11952 mg_cry_internal(conn, ""Bad SSI #exec: [%s]"", tag);; 11953 } else {; 11954 cmd[1023] = 0;; 11955 if ((file.access.fp = popen(cmd, ""r"")) == NULL) {; 11956 mg_cry_internal(conn,; 11957 ""Cannot SSI #exec: [%s]: %s"",; 11958 cmd,; 11959 strerror(ERRNO));; 11960 } else {; 11961 send_file_data(conn, &file, 0, INT64_MAX);; 11962 pclose(file.access.fp);; 11963 }; 11964 }; 11965}; 11966#endif /* !NO_POPEN */; 11967 ; 11968 ; 11969static int; 11970mg_fgetc(struct mg_file *filep); 11971{; 11972 if (filep == NULL) {; 11973 return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:345566,access,access,345566,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['access'],['access']
Security,"1::GetYaxisTAxis * GetYaxis()Definition TH1.h:325; TH1::SetMinimumvirtual void SetMinimum(Double_t minimum=-1111)Definition TH1.h:405; TH1::kNstat@ kNstatSize of statistics data (up to TProfile3D)Definition TH1.h:184; TH1::GetMinimumvirtual Double_t GetMinimum(Double_t minval=-FLT_MAX) constReturn minimum value larger than minval of bins in the range, unless the value has been overridden by...Definition TH1.cxx:8635; THLimitsFinder::Optimizestatic void Optimize(Double_t A1, Double_t A2, Int_t nold, Double_t &BinLow, Double_t &BinHigh, Int_t &nbins, Double_t &BWID, Option_t *option="""")Static function to compute reasonable axis limits.Definition THLimitsFinder.cxx:184; THashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject...Definition THashList.h:34; THashList::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the list AND delete all heap based objects.Definition THashList.cxx:207; THashList::Rehashvoid Rehash(Int_t newCapacity)Rehash the hashlist.Definition THashList.cxx:368; THashList::FindObjectTObject * FindObject(const char *name) const overrideFind object using its name.Definition THashList.cxx:262; TIterDefinition TCollection.h:235; TListA doubly linked list.Definition TList.h:38; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TList::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the list AND delete all heap based objects.Definition TList.cxx:468; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::Copyvoid Copy(TObject &named) const overrideCopy this to obj.Definition TNamed.cxx:94; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::Streamervoid Streamer(TBuffer &) overrideStream an object of class TObject.; TObjStringCollectable",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAxis_8cxx_source.html:63703,hash,hashlist,63703,doc/master/TAxis_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAxis_8cxx_source.html,1,['hash'],['hashlist']
Security,"1_1RNTuple.html), and it can be extended to custom data formats. From Python, [NumPy arrays can be imported into RDataFrame](https://root.cern/doc/master/df032__MakeNumpyDataFrame_8py.html) as well.; 177 ; 1782. Transform the dataframe by:; 179 ; 180 - [Applying filters](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#transformations). This selects only specific rows of the dataset.; 181 ; 182 - [Creating custom columns](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#transformations). Custom columns can, for example, contain the results of a computation that must be performed for every row of the dataset.; 183 ; 1843. [Produce results](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#actions). *Actions* are used to aggregate data into results. Most actions are *lazy*, i.e. they are not executed on the spot, but registered with RDataFrame and executed only when a result is accessed for the first time.; 185 ; 186Make sure to book all transformations and actions before you access the contents of any of the results. This lets RDataFrame accumulate work and then produce all results at the same time, upon first access to any of them.; 187 ; 188The following table shows how analyses based on TTreeReader and TTree::Draw() translate to RDataFrame. Follow the; 189[crash course](#crash-course) to discover more idiomatic and flexible ways to express analyses with RDataFrame.; 190<table>; 191<tr>; 192 <td>; 193 <b>TTreeReader</b>; 194 </td>; 195 <td>; 196 <b>ROOT::RDataFrame</b>; 197 </td>; 198</tr>; 199<tr>; 200 <td>; 201~~~{.cpp}; 202TTreeReader reader(""myTree"", file);; 203TTreeReaderValue<A_t> a(reader, ""A"");; 204TTreeReaderValue<B_t> b(reader, ""B"");; 205TTreeReaderValue<C_t> c(reader, ""C"");; 206while(reader.Next()) {; 207 if(IsGoodEvent(*a, *b, *c)); 208 DoStuff(*a, *b, *c);; 209}; 210~~~; 211 </td>; 212 <td>; 213~~~{.cpp}; 214ROOT::RDataFrame d(""myTree"", file, {""A"", ""B"", ""C""});; 215d.Filter(IsGoodEvent).Foreach(DoStuff);; 216~~~; 217 </td>; 218",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:14603,access,access,14603,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['access'],['access']
Security,"1_1RNTuple.html), and it can be extended to custom data formats. From Python, [NumPy arrays can be imported into RDataFrame](https://root.cern/doc/master/df032__MakeNumpyDataFrame_8py.html) as well.; 181 ; 1822. Transform the dataframe by:; 183 ; 184 - [Applying filters](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#transformations). This selects only specific rows of the dataset.; 185 ; 186 - [Creating custom columns](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#transformations). Custom columns can, for example, contain the results of a computation that must be performed for every row of the dataset.; 187 ; 1883. [Produce results](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#actions). *Actions* are used to aggregate data into results. Most actions are *lazy*, i.e. they are not executed on the spot, but registered with RDataFrame and executed only when a result is accessed for the first time.; 189 ; 190Make sure to book all transformations and actions before you access the contents of any of the results. This lets RDataFrame accumulate work and then produce all results at the same time, upon first access to any of them.; 191 ; 192The following table shows how analyses based on TTreeReader and TTree::Draw() translate to RDataFrame. Follow the; 193[crash course](#crash-course) to discover more idiomatic and flexible ways to express analyses with RDataFrame.; 194<table>; 195<tr>; 196 <td>; 197 <b>TTreeReader</b>; 198 </td>; 199 <td>; 200 <b>ROOT::RDataFrame</b>; 201 </td>; 202</tr>; 203<tr>; 204 <td>; 205~~~{.cpp}; 206TTreeReader reader(""myTree"", file);; 207TTreeReaderValue<A_t> a(reader, ""A"");; 208TTreeReaderValue<B_t> b(reader, ""B"");; 209TTreeReaderValue<C_t> c(reader, ""C"");; 210while(reader.Next()) {; 211 if(IsGoodEvent(*a, *b, *c)); 212 DoStuff(*a, *b, *c);; 213}; 214~~~; 215 </td>; 216 <td>; 217~~~{.cpp}; 218ROOT::RDataFrame d(""myTree"", file, {""A"", ""B"", ""C""});; 219d.Filter(IsGoodEvent).Foreach(DoStuff);; 220~~~; 221 </td>; 222",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:15045,access,access,15045,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['access'],['access']
Security,"2 of file TPackMgr.h. ◆ SetPrefix(). void TPackMgr::SetPrefix ; (; const char * ; pfx). inline . Definition at line 68 of file TPackMgr.h. ◆ Show(). void TPackMgr::Show ; (; const char * ; title = 0). Show available packages. ; Definition at line 548 of file TPackMgr.cxx. ◆ ShowEnabled(). void TPackMgr::ShowEnabled ; (; const char * ; title = 0). Show enabled packages. ; Definition at line 662 of file TPackMgr.cxx. ◆ Streamer(). void TPackMgr::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TPackMgr::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 106 of file TPackMgr.h. ◆ Unload(). Int_t TPackMgr::Unload ; (; const char * ; pack). Method to unload a package. ; Return -1 on error, 0 otherwise ; Definition at line 411 of file TPackMgr.cxx. ◆ Unpack(). Int_t TPackMgr::Unpack ; (; const char * ; pack, . TMD5 * ; sum = 0 . ). Read MD5 checksum of the PAR file from the PROOF-INF/md5.txt file. ; Returns a pointer to a TMD5 object, transferring ownership to the caller ; Definition at line 723 of file TPackMgr.cxx. Member Data Documentation. ◆ fDir. TString TPackMgr::fDir. private . Definition at line 44 of file TPackMgr.h. ◆ fEnabledPackages. TList* TPackMgr::fEnabledPackages. private . Definition at line 47 of file TPackMgr.h. ◆ fgGlobalPackMgrList. THashList * TPackMgr::fgGlobalPackMgrList = 0. staticprivate . Definition at line 49 of file TPackMgr.h. ◆ fLock. TLockPath TPackMgr::fLock. private . Definition at line 45 of file TPackMgr.h. ◆ fLogger. TPackMgrLog_t TPackMgr::fLogger. private . Definition at line 42 of file TPackMgr.h. ◆ fName. TString TPackMgr::fName. private . Definition at line 43 of file TPackMgr.h. ◆ fPfx. TString TPackMgr::fPfx. private . Definition at line 46 of file TPackMgr.h. proof/proof/inc/TPackMgr.h; proof/proof/src/TPackMgr.cxx. TPackMgr. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:05 (GVA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPackMgr.html:24035,checksum,checksum,24035,doc/master/classTPackMgr.html,https://root.cern,https://root.cern/doc/master/classTPackMgr.html,1,['checksum'],['checksum']
Security,"2 vectors; c=a-b, a=a-b, NEVER USE IT, VERY SLOW!!! ; Definition at line 180 of file PDEFoamVect.cxx. ◆ operator-=(). TMVA::PDEFoamVect & TMVA::PDEFoamVect::operator-= ; (; const PDEFoamVect & ; shift). unary subtraction operator -= ; Definition at line 154 of file PDEFoamVect.cxx. ◆ operator=() [1/3]. TMVA::PDEFoamVect & TMVA::PDEFoamVect::operator= ; (; const PDEFoamVect & ; vect). substitution operator ; Definition at line 99 of file PDEFoamVect.cxx. ◆ operator=() [2/3]. TMVA::PDEFoamVect & TMVA::PDEFoamVect::operator= ; (; Double_t ; x). Loading in double prec. number, sometimes can be useful. ; Definition at line 201 of file PDEFoamVect.cxx. ◆ operator=() [3/3]. TMVA::PDEFoamVect & TMVA::PDEFoamVect::operator= ; (; Double_t ; Vect[]). Loading in ordinary double prec. vector, sometimes can be useful. ; Definition at line 191 of file PDEFoamVect.cxx. ◆ operator[](). Double_t & TMVA::PDEFoamVect::operator[] ; (; Int_t ; n). [] is for access to elements as in ordinary matrix like a[j]=b[j] (Perhaps against some strict rules but rather practical.) Range protection is built in, consequently for substitution one should use rather use a=b than explicit loop! ; Definition at line 120 of file PDEFoamVect.cxx. ◆ Print(). void TMVA::PDEFoamVect::Print ; (; Option_t * ; option); const. virtual . Printout of all vector components. ; Reimplemented from TObject.; Definition at line 217 of file PDEFoamVect.cxx. ◆ Streamer(). virtual void TMVA::PDEFoamVect::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::PDEFoamVect::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 66 of file PDEFoamVect.h. Member Data Documentation. ◆ fCoords. Double_t* TMVA::PDEFoamVect::fCoords. private . [fDim] Coordinates ; Definition at line 40 of file PDEFoamVect.h. ◆ fDim. Int_t TMVA::PDEFoamVect::fDim. private . Dimension. ; Definition at line 39 of file PDEFoamVect.h. L",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamVect.html:14802,access,access,14802,doc/master/classTMVA_1_1PDEFoamVect.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamVect.html,1,['access'],['access']
Security,"2 }; 9983 ; 9984 if (!mg_fopen(conn, path, MG_FOPEN_MODE_READ, filep)) {; 9985 mg_send_http_error(conn,; 9986 500,; 9987 ""Error: Cannot open file\nfopen(%s): %s"",; 9988 path,; 9989 strerror(ERRNO));; 9990 return;; 9991 }; 9992 ; 9993 fclose_on_exec(&filep->access, conn);; 9994 ; 9995 /* If ""Range"" request was made: parse header, send only selected part; 9996 * of the file. */; 9997 r1 = r2 = 0;; 9998 if ((range_hdr != NULL); 9999 && ((n = parse_range_header(range_hdr, &r1, &r2)) > 0) && (r1 >= 0); 10000 && (r2 >= 0)) {; 10001 /* actually, range requests don't play well with a pre-gzipped; 10002 * file (since the range is specified in the uncompressed space) */; 10003 if (filep->stat.is_gzipped) {; 10004 mg_send_http_error(; 10005 conn,; 10006 416, /* 416 = Range Not Satisfiable */; 10007 ""%s"",; 10008 ""Error: Range requests in gzipped files are not supported"");; 10009 (void)mg_fclose(; 10010 &filep->access); /* ignore error on read only file */; 10011 return;; 10012 }; 10013 conn->status_code = 206;; 10014 cl = (n == 2) ? (((r2 > cl) ? cl : r2) - r1 + 1) : (cl - r1);; 10015 mg_snprintf(conn,; 10016 NULL, /* range buffer is big enough */; 10017 range,; 10018 sizeof(range),; 10019 ""bytes ""; 10020 ""%"" INT64_FMT ""-%"" INT64_FMT ""/%"" INT64_FMT,; 10021 r1,; 10022 r1 + cl - 1,; 10023 filep->stat.size);; 10024 ; 10025#if defined(USE_ZLIB); 10026 /* Do not compress ranges. */; 10027 allow_on_the_fly_compression = 0;; 10028#endif; 10029 }; 10030 ; 10031 /* Do not compress small files. Small files do not benefit from file; 10032 * compression, but there is still some overhead. */; 10033#if defined(USE_ZLIB); 10034 if (filep->stat.size < MG_FILE_COMPRESSION_SIZE_LIMIT) {; 10035 /* File is below the size limit. */; 10036 allow_on_the_fly_compression = 0;; 10037 }; 10038#endif; 10039 ; 10040 /* Standard CORS header */; 10041 cors_orig_cfg = conn->dom_ctx->config[ACCESS_CONTROL_ALLOW_ORIGIN];; 10042 origin_hdr = mg_get_header(conn, ""Origin"");; 10043 if (cors_orig_cfg && *cors_orig_c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:287042,access,access,287042,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['access'],['access']
Security,"2"": Draw a contour plot using the same line style for all contours; ""CONT3"": Draw a contour plot using fill area colors; ""CONT4"":Draw a contour plot using surface colors (SURF2 option at theta = 0); see also options “AITOFF”, “MERCATOR”, etc. below; ""CONT5"": Use Delaunay triangles to compute the contours. Different contour options. The default number of contour levels is 20 equidistant levels. It can be changed with TH1::SetContour. When option “LIST” is specified together with option “CONT”, all points used for contour drawing, are saved in the TGraph object and are accessible in the following way:; TObjArray *contours =; gROOT->GetListOfSpecials()->FindObject(""contours"");; Int_t ncontours = contours->GetSize(); TList *list =; (TList*)contours->At(i);; Where “i” is a contour number and list contains a list of TGraph objects. For one given contour, more than one disjoint poly-line may be generated. The TGraph numbers per contour are given by list->GetSize(). Here we show how to access the first graph in the list.; TGraph *gr1 = (TGraph*)list->First();. “AITOFF”: Draw a contour via an AITOFF projection; “MERCATOR”: Draw a contour via a Mercator projection; “SINUSOIDAL”: Draw a contour via a Sinusoidal projection; “PARABOLIC”: Draw a contour via a Parabolic projection. The tutorial macro earth.C uses these four options and produces the following picture:. The earth.C macro output. 3.8.2.8 The LEGO Options; In a lego plot, the cell contents are drawn as 3D boxes, with the height of the box proportional to the cell content. “LEGO” and “SURF” options. “LEGO”: Draw a lego plot with hidden line removal; “LEGO1”: Draw a lego plot with hidden surface removal; “LEGO2”: Draw a lego plot using colors to show the cell contents. A lego plot can be represented in several coordinate systems; the default system is Cartesian coordinates. Other possible coordinate systems are CYL , POL , SPH , and PSR . “CYL”: Cylindrical coordinates: x-coordinate is mapped on the angle; y-coordinate ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:93746,access,access,93746,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['access'],['access']
Security,"2,ROOT::Math::MatRepStd<double,2,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:5938,access,access,5938,root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,2,['access'],['access']
Security,"20*************************************************************************/; 21 ; 22 ; 23#include ""THnBase.h""; 24#include ""TExMap.h""; 25#include ""THnSparse_Internal.h""; 26 ; 27// needed only for template instantiations of THnSparseT:; 28#include ""TArrayF.h""; 29#include ""TArrayL.h""; 30#include ""TArrayL64.h""; 31#include ""TArrayI.h""; 32#include ""TArrayS.h""; 33#include ""TArrayC.h""; 34 ; 35class THnSparseCompactBinCoord;; 36 ; 37class THnSparse: public THnBase {; 38 private:; 39 Int_t fChunkSize; ///< Number of entries for each chunk; 40 Long64_t fFilledBins; ///< Number of filled bins; 41 TObjArray fBinContent; ///< Array of THnSparseArrayChunk; 42 TExMap fBins; ///<! Filled bins; 43 TExMap fBinsContinued; ///<! Filled bins for non-unique hashes, containing pairs of (bin index 0, bin index 1); 44 THnSparseCompactBinCoord *fCompactCoord; ///<! Compact coordinate; 45 ; 46 THnSparse(const THnSparse&) = delete;; 47 THnSparse& operator=(const THnSparse&) = delete;; 48 ; 49 protected:; 50 ; 51 THnSparse();; 52 THnSparse(const char* name, const char* title, Int_t dim,; 53 const Int_t* nbins, const Double_t* xmin, const Double_t* xmax,; 54 Int_t chunksize);; 55 THnSparseCompactBinCoord* GetCompactCoord() const;; 56 THnSparseArrayChunk* GetChunk(Int_t idx) const {; 57 return (THnSparseArrayChunk*) fBinContent[idx]; }; 58 ; 59 THnSparseArrayChunk* AddChunk();; 60 void Reserve(Long64_t nbins) override;; 61 void FillExMap();; 62 virtual TArray* GenerateArray() const = 0;; 63 Long64_t GetBinIndexForCurrentBin(Bool_t allocate);; 64 ; 65 /// Increment the bin content of ""bin"" by ""w"",; 66 /// return the bin index.; 67 void FillBin(Long64_t bin, Double_t w) override {; 68 THnSparseArrayChunk* chunk = GetChunk(bin / fChunkSize);; 69 chunk->AddBinContent(bin % fChunkSize, w);; 70 FillBinBase(w);; 71 }; 72 void InitStorage(Int_t* nbins, Int_t chunkSize) override;; 73 ; 74 public:; 75 ~THnSparse() override;; 76 ; 77 static THnSparse* CreateSparse(const char* name, const char* title,; 78 co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THnSparse_8h_source.html:1614,hash,hashes,1614,doc/master/THnSparse_8h_source.html,https://root.cern,https://root.cern/doc/master/THnSparse_8h_source.html,1,['hash'],['hashes']
Security,"21 static void StreamerStreamerInfo(const TClass* pThis, void *object, TBuffer &b, const TClass *onfile_class);; 322 static void StreamerDefault(const TClass* pThis, void *object, TBuffer &b, const TClass *onfile_class);; 323 ; 324 static IdMap_t *GetIdMap(); //Map from typeid to TClass pointer; 325 static DeclIdMap_t *GetDeclIdMap(); //Map from DeclId_t to TClass pointer; 326 static std::atomic<Int_t> fgClassCount; //provides unique id for a each class; 327 //stored in TObject::fUniqueID; 328 static TDeclNameRegistry fNoInfoOrEmuOrFwdDeclNameRegistry; // Store decl names of the forwardd and no info instances; 329 static Bool_t HasNoInfoOrEmuOrFwdDeclaredDecl(const char*);; 330 ; 331 // Internal status bits, set and reset only during initialization and thus under the protection of the global lock.; 332 enum { kLoading = kReservedLoading, kUnloading = kReservedLoading };; 333 // Internal streamer type.; 334 enum EStreamerType {kDefault=0, kEmulatedStreamer=1, kTObject=2, kInstrumented=4, kForeign=8, kExternal=16};; 335 ; 336 // These are the above-referenced hash tables. (The pointers are null; 337 // if no entries have been made.); 338 static THashTable* fgClassTypedefHash;; 339 ; 340 TVirtualStreamerInfo *GetStreamerInfoImpl(Int_t version, Bool_t silent) const;; 341 ; 342 mutable TVirtualMutex *fOVRMutex = nullptr;; 343 typedef std::multimap<void*, Version_t> RepoCont_t;; 344 mutable RepoCont_t fObjectVersionRepository;; 345 ; 346 void UnregisterAddressInRepository(const char *where, void *location, const TClass *what) const;; 347 void MoveAddressInRepository(const char *where, void *oldadd, void *newadd, const TClass *what) const;; 348 void RegisterAddressInRepository(const char *where, void *location, const TClass *what) const;; 349 ; 350private:; 351 TClass(const TClass& tc) = delete;; 352 TClass& operator=(const TClass&) = delete;; 353 ; 354 bool IsClassStructOrUnion() const { return Property() & (kIsClass|kIsStruct|kIsUnion); }; 355 TList *CreateListOfDataMemb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8h_source.html:16167,hash,hash,16167,doc/master/TClass_8h_source.html,https://root.cern,https://root.cern/doc/master/TClass_8h_source.html,2,['hash'],['hash']
Security,"216 ; 3217 return cachedRDF;; 3218 }; 3219 ; 3220 template <bool IsSingleColumn, typename F>; 3221 RInterface<Proxied, DS_t>; 3222 VaryImpl(const std::vector<std::string> &colNames, F &&expression, const ColumnNames_t &inputColumns,; 3223 const std::vector<std::string> &variationTags, std::string_view variationName); 3224 {; 3225 using F_t = std::decay_t<F>;; 3226 using ColTypes_t = typename TTraits::CallableTraits<F_t>::arg_types;; 3227 using RetType = typename TTraits::CallableTraits<F_t>::ret_type;; 3228 constexpr auto nColumns = ColTypes_t::list_size;; 3229 ; 3230 SanityChecksForVary<RetType>(colNames, variationTags, variationName);; 3231 ; 3232 const auto validColumnNames = GetValidatedColumnNames(nColumns, inputColumns);; 3233 CheckAndFillDSColumns(validColumnNames, ColTypes_t{});; 3234 ; 3235 auto retTypeName = RDFInternal::TypeID2TypeName(typeid(RetType));; 3236 if (retTypeName.empty()) {; 3237 // The type is not known to the interpreter, but we don't want to error out; 3238 // here, rather if/when this column is used in jitted code, so we inject a broken but telling type name.; 3239 const auto demangledType = RDFInternal::DemangleTypeIdName(typeid(RetType));; 3240 retTypeName = ""CLING_UNKNOWN_TYPE_"" + demangledType;; 3241 }; 3242 ; 3243 auto variation = std::make_shared<RDFInternal::RVariation<F_t, IsSingleColumn>>(; 3244 colNames, variationName, std::forward<F>(expression), variationTags, retTypeName, fColRegister, *fLoopManager,; 3245 validColumnNames);; 3246 ; 3247 RDFInternal::RColumnRegister newCols(fColRegister);; 3248 newCols.AddVariation(std::move(variation));; 3249 ; 3250 RInterface<Proxied> newInterface(fProxiedPtr, *fLoopManager, std::move(newCols));; 3251 ; 3252 return newInterface;; 3253 }; 3254 ; 3255 RInterface<Proxied, DS_t> JittedVaryImpl(const std::vector<std::string> &colNames, std::string_view expression,; 3256 const std::vector<std::string> &variationTags,; 3257 std::string_view variationName, bool isSingleColumn); 3258 {; 3259 R__ASSERT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:184210,inject,inject,184210,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['inject'],['inject']
Security,"24; TGenCollectionProxy::GetConversionReadMemberWiseActionsTStreamerInfoActions::TActionSequence * GetConversionReadMemberWiseActions(TClass *oldClass, Int_t version) overrideReturn the set of action necessary to stream in this collection member-wise coming from the old value...Definition TGenCollectionProxy.cxx:1747; TGenCollectionProxy::fReadMemberWiseTObjArray * fReadMemberWiseArray of bundle of TStreamerInfoActions to stream out (read)Definition TGenCollectionProxy.h:291; TGenCollectionProxy::DeleteItemvirtual void DeleteItem(Bool_t force, void *ptr) constCall to delete/destruct individual item.Definition TGenCollectionProxy.cxx:1350; TGenCollectionProxy::GetCollectionClassTClass * GetCollectionClass() const overrideReturn a pointer to the TClass representing the container.Definition TGenCollectionProxy.cxx:985; TGenCollectionProxy::fStagedStaged_t fStagedOptimization: Keep staged array once they were created.Definition TGenCollectionProxy.h:319; TGenCollectionProxy::fSizeMethod fSizeContainer accessors: size of container.Definition TGenCollectionProxy.h:302; TGenCollectionProxy::fClearMethod fClearMethod cache for container accessors: clear container.Definition TGenCollectionProxy.h:301; TGenCollectionProxy::fFeedFeedfunc_t fFeedContainer accessors: block feed.Definition TGenCollectionProxy.h:308; TGenCollectionProxy::GetFunctionCreateIteratorsCreateIterators_t GetFunctionCreateIterators(Bool_t read=kTRUE) overrideSee typedef void (*CreateIterators_t)(void *collection, void *&begin_arena, void *&end_arena); begin_...Definition TGenCollectionProxy.cxx:1607; TGenCollectionProxy::fValDiffint fValDiffOffset between two consecutive value_types (memory layout).Definition TGenCollectionProxy.h:316; TGenCollectionProxy::ReadBuffervirtual void ReadBuffer(TBuffer &b, void *obj)Definition TGenCollectionProxy.cxx:1419; TGenCollectionProxy::fProxyKeptProxies_t fProxyKeptOptimization: Keep proxies once they were created.Definition TGenCollectionProxy.h:318; TGenCollectionPro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:85358,access,accessors,85358,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['access'],['accessors']
Security,"25 int nempty = 0;; 526 while (fOwnThread && !fTerminated) {; 527 int nprocess = ProcessRequests();; 528 if (nprocess > 0); 529 nempty = 0;; 530 else; 531 nempty++;; 532 if (nempty > 1000) {; 533 nempty = 0;; 534 std::this_thread::sleep_for(std::chrono::milliseconds(1));; 535 }; 536 }; 537 });; 538 ; 539 fThrd = std::move(thrd);; 540}; 541 ; 542////////////////////////////////////////////////////////////////////////////////; 543/// Stop server thread; 544///; 545/// Normally called shortly before http server destructor; 546 ; 547void THttpServer::StopServerThread(); 548{; 549 if (!fOwnThread); 550 return;; 551 ; 552 fOwnThread = false;; 553 fThrd.join();; 554 fMainThrdId = 0;; 555}; 556 ; 557////////////////////////////////////////////////////////////////////////////////; 558/// Checked that filename does not contains relative path below current directory; 559///; 560/// Used to prevent access to files below current directory; 561 ; 562Bool_t THttpServer::VerifyFilePath(const char *fname); 563{; 564 if (!fname || (*fname == 0)); 565 return kFALSE;; 566 ; 567 Int_t level = 0;; 568 ; 569 while (*fname) {; 570 ; 571 // find next slash or backslash; 572 const char *next = strpbrk(fname, ""/\\"");; 573 if (next == 0); 574 return kTRUE;; 575 ; 576 // most important - change to parent dir; 577 if ((next == fname + 2) && (*fname == '.') && (*(fname + 1) == '.')) {; 578 fname += 3;; 579 level--;; 580 if (level < 0); 581 return kFALSE;; 582 continue;; 583 }; 584 ; 585 // ignore current directory; 586 if ((next == fname + 1) && (*fname == '.')) {; 587 fname += 2;; 588 continue;; 589 }; 590 ; 591 // ignore slash at the front; 592 if (next == fname) {; 593 fname++;; 594 continue;; 595 }; 596 ; 597 fname = next + 1;; 598 level++;; 599 }; 600 ; 601 return kTRUE;; 602}; 603 ; 604////////////////////////////////////////////////////////////////////////////////; 605/// Verifies that request is just file name; 606///; 607/// File names typically contains prefix like ""jsrootsys/""; 608/// I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THttpServer_8cxx_source.html:18290,access,access,18290,doc/master/THttpServer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THttpServer_8cxx_source.html,1,['access'],['access']
Security,"25; ROOT::Math::Minimizer::MinimizerMinimizer(Minimizer &&)=delete; ROOT::Math::Minimizer::fStatusint fStatusstatus of minimizerDefinition Minimizer.h:371; ROOT::Math::Minimizer::SetVariableValuevirtual bool SetVariableValue(unsigned int ivar, double value)set the value of an already existing variableDefinition Minimizer.cxx:53; ROOT::Math::Minimizer::SetFunctionvirtual void SetFunction(const ROOT::Math::IMultiGenFunction &func)=0set the function to minimize; ROOT::Math::Minimizer::Scanvirtual bool Scan(unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0)scan function minimum for variable i.Definition Minimizer.cxx:195; ROOT::Math::Minimizer::MaxIterationsunsigned int MaxIterations() constmax iterationsDefinition Minimizer.h:297; ROOT::Math::Minimizer::SetDefaultOptionsvoid SetDefaultOptions()reset the default options (defined in MinimizerOptions)Definition Minimizer.h:361; ROOT::Math::Minimizer::fValidErrorbool fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit)Definition Minimizer.h:369; ROOT::Math::Minimizer::MinosStatusvirtual int MinosStatus() conststatus code of Minos (to be re-implemented by the minimizers supporting Minos)Definition Minimizer.h:313; ROOT::Math::Minimizer::SetVariableLimitsvirtual bool SetVariableLimits(unsigned int ivar, double lower, double upper)set the limits of an already existing variableDefinition Minimizer.h:199; ROOT::Math::Minimizer::SetTolerancevoid SetTolerance(double tol)set the toleranceDefinition Minimizer.h:337; ROOT::Math::Minimizer::MinimizerMinimizer(Minimizer const &)=delete; ROOT::Math::Minimizer::CovMatrixStatusvirtual int CovMatrixStatus() constreturn status of covariance matrix using Minuit convention {0 not calculated 1 approximated 2 made po...Definition Minimizer.h:256; ROOT::Math::Minimizer::Minimizevirtual bool Minimize()=0method to perform the minimization; ROOT::Math::Minimizer::Statusint Status() conststatus code of minimizerDefi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Minimizer_8h_source.html:24938,validat,validated,24938,doc/master/Minimizer_8h_source.html,https://root.cern,https://root.cern/doc/master/Minimizer_8h_source.html,1,['validat'],['validated']
Security,"2892 return 0;; 2893 }; 2894 ; 2895 /* filep is initialized in mg_stat: all fields with memset to,; 2896 * some fields like size and modification date with values */; 2897 found = mg_stat(conn, path, &(filep->stat));; 2898 ; 2899 if ((mode == MG_FOPEN_MODE_READ) && (!found)) {; 2900 /* file does not exist and will not be created */; 2901 return 0;; 2902 }; 2903 ; 2904#if defined(_WIN32); 2905 {; 2906 wchar_t wbuf[UTF16_PATH_MAX];; 2907 path_to_unicode(conn, path, wbuf, ARRAY_SIZE(wbuf));; 2908 switch (mode) {; 2909 case MG_FOPEN_MODE_READ:; 2910 filep->access.fp = _wfopen(wbuf, L""rb"");; 2911 break;; 2912 case MG_FOPEN_MODE_WRITE:; 2913 filep->access.fp = _wfopen(wbuf, L""wb"");; 2914 break;; 2915 case MG_FOPEN_MODE_APPEND:; 2916 filep->access.fp = _wfopen(wbuf, L""ab"");; 2917 break;; 2918 }; 2919 }; 2920#else; 2921 /* Linux et al already use unicode. No need to convert. */; 2922 switch (mode) {; 2923 case MG_FOPEN_MODE_READ:; 2924 filep->access.fp = fopen(path, ""r"");; 2925 break;; 2926 case MG_FOPEN_MODE_WRITE:; 2927 filep->access.fp = fopen(path, ""w"");; 2928 break;; 2929 case MG_FOPEN_MODE_APPEND:; 2930 filep->access.fp = fopen(path, ""a"");; 2931 break;; 2932 }; 2933 ; 2934#endif; 2935 if (!found) {; 2936 /* File did not exist before fopen was called.; 2937 * Maybe it has been created now. Get stat info; 2938 * like creation time now. */; 2939 found = mg_stat(conn, path, &(filep->stat));; 2940 (void)found;; 2941 }; 2942 ; 2943 /* return OK if file is opened */; 2944 return (filep->access.fp != NULL);; 2945}; 2946 ; 2947 ; 2948/* return 0 on success, just like fclose */; 2949static int; 2950mg_fclose(struct mg_file_access *fileacc); 2951{; 2952 int ret = -1;; 2953 if (fileacc != NULL) {; 2954 if (fileacc->fp != NULL) {; 2955 ret = fclose(fileacc->fp);; 2956 }; 2957 /* reset all members of fileacc */; 2958 memset(fileacc, 0, sizeof(*fileacc));; 2959 }; 2960 return ret;; 2961}; 2962#endif /* NO_FILESYSTEMS */; 2963 ; 2964 ; 2965static void; 2966mg_strlcpy(char *dst, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:89449,access,access,89449,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['access'],['access']
Security,"2893 return 0;; 2894 }; 2895 ; 2896 /* filep is initialized in mg_stat: all fields with memset to,; 2897 * some fields like size and modification date with values */; 2898 found = mg_stat(conn, path, &(filep->stat));; 2899 ; 2900 if ((mode == MG_FOPEN_MODE_READ) && (!found)) {; 2901 /* file does not exist and will not be created */; 2902 return 0;; 2903 }; 2904 ; 2905#if defined(_WIN32); 2906 {; 2907 wchar_t wbuf[UTF16_PATH_MAX];; 2908 path_to_unicode(conn, path, wbuf, ARRAY_SIZE(wbuf));; 2909 switch (mode) {; 2910 case MG_FOPEN_MODE_READ:; 2911 filep->access.fp = _wfopen(wbuf, L""rb"");; 2912 break;; 2913 case MG_FOPEN_MODE_WRITE:; 2914 filep->access.fp = _wfopen(wbuf, L""wb"");; 2915 break;; 2916 case MG_FOPEN_MODE_APPEND:; 2917 filep->access.fp = _wfopen(wbuf, L""ab"");; 2918 break;; 2919 }; 2920 }; 2921#else; 2922 /* Linux et al already use unicode. No need to convert. */; 2923 switch (mode) {; 2924 case MG_FOPEN_MODE_READ:; 2925 filep->access.fp = fopen(path, ""r"");; 2926 break;; 2927 case MG_FOPEN_MODE_WRITE:; 2928 filep->access.fp = fopen(path, ""w"");; 2929 break;; 2930 case MG_FOPEN_MODE_APPEND:; 2931 filep->access.fp = fopen(path, ""a"");; 2932 break;; 2933 }; 2934 ; 2935#endif; 2936 if (!found) {; 2937 /* File did not exist before fopen was called.; 2938 * Maybe it has been created now. Get stat info; 2939 * like creation time now. */; 2940 found = mg_stat(conn, path, &(filep->stat));; 2941 (void)found;; 2942 }; 2943 ; 2944 /* return OK if file is opened */; 2945 return (filep->access.fp != NULL);; 2946}; 2947 ; 2948 ; 2949/* return 0 on success, just like fclose */; 2950static int; 2951mg_fclose(struct mg_file_access *fileacc); 2952{; 2953 int ret = -1;; 2954 if (fileacc != NULL) {; 2955 if (fileacc->fp != NULL) {; 2956 ret = fclose(fileacc->fp);; 2957 }; 2958 /* reset all members of fileacc */; 2959 memset(fileacc, 0, sizeof(*fileacc));; 2960 }; 2961 return ret;; 2962}; 2963#endif /* NO_FILESYSTEMS */; 2964 ; 2965 ; 2966static void; 2967mg_strlcpy(char *dst, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:89481,access,access,89481,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['access'],['access']
Security,"29; ROOT::Detail::TSchemaRuleSet::FindRulesconst TMatches FindRules(const TString &source) constReturn all the rules that are about the given 'source' class.Definition TSchemaRuleSet.cxx:289; ROOT::Detail::TSchemaRuleSet::GetRulesconst TObjArray * GetRules() constDefinition TSchemaRuleSet.cxx:417; ROOT::Internal::RConcurrentHashColl::HashValueDefinition RConcurrentHashColl.hxx:36; ROOT::Internal::RConcurrentHashCollThis class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection ...Definition RConcurrentHashColl.hxx:30; ROOT::Internal::RConcurrentHashColl::Insertbool Insert(const HashValue &hash, RUidColl &&coll) constIf the hash is there, return false.Definition RConcurrentHashColl.cxx:61; ROOT::Internal::RConcurrentHashColl::Hashstatic HashValue Hash(char *buf, int len)Return the hash object corresponding to the buffer.Definition RConcurrentHashColl.cxx:56; ROOT::Internal::RConcurrentHashColl::Findconst RUidColl * Find(const HashValue &hash) constReturn the collection of UID corresponding to the hash if the hash has already been seen or nullptr o...Definition RConcurrentHashColl.cxx:46; ROOT::TSchemaRuleDefinition TSchemaRule.h:20; ROOT::TSchemaRule::AsStringvoid AsString(TString &out, const char *options="""") constAdd to the string 'out' the string representation of the rule.Definition TSchemaRule.cxx:218; TArchiveFile::GetMemberNameconst char * GetMemberName() constDefinition TArchiveFile.h:56; TArchiveFile::SetCurrentMembervirtual Int_t SetCurrentMember()=0; TArchiveFile::GetArchiveNameconst char * GetArchiveName() constDefinition TArchiveFile.h:55; TArchiveFile::GetMemberTArchiveMember * GetMember() constDefinition TArchiveFile.h:51; TArchiveFile::Openstatic TArchiveFile * Open(const char *url, TFile *file)Return proper archive file handler depending on passed url.Definition TArchiveFile.cxx:121; TArchiveFile::GetMemberFilePositionLong64_t GetMemberFilePosition() constReturn position in archive of current member.Definition TAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:199785,hash,hash,199785,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,3,['hash'],['hash']
Security,"2;; 8816 ; 8817 found = 0;; 8818 fp = fp2 = NULL;; 8819 ; 8820 /* Regard empty password as no password - remove user record. */; 8821 if ((pass != NULL) && (pass[0] == '\0')) {; 8822 pass = NULL;; 8823 }; 8824 ; 8825 /* Other arguments must not be empty */; 8826 if ((fname == NULL) || (domain == NULL) || (user == NULL)) {; 8827 return 0;; 8828 }; 8829 ; 8830 /* Using the given file format, user name and domain must not contain; 8831 * ':'; 8832 */; 8833 if (strchr(user, ':') != NULL) {; 8834 return 0;; 8835 }; 8836 if (strchr(domain, ':') != NULL) {; 8837 return 0;; 8838 }; 8839 ; 8840 /* Do not allow control characters like newline in user name and domain.; 8841 * Do not allow excessively long names either. */; 8842 for (i = 0; ((i < 255) && (user[i] != 0)); i++) {; 8843 if (iscntrl((unsigned char)user[i])) {; 8844 return 0;; 8845 }; 8846 }; 8847 if (user[i]) {; 8848 return 0;; 8849 }; 8850 for (i = 0; ((i < 255) && (domain[i] != 0)); i++) {; 8851 if (iscntrl((unsigned char)domain[i])) {; 8852 return 0;; 8853 }; 8854 }; 8855 if (domain[i]) {; 8856 return 0;; 8857 }; 8858 ; 8859 /* The maximum length of the path to the password file is limited */; 8860 if ((strlen(fname) + 4) >= UTF8_PATH_MAX) {; 8861 return 0;; 8862 }; 8863 ; 8864 /* Create a temporary file name. Length has been checked before. */; 8865 strcpy(tmp, fname);; 8866 strcat(tmp, "".tmp"");; 8867 ; 8868 /* Create the file if does not exist */; 8869 /* Use of fopen here is OK, since fname is only ASCII */; 8870 if ((fp = fopen(fname, ""a+"")) != NULL) {; 8871 (void)fclose(fp);; 8872 }; 8873 ; 8874 /* Open the given file and temporary file */; 8875 if ((fp = fopen(fname, ""r"")) == NULL) {; 8876 return 0;; 8877 } else if ((fp2 = fopen(tmp, ""w+"")) == NULL) {; 8878 fclose(fp);; 8879 return 0;; 8880 }; 8881 ; 8882 /* Copy the stuff to temporary file */; 8883 while (fgets(line, sizeof(line), fp) != NULL) {; 8884 if (sscanf(line, ""%255[^:]:%255[^:]:%*s"", u, d) != 2) {; 8885 continue;; 8886 }; 8887 u[255] = 0;; 8888 d[",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:254866,password,password,254866,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['password'],['password']
Security,"2;; 8817 ; 8818 found = 0;; 8819 fp = fp2 = NULL;; 8820 ; 8821 /* Regard empty password as no password - remove user record. */; 8822 if ((pass != NULL) && (pass[0] == '\0')) {; 8823 pass = NULL;; 8824 }; 8825 ; 8826 /* Other arguments must not be empty */; 8827 if ((fname == NULL) || (domain == NULL) || (user == NULL)) {; 8828 return 0;; 8829 }; 8830 ; 8831 /* Using the given file format, user name and domain must not contain; 8832 * ':'; 8833 */; 8834 if (strchr(user, ':') != NULL) {; 8835 return 0;; 8836 }; 8837 if (strchr(domain, ':') != NULL) {; 8838 return 0;; 8839 }; 8840 ; 8841 /* Do not allow control characters like newline in user name and domain.; 8842 * Do not allow excessively long names either. */; 8843 for (i = 0; ((i < 255) && (user[i] != 0)); i++) {; 8844 if (iscntrl((unsigned char)user[i])) {; 8845 return 0;; 8846 }; 8847 }; 8848 if (user[i]) {; 8849 return 0;; 8850 }; 8851 for (i = 0; ((i < 255) && (domain[i] != 0)); i++) {; 8852 if (iscntrl((unsigned char)domain[i])) {; 8853 return 0;; 8854 }; 8855 }; 8856 if (domain[i]) {; 8857 return 0;; 8858 }; 8859 ; 8860 /* The maximum length of the path to the password file is limited */; 8861 if ((strlen(fname) + 4) >= UTF8_PATH_MAX) {; 8862 return 0;; 8863 }; 8864 ; 8865 /* Create a temporary file name. Length has been checked before. */; 8866 strcpy(tmp, fname);; 8867 strcat(tmp, "".tmp"");; 8868 ; 8869 /* Create the file if does not exist */; 8870 /* Use of fopen here is OK, since fname is only ASCII */; 8871 if ((fp = fopen(fname, ""a+"")) != NULL) {; 8872 (void)fclose(fp);; 8873 }; 8874 ; 8875 /* Open the given file and temporary file */; 8876 if ((fp = fopen(fname, ""r"")) == NULL) {; 8877 return 0;; 8878 } else if ((fp2 = fopen(tmp, ""w+"")) == NULL) {; 8879 fclose(fp);; 8880 return 0;; 8881 }; 8882 ; 8883 /* Copy the stuff to temporary file */; 8884 while (fgets(line, sizeof(line), fp) != NULL) {; 8885 if (sscanf(line, ""%255[^:]:%255[^:]:%*s"", u, d) != 2) {; 8886 continue;; 8887 }; 8888 u[255] = 0;; 8889 d[",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:254898,password,password,254898,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['password'],['password']
Security,"2> >(const ROOT::Math::SVector<float,2U*(2U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,2U*(2U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,2,2>fRep; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:5464,access,access,5464,root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,4,['access'],"['access', 'accessing']"
Security,2Editor;  CTH2FTomato 2-D histogram with a float per channel (see TH1 documentation)} ;  CTH2GLRendering of TH2 and derived classes ;  CTH2ITomato 2-D histogram with an int per channel (see TH1 documentation)} ;  CTH2Poly2D Histogram with Polygonal Bins ;  CTH2PolyBinHelper class to represent a bin in the TH2Poly histogram ;  CTH2STomato 2-D histogram with a short per channel (see TH1 documentation) ;  CTH3The 3-D histogram classes derived from the 1-D histogram classes ;  CTH3CTomato 3-D histogram with a byte per channel (see TH1 documentation) ;  CTH3DTomato 3-D histogram with a double per channel (see TH1 documentation)} ;  CTH3FTomato 3-D histogram with a float per channel (see TH1 documentation)} ;  CTH3GLOpenGL renderer class for TH3 ;  CTH3ITomato 3-D histogram with an int per channel (see TH1 documentation)} ;  CTH3STomato 3-D histogram with a short per channel (see TH1 documentation) ;  CTHaarMatrixT;  CTHashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject's ;  CTHashTableTHashTable implements a hash table to store TObject's ;  CTHashTableIterIterator of hash table ;  CTHbookBranchHBOOK Branch ;  CTHbookFileThis class is an interface to the Hbook objects in Hbook files ;  CTHbookKeyHBOOK Key ;  CTHbookTreeA wrapper class supporting Hbook ntuples (CWN and RWN) ;  CTHDFSFileReads and writes its data via the HDFS protocols ;  CTHDFSSystemDirectory handler for HDFS (THDFSFile) ;  CTHelixTHelix has two different constructors ;  CTHilbertMatrixT;  CTHilbertMatrixTSym;  CTHistPainterThe histogram painter class ;  CTHistRenderingRegion;  CTHLimitsFinderClass to find nice axis limits ;  CTHnMultidimensional histogram ;  CTHnBaseMultidimensional histogram base ;  CTHnChainA class to chain together multiple histograms ;  CTHnIterIterator over THnBase bins ;  CTHnSparseEfficient multidimensional histogram ;  CTHnSparseArrayChunkTHnSparseArrayChunk is used internally by THnSparse ;  CTHnSparseTTemplated implementat,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:170906,hash,hash,170906,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['hash'],['hash']
Security,2Editor;  CTH2FTomato 2-D histogram with a float per channel (see TH1 documentation)} ;  CTH2GLRendering of TH2 and derived classes ;  CTH2ITomato 2-D histogram with an int per channel (see TH1 documentation)} ;  CTH2Poly2D Histogram with Polygonal Bins ;  CTH2PolyBinHelper class to represent a bin in the TH2Poly histogram ;  CTH2STomato 2-D histogram with a short per channel (see TH1 documentation) ;  CTH3The 3-D histogram classes derived from the 1-D histogram classes ;  CTH3CTomato 3-D histogram with a byte per channel (see TH1 documentation) ;  CTH3DTomato 3-D histogram with a double per channel (see TH1 documentation)} ;  CTH3FTomato 3-D histogram with a float per channel (see TH1 documentation)} ;  CTH3GLOpenGL renderer class for TH3 ;  CTH3ITomato 3-D histogram with an int per channel (see TH1 documentation)} ;  CTH3STomato 3-D histogram with a short per channel (see TH1 documentation) ;  CTHaarMatrixT;  CTHashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject's ;  CTHashTableTHashTable implements a hash table to store TObject's ;  CTHashTableIterIterator of hash table ;  CTHbookBranchHBOOK Branch ;  CTHbookFileThis class is an interface to the Hbook objects in Hbook files ;  CTHbookKeyHBOOK Key ;  CTHbookTreeA wrapper class supporting Hbook ntuples (CWN and RWN) ;  CTHDFSFileReads and writes its data via the HDFS protocols ;  CTHDFSSystemDirectory handler for HDFS (THDFSFile) ;  CTHelixTHelix has two different constructors ;  CTHilbertMatrixT;  CTHilbertMatrixTSym;  CTHistPainterThe histogram painter class ;  CTHistRenderingRegion;  CTHLimitsFinderClass to find nice axis limits ;  CTHnMultidimensional histogram ;  CTHnBaseMultidimensional histogram base ;  CTHnIterIterator over THnBase bins ;  CTHnSparseEfficient multidimensional histogram ;  CTHnSparseArrayChunkTHnSparseArrayChunk is used internally by THnSparse ;  CTHnSparseTTemplated implementation of the abstract base THnSparse ;  CTHnTTemplated imple,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:162439,hash,hash,162439,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['hash'],['hash']
Security,2F 2-Dim histograms (one float per channel); TH2GL GL renderer for TH2.; TH2I 2-Dim histograms (one 32 bits integer per channel); TH2Poly 2-Dim histogram with polygon bins; TH2PolyBin 2-Dim polygon bins; TH2S 2-Dim histograms (one short per channel); TH3 3-Dim histogram base class; TH3C 3-Dim histograms (one char per channel); TH3D 3-Dim histograms (one double per channel); TH3F 3-Dim histograms (one float per channel); TH3GL GL renderer class for TH3.; TH3I 3-Dim histograms (one 32 bits integer per channel); TH3S 3-Dim histograms (one short per channel); THLimitsFinder Class to find best axis limits; THStack A collection of histograms; THYPE HYPE shape; THaarMatrixT<double> Template of Haar Matrix class; THaarMatrixT<float> Template of Haar Matrix class; THashList Doubly linked list with hashtable for lookup; THashTable A hash table; THashTableIter Hash table iterator; THbookBranch A branch for a THbookTree; THbookFile ROOT interface to Hbook/PAW files; THbookKey Hbook id descriptor; THbookTree A wrapper class supporting Hbook ntuples (CWN and RWN); THelix A Helix drawn as a PolyLine3D; THilbertMatrixT<double> Template of Hilbert Matrix class; THilbertMatrixT<float> Template of Hilbert Matrix class; THilbertMatrixTSym<double> Template of Symmetric Hilbert Matrix class; THilbertMatrixTSym<float> Template of Symmetric Hilbert Matrix class; THistPainter Helper class to draw histograms; THn Base class for multi-dimensional histogram; THnBase Common base for n-dimensional histogram; THnIter Iterator over bins of a THnBase.; THnSparse Interfaces of sparse n-dimensional histogram; THnSparseArrayChunk chunks of linearized bins; THnSparseT<TArrayC> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayD> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayF> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayI> Sparse n-dimensional histogram with templated content; THnSparseT<TArrayL> Sparse n-dimensional histogram ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:98785,hash,hashtable,98785,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,2,['hash'],"['hash', 'hashtable']"
Security,"2[0] ; arr1[1]+arr2[1] and arr1[2]+0; Or with a variable size array arr3; tree->Draw(""Alt$(arr3[0],0)+Alt$(arr3[1],0)+Alt$(arr3[2],0)"");; will draw the sum arr3 for the index 0 to min(2,actual_size_of_arr3-1); As a comparison; tree->Draw(""arr3[0]+arr3[1]+arr3[2]"");; will draw the sum arr3 for the index 0 to 2 only if the; actual_size_of_arr3 is greater or equal to 3.; Note that the array in 'primary' is flatened/linearilized thus using; Alt$ with multi-dimensional arrays of different dimensions in unlikely; to yield the expected results. To visualize a bit more what elements; would be matched by TTree::Draw, TTree::Scan can be used:; tree->Scan(""arr1:Alt$(arr2,0)"");; will print on one line the value of arr1 and (arr2,0) that will be; matched by; tree->Draw(""arr1-Alt$(arr2,0)"");. The ternary operator is not directly support in TTree::Draw however, to plot the; equivalent of 'var2<20 ? -99 : var1', you can use:; tree->Draw(""(var2<20)*99+(var2>=20)*var1"","""");. Drawing a user function accessing the TTree data directly. If the formula contains a file name, TTree::MakeProxy will be used; to load and execute this file. In particular it will draw the; result of a function with the same name as the file. The function; will be executed in a context where the name of the branches can; be used as a C++ variable. For example draw px using the file hsimple.root (generated by the; hsimple.C tutorial), we need a file named hsimple.cxx:. double hsimple() {; return px;; }. MakeProxy can then be used indirectly via the TTree::Draw interface; as follow:; new TFile(""hsimple.root""); ntuple->Draw(""hsimple.cxx"");. A more complete example is available in the tutorials directory:; h1analysisProxy.cxx , h1analysProxy.h and h1analysisProxyCut.C; which reimplement the selector found in h1analysis.C. The main features of this facility are:. * on-demand loading of branches; * ability to use the 'branchname' as if it was a data member; * protection against array out-of-bound; * ability to use the b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:75332,access,accessing,75332,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,3,['access'],['accessing']
Security,"3 /// \brief Allow to refer to a column with a different name.; 1204 /// \param[in] alias name of the column alias; 1205 /// \param[in] columnName of the column to be aliased; 1206 /// \return the first node of the computation graph for which the alias is available.; 1207 ///; 1208 /// Aliasing an alias is supported.; 1209 ///; 1210 /// ### Example usage:; 1211 /// ~~~{.cpp}; 1212 /// auto df_with_alias = df.Alias(""simple_name"", ""very_long&complex_name!!!"");; 1213 /// ~~~; 1214 RInterface<Proxied, DS_t> Alias(std::string_view alias, std::string_view columnName); 1215 {; 1216 // The symmetry with Define is clear. We want to:; 1217 // - Create globally the alias and return this very node, unchanged; 1218 // - Make aliases accessible based on chains and not globally; 1219 ; 1220 // Helper to find out if a name is a column; 1221 auto &dsColumnNames = fDataSource ? fDataSource->GetColumnNames() : ColumnNames_t{};; 1222 ; 1223 constexpr auto where = ""Alias"";; 1224 RDFInternal::CheckValidCppVarName(alias, where);; 1225 // If the alias name is a column name, there is a problem; 1226 RDFInternal::CheckForRedefinition(where, alias, fColRegister, fLoopManager->GetBranchNames(), dsColumnNames);; 1227 ; 1228 const auto validColumnName = GetValidatedColumnNames(1, {std::string(columnName)})[0];; 1229 ; 1230 RDFInternal::RColumnRegister newCols(fColRegister);; 1231 newCols.AddAlias(alias, validColumnName);; 1232 ; 1233 RInterface<Proxied, DS_t> newInterface(fProxiedPtr, *fLoopManager, std::move(newCols));; 1234 ; 1235 return newInterface;; 1236 }; 1237 ; 1238 ////////////////////////////////////////////////////////////////////////////; 1239 /// \brief Save selected columns to disk, in a new TTree `treename` in file `filename`.; 1240 /// \tparam ColumnTypes variadic list of branch/column types.; 1241 /// \param[in] treename The name of the output TTree.; 1242 /// \param[in] filename The name of the output TFile.; 1243 /// \param[in] columnList The list of names of the columns/branc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:66579,access,accessible,66579,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['access'],['accessible']
Security,"3 of file TGView.h. ◆ ToVirtual(). TGLongPosition TGView::ToVirtual ; (; TGLongPosition ; coord); const. inline . Definition at line 92 of file TGView.h. ◆ UpdateBackgroundStart(). void TGView::UpdateBackgroundStart ; (; ). virtual . set some gc values ; Reimplemented in TGHtml.; Definition at line 228 of file TGView.cxx. ◆ UpdateRegion(). void TGView::UpdateRegion ; (; Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). protectedvirtual . update a part of view ; Definition at line 204 of file TGView.cxx. Friends And Related Symbol Documentation. ◆ TGViewFrame. friend class TGViewFrame. friend . Definition at line 25 of file TGView.h. Member Data Documentation. ◆ fCanvas. TGViewFrame* TGView::fCanvas. protected . frame containing the text ; Definition at line 42 of file TGView.h. ◆ fClipboard. Atom_t TGView::fClipboard. protected . clipboard property ; Definition at line 39 of file TGView.h. ◆ fExposedRegion. TGRectangle TGView::fExposedRegion. protected . exposed area ; Definition at line 36 of file TGView.h. ◆ fHsb. TGHScrollBar* TGView::fHsb. protected . horizontal scrollbar ; Definition at line 43 of file TGView.h. ◆ fMousePos. TGLongPosition TGView::fMousePos. protected . position of mouse ; Definition at line 33 of file TGView.h. ◆ fScrolling. Int_t TGView::fScrolling. protected . scrolling direction ; Definition at line 38 of file TGView.h. ◆ fScrollVal. TGLongPosition TGView::fScrollVal. protected . scroll value ; Definition at line 34 of file TGView.h. ◆ fVirtualSize. TGDimension TGView::fVirtualSize. protected . the current virtual window size ; Definition at line 35 of file TGView.h. ◆ fVisible. TGLongPosition TGView::fVisible. protected . position of visible region ; Definition at line 32 of file TGView.h. ◆ fVsb. TGVScrollBar* TGView::fVsb. protected . vertical scrollbar ; Definition at line 44 of file TGView.h. ◆ fWhiteGC. TGGC TGView::fWhiteGC. protected . graphics context used for scrolling generates GraphicsExposure events ; Definition at line 46",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGView.html:42355,expose,exposed,42355,doc/master/classTGView.html,https://root.cern,https://root.cern/doc/master/classTGView.html,1,['expose'],['exposed']
Security,"3 }; 2224 //if (fClassInfo==0 && element->IsBase()) {; 2225 // if (fBase==0) fBase = new TList;; 2226 // TClass *base = element->GetClassPointer();; 2227 // fBase->Add(new TBaseClass(this, cl, eoffset));; 2228 //}; 2229 }; 2230 // The base classes must added last on the list of real data (to help with ambiguous data member names); 2231 next.Reset();; 2232 while ((element = (TStreamerElement*)next())) {; 2233 Int_t etype = element->GetType();; 2234 if (element->IsBase() || etype == TVirtualStreamerInfo::kBase) {; 2235 //base class; 2236 Longptr_t eoffset = element->GetOffset();; 2237 TClass *cle = element->GetClassPointer();; 2238 if (cle) cle->BuildEmulatedRealData(name,offset+eoffset,cl, isTransient);; 2239 }; 2240 }; 2241}; 2242 ; 2243 ; 2244////////////////////////////////////////////////////////////////////////////////; 2245/// Calculate the offset between an object of this class to; 2246/// its base class TObject. The pointer can be adjusted by; 2247/// that offset to access any virtual method of TObject like; 2248/// Streamer() and ShowMembers().; 2249 ; 2250void TClass::CalculateStreamerOffset() const; 2251{; 2252 R__LOCKGUARD(gInterpreterMutex);; 2253 if (!fIsOffsetStreamerSet && HasInterpreterInfo()) {; 2254 // When called via TMapFile (e.g. Update()) make sure that the dictionary; 2255 // gets allocated on the heap and not in the mapped file.; 2256 ; 2257 TMmallocDescTemp setreset;; 2258 fOffsetStreamer = const_cast<TClass*>(this)->GetBaseClassOffsetRecurse(TObject::Class());; 2259 if (fStreamerType == kTObject) {; 2260 fStreamerImpl = &TClass::StreamerTObjectInitialized;; 2261 }; 2262 fIsOffsetStreamerSet = kTRUE;; 2263 }; 2264}; 2265 ; 2266 ; 2267////////////////////////////////////////////////////////////////////////////////; 2268/// Call ShowMembers() on the obj of this class type, passing insp and parent.; 2269/// isATObject is -1 if unknown, 0 if it is not a TObject, and 1 if it is a TObject.; 2270/// The function returns whether it was able to call ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:85078,access,access,85078,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['access'],['access']
Security,"3, or; 554a THnSparse. See the Projection() members. To only project parts of the; 555histogram, call; 556 ; 557 THnSparse::GetAxis(12)->SetRange(from_bin, to_bin);; 558 ; 559## Internal Representation; 560An entry for a filled bin consists of its n-dimensional coordinates and; 561its bin content. The coordinates are compacted to use as few bits as; 562possible; e.g. a histogram with 10 bins in x and 20 bins in y will only; 563use 4 bits for the x representation and 5 bits for the y representation.; 564This is handled by the internal class THnSparseCompactBinCoord.; 565Bin data (content and coordinates) are allocated in chunks of size; 566fChunkSize; this parameter can be set when constructing a THnSparse. Each; 567chunk is represented by an object of class THnSparseArrayChunk.; 568 ; 569Translation from an n-dimensional bin coordinate to the linear index within; 570the chunks is done by GetBin(). It creates a hash from the compacted bin; 571coordinates (the hash of a bin coordinate is the compacted coordinate itself; 572if it takes less than 8 bytes, the size of a Long64_t.; 573This hash is used to lookup the linear index in the TExMap member fBins;; 574the coordinates of the entry fBins points to is compared to the coordinates; 575passed to GetBin(). If they do not match, these two coordinates have the same; 576hash - which is extremely unlikely but (for the case where the compact bin; 577coordinates are larger than 4 bytes) possible. In this case, fBinsContinued; 578contains a chain of linear indexes with the same hash. Iterating through this; 579chain and comparing each bin coordinates with the one passed to GetBin() will; 580retrieve the matching bin.; 581*/; 582 ; 583 ; 584ClassImp(THnSparse);; 585 ; 586////////////////////////////////////////////////////////////////////////////////; 587/// Construct an empty THnSparse.; 588 ; 589THnSparse::THnSparse():; 590 fChunkSize(1024), fFilledBins(0), fCompactCoord(nullptr); 591{; 592 fBinContent.SetOwner();; 593}; 594 ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THnSparse_8cxx_source.html:21439,hash,hash,21439,doc/master/THnSparse_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THnSparse_8cxx_source.html,2,['hash'],['hash']
Security,"3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:5966,access,access,5966,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,4,['access'],['access']
Security,"3,ROOT::Math::MatRepStd<double,4,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:5938,access,access,5938,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,2,['access'],['access']
Security,"3/4]. template<class IT > . void ROOT::Math::LorentzRotation::GetComponents ; (; IT ; begin, . IT ; end . ); const. inline . Get the 16 matrix components into data specified by an iterator begin and another to the end of the desired data (16 past start). ; Definition at line 270 of file LorentzRotation.h. ◆ GetComponents() [4/4]. void ROOT::Math::LorentzRotation::GetComponents ; (; Scalar & ; xx, . Scalar & ; xy, . Scalar & ; xz, . Scalar & ; xt, . Scalar & ; yx, . Scalar & ; yy, . Scalar & ; yz, . Scalar & ; yt, . Scalar & ; zx, . Scalar & ; zy, . Scalar & ; zz, . Scalar & ; zt, . Scalar & ; tx, . Scalar & ; ty, . Scalar & ; tz, . Scalar & ; tt . ); const. inline . Get the sixteen components into sixteen scalars. ; Definition at line 334 of file LorentzRotation.h. ◆ GetRotationMatrix(). template<class ForeignMatrix > . void ROOT::Math::LorentzRotation::GetRotationMatrix ; (; ForeignMatrix & ; m); const. inline . Get components into a linear algebra matrix of size at least 4x4, which must support operator()(i,j) for write access to elements (0,0) thru (3,3). ; Definition at line 309 of file LorentzRotation.h. ◆ Inverse(). LorentzRotation ROOT::Math::LorentzRotation::Inverse ; (; ); const. Return inverse of a rotation. ; Definition at line 186 of file LorentzRotation.cxx. ◆ Invert(). void ROOT::Math::LorentzRotation::Invert ; (; ). Invert a Lorentz rotation in place. ; Definition at line 175 of file LorentzRotation.cxx. ◆ operator!=(). bool ROOT::Math::LorentzRotation::operator!= ; (; const LorentzRotation & ; rhs); const. inline . Definition at line 454 of file LorentzRotation.h. ◆ operator()() [1/3]. template<class Foreign4Vector > . Foreign4Vector ROOT::Math::LorentzRotation::operator() ; (; const Foreign4Vector & ; v); const. inline . Lorentz transformation operation on an arbitrary 4-vector v. ; Preconditions: v must implement methods x(), y(), z(), and t() and the arbitrary vector type must have a constructor taking (x,y,z,t) ; Definition at line 382 of file Lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzRotation.html:14442,access,access,14442,doc/master/classROOT_1_1Math_1_1LorentzRotation.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzRotation.html,1,['access'],['access']
Security,"30/// ~~~ {.cpp}; 631/// TVirtualFitter::Fitter(mygraph)->SetFCN(MyFittingFunction); 632/// ~~~; 633/// where MyFittingFunction is of type:; 634/// ~~~ {.cpp}; 635/// extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; 636/// ~~~; 637///; 638/// ### Access to the fit result; 639///; 640/// The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; 641/// By default the TFitResultPtr contains only the status of the fit and it converts; 642/// automatically to an integer. If the option ""S"" is instead used, TFitResultPtr contains; 643/// the TFitResult and behaves as a smart pointer to it. For example one can do:; 644/// ~~~ {.cpp}; 645/// TFitResultPtr r = graph->Fit(""myFunc"",""S"");; 646/// TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; 647/// Double_t par0 = r->Parameter(0); // retrieve the value for the parameter 0; 648/// Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; 649/// r->Print(""V""); // print full information of fit including covariance matrix; 650/// r->Write(); // store the result in a file; 651/// ~~~; 652///; 653/// The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; 654/// from the fitted function.; 655///; 656/// ### Associated functions; 657///; 658/// One or more object (typically a TF1*) can be added to the list; 659/// of functions (fFunctions) associated to each graph.; 660/// When TGraph::Fit is invoked, the fitted function is added to this list.; 661/// Given a graph gr, one can retrieve an associated function; 662/// with:; 663/// ~~~ {.cpp}; 664/// TF1 *myfunc = gr->GetFunction(""myfunc"");; 665/// ~~~; 666///; 667/// If the graph is made persistent, the list of; 668/// associated functions is also persistent. Given a pointer (see above); 669/// to an associated function myfunc, one can retrieve the function/fit; 670/// parameters with calls such as:; 671/// ~~~ {.cpp}; 672/// Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMultiGraph_8cxx_source.html:20766,access,access,20766,doc/master/TMultiGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMultiGraph_8cxx_source.html,1,['access'],['access']
Security,"32 shortform = kFALSE;; 233 out += ""<"";; 234 if (fRuleType==kReadRule) { out += ""read ""; end = ""</read>""; }; 235 else if (fRuleType==kReadRawRule) { out += ""readraw ""; end = ""</readraw>""; }; 236 else { out += ""-- ""; end = ""-->""; }; 237 ; 238 } else {; 239 if (!shortform || fRuleType!=kReadRule) {; 240 out += ""type="";; 241 if (fRuleType==kReadRule) out += ""read "";; 242 else if (fRuleType==kReadRawRule) out += ""readraw "";; 243 else out += "" "";; 244 }; 245 }; 246 if (!shortform || (fSourceClass != fTargetClass) ) {; 247 out += ""sourceClass=\"""" + fSourceClass + ""\"" "";; 248 out += ""targetClass=\"""" + fTargetClass + ""\"" "";; 249 } else {; 250 out += fSourceClass + "" "";; 251 }; 252 if (shortform && fTarget == fSource) {; 253 out += fSource + "" "";; 254 }; 255 if (!shortform || (fVersion != ""[1-]"")) {; 256 if (fVersion.Length()) out += ""version=\"""" + fVersion + ""\"" "";; 257 }; 258 if (fChecksum.Length()) out += ""checksum=\"""" + fChecksum + ""\"" "";; 259 if (!shortform || fTarget != fSource) {; 260 out += ""source=\"""" + fSource + ""\"" "";; 261 out += ""target=\"""" + fTarget + ""\"" "";; 262 }; 263 if (fInclude.Length()) out += ""include=\"""" + fInclude + ""\"" "";; 264 if (fAttributes.Length()) out += ""attributes=\"""" + fAttributes + ""\"" "";; 265 if (xmlform) {; 266 out += ""> "";; 267 }; 268 if (xmlform) {; 269 if (fCode.Length()) {; 270 out += ""\n<![CDATA[ { "" + fCode + "" ]]>\n "";; 271 } else if (fReadFuncPtr) {; 272 // Can we guess?; 273 // out += ""code=\"" + nameof(fReadFuncPtr) + ""\"" "";; 274 } else if (fReadRawFuncPtr) {; 275 // Can we guess?; 276 // out += ""code=\"" + nameof(fReadRawFuncPtr) + ""\"" "";; 277 }; 278 } else {; 279 if (fCode.Length()) {; 280 out += ""code=\""{"" + fCode + ""}\"" "";; 281 } else if (fReadFuncPtr) {; 282 // Can we guess?; 283 // out += ""code=\"" + nameof(fReadFuncPtr) + ""\"" "";; 284 } else if (fReadRawFuncPtr) {; 285 // Can we guess?; 286 // out += ""code=\"" + nameof(fReadRawFuncPtr) + ""\"" "";; 287 }; 288 }; 289 if (xmlform) {; 290 out += end;; 291 }; 292}; 293 ; 294////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRule_8cxx_source.html:8169,checksum,checksum,8169,doc/master/TSchemaRule_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRule_8cxx_source.html,1,['checksum'],['checksum']
Security,"3247/// a buffer with a size at least equal to the number of parameters.; 3248/// Note that the result buffer needs to be initialized to zero before passed to this function.; 3249void TFormula::GradientPar(const Double_t *x, Double_t *result) {; 3250 const Double_t *vars = (x) ? x : fClingVariables.data();; 3251 const Double_t *pars = (fNpar <= 0) ? nullptr : fClingParameters.data();; 3252 CallCladFunction(fGradFuncPtr, vars, pars, result, fNpar);; 3253}; 3254 ; 3255/// returns true on success.; 3256bool TFormula::GenerateHessianPar(); 3257{; 3258 // We already have generated the hessian.; 3259 if (fHessFuncPtr); 3260 return true;; 3261 ; 3262 if (HasHessianGenerationFailed()); 3263 return false;; 3264 ; 3265 IncludeCladRuntime(fIsCladRuntimeIncluded);; 3266 ; 3267 // Check if the hessian request was made as part of another TFormula.; 3268 // This can happen when we create multiple TFormula objects with the same; 3269 // formula. In that case, the hasher will give identical id and we can; 3270 // reuse the already generated hessian function.; 3271 if (!functionExists(GetHessianFuncName())) {; 3272 std::string indexes = (fNpar - 1 == 0) ? ""0"" : std::string(""0:""); 3273 + std::to_string(fNpar - 1);; 3274 std::string HessianCall; 3275 (""clad::hessian("" + std::string(fClingName.Data()) + "", \""p[""; 3276 + indexes + ""]\"" );"");; 3277 if (!DeclareGenerationInput(GetHessianFuncName(), HessianCall,; 3278 fHessGenerationInput)); 3279 return false;; 3280 }; 3281 ; 3282 fHessFuncPtr = GetFuncPtr(GetHessianFuncName(), fNpar, fNdim, fVectorized);; 3283 return true;; 3284}; 3285 ; 3286void TFormula::HessianPar(const Double_t *x, TFormula::CladStorage& result); 3287{; 3288 if (DoEval(x) == TMath::QuietNaN()); 3289 return;; 3290 ; 3291 if (!fClingInitialized) {; 3292 Error(""HessianPar"", ""Could not initialize the formula!"");; 3293 return;; 3294 }; 3295 ; 3296 if (!GenerateHessianPar()) {; 3297 Error(""HessianPar"", ""Could not generate a hessian for the formula %s!"",; 3298 fClingName.Data",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:124464,hash,hasher,124464,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,1,['hash'],['hasher']
Security,"3312 if (sscanf(vec->ptr, ""[%49[^]]]%n"", ad, &n) != 1) {; 13313 n = 0;; 13314 }; 13315 }; 13316 ; 13317 if ((n <= 0) && no_strict) {; 13318 /* no square brackets? */; 13319 p = strchr(vec->ptr, '/');; 13320 if (p && (p < (vec->ptr + vec->len))) {; 13321 if (((size_t)(p - vec->ptr) < sizeof(ad)); 13322 && (sscanf(p, ""/%u%n"", &slash, &n) == 1)) {; 13323 n += (int)(p - vec->ptr);; 13324 mg_strlcpy(ad, vec->ptr, (size_t)(p - vec->ptr) + 1);; 13325 } else {; 13326 n = 0;; 13327 }; 13328 } else if (vec->len < sizeof(ad)) {; 13329 n = (int)vec->len;; 13330 slash = 128;; 13331 mg_strlcpy(ad, vec->ptr, vec->len + 1);; 13332 }; 13333 }; 13334 ; 13335 if ((n > 0) && ((size_t)n == vec->len) && (slash < 129)) {; 13336 p = ad;; 13337 c = 0;; 13338 /* zone indexes are unsupported, at least two colons are needed */; 13339 while (isxdigit((unsigned char)*p) || (*p == '.') || (*p == ':')) {; 13340 if (*(p++) == ':') {; 13341 c++;; 13342 }; 13343 }; 13344 if ((*p == '\0') && (c >= 2)) {; 13345 struct sockaddr_in6 sin6;; 13346 unsigned int i;; 13347 ; 13348 /* for strict validation, an actual IPv6 argument is needed */; 13349 if (sa->sa.sa_family != AF_INET6) {; 13350 return 0;; 13351 }; 13352 if (mg_inet_pton(AF_INET6, ad, &sin6, sizeof(sin6), 0)) {; 13353 /* IPv6 format */; 13354 for (i = 0; i < 16; i++) {; 13355 uint8_t ip = sa->sin6.sin6_addr.s6_addr[i];; 13356 uint8_t net = sin6.sin6_addr.s6_addr[i];; 13357 uint8_t mask = 0;; 13358 ; 13359 if (8 * i + 8 < slash) {; 13360 mask = 0xFFu;; 13361 } else if (8 * i < slash) {; 13362 mask = (uint8_t)(0xFFu << (8 * i + 8 - slash));; 13363 }; 13364 if ((ip & mask) != net) {; 13365 return 0;; 13366 }; 13367 }; 13368 return 1;; 13369 }; 13370 }; 13371 }; 13372 }; 13373#else; 13374 (void)no_strict;; 13375#endif; 13376 ; 13377 /* malformed */; 13378 return -1;; 13379}; 13380 ; 13381 ; 13382static int; 13383set_throttle(const char *spec, const union usa *rsa, const char *uri); 13384{; 13385 int throttle = 0;; 13386 struct vec vec, val;; 13387 ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:390285,validat,validation,390285,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['validat'],['validation']
Security,"3313 if (sscanf(vec->ptr, ""[%49[^]]]%n"", ad, &n) != 1) {; 13314 n = 0;; 13315 }; 13316 }; 13317 ; 13318 if ((n <= 0) && no_strict) {; 13319 /* no square brackets? */; 13320 p = strchr(vec->ptr, '/');; 13321 if (p && (p < (vec->ptr + vec->len))) {; 13322 if (((size_t)(p - vec->ptr) < sizeof(ad)); 13323 && (sscanf(p, ""/%u%n"", &slash, &n) == 1)) {; 13324 n += (int)(p - vec->ptr);; 13325 mg_strlcpy(ad, vec->ptr, (size_t)(p - vec->ptr) + 1);; 13326 } else {; 13327 n = 0;; 13328 }; 13329 } else if (vec->len < sizeof(ad)) {; 13330 n = (int)vec->len;; 13331 slash = 128;; 13332 mg_strlcpy(ad, vec->ptr, vec->len + 1);; 13333 }; 13334 }; 13335 ; 13336 if ((n > 0) && ((size_t)n == vec->len) && (slash < 129)) {; 13337 p = ad;; 13338 c = 0;; 13339 /* zone indexes are unsupported, at least two colons are needed */; 13340 while (isxdigit((unsigned char)*p) || (*p == '.') || (*p == ':')) {; 13341 if (*(p++) == ':') {; 13342 c++;; 13343 }; 13344 }; 13345 if ((*p == '\0') && (c >= 2)) {; 13346 struct sockaddr_in6 sin6;; 13347 unsigned int i;; 13348 ; 13349 /* for strict validation, an actual IPv6 argument is needed */; 13350 if (sa->sa.sa_family != AF_INET6) {; 13351 return 0;; 13352 }; 13353 if (mg_inet_pton(AF_INET6, ad, &sin6, sizeof(sin6), 0)) {; 13354 /* IPv6 format */; 13355 for (i = 0; i < 16; i++) {; 13356 uint8_t ip = sa->sin6.sin6_addr.s6_addr[i];; 13357 uint8_t net = sin6.sin6_addr.s6_addr[i];; 13358 uint8_t mask = 0;; 13359 ; 13360 if (8 * i + 8 < slash) {; 13361 mask = 0xFFu;; 13362 } else if (8 * i < slash) {; 13363 mask = (uint8_t)(0xFFu << (8 * i + 8 - slash));; 13364 }; 13365 if ((ip & mask) != net) {; 13366 return 0;; 13367 }; 13368 }; 13369 return 1;; 13370 }; 13371 }; 13372 }; 13373 }; 13374#else; 13375 (void)no_strict;; 13376#endif; 13377 ; 13378 /* malformed */; 13379 return -1;; 13380}; 13381 ; 13382 ; 13383static int; 13384set_throttle(const char *spec, const union usa *rsa, const char *uri); 13385{; 13386 int throttle = 0;; 13387 struct vec vec, val;; 13388 ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:390318,validat,validation,390318,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['validat'],['validation']
Security,"334; TClass::kExternal@ kExternalDefinition TClass.h:334; TClass::kForeign@ kForeignDefinition TClass.h:334; TClass::kInstrumented@ kInstrumentedDefinition TClass.h:334; TClass::kTObject@ kTObjectDefinition TClass.h:334; TClass::AddRulestatic Bool_t AddRule(const char *rule)Add a schema evolution customization rule.Definition TClass.cxx:1890; TClass::IsTObjectBool_t IsTObject() constReturn kTRUE is the class inherits from TObject.Definition TClass.cxx:5938; TClass::RemoveClassstatic void RemoveClass(TClass *cl)static: Remove a class from the list and map of classesDefinition TClass.cxx:520; TClass::HasLocalHashMemberBool_t HasLocalHashMember() constReturns true if this class has an definition and/or overload of the member function Hash.Definition TClass.cxx:7421; TClass::DeleteArrayvoid DeleteArray(void *ary, Bool_t dtorOnly=kFALSE)Explicitly call operator delete[] for an array.Definition TClass.cxx:5529; TClass::GetConvStreamerFuncClassConvStreamerFunc_t GetConvStreamerFunc() constGet a wrapper/accessor function around this class custom conversion streamer (member function).Definition TClass.cxx:2947; TClass::IsForeignBool_t IsForeign() constReturn kTRUE is the class is Foreign (the class does not have a Streamer method).Definition TClass.cxx:5947; TClass::GetClassInfoClassInfo_t * GetClassInfo() constDefinition TClass.h:433; TClass::fDeleteROOT::DelFunc_t fDeleteDefinition TClass.h:237; TClass::fAllPubDataTViewPubDataMembers * fAllPubDataDefinition TClass.h:209; TClass::fClassInfoClassInfo_t * fClassInfoDefinition TClass.h:222; TClass::GetStreamerInfoTVirtualStreamerInfo * GetStreamerInfo(Int_t version=0, Bool_t isTransient=kFALSE) constreturns a pointer to the TVirtualStreamerInfo object for version If the object does not exist,...Definition TClass.cxx:4599; TClass::HasConsistentHashMemberBool_t HasConsistentHashMember()Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarch...Definition TClass.h:501; TClass::AdoptStre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:331013,access,accessor,331013,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['access'],['accessor']
Security,"334; TClass::kExternal@ kExternalDefinition TClass.h:334; TClass::kForeign@ kForeignDefinition TClass.h:334; TClass::kInstrumented@ kInstrumentedDefinition TClass.h:334; TClass::kTObject@ kTObjectDefinition TClass.h:334; TClass::AddRulestatic Bool_t AddRule(const char *rule)Add a schema evolution customization rule.Definition TClass.cxx:1957; TClass::IsTObjectBool_t IsTObject() constReturn kTRUE is the class inherits from TObject.Definition TClass.cxx:6005; TClass::RemoveClassstatic void RemoveClass(TClass *cl)static: Remove a class from the list and map of classesDefinition TClass.cxx:585; TClass::HasLocalHashMemberBool_t HasLocalHashMember() constReturns true if this class has an definition and/or overload of the member function Hash.Definition TClass.cxx:7488; TClass::DeleteArrayvoid DeleteArray(void *ary, Bool_t dtorOnly=kFALSE)Explicitly call operator delete[] for an array.Definition TClass.cxx:5596; TClass::GetConvStreamerFuncClassConvStreamerFunc_t GetConvStreamerFunc() constGet a wrapper/accessor function around this class custom conversion streamer (member function).Definition TClass.cxx:3014; TClass::IsForeignBool_t IsForeign() constReturn kTRUE is the class is Foreign (the class does not have a Streamer method).Definition TClass.cxx:6014; TClass::GetClassInfoClassInfo_t * GetClassInfo() constDefinition TClass.h:433; TClass::fDeleteROOT::DelFunc_t fDeleteDefinition TClass.h:237; TClass::fAllPubDataTViewPubDataMembers * fAllPubDataDefinition TClass.h:209; TClass::fClassInfoClassInfo_t * fClassInfoDefinition TClass.h:222; TClass::GetStreamerInfoTVirtualStreamerInfo * GetStreamerInfo(Int_t version=0, Bool_t isTransient=kFALSE) constreturns a pointer to the TVirtualStreamerInfo object for version If the object does not exist,...Definition TClass.cxx:4666; TClass::HasConsistentHashMemberBool_t HasConsistentHashMember()Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarch...Definition TClass.h:501; TClass::AdoptStre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:333651,access,accessor,333651,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['access'],['accessor']
Security,"335 if (ret != 1) {; 10336 /* Return 0 means, path itself is a directory. */; 10337 return 0;; 10338 }; 10339 ; 10340 if (mg_fopen(conn, path, MG_FOPEN_MODE_WRITE, &fi) == 0) {; 10341 return -12;; 10342 }; 10343 ; 10344 ret = mg_read(conn, buf, sizeof(buf));; 10345 while (ret > 0) {; 10346 n = (int)fwrite(buf, 1, (size_t)ret, fi.access.fp);; 10347 if (n != ret) {; 10348 (void)mg_fclose(; 10349 &fi.access); /* File is bad and will be removed anyway. */; 10350 remove_bad_file(conn, path);; 10351 return -13;; 10352 }; 10353 len += ret;; 10354 ret = mg_read(conn, buf, sizeof(buf));; 10355 }; 10356 ; 10357 /* File is open for writing. If fclose fails, there was probably an; 10358 * error flushing the buffer to disk, so the file on disk might be; 10359 * broken. Delete it and return an error to the caller. */; 10360 if (mg_fclose(&fi.access) != 0) {; 10361 remove_bad_file(conn, path);; 10362 return -14;; 10363 }; 10364 ; 10365 return len;; 10366}; 10367#endif /* NO_FILESYSTEMS */; 10368 ; 10369 ; 10370/* Parse a buffer:; 10371 * Forward the string pointer till the end of a word, then; 10372 * terminate it and forward till the begin of the next word.; 10373 */; 10374static int; 10375skip_to_end_of_word_and_terminate(char **ppw, int eol); 10376{; 10377 /* Forward until a space is found - use isgraph here */; 10378 /* See http://www.cplusplus.com/reference/cctype/ */; 10379 while (isgraph((unsigned char)**ppw)) {; 10380 (*ppw)++;; 10381 }; 10382 ; 10383 /* Check end of word */; 10384 if (eol) {; 10385 /* must be a end of line */; 10386 if ((**ppw != '\r') && (**ppw != '\n')) {; 10387 return -1;; 10388 }; 10389 } else {; 10390 /* must be a end of a word, but not a line */; 10391 if (**ppw != ' ') {; 10392 return -1;; 10393 }; 10394 }; 10395 ; 10396 /* Terminate and forward to the next word */; 10397 do {; 10398 **ppw = 0;; 10399 (*ppw)++;; 10400 } while (isspace((unsigned char)**ppw));; 10401 ; 10402 /* Check after term */; 10403 if (!eol) {; 10404 /* if it's not the end of li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:297912,access,access,297912,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['access'],['access']
Security,"336 if (ret != 1) {; 10337 /* Return 0 means, path itself is a directory. */; 10338 return 0;; 10339 }; 10340 ; 10341 if (mg_fopen(conn, path, MG_FOPEN_MODE_WRITE, &fi) == 0) {; 10342 return -12;; 10343 }; 10344 ; 10345 ret = mg_read(conn, buf, sizeof(buf));; 10346 while (ret > 0) {; 10347 n = (int)fwrite(buf, 1, (size_t)ret, fi.access.fp);; 10348 if (n != ret) {; 10349 (void)mg_fclose(; 10350 &fi.access); /* File is bad and will be removed anyway. */; 10351 remove_bad_file(conn, path);; 10352 return -13;; 10353 }; 10354 len += ret;; 10355 ret = mg_read(conn, buf, sizeof(buf));; 10356 }; 10357 ; 10358 /* File is open for writing. If fclose fails, there was probably an; 10359 * error flushing the buffer to disk, so the file on disk might be; 10360 * broken. Delete it and return an error to the caller. */; 10361 if (mg_fclose(&fi.access) != 0) {; 10362 remove_bad_file(conn, path);; 10363 return -14;; 10364 }; 10365 ; 10366 return len;; 10367}; 10368#endif /* NO_FILESYSTEMS */; 10369 ; 10370 ; 10371/* Parse a buffer:; 10372 * Forward the string pointer till the end of a word, then; 10373 * terminate it and forward till the begin of the next word.; 10374 */; 10375static int; 10376skip_to_end_of_word_and_terminate(char **ppw, int eol); 10377{; 10378 /* Forward until a space is found - use isgraph here */; 10379 /* See http://www.cplusplus.com/reference/cctype/ */; 10380 while (isgraph((unsigned char)**ppw)) {; 10381 (*ppw)++;; 10382 }; 10383 ; 10384 /* Check end of word */; 10385 if (eol) {; 10386 /* must be a end of line */; 10387 if ((**ppw != '\r') && (**ppw != '\n')) {; 10388 return -1;; 10389 }; 10390 } else {; 10391 /* must be a end of a word, but not a line */; 10392 if (**ppw != ' ') {; 10393 return -1;; 10394 }; 10395 }; 10396 ; 10397 /* Terminate and forward to the next word */; 10398 do {; 10399 **ppw = 0;; 10400 (*ppw)++;; 10401 } while (isspace((unsigned char)**ppw));; 10402 ; 10403 /* Check after term */; 10404 if (!eol) {; 10405 /* if it's not the end of li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:297945,access,access,297945,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['access'],['access']
Security,"34 ; 14335 if (i > 0) {; 14336 /* Do nothing, callback has served the request. Store; 14337 * then return value as status code for the log and discard; 14338 * all data from the client not used by the callback. */; 14339 conn->status_code = i;; 14340 if (!conn->must_close) {; 14341 discard_unread_request_data(conn);; 14342 }; 14343 } else {; 14344 /* The handler did NOT handle the request. */; 14345 /* Some proper reactions would be:; 14346 * a) close the connections without sending anything; 14347 * b) send a 404 not found; 14348 * c) try if there is a file matching the URI; 14349 * It would be possible to do a, b or c in the callback; 14350 * implementation, and return 1 - we cannot do anything; 14351 * here, that is not possible in the callback.; 14352 *; 14353 * TODO: What would be the best reaction here?; 14354 * (Note: The reaction may change, if there is a better; 14355 * idea.); 14356 */; 14357 ; 14358 /* For the moment, use option c: We look for a proper file,; 14359 * but since a file request is not always a script resource,; 14360 * the authorization check might be different. */; 14361 interpret_uri(conn,; 14362 path,; 14363 sizeof(path),; 14364 &file.stat,; 14365 &is_found,; 14366 &is_script_resource,; 14367 &is_websocket_request,; 14368 &is_put_or_delete_request,; 14369 &is_template_text_file);; 14370 callback_handler = NULL;; 14371 ; 14372 /* Here we are at a dead end:; 14373 * According to URI matching, a callback should be; 14374 * responsible for handling the request,; 14375 * we called it, but the callback declared itself; 14376 * not responsible.; 14377 * We use a goto here, to get out of this dead end,; 14378 * and continue with the default handling.; 14379 * A goto here is simpler and better to understand; 14380 * than some curious loop. */; 14381 goto no_callback_resource;; 14382 }; 14383 } else {; 14384#if defined(USE_WEBSOCKET); 14385 handle_websocket_request(conn,; 14386 path,; 14387 is_callback_resource,; 14388 subprotocols,; 14389 ws_conne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:422760,authoriz,authorization,422760,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['authoriz'],['authorization']
Security,"35 ; 14336 if (i > 0) {; 14337 /* Do nothing, callback has served the request. Store; 14338 * then return value as status code for the log and discard; 14339 * all data from the client not used by the callback. */; 14340 conn->status_code = i;; 14341 if (!conn->must_close) {; 14342 discard_unread_request_data(conn);; 14343 }; 14344 } else {; 14345 /* The handler did NOT handle the request. */; 14346 /* Some proper reactions would be:; 14347 * a) close the connections without sending anything; 14348 * b) send a 404 not found; 14349 * c) try if there is a file matching the URI; 14350 * It would be possible to do a, b or c in the callback; 14351 * implementation, and return 1 - we cannot do anything; 14352 * here, that is not possible in the callback.; 14353 *; 14354 * TODO: What would be the best reaction here?; 14355 * (Note: The reaction may change, if there is a better; 14356 * idea.); 14357 */; 14358 ; 14359 /* For the moment, use option c: We look for a proper file,; 14360 * but since a file request is not always a script resource,; 14361 * the authorization check might be different. */; 14362 interpret_uri(conn,; 14363 path,; 14364 sizeof(path),; 14365 &file.stat,; 14366 &is_found,; 14367 &is_script_resource,; 14368 &is_websocket_request,; 14369 &is_put_or_delete_request,; 14370 &is_template_text_file);; 14371 callback_handler = NULL;; 14372 ; 14373 /* Here we are at a dead end:; 14374 * According to URI matching, a callback should be; 14375 * responsible for handling the request,; 14376 * we called it, but the callback declared itself; 14377 * not responsible.; 14378 * We use a goto here, to get out of this dead end,; 14379 * and continue with the default handling.; 14380 * A goto here is simpler and better to understand; 14381 * than some curious loop. */; 14382 goto no_callback_resource;; 14383 }; 14384 } else {; 14385#if defined(USE_WEBSOCKET); 14386 handle_websocket_request(conn,; 14387 path,; 14388 is_callback_resource,; 14389 subprotocols,; 14390 ws_conne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:422793,authoriz,authorization,422793,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['authoriz'],['authorization']
Security,"35 template <class IT>; 236 void GetCoordinates( IT begin) const {; 237 Scalar a = Scalar(0);; 238 Scalar b = Scalar(0);; 239 Scalar c = Scalar(0);; 240 GetCoordinates(a, b, c);; 241 *begin++ = a;; 242 *begin++ = b;; 243 *begin = c;; 244 }; 245 ; 246 /**; 247 set the values of the vector from the cartesian components (x,y,z); 248 (if the vector is held in polar or cylindrical eta coordinates,; 249 then (x, y, z) are converted to that form); 250 */; 251 DisplacementVector3D<CoordSystem, Tag>& SetXYZ (Scalar a, Scalar b, Scalar c) {; 252 fCoordinates.SetXYZ(a, b, c);; 253 return *this;; 254 }; 255 ; 256 // ------------------- Equality -----------------; 257 ; 258 /**; 259 Exact equality; 260 */; 261 bool operator==(const DisplacementVector3D & rhs) const {; 262 return fCoordinates==rhs.fCoordinates;; 263 }; 264 bool operator!= (const DisplacementVector3D & rhs) const {; 265 return !(operator==(rhs));; 266 }; 267 ; 268 // ------ Individual element access, in various coordinate systems ------; 269 ; 270 /**; 271 Dimension; 272 */; 273 unsigned int Dimension() const; 274 {; 275 return fDimension;; 276 };; 277 ; 278 /**; 279 Cartesian X, converting if necessary from internal coordinate system.; 280 */; 281 Scalar X() const { return fCoordinates.X(); }; 282 ; 283 /**; 284 Cartesian Y, converting if necessary from internal coordinate system.; 285 */; 286 Scalar Y() const { return fCoordinates.Y(); }; 287 ; 288 /**; 289 Cartesian Z, converting if necessary from internal coordinate system.; 290 */; 291 Scalar Z() const { return fCoordinates.Z(); }; 292 ; 293 /**; 294 Polar R, converting if necessary from internal coordinate system.; 295 */; 296 Scalar R() const { return fCoordinates.R(); }; 297 ; 298 /**; 299 Polar theta, converting if necessary from internal coordinate system.; 300 */; 301 Scalar Theta() const { return fCoordinates.Theta(); }; 302 ; 303 /**; 304 Polar phi, converting if necessary from internal coordinate system.; 305 */; 306 Scalar Phi() const { return fCoord",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2DisplacementVector3D_8h_source.html:8560,access,access,8560,doc/master/GenVector_2DisplacementVector3D_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2DisplacementVector3D_8h_source.html,1,['access'],['access']
Security,"39; ROOT::TVirtualRWMutex::Rewindvirtual std::unique_ptr< StateDelta > Rewind(const State &earlierState)=0; ROOT::TVirtualRWMutex::Applyvirtual void Apply(std::unique_ptr< StateDelta > &&delta)=0; ROOT::TVirtualRWMutex::GetStateBeforevirtual std::unique_ptr< State > GetStateBefore()=0; R; TADefinition TStructViewer.cxx:24; TApplication::ExecuteFilestatic Longptr_t ExecuteFile(const char *file, Int_t *error=nullptr, Bool_t keep=kFALSE)Execute a file containing a C++ macro (static method).Definition TApplication.cxx:1729; TApplication::GetApplicationImpvirtual TApplicationImp * GetApplicationImp()Definition TApplication.h:136; TApplication::IsCmdThreadvirtual Bool_t IsCmdThread()Definition TApplication.h:135; TBaseClassEach class (see TClass) has a linked list of its base class(es).Definition TBaseClass.h:33; TClassRefTClassRef is used to implement a permanent reference to a TClass object.Definition TClassRef.h:28; TClassTable::GetDictstatic DictFuncPtr_t GetDict(const char *cname)Given the class name returns the Dictionary() function of a class (uses hash of name).Definition TClassTable.cxx:674; TClassTable::GetProtoNormstatic TProtoClass * GetProtoNorm(const char *cname)Given the class normalized name returns the TClassProto object for the class.Definition TClassTable.cxx:770; TClassTable::GetDictNormstatic DictFuncPtr_t GetDictNorm(const char *cname)Given the normalized class name returns the Dictionary() function of a class (uses hash of name).Definition TClassTable.cxx:717; TClassTable::GetProtostatic TProtoClass * GetProto(const char *cname)Given the class name returns the TClassProto object for the class.Definition TClassTable.cxx:742; TClassTable::Checkstatic Bool_t Check(const char *cname, std::string &normname)Definition TClassTable.cxx:563; TClassTable::Addstatic void Add(const char *cname, Version_t id, const std::type_info &info, DictFuncPtr_t dict, Int_t pragmabits)Add a class to the class table (this is a static function).Definition TClassTable.cxx:398; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:397363,hash,hash,397363,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['hash'],['hash']
Security,"3; TGenCollectionProxy::Resizevirtual void Resize(UInt_t n, Bool_t force_delete)Resize the container.Definition TGenCollectionProxy.cxx:1169; TGenCollectionProxy::GetCollectionTypeInt_t GetCollectionType() const overrideReturn the type of collection see TClassEdit::ESTLType.Definition TGenCollectionProxy.cxx:993; TGenCollectionProxy::Clearvoid Clear(const char *opt="""") overrideClear the emulated collection.Definition TGenCollectionProxy.cxx:1136; TGenCollectionProxy::fProxyListProxies_t fProxyListStack of recursive proxies.Definition TGenCollectionProxy.h:317; TGenCollectionProxy::GetFunctionDeleteIteratorDeleteIterator_t GetFunctionDeleteIterator(Bool_t read=kTRUE) overrideSee typedef void (*DeleteIterator_t)(void *iter); If the sizeof iterator is greater than fgIteratorAr...Definition TGenCollectionProxy.cxx:1696; TGenCollectionProxy::SizeUInt_t Size() const overrideReturn the current size of the container.Definition TGenCollectionProxy.cxx:1153; TGenCollectionProxy::fDestructSizing_t fDestructContainer accessors: block destruct.Definition TGenCollectionProxy.h:307; TGenCollectionProxy::fCreateEnvMethod0 fCreateEnvMethod to allocate an Environment holder.Definition TGenCollectionProxy.h:310; TGenCollectionProxy::fValValue * fValDescriptor of the Value_type.Definition TGenCollectionProxy.h:312; TGenCollectionProxy::GetFunctionNextNext_t GetFunctionNext(Bool_t read=kTRUE) overrideSee typedef void* (*Next_t)(void *iter, void *end); iter and end should be pointer to respectively an...Definition TGenCollectionProxy.cxx:1670; TGenCollectionProxy::operator()virtual void operator()(TBuffer &refBuffer, void *pObject)TClassStreamer IO overload.Definition TGenCollectionProxy.cxx:1448; TGenCollectionProxy::fOnFileClassTClass * fOnFileClassOn file class.Definition TGenCollectionProxy.h:322; TGenCollectionProxy::fResizeSizing_t fResizeContainer accessors: resize container.Definition TGenCollectionProxy.h:303; TGenCollectionProxy::fConstructArrIterfunc_t fConstructContainer acce",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:81717,access,accessors,81717,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['access'],['accessors']
Security,"3> >(const ROOT::Math::SVector<float,3U*(3U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,3,3>fRep; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:5464,access,access,5464,root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,4,['access'],"['access', 'accessing']"
Security,"3> >(const ROOT::Math::SVector<float,4U*(3U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,4U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,4,3>fRep; static ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:5464,access,access,5464,root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,4,['access'],"['access', 'accessing']"
Security,"4 of file TListOfFunctions.cxx. ◆ MakeIterator(). TIterator * TListOfFunctions::MakeIterator ; (; Bool_t ; dir = kIterForward); const. overridevirtual . Return a list iterator. ; Reimplemented from TList.; Definition at line 451 of file TListOfFunctions.cxx. ◆ MapObject(). void TListOfFunctions::MapObject ; (; TObject * ; obj). private . Add pair<id, object> to the map of functions and their ids. ; Definition at line 51 of file TListOfFunctions.cxx. ◆ operator=(). TListOfFunctions & TListOfFunctions::operator= ; (; const TListOfFunctions & ; ). privatedelete . ◆ RecursiveRemove(). void TListOfFunctions::RecursiveRemove ; (; TObject * ; obj). overridevirtual . Remove object from this collection and recursively remove the object from all other objects (and collections). ; This function overrides TCollection::RecursiveRemove that calls the Remove function. THashList::Remove cannot be called because it uses the hash value of the hash table. This hash value is not available anymore when RecursiveRemove is called from the TObject destructor. ; Reimplemented from THashList.; Definition at line 328 of file TListOfFunctions.cxx. ◆ Remove() [1/2]. TObject * TListOfFunctions::Remove ; (; TObject * ; obj). overridevirtual . Remove object from the list. ; Reimplemented from THashList.; Definition at line 341 of file TListOfFunctions.cxx. ◆ Remove() [2/2]. TObject * TListOfFunctions::Remove ; (; TObjLink * ; lnk). overridevirtual . Remove object via its objlink from the list. ; Reimplemented from THashList.; Definition at line 357 of file TListOfFunctions.cxx. ◆ Streamer(). void TListOfFunctions::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the collection to or from the I/O buffer. ; Reimplemented from THashList. ◆ StreamerNVirtual(). void TListOfFunctions::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 102 of file TListOfFunctions.h. ◆ Unload() [1/2]. void TListOfFunctions::Unload ; (; ). Mark 'all func' as bei",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfFunctions.html:33160,hash,hash,33160,doc/master/classTListOfFunctions.html,https://root.cern,https://root.cern/doc/master/classTListOfFunctions.html,1,['hash'],['hash']
Security,"4 of file TRootSniffer.cxx. ◆ RegisterObject(). Bool_t TRootSniffer::RegisterObject ; (; const char * ; subfolder, . TObject * ; obj . ). Register object in subfolder structure. ; Parameters. subfoldercan have many levels like: TRootSniffer* sniff = new TRootSniffer(""sniff"");; sniff->RegisterObject(""my/sub/subfolder"", h1);; Such objects can be later found in ""Objects"" folder of sniffer like auto h1 = sniff->FindTObjectInHierarchy(""/Objects/my/sub/subfolder/h1"");; If subfolder name starts with '/', object will be registered starting from top folder. One could provide additional fields for registered objects For instance, setting ""_more"" field to true let browser explore objects members. For instance: TEvent* ev = new TEvent(""ev"");; sniff->RegisterObject(""Events"", ev);; sniff->SetItemField(""Events/ev"", ""_more"", ""true""); . Definition at line 1651 of file TRootSniffer.cxx. ◆ Restrict(). void TRootSniffer::Restrict ; (; const char * ; path, . const char * ; options . ). Restrict access to the specified location. ; Hides or provides read-only access to different parts of the hierarchy Restriction done base on user-name specified with http requests Options can be specified in URL style (separated with &) Following parameters can be specified: visible = [all|user(s)] - make item visible for all users or only specified user; hidden = [all|user(s)] - make item hidden from all users or only specified user; readonly = [all|user(s)] - make item read-only for all users or only specified user; allow = [all|user(s)] - make full access for all users or only specified user; allow_method = method(s) - allow method(s) execution even when readonly flag specified for the object; Like make command seen by all but can be executed only by admin sniff->Restrict(""/CmdReset"",""allow=admin"");; Or fully hide command from guest account sniff->Restrict(""/CmdRebin"",""hidden=guest""); . Definition at line 466 of file TRootSniffer.cxx. ◆ ScanCollection(). void TRootSniffer::ScanCollection ; (; TRootSniff",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootSniffer.html:35139,access,access,35139,doc/master/classTRootSniffer.html,https://root.cern,https://root.cern/doc/master/classTRootSniffer.html,1,['access'],['access']
Security,"4 of file TXMLFile.cxx. ◆ AddXmlLine(). Bool_t TXMLFile::AddXmlLine ; (; const char * ; line). Add just one line on the top of xml document For instance, line can contain special xml processing instructions Line should has correct xml syntax that later it can be decoded by xml parser To be parsed later by TXMLFile again, this line should contain either xml comments or xml processing instruction. ; Definition at line 998 of file TXMLFile.cxx. ◆ AddXmlStyleSheet(). Bool_t TXMLFile::AddXmlStyleSheet ; (; const char * ; href, . const char * ; type = ""text/css"", . const char * ; title = nullptr, . int ; alternate = -1, . const char * ; media = nullptr, . const char * ; charset = nullptr . ). Adds style sheet definition on the top of xml document Creates <?xml-stylesheet alternate=""yes"" title=""compact"" href=""small-base.css"" type=""text/css""?> Attributes href and type must be supplied, other attributes: title, alternate, media, charset are optional if alternate==0, attribute alternate=""no"" will be created, if alternate>0, attribute alternate=""yes"" if alternate<0, attribute will not be created This style sheet definition cannot be later access with TXMLFile methods. ; Definition at line 982 of file TXMLFile.cxx. ◆ Class(). static TClass * TXMLFile::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TXMLFile::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TXMLFile::Class_Version ; (; ). inlinestaticconstexpr . counter of created keys, used for keys id ; ReturnsVersion of this class ; Definition at line 140 of file TXMLFile.h. ◆ Close(). void TXMLFile::Close ; (; Option_t * ; option = """"). finalvirtual . Close a XML file For more comments see TFile::Close() function. ; Reimplemented from TFile.; Definition at line 299 of file TXMLFile.cxx. ◆ CombineNodesTree(). void TXMLFile::CombineNodesTree ; (; TDirectory * ; dir, . XMLNodePointer_t ; topnode, . Bool_t ; dolink . ). protecte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLFile.html:50159,access,access,50159,doc/master/classTXMLFile.html,https://root.cern,https://root.cern/doc/master/classTXMLFile.html,1,['access'],['access']
Security,"4, . const T & ; a5, . const T & ; a6, . const T & ; a7, . const T & ; a8, . const T & ; a9, . const T & ; a10 . ). construct a vector of size 10 from 10 scalar values ; Definition at line 178 of file SVector.icc. Member Function Documentation. ◆ apply(). template<class T , unsigned int D> . T ROOT::Math::SVector< T, D >::apply ; (; unsigned int ; i); const. inline . access the parse tree. Index starts from zero ; Definition at line 537 of file SVector.icc. ◆ Array() [1/2]. template<class T , unsigned int D> . T * ROOT::Math::SVector< T, D >::Array. inline . return non-const pointer to internal array ; Definition at line 543 of file SVector.icc. ◆ Array() [2/2]. template<class T , unsigned int D> . const T * ROOT::Math::SVector< T, D >::Array. inline . return read-only pointer to internal array ; Definition at line 540 of file SVector.icc. ◆ At() [1/2]. template<class T , unsigned int D> . T & ROOT::Math::SVector< T, D >::At ; (; unsigned int ; i). inline . read/write access of vector elements with check on index. Index starts from 0. ; Definition at line 602 of file SVector.icc. ◆ At() [2/2]. template<class T , unsigned int D> . const T & ROOT::Math::SVector< T, D >::At ; (; unsigned int ; i); const. inline . read-only access of vector elements with check on index. Index starts from 0. ; Definition at line 596 of file SVector.icc. ◆ begin() [1/2]. template<class T , unsigned int D> . T * ROOT::Math::SVector< T, D >::begin. inline . STL iterator interface. ; Definition at line 550 of file SVector.icc. ◆ begin() [2/2]. template<class T , unsigned int D> . const T * ROOT::Math::SVector< T, D >::begin. inline . STL const_iterator interface. ; Definition at line 553 of file SVector.icc. ◆ Dim(). template<class T , unsigned int D> . static unsigned int ROOT::Math::SVector< T, D >::Dim ; (; ). inlinestatic . return dimension \(D\) ; Definition at line 179 of file SVector.h. ◆ end() [1/2]. template<class T , unsigned int D> . T * ROOT::Math::SVector< T, D >::end. inline . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1SVector.html:13293,access,access,13293,doc/master/classROOT_1_1Math_1_1SVector.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1SVector.html,1,['access'],['access']
Security,"4,ROOT::Math::MatRepStd<double,3,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:5938,access,access,5938,root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,2,['access'],['access']
Security,"4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:5966,access,access,5966,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,4,['access'],['access']
Security,"4/00**; 25 ; 26TBrowser invokes by default the Web-based %ROOT file browser [RBrowser](ROOT::RBrowser); 27To change this behaviour, and invoke the standard TBrowser, one should put; 28the following directive in the `.rootrc` file:; 29```; 30Browser.Name: TRootBrowser; 31```; 32*/; 33 ; 34#include ""TBrowser.h""; 35#include ""TGuiFactory.h""; 36#include ""TROOT.h""; 37#include ""TEnv.h""; 38#include ""TSystem.h""; 39#include ""TStyle.h""; 40#include ""TTimer.h""; 41#include ""TContextMenu.h""; 42#include ""TInterpreter.h""; 43#include ""TVirtualMutex.h""; 44#include ""TClass.h""; 45#include ""TApplication.h""; 46 ; 47/** \class TBrowserTimer; 48Called whenever timer times out.; 49*/; 50 ; 51class TBrowserTimer : public TTimer {; 52 ; 53protected:; 54 TBrowser *fBrowser{nullptr};; 55 Bool_t fActivate{kFALSE};; 56 ; 57public:; 58 TBrowserTimer(TBrowser *b, Long_t ms = 1000) : TTimer(ms, kTRUE), fBrowser(b), fActivate(kFALSE) {}; 59 Bool_t Notify() override; 60 {; 61 if (fBrowser) {; 62 if (fBrowser->GetRefreshFlag()) {; 63 fBrowser->SetRefreshFlag(kFALSE);; 64 fActivate = kTRUE;; 65 } else if (fActivate) {; 66 fActivate = kFALSE;; 67 fBrowser->Refresh();; 68 }; 69 }; 70 Reset();; 71 ; 72 return kFALSE;; 73 }; 74};; 75 ; 76/** \class TBrowserObject; 77This class is designed to wrap a Foreign object in order to inject it into the Browse sub-system.; 78*/; 79 ; 80class TBrowserObject : public TNamed {; 81 ; 82public:; 83 TBrowserObject(void *obj, TClass *cl, const char *brname); 84 : TNamed(brname, cl ? cl->GetName() : """"), fObj(obj), fClass(cl); 85 {; 86 if (!cl); 87 Fatal(""Constructor"", ""Class parameter should not be null"");; 88 SetBit(kCanDelete);; 89 }; 90 ; 91 ~TBrowserObject() {}; 92 ; 93 void Browse(TBrowser *b) override { fClass->Browse(fObj, b); }; 94 Bool_t IsFolder() const override { return fClass->IsFolder(fObj); }; 95 TClass *IsA() const override { return fClass; }; 96 ; 97private:; 98 void *fObj; ///<! pointer to the foreign object; 99 TClass *fClass; ///<! pointer to class of the f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBrowser_8cxx_source.html:2456,inject,inject,2456,doc/master/TBrowser_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBrowser_8cxx_source.html,1,['inject'],['inject']
Security,"40 of file RooProfileLL.cxx. ◆ initializeMinimizer(). void RooProfileLL::initializeMinimizer ; (; ); const. protected . Definition at line 122 of file RooProfileLL.cxx. ◆ IsA(). TClass * RooProfileLL::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 70 of file RooProfileLL.h. ◆ minimizer(). RooMinimizer * RooProfileLL::minimizer ; (; ). inline . Definition at line 33 of file RooProfileLL.h. ◆ nll(). RooAbsReal & RooProfileLL::nll ; (; ). inline . Definition at line 34 of file RooProfileLL.h. ◆ numEval(). Int_t RooProfileLL::numEval ; (; ); const. inline . Definition at line 44 of file RooProfileLL.h. ◆ redirectServersHook(). bool RooProfileLL::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursiveStep . ). overridevirtual . Function that is called at the end of redirectServers(). ; Can be overloaded to inject some class-dependent behavior after server redirection, e.g. resetting of caches. The return value is meant to be an error flag, so in case something goes wrong the function should return true. If you overload this function, don't forget to also call the function of the base class.; See alsoredirectServers() For a detailed explanation of the function parameters. ; Reimplemented from RooAbsReal.; Definition at line 269 of file RooProfileLL.cxx. ◆ setAlwaysStartFromMin(). void RooProfileLL::setAlwaysStartFromMin ; (; bool ; flag). inline . Definition at line 30 of file RooProfileLL.h. ◆ Streamer(). void RooProfileLL::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooProfileLL::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 70 of file RooProfileLL.h. ◆ validateAbsMin(). void RooProfileLL::validateAbsMin ; (; ); const. protected . Check that parameters and likel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProfileLL.html:65139,inject,inject,65139,doc/master/classRooProfileLL.html,https://root.cern,https://root.cern/doc/master/classRooProfileLL.html,1,['inject'],['inject']
Security,"41/// Add a user-defined property. Returns true if added, false if existing.; 642 ; 643Bool_t TGeoManager::AddProperty(const char *property, Double_t value); 644{; 645 auto pos = fProperties.insert(ConstPropMap_t::value_type(property, value));; 646 if (!pos.second) {; 647 Warning(""AddProperty"", ""Property \""%s\"" already exists with value %g"", property, (pos.first)->second);; 648 return false;; 649 }; 650 return true;; 651}; 652 ; 653////////////////////////////////////////////////////////////////////////////////; 654/// Get a user-defined property; 655 ; 656Double_t TGeoManager::GetProperty(const char *property, Bool_t *error) const; 657{; 658 auto pos = fProperties.find(property);; 659 if (pos == fProperties.end()) {; 660 if (error); 661 *error = kTRUE;; 662 return 0.;; 663 }; 664 if (error); 665 *error = kFALSE;; 666 return pos->second;; 667}; 668 ; 669////////////////////////////////////////////////////////////////////////////////; 670/// Get a user-defined property from a given index; 671 ; 672Double_t TGeoManager::GetProperty(size_t i, TString &name, Bool_t *error) const; 673{; 674 // This is a quite inefficient way to access map elements, but needed for the GDML writer to; 675 if (i >= fProperties.size()) {; 676 if (error); 677 *error = kTRUE;; 678 return 0.;; 679 }; 680 size_t pos = 0;; 681 auto it = fProperties.begin();; 682 while (pos < i) {; 683 ++it;; 684 ++pos;; 685 }; 686 if (error); 687 *error = kFALSE;; 688 name = (*it).first;; 689 return (*it).second;; 690}; 691 ; 692////////////////////////////////////////////////////////////////////////////////; 693/// Add a matrix to the list. Returns index of the matrix in list.; 694 ; 695Int_t TGeoManager::AddTransformation(const TGeoMatrix *matrix); 696{; 697 return TGeoBuilder::Instance(this)->AddTransformation((TGeoMatrix *)matrix);; 698}; 699 ; 700////////////////////////////////////////////////////////////////////////////////; 701/// Add a shape to the list. Returns index of the shape in list.; 702 ; 703Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:25575,access,access,25575,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['access'],['access']
Security,"45{; 1846 if (!filename || !filename[0]) {; 1847 ::Error(""TClass::ReadRules"", ""no file name specified"");; 1848 return -1;; 1849 }; 1850 ; 1851 FILE * f = fopen(filename,""r"");; 1852 if (f == nullptr) {; 1853 ::Error(""TClass::ReadRules"",""Failed to open %s\n"",filename);; 1854 return -1;; 1855 }; 1856 Int_t count = ReadRulesContent(f);; 1857 ; 1858 fclose(f);; 1859 return count;; 1860 ; 1861}; 1862 ; 1863////////////////////////////////////////////////////////////////////////////////; 1864/// Add a schema evolution customization rule.; 1865/// The syntax of the rule can be either the short form:; 1866/// ~~~ {.cpp}; 1867/// [type=Read] classname membername [attributes=... ] [version=[...] ] [checksum=[...] ] [oldtype=...] [code={...}]; 1868/// ~~~; 1869/// or the long form; 1870/// ~~~ {.cpp}; 1871/// [type=Read] sourceClass=classname [targetclass=newClassname] [ source=""type membername; [type2 membername2]"" ]; 1872/// [target=""membername3;membername4""] [attributes=... ] [version=...] [checksum=...] [code={...}|functionname]; 1873/// ~~~; 1874///; 1875/// For example to set HepMC::GenVertex::m_event to _not_ owned the object it is pointing to:; 1876/// HepMC::GenVertex m_event attributes=NotOwner; 1877///; 1878/// Semantic of the tags:; 1879/// - type : the type of the rule, valid values: Read, ReadRaw, Write, WriteRaw, the default is 'Read'.; 1880/// - sourceClass : the name of the class as it is on the rule file; 1881/// - targetClass : the name of the class as it is in the current code ; defaults to the value of sourceClass; 1882/// - source : the types and names of the data members from the class on file that are needed, the list is separated by semi-colons ';'; 1883/// - oldtype: in the short form only, indicates the type on disk of the data member.; 1884/// - target : the names of the data members updated by this rule, the list is separated by semi-colons ';'; 1885/// - attributes : list of possible qualifiers among: Owner, NotOwner; 1886/// - version : list of the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:70086,checksum,checksum,70086,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['checksum'],['checksum']
Security,"4; TFile::SetReadaheadSizestatic void SetReadaheadSize(Int_t bufsize=256000)Definition TFile.cxx:4605; TFile::fgCacheFileDisconnectedstatic Bool_t fgCacheFileDisconnectedIndicates, we trust in the files in the cache dir without stat on the cached file.Definition TFile.h:125; TFile::GetStreamerInfoCacheconst TList * GetStreamerInfoCache()Returns the cached list of StreamerInfos used in this file.Definition TFile.cxx:1366; TFile::GetVersionInt_t GetVersion() constDefinition TFile.h:245; TFile::GetReadStreamerInfostatic Bool_t GetReadStreamerInfo()If the streamerinfos are to be read at file opening.Definition TFile.cxx:3742; TFile::fArchiveTArchiveFile * fArchive!Archive file from which we read this fileDefinition TFile.h:97; TFile::SysSyncvirtual Int_t SysSync(Int_t fd)Interface to system fsync. All arguments like in POSIX fsync().Definition TFile.cxx:4552; TFile::DirCreateEntryvirtual Long64_t DirCreateEntry(TDirectory *)Definition TFile.h:167; TFile::ReOpenvirtual Int_t ReOpen(Option_t *mode)Reopen a file with a different access mode.Definition TFile.cxx:2162; TFile::ReadStreamerInfovirtual void ReadStreamerInfo()Read the list of StreamerInfo from this file.Definition TFile.cxx:3605; TFile::Matchesvirtual Bool_t Matches(const char *name)Return kTRUE if 'url' matches the coordinates of this file.Definition TFile.cxx:4766; TFile::IsBinaryBool_t IsBinary() constDefinition TFile.h:259; TFile::IsRawBool_t IsRaw() constDefinition TFile.h:260; TFile::SetCacheReadvirtual void SetCacheRead(TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect)Set a pointer to the read cache.Definition TFile.cxx:2365; TFile::fClassIndexTArrayC * fClassIndex!Index of TStreamerInfo classes written to this fileDefinition TFile.h:94; TFile::GetFileBytesWrittenstatic Long64_t GetFileBytesWritten()Static function returning the total number of bytes written to all files.Definition TFile.cxx:4583; TFile::GetStreamerInfoListImplvirtual InfoListRet GetStreamerInfoListImpl(bool lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8h_source.html:29101,access,access,29101,doc/master/TFile_8h_source.html,https://root.cern,https://root.cern/doc/master/TFile_8h_source.html,1,['access'],['access']
Security,"4> >(const ROOT::Math::SVector<float,3U*(4U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,3U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,3,4>fRep; static ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:5464,access,access,5464,root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,4,['access'],"['access', 'accessing']"
Security,"4> >(const ROOT::Math::SVector<float,4U*(4U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,4,4>fRep; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:5464,access,access,5464,root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,4,['access'],"['access', 'accessing']"
Security,4T<double> ; TEveVector4T<float> ; TEveVectorT<double> ; TEveVectorT<float> ; TEveViewer Reve representation of TGLViewer.; TEveViewerList List of Viewers providing common operations on TEveViewer collections.; TEveViewerListEditor GUI editor for TEveViewerList.; TEveWindow Abstract base-class for eve-windows.; TEveWindowEditor GUI editor for TEveWindow.; TEveWindowFrame Eve-window containing any TGFrame.; TEveWindowManager Manager for EVE windows.; TEveWindowPack Eve-window containing a TGPack.; TEveWindowSlot An unoccupied eve-window slot.; TEveWindowTab Eve-window containing a TGTab.; TEventIter Event iterator used by TProofPlayer's; TEventIterObj Event iterator for objects; TEventIterTree Event iterator for Trees; TEventIterUnit Event iterator for objects; TEventList A list of selected entries in a TTree.; TExMap Map with external hash; TExMapIter TExMap iterator; TExec To execute a CINT command; TF1 The Parametric 1-D function; TF12 Projection of a TF2 along x or y; TF1Convolution ; TF1Editor user interface for TF1 objects; TF1NormSum ; TF1Parameters The Parameters of a parameteric function; TF2 The Parametric 2-D function; TF2GL GL renderer for TF2 and TF3.; TF3 The Parametric 3-D function; TFFTComplex ; TFFTComplexReal ; TFFTReal ; TFFTRealComplex ; TFITSHDU Class interfacing FITS HDUs; TFPBlock File prefetch block; TFTP File Transfer Protocol class using rootd; TFastCgi fastcgi engine for THttpServer; TFeldmanCousins calculate the CL upper limit using the Feldman-Cousins method; TFile ROOT file; TFileCacheRead TFile cache when reading; TFileCacheWrite TFile cache when writing; TFileCollection Collection of TFileInfo objects; TFileDrawMap Draw a 2-d map of the objects in a file; TFileHandler Handles events on file descriptors; TFileInfo Describes generic file info including meta data information; TFileInfoMeta Describes TFileInfo meta data; TFileIter TFile class iterator; TFileMergeInfo ; TFileMerger File copying and merging services; TFilePrefetch File block ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ClassIndex.html:70419,hash,hash,70419,root/html604/ClassIndex.html,https://root.cern,https://root.cern/root/html604/ClassIndex.html,1,['hash'],['hash']
Security,"4]. RooCategory::RooCategory ; (; const RooCategory & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 140 of file RooCategory.cxx. ◆ ~RooCategory(). RooCategory::~RooCategory ; (; ). override . Destructor. ; Definition at line 151 of file RooCategory.cxx. Member Function Documentation. ◆ addToRange() [1/2]. void RooCategory::addToRange ; (; const char * ; name, . const char * ; stateNameList . ). Add the list of state names to the given range. ; State names can be separated with ','. NoteThis creates or accesses a shared map with allowed ranges. All copies of this category will share this range such that a category inside a dataset and its counterpart on the outside will both see a modification of the range. ; Definition at line 372 of file RooCategory.cxx. ◆ addToRange() [2/2]. void RooCategory::addToRange ; (; const char * ; name, . RooAbsCategory::value_type ; stateIndex . ). Add the given state to the given range. ; NoteThis creates or accesses a shared map with allowed ranges. All copies of this category will share this range such that a category inside a dataset and its counterpart on the outside will both see a modification of the range. ; Definition at line 348 of file RooCategory.cxx. ◆ Class(). static TClass * RooCategory::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooCategory::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooCategory::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 141 of file RooCategory.h. ◆ clear(). void RooCategory::clear ; (; ). inline . Clear all defined category states. ; Definition at line 69 of file RooCategory.h. ◆ clearRange(). void RooCategory::clearRange ; (; const char * ; name, . bool ; silent . ). Clear the named range. ; NoteThis affects all copies of this category, because they are sharing range definitions. This ensures that cate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCategory.html:54376,access,accesses,54376,doc/master/classRooCategory.html,https://root.cern,https://root.cern/doc/master/classRooCategory.html,1,['access'],['accesses']
Security,"4e-06 || 2.449; 3 || w || free ||-3.047e-05 || 1. MnUserCovariance:. 4 1 2 2.70022e-18; 1 5 3 1.87754e-17; 2 3 6 2.29467e-17; 2.70022e-18 1.87754e-17 2.29467e-17 1. MnUserCovariance parameter correlations:. 1 0.223607 0.408248 1.35011e-18; 0.223607 1 0.547723 8.39663e-18; 0.408248 0.547723 1 9.36796e-18; 1.35011e-18 8.39663e-18 9.36796e-18 1. MnGlobalCorrelationCoeff:. 0.408248; 0.547723; 0.621261; 0; 3.3 CVS code repository; How to check out (–in) code from the CVS code repository is described at the M homepage @bib-C++MINUIT. To get the source code from the CVS repository one needs to do:; Kerberos IV authorization:; $ setenv CVSROOT :kserver:SEAL.cvs.cern.ch:/cvs/SEAL. $ cvs co MathLibs/Minuit; Anonymous read-only access (if it’s enabled by the librarian, see details):; $ setenv CVSROOT :pserver:anonymous@SEAL.cvs.cern.ch:/cvs/SEAL. $ cvs login; (Logging in to :pserver:anonymous@seal.cvs.cern.ch:2401/cvs/SEAL) CVS password:cvs; $ cvs co MathLibs/Minuit; (If you want to check out a tagged version SEAL_x_x_x of MINUIT, then do; $ cvs co -r SEAL\_x\_x\_x MathLibs/Minuit ); 3.4 Create a tar.gz from CVS; Once the sources are checked out from the CVS code repository,. change to the directory:; $ cd MathLibs/Minuit; run autogen:; $ ./autogen; create a new directory:; $ cd ..; $ mkdir Minuit-BUILD; $ cd Minuit-BUILD/; run configure:; $ ../Minuit/configure; create the tar.gz:; $ make dist. This will create a Minuit-x.x.x.tar.gz which can be distributed and used as described above.; 3.5 M versions; The version numbers of M follow the release numbers of the SEAL project @bib-SEAL at CERN @bib-CERN.; 3.5.1 From to; The program is entirely written in standard portable . M does not depend on any external library. In its minimal usage the user must only provide an implementation of the FCNBase class to M and parameters and uncertainties in form of std::vector containers.; 3.5.2 Memory allocation and thread safety; Differently to the version of M , the version has its own memory ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:29675,password,password,29675,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['password'],['password']
Security,"5 // else: doesn't fit into a Long64_t:; 246 memset(buf_out, 0, fCoordBufferSize);; 247 for (Int_t i = 0; i < fNdimensions; ++i) {; 248 const Int_t offset = fBitOffsets[i] / 8;; 249 const Int_t shift = fBitOffsets[i] % 8;; 250 ULong64_t val = coord_in[i];; 251 ; 252 Char_t* pbuf = buf_out + offset;; 253 *pbuf += 0xff & (val << shift);; 254 val = val >> (8 - shift);; 255 while (val) {; 256 ++pbuf;; 257 *pbuf += 0xff & val;; 258 val = val >> 8;; 259 }; 260 }; 261 ; 262 return GetHashFromBuffer(buf_out);; 263}; 264 ; 265/*; 266////////////////////////////////////////////////////////////////////////////////; 267/// Calculate hash from bin indexes.; 268 ; 269ULong64_t THnSparseCoordCompression::GetHashFromCoords(const Int_t* coord) const; 270{; 271 // Bins are addressed in two different modes, depending; 272 // on whether the compact bin index fits into a Long64_t or not.; 273 // If it does, we can use it as a ""perfect hash"" for the TExMap.; 274 // If not we build a hash from the compact bin index, and use that; 275 // as the TExMap's hash.; 276 ; 277 if (fCoordBufferSize <= 8) {; 278 // fits into a Long64_t; 279 ULong64_t hash1 = 0;; 280 for (Int_t i = 0; i < fNdimensions; ++i) {; 281 hash1 += coord[i] << fBitOffsets[i];; 282 }; 283 return hash1;; 284 }; 285 ; 286 // else: doesn't fit into a Long64_t:; 287 memset(coord, 0, fCoordBufferSize);; 288 for (Int_t i = 0; i < fNdimensions; ++i) {; 289 const Int_t offset = fBitOffsets[i] / 8;; 290 const Int_t shift = fBitOffsets[i] % 8;; 291 ULong64_t val = coord[i];; 292 ; 293 Char_t* pbuf = fCoordBuffer + offset;; 294 *pbuf += 0xff & (val << shift);; 295 val = val >> (8 - shift);; 296 while (val) {; 297 ++pbuf;; 298 *pbuf += 0xff & val;; 299 val = val >> 8;; 300 }; 301 }; 302 ; 303 ULong64_t hash = 5381;; 304 Char_t* str = fCoordBuffer;; 305 while (str - fCoordBuffer < fCoordBufferSize) {; 306 hash *= 5;; 307 hash += *(str++);; 308 }; 309 return hash;; 310}; 311*/; 312 ; 313 ; 314///////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THnSparse_8cxx_source.html:9649,hash,hash,9649,doc/master/THnSparse_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THnSparse_8cxx_source.html,2,['hash'],['hash']
Security,"5 ; 306 /////////////////////////////////////////////////////////////////////////; 307 /// configures that only native (own-created) connections are allowed; 308 void SetNativeOnlyConn(bool on = true) { fNativeOnlyConn = on; }; 309 ; 310 /////////////////////////////////////////////////////////////////////////; 311 /// returns true if only native (own-created) connections are allowed; 312 bool IsNativeOnlyConn() const { return fNativeOnlyConn; }; 313 ; 314 /////////////////////////////////////////////////////////////////////////; 315 /// Configure if authentication key in connection string is required; 316 void SetRequireAuthKey(bool on) { fRequireAuthKey = on; }; 317 ; 318 /////////////////////////////////////////////////////////////////////////; 319 /// returns true if authentication string is required; 320 bool IsRequireAuthKey() const { return fRequireAuthKey; }; 321 ; 322 /////////////////////////////////////////////////////////////////////////; 323 /// Configure if window can access local files via currentdir/ path of http server; 324 void SetUseCurrentDir(bool on = true) { fUseCurrentDir = on; }; 325 ; 326 /////////////////////////////////////////////////////////////////////////; 327 /// returns true if window can access local files via currentdir/ path of http server; 328 bool IsUseCurrentDir() const { return fUseCurrentDir; }; 329 ; 330 void SetClientVersion(const std::string &vers);; 331 ; 332 std::string GetClientVersion() const;; 333 ; 334 void SetUserArgs(const std::string &args);; 335 ; 336 std::string GetUserArgs() const;; 337 ; 338 int NumConnections(bool with_pending = false) const;; 339 ; 340 unsigned GetConnectionId(int num = 0) const;; 341 ; 342 std::vector<unsigned> GetConnections(unsigned excludeid = 0) const;; 343 ; 344 bool HasConnection(unsigned connid = 0, bool only_active = true) const;; 345 ; 346 void CloseConnections();; 347 ; 348 void CloseConnection(unsigned connid);; 349 ; 350 /// Returns timeout for synchronous WebWindow operations; 3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RWebWindow_8hxx_source.html:15238,access,access,15238,doc/v632/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RWebWindow_8hxx_source.html,1,['access'],['access']
Security,"5 if ((sscanf(datetime,; 7816 ""%d/%3s/%d %d:%d:%d"",; 7817 &day,; 7818 month_str,; 7819 &year,; 7820 &hour,; 7821 &minute,; 7822 &second); 7823 == 6); 7824 || (sscanf(datetime,; 7825 ""%d %3s %d %d:%d:%d"",; 7826 &day,; 7827 month_str,; 7828 &year,; 7829 &hour,; 7830 &minute,; 7831 &second); 7832 == 6); 7833 || (sscanf(datetime,; 7834 ""%*3s, %d %3s %d %d:%d:%d"",; 7835 &day,; 7836 month_str,; 7837 &year,; 7838 &hour,; 7839 &minute,; 7840 &second); 7841 == 6); 7842 || (sscanf(datetime,; 7843 ""%d-%3s-%d %d:%d:%d"",; 7844 &day,; 7845 month_str,; 7846 &year,; 7847 &hour,; 7848 &minute,; 7849 &second); 7850 == 6)) {; 7851 month = get_month_index(month_str);; 7852 if ((month >= 0) && (year >= 1970)) {; 7853 memset(&tm, 0, sizeof(tm));; 7854 tm.tm_year = year - 1900;; 7855 tm.tm_mon = month;; 7856 tm.tm_mday = day;; 7857 tm.tm_hour = hour;; 7858 tm.tm_min = minute;; 7859 tm.tm_sec = second;; 7860 result = timegm(&tm);; 7861 }; 7862 }; 7863 ; 7864 return result;; 7865}; 7866#endif /* !NO_CACHING */; 7867 ; 7868 ; 7869/* Pre-process URIs according to RFC + protect against directory disclosure; 7870 * attacks by removing '..', excessive '/' and '\' characters */; 7871static void; 7872remove_dot_segments(char *inout); 7873{; 7874 /* Windows backend protection; 7875 * (https://tools.ietf.org/html/rfc3986#section-7.3): Replace backslash; 7876 * in URI by slash */; 7877 char *out_end = inout;; 7878 char *in = inout;; 7879 ; 7880 if (!in) {; 7881 /* Param error. */; 7882 return;; 7883 }; 7884 ; 7885 while (*in) {; 7886 if (*in == '\\') {; 7887 *in = '/';; 7888 }; 7889 in++;; 7890 }; 7891 ; 7892 /* Algorithm ""remove_dot_segments"" from; 7893 * https://tools.ietf.org/html/rfc3986#section-5.2.4 */; 7894 /* Step 1:; 7895 * The input buffer is initialized.; 7896 * The output buffer is initialized to the empty string.; 7897 */; 7898 in = inout;; 7899 ; 7900 /* Step 2:; 7901 * While the input buffer is not empty, loop as follows:; 7902 */; 7903 /* Less than out_end of the inout buffer is used a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:226792,attack,attacks,226792,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['attack'],['attacks']
Security,"5 tlk->fPrev.reset();; 436 fCache = tlk;; 437 ; 438 // delete only heap objects marked OK to clear; 439 auto obj = tlk->GetObject();; 440 if (!nodel && obj) {; 441 if (ROOT::Detail::HasBeenDeleted(obj)) {; 442 Error(""Clear"", ""A list is accessing an object (%p) already deleted (list name = %s)"",; 443 obj, GetName());; 444 } else if (obj->IsOnHeap()) {; 445 if (obj->TestBit(kCanDelete)) {; 446 if (!ROOT::Detail::HasBeenDeleted(obj)) {; 447 TCollection::GarbageCollect(obj);; 448 }; 449 }; 450 }; 451 }; 452 // delete tlk;; 453 }; 454 fFirst.reset();; 455 fLast.reset();; 456 fCache.reset();; 457 fSize = 0;; 458 Changed();; 459}; 460 ; 461////////////////////////////////////////////////////////////////////////////////; 462/// Remove all objects from the list AND delete all heap based objects.; 463/// If option=""slow"" then keep list consistent during delete. This allows; 464/// recursive list operations during the delete (e.g. during the dtor; 465/// of an object in this list one can still access the list to search for; 466/// other not yet deleted objects).; 467 ; 468void TList::Delete(Option_t *option); 469{; 470 R__COLLECTION_WRITE_LOCKGUARD(ROOT::gCoreMutex);; 471 R__COLLECTION_WRITE_GUARD();; 472 ; 473 Bool_t slow = option ? (!strcmp(option, ""slow"") ? kTRUE : kFALSE) : kFALSE;; 474 ; 475 TList removeDirectory; // need to deregister these from their directory; 476 ; 477 if (slow) {; 478 ; 479 // In some case, for example TParallelCoord, a list (the pad's list of; 480 // primitives) will contain both the container and the containees; 481 // (the TParallelCoorVar) but if the Clear is being called from; 482 // the destructor of the container of this list, one of the first; 483 // thing done will be the remove the container (the pad) for the; 484 // list (of Primitives of the canvas) that was connecting it; 485 // (indirectly) to the list of cleanups.; 486 ; 487 // To preserve this connection (without introducing one when there was none),; 488 // we re-use fCache to inform",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TList_8cxx_source.html:14285,access,access,14285,doc/master/TList_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TList_8cxx_source.html,1,['access'],['access']
Security,"5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:5966,access,access,5966,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,4,['access'],['access']
Security,"500,200);; 85 TText t;; 86 t.SetTextAlign(32);; 87 t.SetTextSize(0.08);; 88 Int_t i=1;; 89 for (float s=0.1; s<1.0 ; s+=0.092) {; 90 TLine *lh = new TLine(0.15,s,.85,s);; 91 lh->SetLineWidth(i);; 92 t.DrawText(0.1,s,Form(""%d"",i++));; 93 lh->Draw();; 94 }; 95}; 96End_Macro; 97 ; 98\anchor ATTLINE3; 99## Line Style; 100Line styles are identified via integer numbers. The line style of any class; 101inheriting from `TAttLine` can be changed using the method; 102`SetLineStyle` and retrieved using the method `GetLineStyle`.; 103 ; 104The first 10 line styles are predefined as shown on the following picture:; 105 ; 106Begin_Macro; 107{; 108 TCanvas *Ls = new TCanvas(""Ls"",""test"",500,200);; 109 TText t;; 110 t.SetTextAlign(32);; 111 t.SetTextSize(0.08);; 112 Int_t i=1;; 113 for (float s=0.1; s<1.0 ; s+=0.092) {; 114 TLine *lh = new TLine(0.15,s,.85,s);; 115 lh->SetLineStyle(i);; 116 lh->SetLineWidth(3);; 117 t.DrawText(0.1,s,Form(""%d"",i++));; 118 lh->Draw();; 119 }; 120}; 121End_Macro; 122 ; 123Some line styles can be accessed via the following enum:; 124 ; 125~~~ {.cpp}; 126 kSolid = 1; 127 kDashed = 2; 128 kDotted = 3; 129 kDashDotted = 4; 130~~~; 131 ; 132Additional line styles can be defined using `TStyle::SetLineStyleString`.; 133For example the line style number 11 can be defined as follow:; 134~~~ {.cpp}; 135 gStyle->SetLineStyleString(11,""400 200"");; 136~~~; 137Existing line styles (1 to 10) can be redefined using the same method.; 138 */; 139 ; 140////////////////////////////////////////////////////////////////////////////////; 141/// AttLine default constructor.; 142 ; 143TAttLine::TAttLine(); 144{; 145 if (!gStyle) {fLineColor=1; fLineWidth=1; fLineStyle=1; return;}; 146 fLineColor = gStyle->GetLineColor();; 147 fLineWidth = gStyle->GetLineWidth();; 148 fLineStyle = gStyle->GetLineStyle();; 149}; 150 ; 151////////////////////////////////////////////////////////////////////////////////; 152/// AttLine normal constructor.; 153/// Line attributes are taking from the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttLine_8cxx_source.html:3996,access,accessed,3996,doc/master/TAttLine_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAttLine_8cxx_source.html,1,['access'],['accessed']
Security,"544}; 1545 ; 1546////////////////////////////////////////////////////////////////////////////////; 1547/// Add char to string.; 1548 ; 1549TString operator+(const TString &s, char c); 1550{; 1551 return TString(s.Data(), s.Length(), &c, 1);; 1552}; 1553 ; 1554////////////////////////////////////////////////////////////////////////////////; 1555/// Add string to char.; 1556 ; 1557TString operator+(char c, const TString &s); 1558{; 1559 return TString(&c, 1, s.Data(), s.Length());; 1560}; 1561 ; 1562////////////////////////////////////////////////////////////////////////////////; 1563// Static Member Functions; 1564// The static data members access; 1565 ; 1566////////////////////////////////////////////////////////////////////////////////; 1567 ; 1568Ssiz_t TString::GetInitialCapacity(); 1569{; 1570 ::Obsolete(""TString::GetInitialCapacity"", ""v5-30-00"", ""v5-32-00"");; 1571 return 15;; 1572}; 1573 ; 1574////////////////////////////////////////////////////////////////////////////////; 1575 ; 1576Ssiz_t TString::GetResizeIncrement(); 1577{; 1578 ::Obsolete(""TString::GetResizeIncrement"", ""v5-30-00"", ""v5-32-00"");; 1579 return 16;; 1580}; 1581 ; 1582////////////////////////////////////////////////////////////////////////////////; 1583 ; 1584Ssiz_t TString::GetMaxWaste(); 1585{; 1586 ::Obsolete(""TString::GetMaxWaste"", ""v5-30-00"", ""v5-32-00"");; 1587 return 15;; 1588}; 1589 ; 1590////////////////////////////////////////////////////////////////////////////////; 1591/// Set default initial capacity for all TStrings. Default is 15.; 1592 ; 1593Ssiz_t TString::InitialCapacity(Ssiz_t); 1594{; 1595 ::Obsolete(""TString::InitialCapacity"", ""v5-30-00"", ""v5-32-00"");; 1596 return 15;; 1597}; 1598 ; 1599////////////////////////////////////////////////////////////////////////////////; 1600/// Set default resize increment for all TStrings. Default is 16.; 1601 ; 1602Ssiz_t TString::ResizeIncrement(Ssiz_t); 1603{; 1604 ::Obsolete(""TString::ResizeIncrement"", ""v5-30-00"", ""v5-32-00"");; 1605 retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8cxx_source.html:47477,access,access,47477,doc/master/TString_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TString_8cxx_source.html,1,['access'],['access']
Security,"56671992330e-01); root[] f1.Integral(0,3); (Double_t)1.84865252799946810e+00; root[] f1.Draw(); By default the method TF1::Paint(), that draws the function, computes 100 equidistant points to draw it. The number of points can be set to a higher value with:; root[] f1.SetNpx(2000);; Note that while the ROOT framework is an object-oriented framework, this does not prevent the user from calling plain functions.; 2.3.4 User Interaction; Now we will look at some interactive capabilities. Try to draw the function sin(x)/x again. Every object in a window (which is called a canvas) is, in fact, a graphical object in the sense that you can grab it, resize it, and change its characteristics with a mouse click. For example, bring the cursor over the x-axis. The cursor changes to a hand with a pointing finger when it is over the axis. Now, left click and drag the mouse along the axis to the right. You have a very simple zoom.; When you move the mouse over any object, you can get access to selected methods by pressing the right mouse button and obtaining a context menu. If you try this on the function TF1, you will get a menu showing available methods. The other objects on this canvas are the title, a TPaveText object; the x and y-axis, TAxis objects, the frame, a TFrame object, and the canvas a TCanvas object. Try clicking on these and observe the context menu with their methods. A context menu. For example try selecting the SetRange() method and putting -10, 10 in the dialog box fields. This is equivalent to executing f1.SetRange(-10,10) from the command line, followed by f1.Draw(). Here are some other options you can try.; Once the picture suits your wishes, you may want to see the code you should put in a script to obtain the same result. To do that, choose Save / canvas.C entry of the File menu. This will generate a script showing the options set in the current canvas. Notice that you can also save the picture into various file formats such as PostScript, GIF, etc. Another ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:49313,access,access,49313,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['access'],['access']
Security,"5> >(const ROOT::Math::SVector<float,5U*(5U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,5,5>fRep; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:5464,access,access,5464,root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,4,['access'],"['access', 'accessing']"
Security,"6 if ((sscanf(datetime,; 7817 ""%d/%3s/%d %d:%d:%d"",; 7818 &day,; 7819 month_str,; 7820 &year,; 7821 &hour,; 7822 &minute,; 7823 &second); 7824 == 6); 7825 || (sscanf(datetime,; 7826 ""%d %3s %d %d:%d:%d"",; 7827 &day,; 7828 month_str,; 7829 &year,; 7830 &hour,; 7831 &minute,; 7832 &second); 7833 == 6); 7834 || (sscanf(datetime,; 7835 ""%*3s, %d %3s %d %d:%d:%d"",; 7836 &day,; 7837 month_str,; 7838 &year,; 7839 &hour,; 7840 &minute,; 7841 &second); 7842 == 6); 7843 || (sscanf(datetime,; 7844 ""%d-%3s-%d %d:%d:%d"",; 7845 &day,; 7846 month_str,; 7847 &year,; 7848 &hour,; 7849 &minute,; 7850 &second); 7851 == 6)) {; 7852 month = get_month_index(month_str);; 7853 if ((month >= 0) && (year >= 1970)) {; 7854 memset(&tm, 0, sizeof(tm));; 7855 tm.tm_year = year - 1900;; 7856 tm.tm_mon = month;; 7857 tm.tm_mday = day;; 7858 tm.tm_hour = hour;; 7859 tm.tm_min = minute;; 7860 tm.tm_sec = second;; 7861 result = timegm(&tm);; 7862 }; 7863 }; 7864 ; 7865 return result;; 7866}; 7867#endif /* !NO_CACHING */; 7868 ; 7869 ; 7870/* Pre-process URIs according to RFC + protect against directory disclosure; 7871 * attacks by removing '..', excessive '/' and '\' characters */; 7872static void; 7873remove_dot_segments(char *inout); 7874{; 7875 /* Windows backend protection; 7876 * (https://tools.ietf.org/html/rfc3986#section-7.3): Replace backslash; 7877 * in URI by slash */; 7878 char *out_end = inout;; 7879 char *in = inout;; 7880 ; 7881 if (!in) {; 7882 /* Param error. */; 7883 return;; 7884 }; 7885 ; 7886 while (*in) {; 7887 if (*in == '\\') {; 7888 *in = '/';; 7889 }; 7890 in++;; 7891 }; 7892 ; 7893 /* Algorithm ""remove_dot_segments"" from; 7894 * https://tools.ietf.org/html/rfc3986#section-5.2.4 */; 7895 /* Step 1:; 7896 * The input buffer is initialized.; 7897 * The output buffer is initialized to the empty string.; 7898 */; 7899 in = inout;; 7900 ; 7901 /* Step 2:; 7902 * While the input buffer is not empty, loop as follows:; 7903 */; 7904 /* Less than out_end of the inout buffer is used a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:226824,attack,attacks,226824,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['attack'],['attacks']
Security,"6 layerWeights(i,j) = weights[weightIndex];; 887 weightIndex++;; 888 }; 889 }; 890 auto & layerBiases = fNet.GetLayer(l).GetBiases();; 891 if (l == 0) {; 892 for (Int_t i = 0; i < layerBiases.GetNrows(); i++) {; 893 layerBiases(i,0) = weights[weightIndex];; 894 weightIndex++;; 895 }; 896 } else {; 897 for (Int_t i = 0; i < layerBiases.GetNrows(); i++) {; 898 layerBiases(i,0) = 0.0;; 899 }; 900 }; 901 }; 902 if (!fExitFromTraining) fIPyMaxIter = fIPyCurrentIter;; 903 ExitFromTraining();; 904}; 905 ; 906////////////////////////////////////////////////////////////////////////////////; 907 ; 908void TMVA::MethodDNN::TrainGpu(); 909{; 910 ; 911#ifdef DNNCUDA // Included only if DNNCUDA flag is set.; 912 Log() << kINFO << ""Start of neural network training on GPU."" << Endl << Endl;; 913 ; 914 size_t nValidationSamples = GetNumValidationSamples();; 915 size_t nTrainingSamples = GetEventCollection(Types::kTraining).size() - nValidationSamples;; 916 size_t nTestSamples = nValidationSamples;; 917 ; 918 Log() << kDEBUG << ""Using "" << nValidationSamples << "" validation samples."" << Endl;; 919 Log() << kDEBUG << ""Using "" << nTestSamples << "" training samples."" << Endl;; 920 ; 921 size_t trainingPhase = 1;; 922 fNet.Initialize(fWeightInitialization);; 923 for (TTrainingSettings & settings : fTrainingSettings) {; 924 ; 925 if (fInteractive){; 926 fInteractive->ClearGraphs();; 927 }; 928 ; 929 TNet<TCuda<>> net(settings.batchSize, fNet);; 930 net.SetWeightDecay(settings.weightDecay);; 931 net.SetRegularization(settings.regularization);; 932 ; 933 // Need to convert dropoutprobabilities to conventions used; 934 // by backend implementation.; 935 std::vector<Double_t> dropoutVector(settings.dropoutProbabilities);; 936 for (auto & p : dropoutVector) {; 937 p = 1.0 - p;; 938 }; 939 net.SetDropoutProbabilities(dropoutVector);; 940 ; 941 net.InitializeGradients();; 942 auto testNet = net.CreateClone(settings.batchSize);; 943 ; 944 Log() << kINFO << ""Training phase "" << trainingPhase << "" o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:32820,validat,validation,32820,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['validat'],['validation']
Security,"6 }; 2157 //if (fClassInfo==0 && element->IsBase()) {; 2158 // if (fBase==0) fBase = new TList;; 2159 // TClass *base = element->GetClassPointer();; 2160 // fBase->Add(new TBaseClass(this, cl, eoffset));; 2161 //}; 2162 }; 2163 // The base classes must added last on the list of real data (to help with ambiguous data member names); 2164 next.Reset();; 2165 while ((element = (TStreamerElement*)next())) {; 2166 Int_t etype = element->GetType();; 2167 if (element->IsBase() || etype == TVirtualStreamerInfo::kBase) {; 2168 //base class; 2169 Longptr_t eoffset = element->GetOffset();; 2170 TClass *cle = element->GetClassPointer();; 2171 if (cle) cle->BuildEmulatedRealData(name,offset+eoffset,cl, isTransient);; 2172 }; 2173 }; 2174}; 2175 ; 2176 ; 2177////////////////////////////////////////////////////////////////////////////////; 2178/// Calculate the offset between an object of this class to; 2179/// its base class TObject. The pointer can be adjusted by; 2180/// that offset to access any virtual method of TObject like; 2181/// Streamer() and ShowMembers().; 2182 ; 2183void TClass::CalculateStreamerOffset() const; 2184{; 2185 R__LOCKGUARD(gInterpreterMutex);; 2186 if (!fIsOffsetStreamerSet && HasInterpreterInfo()) {; 2187 // When called via TMapFile (e.g. Update()) make sure that the dictionary; 2188 // gets allocated on the heap and not in the mapped file.; 2189 ; 2190 TMmallocDescTemp setreset;; 2191 fOffsetStreamer = const_cast<TClass*>(this)->GetBaseClassOffsetRecurse(TObject::Class());; 2192 if (fStreamerType == kTObject) {; 2193 fStreamerImpl = &TClass::StreamerTObjectInitialized;; 2194 }; 2195 fIsOffsetStreamerSet = kTRUE;; 2196 }; 2197}; 2198 ; 2199 ; 2200////////////////////////////////////////////////////////////////////////////////; 2201/// Call ShowMembers() on the obj of this class type, passing insp and parent.; 2202/// isATObject is -1 if unknown, 0 if it is not a TObject, and 1 if it is a TObject.; 2203/// The function returns whether it was able to call ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:82327,access,access,82327,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['access'],['access']
Security,"6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:5966,access,access,5966,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,4,['access'],['access']
Security,"60 int sq_size; /* No of elements in socket queue */; 2361#if defined(USE_SERVER_STATS); 2362 int sq_max_fill;; 2363#endif /* USE_SERVER_STATS */; 2364#endif /* ALTERNATIVE_QUEUE */; 2365 ; 2366 /* Memory related */; 2367 unsigned int max_request_size; /* The max request size */; 2368 ; 2369#if defined(USE_SERVER_STATS); 2370 struct mg_memory_stat ctx_memory;; 2371#endif; 2372 ; 2373 /* Operating system related */; 2374 char *systemName; /* What operating system is running */; 2375 time_t start_time; /* Server start time, used for authentication; 2376 * and for diagnstics. */; 2377 ; 2378#if defined(USE_TIMERS); 2379 struct ttimers *timers;; 2380#endif; 2381 ; 2382 /* Lua specific: Background operations and shared websockets */; 2383#if defined(USE_LUA); 2384 void *lua_background_state; /* lua_State (here as void *) */; 2385 pthread_mutex_t lua_bg_mutex; /* Protect background state */; 2386 int lua_bg_log_available; /* Use Lua background state for access log */; 2387#endif; 2388 ; 2389 /* Server nonce */; 2390 pthread_mutex_t nonce_mutex; /* Protects ssl_ctx, handlers,; 2391 * ssl_cert_last_mtime, nonce_count, and; 2392 * next (linked list) */; 2393 ; 2394 /* Server callbacks */; 2395 struct mg_callbacks callbacks; /* User-defined callback function */; 2396 void *user_data; /* User-defined data */; 2397 ; 2398 /* Part 2 - Logical domain:; 2399 * This holds hostname, TLS certificate, document root, ...; 2400 * set for a domain hosted at the server.; 2401 * There may be multiple domains hosted at one physical server.; 2402 * The default domain ""dd"" is the first element of a list of; 2403 * domains.; 2404 */; 2405 struct mg_domain_context dd; /* default domain */; 2406};; 2407 ; 2408 ; 2409#if defined(USE_SERVER_STATS); 2410static struct mg_memory_stat mg_common_memory = {0, 0, 0};; 2411 ; 2412static struct mg_memory_stat *; 2413get_memory_stat(struct mg_context *ctx); 2414{; 2415 if (ctx) {; 2416 return &(ctx->ctx_memory);; 2417 }; 2418 return &mg_common_memory;; 2419}",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:74214,access,access,74214,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,"['access', 'certificate']","['access', 'certificate']"
Security,"60; // 50 bins in y-direction; lower limit on y-axis is .1; upper limit is .5; By default, the specified histogram is reset. To continue to append data to an existing histogram, use ""+"" in front of the histogram name.; A '+' in front of the histogram name is ignored, when the name is followed by binning information as described in the previous paragraph. tree.Draw(""sqrt(x)>>+hsqrt"",""y>0""); will not reset hsqrt, but will continue filling. This works for 1-D, 2-D and 3-D histograms. Accessing collection objects; TTree::Draw default's handling of collections is to assume that any request on a collection pertain to it content. For example, if fTracks is a collection of Track objects, the following: tree->Draw(""event.fTracks.fPx"");; will plot the value of fPx for each Track objects inside the collection. Also tree->Draw(""event.fTracks.size()"");; would plot the result of the member function Track::size() for each Track object inside the collection. To access information about the collection itself, TTree::Draw support the '@' notation. If a variable which points to a collection is prefixed or postfixed with '@', the next part of the expression will pertain to the collection object. For example: tree->Draw(""event.@fTracks.size()"");; will plot the size of the collection referred to by fTracks (i.e the number of Track objects). Drawing 'objects'; When a class has a member function named AsDouble or AsString, requesting to directly draw the object will imply a call to one of the 2 functions. If both AsDouble and AsString are present, AsDouble will be used. AsString can return either a char*, a std::string or a TString.s For example, the following tree->Draw(""event.myTTimeStamp"");; will draw the same histogram as tree->Draw(""event.myTTimeStamp.AsDouble()"");; In addition, when the object is a type TString or std::string, TTree::Draw will call respectively TString::Data and std::string::c_str(); If the object is a TBits, the histogram will contain the index of the bit that are tu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:122607,access,access,122607,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,2,['access'],['access']
Security,"61 int sq_size; /* No of elements in socket queue */; 2362#if defined(USE_SERVER_STATS); 2363 int sq_max_fill;; 2364#endif /* USE_SERVER_STATS */; 2365#endif /* ALTERNATIVE_QUEUE */; 2366 ; 2367 /* Memory related */; 2368 unsigned int max_request_size; /* The max request size */; 2369 ; 2370#if defined(USE_SERVER_STATS); 2371 struct mg_memory_stat ctx_memory;; 2372#endif; 2373 ; 2374 /* Operating system related */; 2375 char *systemName; /* What operating system is running */; 2376 time_t start_time; /* Server start time, used for authentication; 2377 * and for diagnstics. */; 2378 ; 2379#if defined(USE_TIMERS); 2380 struct ttimers *timers;; 2381#endif; 2382 ; 2383 /* Lua specific: Background operations and shared websockets */; 2384#if defined(USE_LUA); 2385 void *lua_background_state; /* lua_State (here as void *) */; 2386 pthread_mutex_t lua_bg_mutex; /* Protect background state */; 2387 int lua_bg_log_available; /* Use Lua background state for access log */; 2388#endif; 2389 ; 2390 /* Server nonce */; 2391 pthread_mutex_t nonce_mutex; /* Protects ssl_ctx, handlers,; 2392 * ssl_cert_last_mtime, nonce_count, and; 2393 * next (linked list) */; 2394 ; 2395 /* Server callbacks */; 2396 struct mg_callbacks callbacks; /* User-defined callback function */; 2397 void *user_data; /* User-defined data */; 2398 ; 2399 /* Part 2 - Logical domain:; 2400 * This holds hostname, TLS certificate, document root, ...; 2401 * set for a domain hosted at the server.; 2402 * There may be multiple domains hosted at one physical server.; 2403 * The default domain ""dd"" is the first element of a list of; 2404 * domains.; 2405 */; 2406 struct mg_domain_context dd; /* default domain */; 2407};; 2408 ; 2409 ; 2410#if defined(USE_SERVER_STATS); 2411static struct mg_memory_stat mg_common_memory = {0, 0, 0};; 2412 ; 2413static struct mg_memory_stat *; 2414get_memory_stat(struct mg_context *ctx); 2415{; 2416 if (ctx) {; 2417 return &(ctx->ctx_memory);; 2418 }; 2419 return &mg_common_memory;; 2420}",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:74246,access,access,74246,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,2,"['access', 'certificate']","['access', 'certificate']"
Security,"646 fStreamer = TVirtualStreamerInfo::Factory()->GenEmulatedClassStreamer( GetName(), silent );; 1647 }; 1648 }; 1649 } else if (TClassEdit::IsStdPair(GetName())) {; 1650 // std::pairs have implicit conversions; 1651 GetSchemaRules(kTRUE);; 1652 }; 1653 ; 1654 ResetBit(kLoading);; 1655}; 1656 ; 1657////////////////////////////////////////////////////////////////////////////////; 1658/// TClass dtor. Deletes all list that might have been created.; 1659 ; 1660TClass::~TClass(); 1661{; 1662 R__LOCKGUARD(gInterpreterMutex);; 1663 ; 1664 // Remove from the typedef hashtables.; 1665 if (fgClassTypedefHash && TestBit (kHasNameMapNode)) {; 1666 TString resolvedThis = TClassEdit::ResolveTypedef (GetName(), kTRUE);; 1667 TIter next (fgClassTypedefHash->GetListForObject (resolvedThis));; 1668 while ( TNameMapNode* htmp = static_cast<TNameMapNode*> (next()) ) {; 1669 if (resolvedThis == htmp->String() && htmp->fOrigName == GetName()) {; 1670 fgClassTypedefHash->Remove (htmp);; 1671 delete htmp;; 1672 break;; 1673 }; 1674 }; 1675 }; 1676 ; 1677 // Not owning lists, don't call Delete(); 1678 // But this still need to be done first because the TList destructor; 1679 // does access the object contained (via GetObject()->TestBit(kCanDelete)); 1680 delete fStreamer; fStreamer =nullptr;; 1681 delete fAllPubData; fAllPubData =nullptr;; 1682 delete fAllPubMethod; fAllPubMethod=nullptr;; 1683 ; 1684 delete fPersistentRef.load();; 1685 ; 1686 if (fBase.load()); 1687 (*fBase).Delete();; 1688 delete fBase.load(); fBase = nullptr;; 1689 ; 1690 if (fData.load()); 1691 (*fData).Delete();; 1692 delete fData.load(); fData = nullptr;; 1693 ; 1694 if (fUsingData.load()); 1695 (*fUsingData).Delete();; 1696 delete fUsingData.load(); fUsingData = nullptr;; 1697 ; 1698 if (fEnums.load()); 1699 (*fEnums).Delete();; 1700 delete fEnums.load(); fEnums = nullptr;; 1701 ; 1702 if (fFuncTemplate); 1703 fFuncTemplate->Delete();; 1704 delete fFuncTemplate; fFuncTemplate = nullptr;; 1705 ; 1706 if (fMethod.load",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:64721,access,access,64721,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['access'],['access']
Security,"65#endif; 3366 ; 3367 IGNORE_UNUSED_RESULT(vsnprintf_impl(buf, sizeof(buf), fmt, ap));; 3368 ; 3369#if defined(GCC_DIAGNOSTIC); 3370#pragma GCC diagnostic pop; 3371#endif; 3372 ; 3373 buf[sizeof(buf) - 1] = 0;; 3374 ; 3375 DEBUG_TRACE(""mg_cry called from %s:%u: %s"", func, line, buf);; 3376 ; 3377 if (!conn) {; 3378 puts(buf);; 3379 return;; 3380 }; 3381 ; 3382 /* Do not lock when getting the callback value, here and below.; 3383 * I suppose this is fine, since function cannot disappear in the; 3384 * same way string option can. */; 3385 if ((conn->phys_ctx->callbacks.log_message == NULL); 3386 || (conn->phys_ctx->callbacks.log_message(conn, buf) == 0)) {; 3387 ; 3388 if (conn->dom_ctx->config[ERROR_LOG_FILE] != NULL) {; 3389 if (mg_fopen(conn,; 3390 conn->dom_ctx->config[ERROR_LOG_FILE],; 3391 MG_FOPEN_MODE_APPEND,; 3392 &fi); 3393 == 0) {; 3394 fi.access.fp = NULL;; 3395 }; 3396 } else {; 3397 fi.access.fp = NULL;; 3398 }; 3399 ; 3400 if (fi.access.fp != NULL) {; 3401 flockfile(fi.access.fp);; 3402 timestamp = time(NULL);; 3403 ; 3404 sockaddr_to_string(src_addr, sizeof(src_addr), &conn->client.rsa);; 3405 fprintf(fi.access.fp,; 3406 ""[%010lu] [error] [client %s] "",; 3407 (unsigned long)timestamp,; 3408 src_addr);; 3409 ; 3410 if (conn->request_info.request_method != NULL) {; 3411 fprintf(fi.access.fp,; 3412 ""%s %s: "",; 3413 conn->request_info.request_method,; 3414 conn->request_info.request_uri; 3415 ? conn->request_info.request_uri; 3416 : """");; 3417 }; 3418 ; 3419 fprintf(fi.access.fp, ""%s"", buf);; 3420 fputc('\n', fi.access.fp);; 3421 fflush(fi.access.fp);; 3422 funlockfile(fi.access.fp);; 3423 (void)mg_fclose(&fi.access); /* Ignore errors. We can't call; 3424 * mg_cry here anyway ;-) */; 3425 }; 3426 }; 3427}; 3428#else; 3429#error Must either enable filesystems or provide a custom mg_cry_internal_impl implementation; 3430#endif /* Externally provided function */; 3431 ; 3432 ; 3433/* Construct fake connection structure. Used for logging, if connection; 3434 * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:101195,access,access,101195,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['access'],['access']
Security,"6511////////////////////////////////////////////////////////////////////////////////; 6512/// Return GetCheckSum(kCurrentCheckSum,isvalid);; 6513 ; 6514UInt_t TClass::GetCheckSum(Bool_t &isvalid) const; 6515{; 6516 return GetCheckSum(kCurrentCheckSum,isvalid);; 6517}; 6518 ; 6519////////////////////////////////////////////////////////////////////////////////; 6520/// Compute and/or return the class check sum.; 6521///; 6522/// isvalid is set to false, if the function is unable to calculate the; 6523/// checksum.; 6524///; 6525/// The class ckecksum is used by the automatic schema evolution algorithm; 6526/// to uniquely identify a class version.; 6527/// The check sum is built from the names/types of base classes and; 6528/// data members.; 6529/// Original algorithm from Victor Perevovchikov (perev@bnl.gov).; 6530///; 6531/// The valid range of code is determined by ECheckSum.; 6532///; 6533/// - kNoEnum: data members of type enum are not counted in the checksum; 6534/// - kNoRange: return the checksum of data members and base classes, not including the ranges and array size found in comments.; 6535/// - kWithTypeDef: use the sugared type name in the calculation.; 6536///; 6537/// This is needed for backward compatibility.; 6538///; 6539/// WARNING: this function must be kept in sync with TStreamerInfo::GetCheckSum.; 6540/// They are both used to handle backward compatibility and should both return the same values.; 6541/// TStreamerInfo uses the information in TStreamerElement while TClass uses the information; 6542/// from TClass::GetListOfBases and TClass::GetListOfDataMembers.; 6543 ; 6544UInt_t TClass::GetCheckSum(ECheckSum code, Bool_t &isvalid) const; 6545{; 6546 // fCheckSum is an atomic variable. Also once it has; 6547 // transition from a zero Value it never changes. If two; 6548 // thread reach past this if statement and calculated the; 6549 // 'kLastestCheckSum', they will by definition obtain the; 6550 // same value, so technically we could simply have:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:250643,checksum,checksum,250643,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,2,['checksum'],['checksum']
Security,"6517 * https://www.openssl.org/docs/man1.1.0/ssl/ssl.html; 16518 * But in the source code const SSL is used:; 16519 * 'void (*)(const SSL *, int, int)' See:; 16520 * https://github.com/openssl/openssl/blob/1d97c8435171a7af575f73c526d79e1ef0ee5960/ssl/ssl.h#L1173; 16521 * Problem about wrong documentation described, but not resolved:; 16522 * https://bugs.launchpad.net/ubuntu/+source/openssl/+bug/1147526; 16523 * Wrong const cast ignored on C or can be suppressed by compiler flags.; 16524 * But when compiled with modern C++ compiler, correct const should be; 16525 * provided; 16526 */; 16527 SSL_CTX_set_info_callback(dom_ctx->ssl_ctx, ssl_info_callback);; 16528 ; 16529 SSL_CTX_set_tlsext_servername_callback(dom_ctx->ssl_ctx,; 16530 ssl_servername_callback);; 16531 ; 16532 /* If a callback has been specified, call it. */; 16533 callback_ret = (phys_ctx->callbacks.init_ssl == NULL); 16534 ? 0; 16535 : (phys_ctx->callbacks.init_ssl(dom_ctx->ssl_ctx,; 16536 phys_ctx->user_data));; 16537 ; 16538 /* If callback returns 0, civetweb sets up the SSL certificate.; 16539 * If it returns 1, civetweb assumes the calback already did this.; 16540 * If it returns -1, initializing ssl fails. */; 16541 if (callback_ret < 0) {; 16542 mg_cry_ctx_internal(phys_ctx,; 16543 ""SSL callback returned error: %i"",; 16544 callback_ret);; 16545 return 0;; 16546 }; 16547 if (callback_ret > 0) {; 16548 /* Callback did everything. */; 16549 return 1;; 16550 }; 16551 ; 16552 /* If a domain callback has been specified, call it. */; 16553 callback_ret = (phys_ctx->callbacks.init_ssl_domain == NULL); 16554 ? 0; 16555 : (phys_ctx->callbacks.init_ssl_domain(; 16556 dom_ctx->config[AUTHENTICATION_DOMAIN],; 16557 dom_ctx->ssl_ctx,; 16558 phys_ctx->user_data));; 16559 ; 16560 /* If domain callback returns 0, civetweb sets up the SSL certificate.; 16561 * If it returns 1, civetweb assumes the calback already did this.; 16562 * If it returns -1, initializing ssl fails. */; 16563 if (callback_ret < 0) {; 16564 mg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:489904,certificate,certificate,489904,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['certificate'],['certificate']
Security,"6518 * https://www.openssl.org/docs/man1.1.0/ssl/ssl.html; 16519 * But in the source code const SSL is used:; 16520 * 'void (*)(const SSL *, int, int)' See:; 16521 * https://github.com/openssl/openssl/blob/1d97c8435171a7af575f73c526d79e1ef0ee5960/ssl/ssl.h#L1173; 16522 * Problem about wrong documentation described, but not resolved:; 16523 * https://bugs.launchpad.net/ubuntu/+source/openssl/+bug/1147526; 16524 * Wrong const cast ignored on C or can be suppressed by compiler flags.; 16525 * But when compiled with modern C++ compiler, correct const should be; 16526 * provided; 16527 */; 16528 SSL_CTX_set_info_callback(dom_ctx->ssl_ctx, ssl_info_callback);; 16529 ; 16530 SSL_CTX_set_tlsext_servername_callback(dom_ctx->ssl_ctx,; 16531 ssl_servername_callback);; 16532 ; 16533 /* If a callback has been specified, call it. */; 16534 callback_ret = (phys_ctx->callbacks.init_ssl == NULL); 16535 ? 0; 16536 : (phys_ctx->callbacks.init_ssl(dom_ctx->ssl_ctx,; 16537 phys_ctx->user_data));; 16538 ; 16539 /* If callback returns 0, civetweb sets up the SSL certificate.; 16540 * If it returns 1, civetweb assumes the calback already did this.; 16541 * If it returns -1, initializing ssl fails. */; 16542 if (callback_ret < 0) {; 16543 mg_cry_ctx_internal(phys_ctx,; 16544 ""SSL callback returned error: %i"",; 16545 callback_ret);; 16546 return 0;; 16547 }; 16548 if (callback_ret > 0) {; 16549 /* Callback did everything. */; 16550 return 1;; 16551 }; 16552 ; 16553 /* If a domain callback has been specified, call it. */; 16554 callback_ret = (phys_ctx->callbacks.init_ssl_domain == NULL); 16555 ? 0; 16556 : (phys_ctx->callbacks.init_ssl_domain(; 16557 dom_ctx->config[AUTHENTICATION_DOMAIN],; 16558 dom_ctx->ssl_ctx,; 16559 phys_ctx->user_data));; 16560 ; 16561 /* If domain callback returns 0, civetweb sets up the SSL certificate.; 16562 * If it returns 1, civetweb assumes the calback already did this.; 16563 * If it returns -1, initializing ssl fails. */; 16564 if (callback_ret < 0) {; 16565 mg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:489937,certificate,certificate,489937,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['certificate'],['certificate']
Security,"6578////////////////////////////////////////////////////////////////////////////////; 6579/// Return GetCheckSum(kCurrentCheckSum,isvalid);; 6580 ; 6581UInt_t TClass::GetCheckSum(Bool_t &isvalid) const; 6582{; 6583 return GetCheckSum(kCurrentCheckSum,isvalid);; 6584}; 6585 ; 6586////////////////////////////////////////////////////////////////////////////////; 6587/// Compute and/or return the class check sum.; 6588///; 6589/// isvalid is set to false, if the function is unable to calculate the; 6590/// checksum.; 6591///; 6592/// The class ckecksum is used by the automatic schema evolution algorithm; 6593/// to uniquely identify a class version.; 6594/// The check sum is built from the names/types of base classes and; 6595/// data members.; 6596/// Original algorithm from Victor Perevovchikov (perev@bnl.gov).; 6597///; 6598/// The valid range of code is determined by ECheckSum.; 6599///; 6600/// - kNoEnum: data members of type enum are not counted in the checksum; 6601/// - kNoRange: return the checksum of data members and base classes, not including the ranges and array size found in comments.; 6602/// - kWithTypeDef: use the sugared type name in the calculation.; 6603///; 6604/// This is needed for backward compatibility.; 6605///; 6606/// WARNING: this function must be kept in sync with TStreamerInfo::GetCheckSum.; 6607/// They are both used to handle backward compatibility and should both return the same values.; 6608/// TStreamerInfo uses the information in TStreamerElement while TClass uses the information; 6609/// from TClass::GetListOfBases and TClass::GetListOfDataMembers.; 6610 ; 6611UInt_t TClass::GetCheckSum(ECheckSum code, Bool_t &isvalid) const; 6612{; 6613 // fCheckSum is an atomic variable. Also once it has; 6614 // transition from a zero Value it never changes. If two; 6615 // thread reach past this if statement and calculated the; 6616 // 'kLastestCheckSum', they will by definition obtain the; 6617 // same value, so technically we could simply have:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:253394,checksum,checksum,253394,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,2,['checksum'],['checksum']
Security,"66#endif; 3367 ; 3368 IGNORE_UNUSED_RESULT(vsnprintf_impl(buf, sizeof(buf), fmt, ap));; 3369 ; 3370#if defined(GCC_DIAGNOSTIC); 3371#pragma GCC diagnostic pop; 3372#endif; 3373 ; 3374 buf[sizeof(buf) - 1] = 0;; 3375 ; 3376 DEBUG_TRACE(""mg_cry called from %s:%u: %s"", func, line, buf);; 3377 ; 3378 if (!conn) {; 3379 puts(buf);; 3380 return;; 3381 }; 3382 ; 3383 /* Do not lock when getting the callback value, here and below.; 3384 * I suppose this is fine, since function cannot disappear in the; 3385 * same way string option can. */; 3386 if ((conn->phys_ctx->callbacks.log_message == NULL); 3387 || (conn->phys_ctx->callbacks.log_message(conn, buf) == 0)) {; 3388 ; 3389 if (conn->dom_ctx->config[ERROR_LOG_FILE] != NULL) {; 3390 if (mg_fopen(conn,; 3391 conn->dom_ctx->config[ERROR_LOG_FILE],; 3392 MG_FOPEN_MODE_APPEND,; 3393 &fi); 3394 == 0) {; 3395 fi.access.fp = NULL;; 3396 }; 3397 } else {; 3398 fi.access.fp = NULL;; 3399 }; 3400 ; 3401 if (fi.access.fp != NULL) {; 3402 flockfile(fi.access.fp);; 3403 timestamp = time(NULL);; 3404 ; 3405 sockaddr_to_string(src_addr, sizeof(src_addr), &conn->client.rsa);; 3406 fprintf(fi.access.fp,; 3407 ""[%010lu] [error] [client %s] "",; 3408 (unsigned long)timestamp,; 3409 src_addr);; 3410 ; 3411 if (conn->request_info.request_method != NULL) {; 3412 fprintf(fi.access.fp,; 3413 ""%s %s: "",; 3414 conn->request_info.request_method,; 3415 conn->request_info.request_uri; 3416 ? conn->request_info.request_uri; 3417 : """");; 3418 }; 3419 ; 3420 fprintf(fi.access.fp, ""%s"", buf);; 3421 fputc('\n', fi.access.fp);; 3422 fflush(fi.access.fp);; 3423 funlockfile(fi.access.fp);; 3424 (void)mg_fclose(&fi.access); /* Ignore errors. We can't call; 3425 * mg_cry here anyway ;-) */; 3426 }; 3427 }; 3428}; 3429#else; 3430#error Must either enable filesystems or provide a custom mg_cry_internal_impl implementation; 3431#endif /* Externally provided function */; 3432 ; 3433 ; 3434/* Construct fake connection structure. Used for logging, if connection; 3435 * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:101227,access,access,101227,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['access'],['access']
Security,"6760 } else if (callback_ret > 0) {; 16761 /* Callback > 0: Consider init done. */; 16762 dom_ctx->ssl_ctx = (SSL_CTX *)ssl_ctx;; 16763 if (!initialize_openssl(ebuf, sizeof(ebuf))) {; 16764 mg_cry_ctx_internal(phys_ctx, ""%s"", ebuf);; 16765 return 0;; 16766 }; 16767 return 1;; 16768 }; 16769 /* else: external_ssl_ctx/external_ssl_ctx_domain do not exist or return; 16770 * 0, CivetWeb should continue initializing SSL */; 16771 ; 16772 /* If PEM file is not specified and the init_ssl callbacks; 16773 * are not specified, setup will fail. */; 16774 if (((pem = dom_ctx->config[SSL_CERTIFICATE]) == NULL); 16775 && (phys_ctx->callbacks.init_ssl == NULL); 16776 && (phys_ctx->callbacks.init_ssl_domain == NULL)) {; 16777 /* No certificate and no init_ssl callbacks:; 16778 * Essential data to set up TLS is missing.; 16779 */; 16780 mg_cry_ctx_internal(phys_ctx,; 16781 ""Initializing SSL failed: -%s is not set"",; 16782 config_options[SSL_CERTIFICATE].name);; 16783 return 0;; 16784 }; 16785 ; 16786 /* If a certificate chain is configured, use it. */; 16787 chain = dom_ctx->config[SSL_CERTIFICATE_CHAIN];; 16788 if (chain == NULL) {; 16789 /* Default: certificate chain in PEM file */; 16790 chain = pem;; 16791 }; 16792 if ((chain != NULL) && (*chain == 0)) {; 16793 /* If the chain is an empty string, don't use it. */; 16794 chain = NULL;; 16795 }; 16796 ; 16797 if (!initialize_openssl(ebuf, sizeof(ebuf))) {; 16798 mg_cry_ctx_internal(phys_ctx, ""%s"", ebuf);; 16799 return 0;; 16800 }; 16801 ; 16802 return init_ssl_ctx_impl(phys_ctx, dom_ctx, pem, chain);; 16803}; 16804 ; 16805 ; 16806static void; 16807uninitialize_openssl(void); 16808{; 16809#if defined(OPENSSL_API_1_1) || defined(OPENSSL_API_3_0); 16810 ; 16811 if (mg_atomic_dec(&cryptolib_users) == 0) {; 16812 ; 16813 /* Shutdown according to; 16814 * https://wiki.openssl.org/index.php/Library_Initialization#Cleanup; 16815 * http://stackoverflow.com/questions/29845527/how-to-properly-uninitialize-openssl; 16816 */; 16817 CONF_modul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:498372,certificate,certificate,498372,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['certificate'],['certificate']
Security,"6761 } else if (callback_ret > 0) {; 16762 /* Callback > 0: Consider init done. */; 16763 dom_ctx->ssl_ctx = (SSL_CTX *)ssl_ctx;; 16764 if (!initialize_openssl(ebuf, sizeof(ebuf))) {; 16765 mg_cry_ctx_internal(phys_ctx, ""%s"", ebuf);; 16766 return 0;; 16767 }; 16768 return 1;; 16769 }; 16770 /* else: external_ssl_ctx/external_ssl_ctx_domain do not exist or return; 16771 * 0, CivetWeb should continue initializing SSL */; 16772 ; 16773 /* If PEM file is not specified and the init_ssl callbacks; 16774 * are not specified, setup will fail. */; 16775 if (((pem = dom_ctx->config[SSL_CERTIFICATE]) == NULL); 16776 && (phys_ctx->callbacks.init_ssl == NULL); 16777 && (phys_ctx->callbacks.init_ssl_domain == NULL)) {; 16778 /* No certificate and no init_ssl callbacks:; 16779 * Essential data to set up TLS is missing.; 16780 */; 16781 mg_cry_ctx_internal(phys_ctx,; 16782 ""Initializing SSL failed: -%s is not set"",; 16783 config_options[SSL_CERTIFICATE].name);; 16784 return 0;; 16785 }; 16786 ; 16787 /* If a certificate chain is configured, use it. */; 16788 chain = dom_ctx->config[SSL_CERTIFICATE_CHAIN];; 16789 if (chain == NULL) {; 16790 /* Default: certificate chain in PEM file */; 16791 chain = pem;; 16792 }; 16793 if ((chain != NULL) && (*chain == 0)) {; 16794 /* If the chain is an empty string, don't use it. */; 16795 chain = NULL;; 16796 }; 16797 ; 16798 if (!initialize_openssl(ebuf, sizeof(ebuf))) {; 16799 mg_cry_ctx_internal(phys_ctx, ""%s"", ebuf);; 16800 return 0;; 16801 }; 16802 ; 16803 return init_ssl_ctx_impl(phys_ctx, dom_ctx, pem, chain);; 16804}; 16805 ; 16806 ; 16807static void; 16808uninitialize_openssl(void); 16809{; 16810#if defined(OPENSSL_API_1_1) || defined(OPENSSL_API_3_0); 16811 ; 16812 if (mg_atomic_dec(&cryptolib_users) == 0) {; 16813 ; 16814 /* Shutdown according to; 16815 * https://wiki.openssl.org/index.php/Library_Initialization#Cleanup; 16816 * http://stackoverflow.com/questions/29845527/how-to-properly-uninitialize-openssl; 16817 */; 16818 CONF_modul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:498405,certificate,certificate,498405,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['certificate'],['certificate']
Security,"6> >(const ROOT::Math::SVector<float,6U*(6U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,6,6>fRep; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:5464,access,access,5464,root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,4,['access'],"['access', 'accessing']"
Security,"7 The method SetTitle() has the same syntax:; 198~~~ {.cpp}; 199 h->SetTitle(""Histogram title;Another X title Axis"");; 200~~~; 201Alternatively, the title of each axis can be set directly:; 202~~~ {.cpp}; 203 h->GetXaxis()->SetTitle(""X axis title"");; 204 h->GetYaxis()->SetTitle(""Y axis title"");; 205~~~; 206For bin labels see \ref binning.; 207 ; 208\anchor binning; 209## Binning; 210 ; 211\anchor fix-var; 212### Fix or variable bin size; 213 ; 214 All histogram types support either fix or variable bin sizes.; 215 2-D histograms may have fix size bins along X and variable size bins; 216 along Y or vice-versa. The functions to fill, manipulate, draw or access; 217 histograms are identical in both cases.; 218 ; 219 Each histogram always contains 3 axis objects of type TAxis: fXaxis, fYaxis and fZaxis.; 220 To access the axis parameters, use:; 221~~~ {.cpp}; 222 TAxis *xaxis = h->GetXaxis(); etc.; 223 Double_t binCenter = xaxis->GetBinCenter(bin), etc.; 224~~~; 225 See class TAxis for a description of all the access functions.; 226 The axis range is always stored internally in double precision.; 227 ; 228\anchor convention; 229### Convention for numbering bins; 230 ; 231 For all histogram types: nbins, xlow, xup; 232~~~ {.cpp}; 233 bin = 0; underflow bin; 234 bin = 1; first bin with low-edge xlow INCLUDED; 235 bin = nbins; last bin with upper-edge xup EXCLUDED; 236 bin = nbins+1; overflow bin; 237~~~; 238 In case of 2-D or 3-D histograms, a ""global bin"" number is defined.; 239 For example, assuming a 3-D histogram with (binx, biny, binz), the function; 240~~~ {.cpp}; 241 Int_t gbin = h->GetBin(binx, biny, binz);; 242~~~; 243 returns a global/linearized gbin number. This global gbin is useful; 244 to access the bin content/error information independently of the dimension.; 245 Note that to access the information other than bin content and errors; 246 one should use the TAxis object directly with e.g.:; 247~~~ {.cpp}; 248 Double_t xcenter = h3->GetZaxis()->GetBinCenter(27",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:10197,access,access,10197,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['access'],['access']
Security,"7#endif; 10098 {; 10099 /* Without on-the-fly compression, we know the content-length; 10100 * and we can use ranges (with on-the-fly compression we cannot).; 10101 * So we send these response headers only in this case. */; 10102 char len[32];; 10103 int trunc = 0;; 10104 mg_snprintf(conn, &trunc, len, sizeof(len), ""%"" INT64_FMT, cl);; 10105 ; 10106 if (!trunc) {; 10107 mg_response_header_add(conn, ""Content-Length"", len, -1);; 10108 }; 10109 ; 10110 mg_response_header_add(conn, ""Accept-Ranges"", ""bytes"", -1);; 10111 }; 10112 ; 10113 if (encoding) {; 10114 mg_response_header_add(conn, ""Content-Encoding"", encoding, -1);; 10115 }; 10116 if (range[0] != 0) {; 10117 mg_response_header_add(conn, ""Content-Range"", range, -1);; 10118 }; 10119 ; 10120 /* The code above does not add any header starting with X- to make; 10121 * sure no one of the additional_headers is included twice */; 10122 if ((additional_headers != NULL) && (*additional_headers != 0)) {; 10123 mg_response_header_add_lines(conn, additional_headers);; 10124 }; 10125 ; 10126 /* Send all headers */; 10127 mg_response_header_send(conn);; 10128 ; 10129 if (!is_head_request) {; 10130#if defined(USE_ZLIB); 10131 if (allow_on_the_fly_compression) {; 10132 /* Compress and send */; 10133 send_compressed_data(conn, filep);; 10134 } else; 10135#endif; 10136 {; 10137 /* Send file directly */; 10138 send_file_data(conn, filep, r1, cl);; 10139 }; 10140 }; 10141 (void)mg_fclose(&filep->access); /* ignore error on read only file */; 10142}; 10143 ; 10144 ; 10145int; 10146mg_send_file_body(struct mg_connection *conn, const char *path); 10147{; 10148 struct mg_file file = STRUCT_FILE_INITIALIZER;; 10149 if (!mg_fopen(conn, path, MG_FOPEN_MODE_READ, &file)) {; 10150 return -1;; 10151 }; 10152 fclose_on_exec(&file.access, conn);; 10153 send_file_data(conn, &file, 0, INT64_MAX);; 10154 (void)mg_fclose(&file.access); /* Ignore errors for readonly files */; 10155 return 0; /* >= 0 for OK */; 10156}; 10157#endif /* NO_FILESYSTEMS */;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:291568,access,access,291568,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['access'],['access']
Security,"7,ROOT::Math::MatRepStd<double,7,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:5938,access,access,5938,root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,2,['access'],['access']
Security,"7,ROOT::Math::MatRepStd<double,9,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:5938,access,access,5938,root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,2,['access'],['access']
Security,"7/// macrofilename_methodname in each of 6 main selector methods if the method; 6728/// macrofilename_methodname exist (Where macrofilename is stripped of its; 6729/// extension).; 6730///; 6731/// Concretely, with the script named h1analysisProxy.C,; 6732///; 6733/// - The method calls the method (if it exist); 6734/// - Begin -> void h1analysisProxy_Begin(TTree*);; 6735/// - SlaveBegin -> void h1analysisProxy_SlaveBegin(TTree*);; 6736/// - Notify -> bool h1analysisProxy_Notify();; 6737/// - Process -> bool h1analysisProxy_Process(Long64_t);; 6738/// - SlaveTerminate -> void h1analysisProxy_SlaveTerminate();; 6739/// - Terminate -> void h1analysisProxy_Terminate();; 6740///; 6741/// If a file name macrofilename.h (or .hh, .hpp, .hxx, .hPP, .hXX) exist; 6742/// it is included before the declaration of the proxy class. This can; 6743/// be used in particular to insure that the include files needed by; 6744/// the macro file are properly loaded.; 6745///; 6746/// The default histogram is accessible via the variable named 'htemp'.; 6747///; 6748/// If the library of the classes describing the data in the branch is; 6749/// loaded, the skeleton will add the needed `include` statements and; 6750/// give the ability to access the object stored in the branches.; 6751///; 6752/// To draw px using the file hsimple.root (generated by the; 6753/// hsimple.C tutorial), we need a file named hsimple.cxx:; 6754/// ~~~ {.cpp}; 6755/// double hsimple() {; 6756/// return px;; 6757/// }; 6758/// ~~~; 6759/// MakeProxy can then be used indirectly via the TTree::Draw interface; 6760/// as follow:; 6761/// ~~~ {.cpp}; 6762/// new TFile(""hsimple.root""); 6763/// ntuple->Draw(""hsimple.cxx"");; 6764/// ~~~; 6765/// A more complete example is available in the tutorials directory:; 6766/// h1analysisProxy.cxx , h1analysProxy.h and h1analysisProxyCut.C; 6767/// which reimplement the selector found in h1analysis.C; 6768 ; 6769Int_t TTree::MakeProxy(const char* proxyClassname, const char* macrofil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:263887,access,accessible,263887,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['access'],['accessible']
Security,"713 fStreamer = TVirtualStreamerInfo::Factory()->GenEmulatedClassStreamer( GetName(), silent );; 1714 }; 1715 }; 1716 } else if (TClassEdit::IsStdPair(GetName())) {; 1717 // std::pairs have implicit conversions; 1718 GetSchemaRules(kTRUE);; 1719 }; 1720 ; 1721 ResetBit(kLoading);; 1722}; 1723 ; 1724////////////////////////////////////////////////////////////////////////////////; 1725/// TClass dtor. Deletes all list that might have been created.; 1726 ; 1727TClass::~TClass(); 1728{; 1729 R__LOCKGUARD(gInterpreterMutex);; 1730 ; 1731 // Remove from the typedef hashtables.; 1732 if (fgClassTypedefHash && TestBit (kHasNameMapNode)) {; 1733 TString resolvedThis = TClassEdit::ResolveTypedef (GetName(), kTRUE);; 1734 TIter next (fgClassTypedefHash->GetListForObject (resolvedThis));; 1735 while ( TNameMapNode* htmp = static_cast<TNameMapNode*> (next()) ) {; 1736 if (resolvedThis == htmp->String() && htmp->fOrigName == GetName()) {; 1737 fgClassTypedefHash->Remove (htmp);; 1738 delete htmp;; 1739 break;; 1740 }; 1741 }; 1742 }; 1743 ; 1744 // Not owning lists, don't call Delete(); 1745 // But this still need to be done first because the TList destructor; 1746 // does access the object contained (via GetObject()->TestBit(kCanDelete)); 1747 delete fStreamer; fStreamer =nullptr;; 1748 delete fAllPubData; fAllPubData =nullptr;; 1749 delete fAllPubMethod; fAllPubMethod=nullptr;; 1750 ; 1751 delete fPersistentRef.load();; 1752 ; 1753 if (fBase.load()); 1754 (*fBase).Delete();; 1755 delete fBase.load(); fBase = nullptr;; 1756 ; 1757 if (fData.load()); 1758 (*fData).Delete();; 1759 delete fData.load(); fData = nullptr;; 1760 ; 1761 if (fUsingData.load()); 1762 (*fUsingData).Delete();; 1763 delete fUsingData.load(); fUsingData = nullptr;; 1764 ; 1765 if (fEnums.load()); 1766 (*fEnums).Delete();; 1767 delete fEnums.load(); fEnums = nullptr;; 1768 ; 1769 if (fFuncTemplate); 1770 fFuncTemplate->Delete();; 1771 delete fFuncTemplate; fFuncTemplate = nullptr;; 1772 ; 1773 if (fMethod.load",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:67472,access,access,67472,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['access'],['access']
Security,"797delete_file(struct mg_connection *conn, const char *path); 11798{; 11799 struct de de;; 11800 memset(&de.file, 0, sizeof(de.file));; 11801 if (!mg_stat(conn, path, &de.file)) {; 11802 /* mg_stat returns 0 if the file does not exist */; 11803 mg_send_http_error(conn,; 11804 404,; 11805 ""Error: Cannot delete file\nFile %s not found"",; 11806 path);; 11807 return;; 11808 }; 11809 ; 11810 if (de.file.is_directory) {; 11811 if (remove_directory(conn, path)) {; 11812 /* Delete is successful: Return 204 without content. */; 11813 mg_send_http_error(conn, 204, ""%s"", """");; 11814 } else {; 11815 /* Delete is not successful: Return 500 (Server error). */; 11816 mg_send_http_error(conn, 500, ""Error: Could not delete %s"", path);; 11817 }; 11818 return;; 11819 }; 11820 ; 11821 /* This is an existing file (not a directory).; 11822 * Check if write permission is granted. */; 11823 if (access(path, W_OK) != 0) {; 11824 /* File is read only */; 11825 mg_send_http_error(; 11826 conn,; 11827 403,; 11828 ""Error: Delete not possible\nDeleting %s is not allowed"",; 11829 path);; 11830 return;; 11831 }; 11832 ; 11833 /* Try to delete it. */; 11834 if (mg_remove(conn, path) == 0) {; 11835 /* Delete was successful: Return 204 without content. */; 11836 mg_response_header_start(conn, 204);; 11837 send_no_cache_header(conn);; 11838 send_additional_header(conn);; 11839 mg_response_header_add(conn, ""Content-Length"", ""0"", -1);; 11840 mg_response_header_send(conn);; 11841 ; 11842 } else {; 11843 /* Delete not successful (file locked). */; 11844 mg_send_http_error(conn,; 11845 423,; 11846 ""Error: Cannot delete file\nremove(%s): %s"",; 11847 path,; 11848 strerror(ERRNO));; 11849 }; 11850}; 11851#endif /* !NO_FILES */; 11852 ; 11853 ; 11854#if !defined(NO_FILESYSTEMS); 11855static void; 11856send_ssi_file(struct mg_connection *, const char *, struct mg_file *, int);; 11857 ; 11858 ; 11859static void; 11860do_ssi_include(struct mg_connection *conn,; 11861 const char *ssi,; 11862 char *tag,; 11863 int i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:342320,access,access,342320,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['access'],['access']
Security,"798delete_file(struct mg_connection *conn, const char *path); 11799{; 11800 struct de de;; 11801 memset(&de.file, 0, sizeof(de.file));; 11802 if (!mg_stat(conn, path, &de.file)) {; 11803 /* mg_stat returns 0 if the file does not exist */; 11804 mg_send_http_error(conn,; 11805 404,; 11806 ""Error: Cannot delete file\nFile %s not found"",; 11807 path);; 11808 return;; 11809 }; 11810 ; 11811 if (de.file.is_directory) {; 11812 if (remove_directory(conn, path)) {; 11813 /* Delete is successful: Return 204 without content. */; 11814 mg_send_http_error(conn, 204, ""%s"", """");; 11815 } else {; 11816 /* Delete is not successful: Return 500 (Server error). */; 11817 mg_send_http_error(conn, 500, ""Error: Could not delete %s"", path);; 11818 }; 11819 return;; 11820 }; 11821 ; 11822 /* This is an existing file (not a directory).; 11823 * Check if write permission is granted. */; 11824 if (access(path, W_OK) != 0) {; 11825 /* File is read only */; 11826 mg_send_http_error(; 11827 conn,; 11828 403,; 11829 ""Error: Delete not possible\nDeleting %s is not allowed"",; 11830 path);; 11831 return;; 11832 }; 11833 ; 11834 /* Try to delete it. */; 11835 if (mg_remove(conn, path) == 0) {; 11836 /* Delete was successful: Return 204 without content. */; 11837 mg_response_header_start(conn, 204);; 11838 send_no_cache_header(conn);; 11839 send_additional_header(conn);; 11840 mg_response_header_add(conn, ""Content-Length"", ""0"", -1);; 11841 mg_response_header_send(conn);; 11842 ; 11843 } else {; 11844 /* Delete not successful (file locked). */; 11845 mg_send_http_error(conn,; 11846 423,; 11847 ""Error: Cannot delete file\nremove(%s): %s"",; 11848 path,; 11849 strerror(ERRNO));; 11850 }; 11851}; 11852#endif /* !NO_FILES */; 11853 ; 11854 ; 11855#if !defined(NO_FILESYSTEMS); 11856static void; 11857send_ssi_file(struct mg_connection *, const char *, struct mg_file *, int);; 11858 ; 11859 ; 11860static void; 11861do_ssi_include(struct mg_connection *conn,; 11862 const char *ssi,; 11863 char *tag,; 11864 int i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:342353,access,access,342353,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['access'],['access']
Security,"7> >(const ROOT::Math::SVector<float,7U*(7U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,7U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,7,7>fRep; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:5464,access,access,5464,root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,4,['access'],"['access', 'accessing']"
Security,"7> >(const ROOT::Math::SVector<float,9U*(7U+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,9U*(7U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<float,9,7>fRep; static ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::(anonymous)kCols; static ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::(anonymous)kRows; static ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:5464,access,access,5464,root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,4,['access'],"['access', 'accessing']"
Security,"8 ; 219protected:; 220 SmallVectorTemplateCommon(size_t Size) : Base(getFirstEl(), Size) {}; 221 ; 222 void grow_pod(size_t MinSize, size_t TSize) { Base::grow_pod(getFirstEl(), MinSize, TSize); }; 223 ; 224 /// Return true if this is a smallvector which has not had dynamic; 225 /// memory allocated for it.; 226 bool isSmall() const { return this->fBeginX == getFirstEl(); }; 227 ; 228 /// Put this vector in a state of being small.; 229 void resetToSmall(); 230 {; 231 this->fBeginX = getFirstEl();; 232 // from the original LLVM implementation:; 233 // FIXME: Setting fCapacity to 0 is suspect.; 234 this->fSize = this->fCapacity = 0;; 235 }; 236 ; 237public:; 238 // note that fSize is a _signed_ integer, but we expose it as an unsigned integer for consistency with STL containers; 239 // as well as backward-compatibility; 240 using size_type = size_t;; 241 using difference_type = ptrdiff_t;; 242 using value_type = T;; 243 using iterator = T *;; 244 using const_iterator = const T *;; 245 ; 246 using const_reverse_iterator = std::reverse_iterator<const_iterator>;; 247 using reverse_iterator = std::reverse_iterator<iterator>;; 248 ; 249 using reference = T &;; 250 using const_reference = const T &;; 251 using pointer = T *;; 252 using const_pointer = const T *;; 253 ; 254 using Base::capacity;; 255 using Base::empty;; 256 using Base::size;; 257 ; 258 // forward iterator creation methods.; 259 iterator begin() noexcept { return (iterator)this->fBeginX; }; 260 const_iterator begin() const noexcept { return (const_iterator)this->fBeginX; }; 261 const_iterator cbegin() const noexcept { return (const_iterator)this->fBeginX; }; 262 iterator end() noexcept { return begin() + size(); }; 263 const_iterator end() const noexcept { return begin() + size(); }; 264 const_iterator cend() const noexcept { return begin() + size(); }; 265 ; 266 // reverse iterator creation methods.; 267 reverse_iterator rbegin() noexcept { return reverse_iterator(end()); }; 268 const_reverse_iterator rbegin(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RVec_8hxx_source.html:8193,expose,expose,8193,doc/master/RVec_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RVec_8hxx_source.html,2,['expose'],['expose']
Security,"8 ; 309 /////////////////////////////////////////////////////////////////////////; 310 /// configures that only native (own-created) connections are allowed; 311 void SetNativeOnlyConn(bool on = true) { fNativeOnlyConn = on; }; 312 ; 313 /////////////////////////////////////////////////////////////////////////; 314 /// returns true if only native (own-created) connections are allowed; 315 bool IsNativeOnlyConn() const { return fNativeOnlyConn; }; 316 ; 317 /////////////////////////////////////////////////////////////////////////; 318 /// Configure if authentication key in connection string is required; 319 void SetRequireAuthKey(bool on) { fRequireAuthKey = on; }; 320 ; 321 /////////////////////////////////////////////////////////////////////////; 322 /// returns true if authentication string is required; 323 bool IsRequireAuthKey() const { return fRequireAuthKey; }; 324 ; 325 /////////////////////////////////////////////////////////////////////////; 326 /// Configure if window can access local files via currentdir/ path of http server; 327 void SetUseCurrentDir(bool on = true) { fUseCurrentDir = on; }; 328 ; 329 /////////////////////////////////////////////////////////////////////////; 330 /// returns true if window can access local files via currentdir/ path of http server; 331 bool IsUseCurrentDir() const { return fUseCurrentDir; }; 332 ; 333 void SetClientVersion(const std::string &vers);; 334 ; 335 std::string GetClientVersion() const;; 336 ; 337 void SetUserArgs(const std::string &args);; 338 ; 339 std::string GetUserArgs() const;; 340 ; 341 int NumConnections(bool with_pending = false) const;; 342 ; 343 unsigned GetConnectionId(int num = 0) const;; 344 ; 345 std::vector<unsigned> GetConnections(unsigned excludeid = 0) const;; 346 ; 347 bool HasConnection(unsigned connid = 0, bool only_active = true) const;; 348 ; 349 void CloseConnections();; 350 ; 351 void CloseConnection(unsigned connid);; 352 ; 353 /// Returns timeout for synchronous WebWindow operations; 3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RWebWindow_8hxx_source.html:15389,access,access,15389,doc/master/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RWebWindow_8hxx_source.html,1,['access'],['access']
Security,"8 for (jvar=ivar+1; jvar<nvar; jvar++); 619 mat2(jvar, ivar) = mat2(ivar, jvar); // symmetric matrix; 620 ; 621 ; 622 // variance-covariance; 623 for (ivar=0; ivar<nvar; ivar++) {; 624 for (jvar=0; jvar<nvar; jvar++) {; 625 (*mat)(ivar, jvar) = mat2(ivar, jvar)/ic - vec(ivar)*vec(jvar)/(ic*ic);; 626 }; 627 }; 628 ; 629 return mat;; 630}; 631 ; 632// --------------------------------------- new versions; 633 ; 634////////////////////////////////////////////////////////////////////////////////; 635/// the dataset splitting; 636 ; 637void; 638TMVA::DataSetFactory::InitOptions( TMVA::DataSetInfo& dsi,; 639 EvtStatsPerClass& nEventRequests,; 640 TString& normMode,; 641 UInt_t& splitSeed,; 642 TString& splitMode,; 643 TString& mixMode); 644{; 645 Configurable splitSpecs( dsi.GetSplitOptions() );; 646 splitSpecs.SetConfigName(""DataSetFactory"");; 647 splitSpecs.SetConfigDescription( ""Configuration options given in the \""PrepareForTrainingAndTesting\"" call; these options define the creation of the data sets used for training and expert validation by TMVA"" );; 648 ; 649 splitMode = ""Random""; // the splitting mode; 650 splitSpecs.DeclareOptionRef( splitMode, ""SplitMode"",; 651 ""Method of picking training and testing events (default: random)"" );; 652 splitSpecs.AddPreDefVal(TString(""Random""));; 653 splitSpecs.AddPreDefVal(TString(""Alternate""));; 654 splitSpecs.AddPreDefVal(TString(""Block""));; 655 ; 656 mixMode = ""SameAsSplitMode""; // the splitting mode; 657 splitSpecs.DeclareOptionRef( mixMode, ""MixMode"",; 658 ""Method of mixing events of different classes into one dataset (default: SameAsSplitMode)"" );; 659 splitSpecs.AddPreDefVal(TString(""SameAsSplitMode""));; 660 splitSpecs.AddPreDefVal(TString(""Random""));; 661 splitSpecs.AddPreDefVal(TString(""Alternate""));; 662 splitSpecs.AddPreDefVal(TString(""Block""));; 663 ; 664 splitSeed = 100;; 665 splitSpecs.DeclareOptionRef( splitSeed, ""SplitSeed"",; 666 ""Seed for random event shuffling"" );; 667 ; 668 normMode = ""EqualNumEvents""; // the wei",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:25832,validat,validation,25832,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['validat'],['validation']
Security,"8#endif; 10099 {; 10100 /* Without on-the-fly compression, we know the content-length; 10101 * and we can use ranges (with on-the-fly compression we cannot).; 10102 * So we send these response headers only in this case. */; 10103 char len[32];; 10104 int trunc = 0;; 10105 mg_snprintf(conn, &trunc, len, sizeof(len), ""%"" INT64_FMT, cl);; 10106 ; 10107 if (!trunc) {; 10108 mg_response_header_add(conn, ""Content-Length"", len, -1);; 10109 }; 10110 ; 10111 mg_response_header_add(conn, ""Accept-Ranges"", ""bytes"", -1);; 10112 }; 10113 ; 10114 if (encoding) {; 10115 mg_response_header_add(conn, ""Content-Encoding"", encoding, -1);; 10116 }; 10117 if (range[0] != 0) {; 10118 mg_response_header_add(conn, ""Content-Range"", range, -1);; 10119 }; 10120 ; 10121 /* The code above does not add any header starting with X- to make; 10122 * sure no one of the additional_headers is included twice */; 10123 if ((additional_headers != NULL) && (*additional_headers != 0)) {; 10124 mg_response_header_add_lines(conn, additional_headers);; 10125 }; 10126 ; 10127 /* Send all headers */; 10128 mg_response_header_send(conn);; 10129 ; 10130 if (!is_head_request) {; 10131#if defined(USE_ZLIB); 10132 if (allow_on_the_fly_compression) {; 10133 /* Compress and send */; 10134 send_compressed_data(conn, filep);; 10135 } else; 10136#endif; 10137 {; 10138 /* Send file directly */; 10139 send_file_data(conn, filep, r1, cl);; 10140 }; 10141 }; 10142 (void)mg_fclose(&filep->access); /* ignore error on read only file */; 10143}; 10144 ; 10145 ; 10146int; 10147mg_send_file_body(struct mg_connection *conn, const char *path); 10148{; 10149 struct mg_file file = STRUCT_FILE_INITIALIZER;; 10150 if (!mg_fopen(conn, path, MG_FOPEN_MODE_READ, &file)) {; 10151 return -1;; 10152 }; 10153 fclose_on_exec(&file.access, conn);; 10154 send_file_data(conn, &file, 0, INT64_MAX);; 10155 (void)mg_fclose(&file.access); /* Ignore errors for readonly files */; 10156 return 0; /* >= 0 for OK */; 10157}; 10158#endif /* NO_FILESYSTEMS */;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:291601,access,access,291601,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['access'],['access']
Security,"80 // and thus step on each other.; 281 ctxt->fDirectory = nullptr; // Can not be gROOT; 282 ; 283 if (ctxt->fActiveDestructor) {; 284 extraWait.push_back(fContext);; 285 } else {; 286 ctxt->fDirectoryWait = false;; 287 }; 288 fContext = next;; 289 }; 290 ; 291 // Now loop through the set of thread local 'gDirectory' that; 292 // have a one point or another pointed to this directory.; 293 for (auto &ptr : fGDirectories) {; 294 // If the thread local gDirectory still point to this directory; 295 // we need to reset it using the following sematic:; 296 // we fall back to the mother/owner of this directory or gROOTLocal; 297 // if there is no parent or nullptr if the current object is gROOTLocal.; 298 if (ptr->load() == this) {; 299 TDirectory *next = GetMotherDir();; 300 if (!next || next == this) {; 301 if (this == ROOT::Internal::gROOTLocal) { /// in that case next == this.; 302 next = nullptr;; 303 } else {; 304 next = ROOT::Internal::gROOTLocal;; 305 }; 306 } else {; 307 // We can not use 'cd' as this would access the current thread; 308 // rather than the thread corresponding to that gDirectory.; 309 next->RegisterGDirectory(ptr);; 310 }; 311 // Actually do the update of the thread local gDirectory; 312 // using its object specific lock.; 313 auto This = this;; 314 ptr->compare_exchange_strong(This, next);; 315 }; 316 }; 317 }; 318 for(auto &&context : extraWait) {; 319 // Wait until the TContext is done spinning; 320 // over the lock.; 321 while(context->fActiveDestructor);; 322 // And now let the TContext destructor finish.; 323 context->fDirectoryWait = false;; 324 }; 325 ; 326 // Wait until all register attempts are done.; 327 while(fContextPeg) {}; 328 ; 329}; 330 ; 331////////////////////////////////////////////////////////////////////////////////; 332/// Fast execution of 'new TBufferFile(TBuffer::kWrite,10000), without having; 333/// a compile time circular dependency ... alternatively we could (should?); 334/// introduce yet another abstract interface.; 3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectory_8cxx_source.html:10343,access,access,10343,doc/master/TDirectory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectory_8cxx_source.html,1,['access'],['access']
Security,"8162 ; 8163 path_len = strlen(path);; 8164 ; 8165 if ((conn == NULL) || (vec == NULL)) {; 8166 if (vec != NULL) {; 8167 memset(vec, '\0', sizeof(struct vec));; 8168 }; 8169 return;; 8170 }; 8171 ; 8172 /* Scan user-defined mime types first, in case user wants to; 8173 * override default mime types. */; 8174 list = conn->dom_ctx->config[EXTRA_MIME_TYPES];; 8175 while ((list = next_option(list, &ext_vec, &mime_vec)) != NULL) {; 8176 /* ext now points to the path suffix */; 8177 ext = path + path_len - ext_vec.len;; 8178 if (mg_strncasecmp(ext, ext_vec.ptr, ext_vec.len) == 0) {; 8179 *vec = mime_vec;; 8180 return;; 8181 }; 8182 }; 8183 ; 8184 vec->ptr = mg_get_builtin_mime_type(path);; 8185 vec->len = strlen(vec->ptr);; 8186}; 8187 ; 8188 ; 8189/* Stringify binary data. Output buffer must be twice as big as input,; 8190 * because each byte takes 2 bytes in string representation */; 8191static void; 8192bin2str(char *to, const unsigned char *p, size_t len); 8193{; 8194 static const char *hex = ""0123456789abcdef"";; 8195 ; 8196 for (; len--; p++) {; 8197 *to++ = hex[p[0] >> 4];; 8198 *to++ = hex[p[0] & 0x0f];; 8199 }; 8200 *to = '\0';; 8201}; 8202 ; 8203 ; 8204/* Return stringified MD5 hash for list of strings. Buffer must be 33 bytes.; 8205 */; 8206char *; 8207mg_md5(char buf[33], ...); 8208{; 8209 md5_byte_t hash[16];; 8210 const char *p;; 8211 va_list ap;; 8212 md5_state_t ctx;; 8213 ; 8214 md5_init(&ctx);; 8215 ; 8216 va_start(ap, buf);; 8217 while ((p = va_arg(ap, const char *)) != NULL) {; 8218 md5_append(&ctx, (const md5_byte_t *)p, strlen(p));; 8219 }; 8220 va_end(ap);; 8221 ; 8222 md5_finish(&ctx, hash);; 8223 bin2str(buf, hash, sizeof(hash));; 8224 return buf;; 8225}; 8226 ; 8227 ; 8228/* Check the user's password, return 1 if OK */; 8229static int; 8230check_password(const char *method,; 8231 const char *ha1,; 8232 const char *uri,; 8233 const char *nonce,; 8234 const char *nc,; 8235 const char *cnonce,; 8236 const char *qop,; 8237 const char *response); 8238{; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:236947,hash,hash,236947,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['hash'],['hash']
Security,"8163 ; 8164 path_len = strlen(path);; 8165 ; 8166 if ((conn == NULL) || (vec == NULL)) {; 8167 if (vec != NULL) {; 8168 memset(vec, '\0', sizeof(struct vec));; 8169 }; 8170 return;; 8171 }; 8172 ; 8173 /* Scan user-defined mime types first, in case user wants to; 8174 * override default mime types. */; 8175 list = conn->dom_ctx->config[EXTRA_MIME_TYPES];; 8176 while ((list = next_option(list, &ext_vec, &mime_vec)) != NULL) {; 8177 /* ext now points to the path suffix */; 8178 ext = path + path_len - ext_vec.len;; 8179 if (mg_strncasecmp(ext, ext_vec.ptr, ext_vec.len) == 0) {; 8180 *vec = mime_vec;; 8181 return;; 8182 }; 8183 }; 8184 ; 8185 vec->ptr = mg_get_builtin_mime_type(path);; 8186 vec->len = strlen(vec->ptr);; 8187}; 8188 ; 8189 ; 8190/* Stringify binary data. Output buffer must be twice as big as input,; 8191 * because each byte takes 2 bytes in string representation */; 8192static void; 8193bin2str(char *to, const unsigned char *p, size_t len); 8194{; 8195 static const char *hex = ""0123456789abcdef"";; 8196 ; 8197 for (; len--; p++) {; 8198 *to++ = hex[p[0] >> 4];; 8199 *to++ = hex[p[0] & 0x0f];; 8200 }; 8201 *to = '\0';; 8202}; 8203 ; 8204 ; 8205/* Return stringified MD5 hash for list of strings. Buffer must be 33 bytes.; 8206 */; 8207char *; 8208mg_md5(char buf[33], ...); 8209{; 8210 md5_byte_t hash[16];; 8211 const char *p;; 8212 va_list ap;; 8213 md5_state_t ctx;; 8214 ; 8215 md5_init(&ctx);; 8216 ; 8217 va_start(ap, buf);; 8218 while ((p = va_arg(ap, const char *)) != NULL) {; 8219 md5_append(&ctx, (const md5_byte_t *)p, strlen(p));; 8220 }; 8221 va_end(ap);; 8222 ; 8223 md5_finish(&ctx, hash);; 8224 bin2str(buf, hash, sizeof(hash));; 8225 return buf;; 8226}; 8227 ; 8228 ; 8229/* Check the user's password, return 1 if OK */; 8230static int; 8231check_password(const char *method,; 8232 const char *ha1,; 8233 const char *uri,; 8234 const char *nonce,; 8235 const char *nc,; 8236 const char *cnonce,; 8237 const char *qop,; 8238 const char *response); 8239{; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:236979,hash,hash,236979,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['hash'],['hash']
Security,"847#### The LIST option; 1848 ; 1849When option `LIST` is specified together with option; 1850`CONT`, the points used to draw the contours are saved in; 1851`TGraph` objects:; 1852 ; 1853 h->Draw(""CONT LIST"");; 1854 gPad->Update();; 1855 ; 1856The contour are saved in `TGraph` objects once the pad is painted.; 1857Therefore to use this functionality in a macro, `gPad->Update()`; 1858should be performed after the histogram drawing. Once the list is; 1859built, the contours are accessible in the following way:; 1860 ; 1861 TObjArray *contours = (TObjArray*)gROOT->GetListOfSpecials()->FindObject(""contours"");; 1862 Int_t ncontours = contours->GetSize();; 1863 TList *list = (TList*)contours->At(i);; 1864 ; 1865Where `i` is a contour number, and list contains a list of; 1866`TGraph` objects.; 1867For one given contour, more than one disjoint polyline may be generated.; 1868The number of TGraphs per contour is given by:; 1869 ; 1870 list->GetSize();; 1871 ; 1872To access the first graph in the list one should do:; 1873 ; 1874 TGraph *gr1 = (TGraph*)list->First();; 1875 ; 1876 ; 1877The following example (ContourList.C) shows how to use this functionality.; 1878 ; 1879Begin_Macro(source); 1880../../../tutorials/hist/ContourList.C; 1881End_Macro; 1882 ; 1883\anchor HP16b; 1884#### The AITOFF, MERCATOR, SINUSOIDAL and PARABOLIC options; 1885 ; 1886The following options select the `CONT4` option and are useful for; 1887sky maps or exposure maps (earth.C).; 1888 ; 1889| Option | Description |; 1890|--------------|---------------------------------------------------------------|; 1891| ""AITOFF"" | Draw a contour via an AITOFF projection.|; 1892| ""MERCATOR"" | Draw a contour via an Mercator projection.|; 1893| ""SINUSOIDAL"" | Draw a contour via an Sinusoidal projection.|; 1894| ""PARABOLIC"" | Draw a contour via an Parabolic projection.|; 1895 ; 1896Begin_Macro(source); 1897../../../tutorials/graphics/earth.C; 1898End_Macro; 1899 ; 1900 ; 1901\anchor HP17; 1902### The LEGO options; 1903",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:78287,access,access,78287,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['access'],['access']
Security,"86 /* Use global passwords file */; 8287 if (!mg_fopen(conn, gpass, MG_FOPEN_MODE_READ, filep)) {; 8288#if defined(DEBUG); 8289 /* Use mg_cry_internal here, since gpass has been; 8290 * configured. */; 8291 mg_cry_internal(conn, ""fopen(%s): %s"", gpass, strerror(ERRNO));; 8292#endif; 8293 }; 8294 /* Important: using local struct mg_file to test path for; 8295 * is_directory flag. If filep is used, mg_stat() makes it; 8296 * appear as if auth file was opened.; 8297 * TODO(mid): Check if this is still required after rewriting; 8298 * mg_stat */; 8299 } else if (mg_stat(conn, path, &filep->stat); 8300 && filep->stat.is_directory) {; 8301 mg_snprintf(conn,; 8302 &truncated,; 8303 name,; 8304 sizeof(name),; 8305 ""%s/%s"",; 8306 path,; 8307 PASSWORDS_FILE_NAME);; 8308 ; 8309 if (truncated || !mg_fopen(conn, name, MG_FOPEN_MODE_READ, filep)) {; 8310#if defined(DEBUG); 8311 /* Don't use mg_cry_internal here, but only a trace, since; 8312 * this is a typical case. It will occur for every directory; 8313 * without a password file. */; 8314 DEBUG_TRACE(""fopen(%s): %s"", name, strerror(ERRNO));; 8315#endif; 8316 }; 8317 } else {; 8318 /* Try to find .htpasswd in requested directory. */; 8319 for (p = path, e = p + strlen(p) - 1; e > p; e--) {; 8320 if (e[0] == '/') {; 8321 break;; 8322 }; 8323 }; 8324 mg_snprintf(conn,; 8325 &truncated,; 8326 name,; 8327 sizeof(name),; 8328 ""%.*s/%s"",; 8329 (int)(e - p),; 8330 p,; 8331 PASSWORDS_FILE_NAME);; 8332 ; 8333 if (truncated || !mg_fopen(conn, name, MG_FOPEN_MODE_READ, filep)) {; 8334#if defined(DEBUG); 8335 /* Don't use mg_cry_internal here, but only a trace, since; 8336 * this is a typical case. It will occur for every directory; 8337 * without a password file. */; 8338 DEBUG_TRACE(""fopen(%s): %s"", name, strerror(ERRNO));; 8339#endif; 8340 }; 8341 }; 8342 }; 8343}; 8344#endif /* NO_FILESYSTEMS */; 8345 ; 8346 ; 8347/* Parsed Authorization header */; 8348struct ah {; 8349 char *user, *uri, *cnonce, *response, *qop, *nc, *nonce;; 8350};; 8",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:240002,password,password,240002,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['password'],['password']
Security,"8624 memset(&workdata, 0, sizeof(workdata));; 8625 workdata.conn = conn;; 8626 ; 8627 if (!parse_auth_header(conn, buf, sizeof(buf), &workdata.ah)) {; 8628 return 0;; 8629 }; 8630 ; 8631 if (realm) {; 8632 workdata.domain = realm;; 8633 } else {; 8634 workdata.domain = conn->dom_ctx->config[AUTHENTICATION_DOMAIN];; 8635 }; 8636 ; 8637 return read_auth_file(filep, &workdata, INITIAL_DEPTH);; 8638}; 8639 ; 8640 ; 8641/* Public function to check http digest authentication header */; 8642int; 8643mg_check_digest_access_authentication(struct mg_connection *conn,; 8644 const char *realm,; 8645 const char *filename); 8646{; 8647 struct mg_file file = STRUCT_FILE_INITIALIZER;; 8648 int auth;; 8649 ; 8650 if (!conn || !filename) {; 8651 return -1;; 8652 }; 8653 if (!mg_fopen(conn, filename, MG_FOPEN_MODE_READ, &file)) {; 8654 return -2;; 8655 }; 8656 ; 8657 auth = authorize(conn, &file, realm);; 8658 ; 8659 mg_fclose(&file.access);; 8660 ; 8661 return auth;; 8662}; 8663#endif /* NO_FILESYSTEMS */; 8664 ; 8665 ; 8666/* Return 1 if request is authorised, 0 otherwise. */; 8667static int; 8668check_authorization(struct mg_connection *conn, const char *path); 8669{; 8670#if !defined(NO_FILESYSTEMS); 8671 char fname[UTF8_PATH_MAX];; 8672 struct vec uri_vec, filename_vec;; 8673 const char *list;; 8674 struct mg_file file = STRUCT_FILE_INITIALIZER;; 8675 int authorized = 1, truncated;; 8676 ; 8677 if (!conn || !conn->dom_ctx) {; 8678 return 0;; 8679 }; 8680 ; 8681 list = conn->dom_ctx->config[PROTECT_URI];; 8682 while ((list = next_option(list, &uri_vec, &filename_vec)) != NULL) {; 8683 if (!memcmp(conn->request_info.local_uri, uri_vec.ptr, uri_vec.len)) {; 8684 mg_snprintf(conn,; 8685 &truncated,; 8686 fname,; 8687 sizeof(fname),; 8688 ""%.*s"",; 8689 (int)filename_vec.len,; 8690 filename_vec.ptr);; 8691 ; 8692 if (truncated; 8693 || !mg_fopen(conn, fname, MG_FOPEN_MODE_READ, &file)) {; 8694 mg_cry_internal(conn,; 8695 ""%s: cannot open %s: %s"",; 8696 __func__,; 8697 fname,; 8698 stre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:249641,access,access,249641,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['access'],['access']
Security,"8625 memset(&workdata, 0, sizeof(workdata));; 8626 workdata.conn = conn;; 8627 ; 8628 if (!parse_auth_header(conn, buf, sizeof(buf), &workdata.ah)) {; 8629 return 0;; 8630 }; 8631 ; 8632 if (realm) {; 8633 workdata.domain = realm;; 8634 } else {; 8635 workdata.domain = conn->dom_ctx->config[AUTHENTICATION_DOMAIN];; 8636 }; 8637 ; 8638 return read_auth_file(filep, &workdata, INITIAL_DEPTH);; 8639}; 8640 ; 8641 ; 8642/* Public function to check http digest authentication header */; 8643int; 8644mg_check_digest_access_authentication(struct mg_connection *conn,; 8645 const char *realm,; 8646 const char *filename); 8647{; 8648 struct mg_file file = STRUCT_FILE_INITIALIZER;; 8649 int auth;; 8650 ; 8651 if (!conn || !filename) {; 8652 return -1;; 8653 }; 8654 if (!mg_fopen(conn, filename, MG_FOPEN_MODE_READ, &file)) {; 8655 return -2;; 8656 }; 8657 ; 8658 auth = authorize(conn, &file, realm);; 8659 ; 8660 mg_fclose(&file.access);; 8661 ; 8662 return auth;; 8663}; 8664#endif /* NO_FILESYSTEMS */; 8665 ; 8666 ; 8667/* Return 1 if request is authorised, 0 otherwise. */; 8668static int; 8669check_authorization(struct mg_connection *conn, const char *path); 8670{; 8671#if !defined(NO_FILESYSTEMS); 8672 char fname[UTF8_PATH_MAX];; 8673 struct vec uri_vec, filename_vec;; 8674 const char *list;; 8675 struct mg_file file = STRUCT_FILE_INITIALIZER;; 8676 int authorized = 1, truncated;; 8677 ; 8678 if (!conn || !conn->dom_ctx) {; 8679 return 0;; 8680 }; 8681 ; 8682 list = conn->dom_ctx->config[PROTECT_URI];; 8683 while ((list = next_option(list, &uri_vec, &filename_vec)) != NULL) {; 8684 if (!memcmp(conn->request_info.local_uri, uri_vec.ptr, uri_vec.len)) {; 8685 mg_snprintf(conn,; 8686 &truncated,; 8687 fname,; 8688 sizeof(fname),; 8689 ""%.*s"",; 8690 (int)filename_vec.len,; 8691 filename_vec.ptr);; 8692 ; 8693 if (truncated; 8694 || !mg_fopen(conn, fname, MG_FOPEN_MODE_READ, &file)) {; 8695 mg_cry_internal(conn,; 8696 ""%s: cannot open %s: %s"",; 8697 __func__,; 8698 fname,; 8699 stre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:249673,access,access,249673,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['access'],['access']
Security,"87 /* Use global passwords file */; 8288 if (!mg_fopen(conn, gpass, MG_FOPEN_MODE_READ, filep)) {; 8289#if defined(DEBUG); 8290 /* Use mg_cry_internal here, since gpass has been; 8291 * configured. */; 8292 mg_cry_internal(conn, ""fopen(%s): %s"", gpass, strerror(ERRNO));; 8293#endif; 8294 }; 8295 /* Important: using local struct mg_file to test path for; 8296 * is_directory flag. If filep is used, mg_stat() makes it; 8297 * appear as if auth file was opened.; 8298 * TODO(mid): Check if this is still required after rewriting; 8299 * mg_stat */; 8300 } else if (mg_stat(conn, path, &filep->stat); 8301 && filep->stat.is_directory) {; 8302 mg_snprintf(conn,; 8303 &truncated,; 8304 name,; 8305 sizeof(name),; 8306 ""%s/%s"",; 8307 path,; 8308 PASSWORDS_FILE_NAME);; 8309 ; 8310 if (truncated || !mg_fopen(conn, name, MG_FOPEN_MODE_READ, filep)) {; 8311#if defined(DEBUG); 8312 /* Don't use mg_cry_internal here, but only a trace, since; 8313 * this is a typical case. It will occur for every directory; 8314 * without a password file. */; 8315 DEBUG_TRACE(""fopen(%s): %s"", name, strerror(ERRNO));; 8316#endif; 8317 }; 8318 } else {; 8319 /* Try to find .htpasswd in requested directory. */; 8320 for (p = path, e = p + strlen(p) - 1; e > p; e--) {; 8321 if (e[0] == '/') {; 8322 break;; 8323 }; 8324 }; 8325 mg_snprintf(conn,; 8326 &truncated,; 8327 name,; 8328 sizeof(name),; 8329 ""%.*s/%s"",; 8330 (int)(e - p),; 8331 p,; 8332 PASSWORDS_FILE_NAME);; 8333 ; 8334 if (truncated || !mg_fopen(conn, name, MG_FOPEN_MODE_READ, filep)) {; 8335#if defined(DEBUG); 8336 /* Don't use mg_cry_internal here, but only a trace, since; 8337 * this is a typical case. It will occur for every directory; 8338 * without a password file. */; 8339 DEBUG_TRACE(""fopen(%s): %s"", name, strerror(ERRNO));; 8340#endif; 8341 }; 8342 }; 8343 }; 8344}; 8345#endif /* NO_FILESYSTEMS */; 8346 ; 8347 ; 8348/* Parsed Authorization header */; 8349struct ah {; 8350 char *user, *uri, *cnonce, *response, *qop, *nc, *nonce;; 8351};; 8",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:240034,password,password,240034,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['password'],['password']
Security,"9 NavigatorsMap_t fNavigators; //! Map between thread id's and navigator arrays; 120 static ThreadsMap_t *fgThreadId; //! Thread id's map; 121 static Int_t fgNumThreads; //! Number of registered threads; 122 static Bool_t fgLockNavigators; //! Lock existing navigators; 123 TGeoNavigator *fCurrentNavigator; //! current navigator; 124 TGeoVolume *fCurrentVolume; //! current volume; 125 TGeoVolume *fTopVolume; //! top level volume in geometry; 126 TGeoNode *fTopNode; //! top physical node; 127 TGeoVolume *fMasterVolume; // master volume; 128 TGeoHMatrix *fGLMatrix; // matrix to be used for view transformations; 129 TObjArray *fUniqueVolumes; //-> list of unique volumes; 130 TGeoShape *fClippingShape; //! clipping shape for raytracing; 131 TGeoElementTable *fElementTable; //! table of elements; 132 ; 133 Int_t fNLevel; // maximum accepted level in geometry; 134 TGeoVolume *fPaintVolume; //! volume currently painted; 135 TGeoVolume *fUserPaintVolume; //!; 136 THashList *fHashVolumes; //! hash list of volumes providing fast search; 137 THashList *fHashGVolumes; //! hash list of group volumes providing fast search; 138 THashList *fHashPNE; //-> hash list of physical node entries; 139 mutable TObjArray *fArrayPNE; //! array of physical node entries; 140 Int_t fSizePNEId; // size of the array of unique ID's for PN entries; 141 Int_t fNPNEId; // number of PN entries having a unique ID; 142 Int_t *fKeyPNEId; //[fSizePNEId] array of uid values for PN entries; 143 Int_t *fValuePNEId; //[fSizePNEId] array of pointers to PN entries with ID's; 144 Int_t fMaxThreads; //! Max number of threads; 145 Bool_t fMultiThread; //! Flag for multi-threading; 146 Int_t fRaytraceMode; //! Raytrace mode: 0=normal, 1=pass through, 2=transparent; 147 Bool_t fUsePWNav; // Activate usage of parallel world in navigation; 148 TGeoParallelWorld *fParallelWorld; // Parallel world; 149 ConstPropMap_t fProperties; // Map of user-defined constant properties; 150 //--- private methods; 151 Bool_t IsLoopingVol",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8h_source.html:6369,hash,hash,6369,doc/master/TGeoManager_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8h_source.html,1,['hash'],['hash']
Security,"9 of file BinarySearchTree.h. ◆ Min(). Float_t TMVA::BinarySearchTree::Min ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to Minimum for signal and background for each variable ; Definition at line 125 of file BinarySearchTree.h. ◆ NormalizeTree() [1/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; ). Normalisation of tree. ; Definition at line 343 of file BinarySearchTree.cxx. ◆ NormalizeTree() [2/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; leftBound, . std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; rightBound, . UInt_t ; actDim . ). private . normalises the binary-search tree to reduce the branch length and hence speed up the search procedure (on average). ; Definition at line 286 of file BinarySearchTree.cxx. ◆ RMS() [1/2]. Float_t TMVA::BinarySearchTree::RMS ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to RMS for signal and background for each variable ; Definition at line 122 of file BinarySearchTree.h. ◆ RMS() [2/2]. Float_t TMVA::BinarySearchTree::RMS ; (; UInt_t ; var). inline . access to RMS for each variable ; Definition at line 133 of file BinarySearchTree.h. ◆ Search() [1/2]. TMVA::BinarySearchTreeNode * TMVA::BinarySearchTree::Search ; (; Event * ; event, . Node * ; node . ); const. private . Private, recursive, function for searching. ; Definition at line 201 of file BinarySearchTree.cxx. ◆ Search() [2/2]. TMVA::BinarySearchTreeNode * TMVA::BinarySearchTree::Search ; (; Event * ; event); const. search the tree to find the node matching ""event"" ; Definition at line 193 of file BinarySearchTree.cxx. ◆ SearchVolume() [1/2]. Double_t TMVA::BinarySearchTree::SearchVolume ; (; Node * ; t, . Volume * ; volume, . Int_t ; depth, . std::vector< const TMVA::BinarySearchTreeNode * > * ; events . ). private . recursively walk through the daughter nodes and add up all weights of events that lie within the given volume ; Definition at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:13654,access,access,13654,doc/master/classTMVA_1_1BinarySearchTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html,1,['access'],['access']
Security,"9 }; 1410 key->ReadKeyBuffer(buf);; 1411 list = dynamic_cast<TList*>(key->ReadObjWithBuffer(buffer.data()));; 1412 if (list) list->SetOwner();; 1413 } else {; 1414 list = (TList*)Get(""StreamerInfo""); //for versions 2.26 (never released); 1415 }; 1416 ; 1417 if (!list) {; 1418 Info(""GetStreamerInfoList"", ""cannot find the StreamerInfo record in file %s"",; 1419 GetName());; 1420 return {nullptr, 1, hash};; 1421 }; 1422 ; 1423 return {list, 0, hash};; 1424}; 1425 ; 1426////////////////////////////////////////////////////////////////////////////////; 1427/// Read the list of TStreamerInfo objects written to this file.; 1428///; 1429/// The function returns a TList. It is the user's responsibility; 1430/// to delete the list created by this function.; 1431///; 1432/// Note the list, in addition to TStreamerInfo object, contains sometimes; 1433/// a TList named 'listOfRules' and containing the schema evolution rules; 1434/// related to the file's content.; 1435///; 1436/// Using the list, one can access additional information, e.g.:; 1437/// ~~~{.cpp}; 1438/// TFile f(""myfile.root"");; 1439/// auto list = f.GetStreamerInfoList();; 1440/// auto info = dynamic_cast<TStreamerInfo*>(list->FindObject(""MyClass""));; 1441/// if (info) auto classversionid = info->GetClassVersion();; 1442/// delete list;; 1443/// ~~~; 1444///; 1445 ; 1446TList *TFile::GetStreamerInfoList(); 1447{; 1448 return GetStreamerInfoListImpl(/*lookupSICache*/ false).fList;; 1449}; 1450 ; 1451////////////////////////////////////////////////////////////////////////////////; 1452/// List file contents.; 1453///; 1454/// Indentation is used to identify the file tree.; 1455/// Subdirectories are listed first, then objects in memory,; 1456/// then objects on the file.; 1457 ; 1458void TFile::ls(Option_t *option) const; 1459{; 1460 TROOT::IndentLevel();; 1461 std::cout <<ClassName()<<""**\t\t""<<GetName()<<""\t""<<GetTitle()<<std::endl;; 1462 TROOT::IncreaseDirLevel();; 1463 TDirectoryFile::ls(option);; 1464 TROOT::Decr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:51347,access,access,51347,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['access'],['access']
Security,"912/// Return the Streamer Class allowing streaming (if any).; 2913 ; 2914TClassStreamer *TClass::GetStreamer() const; 2915{; 2916 if (gThreadTsd && fStreamer) {; 2917 TClassLocalStorage *local = TClassLocalStorage::GetStorage(this);; 2918 if (local==nullptr) return fStreamer;; 2919 if (local->fStreamer==nullptr) {; 2920 local->fStreamer = fStreamer->Generate();; 2921 const std::type_info &orig = ( typeid(*fStreamer) );; 2922 if (!local->fStreamer) {; 2923 Warning(""GetStreamer"",""For %s, the TClassStreamer (%s) passed's call to Generate failed!"",GetName(),orig.name());; 2924 } else {; 2925 const std::type_info &copy = ( typeid(*local->fStreamer) );; 2926 if (strcmp(orig.name(),copy.name())!=0) {; 2927 Warning(""GetStreamer"",""For %s, the TClassStreamer passed does not properly implement the Generate method (%s vs %s)\n"",GetName(),orig.name(),copy.name());; 2928 }; 2929 }; 2930 }; 2931 return local->fStreamer;; 2932 }; 2933 return fStreamer;; 2934}; 2935 ; 2936////////////////////////////////////////////////////////////////////////////////; 2937/// Get a wrapper/accessor function around this class custom streamer (member function).; 2938 ; 2939ClassStreamerFunc_t TClass::GetStreamerFunc() const; 2940{; 2941 return fStreamerFunc;; 2942}; 2943 ; 2944////////////////////////////////////////////////////////////////////////////////; 2945/// Get a wrapper/accessor function around this class custom conversion streamer (member function).; 2946 ; 2947ClassConvStreamerFunc_t TClass::GetConvStreamerFunc() const; 2948{; 2949 return fConvStreamerFunc;; 2950}; 2951 ; 2952////////////////////////////////////////////////////////////////////////////////; 2953/// Return the proxy implementing the IsA functionality.; 2954 ; 2955TVirtualIsAProxy* TClass::GetIsAProxy() const; 2956{; 2957 return fIsA;; 2958}; 2959 ; 2960////////////////////////////////////////////////////////////////////////////////; 2961/// Static method returning pointer to TClass of the specified class name.; 2962/// If lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:109986,access,accessor,109986,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['access'],['accessor']
Security,"9190/// Set the maximum size in bytes of a Tree file (static function).; 9191/// The default size is 100000000000LL, ie 100 Gigabytes.; 9192///; 9193/// In TTree::Fill, when the file has a size > fgMaxTreeSize,; 9194/// the function closes the current file and starts writing into; 9195/// a new file with a name of the style ""file_1.root"" if the original; 9196/// requested file name was ""file.root"".; 9197 ; 9198void TTree::SetMaxTreeSize(Long64_t maxsize); 9199{; 9200 fgMaxTreeSize = maxsize;; 9201}; 9202 ; 9203////////////////////////////////////////////////////////////////////////////////; 9204/// Change the name of this tree.; 9205 ; 9206void TTree::SetName(const char* name); 9207{; 9208 if (gPad) {; 9209 gPad->Modified();; 9210 }; 9211 // Trees are named objects in a THashList.; 9212 // We must update hashlists if we change the name.; 9213 TFile *file = nullptr;; 9214 TTreeCache *pf = nullptr;; 9215 if (fDirectory) {; 9216 fDirectory->Remove(this);; 9217 if ((file = GetCurrentFile())) {; 9218 pf = GetReadCache(file);; 9219 file->SetCacheRead(nullptr,this,TFile::kDoNotDisconnect);; 9220 }; 9221 }; 9222 // This changes our hash value.; 9223 fName = name;; 9224 if (fDirectory) {; 9225 fDirectory->Append(this);; 9226 if (pf) {; 9227 file->SetCacheRead(pf,this,TFile::kDoNotDisconnect);; 9228 }; 9229 }; 9230}; 9231 ; 9232void TTree::SetNotify(TObject *obj); 9233{; 9234 if (obj && fNotify && dynamic_cast<TNotifyLinkBase *>(fNotify)) {; 9235 auto *oldLink = static_cast<TNotifyLinkBase *>(fNotify);; 9236 auto *newLink = dynamic_cast<TNotifyLinkBase *>(obj);; 9237 if (!newLink) {; 9238 Warning(""TTree::SetNotify"",; 9239 ""The tree or chain already has a fNotify registered and it is a TNotifyLink, while the new object is ""; 9240 ""not a TNotifyLink. Setting fNotify to the new value will lead to an orphan linked list of ""; 9241 ""TNotifyLinks and it is most likely not intended. If this is the intended goal, please call ""; 9242 ""SetNotify(nullptr) first to silence this warning."");",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:356522,hash,hash,356522,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['hash'],['hash']
Security,"92 of file TSQLFile.cxx. ◆ FindSQLKey(). TKeySQL * TSQLFile::FindSQLKey ; (; TDirectory * ; dir, . Long64_t ; keyid . ). protected . Search for TKeySQL object with specified keyid. ; Definition at line 1671 of file TSQLFile.cxx. ◆ Flush(). void TSQLFile::Flush ; (; ). inlinefinalvirtual . Synchronize a file's in-memory and on-disk states. ; Reimplemented from TFile.; Definition at line 212 of file TSQLFile.h. ◆ GetArrayLimit(). Int_t TSQLFile::GetArrayLimit ; (; ); const. inline . Definition at line 186 of file TSQLFile.h. ◆ GetBlobClassData(). TSQLResult * TSQLFile::GetBlobClassData ; (; Long64_t ; objid, . TSQLClassInfo * ; sqlinfo . ). protected . Method return request results for specified objid from streamer classtable. ; Definition at line 2464 of file TSQLFile.cxx. ◆ GetBlobClassDataStmt(). TSQLStatement * TSQLFile::GetBlobClassDataStmt ; (; Long64_t ; objid, . TSQLClassInfo * ; sqlinfo . ). protected . Method return request results for specified objid from streamer classtable Data returned in form of statement, where direct access to values are possible. ; Definition at line 2480 of file TSQLFile.cxx. ◆ GetDataBaseName(). const char * TSQLFile::GetDataBaseName ; (; ); const. Return name of data base on the host For Oracle always return 0. ; Definition at line 627 of file TSQLFile.cxx. ◆ GetEND(). Long64_t TSQLFile::GetEND ; (; ); const. inlinefinalvirtual . Reimplemented from TFile.; Definition at line 214 of file TSQLFile.h. ◆ GetErrno(). Int_t TSQLFile::GetErrno ; (; ); const. inlinefinalvirtual . Method returning errno. ; Reimplemented from TFile.; Definition at line 215 of file TSQLFile.h. ◆ GetIOVersion(). Int_t TSQLFile::GetIOVersion ; (; ); const. inline . Definition at line 196 of file TSQLFile.h. ◆ GetLocking(). Int_t TSQLFile::GetLocking ; (; ). protected . Return current locking mode for that file. ; Definition at line 1348 of file TSQLFile.cxx. ◆ GetLongString(). Bool_t TSQLFile::GetLongString ; (; Long64_t ; objid, . Int_t ; strid, . TString & ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:68314,access,access,68314,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,1,['access'],['access']
Security,"93 ""fBits is not as expected, we got 0x%.8x instead of 0x%.8x"",; 94 *o_fbits, kGoldenbits);; 95 }; 96 if (gDebug >= 9) {; 97 unsigned char *oc = reinterpret_cast<unsigned char *>(o); // for address calculations; 98 unsigned char references[sizeof(TObject)];; 99 memcpy(references, oc, sizeof(TObject));; 100 ; 101 // The effective part of this code (the else statement is just that without; 102 // any of the debug statement); 103 delete o;; 104 ; 105 // Not using the error logger, as there routine is meant to be called; 106 // during library initialization/loading.; 107 fprintf(stderr,; 108 ""DEBUG: Checking before and after delete the content of a TObject with uniqueID 0x21\n"");; 109 for(size_t i = 0; i < sizeof(TObject); i += 4) {; 110 fprintf(stderr, ""DEBUG: 0x%.8x vs 0x%.8x\n"", *(int*)(references +i), *(int*)(oc + i));; 111 }; 112 } else; 113 delete o; // the 'if' part is that surrounded by the debug code.; 114 ; 115 // Intentionally accessing the deleted memory to check whether it has been changed as; 116 // a consequence (side effect) of executing operator delete. If there no change, we; 117 // can guess this is always the case and we can rely on the changes to fBits made; 118 // by ~TObject to detect use-after-delete error (and print a message rather than; 119 // stop the program with a segmentation fault); 120#if defined(_MSC_VER) && defined(__SANITIZE_ADDRESS__); 121 // on Windows, even __declspec(no_sanitize_address) does not prevent catching; 122 // heap-use-after-free errorswhen using the /fsanitize=address compiler flag; 123 // so don't even try; 124 return true;; 125#endif; 126 if ( *o_fbits != 0x01000000 ) {; 127 // operator delete tainted the memory, we can not rely on TestBit(kNotDeleted); 128 return true;; 129 }; 130 return false;; 131}; 132 ; 133bool DeleteChangesMemory(); 134{; 135 static const bool value = DeleteChangesMemoryImpl();; 136 if (gDebug >= 9); 137 DeleteChangesMemoryImpl(); // To allow for printing the debug info; 138 return value;; 139};",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8cxx_source.html:4117,access,accessing,4117,doc/master/TObject_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TObject_8cxx_source.html,1,['access'],['accessing']
Security,"932 return true;; 1933 }; 1934 }; 1935 pname = """";; 1936 return false;; 1937}; 1938 ; 1939////////////////////////////////////////////////////////////////////////////////; 1940/// If the argument starts with MODULE/inc, strip it; 1941/// to make it the name we can use in `#includes`.; 1942 ; 1943const char *CopyArg(const char *original); 1944{; 1945 if (!gBuildingROOT); 1946 return original;; 1947 ; 1948 if (IsSelectionFile(original)); 1949 return original;; 1950 ; 1951 const char *inc = strstr(original, ""\\inc\\"");; 1952 if (!inc); 1953 inc = strstr(original, ""/inc/"");; 1954 if (inc && strlen(inc) > 5); 1955 return inc + 5;; 1956 return original;; 1957}; 1958 ; 1959////////////////////////////////////////////////////////////////////////////////; 1960/// Copy the command line argument, stripping MODULE/inc if; 1961/// necessary.; 1962 ; 1963void StrcpyArg(string &dest, const char *original); 1964{; 1965 dest = CopyArg(original);; 1966}; 1967 ; 1968////////////////////////////////////////////////////////////////////////////////; 1969/// Write the extra header injected into the module:; 1970/// umbrella header if (umbrella) else content header.; 1971 ; 1972static bool InjectModuleUtilHeader(const char *argv0,; 1973 TModuleGenerator &modGen,; 1974 cling::Interpreter &interp,; 1975 bool umbrella); 1976{; 1977 std::ostringstream out;; 1978 if (umbrella) {; 1979 // This will duplicate the -D,-U from clingArgs - but as they are surrounded; 1980 // by #ifndef there is no problem here.; 1981 modGen.WriteUmbrellaHeader(out);; 1982 if (interp.declare(out.str()) != cling::Interpreter::kSuccess) {; 1983 const std::string &hdrName; 1984 = umbrella ? modGen.GetUmbrellaName() : modGen.GetContentName();; 1985 ROOT::TMetaUtils::Error(nullptr, ""%s: compilation failure (%s)\n"", argv0,; 1986 hdrName.c_str());; 1987 return false;; 1988 }; 1989 } else {; 1990 modGen.WriteContentHeader(out);; 1991 }; 1992 return true;; 1993}; 1994 ; 1995/////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:77849,inject,injected,77849,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['inject'],['injected']
Security,"946 Printf(""%s %s"", show.Data(), wfil.Data());; 1947 return wfil.Data();; 1948 }; 1949 if (show != """"); 1950 Printf(""%s <not found>"", show.Data());; 1951 wfil = """";; 1952 return nullptr;; 1953 }; 1954 ; 1955 if (!search); 1956 search = ""."";; 1957 ; 1958 TString apwd(gSystem->WorkingDirectory());; 1959 apwd += ""/"";; 1960 for (const char* ptr = search; *ptr;) {; 1961 TString name;; 1962 if (*ptr != '/' && *ptr !='$' && *ptr != '~'); 1963 name = apwd;; 1964 const char* posEndOfPart = strchr(ptr, ':');; 1965 if (posEndOfPart) {; 1966 name.Append(ptr, posEndOfPart - ptr);; 1967 ptr = posEndOfPart + 1; // skip ':'; 1968 } else {; 1969 name.Append(ptr);; 1970 ptr += strlen(ptr);; 1971 }; 1972 ; 1973 if (!name.EndsWith(""/"")); 1974 name += '/';; 1975 name += wfil;; 1976 ; 1977 gSystem->ExpandPathName(name);; 1978#if defined(R__SEEK64); 1979 struct stat64 finfo;; 1980 if (access(name.Data(), mode) == 0 &&; 1981 stat64(name.Data(), &finfo) == 0 && S_ISREG(finfo.st_mode)) {; 1982#else; 1983 struct stat finfo;; 1984 if (access(name.Data(), mode) == 0 &&; 1985 stat(name.Data(), &finfo) == 0 && S_ISREG(finfo.st_mode)) {; 1986#endif; 1987 if (show != """"); 1988 Printf(""%s %s"", show.Data(), name.Data());; 1989 wfil = name;; 1990 return wfil.Data();; 1991 }; 1992 }; 1993 ; 1994 if (show != """"); 1995 Printf(""%s <not found>"", show.Data());; 1996 wfil = """";; 1997 return nullptr;; 1998}; 1999 ; 2000//---- Users & Groups ----------------------------------------------------------; 2001 ; 2002////////////////////////////////////////////////////////////////////////////////; 2003/// Returns the user's id. If user = 0, returns current user's id.; 2004 ; 2005Int_t TUnixSystem::GetUid(const char *user); 2006{; 2007 if (!user || !user[0]); 2008 return getuid();; 2009 else {; 2010 struct passwd *apwd = getpwnam(user);; 2011 if (apwd); 2012 return apwd->pw_uid;; 2013 }; 2014 return 0;; 2015}; 2016 ; 2017////////////////////////////////////////////////////////////////////////////////; 2018/// Returns",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8cxx_source.html:60997,access,access,60997,doc/master/TUnixSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8cxx_source.html,1,['access'],['access']
Security,"979/// Return the Streamer Class allowing streaming (if any).; 2980 ; 2981TClassStreamer *TClass::GetStreamer() const; 2982{; 2983 if (gThreadTsd && fStreamer) {; 2984 TClassLocalStorage *local = TClassLocalStorage::GetStorage(this);; 2985 if (local==nullptr) return fStreamer;; 2986 if (local->fStreamer==nullptr) {; 2987 local->fStreamer = fStreamer->Generate();; 2988 const std::type_info &orig = ( typeid(*fStreamer) );; 2989 if (!local->fStreamer) {; 2990 Warning(""GetStreamer"",""For %s, the TClassStreamer (%s) passed's call to Generate failed!"",GetName(),orig.name());; 2991 } else {; 2992 const std::type_info &copy = ( typeid(*local->fStreamer) );; 2993 if (strcmp(orig.name(),copy.name())!=0) {; 2994 Warning(""GetStreamer"",""For %s, the TClassStreamer passed does not properly implement the Generate method (%s vs %s)\n"",GetName(),orig.name(),copy.name());; 2995 }; 2996 }; 2997 }; 2998 return local->fStreamer;; 2999 }; 3000 return fStreamer;; 3001}; 3002 ; 3003////////////////////////////////////////////////////////////////////////////////; 3004/// Get a wrapper/accessor function around this class custom streamer (member function).; 3005 ; 3006ClassStreamerFunc_t TClass::GetStreamerFunc() const; 3007{; 3008 return fStreamerFunc;; 3009}; 3010 ; 3011////////////////////////////////////////////////////////////////////////////////; 3012/// Get a wrapper/accessor function around this class custom conversion streamer (member function).; 3013 ; 3014ClassConvStreamerFunc_t TClass::GetConvStreamerFunc() const; 3015{; 3016 return fConvStreamerFunc;; 3017}; 3018 ; 3019////////////////////////////////////////////////////////////////////////////////; 3020/// Return the proxy implementing the IsA functionality.; 3021 ; 3022TVirtualIsAProxy* TClass::GetIsAProxy() const; 3023{; 3024 return fIsA;; 3025}; 3026 ; 3027////////////////////////////////////////////////////////////////////////////////; 3028/// Static method returning pointer to TClass of the specified class name.; 3029/// If lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:112737,access,accessor,112737,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['access'],['accessor']
Security,"98 // Standard Destructor.; 99 }; 100 void* At(UInt_t idx) override; 101 {; 102 // Return the address of the value at index 'idx'; 103 ; 104 // However we can 'take' the address of the content of std::vector<bool>.; 105 if ( fEnv && fEnv->fObject ) {; 106 auto vec = (std::vector<bool> *)(fEnv->fObject);; 107 fLastValue = (*vec)[idx];; 108 fEnv->fIdx = idx;; 109 return &fLastValue;; 110 }; 111 Fatal(""TGenVectorProxy"",""At> Logic error - no proxy object set."");; 112 return nullptr;; 113 }; 114 ; 115 void DeleteItem(Bool_t force, void* ptr) const override; 116 {; 117 // Call to delete/destruct individual item; 118 if ( force && ptr ) {; 119 fVal->DeleteItem(ptr);; 120 }; 121 }; 122};; 123 ; 124//////////////////////////////////////////////////////////////////////////; 125// //; 126// class TGenBitsetProxy; 127//; 128// Local optimization class.; 129//; 130// Collection proxies get copied. On copy we switch the type of the; 131// proxy to the concrete STL type. The concrete types are optimized; 132// for element access.; 133//; 134//////////////////////////////////////////////////////////////////////////; 135class TGenBitsetProxy : public TGenCollectionProxy {; 136 ; 137public:; 138 TGenBitsetProxy(const TGenCollectionProxy& c) : TGenCollectionProxy(c); 139 {; 140 // Standard Constructor.; 141 }; 142 ~TGenBitsetProxy() override; 143 {; 144 // Standard Destructor.; 145 }; 146 void* At(UInt_t idx) override; 147 {; 148 // Return the address of the value at index 'idx'; 149 ; 150 if ( fEnv && fEnv->fObject ) {; 151 switch( idx ) {; 152 case 0:; 153 fEnv->fStart = fFirst.invoke(fEnv);; 154 fEnv->fIdx = idx;; 155 break;; 156 default:; 157 fEnv->fIdx = idx - fEnv->fIdx;; 158 if (! fEnv->fStart ) fEnv->fStart = fFirst.invoke(fEnv);; 159 fNext.invoke(fEnv);; 160 fEnv->fIdx = idx;; 161 break;; 162 }; 163 typedef ROOT::TCollectionProxyInfo::Environ<std::pair<size_t,Bool_t> > EnvType_t;; 164 EnvType_t *e = (EnvType_t*)fEnv;; 165 return &(e->fIterator.second);; 166 }; 167 Fatal(""TGen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:3985,access,access,3985,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['access'],['access']
Security,": """",; 15394 ri->http_version,; 15395 conn->status_code,; 15396 conn->num_bytes_sent,; 15397 referer,; 15398 user_agent);; 15399 }; 15400 ; 15401 /* Here we have a log message in log_buf. Call the callback */; 15402 if (conn->phys_ctx->callbacks.log_access) {; 15403 if (conn->phys_ctx->callbacks.log_access(conn, log_buf)) {; 15404 /* do not log if callack returns non-zero */; 15405 if (fi.access.fp) {; 15406 mg_fclose(&fi.access);; 15407 }; 15408 return;; 15409 }; 15410 }; 15411 ; 15412 /* Store in file */; 15413 if (fi.access.fp) {; 15414 int ok = 1;; 15415 flockfile(fi.access.fp);; 15416 if (fprintf(fi.access.fp, ""%s\n"", log_buf) < 1) {; 15417 ok = 0;; 15418 }; 15419 if (fflush(fi.access.fp) != 0) {; 15420 ok = 0;; 15421 }; 15422 funlockfile(fi.access.fp);; 15423 if (mg_fclose(&fi.access) != 0) {; 15424 ok = 0;; 15425 }; 15426 if (!ok) {; 15427 mg_cry_internal(conn,; 15428 ""Error writing log file %s"",; 15429 conn->dom_ctx->config[ACCESS_LOG_FILE]);; 15430 }; 15431 }; 15432}; 15433#else; 15434#error ""Either enable filesystems or provide a custom log_access implementation""; 15435#endif /* Externally provided function */; 15436 ; 15437 ; 15438/* Verify given socket address against the ACL.; 15439 * Return -1 if ACL is malformed, 0 if address is disallowed, 1 if allowed.; 15440 */; 15441static int; 15442check_acl(struct mg_context *phys_ctx, const union usa *sa); 15443{; 15444 int allowed, flag, matched;; 15445 struct vec vec;; 15446 ; 15447 if (phys_ctx) {; 15448 const char *list = phys_ctx->dd.config[ACCESS_CONTROL_LIST];; 15449 ; 15450 /* If any ACL is set, deny by default */; 15451 allowed = (list == NULL) ? '+' : '-';; 15452 ; 15453 while ((list = next_option(list, &vec, NULL)) != NULL) {; 15454 flag = vec.ptr[0];; 15455 matched = -1;; 15456 if ((vec.len > 0) && ((flag == '+') || (flag == '-'))) {; 15457 vec.ptr++;; 15458 vec.len--;; 15459 matched = parse_match_net(&vec, sa, 1);; 15460 }; 15461 if (matched < 0) {; 15462 mg_cry_ctx_internal(phys_ctx,; 15463 ""%s: su",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:456010,access,access,456010,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['access'],['access']
Security,": """",; 15395 ri->http_version,; 15396 conn->status_code,; 15397 conn->num_bytes_sent,; 15398 referer,; 15399 user_agent);; 15400 }; 15401 ; 15402 /* Here we have a log message in log_buf. Call the callback */; 15403 if (conn->phys_ctx->callbacks.log_access) {; 15404 if (conn->phys_ctx->callbacks.log_access(conn, log_buf)) {; 15405 /* do not log if callack returns non-zero */; 15406 if (fi.access.fp) {; 15407 mg_fclose(&fi.access);; 15408 }; 15409 return;; 15410 }; 15411 }; 15412 ; 15413 /* Store in file */; 15414 if (fi.access.fp) {; 15415 int ok = 1;; 15416 flockfile(fi.access.fp);; 15417 if (fprintf(fi.access.fp, ""%s\n"", log_buf) < 1) {; 15418 ok = 0;; 15419 }; 15420 if (fflush(fi.access.fp) != 0) {; 15421 ok = 0;; 15422 }; 15423 funlockfile(fi.access.fp);; 15424 if (mg_fclose(&fi.access) != 0) {; 15425 ok = 0;; 15426 }; 15427 if (!ok) {; 15428 mg_cry_internal(conn,; 15429 ""Error writing log file %s"",; 15430 conn->dom_ctx->config[ACCESS_LOG_FILE]);; 15431 }; 15432 }; 15433}; 15434#else; 15435#error ""Either enable filesystems or provide a custom log_access implementation""; 15436#endif /* Externally provided function */; 15437 ; 15438 ; 15439/* Verify given socket address against the ACL.; 15440 * Return -1 if ACL is malformed, 0 if address is disallowed, 1 if allowed.; 15441 */; 15442static int; 15443check_acl(struct mg_context *phys_ctx, const union usa *sa); 15444{; 15445 int allowed, flag, matched;; 15446 struct vec vec;; 15447 ; 15448 if (phys_ctx) {; 15449 const char *list = phys_ctx->dd.config[ACCESS_CONTROL_LIST];; 15450 ; 15451 /* If any ACL is set, deny by default */; 15452 allowed = (list == NULL) ? '+' : '-';; 15453 ; 15454 while ((list = next_option(list, &vec, NULL)) != NULL) {; 15455 flag = vec.ptr[0];; 15456 matched = -1;; 15457 if ((vec.len > 0) && ((flag == '+') || (flag == '-'))) {; 15458 vec.ptr++;; 15459 vec.len--;; 15460 matched = parse_match_net(&vec, sa, 1);; 15461 }; 15462 if (matched < 0) {; 15463 mg_cry_ctx_internal(phys_ctx,; 15464 ""%s: su",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:456043,access,access,456043,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['access'],['access']
Security,": 0.629 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVA_CNN_Classification_TMVA_CNN_CPU.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVA_CNN_Classification_TMVA_CNN_CPU.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: PyKeras for Classification; : ; : ; : ␛[1m================================================================␛[0m; : ␛[1mH e l p f o r M V A m e t h o d [ PyKeras ] :␛[0m; : ; : Keras is a high-level API for the Theano and Tensorflow packages.; : This method wraps the training and predictions steps of the Keras; : Python package for TMVA, so that dataloading, preprocessing and; : evaluation can be done within the TMVA system. To use this Keras; : interface, you have to generate a model with Keras first. Then,; : this model can be loaded and trained in TMVA.; : ; : ; : <Suppress this message by specifying ""!H"" in the booking option>; : ␛[1m================================================================␛[0m; : ; : Split TMVA training data in 1280 training events and 320 validation events; : Training Model Summary; custom objects for loading model : {'optimizer': <class 'torch.optim.adam.Adam'>, 'criterion': BCELoss(), 'train_func': <function fit at 0x7fe43c5d1b80>, 'predict_func': <function predict at 0x7fe43c5d1ca0>}; Model: ""sequential""; _________________________________________________________________; Layer (type) Output Shape Param # ; =================================================================; reshape (Reshape) (None, 16, 16, 1) 0 ; ; conv2d (Conv2D) (None, 16, 16, 10) 100 ; ; batch_normalization (Batch (None, 16, 16, 10) 40 ; Normalization) ; ; conv2d_1 (Conv2D) (None, 16, 16, 10) 910 ; ; max_pooling2d (MaxPooling2 (None, 15, 15, 10) 0 ; D) ; ; flatten (Flatten) (None, 2250) 0 ; ; dense (Dense) (None, 256) 576256 ; ; dense_1 (Dense) (None, 2) 514 ; ; =================================================================; Total params: 577820 (2.20 MB); Trainable params: 577800 (2.20 MB); N",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:16672,validat,validation,16672,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['validat'],['validation']
Security,": Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIER"" [Weight initialization strategy]; : Architecture: ""CPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""LearningRate=1e-3,Momentum=0.9,ConvergenceSteps=10,BatchSize=128,TestRepetitions=1,MaxEpochs=20,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,ADAM_beta1=0.9,ADAM_beta2=0.999,ADAM_eps=1.E-7,DropConfig=0.0+0.0+0.0+0."" [Defines the training strategies.]; : - Default:; : VerbosityLevel: ""Default"" [Verbosity level]; : CreateMVAPdfs: ""False"" [Create PDFs for classifier outputs (signal and background)]; : IgnoreNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : RandomSeed: ""0"" [Random seed used for weight initialization and batch shuffling]; : ValidationSize: ""20%"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; DNN_CPU : [dataset] : Create Transformation ""G"" with events from all classes.; : ; : Transformation, Variable selection : ; : Input : variable 'm_jj' <---> Output : variable 'm_jj'; : Input : variable 'm_jjj' <---> Output : variable 'm_jjj'; : Input : variable 'm_lv' <---> Output : variable 'm_lv'; : Input : variable 'm_jlv' <---> Output : variable 'm_jlv'; : Input : variable 'm_bb' <---> Output : variable 'm_bb'; : Input : variable 'm_wbb' <---> Output : variable 'm_wbb'; : Input : variable 'm_wwbb' <---> Output : variable 'm_wwbb'; : Will now use the CPU architecture with BLAS and IMT support !; Model: ""sequential""; _________________________________________________________________; Layer (type) Output Shape Param # ; =================================================================; dense (Dense) (None, 64) 512 ; ; dense_1 (Dense) (None, 64) 4160 ; ; dense_2 (Dense) (None, 64) 4160 ; ; dense_3 (D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:13146,validat,validation,13146,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['validat'],['validation']
Security,": Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIER"" [Weight initialization strategy]; : Architecture: ""CPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""LearningRate=1e-3,Momentum=0.9,ConvergenceSteps=10,BatchSize=128,TestRepetitions=1,MaxEpochs=30,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,ADAM_beta1=0.9,ADAM_beta2=0.999,ADAM_eps=1.E-7,DropConfig=0.0+0.0+0.0+0."" [Defines the training strategies.]; : - Default:; : VerbosityLevel: ""Default"" [Verbosity level]; : CreateMVAPdfs: ""False"" [Create PDFs for classifier outputs (signal and background)]; : IgnoreNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : RandomSeed: ""0"" [Random seed used for weight initialization and batch shuffling]; : ValidationSize: ""20%"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; DNN_CPU : [dataset] : Create Transformation ""G"" with events from all classes.; : ; : Transformation, Variable selection : ; : Input : variable 'm_jj' <---> Output : variable 'm_jj'; : Input : variable 'm_jjj' <---> Output : variable 'm_jjj'; : Input : variable 'm_lv' <---> Output : variable 'm_lv'; : Input : variable 'm_jlv' <---> Output : variable 'm_jlv'; : Input : variable 'm_bb' <---> Output : variable 'm_bb'; : Input : variable 'm_wbb' <---> Output : variable 'm_wbb'; : Input : variable 'm_wwbb' <---> Output : variable 'm_wwbb'; : Will now use the CPU architecture with BLAS and IMT support !; Model: ""sequential""; _________________________________________________________________; Layer (type) Output Shape Param # ; =================================================================; dense (Dense) (None, 64) 512 ; ; dense_1 (Dense) (None, 64) 4160 ; ; dense_2 (Dense) (None, 64) 4160 ; ; dense_3 (D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:13133,validat,validation,13133,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['validat'],['validation']
Security,": kurtosis and kurtosis error printed; s : skewness printed; S : skewness and skewness error printed; i : integral of bins printed; I : integral of bins with option ""width"" printed; o : number of overflows printed; u : number of underflows printed; r : standard deviation printed; R : standard deviation and standard deviation error printed; m : mean value printed; M : mean value mean error values printed; e : number of entries printed; n : name of histogram is printed; For example, to print only name of histogram and number of entries do: gStyle->SetOptStat(""ne"");; To print only the name of the histogram do: gStyle->SetOptStat(""n"");; The default value is: gStyle->SetOptStat(""nemr"");; When a histogram is painted, a TPaveStats object is created and added to the list of functions of the histogram. If a TPaveStats object already exists in the histogram list of functions, the existing object is just updated with the current histogram parameters.; Once a histogram is painted, the statistics box can be accessed using h->FindObject(""stats""). In the command line it is enough to do: Root > h->Draw(); Root > TPaveStats *st = (TPaveStats*)h->FindObject(""stats""); because after h->Draw() the histogram is automatically painted. But in a script file the painting should be forced using gPad->Update() in order to make sure the statistics box is created: h->Draw();; gPad->Update();; TPaveStats *st = (TPaveStats*)h->FindObject(""stats"");; Without gPad->Update() the line h->FindObject(""stats"") returns a null pointer.; When a histogram is drawn with the option SAME, the statistics box is not drawn. To force the statistics box drawing with the option SAME, the option SAMES must be used. If the new statistics box hides the previous statistics box, one can change its position with these lines (h being the pointer to the histogram): Root > TPaveStats *st = (TPaveStats*)h->FindObject(""stats""); Root > st->SetX1NDC(newx1); //new x start position; Root > st->SetX2NDC(newx2); //new x end position; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:25633,access,accessed,25633,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['access'],['accessed']
Security,": syntax error in authorization file: %s"",; 8578 __func__,; 8579 workdata->buf);; 8580 continue;; 8581 }; 8582 *(char *)(workdata->f_domain) = 0;; 8583 (workdata->f_domain)++;; 8584 ; 8585 workdata->f_ha1 = strchr(workdata->f_domain, ':');; 8586 if (workdata->f_ha1 == NULL) {; 8587 mg_cry_internal(workdata->conn,; 8588 ""%s: syntax error in authorization file: %s"",; 8589 __func__,; 8590 workdata->buf);; 8591 continue;; 8592 }; 8593 *(char *)(workdata->f_ha1) = 0;; 8594 (workdata->f_ha1)++;; 8595 ; 8596 if (!strcmp(workdata->ah.user, workdata->f_user); 8597 && !strcmp(workdata->domain, workdata->f_domain)) {; 8598 return check_password(workdata->conn->request_info.request_method,; 8599 workdata->f_ha1,; 8600 workdata->ah.uri,; 8601 workdata->ah.nonce,; 8602 workdata->ah.nc,; 8603 workdata->ah.cnonce,; 8604 workdata->ah.qop,; 8605 workdata->ah.response);; 8606 }; 8607 }; 8608 ; 8609 return is_authorized;; 8610}; 8611 ; 8612 ; 8613/* Authorize against the opened passwords file. Return 1 if authorized. */; 8614static int; 8615authorize(struct mg_connection *conn, struct mg_file *filep, const char *realm); 8616{; 8617 struct read_auth_file_struct workdata;; 8618 char buf[MG_BUF_LEN];; 8619 ; 8620 if (!conn || !conn->dom_ctx) {; 8621 return 0;; 8622 }; 8623 ; 8624 memset(&workdata, 0, sizeof(workdata));; 8625 workdata.conn = conn;; 8626 ; 8627 if (!parse_auth_header(conn, buf, sizeof(buf), &workdata.ah)) {; 8628 return 0;; 8629 }; 8630 ; 8631 if (realm) {; 8632 workdata.domain = realm;; 8633 } else {; 8634 workdata.domain = conn->dom_ctx->config[AUTHENTICATION_DOMAIN];; 8635 }; 8636 ; 8637 return read_auth_file(filep, &workdata, INITIAL_DEPTH);; 8638}; 8639 ; 8640 ; 8641/* Public function to check http digest authentication header */; 8642int; 8643mg_check_digest_access_authentication(struct mg_connection *conn,; 8644 const char *realm,; 8645 const char *filename); 8646{; 8647 struct mg_file file = STRUCT_FILE_INITIALIZER;; 8648 int auth;; 8649 ; 8650 if (!conn || !filenam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:248441,authoriz,authorized,248441,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['authoriz'],['authorized']
Security,": syntax error in authorization file: %s"",; 8579 __func__,; 8580 workdata->buf);; 8581 continue;; 8582 }; 8583 *(char *)(workdata->f_domain) = 0;; 8584 (workdata->f_domain)++;; 8585 ; 8586 workdata->f_ha1 = strchr(workdata->f_domain, ':');; 8587 if (workdata->f_ha1 == NULL) {; 8588 mg_cry_internal(workdata->conn,; 8589 ""%s: syntax error in authorization file: %s"",; 8590 __func__,; 8591 workdata->buf);; 8592 continue;; 8593 }; 8594 *(char *)(workdata->f_ha1) = 0;; 8595 (workdata->f_ha1)++;; 8596 ; 8597 if (!strcmp(workdata->ah.user, workdata->f_user); 8598 && !strcmp(workdata->domain, workdata->f_domain)) {; 8599 return check_password(workdata->conn->request_info.request_method,; 8600 workdata->f_ha1,; 8601 workdata->ah.uri,; 8602 workdata->ah.nonce,; 8603 workdata->ah.nc,; 8604 workdata->ah.cnonce,; 8605 workdata->ah.qop,; 8606 workdata->ah.response);; 8607 }; 8608 }; 8609 ; 8610 return is_authorized;; 8611}; 8612 ; 8613 ; 8614/* Authorize against the opened passwords file. Return 1 if authorized. */; 8615static int; 8616authorize(struct mg_connection *conn, struct mg_file *filep, const char *realm); 8617{; 8618 struct read_auth_file_struct workdata;; 8619 char buf[MG_BUF_LEN];; 8620 ; 8621 if (!conn || !conn->dom_ctx) {; 8622 return 0;; 8623 }; 8624 ; 8625 memset(&workdata, 0, sizeof(workdata));; 8626 workdata.conn = conn;; 8627 ; 8628 if (!parse_auth_header(conn, buf, sizeof(buf), &workdata.ah)) {; 8629 return 0;; 8630 }; 8631 ; 8632 if (realm) {; 8633 workdata.domain = realm;; 8634 } else {; 8635 workdata.domain = conn->dom_ctx->config[AUTHENTICATION_DOMAIN];; 8636 }; 8637 ; 8638 return read_auth_file(filep, &workdata, INITIAL_DEPTH);; 8639}; 8640 ; 8641 ; 8642/* Public function to check http digest authentication header */; 8643int; 8644mg_check_digest_access_authentication(struct mg_connection *conn,; 8645 const char *realm,; 8646 const char *filename); 8647{; 8648 struct mg_file file = STRUCT_FILE_INITIALIZER;; 8649 int auth;; 8650 ; 8651 if (!conn || !filenam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:248473,authoriz,authorized,248473,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['authoriz'],['authorized']
Security,":(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. RooLinkedList**_arr! Array of linked lists storing elements in each slot; Int_t_entriesNumber of entries stored; RooHashTable::HashMethod_hashMethodHashing method; Int_t_sizeTotal number of slots; Int_t_usedSlotsNumber of used slots. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooHashTable(Int_t initSize = 17, RooHashTable::HashMethod hashMethod = Name); Construct a hash table with given capacity and hash method. RooHashTable(const RooHashTable& other); Copy constructor. void add(TObject* arg, TObject* hashArg = 0); Add given object to table. If hashArg is given, hash will be calculation; on that rather than on 'arg'. Bool_t remove(TObject* arg, TObject* hashArg = 0); Remove given object from table. If hashArg is given, hash will be calculation; on that rather than on 'arg'. Double_t avgCollisions() const; Calculate the average number of collisions (table slots with >1 filled entry). Bool_t replace(const TObject* oldArg, const TObject* newArg, const TObject* oldHashArg = 0); Replace oldArg with newArg in the table. If oldHashArg is given, use that to calculate; the hash associated with oldArg. TObject* find(const char* name) const; Return the object with given name from the table. RooAbsArg* findArg(const RooAbsArg* arg) const. TObject* find(const TObject* arg) const; Return object with the given pointer from the table. RooLinkedListElem* findLinkTo(const TObject* arg) const; Return RooLinkedList element link to object 'hashArg'. RooSetPair* findSetPair(const RooArgSet* set1, const RooArgSet* set2) const; Return RooSetPair with given pointers in table. ~RooHashTable(); Destructor. Int_t size() const; { return _size ; }. Int_t entries() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooHashTable.html:7300,hash,hashArg,7300,root/html602/RooHashTable.html,https://root.cern,https://root.cern/root/html602/RooHashTable.html,2,['hash'],['hashArg']
Security,":*)(const T *, const double *)>;  ; struct  GetFunctorType< T(F::*)(T *, double *) const >;  ; struct  GetFunctorType< T(F::*)(T *, double *)>;  ; struct  InterpreterMutexRegistrationRAII;  ; struct  ParsingStateRAII;  RAII used to store Parser, Sema, Preprocessor state for recursive parsing. More...;  ; struct  RBaseType;  ; struct  RCast;  ; struct  RCast< T, false, false >;  ; struct  RCast< T, false, true >;  ; class  RConcurrentHashColl;  This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. More...;  ; struct  RDavixFileDes;  ; struct  RecurseCounts;  ; struct  RHashMap;  ; class  RIoUring;  ; class  RRawFile;  The RRawFile provides read-only access to local and remote files. More...;  ; class  RRawFileDavix;  The RRawFileDavix class provides read-only access to remote non-ROOT files. More...;  ; class  RRawFileNetXNG;  The RRawFileNetXNG class provides read-only access to remote files using root/roots protocol. More...;  ; struct  RRawFileNetXNGImpl;  ; class  RRawFileTFile;  The RRawFileTFile wraps an open TFile, but does not take ownership. More...;  ; class  RRawFileUnix;  The RRawFileUnix class uses POSIX calls to read from a mounted file system. More...;  ; class  RRawFileWin;  The RRawFileWin class uses portable C I/O calls to read from a drive. More...;  ; class  RSlotStack;  A thread-safe stack of N indexes (0 to size - 1). More...;  ; struct  RSlotStackRAII;  A RAII object to pop and push slot numbers from a RSlotStack object. More...;  ; class  RStl;  ; class  RTaskArenaWrapper;  Wrapper for tbb::task_arena. More...;  ; class  TArrayCharProxy;  Concrete Implementation of the branch proxy around the data members which are array of char. More...;  ; class  TArrayProxy;  Template for concrete implementation of proxy around array of T. More...;  ; struct  TArrayType;  Helper template to be able to determine and use array dime",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Internal.html:1891,access,access,1891,doc/master/namespaceROOT_1_1Internal.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html,2,['access'],['access']
Security,":. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooLinkedListElem*_first! Link to first element of list; Int_t_hashThreshSize threshold for hashing; RooHashTable*_htableLink! Hash table by link pointer; RooHashTable*_htableName! Hash table by name ; RooLinkedListElem*_last! Link to last element of list; TString_name; Int_t_sizeCurrent size of list. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooLinkedList(Int_t htsize = 0); Constructor with hashing threshold. If collection size exceeds threshold; a hash table is added. RooLinkedList(const RooLinkedList& other); Copy constructor. RooLinkedList& operator=(const RooLinkedList& other); Assignment operator, copy contents from 'other'. void setHashTableSize(Int_t size); Change the threshold for hash-table use to given size.; If a hash table exists when this method is called, it is regenerated. ~RooLinkedList(); Destructor. RooLinkedListElem* findLink(const TObject* arg) const; Find the element link containing the given object. void Add(TObject* arg, Int_t refCount); Insert object into collection with given reference count value. Bool_t Remove(TObject* arg); Remove object from collection. TObject* At(Int_t index) const; Return object stored in sequential position given by index.; If index is out of range, a null pointer is returned. Bool_t Replace(const TObject* oldArg, const TObject* newArg); Replace object 'oldArg' in collection with new object 'newArg'.; If 'oldArg' is not found in collection kFALSE is returned. TObject* FindObject(const char* name) const; Return pointer to obejct with given name. If no such object; is found return a null pointer. TObject* FindObject(const TObject* obj) const; Find object in list. If list contains object return; (same) point",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooLinkedList.html:6730,hash,hash-table,6730,root/html528/RooLinkedList.html,https://root.cern,https://root.cern/root/html528/RooLinkedList.html,1,['hash'],['hash-table']
Security,":. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_tfBranchingRatiobranching ratio ( < 1); TArrayIfDaughtersPDG codes of the daughters; Int_tfMatrixElementCodematrix element for this decay mode; Int_tfNumberchannel number. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDecayChannel(); default constructor. TDecayChannel(Int_t Number, Int_t MatrixElementCode, Double_t BranchingRatio, Int_t NDaughters, Int_t* DaughterPdgCode); constructor. ~TDecayChannel(). TDecayChannel(); ****** constructors and destructor. Int_t Number(); ****** accessors. { return fNumber; }. Int_t MatrixElementCode(); { return fMatrixElementCode; }. Int_t NDaughters(); { return fDaughters.fN; }. Double_t BranchingRatio(); { return fBranchingRatio; }. Int_t DaughterPdgCode(Int_t i); { return fDaughters.fArray[i]; }. » Author: P.Murat 15/02/2001 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/eg:$Id$ » Last generated: 2015-06-02 15:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TDecayChannel.html:6405,access,accessors,6405,root/html604/TDecayChannel.html,https://root.cern,https://root.cern/root/html604/TDecayChannel.html,1,['access'],['accessors']
Security,":. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_tfBranchingRatiobranching ratio ( < 1); TArrayIfDaughtersPDG codes of the daughters; Int_tfMatrixElementCodematrix element for this decay mode; Int_tfNumberchannel number. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDecayChannel(); default constructor. TDecayChannel(Int_t Number, Int_t MatrixElementCode, Double_t BranchingRatio, Int_t NDaughters, Int_t* DaughterPdgCode); constructor. ~TDecayChannel(). TDecayChannel(); ****** constructors and destructor. Int_t Number(); ****** accessors. { return fNumber; }. Int_t MatrixElementCode(); { return fMatrixElementCode; }. Int_t NDaughters(); { return fDaughters.fN; }. Double_t BranchingRatio(); { return fBranchingRatio; }. Int_t DaughterPdgCode(Int_t i); { return fDaughters.fArray[i]; }. » Author: P.Murat 15/02/2001 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/eg:$Id$ » Last generated: 2015-06-30 14:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDecayChannel.html:6405,access,accessors,6405,root/html602/TDecayChannel.html,https://root.cern,https://root.cern/root/html602/TDecayChannel.html,1,['access'],['accessors']
Security,":148; ROOT::RWebWindow::fProtocolConnIdunsigned fProtocolConnId! connection id, which is used for writing protocolDefinition RWebWindow.hxx:172; ROOT::RWebWindow::GetWindowConnectionsConnectionsList_t GetWindowConnections(unsigned connid=0, bool only_active=false) constreturns connection list (or all active connections)Definition RWebWindow.cxx:1458; ROOT::RWebWindow::fSendMTbool fSendMT! true is special threads should be used for sending dataDefinition RWebWindow.hxx:145; ROOT::RWebWindow::fCallbacksThrdIdstd::thread::id fCallbacksThrdId! thread id where callbacks should be invokedDefinition RWebWindow.hxx:160; ROOT::RWebWindow::RemoveKeyvoid RemoveKey(const std::string &key)Removes all connections with the key.Definition RWebWindow.cxx:583; ROOT::RWebWindow::fInputQueuestd::queue< QueueEntry > fInputQueue! input queue for all callbacksDefinition RWebWindow.hxx:164; ROOT::RWebWindow::_CanTrustInbool _CanTrustIn(std::shared_ptr< WebConn > &conn, const std::string &key, const std::string &ntry, bool remote, bool test_first_time)Check if provided hash, ntry parameters from the connection request could be accepted.Definition RWebWindow.cxx:513; ROOT::RWebWindow::SetConnTokenvoid SetConnToken(const std::string &token="""")Configures connection token (default none) When specified, in URL of webpage such token should be pro...Definition RWebWindow.cxx:715; ROOT::RWebWindow::MakeHeadlessunsigned MakeHeadless(bool create_new=false)Start headless browser for specified window Normally only single instance is used,...Definition RWebWindow.cxx:202; ROOT::RWebWindow::GetUrlstd::string GetUrl(bool remote=true)Return URL string to connect web window URL typically includes extra parameters required for connecti...Definition RWebWindow.cxx:173; ROOT::RWebWindow::CloseConnectionsvoid CloseConnections()Closes all connection to clients Normally leads to closing of all correspondent browser windows Some ...Definition RWebWindow.cxx:1438; ROOT::RWebWindow::fMasterstd::shared_ptr< RWebWindo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RWebWindow_8hxx_source.html:24808,hash,hash,24808,doc/v632/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RWebWindow_8hxx_source.html,1,['hash'],['hash']
Security,":151; ROOT::RWebWindow::fProtocolConnIdunsigned fProtocolConnId! connection id, which is used for writing protocolDefinition RWebWindow.hxx:175; ROOT::RWebWindow::GetWindowConnectionsConnectionsList_t GetWindowConnections(unsigned connid=0, bool only_active=false) constreturns connection list (or all active connections)Definition RWebWindow.cxx:1500; ROOT::RWebWindow::fSendMTbool fSendMT! true is special threads should be used for sending dataDefinition RWebWindow.hxx:148; ROOT::RWebWindow::fCallbacksThrdIdstd::thread::id fCallbacksThrdId! thread id where callbacks should be invokedDefinition RWebWindow.hxx:163; ROOT::RWebWindow::RemoveKeyvoid RemoveKey(const std::string &key)Removes all connections with the key.Definition RWebWindow.cxx:584; ROOT::RWebWindow::fInputQueuestd::queue< QueueEntry > fInputQueue! input queue for all callbacksDefinition RWebWindow.hxx:167; ROOT::RWebWindow::_CanTrustInbool _CanTrustIn(std::shared_ptr< WebConn > &conn, const std::string &key, const std::string &ntry, bool remote, bool test_first_time)Check if provided hash, ntry parameters from the connection request could be accepted.Definition RWebWindow.cxx:514; ROOT::RWebWindow::SetConnTokenvoid SetConnToken(const std::string &token="""")Configures connection token (default none) When specified, in URL of webpage such token should be pro...Definition RWebWindow.cxx:716; ROOT::RWebWindow::MakeHeadlessunsigned MakeHeadless(bool create_new=false)Start headless browser for specified window Normally only single instance is used,...Definition RWebWindow.cxx:202; ROOT::RWebWindow::GetUrlstd::string GetUrl(bool remote=true)Return URL string to connect web window URL typically includes extra parameters required for connecti...Definition RWebWindow.cxx:173; ROOT::RWebWindow::CloseConnectionsvoid CloseConnections()Closes all connection to clients Normally leads to closing of all correspondent browser windows Some ...Definition RWebWindow.cxx:1480; ROOT::RWebWindow::fMasterstd::shared_ptr< RWebWindo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RWebWindow_8hxx_source.html:25197,hash,hash,25197,doc/master/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RWebWindow_8hxx_source.html,1,['hash'],['hash']
Security,":240; ROOT::Math::SMatrix::operator/=SMatrix< T, D1, D2, R > & operator/=(const T &rhs)division with a scalarDefinition SMatrix.icc:287; ROOT::Math::SMatrix::value_typeT value_typecontained scalar typeDefinition SMatrix.h:106; ROOT::Math::SMatrix::InvertFastbool InvertFast()Fast inversion of a square Matrix ( this method changes the current matrix).Definition SMatrix.icc:429; ROOT::Math::SMatrix::LowerBlockSVector< T, D1 *(D2+1)/2 > LowerBlock() constreturn the lower Triangular block of the matrices (including the diagonal) as a vector of sizes N = D...Definition SMatrix.icc:826; ROOT::Math::SMatrix::TraceT Trace() constreturn the trace of a matrix Sum of the diagonal elementsDefinition SMatrix.icc:784; ROOT::Math::SMatrix::SubRowSubVector SubRow(unsigned int therow, unsigned int col0=0) constreturn a slice of therow as a vector starting at the column value col0 until col0+N,...Definition SMatrix.icc:712; ROOT::Math::SMatrix::operator()const T & operator()(unsigned int i, unsigned int j) constread only access to matrix element, with indices starting from 0Definition SMatrix.icc:639; ROOT::Math::SMatrix::RowSVector< T, D2 > Row(unsigned int therow) constreturn a full Matrix row as a vector (copy the content in a new vector)Definition SMatrix.icc:575; ROOT::Math::SMatrix::Arrayconst T * Array() constreturn read-only pointer to internal arrayDefinition SMatrix.icc:630; ROOT::Math::SMatrix::Place_in_colSMatrix< T, D1, D2, R > & Place_in_col(const SVector< T, D > &rhs, unsigned int row, unsigned int col)place a vector in a Matrix columnDefinition SMatrix.icc:518; ROOT::Math::SVectorSVector: a generic fixed size Vector class.Definition SVector.h:75; ROOT::Math::VecExprExpression wrapper class for Vector objects.Definition Expression.h:64; R; MathNamespace for new Math classes and functions.; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; v@ vDefinition rootcling_impl.cxx:3699; R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SMatrix_8h_source.html:32394,access,access,32394,doc/master/SMatrix_8h_source.html,https://root.cern,https://root.cern/doc/master/SMatrix_8h_source.html,1,['access'],['access']
Security,":37; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TDirectory::TContextTDirectory::TContext keeps track and restore the current directory.Definition TDirectory.h:89; TDirectory::TContext::operator=TContext & operator=(TContext &)=delete; TDirectory::TContext::TContextTContext(TDirectory *previous, TDirectory *newCurrent)Definition TDirectory.h:108; TDirectory::TContext::fDirectoryWaitstd::atomic< bool > fDirectoryWaitSet to true during the destructor execution.Definition TDirectory.h:93; TDirectory::TContext::RegisterCurrentDirectoryvoid RegisterCurrentDirectory()Definition TDirectory.cxx:1344; TDirectory::TContext::CdNullvoid CdNull()Set the current directory to null.Definition TDirectory.cxx:133; TDirectory::TContext::TContextTContext(TDirectory *newCurrent)Definition TDirectory.h:126; TDirectory::TContext::~TContext~TContext()Destructor.Definition TDirectory.cxx:143; TDirectory::TContext::fPreviousTContext * fPreviousSet to true if a TDirectory might still access this object.Definition TDirectory.h:94; TDirectory::TContext::fActiveDestructorstd::atomic< bool > fActiveDestructorPointer to the previous current directory.Definition TDirectory.h:92; TDirectory::TContext::TContextTContext(TContext &)=deletePointer to the next TContext in the implied list of context pointing to fPrevious.; TDirectory::TContext::TContextTContext()Definition TDirectory.h:120; TDirectory::TContext::fNextTContext * fNextPointer to the next TContext in the implied list of context pointing to fPrevious.Definition TDirectory.h:95; TDirectory::TContext::fDirectorystd::atomic< TDirectory * > fDirectoryDefinition TDirectory.h:91; TDirectoryDescribe directory structure in memory.Definition TDirectory.h:45; TDirectory::SharedGDirectory_tstd::shared_ptr< std::atomic< TDirectory * > > SharedGDirectory_tPointer to a list of TContext object pointing to this TDirectory.Definition TDirectory.h:147; TDirectory::GetSeekDirvirtual Long64_t G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectory_8h_source.html:17571,access,access,17571,doc/master/TDirectory_8h_source.html,https://root.cern,https://root.cern/doc/master/TDirectory_8h_source.html,1,['access'],['access']
Security,"::(anonymous)TObject::kSingleKey; static RooPrintable::StyleOptionRooPrintable::kSingleLine; static RooPrintable::StyleOptionRooPrintable::kStandard; static RooPrintable::ContentsOptionRooPrintable::kTitle; static RooPrintable::StyleOptionRooPrintable::kTreeStructure; static RooPrintable::ContentsOptionRooPrintable::kValue; static RooPrintable::StyleOptionRooPrintable::kVerbose; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. set<string>_boolAttribBoolean attributes; set<string>_boolAttribTransient! Transient boolean attributes (not copied in ctor); deque<RooAbsCache*>_cacheListlist of caches; RooRefCountList_clientListlist of client objects; RooRefCountList_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountList_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*_clientShapeIter! Iterator over _clientListShape; TIterator*_clientValueIter! Iterator over _clientListValue; Bool_t_deleteWatch! Delete watch flag; RooExpensiveObjectCache*_eocachePointer to global cache manager for any expensive components created by this object; Bool_t_fastAllow fast access mode in getVal() and proxies; static Bool_t_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_t_isConstant! Cached isConstant status; Bool_t_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperMode_operModeDirty state propagation mode; RooArgSet*_ownedComponents! Set of owned component; Bool_t_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArray_proxyListlist of proxies; RooRefCountList_serverListlist of server objects; Bool_t_shapeDirtyFlag set if value needs recalculating because input shapes modified; map<string,string>_stringAttribString attributes; Bool_t_valueD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsArg.html:19220,access,access,19220,root/html602/RooAbsArg.html,https://root.cern,https://root.cern/root/html602/RooAbsArg.html,2,['access'],['access']
Security,"::CCTreeWrapper;  ; class  Classification;  Class to perform two class classification. More...;  ; class  ClassificationResult;  Class to save the results of the classifier. More...;  ; class  TMVA::ClassifierFactory;  This is the MVA factory. More...;  ; class  TMVA::ClassInfo;  Class that contains all the information of a class. More...;  ; class  TMVA::Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  TMVA::ConvergenceTest;  Check for convergence. More...;  ; class  TMVA::CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CreateMethodPlugins;  Plugins analysis. More...;  ; class  TMVA::CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  TMVA::CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  TMVA::CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  TMVA::DataInputHandler;  Class that contains all the data information. More...;  ; class  TMVA::DataLoader;  ; class  TMVA::DataSet;  Class that contains all the data information. More...;  ; class  TMVA::DataSetFactory;  Class that contains all the data information. More...;  ; class  TMVA::DataSetInfo;  Class that contains all the data information. More...;  ; class  TMVA::DataSetManager;  Class that contains all the data information. More...;  ; class  TMVA::DecisionTree;  Implementation of a Decision Tree. More...;  ; class  TMVA::Envelope;  Abstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP. More...;  ; class  TMVA::Event;  ; class  TMVA::ExpectedErrorPruneTool;  A helper class to prune a decision tree using the expected error (C4.5) method. More...;  ; class  TMVA::Factory;  This is the main MVA steering class. More..",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__TMVA.html:2109,validat,validation,2109,doc/master/group__TMVA.html,https://root.cern,https://root.cern/doc/master/group__TMVA.html,1,['validat'],['validation']
Security,"::CreateDummyMediumstatic void CreateDummyMedium()Create a dummy medium.Definition TGeoVolume.cxx:412; TGeoVolume::SetLineStylevoid SetLineStyle(Style_t lstyle) overrideSet the line style.Definition TGeoVolume.cxx:2177; TGeoVolume::IsAssemblyvirtual Bool_t IsAssembly() constReturns true if the volume is an assembly or a scaled assembly.Definition TGeoVolume.cxx:1822; TGeoVolume::MakeReflectedVolumeTGeoVolume * MakeReflectedVolume(const char *newname="""") constMake a copy of this volume which is reflected with respect to XY plane.Definition TGeoVolume.cxx:1958; TGeoVolume::IsVisiblevirtual Bool_t IsVisible() constDefinition TGeoVolume.h:155; TGeoVoxelFinderFinder class handling voxels.Definition TGeoVoxelFinder.h:20; TGeoVoxelFinder::SetNeedRebuildvoid SetNeedRebuild(Bool_t flag=kTRUE)Definition TGeoVoxelFinder.h:107; TGeoXtruDefinition TGeoXtru.h:22; TGeoXtru::GetNvertInt_t GetNvert() constDefinition TGeoXtru.h:96; TGeoXtru::Classstatic TClass * Class(); THashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject...Definition THashList.h:34; THashList::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the list AND delete all heap based objects.Definition THashList.cxx:207; THashList::Clearvoid Clear(Option_t *option="""") overrideRemove all objects from the list.Definition THashList.cxx:189; THashList::FindObjectTObject * FindObject(const char *name) const overrideFind object using its name.Definition THashList.cxx:262; THashList::AddLastvoid AddLast(TObject *obj) overrideAdd object at the end of the list.Definition THashList.cxx:95; TIterDefinition TCollection.h:235; TKeyBook space in a file, create I/O buffers, to fill them, (un)compress them.Definition TKey.h:28; TKey::GetClassNamevirtual const char * GetClassName() constDefinition TKey.h:75; TKey::ReadObjvirtual TObject * ReadObj()To read a TObject* from the file.Definition TKey.cxx:759; TList::FindObjectTObject * FindObject(const char *name) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:238088,hash,hash,238088,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['hash'],['hash']
Security,"::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::CylindricalEta3D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar* src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). Set internal data based on 3 Scalar numbers. { fCoordinates.SetCoordinates(a, b, c); return *this; }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html:16993,access,access,16993,root/html526/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html,5,['access'],['access']
Security,"::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::CylindricalEta3D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). Set internal data based on 3 Scalar numbers. { fCoordinates.SetCoordinates(a, b, c); return *this; }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html:11798,access,access,11798,root/html602/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_double__-p1DefaultCoordinateSystemTag_.html,2,['access'],['access']
Security,"::DataKey, std::size_t > const &outputSizes, std::vector< double > &xlarr, Experimental::RooFuncWrapper &wrapper);  ; void addResult (const char *key, std::string const &value);  Adds (or overwrites) the string representing the result of a node. ;  ; void addResult (RooAbsArg const *key, std::string const &value);  A function to save an expression that includes/depends on the result of the input node. ;  ; void addToCodeBody (RooAbsArg const *klass, std::string const &in);  Adds the input string to the squashed code body. ;  ; void addToCodeBody (std::string const &in, bool isScopeIndep=false);  A variation of the previous addToCodeBody that takes in a bool value that determines if input is independent. ;  ; void addToGlobalScope (std::string const &str);  Adds the given string to the string block that will be emitted at the top of the squashed function. ;  ; void addVecObs (const char *key, int idx);  Since the squashed code represents all observables as a single flattened array, it is important to keep track of the start index for a vector valued observable which can later be expanded to access the correct element. ;  ; std::string assembleCode (std::string const &returnExpr);  Assemble and return the final code with the return expression and global statements. ;  ; std::unique_ptr< LoopScope > beginLoop (RooAbsArg const *in);  Create a RAII scope for iterating over vector observables. ;  ; std::string buildArg (RooAbsCollection const &x);  Function to save a RooListProxy as an array in the squashed code. ;  ; std::string buildArg (std::span< const double > arr);  ; std::string buildArg (std::span< const int > arr);  ; template<typename... Args_t> ; std::string buildCall (std::string const &funcname, Args_t const &...args);  Build the code to call the function with name funcname, passing some arguments. ;  ; void collectFunction (std::string const &name);  Register a function that is only know to the interpreter to the context. ;  ; std::string const & getResult (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFit_1_1Detail_1_1CodeSquashContext.html:1746,access,access,1746,doc/master/classRooFit_1_1Detail_1_1CodeSquashContext.html,https://root.cern,https://root.cern/doc/master/classRooFit_1_1Detail_1_1CodeSquashContext.html,1,['access'],['access']
Security,"::DecisionTreeNode::GetNodeType ; (; void ; ); const. inline . return node type: 1 signal node, -1 bkg leave, 0 intermediate Node ; Definition at line 165 of file DecisionTreeNode.h. ◆ GetNSigEvents(). Float_t TMVA::DecisionTreeNode::GetNSigEvents ; (; void ; ); const. inline . return the sum of the signal weights in the node, or -1 if traininfo undefined ; Definition at line 230 of file DecisionTreeNode.h. ◆ GetNSigEvents_unboosted(). Float_t TMVA::DecisionTreeNode::GetNSigEvents_unboosted ; (; void ; ); const. inline . return the sum of unboosted signal weights in the node, or -1 if traininfo undefined ; Definition at line 248 of file DecisionTreeNode.h. ◆ GetNSigEvents_unweighted(). Float_t TMVA::DecisionTreeNode::GetNSigEvents_unweighted ; (; void ; ); const. inline . Definition at line 239 of file DecisionTreeNode.h. ◆ GetNSValidation(). Double_t TMVA::DecisionTreeNode::GetNSValidation ; (; ); const. inline . return number of signal events from the pruning validation sample, or -1 if traininfo undefined ; Definition at line 327 of file DecisionTreeNode.h. ◆ GetNTerminal(). Int_t TMVA::DecisionTreeNode::GetNTerminal ; (; ); const. inline . return number of terminal nodes in the subtree rooted here, or -1 if traininfo undefined ; Definition at line 318 of file DecisionTreeNode.h. ◆ GetParent(). virtual DecisionTreeNode * TMVA::DecisionTreeNode::GetParent ; (; ); const. inlinevirtual . Reimplemented from TMVA::Node.; Definition at line 285 of file DecisionTreeNode.h. ◆ GetPurity(). Float_t TMVA::DecisionTreeNode::GetPurity ; (; void ; ); const. inline . return S/(S+B) (purity) at this node (from training) ; Definition at line 168 of file DecisionTreeNode.h. ◆ GetResponse(). Float_t TMVA::DecisionTreeNode::GetResponse ; (; void ; ); const. inline . return the response of the node (for regression) ; Definition at line 176 of file DecisionTreeNode.h. ◆ GetRight(). virtual DecisionTreeNode * TMVA::DecisionTreeNode::GetRight ; (; ); const. inlinevirtual . Reimplemented ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DecisionTreeNode.html:21893,validat,validation,21893,doc/master/classTMVA_1_1DecisionTreeNode.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTreeNode.html,1,['validat'],['validation']
Security,"::DeleteItem(Bool_t force, void* ptr) const; voidExpand(UInt_t nCurr, UInt_t left); TGenCollectionProxy*TGenCollectionProxy::Initialize(Bool_t silent) const; virtual TGenCollectionProxy*InitializeEx(Bool_t silent); voidReadItems(int nElements, TBuffer& b); voidShrink(UInt_t nCurr, UInt_t left, Bool_t force); voidWriteItems(int nElements, TBuffer& b). private:. TEmulatedCollectionProxy&operator=(const TEmulatedCollectionProxy&). Data Members; public:. enum TGenCollectionProxy::[unnamed] { kBIT_ISSTRING; kBIT_ISTSTRING; kBOOL_t; };; enum TVirtualCollectionProxy::EProperty { kIsInitialized; kIsAssociative; kIsEmulated; kNeedDelete; };. public:. static const Int_tTVirtualCollectionProxy::fgIteratorArenaSizegreater than sizeof(void*) + sizeof(UInt_t). protected:. TClassRefTVirtualCollectionProxy::fClass; TGenCollectionProxy::MethodTGenCollectionProxy::fClearMethod cache for container accessors: clear container; void*TGenCollectionProxy::fCollectMethod to collect objects from container; void*TGenCollectionProxy::fConstructContainer accessors: block construct; map<std::string,TObjArray*>*TGenCollectionProxy::fConversionReadMemberWiseArray of bundle of TStreamerInfoActions to stream out (read) derived from another class.; TGenCollectionProxy::Method0TGenCollectionProxy::fCreateEnvMethod to allocate an Environment holder.; void*TGenCollectionProxy::fDestructContainer accessors: block destruct; ROOT::TCollectionProxyInfo::EnvironBase*TGenCollectionProxy::fEnvAddress of the currently proxied object; void*TGenCollectionProxy::fFeedContainer accessors: block feed; TGenCollectionProxy::MethodTGenCollectionProxy::fFirstContainer accessors: generic iteration: first; void*TGenCollectionProxy::fFunctionCopyIterator; void*TGenCollectionProxy::fFunctionCreateIterators; void*TGenCollectionProxy::fFunctionDeleteIterator; void*TGenCollectionProxy::fFunctionDeleteTwoIterators; void*TGenCollectionProxy::fFunctionNextIterator; TGenCollectionProxy::Value*TGenCollectionProxy::fKeyDescriptor of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEmulatedCollectionProxy.html:4456,access,accessors,4456,root/html534/TEmulatedCollectionProxy.html,https://root.cern,https://root.cern/root/html534/TEmulatedCollectionProxy.html,2,['access'],['accessors']
Security,"::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const TObjArray*FindRules(const TString& source) const; const ROOT::TSchemaMatch*FindRules(const TString& source, Int_t version) const; const ROOT::TSchemaMatch*FindRules(const TString& source, UInt_t checksum) const; const ROOT::TSchemaMatch*FindRules(const TString& source, Int_t version, UInt_t checksum) const; TClass*GetClass(); UInt_tGetClassCheckSum() const; TStringGetClassName() const; Int_tGetClassVersion() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TObjArray*GetPersistentRules() const; const TObjArray*GetRules() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; Bool_tHasRuleWithSourceClass(const TString& source) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__TSchemaRuleSet.html:2081,checksum,checksum,2081,root/html526/ROOT__TSchemaRuleSet.html,https://root.cern,https://root.cern/root/html526/ROOT__TSchemaRuleSet.html,7,['checksum'],['checksum']
Security,"::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. _xmlParserCtxt*fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfParseCodeto keep track of the errorcodes; Bool_tfReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tfStopErrorstop when parse error occurs; Bool_tfValidateto validate the parse context; TStringfValidateErrorparse error; TStringfValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse succesfull; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLParser.html:10206,validat,validate,10206,root/html528/TXMLParser.html,https://root.cern,https://root.cern/root/html528/TXMLParser.html,3,['validat'],['validate']
Security,"::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. _xmlParserCtxt*fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tfParseCodeto keep track of the errorcodes; Bool_tfReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tfStopErrorstop when parse error occurs; Bool_tfValidateto validate the parse context; TStringfValidateErrorparse error; TStringfValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TXMLParser(); Cleanup. void SetValidate(Bool_t val = kTRUE); The parser will validate the xml file if val = true. void SetReplaceEntities(Bool_t val = kTRUE); The parser will replace/expand entities. void ReleaseUnderlying(); To release any existing document. void OnValidateError(const TString& message); This function is called when an error from the parser has occured.; Message is the parse error. void OnValidateWarning(const TString& message); This function is called when a warning from the parser has occured.; Message is the parse error. const char * GetParseCodeMessage(Int_t parseCode) const; Returns the parse code message. void InitializeContext(); Initialize parser parameters, such as, disactivate non-standards libxml1; features, on/off validation, clear error and warning messages. void StopParser(); Stops parsing. void SetParseCode(Int_t code); Set the parse code:; 0: Parse successful; -1: Attempt to parse a second file while a parse is in progress; -2: Parse context is not created; -3: An error occured while parsing file; -4: A fatal error occu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXMLParser.html:10294,validat,validate,10294,root/html534/TXMLParser.html,https://root.cern,https://root.cern/root/html534/TXMLParser.html,1,['validat'],['validate']
Security,"::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TVirtualMagField*fFieldMagnetic field; Bool_tfLockLock flag for global field.; static TGeoGlobalMagField*fgInstanceStatic pointer to the field manager;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoGlobalMagField(); Global field default constructor. ~TGeoGlobalMagField(); Global field destructor. void SetField(TVirtualMagField* field); Field setter. Deletes previous field if any. Acts only if fLock=kFALSE. TGeoGlobalMagField * GetInstance(); Static getter that does not create the object. TGeoGlobalMagField * Instance(); Returns always a valid static pointer to the field manager. void Lock(); Locks the global magnetic field if this is set. Cannot be unlocked. TGeoGlobalMagField(const TGeoGlobalMagField& ). TGeoGlobalMagField& operator=(const TGeoGlobalMagField& ). void Unlock(); {fLock = kFALSE;}. TVirtualMagField * GetField() const; Using SetField() makes a given field global. The field manager owns it from now on. {return fField;}. Bool_t IsLocked(); {return fLock;}. void Field(const Double_t* x, Double_t* B); Inline access to Field() method. {if (fField) fField->Field(x,B);}. » Last changed: root/geom:$Id$ » Last generated: 2015-06-02 16:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoGlobalMagField.html:7526,access,access,7526,root/html604/TGeoGlobalMagField.html,https://root.cern,https://root.cern/root/html604/TGeoGlobalMagField.html,1,['access'],['access']
Security,"::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TVirtualMagField*fFieldMagnetic field; Bool_tfLockLock flag for global field.; static TGeoGlobalMagField*fgInstanceStatic pointer to the field manager;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoGlobalMagField(); Global field default constructor. ~TGeoGlobalMagField(); Global field destructor. void SetField(TVirtualMagField* field); Field setter. Deletes previous field if any. Acts only if fLock=kFALSE. TGeoGlobalMagField * GetInstance(); Static getter that does not create the object. TGeoGlobalMagField * Instance(); Returns always a valid static pointer to the field manager. void Lock(); Locks the global magnetic field if this is set. Cannot be unlocked. TGeoGlobalMagField(const TGeoGlobalMagField& ). TGeoGlobalMagField& operator=(const TGeoGlobalMagField& ). void Unlock(); {fLock = kFALSE;}. TVirtualMagField * GetField() const; Using SetField() makes a given field global. The field manager owns it from now on. {return fField;}. Bool_t IsLocked(); {return fLock;}. void Field(const Double_t* x, Double_t* B); Inline access to Field() method. {if (fField) fField->Field(x,B);}. » Last changed: root/geom:$Id$ » Last generated: 2015-06-30 15:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoGlobalMagField.html:7526,access,access,7526,root/html602/TGeoGlobalMagField.html,https://root.cern,https://root.cern/root/html602/TGeoGlobalMagField.html,1,['access'],['access']
Security,"::EStreamerTypekInstrumented; static TClass::(anonymous)kLoading; static TClass::EStreamerTypekTObject; static TClass::(anonymous)kUnloading. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IdMap_t * GetIdMap(). DeclIdMap_t * GetDeclIdMap(). void AddClass(TClass* cl); static: Add a class to the list and map of classes. void AddClassToDeclIdMap(TDictionary::DeclId_t id, TClass* cl); static: Add a TClass* to the map of classes. void RemoveClass(TClass* cl); static: Remove a class from the list and map of classes. void RemoveClassDeclId(TDictionary::DeclId_t id). TClass(); Default ctor. TClass(const char* name, Bool_t silent = kFALSE); Create a TClass object. This object contains the full dictionary; of a class. It has list to baseclasses, datamembers and methods.; Use this ctor to create a standalone TClass object. Most useful; to get a TClass interface to an interpreted class. Used by TTabCom.; Normally you would use TClass::GetClass(""class"") to get access to a; TClass object for a certain class. TClass(const char* name, Version_t cversion, Bool_t silent = kFALSE); Create a TClass object. This object contains the full dictionary; of a class. It has list to baseclasses, datamembers and methods. TClass(const char* name, Version_t cversion, TClass::EState theState, Bool_t silent = kFALSE); Create a TClass object. This object does not contain anything. We mimic; the case of a class fwd declared in the interpreter. TClass(ClassInfo_t* info, Version_t cversion, const char* dfil, const char* ifil = 0, Int_t dl = 0, Int_t il = 0, Bool_t silent = kFALSE); Create a TClass object. This object contains the full dictionary; of a class. It has list to baseclasses, datamembers and methods.; Use this ctor to create a standalone TClass object. Most useful; to get a TClass interface to an interpreted class. Used by TTabCom.; Normally you would use TClass::GetClass(""class"") to get access to a; TClass object for a certain class. This copies the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClass.html:24966,access,access,24966,root/html602/TClass.html,https://root.cern,https://root.cern/root/html602/TClass.html,2,['access'],['access']
Security,"::EvaluateChi2.; In case of TGraphErrors an effective chi2 is used; (see TGraphErrors fit in TGraph::Fit) and is implemented in; FitUtil::EvaluateChi2Effective; To specify a User defined fitting function, specify option ""U"" and; call the following functions:; TVirtualFitter::Fitter(mygraph)->SetFCN(MyFittingFunction); where MyFittingFunction is of type:; extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);. Access to the fit result. The function returns a TFitResultPtr which can hold a pointer to a TFitResult object.; By default the TFitResultPtr contains only the status of the fit and it converts; automatically to an integer. If the option ""S"" is instead used, TFitResultPtr contains; the TFitResult and behaves as a smart pointer to it. For example one can do:; TFitResultPtr r = graph->Fit(""myFunc"",""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t par0 = r->Parameter(0); // retrieve the value for the parameter 0; Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file. The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; from the fitted function. Associated functions. One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated to each graph.; When TGraph::Fit is invoked, the fitted function is added to this list.; Given a graph gr, one can retrieve an associated function; with: TF1 *myfunc = gr->GetFunction(""myfunc"");. If the graph is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParErr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiGraph.html:13250,access,access,13250,root/html528/TMultiGraph.html,https://root.cern,https://root.cern/root/html528/TMultiGraph.html,6,['access'],['access']
Security,"::GetShortPointer ; (; ); const. inlineprivate . Definition at line 255 of file TString.h. ◆ GetShortSize(). Ssiz_t TString::GetShortSize ; (; ); const. inlineprivate . Definition at line 244 of file TString.h. ◆ Hash() [1/2]. UInt_t TString::Hash ; (; const void * ; txt, . Int_t ; ntxt . ). static . Calculates hash index from any char string. ; (static function); For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. This employs two different hash functions, depending on ntxt:; ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; else: MurmurHash3_x64_128 http://code.google.com/p/smhasher/ . Definition at line 850 of file TString.cxx. ◆ Hash() [2/2]. UInt_t TString::Hash ; (; ECaseCompare ; cmp = kExact); const. Return hash value. ; Definition at line 677 of file TString.cxx. ◆ HashCase(). UInt_t TString::HashCase ; (; ); const. private . Return a case-sensitive hash value (endian independent). ; Definition at line 633 of file TString.cxx. ◆ HashFoldCase(). UInt_t TString::HashFoldCase ; (; ); const. private . Return a case-insensitive hash value (endian independent). ; Definition at line 662 of file TString.cxx. ◆ Index() [1/8]. Ssiz_t TString::Index ; (; const char * ; pat, . Ssiz_t ; i = 0, . ECaseCompare ; cmp = kExact . ); const. inline . Definition at line 651 of file TString.h. ◆ Index() [2/8]. Ssiz_t TString::Index ; (; const char * ; pattern, . Ssiz_t ; plen, . Ssiz_t ; startIndex, . ECaseCompare ; cmp . ); const. Search for a string in the TString. ; Plen is the length of pattern, startIndex is the index from which to start and cmp selects the type of case-comparison. ; Definition at line 901 of file TString.cxx. ◆ Index() [3/8]. Ssiz_t TString::Index ; (; const TRegexp & ; r, . Ssiz_t * ; extent, . Ssiz_t ; start = 0 . ); const. Find the first occurrence of the regexp in string and return the position, or -1 if there is no match. ; Exte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTString.html:34302,hash,hash,34302,doc/v632/classTString.html,https://root.cern,https://root.cern/doc/v632/classTString.html,2,['hash'],['hash']
Security,"::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidMonitorUsedSpace(TVirtualMonitoringWriter* monitoring); virtual Bool_tTObject::Notify(); virtual Int_tNotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); static TList*ParseDataSetSrvMaps(const TString& srvmaps); virtual voidParseInitOpts(const char* opts); Bool_tParseUri(const char* uri, TString* dsGroup = 0, TString* dsUser = 0, TString* dsName = 0, TString* dsTree = 0, Bool_t onlyCurrent = kFALSE, Bool_t wildcards = kFALSE); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tRegisterDataSet(const char* uri, TFileCollection* dataSet, const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDataSetManager.html:4047,checksum,checksum,4047,root/html528/TDataSetManager.html,https://root.cern,https://root.cern/root/html528/TDataSetManager.html,1,['checksum'],['checksum']
Security,"::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidMonitorUsedSpace(TVirtualMonitoringWriter* monitoring); virtual Bool_tTObject::Notify(); virtual Int_tNotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); static TList*ParseDataSetSrvMaps(const TString& srvmaps); virtual voidParseInitOpts(const char* opts); Bool_tParseUri(const char* uri, TString* dsGroup = 0, TString* dsUser = 0, TString* dsName = 0, TString* dsTree = 0, Bool_t onlyCurrent = kFALSE, Bool_t wildcards = kFALSE); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; static voidProcessFile(TFileInfo* fileInfo, Int_t sopt, Bool_t checkstg, Bool_t d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDataSetManager.html:4259,checksum,checksum,4259,root/html534/TDataSetManager.html,https://root.cern,https://root.cern/root/html534/TDataSetManager.html,1,['checksum'],['checksum']
Security,"::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidMonitorUsedSpace(TVirtualMonitoringWriter* monitoring); virtual Bool_tTObject::Notify(); virtual Int_tNotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); static TList*ParseDataSetSrvMaps(const TString& srvmaps); virtual voidParseInitOpts(const char* opts); Bool_tParseUri(const char* uri, TString* dsGroup = 0, TString* dsUser = 0, TString* dsName = 0, TString* dsTree = 0, Bool_t onlyCurrent = kFALSE, Bool_t wildcards = kFALSE); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TDataSetManager.html:4047,checksum,checksum,4047,root/html530/TDataSetManager.html,https://root.cern,https://root.cern/root/html530/TDataSetManager.html,2,['checksum'],['checksum']
Security,"::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidMonitorUsedSpace(TVirtualMonitoringWriter* monitoring); virtual Bool_tTObject::Notify(); virtual Int_tNotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); static TList*ParseDataSetSrvMaps(const TString& srvmaps); virtual voidParseInitOpts(const char* opts); Bool_tParseUri(const char* uri, TString* dsGroup = 0, TString* dsUser = 0, TString* dsName = 0, TString* dsTree = 0, Bool_t onlyCurrent = kFALSE, Bool_t wildcards = kFALSE); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; static voidProcessFile(TFileInfo* fileInfo, Int_t sopt, Bool_t checkstg, Bool_t doall, TFileStager* stager, B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDataSetManager.html:4172,checksum,checksum,4172,root/html602/TDataSetManager.html,https://root.cern,https://root.cern/root/html602/TDataSetManager.html,2,['checksum'],['checksum']
Security,"::Log ; (; ); const. inlineprivate . Definition at line 93 of file Results.h. ◆ operator[](). virtual const std::vector< Float_t > & TMVA::Results::operator[] ; (; Int_t ; ievt); const. pure virtual . Implemented in TMVA::ResultsClassification, TMVA::ResultsMulticlass, and TMVA::ResultsRegression. ◆ SetTreeType(). void TMVA::Results::SetTreeType ; (; Types::ETreeType ; type). inline . Definition at line 66 of file Results.h. ◆ Store(). void TMVA::Results::Store ; (; TObject * ; obj, . const char * ; alias = nullptr . ). Definition at line 86 of file Results.cxx. ◆ Streamer(). void TMVA::Results::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TMVA::ResultsClassification, TMVA::ResultsMulticlass, and TMVA::ResultsRegression. ◆ StreamerNVirtual(). void TMVA::Results::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 96 of file Results.h. Member Data Documentation. ◆ fDsi. const DataSetInfo* TMVA::Results::fDsi. private . -> a pointer to the datasetinfo-object ; Definition at line 89 of file Results.h. ◆ fHistAlias. std::map<TString, TObject *>* TMVA::Results::fHistAlias. private . -> internal map for quick access to stored histograms ; Definition at line 91 of file Results.h. ◆ fLogger. MsgLogger* TMVA::Results::fLogger. mutableprivate . ! message logger ; Definition at line 92 of file Results.h. ◆ fStorage. TList* TMVA::Results::fStorage. private . -> stores all the result-histograms ; Definition at line 90 of file Results.h. ◆ fTreeType. Types::ETreeType TMVA::Results::fTreeType. private . tree type for this result ; Definition at line 88 of file Results.h. Libraries for TMVA::Results:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Results.h; tmva/tmva/src/Results.cxx. TMVAResults. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Results.html:15668,access,access,15668,doc/master/classTMVA_1_1Results.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Results.html,1,['access'],['access']
Security,"::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. RooLinkedListElem*RooLinkedList::_first! Link to first element of list; Int_tRooLinkedList::_hashThreshSize threshold for hashing; RooHashTable*RooLinkedList::_htableLink! Hash table by link pointer; RooHashTable*RooLinkedList::_htableName! Hash table by name; RooLinkedListElem*RooLinkedList::_last! Link to last element of list; TStringRooLinkedList::_name; Int_tRooLinkedList::_sizeCurrent size of list; Bool_tRooLinkedList::_useNptr!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooRefCountList(); Default constructor construct lists with initial hash table size of 17. void Add(TObject* obj, Int_t count); Add object to list with given reference count increment; List takes ownership of object. Bool_t Remove(TObject* obj); Remove object from list and if reference count; reaches zero delete object itself as well. Bool_t RemoveAll(TObject* obj); Remove object from list and delete object itself; regardless of reference count. Int_t refCount(TObject* obj); Return reference count associated with 'obj'. RooRefCountList(). virtual ~RooRefCountList(); {}. void Add(TObject* arg); { Add(arg,1) ; }. » Last changed: Tue Jun 2 15:33:35 2015 » Last generated: 2015-06-02 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooRefCountList.html:7241,hash,hashing,7241,root/html604/RooRefCountList.html,https://root.cern,https://root.cern/root/html604/RooRefCountList.html,1,['hash'],['hashing']
Security,"::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. RooLinkedListElem*RooLinkedList::_first! Link to first element of list; Int_tRooLinkedList::_hashThreshSize threshold for hashing; RooHashTable*RooLinkedList::_htableLink! Hash table by link pointer; RooHashTable*RooLinkedList::_htableName! Hash table by name; RooLinkedListElem*RooLinkedList::_last! Link to last element of list; TStringRooLinkedList::_name; Int_tRooLinkedList::_sizeCurrent size of list; Bool_tRooLinkedList::_useNptr!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooRefCountList(); Default constructor construct lists with initial hash table size of 17. void Add(TObject* obj, Int_t count); Add object to list with given reference count increment; List takes ownership of object. Bool_t Remove(TObject* obj); Remove object from list and if reference count; reaches zero delete object itself as well. Bool_t RemoveAll(TObject* obj); Remove object from list and delete object itself; regardless of reference count. Int_t refCount(TObject* obj); Return reference count associated with 'obj'. RooRefCountList(). virtual ~RooRefCountList(); {}. void Add(TObject* arg); { Add(arg,1) ; }. » Last changed: Tue Jun 30 14:35:31 2015 » Last generated: 2015-06-30 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRefCountList.html:7247,hash,hashing,7247,root/html602/RooRefCountList.html,https://root.cern,https://root.cern/root/html602/RooRefCountList.html,1,['hash'],['hashing']
Security,"::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::CylindricalEta3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar c). Set internal data based on 3 Scalar numbers. { fCoordinates.SetCoordinates(a, b, c); return *this; }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<double>,ROOT::Math::LocalCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1LocalCoordinateSystemTag_.html:11642,access,access,11642,root/html602/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1LocalCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1LocalCoordinateSystemTag_.html,2,['access'],['access']
Security,"::Math::DefaultCoordinateSystemTag>&operator=<ROOT::Math::Cartesian3D<double>, ROOT::Math::DefaultCoordinateSystemTag>(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>&). Data Members; private:. ROOT::Math::Cartesian3D<double>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). Set internal data based on 3 Scalar numbers. { fCoordinates.SetCoordinates(a, b, c); return *this; }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html:13732,access,access,13732,root/html602/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html,2,['access'],['access']
Security,"::Math::SVector::UnitSVector< T, D > & Unit()transform vector into a vector of length 1Definition SVector.icc:477; ROOT::Math::SVector::SubSubVector Sub(unsigned int row) constreturn a subvector of size N starting at the value row where N is the size of the returned vector (Su...Definition SVector.icc:612; ROOT::Math::SVector::Arrayconst T * Array() constreturn read-only pointer to internal arrayDefinition SVector.icc:540; ROOT::Math::SVector::applyT apply(unsigned int i) constaccess the parse tree. Index starts from zeroDefinition SVector.icc:537; ROOT::Math::SVector::Atconst T & At(unsigned int i) constread-only access of vector elements with check on index. Index starts from 0.Definition SVector.icc:596; ROOT::Math::SVector::operator!=bool operator!=(const T &rhs) constelement wise comparisonDefinition SVector.icc:261; ROOT::Math::SVector::SVectorSVector()Default constructor: vector filled with zero values.Definition SVector.icc:53; ROOT::Math::SVector::operator()const T & operator()(unsigned int i) constread-only access of vector elements. Index starts from 0.Definition SVector.icc:585; ROOT::Math::SVector::operator-=SVector< T, D > & operator-=(const T &rhs)self subtraction with a scalarDefinition SVector.icc:400; ROOT::Math::SVector::IsInUsebool IsInUse(const T *p) constFunction to check if a vector is sharing same memory location of the passed pointer This function is ...Definition SVector.icc:628; ROOT::Math::SVector::operator<bool operator<(const T &rhs) constelement wise comparisonDefinition SVector.icc:311; ROOT::Math::SVector::operator[]const T & operator[](unsigned int i) constread-only access of vector elements. Index starts from 0.Definition SVector.icc:582; ROOT::Math::SVector::operator+=SVector< T, D > & operator+=(const T &rhs)self addition with a scalarDefinition SVector.icc:371; ROOT::Math::SVector::operator==bool operator==(const T &rhs) constelement wise comparisonDefinition SVector.icc:230; ROOT::Math::SVector::operator/=SVector< T, D > & opera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SVector_8icc_source.html:24266,access,access,24266,doc/master/SVector_8icc_source.html,https://root.cern,https://root.cern/doc/master/SVector_8icc_source.html,1,['access'],['access']
Security,"::Open(), passing the file name, and then, if the file is open (i.e. if the pointer to it is not NULL), create a TTreeReader using the tree name and the file. At the end, the code in AnalyzeTree.C should look like this:; ... // open the file; TFile *f = TFile::Open(""http://root.cern/files/introtutorials/eventdata.root"");; if (f == 0) {; // if we cannot open the file, print an error message and return immediatly; printf(""Error: cannot open http://root.cern/files/introtutorials/eventdata.root!\n"");; return;; }. // Create tyhe tree reader and its data containers; TTreeReader myReader(""EventTree"", f);. ... Getting the data out of the TTree; Fine, we have access to our tree. But now we need to get a handle on the data it stores, as shown below:; ... TTreeReaderValue<Int_t> eventSize(myReader, ""fEventSize"");. ... Loading TTree's Data; For the analysis example we need to access the events' size, which is accessible through the TTreeReaderValue eventSize. But the TTreeReader first needs to get told about which TTree entry to access. For that call TTreeReader::Next() in a loop. It will return false once it has reached the end of the TTree.; In the same loop, compute the total size of all events (simply add the current event size to the total size); ... // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Get the data from the current TTree entry by getting; // the value from the connected reader (eventSize):; totalSize += *eventSize;; }. Accessing the Analysis Result; At the end of the loop, print the sum of all event sizes. This sum shows you the real power of a TTree: even though you can analyze large amounts of data (our example tree with 22MB is tiny!) ROOT needs just a few MB of your RAM, no matter how many events you analyze. Imagine what it would be like if you had to load all data into memory, e.g. using a simple vector!; ... Int_t sizeInMB = totalSize/1024/1024;; printf(""Total size of all events: %d MB\n"", sizeInMB);; }. Running the Macro; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/using-macro-read-ttree.html:4293,access,access,4293,d/using-macro-read-ttree.html,https://root.cern,https://root.cern/d/using-macro-read-ttree.html,1,['access'],['access']
Security,"::Place_atSVector< T, D > & Place_at(const SVector< T, D2 > &rhs, unsigned int row)place a sub-vector starting from the given positionDefinition SVector.icc:490; ROOT::Math::SVector::beginiterator begin()STL iterator interface.Definition SVector.icc:550; ROOT::Math::SVector::operator*=SVector< T, D > & operator*=(const T &rhs)self multiplication with a scalarDefinition SVector.icc:428; ROOT::Math::SVector::UnitSVector< T, D > & Unit()transform vector into a vector of length 1Definition SVector.icc:477; ROOT::Math::SVector::SubSubVector Sub(unsigned int row) constreturn a subvector of size N starting at the value row where N is the size of the returned vector (Su...Definition SVector.icc:612; ROOT::Math::SVector::Arrayconst T * Array() constreturn read-only pointer to internal arrayDefinition SVector.icc:540; ROOT::Math::SVector::applyT apply(unsigned int i) constaccess the parse tree. Index starts from zeroDefinition SVector.icc:537; ROOT::Math::SVector::Atconst T & At(unsigned int i) constread-only access of vector elements with check on index. Index starts from 0.Definition SVector.icc:596; ROOT::Math::SVector::operator!=bool operator!=(const T &rhs) constelement wise comparisonDefinition SVector.icc:261; ROOT::Math::SVector::SVectorSVector()Default constructor: vector filled with zero values.Definition SVector.icc:53; ROOT::Math::SVector::operator()const T & operator()(unsigned int i) constread-only access of vector elements. Index starts from 0.Definition SVector.icc:585; ROOT::Math::SVector::operator-=SVector< T, D > & operator-=(const T &rhs)self subtraction with a scalarDefinition SVector.icc:400; ROOT::Math::SVector::IsInUsebool IsInUse(const T *p) constFunction to check if a vector is sharing same memory location of the passed pointer This function is ...Definition SVector.icc:628; ROOT::Math::SVector::operator<bool operator<(const T &rhs) constelement wise comparisonDefinition SVector.icc:311; ROOT::Math::SVector::operator[]const T & operator[](unsigned in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SVector_8icc_source.html:23855,access,access,23855,doc/master/SVector_8icc_source.html,https://root.cern,https://root.cern/doc/master/SVector_8icc_source.html,1,['access'],['access']
Security,"::Polar3DPoint point based on r, theta, phi coordinates (polar) in double precision; ROOT::Math::Polar3DPointF point based on r, theta, phi coordinates (polar) in float precision; ROOT::Math::RhoZPhiPoint point based on rho, z, phi coordinates (cylindrical using z) in double precision; ROOT::Math::RhoZPhiPointF point based on rho, z, phi coordinates (cylindrical using z) in float precision; ROOT::Math::RhoEtaPhiPoint point based on rho, eta, phi coordinates (cylindrical using eta instead of z) in double precision; ROOT::Math::RhoEtaPhiPointF point based on rho, eta, phi coordinates (cylindrical using eta instead of z) in float precision. 13.12.3.1 Constructors and Assignment; The following declarations are available:; XYZPoint p1; //an empty vector (x=0, y=0, z=0); XYZPoint p2(1,2,3); //; Note that each point type is constructed by passing its coordinate representation, so a XYZPoint(1,2,3) is different from a Polar3DPoint(1,2,3). In addition the point classes can be constructed by any vector, which implements the accessors x(), y() and z(). This can be another 3D point based on a different coordinate system type or even any vector of a different package, like the CLHEP HepThreePoint that implements the required signatures.; XYZPoint p1(1,2,3);; RhoEtaPHiPoint r2(v1);; CLHEP::HepThreePoint q(1,2,3);; XYZPoint p3(q);; 13.12.3.2 Coordinate Accessors and Setter Methods; For the points classes we have the same getter and setter methods as for the vector classes. See “Example: 3D Vector Classes”.; 13.12.3.3 Point-Vector Operations; The following operations are possible between points and vector classes: (p1, p2 and p3 are instantiations of the ROOT::Math::PositionVector3D objects with p1 and p3 of the same type; v1 and v2 are ROOT::Math::DisplacementVector3D objects).; p1 += v1;; p1 -= v1;; p3 = p1 + v1; // p1 and p3 are the same type; p3 = v1 + p1; // p3 is based on the same coordinate system as v1; p3 = p1 - v1;; p3 = v1 - p1;; v2 = p1 - p2; // difference between points",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:734204,access,accessors,734204,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['access'],['accessors']
Security,"::RCanvas::GetWindowUrl(bool remote); 160{; 161 if (fPainter); 162 return fPainter->GetWindowUrl(remote);; 163 ; 164 return """";; 165}; 166 ; 167 ; 168//////////////////////////////////////////////////////////////////////////; 169/// Hide all canvas displays; 170 ; 171void ROOT::Experimental::RCanvas::Hide(); 172{; 173 if (fPainter); 174 fPainter = nullptr;; 175}; 176 ; 177//////////////////////////////////////////////////////////////////////////; 178/// Create image file for the canvas; 179/// Supported SVG (extension .svg), JPEG (extension .jpg or .jpeg), PNG (extension .png) or JSON (extension .json); 180 ; 181bool ROOT::Experimental::RCanvas::SaveAs(const std::string &filename); 182{; 183 if (!fPainter); 184 fPainter = Internal::RVirtualCanvasPainter::Create(*this);; 185 ; 186 if (!fPainter); 187 return false;; 188 ; 189 int width = GetWidth();; 190 int height = GetHeight();; 191 ; 192 return fPainter->ProduceBatchOutput(filename, width > 1 ? width : 800, height > 1 ? height : 600);; 193}; 194 ; 195//////////////////////////////////////////////////////////////////////////; 196/// Return unique identifier for the canvas; 197/// Used in iPython display; 198 ; 199std::string ROOT::Experimental::RCanvas::GetUID() const; 200{; 201 const void *ptr = this;; 202 auto hash = TString::Hash(&ptr, sizeof(void*));; 203 TString fmt = TString::Format(""rcanv_%x"", hash);; 204 return fmt.Data();; 205}; 206 ; 207//////////////////////////////////////////////////////////////////////////; 208/// Create JSON data for the canvas; 209/// Can be used of offline display with JSROOT; 210 ; 211std::string ROOT::Experimental::RCanvas::CreateJSON(); 212{; 213 if (!fPainter); 214 fPainter = Internal::RVirtualCanvasPainter::Create(*this);; 215 ; 216 if (!fPainter); 217 return """";; 218 ; 219 return fPainter->ProduceJSON();; 220}; 221 ; 222//////////////////////////////////////////////////////////////////////////; 223/// Remove canvas from global canvas lists, will be destroyed once last shared_p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RCanvas_8cxx_source.html:6564,hash,hash,6564,doc/master/RCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RCanvas_8cxx_source.html,2,['hash'],['hash']
Security,"::SVector<double,2*(2+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<double,2,2>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:5713,access,access,5713,root/html528/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,4,['access'],['access']
Security,"::SVector<double,3*(3+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<double,3,3>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:5713,access,access,5713,root/html528/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,4,['access'],['access']
Security,"::SVector<double,3*(4+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<double,3,4>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:5603,access,access,5603,root/html528/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,4,['access'],['access']
Security,"::SVector<double,4*(3+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<double,4,3>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:5603,access,access,5603,root/html528/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,4,['access'],['access']
Security,"::SVector<double,4*(4+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<double,4,4>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:5713,access,access,5713,root/html528/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,4,['access'],['access']
Security,"::SVector<double,5*(5+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<double,5,5>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:5713,access,access,5713,root/html528/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,4,['access'],['access']
Security,"::SVector<double,6*(6+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<double,6,6>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:5713,access,access,5713,root/html528/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,4,['access'],['access']
Security,"::SVector<double,7*(7+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<double,7,7>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:5713,access,access,5713,root/html528/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,4,['access'],['access']
Security,"::SVector<double,9*(7+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<double,9,7>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:5634,access,access,5634,root/html528/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,4,['access'],['access']
Security,"::Scalarz() const. Data Members; private:. ROOT::Math::PxPyPzE4D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=( const LorentzVector<OtherCoords> & v); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordinates(const Scalar[] src). Set internal data based on an array of 4 Scalar numbers. void GetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar zz, ROOT::Math::Lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:10952,access,access,10952,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,2,['access'],['access']
Security,"::Scalarz() const. Data Members; private:. ROOT::Math::PxPyPzM4D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=( const LorentzVector<OtherCoords> & v); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordinates(const Scalar[] src). Set internal data based on an array of 4 Scalar numbers. void GetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar zz, ROOT::Math::Lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:10952,access,access,10952,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,2,['access'],['access']
Security,"::SetUniqueID(UInt_t uid); voidSetUnloaded(); virtual voidShowMembers(TMemberInspector&); Int_tSize() const; virtual Int_tTNamed::Sizeof() const; voidStore(TBuffer& b) const; virtual voidStreamer(TBuffer&); voidStreamer(void* obj, TBuffer& b, const TClass* onfile_class = 0) const; voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Int_tWriteBuffer(TBuffer& b, void* pointer, const char* info = """"). protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; TVirtualStreamerInfo*FindStreamerInfo(TObjArray* arr, UInt_t checksum) const; static THashTable*GetClassShortTypedefHash(); voidTObject::MakeZombie(). private:. TClass(const TClass& tc); TVirtualStreamerInfo*DetermineCurrentStreamerInfo(); voidForceReload(TClass* oldcl); Int_tGetBaseClassOffsetRecurse(const TClass* base); TMethod*GetClassMethod(Long_t faddr); TMethod*GetClassMethod(const char* name, const char* signature); static ROOT::TMapTypeToTClass*GetIdMap(); voidInit(const char* name, Version_t cversion, const type_info* info, TVirtualIsAProxy* isa, ShowMembersFunc_t showmember, const char* dfil, const char* ifil, Int_t dl, Int_t il, Bool_t silent); TClass&operator=(const TClass&); voidSetClassSize(Int_t sizof); voidSetClassVersion(Version_t version); voidStreamerDefault(void* object, TBuffer& b, const TClass* onfile_class) const; voidStreamerExternal(void* object, TBuffer& b, const TClass* onfile_class) const; voidStreamerInstrumented(void* object, TBuffer& b, const TClass* onfile_class) const; voidStrea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TClass.html:12767,checksum,checksum,12767,root/html534/TClass.html,https://root.cern,https://root.cern/root/html534/TClass.html,1,['checksum'],['checksum']
Security,"::TCollectionProxyInfo::EnvironBase*fEnvAddress of the currently proxied object; void*fFeedContainer accessors: block feed; TGenCollectionProxy::MethodfFirstContainer accessors: generic iteration: first; void*fFunctionCopyIterator; void*fFunctionCreateIterators; void*fFunctionDeleteIterator; void*fFunctionDeleteTwoIterators; void*fFunctionNextIterator; TGenCollectionProxy::Value*fKeyDescriptor of the key_type; stringfNameName of the class being proxied.; TGenCollectionProxy::MethodfNextContainer accessors: generic iteration: next; TClass*fOnFileClassOn file class; Bool_tfPointersFlag to indicate if containee has pointers (key or value); UInt_tTVirtualCollectionProxy::fProperties; vector<ROOT::TCollectionProxyInfo::EnvironBase*,allocator<ROOT::TCollectionProxyInfo::EnvironBase*> >fProxyKeptOptimization: Keep proxies once they were created; vector<ROOT::TCollectionProxyInfo::EnvironBase*,allocator<ROOT::TCollectionProxyInfo::EnvironBase*> >fProxyListStack of recursive proxies; TObjArray*fReadMemberWiseArray of bundle of TStreamerInfoActions to stream out (read); void*fResizeContainer accessors: resize container; intfSTL_typeSTL container type; TGenCollectionProxy::MethodfSizeContainer accessors: size of container; vector<TGenCollectionProxy::TStaging*,allocator<TGenCollectionProxy::TStaging*> >fStagedOptimization: Keep staged array once they were created; type_info&fTypeinfoType information; TGenCollectionProxy::Value*fValDescriptor of the Value_type; intfValDiffOffset between two consecutive value_types (memory layout).; intfValOffsetOffset from key to value (in maps); TGenCollectionProxy::Value*fValueDescriptor of the container value type; TStreamerInfoActions::TActionSequence*fWriteMemberWise. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void DeleteItem(void* ptr); Delete individual item from STL container. s. Streamer(TBuffer& refBuffer). s. Streamer(TBuffer& refBuffer). else s-> Clear(). Method & operator=(const TGenCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGenCollectionProxy.html:4900,access,accessors,4900,root/html534/TGenCollectionProxy.html,https://root.cern,https://root.cern/root/html534/TGenCollectionProxy.html,3,['access'],['accessors']
Security,"::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooListProxy_gamma; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooHistConstraint.html:39931,access,access,39931,root/html534/RooHistConstraint.html,https://root.cern,https://root.cern/root/html534/RooHistConstraint.html,1,['access'],['access']
Security,"::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgrThe cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooArgSet*_curNormSet!; Double_t_cutOffCutoff parameter for running product; RooArgSet_defNormSetDefault normalization set; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Int_t_extendedIndexIndex of extended PDF (if any); Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAICRegistry_genCode! Registry of composite direct generator codes; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooProdPdf.html:45339,access,access,45339,root/html602/RooProdPdf.html,https://root.cern,https://root.cern/root/html602/RooProdPdf.html,2,['access'],['access']
Security,::_cacheListlist of caches; Bool_t_cdfBoundariesUse boundary conditions for CDFs.; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistry_codeReg! Auxiliary class keeping tracking of analytical integration code; RooDataHist*_dataHistUnowned pointer to underlying histogram; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooSetProxy_depListList of observables mapped onto histogram observables; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; TIterator*_histObsIter! ; RooArgSet_histObsListList of observables defining dimensions of histogram; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_t_intOrderInterpolation order; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperM,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooHistFunc.html:33909,access,access,33909,root/html534/RooHistFunc.html,https://root.cern,https://root.cern/root/html534/RooHistFunc.html,1,['access'],['access']
Security,::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistryRooAbsAnaConvPdf::_codeReg! Registry of analytical integration codes; RooObjCacheManagerRooAbsAnaConvPdf::_coefNormMgrCoefficient normalization manager; RooArgSet*RooAbsAnaConvPdf::_convNormSet! Subset of last normalization that applies to convolutions; RooListProxyRooAbsAnaConvPdf::_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*RooAbsAnaConvPdf::_convSetIter! Iterator over _convNormSet; RooRealProxyRooAbsAnaConvPdf::_convVarConvolution variable; RooRealProxy_correctQ; RooRealProxy_delC; RooRealProxy_delS; RooRealProxy_delW; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooRealProxy_dm; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; Double_t_genB0Frac; Double_t_genRhoPlusFrac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealProxyRooAbsAnaConvPdf::_modelOriginal model; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNonCPEigenDecay.html:43084,access,access,43084,root/html534/RooNonCPEigenDecay.html,https://root.cern,https://root.cern/root/html534/RooNonCPEigenDecay.html,1,['access'],['access']
Security,"::cout << ""- doing optimizer update \n"";; 1515 ; 1516 // increment optimizer step that is used in some algorithms (e.g. ADAM); 1517 optimizer->IncrementGlobalStep();; 1518 optimizer->Step();; 1519 ; 1520#ifdef DEBUG; 1521 std::cout << ""minmimizer step - momentum "" << settings.momentum << "" learning rate "" << optimizer->GetLearningRate() << std::endl;; 1522 for (size_t l = 0; l < nlayers; ++l) {; 1523 if (deepNet.GetLayerAt(l)->GetWeights().size() > 0) {; 1524 Architecture_t::PrintTensor(deepNet.GetLayerAt(l)->GetWeightsAt(0),TString::Format(""weights after step layer %d"",l).Data());; 1525 Architecture_t::PrintTensor(deepNet.GetLayerAt(l)->GetWeightGradientsAt(0),""weight gradients"");; 1526 }; 1527 }; 1528#endif; 1529 ; 1530 }; 1531 ; 1532 if (debugFirstEpoch) std::cout << ""\n End batch loop - compute validation loss \n"";; 1533 //}; 1534 debugFirstEpoch = false;; 1535 if ((nTrainEpochs % settings.testInterval) == 0) {; 1536 ; 1537 std::chrono::time_point<std::chrono::system_clock> t1,t2;; 1538 ; 1539 t1 = std::chrono::system_clock::now();; 1540 ; 1541 // Compute validation error.; 1542 ; 1543 ; 1544 Double_t valError = 0.0;; 1545 bool inTraining = false;; 1546 for (auto batch : validationData) {; 1547 auto inputTensor = batch.GetInput();; 1548 auto outputMatrix = batch.GetOutput();; 1549 auto weights = batch.GetWeights();; 1550 // should we apply droput to the loss ??; 1551 valError += deepNet.Loss(inputTensor, outputMatrix, weights, inTraining, includeRegularization);; 1552 }; 1553 // normalize loss to number of batches and add regularization term; 1554 Double_t regTerm = (includeRegularization) ? deepNet.RegularizationTerm() : 0.0;; 1555 valError /= (Double_t)(nValidationSamples / settings.batchSize);; 1556 valError += regTerm;; 1557 ; 1558 //Log the loss value; 1559 fTrainHistory.AddValue(""valError"",nTrainEpochs,valError);; 1560 ; 1561 t2 = std::chrono::system_clock::now();; 1562 ; 1563 // checking for convergence; 1564 if (valError < minValError) {; 1565 convergenc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:61176,validat,validation,61176,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['validat'],['validation']
Security,"::move(variationTags), variationName);; 1116 }; 1117 ; 1118 /// \brief Register systematic variations for multiple existing columns using auto-generated variation tags.; 1119 /// \param[in] colNames set of names of the columns for which varied values are provided.; 1120 /// \param[in] expression a string containing valid C++ code that evaluates to an RVec or RVecs containing the varied; 1121 /// values for the specified columns.; 1122 /// \param[in] nVariations number of variations returned by the expression. The corresponding tags will be `""0""`,; 1123 /// `""1""`, etc. ; 1124 /// \param[in] variationName a generic name for this set of varied values, e.g. `""ptvariation""`.; 1125 ///; 1126 /// This overload adds the possibility for the expression used to evaluate the varied values to be just-in-time; 1127 /// compiled. It takes an nVariations parameter instead of a list of tag names.; 1128 /// The varied results will be accessible via the keys of the dictionary with the form `variationName:N` where `N`; 1129 /// is the corresponding sequential tag starting at 0 and going up to `nVariations - 1`.; 1130 /// The example below shows how Vary() is used while dealing with multiple columns.; 1131 ///; 1132 /// ~~~{.cpp}; 1133 /// auto nominal_hx =; 1134 /// df.Vary({""x"", ""y""}, ""ROOT::RVec<ROOT::RVecD>{{x*0.9, x*1.1}, {y*0.9, y*1.1}}"", 2, ""xy""); 1135 /// .Histo1D(""x"", ""y"");; 1136 ///; 1137 /// auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; 1138 /// hx[""nominal""].Draw();; 1139 /// hx[""xy:0""].Draw(""SAME"");; 1140 /// hx[""xy:1""].Draw(""SAME"");; 1141 /// ~~~; 1142 ///; 1143 /// \sa This Vary() overload for more information.; 1144 RInterface<Proxied, DS_t> Vary(const std::vector<std::string> &colNames, std::string_view expression,; 1145 std::size_t nVariations, std::string_view variationName); 1146 {; 1147 std::vector<std::string> variationTags;; 1148 variationTags.reserve(nVariations);; 1149 for (std::size_t i = 0u; i < nVariations; ++i); 1150 variationTags.emplace_ba",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:61757,access,accessible,61757,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['access'],['accessible']
Security,"::shared_ptr< RWebWindow > fMaster;  ! master window where this window is embedded ;  ; std::vector< MasterConn > fMasterConns;  ! master connections ;  ; unsigned fMaxQueueLength {10};  ! maximal number of queue entries ;  ; std::shared_ptr< RWebWindowsManager > fMgr;  ! display manager ;  ; bool fNativeOnlyConn {false};  ! only native connection are allowed, created by Show() method ;  ; float fOperationTmout {50.};  ! timeout in seconds to perform synchronous operation, default 50s ;  ; std::string fPanelName;  ! panel name which should be shown in the window ;  ; ConnectionsList_t fPendingConn;  ! list of pending connection with pre-assigned keys ;  ; bool fProcessMT {false};  ! if window event processing performed in dedicated thread ;  ; std::string fProtocol;  ! protocol ;  ; int fProtocolCnt {-1};  ! counter for protocol recording ;  ; unsigned fProtocolConnId {0};  ! connection id, which is used for writing protocol ;  ; std::string fProtocolFileName;  ! local file where communication protocol will be written ;  ; std::string fProtocolPrefix;  ! prefix for created files names ;  ; bool fRequireAuthKey {true};  ! defines if authentication key always required when connect to the widget ;  ; bool fSendMT {false};  ! true is special threads should be used for sending data ;  ; bool fUseCurrentDir {false};  ! if window can access local files via currentdir/ path of http server ;  ; bool fUseProcessEvents {false};  ! all window functionality will run through process events ;  ; std::string fUserArgs;  ! arbitrary JSON code, which is accessible via conn.getUserArgs() method ;  ; bool fUseServerThreads {false};  ! indicates that server thread is using, no special window thread ;  ; unsigned fWidth {0};  ; std::thread fWindowThrd;  ! special thread for that window ;  ; std::shared_ptr< RWebWindowWSHandler > fWSHandler;  ! specialize websocket handler for all incoming connections ;  ; int fX {-1};  ; int fY {-1};  ! initial window position, -1 ignored ;  . Static Priv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:20553,authenticat,authentication,20553,doc/v632/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html,6,"['access', 'authenticat']","['access', 'accessible', 'authentication']"
Security,"::vector< double > &nSigmas={0, 1, 2, -1, -2, std::numeric_limits< double >::quiet_NaN()}, double relUncert=0.1);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html:3580,hash,hash,3580,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooHypoSpace.html,1,['hash'],['hash']
Security,"::vector< double > &nSigmas={0, 1, 2, -1, -2, std::numeric_limits< double >::quiet_NaN()}, double relUncert=0.1);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html:3365,hash,hash,3365,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNLLVar_1_1xRooHypoSpace.html,1,['hash'],['hash']
Security,":; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » META; » TClass. class TClass: public TDictionary. The ROOT global object gROOT contains a list of all defined; classes. This list is build when a reference to a class dictionary; is made. When this happens, the static ""class""::Dictionary(); function is called to create a TClass object describing the; class. The Dictionary() function is defined in the ClassDef; macro and stored (at program startup or library load time) together; with the class name in the TClassTable singleton object.; For a description of all dictionary classes see TDictionary. The name of the class as registered in the TClass object and in the; list of class is the ""normalized name"" and is defined as:. The name of the type as accessible from the global scope to which; a 'using namespace std;' has been applied to and with:; - all typedefs desugared except for Double32_t, Float16_t,; Long64_t, ULong64_t and std::string.; - default template parameters removed for STL collections and; added for any other class templates instances.; - Fully qualified both for the class name itself and all of its; component, except that, at least for moment, all 'std::' are; stripped. Function Members (Methods); public:. virtual~TClass(); voidTObject::AbstractMethod(const char* method) const; static voidAddClass(TClass* cl); static voidAddClassToDeclIdMap(TDictionary::DeclId_t id, TClass* cl); voidAddImplFile(const char* filename, int line); voidAddInstance(Bool_t heap = kFALSE); static Bool_tAddRule(const char* rule); voidAdoptMemberStreamer(const char* name, TMemberStreamer* strm); voidAdoptReferenceProxy(TVirtualRefProxy* proxy); voidAdoptSchemaRules(ROOT::TSchemaRuleSet* rules); voidAdoptStreamer(TClassStreamer* strm); virtual voidTObject::AppendPad(Option_t* option = """"); static Int_tAutoBrowse(TObject* obj,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TClass.html:936,access,accessible,936,root/html604/TClass.html,https://root.cern,https://root.cern/root/html604/TClass.html,1,['access'],['accessible']
Security,:DeclId_tconst void * DeclId_tDefinition TDictionary.h:224; TFunctionTemplateDictionary for function template This class describes one single function template.Definition TFunctionTemplate.h:26; THashTableTHashTable implements a hash table to store TObject's.Definition THashTable.h:35; TListOfDataMembersA collection of TDataMember objects designed for fast access given a DeclId_t and for keep track of T...Definition TListOfDataMembers.h:33; TListOfEnumsA collection of TEnum objects designed for fast access given a DeclId_t and for keep track of TEnum t...Definition TListOfEnums.h:33; TListOfFunctionTemplatesA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFu...Definition TListOfFunctionTemplates.h:35; TListOfFunctionsA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFu...Definition TListOfFunctions.h:35; TListA doubly linked list.Definition TList.h:38; TMemberInspectorAbstract base class for accessing the data-members of a class.Definition TMemberInspector.h:31; TMemberStreamerDefinition TMemberStreamer.h:26; TMethodCallMethod or function calling interface.Definition TMethodCall.h:37; TMethodEach ROOT class (see TClass) has a linked list of methods.Definition TMethod.h:38; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Dumpvirtual void Dump() constDump contents of object on stdout.Definition TObject.cxx:348; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TProtoClassPersistent version of a TClass.Definition TProtoClass.h:38; TRealDataThe TRealData class manages the effective list of all data members for a given class.Definition TRealData.h:30; TStreamerInfoDescribes a persistent version of a class.Definition TStreamerInfo.h:39; TStringBasic string class.Definition TString.h:139; TViewPubDataMembersView implementing the TList interface and giving access,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8h_source.html:82228,access,accessing,82228,doc/v632/TClass_8h_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8h_source.html,1,['access'],['accessing']
Security,:DeclId_tconst void * DeclId_tDefinition TDictionary.h:224; TFunctionTemplateDictionary for function template This class describes one single function template.Definition TFunctionTemplate.h:26; THashTableTHashTable implements a hash table to store TObject's.Definition THashTable.h:35; TListOfDataMembersA collection of TDataMember objects designed for fast access given a DeclId_t and for keep track of T...Definition TListOfDataMembers.h:33; TListOfEnumsA collection of TEnum objects designed for fast access given a DeclId_t and for keep track of TEnum t...Definition TListOfEnums.h:33; TListOfFunctionTemplatesA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFu...Definition TListOfFunctionTemplates.h:35; TListOfFunctionsA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFu...Definition TListOfFunctions.h:35; TListA doubly linked list.Definition TList.h:38; TMemberInspectorAbstract base class for accessing the data-members of a class.Definition TMemberInspector.h:31; TMemberStreamerDefinition TMemberStreamer.h:26; TMethodCallMethod or function calling interface.Definition TMethodCall.h:37; TMethodEach ROOT class (see TClass) has a linked list of methods.Definition TMethod.h:38; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Dumpvirtual void Dump() constDump contents of object on stdout.Definition TObject.cxx:353; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TProtoClassPersistent version of a TClass.Definition TProtoClass.h:38; TRealDataThe TRealData class manages the effective list of all data members for a given class.Definition TRealData.h:30; TStreamerInfoDescribes a persistent version of a class.Definition TStreamerInfo.h:39; TStringBasic string class.Definition TString.h:139; TViewPubDataMembersView implementing the TList interface and giving access,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8h_source.html:82056,access,accessing,82056,doc/master/TClass_8h_source.html,https://root.cern,https://root.cern/doc/master/TClass_8h_source.html,1,['access'],['accessing']
Security,":Detail::TCollectionProxyInfo Class Reference. . Definition at line 57 of file TCollectionProxyInfo.h. Classes; struct  Address;  ; struct  Address< std::vector< Bool_t, A > >;  ; class  Environ;  Small helper to save proxy environment in the event of recursive calls. More...;  ; struct  EnvironBase;  ; class  Insert;  Small helper to encapsulate all necessary data accesses for containers like set, multiset etc. More...;  ; class  Iterators;  Small helper to implement the function to create,access and destroy iterators. More...;  ; struct  Iterators< Cont_t, true >;  ; struct  Iterators< std::vector< T >, false >;  ; class  IteratorValue;  Small helper to encapsulate whether to return the value pointed to by the iterator or its address. More...;  ; struct  IteratorValue< Cont_t, value_ptr * >;  ; class  MapInsert;  Small helper to encapsulate all necessary data accesses for containers like set, multiset etc. More...;  ; struct  PairHolder;  ; class  Pushback;  Small helper to encapsulate all necessary data accesses for containers like vector, list, deque. More...;  ; struct  Pushback< Internal::TStdBitsetHelper< Bitset_t > >;  ; struct  Pushback< std::vector< Bool_t, A > >;  ; class  Pushfront;  Small helper to encapsulate all necessary data accesses for containers like forward_list. More...;  ; struct  SfinaeHelper;  ; class  Type;  Small helper to encapsulate basic data accesses for all STL continers. More...;  ; struct  Type< Internal::TStdBitsetHelper< Bitset_t > >;  ; struct  Type< std::vector< Bool_t, A > >;  . Public Member Functions;  TCollectionProxyInfo (const std::type_info &info, size_t iter_size, size_t value_diff, int value_offset, void *(*size_func)(void *), void(*resize_func)(void *, size_t), void *(*clear_func)(void *), void *(*first_func)(void *), void *(*next_func)(void *), void *(*construct_func)(void *, size_t), void(*destruct_func)(void *, size_t), void *(*feed_func)(void *, void *, size_t), void *(*collect_func)(void *, void *), void *(*create",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Detail_1_1TCollectionProxyInfo.html:1334,access,accesses,1334,doc/master/classROOT_1_1Detail_1_1TCollectionProxyInfo.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1TCollectionProxyInfo.html,1,['access'],['accesses']
Security,":Detail::TCollectionProxyInfo::Environ< char[64]> Env_t;  ; typedef ROOT::Detail::TCollectionProxyInfo::EnvironBase EnvironBase_t;  ; typedef void *(* Feedfunc_t) (void *from, void *to, size_t size);  ; typedef std::vector< EnvironBase_t * > Proxies_t;  ; typedef void(* Sizing_t) (void *obj, size_t size);  ; typedef std::vector< TStaging * > Staged_t;  Collection of pre-allocated staged array for associative containers. ;  . Protected Member Functions; void CheckFunctions () const;  Check existence of function pointers. ;  ; virtual void DeleteItem (Bool_t force, void *ptr) const;  Call to delete/destruct individual item. ;  ; TGenCollectionProxy * Initialize (Bool_t silent) const;  Proxy initializer. ;  ; virtual TGenCollectionProxy * InitializeEx (Bool_t silent);  Proxy initializer. ;  . Protected Attributes; Method fClear;  Method cache for container accessors: clear container. ;  ; Collectfunc_t fCollect;  Method to collect objects from container. ;  ; ArrIterfunc_t fConstruct;  Container accessors: block construct. ;  ; std::map< std::string, TObjArray * > * fConversionReadMemberWise;  Array of bundle of TStreamerInfoActions to stream out (read) derived from another class. ;  ; Method0 fCreateEnv;  Method to allocate an Environment holder. ;  ; Sizing_t fDestruct;  Container accessors: block destruct. ;  ; EnvironBase_t * fEnv;  Address of the currently proxied object. ;  ; Feedfunc_t fFeed;  Container accessors: block feed. ;  ; Method fFirst;  Container accessors: generic iteration: first. ;  ; CopyIterator_t fFunctionCopyIterator;  ; CreateIterators_t fFunctionCreateIterators;  ; DeleteIterator_t fFunctionDeleteIterator;  ; DeleteTwoIterators_t fFunctionDeleteTwoIterators;  ; Next_t fFunctionNextIterator;  ; Value * fKey;  Descriptor of the key_type. ;  ; std::string fName;  Name of the class being proxied. ;  ; Method fNext;  Container accessors: generic iteration: next. ;  ; TClass * fOnFileClass;  On file class. ;  ; Bool_t fPointers;  Flag to indicate if",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenCollectionProxy.html:10109,access,accessors,10109,doc/master/classTGenCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTGenCollectionProxy.html,1,['access'],['accessors']
Security,":Detail::TCollectionProxyInfo::Pushback::resizestatic void resize(void *obj, size_t n)Definition TCollectionProxyInfo.h:381; ROOT::Detail::TCollectionProxyInfo::Pushback::feedstatic void * feed(void *from, void *to, size_t size)Definition TCollectionProxyInfo.h:385; ROOT::Detail::TCollectionProxyInfo::Pushback::Iter_tT::iterator Iter_tDefinition TCollectionProxyInfo.h:375; ROOT::Detail::TCollectionProxyInfo::Pushback::PEnv_tEnv_t * PEnv_tDefinition TCollectionProxyInfo.h:378; ROOT::Detail::TCollectionProxyInfo::Pushback::Value_tT::value_type Value_tDefinition TCollectionProxyInfo.h:376; ROOT::Detail::TCollectionProxyInfo::Pushback::Env_tEnviron< Iter_t > Env_tDefinition TCollectionProxyInfo.h:377; ROOT::Detail::TCollectionProxyInfo::Pushback::PCont_tCont_t * PCont_tDefinition TCollectionProxyInfo.h:379; ROOT::Detail::TCollectionProxyInfo::Pushback::value_offsetstatic int value_offset()Definition TCollectionProxyInfo.h:392; ROOT::Detail::TCollectionProxyInfo::PushfrontSmall helper to encapsulate all necessary data accesses for containers like forward_list.Definition TCollectionProxyInfo.h:406; ROOT::Detail::TCollectionProxyInfo::Pushfront::PValue_tValue_t * PValue_tDefinition TCollectionProxyInfo.h:413; ROOT::Detail::TCollectionProxyInfo::Pushfront::Cont_tT Cont_tDefinition TCollectionProxyInfo.h:407; ROOT::Detail::TCollectionProxyInfo::Pushfront::Value_tT::value_type Value_tDefinition TCollectionProxyInfo.h:409; ROOT::Detail::TCollectionProxyInfo::Pushfront::PCont_tCont_t * PCont_tDefinition TCollectionProxyInfo.h:412; ROOT::Detail::TCollectionProxyInfo::Pushfront::resizestatic void resize(void *obj, size_t n)Definition TCollectionProxyInfo.h:414; ROOT::Detail::TCollectionProxyInfo::Pushfront::value_offsetstatic int value_offset()Definition TCollectionProxyInfo.h:428; ROOT::Detail::TCollectionProxyInfo::Pushfront::Iter_tT::iterator Iter_tDefinition TCollectionProxyInfo.h:408; ROOT::Detail::TCollectionProxyInfo::Pushfront::feedstatic void * feed(void *from, void *to, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollectionProxyInfo_8h_source.html:46929,access,accesses,46929,doc/master/TCollectionProxyInfo_8h_source.html,https://root.cern,https://root.cern/doc/master/TCollectionProxyInfo_8h_source.html,1,['access'],['accesses']
Security,":EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TListfCallArgs! submitted arguments; TStringfDefaultPage! file name for default page name; TStringfDefaultPageCont! content of the file content; TStringfDrawPage! file name for drawing of single element; TStringfDrawPageCont! content of draw page; TListfEngines! engines which runs http server; TStringfJSROOT! location of external JSROOT files; TStringfJSROOTSYS! location of local JSROOT files; TListfLocations! list of local directories, which could be accessed via server; Long_tfMainThrdId! id of the main ROOT process; TMutexfMutex! mutex to protect list with arguments; TStringTNamed::fNameobject identifier; TRootSniffer*fSniffer! sniffer provides access to ROOT objects hierarchy; THttpTimer*fTimer! timer used to access main thread; TStringTNamed::fTitleobject title; TStringfTopName! name of top folder, default - ""ROOT"". Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THttpServer(const char* engine = ""civetweb:8080""); constructor. ~THttpServer(); destructor; delete all http engines and sniffer. void SetSniffer(TRootSniffer* sniff); Set TRootSniffer to the server; Server takes ownership over sniffer. Bool_t IsReadOnly() const; returns read-only mode. void SetReadOnly(Bool_t readonly); Set read-only mode for the server (default on); In read-only server is not allowed to change any ROOT object, registered to the server; Server also cannot execute objects",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/THttpServer.html:7751,access,accessed,7751,root/html604/THttpServer.html,https://root.cern,https://root.cern/root/html604/THttpServer.html,3,['access'],"['access', 'accessed']"
Security,":Fitterstatic TVirtualFitter * Fitter(TObject *obj, Int_t maxpar=25)Static function returning a pointer to the current fitter.Definition TVirtualFitter.cxx:159; where MyFittingFunction is of type: extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; f#define f(i)Definition RSha256.hxx:104. Access to the fit result; The function returns a TFitResultPtr which can hold a pointer to a TFitResult object. By default the TFitResultPtr contains only the status of the fit and it converts automatically to an integer. If the option ""S"" is instead used, TFitResultPtr contains the TFitResult and behaves as a smart pointer to it. For example one can do: TFitResultPtr r = graph->Fit(""myFunc"",""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t par0 = r->Parameter(0); // retrieve the value for the parameter 0; Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; TMatrixTSym< Double_t >; The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also from the fitted function. Associated functions; One or more object (typically a TF1*) can be added to the list of functions (fFunctions) associated to each graph. When TGraph::Fit is invoked, the fitted function is added to this list. Given a graph gr, one can retrieve an associated function with: TF1 *myfunc = gr->GetFunction(""myfunc"");; TGraph::GetFunctionTF1 * GetFunction(const char *name) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiGraph.html:34284,access,access,34284,doc/master/classTMultiGraph.html,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html,1,['access'],['access']
Security,":FlexibleInterpVarFlexibleInterpVar(const RooStats::HistFactory::FlexibleInterpVar&); RooStats::HistFactory::FlexibleInterpVarFlexibleInterpVar(const char* name, const char* title); RooStats::HistFactory::FlexibleInterpVarFlexibleInterpVar(const RooStats::HistFactory::FlexibleInterpVar&, const char*); RooStats::HistFactory::FlexibleInterpVarFlexibleInterpVar(const char* name, const char* title, const RooArgList& _paramList, Double_t nominal, const RooArgList& low, const RooArgList& high); RooStats::HistFactory::FlexibleInterpVarFlexibleInterpVar(const char* name, const char* title, const RooArgList& _paramList, double nominal, vector<double> low, vector<double> high); RooStats::HistFactory::FlexibleInterpVarFlexibleInterpVar(const char* name, const char* title, const RooArgList& _paramList, double nominal, vector<double> low, vector<double> high, vector<int> code); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); virtual Bool_tRooAbsReal::forceAnalyticalInt(const RooAbsArg&) const; virtual voidRooAbsReal::forceNumInt(Bool_t flag = kTRUE); RooFunctor*RooAbsReal::functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; virtual Int_tRooAbsReal::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; virtual Int_tRooAbsReal::getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Bool_tRooAbsArg::getAttribute(const Text_t* name) const; RooAbsCache*RooAbsArg::getCache(Int_t index) const; RooLinkedListRooAbsArg::getCloningAncestors() const; RooArgSet*RooAbsArg::getComponents() const; RooArgSet*RooAbsArg::getDependents(const RooArgSet& set) const; RooArgSet*RooAbsArg::ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__FlexibleInterpVar.html:12667,hash,hash,12667,root/html602/RooStats__HistFactory__FlexibleInterpVar.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__FlexibleInterpVar.html,2,['hash'],['hash']
Security,":Format():; 519 lines.emplace_back(TString::Format(""Welcome to ROOT %s%%shttps://root.cern"",; 520 gROOT->GetVersion()));; 521 lines.emplace_back(TString::Format(""(c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers%%s""));; 522 lines.emplace_back(TString::Format(""Built for %s on %s%%s"", gSystem->GetBuildArch(), gROOT->GetGitDate()));; 523 if (!strcmp(gROOT->GetGitBranch(), gROOT->GetGitCommit())) {; 524 static const char *months[] = {""January"",""February"",""March"",""April"",""May"",; 525 ""June"",""July"",""August"",""September"",""October"",; 526 ""November"",""December""};; 527 Int_t idatqq = gROOT->GetVersionDate();; 528 Int_t iday = idatqq%100;; 529 Int_t imonth = (idatqq/100)%100;; 530 Int_t iyear = (idatqq/10000);; 531 ; 532 lines.emplace_back(TString::Format(""From tag %s, %d %s %4d%%s"",; 533 gROOT->GetGitBranch(),; 534 iday,months[imonth-1],iyear));; 535 } else {; 536 // If branch and commit are identical - e.g. ""v5-34-18"" - then we have; 537 // a release build. Else specify the git hash this build was made from.; 538 lines.emplace_back(TString::Format(""From %s@%s %%s"",; 539 gROOT->GetGitBranch(),; 540 gROOT->GetGitCommit()));; 541 }; 542 lines.emplace_back(TString::Format(""With %s %%s"",; 543 gSystem->GetBuildCompilerVersionStr()));; 544 lines.emplace_back(TString(""Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q'%s""));; 545 ; 546 // Find the longest line and its length:; 547 auto itLongest = std::max_element(lines.begin(), lines.end(),; 548 [](const TString& left, const TString& right) {; 549 return left.Length() < right.Length(); });; 550 Ssiz_t lenLongest = itLongest->Length();; 551 ; 552 ; 553 Printf("" %s"", TString('-', lenLongest).Data());; 554 for (const auto& line: lines) {; 555 // Print the line, expanded with the necessary spaces at %s, and; 556 // surrounded by some ASCII art.; 557 Printf("" | %s |"",; 558 TString::Format(line.Data(),; 559 TString(' ', lenLongest - line.Length()).Data()).Data());; 560 }; 561 Printf("" %s\n"", TString('-', lenLonges",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRint_8cxx_source.html:18813,hash,hash,18813,doc/master/TRint_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TRint_8cxx_source.html,1,['hash'],['hash']
Security,":GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTDataSetManager::MonitorUsedSpace(TVirtualMonitoringWriter* monitoring); virtual Bool_tTObject::Notify(); virtual Int_tNotifyUpdate(const char* group, const char* user, const char* dspath, Long_t mtime, const char* checksum = 0); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); static TList*TDataSetManager::ParseDataSetSrvMaps(const TString& srvmaps); virtual voidParseInitOpts(const char* opts); Bool_tTDataSetManager::ParseUri(const char* uri, TString* dsGroup = 0, TString* dsUser = 0, TString* dsName = 0, TString* dsTree = 0, Bool_t onlyCurrent = kFALSE, Bool_t wildcards = kFALSE); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDataSetManagerFile.html:4533,checksum,checksum,4533,root/html528/TDataSetManagerFile.html,https://root.cern,https://root.cern/root/html528/TDataSetManagerFile.html,1,['checksum'],['checksum']
Security,":GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTDataSetManager::MonitorUsedSpace(TVirtualMonitoringWriter* monitoring); virtual Bool_tTObject::Notify(); virtual Int_tNotifyUpdate(const char* group, const char* user, const char* dspath, Long_t mtime, const char* checksum = 0); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); static TList*TDataSetManager::ParseDataSetSrvMaps(const TString& srvmaps); virtual voidParseInitOpts(const char* opts); Bool_tTDataSetManager::ParseUri(const char* uri, TString* dsGroup = 0, TString* dsUser = 0, TString* dsName = 0, TString* dsTree = 0, Bool_t onlyCurrent = kFALSE, Bool_t wildcards = kFALSE); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TDataSetManagerFile.html:4533,checksum,checksum,4533,root/html530/TDataSetManagerFile.html,https://root.cern,https://root.cern/root/html530/TDataSetManagerFile.html,3,['checksum'],['checksum']
Security,":GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTDataSetManager::MonitorUsedSpace(TVirtualMonitoringWriter* monitoring); virtual Bool_tTObject::Notify(); virtual Int_tNotifyUpdate(const char* group, const char* user, const char* dspath, Long_t mtime, const char* checksum = 0); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TDataSetManagerFile&operator=(const TDataSetManagerFile&); virtual voidTObject::Paint(Option_t* option = """"); static TList*TDataSetManager::ParseDataSetSrvMaps(const TString& srvmaps); virtual voidParseInitOpts(const char* opts); Bool_tTDataSetManager::ParseUri(const char* uri, TString* dsGroup = 0, TString* dsUser = 0, TString* dsName = 0, TString* dsTree = 0, Bool_t onlyCurrent = kFALSE, Bool_t wildcards = kFALSE); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; static voidTData",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDataSetManagerFile.html:4661,checksum,checksum,4661,root/html602/TDataSetManagerFile.html,https://root.cern,https://root.cern/root/html602/TDataSetManagerFile.html,2,['checksum'],['checksum']
Security,":InVolume ; (; const std::vector< Float_t > & ; event, . Volume * ; volume . ); const. private . test if the data points are in the given volume ; Definition at line 415 of file BinarySearchTree.cxx. ◆ IsA(). virtual TClass * TMVA::BinarySearchTree::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::BinaryTree.; Definition at line 173 of file BinarySearchTree.h. ◆ Max(). Float_t TMVA::BinarySearchTree::Max ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to Maximum for signal and background for each variable ; Definition at line 128 of file BinarySearchTree.h. ◆ Mean(). Float_t TMVA::BinarySearchTree::Mean ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to mean for signal and background for each variable ; Definition at line 119 of file BinarySearchTree.h. ◆ Min(). Float_t TMVA::BinarySearchTree::Min ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to Minimum for signal and background for each variable ; Definition at line 125 of file BinarySearchTree.h. ◆ NormalizeTree() [1/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; ). Normalisation of tree. ; Definition at line 343 of file BinarySearchTree.cxx. ◆ NormalizeTree() [2/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; leftBound, . std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; rightBound, . UInt_t ; actDim . ). private . normalises the binary-search tree to reduce the branch length and hence speed up the search procedure (on average). ; Definition at line 286 of file BinarySearchTree.cxx. ◆ RMS() [1/2]. Float_t TMVA::BinarySearchTree::RMS ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to RMS for signal and background for each variable ; Definition at line 122 of file BinarySearchTree.h. ◆ RMS() [2/2]. Float_t TMVA::BinarySearchTree::RMS ; (; UInt_t ; var). inline . access to RMS for each variable ; Definition at ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:12837,access,access,12837,doc/master/classTMVA_1_1BinarySearchTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html,1,['access'],['access']
Security,":IsCallingNew(). void * NewArray(Long_t nElements, void* arena, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void Destructor(void* obj, Bool_t dtorOnly = kFALSE); Explicitly call destructor for object. void DeleteArray(void* ary, Bool_t dtorOnly = kFALSE); Explicitly call operator delete[] for an array. void SetCanSplit(Int_t splitmode); Set the splitability of this class:; -1: Use the default calculation; 0: Disallow splitting; 1: Always allow splitting. void SetClassVersion(Version_t version); Private function. Set the class version for the 'class' represented by; this TClass object. See the public interface:; ROOT::ResetClassVersion; defined in TClassTable.cxx. Note on class version numbers:; If no class number has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specified via ClassDef indicates that the; I/O should use the TClass checksum to distinguish the layout of the class. TVirtualStreamerInfo* DetermineCurrentStreamerInfo(); Determine and set pointer to current TVirtualStreamerInfo. void SetCurrentStreamerInfo(TVirtualStreamerInfo* info); Set pointer to current TVirtualStreamerInfo. Int_t Size() const; Return size of object of this class. TClass * Load(TBuffer& b); Load class description from I/O buffer and return class object. TClass * LoadClass(const char* requestedname, Bool_t silent); Helper function used by TClass::GetClass().; This function attempts to load the dictionary for 'classname'; either from the TClassTable or from the list of generator.; If silent is 'true', do not warn about missing dictionary for the class.; (typically used for class that are used only for transient members). The 'requestedname' is expected to be already normalized. TClass * LoadClassDefault(const char* requestedn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClass.html:51310,checksum,checksum,51310,root/html602/TClass.html,https://root.cern,https://root.cern/root/html602/TClass.html,2,['checksum'],['checksum']
Security,":IsCallingNew(). void * NewArray(Long_t nElements, void* arena, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void Destructor(void* obj, Bool_t dtorOnly = kFALSE); Explicitly call destructor for object. void DeleteArray(void* ary, Bool_t dtorOnly = kFALSE); Explicitly call operator delete[] for an array. void SetCanSplit(Int_t splitmode); Set the splitability of this class:; -1: Use the default calculation; 0: Disallow splitting; 1: Always allow splitting. void SetClassVersion(Version_t version); Private function. Set the class version for the 'class' represented by; this TClass object. See the public interface:; ROOT::ResetClassVersion; defined in TClassTable.cxx. Note on class version numbers:; If no class number has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specified via ClassDef indicates that the; I/O should use the TClass checksum to distinguish the layout of the class. TVirtualStreamerInfo* DetermineCurrentStreamerInfo(); Determine and set pointer to current TVirtualStreamerInfo. void SetCurrentStreamerInfo(TVirtualStreamerInfo* info); Set pointer to current TVirtualStreamerInfo. Int_t Size() const; Return size of object of this class. TClass * Load(TBuffer& b); Load class description from I/O buffer and return class object. void Store(TBuffer& b) const; Store class description on I/O buffer. Bool_t IsLoaded() const; Return true if the shared library of this class is currently in the a; process's memory. Return false, after the shared library has been; unloaded or if this is an 'emulated' class created from a file's StreamerInfo. Bool_t IsStartingWithTObject() const; Returns true if this class inherits from TObject and if the start of; the TObject parts is at the very beginning of the objects.; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TClass.html:39349,checksum,checksum,39349,root/html534/TClass.html,https://root.cern,https://root.cern/root/html534/TClass.html,1,['checksum'],['checksum']
Security,":IsCallingNew(). void * NewArray(Long_t nElements, void* arena, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void Destructor(void* obj, Bool_t dtorOnly = kFALSE); Explicitly call destructor for object. void DeleteArray(void* ary, Bool_t dtorOnly = kFALSE); Explicitly call operator delete[] for an array. void SetCanSplit(Int_t splitmode); Set the splitability of this class:; -1: Use the default calculation; 0: Disallow splitting; 1: Always allow splitting. void SetClassVersion(Version_t version); Private function. Set the class version for the 'class' represented by; this TClass object. See the public interface:; ROOT::ResetClassVersion; defined in TClassTable.cxx. Note on class version numbers:; If no class number has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specified via ClassDef indicates that the; I/O should use the TClass checksum to distinguish the layout of the class. void SetCurrentStreamerInfo(TVirtualStreamerInfo* info); Set pointer to current TVirtualStreamerInfo. Int_t Size() const; Return size of object of this class. TClass * Load(TBuffer& b); Load class description from I/O buffer and return class object. void Store(TBuffer& b) const; Store class description on I/O buffer. Bool_t IsLoaded() const; Return true if the shared library of this class is currently in the a; process's memory. Return false, after the shared library has been; unloaded or if this is an 'emulated' class created from a file's StreamerInfo. Bool_t IsStartingWithTObject() const; Returns true if this class inherits from TObject and if the start of; the TObject parts is at the very beginning of the objects.; Concretly this means that the following code is proper for this class:; ThisClass *ptr;; void *void_ptr = (void)p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TClass.html:37233,checksum,checksum,37233,root/html530/TClass.html,https://root.cern,https://root.cern/root/html530/TClass.html,2,['checksum'],['checksum']
Security,":MCMCInterval::SetChain ; (; MarkovChain & ; chain). inlinevirtual . Set the MarkovChain that this interval is based on. ; Definition at line 93 of file MCMCInterval.h. ◆ SetConfidenceLevel(). void MCMCInterval::SetConfidenceLevel ; (; double ; cl). overridevirtual . set the desired confidence level (see GetActualConfidenceLevel()) Note: calling this function triggers the algorithm that determines the interval, so call this after initializing all other aspects of this IntervalCalculator Also, calling this function again with a different confidence level re-triggers the calculation of the interval ; Implements RooStats::ConfInterval.; Definition at line 226 of file MCMCInterval.cxx. ◆ SetDelta(). virtual void RooStats::MCMCInterval::SetDelta ; (; double ; delta). inlinevirtual . kbelasco: The inner-workings of the class really should not be exposed like this in a comment, but it seems to be the only way to give the user any control over this process, if they desire it ; Set the fraction delta such that topCutoff (a) is considered == bottomCutoff (b) iff (std::abs(a - b) < std::abs(fDelta * (a + b)/2)) when determining the confidence interval by Keys ; Definition at line 264 of file MCMCInterval.h. ◆ SetEpsilon(). virtual void RooStats::MCMCInterval::SetEpsilon ; (; double ; epsilon). inlinevirtual . set the acceptable level or error for Keys interval determination ; Definition at line 229 of file MCMCInterval.h. ◆ SetHistStrict(). virtual void RooStats::MCMCInterval::SetHistStrict ; (; bool ; isHistStrict). inlinevirtual . whether the specified confidence level is a floor for the actual confidence level (strict), or a ceiling (not strict) ; Definition at line 82 of file MCMCInterval.h. ◆ SetIntervalType(). virtual void RooStats::MCMCInterval::SetIntervalType ; (; enum IntervalType ; intervalType). inlinevirtual . Set the type of interval to find. ; This will only have an effect for 1-D intervals. If is more than 1 parameter of interest, then a ""shortest"" interval will",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MCMCInterval.html:37252,expose,exposed,37252,doc/master/classRooStats_1_1MCMCInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MCMCInterval.html,1,['expose'],['exposed']
Security,":Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& c) const. get internal data into 3 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c); }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar* dest) const. get internal data into a C-style array of 3 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. bool operator==(const ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const. Scalar X() const; ------ Individual element access, in various coordinate systems ------. Cartesian X, converting if necessary from internal coordinate system. { return fCoordinates.X(); }. Scalar Y() const. Cartesian Y, converting if necessary from internal coordinate system. { return fCoordinates.Y(); }. Scalar Z() const. Cartesian Z, converting if necessary from internal coordinate system. { return fCoordinates.Z(); }. Scalar R() const. Polar R, converting if necessary from internal coordinate system. { return fCoordinates.R(); }. Scalar Theta() const. Polar theta, converting if necessary from internal coordinate system. { return fCoordinates.Theta(); }. Scalar Phi() const. Polar phi, converting if necessary from internal coordinate system. { return fCoordinates.Phi(); }. Scalar Eta() const. Polar eta, converting if necessary from internal coordinate system. { return fCoordinates.Eta(); }. Scalar Rho() const. Cylindrical transverse component rho. { return fCoordinates.Rho(); }. Scalar Mag2() const; ----- Other fundamental pro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:14100,access,access,14100,root/html526/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,5,['access'],['access']
Security,":Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar* dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html:14902,access,access,14902,root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,8,['access'],"['access', 'accessors']"
Security,":Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar* dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html:14164,access,access,14164,root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html,8,['access'],"['access', 'accessors']"
Security,":Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). Set internal data based on 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector. void GetCoordinates(ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& b) const. get internal data into 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector. { fCoordinates.GetCoordinates(a, b); }. bool operator==(const ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const. Scalar X() const; ------ Individual element access, in various coordinate systems ------. Cartesian X, converting if necessary from internal coordinate system. { return fCoordinates.X(); }. Scalar Y() const. Cartesian Y, converting if necessary from internal coordinate system. { return fCoordinates.Y(); }. Scalar R() const. Polar R, converting if necessary from internal coordinate system. { return fCoordinates.R(); }. Scalar Phi() const. Polar phi, converting if necessary from internal coordinate system. { return fCoordinates.Phi(); }. Scalar Mag2() const; ----- Other fundamental properties -----. Magnitute squared ( r^2 in spherical coordinate). { return fCoordinates.Mag2();}. DisplacementVector2D Unit() const. return unit vector parallel to this. DisplacementVector2D<CoordSystem, Tag>& SetX(ROOT::Math::DisplacementVector2D<ROOT::Math::Polar2D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a); ------ Setting individual elements present in coordinate system ------. Change X - Cartesian2D coordinates only. DisplacementVe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__DisplacementVector2D_-p1Polar2D_double__-p1DefaultCoordinateSystemTag_.html:9375,access,access,9375,root/html526/ROOT__Math__DisplacementVector2D_-p1Polar2D_double__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__DisplacementVector2D_-p1Polar2D_double__-p1DefaultCoordinateSystemTag_.html,9,['access'],['access']
Security,":MethodBase::fNbinsHnumber of bins in evaluation histograms; TObjArray*fNetworkTObjArray of TObjArrays representing network; TMVA::TActivation*fOutputactivation function to be used for output layers, depending on estimator; Int_tfRandomSeedrandom seed for initial synapse weights; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; vector<Int_t>fRegulatorIdxindex to different priors from every synapses; vector<Double_t>fRegulatorsthe priors as regulator; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class; TObjArray*fSynapsesarray of pointers to synapses, no structural data; boolfUseRegulatorzjh; TRandom3*frgenrandom number generator for various uses. private:. TObjArray*fInputLayercache this for fast access; TStringfLayerSpeclayout specification option; Int_tfNcyclesnumber of epochs to train; TStringfNeuronInputTypename of neuron input calculator class; TStringfNeuronTypename of neuron activation function class; vector<TNeuron*>fOutputNeuronscache this for fast access; static const Bool_tfgDEBUGdebug flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void DeclareOptions(); define the options (their key words) that can be set in the option string; here the options valid for ALL MVA methods are declared.; know options: NCycles=xx :the number of training cycles; Normalize=kTRUE,kFALSe :if normalised in put variables should be used; HiddenLayser=""N-1,N-2"" :the specification of the hidden layers; NeuronType=sigmoid,tanh,radial,linar : the type of activation function; used at the neuronn. void ProcessOptions(); do nothing specific at this moment. vector<Int_t>* ParseLayoutString(TString layerSpec); parse layout specification string and return a vector, each entry; containing the number of neurons to go in each successive layer. void InitANNBase(); initialize ANNBase object. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodANNBase.html:17658,access,access,17658,root/html528/TMVA__MethodANNBase.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodANNBase.html,2,['access'],['access']
Security,":PtEtaPhiE4D<Double32_t> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<Double32_t> >::Scalar* dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<Double32_t> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<Double32_t> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<Double32_t> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<Double32_t> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<Double32_t> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<Double32_t> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html:13059,access,access,13059,root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,8,['access'],"['access', 'accessors']"
Security,":PtEtaPhiM4D<Double32_t> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<Double32_t> >::Scalar* dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<Double32_t> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<Double32_t> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<Double32_t> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<Double32_t> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<Double32_t> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<Double32_t> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html:13059,access,access,13059,root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,8,['access'],"['access', 'accessors']"
Security,":RInferredType, typename EYH = RDFDetail::RInferredType>; 2277 RResultPtr<::TGraphAsymmErrors>; 2278 GraphAsymmErrors(std::string_view x = """", std::string_view y = """", std::string_view exl = """",; 2279 std::string_view exh = """", std::string_view eyl = """", std::string_view eyh = """"); 2280 {; 2281 auto graph = std::make_shared<::TGraphAsymmErrors>();; 2282 const std::vector<std::string_view> columnViews = {x, y, exl, exh, eyl, eyh};; 2283 const auto userColumns = RDFInternal::AtLeastOneEmptyString(columnViews); 2284 ? ColumnNames_t(); 2285 : ColumnNames_t(columnViews.begin(), columnViews.end());; 2286 ; 2287 const auto validatedColumns = GetValidatedColumnNames(6, userColumns);; 2288 ; 2289 // We build a default name and title based on the input columns; 2290 const auto g_name = validatedColumns[1] + ""_vs_"" + validatedColumns[0];; 2291 const auto g_title = validatedColumns[1] + "" vs "" + validatedColumns[0];; 2292 graph->SetNameTitle(g_name.c_str(), g_title.c_str());; 2293 graph->GetXaxis()->SetTitle(validatedColumns[0].c_str());; 2294 graph->GetYaxis()->SetTitle(validatedColumns[1].c_str());; 2295 ; 2296 return CreateAction<RDFInternal::ActionTags::GraphAsymmErrors, X, Y, EXL, EXH, EYL, EYH>(validatedColumns, graph,; 2297 graph, fProxiedPtr);; 2298 }; 2299 ; 2300 ////////////////////////////////////////////////////////////////////////////; 2301 /// \brief Fill and return a one-dimensional profile (*lazy action*).; 2302 /// \tparam V1 The type of the column the values of which are used to fill the profile. Inferred if not present.; 2303 /// \tparam V2 The type of the column the values of which are used to fill the profile. Inferred if not present.; 2304 /// \param[in] model The model to be considered to build the new return value.; 2305 /// \param[in] v1Name The name of the column that will fill the x axis.; 2306 /// \param[in] v2Name The name of the column that will fill the y axis.; 2307 /// \return the monodimensional profile wrapped in a RResultPtr.; 2308 ///; 2309 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:128690,validat,validatedColumns,128690,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['validat'],['validatedColumns']
Security,":RebinTHnSparse * Rebin(const Int_t *group) constDefinition THnSparse.h:162; THnSparse::ProjectionTH2D * Projection(Int_t yDim, Int_t xDim, Option_t *option="""") constForwards to THnBase::Projection().Definition THnSparse.h:141; THnSparse::~THnSparse~THnSparse() overrideDestruct a THnSparse.Definition THnSparse.cxx:616; THnSparse::FillBinvoid FillBin(Long64_t bin, Double_t w) overrideIncrement the bin content of ""bin"" by ""w"", return the bin index.Definition THnSparse.h:67; THnSparse::fBinsTExMap fBins! Filled binsDefinition THnSparse.h:42; THnSparse::GetBinLong64_t GetBin(const Double_t *x) const overrideDefinition THnSparse.h:97; THnSparse::CreateSparsestatic THnSparse * CreateSparse(const char *name, const char *title, const THnBase *hn, Int_t chunkSize=1024 *16)Definition THnSparse.h:82; THnSparse::ProjectionTHnSparse * Projection(Int_t ndim, const Int_t *dim, Option_t *option="""") constDefinition THnSparse.h:154; THnSparse::fBinsContinuedTExMap fBinsContinued! Filled bins for non-unique hashes, containing pairs of (bin index 0, bin index 1)Definition THnSparse.h:43; THnSparse::AddBinContentvoid AddBinContent(const Int_t *idx, Double_t v=1.)Forwards to THnBase::AddBinContent().Definition THnSparse.h:113; THnSparse::Reservevoid Reserve(Long64_t nbins) overrideInitialize storage for nbins.Definition THnSparse.cxx:689; THnSparse::fChunkSizeInt_t fChunkSizeNumber of entries for each chunk.Definition THnSparse.h:39; THnSparse::Sumw2void Sumw2() overrideEnable calculation of errors.Definition THnSparse.cxx:948; THnSparse::GetNbinsLong64_t GetNbins() const overrideDefinition THnSparse.h:93; THnSparse::CreateIterROOT::Internal::THnBaseBinIter * CreateIter(Bool_t respectAxisRange) const overrideCreate an iterator over all filled bins of a THnSparse.Definition THnSparse.cxx:896; THnSparse::SetFilledBinsvoid SetFilledBins(Long64_t nbins) overrideDefinition THnSparse.h:94; THnSparse::GetBinIndexForCurrentBinLong64_t GetBinIndexForCurrentBin(Bool_t allocate)Return the index for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THnSparse_8h_source.html:17498,hash,hashes,17498,doc/master/THnSparse_8h_source.html,https://root.cern,https://root.cern/doc/master/THnSparse_8h_source.html,1,['hash'],['hashes']
Security,":SetStatsvirtual void SetStats(Bool_t stats=kTRUE)Set statistics option on/off.Definition TH1.cxx:8990; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; THStackThe Histogram stack class.Definition THStack.h:40; THStack::Addvirtual void Add(TH1 *h, Option_t *option="""")Add a new histogram to the list.Definition THStack.cxx:366; THStack::Drawvoid Draw(Option_t *chopt="""") overrideDraw this stack with its current attributes.Definition THStack.cxx:453; TLegendThis class displays a legend box (TPaveText) containing several legend entries.Definition TLegend.h:23; TLegend::AddEntryTLegendEntry * AddEntry(const TObject *obj, const char *label="""", Option_t *option=""lpf"")Add a new entry to this legend.Definition TLegend.cxx:320; TLegend::Drawvoid Draw(Option_t *option="""") overrideDraw this legend with its current attributes.Definition TLegend.cxx:425; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; TStringBasic string class.Definition TString.h:139; TString::AppendTString & Append(const char *cs)Definition TString.h:572; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; ptTPaveText * ptDefinition entrylist_figure1.C:7; c1return c1Definition legend1.C:41; ROOT::Math::Chebyshev::Tdouble T(double x)Definition ChebyshevPol.h:34; arrowDefinition RArrowDS.hxx:17. tutorialstreecernstaff.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/cernstaff_8C_source.html:6623,access,access,6623,doc/master/cernstaff_8C_source.html,https://root.cern,https://root.cern/doc/master/cernstaff_8C_source.html,2,['access'],['access']
Security,":SizeUInt_t Size() const overrideReturn the current size of the container.Definition TGenCollectionProxy.cxx:1153; TGenCollectionProxy::fDestructSizing_t fDestructContainer accessors: block destruct.Definition TGenCollectionProxy.h:307; TGenCollectionProxy::fCreateEnvMethod0 fCreateEnvMethod to allocate an Environment holder.Definition TGenCollectionProxy.h:310; TGenCollectionProxy::fValValue * fValDescriptor of the Value_type.Definition TGenCollectionProxy.h:312; TGenCollectionProxy::GetFunctionNextNext_t GetFunctionNext(Bool_t read=kTRUE) overrideSee typedef void* (*Next_t)(void *iter, void *end); iter and end should be pointer to respectively an...Definition TGenCollectionProxy.cxx:1670; TGenCollectionProxy::operator()virtual void operator()(TBuffer &refBuffer, void *pObject)TClassStreamer IO overload.Definition TGenCollectionProxy.cxx:1448; TGenCollectionProxy::fOnFileClassTClass * fOnFileClassOn file class.Definition TGenCollectionProxy.h:322; TGenCollectionProxy::fResizeSizing_t fResizeContainer accessors: resize container.Definition TGenCollectionProxy.h:303; TGenCollectionProxy::fConstructArrIterfunc_t fConstructContainer accessors: block construct.Definition TGenCollectionProxy.h:306; TGenCollectionProxy::Atvoid * At(UInt_t idx) overrideReturn the address of the value at index 'idx'.Definition TGenCollectionProxy.cxx:1064; TGenCollectionProxy::GetFunctionDeleteTwoIteratorsDeleteTwoIterators_t GetFunctionDeleteTwoIterators(Bool_t read=kTRUE) overrideSee typedef void (*DeleteTwoIterators_t)(void *begin, void *end); If the sizeof iterator is greater t...Definition TGenCollectionProxy.cxx:1722; TGenCollectionProxy::fConversionReadMemberWisestd::map< std::string, TObjArray * > * fConversionReadMemberWiseArray of bundle of TStreamerInfoActions to stream out (read) derived from another class.Definition TGenCollectionProxy.h:292; TGenCollectionProxy::CheckFunctionsvoid CheckFunctions() constCheck existence of function pointers.Definition TGenCollectionProxy.cxx:793;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:82561,access,accessors,82561,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['access'],['accessors']
Security,":[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSignalHandler*TProofMgr::fIntHandlerInterrupt signal handler (ctrl-c); TStringTNamed::fNameobject identifier; Int_tTProofMgr::fRemoteProtocolProtocol number run by the daemon server; TProofMgr::EServTypeTProofMgr::fServTypeType of server: old-proofd, XrdProofd; TList*TProofMgr::fSessionsPROOF session managed by this server; TStringTNamed::fTitleobject title; TUrlTProofMgr::fUrlServer URL; static TListTProofMgr::fgListOfManagersSub-list of TROOT::ListOfProofs for managers. private:. TXSocket*fSocketConnection to XRD. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofMgr(const char* url, Int_t loglevel = -1, const char* alias = """"); Create a PROOF manager for the standard (old) environment. Int_t Init(Int_t loglevel = -1); Do real initialization: open the connection and set the relevant; variables.; Login and authentication are dealt with at this level, if required.; Return 0 in case of success, 1 if the remote server is a 'proofd',; -1 in case of error. ~TXProofMgr(); Destructor: close the connection. void SetInvalid(); Invalidate this manager by closing the connection. TProof * AttachSession(TProofDesc* d, Bool_t gui = kFALSE); Dummy version provided for completeness. Just returns a pointer to; existing session 'id' (as shown by TProof::QuerySessions) or 0 if 'id' is; not valid. The boolena 'gui' should be kTRUE when invoked from the GUI. void DetachSession(Int_t , Option_t* = """"); Detach session with 'id' from its proofserv. The 'id' is the number; shown by QuerySessions. The correspondent TProof object is deleted.; If id == 0 all the known sessions are detached.; Option opt=""S"" or ""s"" forces session shutdown. void DetachSession(TProof* , Option_t* = """"); Detach session 'p' from its proofserv. The instance 'p' is invalidated; and should be deleted by the caller. Bool_t MatchUrl(const char* url); Checks if 'url",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXProofMgr.html:9378,authenticat,authentication,9378,root/html528/TXProofMgr.html,https://root.cern,https://root.cern/root/html528/TXProofMgr.html,3,['authenticat'],['authentication']
Security,":any_cast<int>(res1); 61/// (int) 2; 62/// ~~~; 63///; 64/// And with a python file `MyPyClass.py` like this:; 65/// ~~~{.py}; 66/// print 'creating class MyPyClass ... '; 67///; 68/// class MyPyClass:; 69/// def __init__( self ):; 70/// print 'in MyPyClass.__init__'; 71///; 72/// def gime( self, what ):; 73/// return what; 74/// ~~~; 75/// one can load a python module, and use the class. Casts are; 76/// necessary as the type information can not be otherwise derived.; 77/// ~~~{.cpp}; 78/// root [6] TPython::LoadMacro( ""MyPyClass.py"" );; 79/// creating class MyPyClass ...; 80/// root [7] MyPyClass m;; 81/// in MyPyClass.__init__; 82/// root [8] std::string s = (char*)m.gime( ""aap"" );; 83/// root [9] s; 84/// (class TString)""aap""; 85/// ~~~; 86/// It is possible to switch between interpreters by calling `TPython::Prompt()`; 87/// on the Cling side, while returning with `^D` (EOF). State is preserved between; 88/// successive switches.; 89///; 90/// The API part provides (direct) C++ access to the bindings functionality of; 91/// PyROOT. It allows verifying that you deal with a PyROOT python object in the; 92/// first place (CPPInstance_Check for CPPInstance and any derived types, as well; 93/// as CPPInstance_CheckExact for CPPInstance's only); and it allows conversions; 94/// of `void*` to an CPPInstance and vice versa.; 95 ; 96//- data ---------------------------------------------------------------------; 97ClassImp(TPython);; 98static PyObject *gMainDict = 0;; 99 ; 100namespace {; 101 ; 102class CachedPyString {; 103 ; 104public:; 105 CachedPyString(const char *name) : fObj{PyUnicode_FromString(name)} {}; 106 ; 107 CachedPyString(CachedPyString const &) = delete;; 108 CachedPyString(CachedPyString &&) = delete;; 109 CachedPyString &operator=(CachedPyString const &) = delete;; 110 CachedPyString &operator=(CachedPyString &&) = delete;; 111 ; 112 ~CachedPyString() { Py_DECREF(fObj); }; 113 ; 114 PyObject *obj() { return fObj; }; 115 ; 116private:; 117 PyObject *fOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPython_8cxx_source.html:3467,access,access,3467,doc/master/TPython_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPython_8cxx_source.html,1,['access'],['access']
Security,":fErrorCodeerror code of last operation; TStringTSQLStatement::fErrorMsgerror message of last operation; Bool_tTSQLStatement::fErrorOutenable error output; Int_tfIterationCount! number of iteration; Bool_tfNeedParBind! indicates when parameters bind should be called; Int_tfNumBuffers! number of statement parameters; MYSQL_STMT*fStmt! executed statement; Int_tfWorkingMode! 1 - setting parameters, 2 - retrieving results; static ULong64_tfgAllocSizeLimit. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMySQLStatement(MYSQL_STMT* stmt, Bool_t errout = kTRUE); Normal constructor.; Checks if statement contains parameters tags. ~TMySQLStatement(); Destructor. void Close(Option_t* = """"); Close statement. Bool_t Process(); Process statement. Int_t GetNumAffectedRows(); Return number of affected rows after statement is processed. Int_t GetNumParameters(); Return number of statement parameters. Bool_t StoreResult(); Store result of statement processing to access them; via GetInt(), GetDouble() and so on methods. Int_t GetNumFields(); Return number of fields in result set. const char* GetFieldName(Int_t nfield); Returns field name in result set. Bool_t NextResultRow(); Shift cursor to nect row in result set. Bool_t NextIteration(); Increment iteration counter for statement, where parameter can be set.; Statement with parameters of previous iteration; automatically will be applied to database. void FreeBuffers(); Release all buffers, used by statement. void SetBuffersNumber(Int_t n); Allocate buffers for statement parameters/ result fields. const char* ConvertToString(Int_t npar); Convert field value to string. long double ConvertToNumeric(Int_t npar); Convert field to numeric value. Bool_t IsNull(Int_t npar); Checks if field value is null. Int_t GetInt(Int_t npar); Return field value as integer. UInt_t GetUInt(Int_t npar); Return field value as unsigned integer. Long_t GetLong(Int_t npar); Return field value as long integer. Long64_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMySQLStatement.html:11085,access,access,11085,root/html602/TMySQLStatement.html,https://root.cern,https://root.cern/root/html602/TMySQLStatement.html,2,['access'],['access']
Security,":fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGMdiTitleIcon(const TGWindow* p, const TGWindow* titlebar, const TGPicture* pic, Int_t w, Int_t h); TGMdiTitleIcon constructor.; the TGMdiTitleIcon is the left icon used also for the MDI; popup menu allowing access to MDI commands as : restore,; move, size, minimize and close. ~TGMdiTitleIcon(); TGMdiTitleIcon destructor. void DoRedraw(); Redraw icon. Bool_t HandleDoubleClick(Event_t* event); Handle double click event on MDI icon (close the window). Bool_t HandleButton(Event_t* event); Handle button event on MDI icon (popup menu). TGMdiTitleIcon(const TGWindow* p, const TGWindow* titlebar, const TGPicture* pic, Int_t w, Int_t h). TGPopupMenu * GetPopup() const; { return fPopup; }. » Author: Bertrand Bellenot 20/08/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGMdiTitleIcon.html:18650,access,access,18650,root/html604/TGMdiTitleIcon.html,https://root.cern,https://root.cern/root/html604/TGMdiTitleIcon.html,1,['access'],['access']
Security,":fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGMdiTitleIcon(const TGWindow* p, const TGWindow* titlebar, const TGPicture* pic, Int_t w, Int_t h); TGMdiTitleIcon constructor.; the TGMdiTitleIcon is the left icon used also for the MDI; popup menu allowing access to MDI commands as : restore,; move, size, minimize and close. ~TGMdiTitleIcon(); TGMdiTitleIcon destructor. void DoRedraw(); Redraw icon. Bool_t HandleDoubleClick(Event_t* event); Handle double click event on MDI icon (close the window). Bool_t HandleButton(Event_t* event); Handle button event on MDI icon (popup menu). TGMdiTitleIcon(const TGWindow* p, const TGWindow* titlebar, const TGPicture* pic, Int_t w, Int_t h). TGPopupMenu * GetPopup() const; { return fPopup; }. » Author: Bertrand Bellenot 20/08/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 14:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGMdiTitleIcon.html:18650,access,access,18650,root/html602/TGMdiTitleIcon.html,https://root.cern,https://root.cern/root/html602/TGMdiTitleIcon.html,1,['access'],['access']
Security,":fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGView(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, Int_t id = -1, UInt_t xMargin = 0, UInt_t yMargin = 0, UInt_t options = kSunkenFrame|kDoubleBorder, UInt_t sboptions = 0, Pixel_t back = GetWhitePixel()); Create an editor view, containing an TGEditorFrame and (optionally); a horizontal and vertical scrollbar. ~TGView(); Delete view. void Clear(Option_t* = """"); Clear view. void SetVisibleStart(Int_t newTop, Int_t direction); Scroll view in specified direction to make newTop the visible location. void DrawRegion(Int_t x, Int_t y, UInt_t width, UInt_t height); Draw region. void UpdateRegion(Int_t x, Int_t y, UInt_t w, UInt_t h); update a part of view. void UpdateBackgroundStart(); set some gc values. Bool_t HandleButton(Event_t* event); handle button. void DoRedraw(); redraw. Bool_t HandleExpose(Event_t* event); Handle expose events. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process scrollbar messages. void Layout(); layout view. void DrawBorder(); Draw the border of the text edit widget. void ScrollToPosition(TGLongPosition newPos); Scroll the canvas to pos. void ScrollCanvas(Int_t newTop, Int_t direction); Scroll the canvas to new_top in the kVertical or kHorizontal direction. void ChangeBackground(Pixel_t ); Change background color of the canvas frame. void SetBackgroundColor(Pixel_t ); Set background color of the canvas frame. void SetBackgroundPixmap(Pixmap_t p); Set backgound pixmap. Bool_t ItemLayout(); { return kFALSE; }. TGView(const TGView& ). TGView& operator=(const TGView& ). TGViewFrame * GetCanvas() const; { return fCanvas; }. void SetLayoutManager(TGLayoutManager* ); { }. void ScrollUp(Int_t pixels); { ScrollToPosition(TGLongPosition(fVisible.fX, fVisible.fY + pixels)); }. void ScrollDown(Int_t pixels); { ScrollToPosition(TGLongPosition(fVisible.fX, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGView.html:21914,expose,expose,21914,root/html528/TGView.html,https://root.cern,https://root.cern/root/html528/TGView.html,4,['expose'],['expose']
Security,":kZombie. protected:. set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TF1*_func; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooTFnBinding.html:33906,validat,validate,33906,root/html602/RooTFnBinding.html,https://root.cern,https://root.cern/root/html602/RooTFnBinding.html,4,"['access', 'validat']","['access', 'validate']"
Security,":string &name) const override;  get index of variable given a variable given a name return always -1 . ;  ; std::string VariableName (unsigned int ivar) const override;  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const; ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuitMinimizer.html:7384,validat,validation,7384,doc/master/classTMinuitMinimizer.html,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html,1,['validat'],['validation']
Security,"; $ scp ../root_vX.YY.ZZ.source.tar.gz sftnight@root:/home/www/root/download. Update the release notes in README/ReleaseNotes/vXXX/index.md again. edit README/ReleaseNotes/vXXX/index.md; possibly copying from README/ReleaseNotes/empty.md if this is not a patch release; git commit README/ReleaseNotes/vXXX/index.md. Update to the next development version. edit build/version_number (odd patch number); make version, check in. Push to github. $ git push origin vX-YY-00-patches; $ git push origin vX-YY-ZZ. Tag ROOTTEST repository. Artifacts. Produce binary tarfiles. start the procedure root-release-6.20 (or whichever branch) in Jenkins; tarfiles and other artifacts are copied to final destination. Install binaries to CVMFS. Install release binaries to CVMFS with the Jenkins procedure root-release-CVMFS. Documentation. Update the release pages. Generate the release notes with the Jenkins procedure called root-releasenotes; Update the releases xml with the Jenkins procedure called root-release-makeReleasesXml; Once authenticated, import the releases xml in the site clicking import here (Be reminded: this works for authenticated users only!).; Eventually edit the 'highlights' section, which is currently commented, in the generated release page.; If this applies, mark the release as Pro or Old and remove the attribute to the one previously holding it. There are radio buttons exposed by Drupal when editing a release's page.; If not a patch release edit reference-guide page to add the new reference guide for the release. Announcements. send mail to the following mailing lists: root-planning@cern.ch, root-dev@cern.ch, roottalk@cern.ch, root-godparents@cern.ch, root-ambassadors@cern.ch; write announcement in RootTalk forum news. Quick Links; Jenkins Service; Jenkins How To; CDash; Coverity; Github; GitWeb; LXR; Jira; Conventions Violations; ROOT Logos; Upgrade of ROOTbinder. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/release-checklist.html:3850,authenticat,authenticated,3850,d/release-checklist.html,https://root.cern,https://root.cern/d/release-checklist.html,2,['authenticat'],['authenticated']
Security,"; (; ). inlineprivate . Get the slot number for this threadID, make a slot if needed. ; Definition at line 338 of file TThreadedObject.hxx. ◆ Merge(). template<class T > . std::shared_ptr< T > ROOT::TThreadedObject< T >::Merge ; (; TThreadedObjectUtils::MergeFunctionType< T > ; mergeFunction = TThreadedObjectUtils::MergeTObjects<T>). inline . Merge all the thread private objects. ; Can be called once: it does not create any new object but destroys the present bookkeping collapsing all objects into the one at slot 0. ; Definition at line 294 of file TThreadedObject.hxx. ◆ operator->(). template<class T > . T * ROOT::TThreadedObject< T >::operator-> ; (; ). inline . Access the wrapped object and allow to call its methods. ; Definition at line 286 of file TThreadedObject.hxx. ◆ SetAtSlot(). template<class T > . void ROOT::TThreadedObject< T >::SetAtSlot ; (; unsigned ; i, . std::shared_ptr< T > ; v . ). inline . Set the value of a particular slot. ; This method is thread-safe as long as concurrent calls access different slots (i.e. pass a different argument) and no thread accesses slot i via the arrow operator, so mixing usage of SetAtSlot with usage of the arrow operator can be dangerous. ; Definition at line 227 of file TThreadedObject.hxx. ◆ SnapshotMerge(). template<class T > . std::unique_ptr< T > ROOT::TThreadedObject< T >::SnapshotMerge ; (; TThreadedObjectUtils::MergeFunctionType< T > ; mergeFunction = TThreadedObjectUtils::MergeTObjects<T>). inline . Merge all the thread private objects. ; Can be called many times. It does create a new instance of class T to represent the ""Sum"" object. This method is not thread safe: correct or acceptable behaviours depend on the nature of T and of the merging function. ; Definition at line 312 of file TThreadedObject.hxx. Member Data Documentation. ◆ fDirectories. template<class T > . std::deque<TDirectory*> ROOT::TThreadedObject< T >::fDirectories. private . A TDirectory per slot. ; Definition at line 332 of file TThreadedOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:8641,access,access,8641,doc/v632/classROOT_1_1TThreadedObject.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html,2,['access'],['access']
Security,"; (; bool ; on = true). inline . configures that only native (own-created) connections are allowed ; Definition at line 308 of file RWebWindow.hxx. ◆ SetOperationTmout(). void ROOT::RWebWindow::SetOperationTmout ; (; float ; tm = 50.). inline . Set timeout for synchronous WebWindow operations. ; Definition at line 354 of file RWebWindow.hxx. ◆ SetPanelName(). void RWebWindow::SetPanelName ; (; const std::string & ; name). Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ; Definition at line 132 of file RWebWindow.cxx. ◆ SetPosition(). void ROOT::RWebWindow::SetPosition ; (; unsigned ; x, . unsigned ; y . ). inline . Set window position. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 269 of file RWebWindow.hxx. ◆ SetRequireAuthKey(). void ROOT::RWebWindow::SetRequireAuthKey ; (; bool ; on). inline . Configure if authentication key in connection string is required. ; Definition at line 316 of file RWebWindow.hxx. ◆ SetStartDialogFunc(). void RWebWindow::SetStartDialogFunc ; (; std::function< bool(const std::shared_ptr< RWebWindow > &, unsigned, const std::string &)> ; func). staticprivate . Configure func which has to be used for starting dialog. ; Definition at line 1953 of file RWebWindow.cxx. ◆ SetUseCurrentDir(). void ROOT::RWebWindow::SetUseCurrentDir ; (; bool ; on = true). inline . Configure if window can access local files via currentdir/ path of http server. ; Definition at line 324 of file RWebWindow.hxx. ◆ SetUserArgs(). void RWebWindow::SetUserArgs ; (; const std::string & ; args). Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into connectWebWindow({}) Must be set before RWebWindow::Show() method is called. ; Parameters. args- arbitrary JSON data which can be provided to client side . Definition at line 1310 of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:47626,authenticat,authentication,47626,doc/v632/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html,1,['authenticat'],['authentication']
Security,"; (; bool ; on = true). inline . configures that only native (own-created) connections are allowed ; Definition at line 311 of file RWebWindow.hxx. ◆ SetOperationTmout(). void ROOT::RWebWindow::SetOperationTmout ; (; float ; tm = 50.). inline . Set timeout for synchronous WebWindow operations. ; Definition at line 357 of file RWebWindow.hxx. ◆ SetPanelName(). void RWebWindow::SetPanelName ; (; const std::string & ; name). Configure window to show some of existing JSROOT panels It uses ""file:rootui5sys/panel/panel.html"" as default HTML page At the moment only FitPanel is existing. ; Definition at line 132 of file RWebWindow.cxx. ◆ SetPosition(). void ROOT::RWebWindow::SetPosition ; (; unsigned ; x, . unsigned ; y . ). inline . Set window position. Will be applied if supported by used web display (like CEF or Chromium) ; Definition at line 272 of file RWebWindow.hxx. ◆ SetRequireAuthKey(). void ROOT::RWebWindow::SetRequireAuthKey ; (; bool ; on). inline . Configure if authentication key in connection string is required. ; Definition at line 319 of file RWebWindow.hxx. ◆ SetStartDialogFunc(). void RWebWindow::SetStartDialogFunc ; (; std::function< bool(const std::shared_ptr< RWebWindow > &, unsigned, const std::string &)> ; func). staticprivate . Configure func which has to be used for starting dialog. ; Definition at line 1995 of file RWebWindow.cxx. ◆ SetUseCurrentDir(). void ROOT::RWebWindow::SetUseCurrentDir ; (; bool ; on = true). inline . Configure if window can access local files via currentdir/ path of http server. ; Definition at line 327 of file RWebWindow.hxx. ◆ SetUserArgs(). void RWebWindow::SetUserArgs ; (; const std::string & ; args). Set arbitrary JSON data, which is accessible via conn.getUserArgs() method in JavaScript This JSON code injected into main HTML document into connectWebWindow({}) Must be set before RWebWindow::Show() method is called. ; Parameters. args- arbitrary JSON data which can be provided to client side . Definition at line 1352 of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindow.html:46510,authenticat,authentication,46510,doc/master/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html,1,['authenticat'],['authentication']
Security,"; ). privatedelete . ◆ RecursiveRemove(). void THashList::RecursiveRemove ; (; TObject * ; obj). overridevirtual . Remove object from this collection and recursively remove the object from all other objects (and collections). ; This function overrides TCollection::RecursiveRemove that calls the Remove function. THashList::Remove cannot be called because it uses the hash value of the hash table. This hash value is not available anymore when RecursiveRemove is called from the TObject destructor. ; Reimplemented from TCollection.; Reimplemented in TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, and TListOfFunctionTemplates.; Definition at line 310 of file THashList.cxx. ◆ Rehash(). void THashList::Rehash ; (; Int_t ; newCapacity). Rehash the hashlist. ; If the collision rate becomes too high (i.e. the average size of the linked lists become too long) then lookup efficiency decreases since relatively long lists have to be searched every time. To improve performance rehash the hashtable. This resizes the table to newCapacity slots and refills the table. Use AverageCollisions() to check if you need to rehash. ; Definition at line 368 of file THashList.cxx. ◆ Remove() [1/2]. TObject * THashList::Remove ; (; TObject * ; obj). overridevirtual . Remove object from the list. ; Implements TCollection.; Reimplemented in TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, and TListOfFunctionTemplates.; Definition at line 378 of file THashList.cxx. ◆ Remove() [2/2]. TObject * THashList::Remove ; (; TObjLink * ; lnk). overridevirtual . Remove object via its objlink from the list. ; Reimplemented from TList.; Reimplemented in TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, and TListOfFunctionTemplates.; Definition at line 391 of file THashList.cxx. ◆ Streamer(). void THashList::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the collection to or from the I/O buffer. ; Reimplemented from TC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHashList.html:32190,hash,hashtable,32190,doc/master/classTHashList.html,https://root.cern,https://root.cern/doc/master/classTHashList.html,1,['hash'],['hashtable']
Security,"; ); const. inline . Definition at line 237 of file TProofServ.h. ◆ GetProtocol(). Int_t TProofServ::GetProtocol ; (; ); const. inline . Definition at line 252 of file TProofServ.h. ◆ GetQuerySeqNum(). Int_t TProofServ::GetQuerySeqNum ; (; ); const. inline . Definition at line 260 of file TProofServ.h. ◆ GetRealTime(). Float_t TProofServ::GetRealTime ; (; ); const. inline . Definition at line 258 of file TProofServ.h. ◆ GetResMemMax(). Long_t TProofServ::GetResMemMax ; (; ). static . ResMemMax getter. ; Definition at line 6927 of file TProofServ.cxx. ◆ GetService(). const char * TProofServ::GetService ; (; ); const. inline . Definition at line 238 of file TProofServ.h. ◆ GetSessionDir(). const char * TProofServ::GetSessionDir ; (; ); const. inline . Definition at line 247 of file TProofServ.h. ◆ GetSessionStatus(). Int_t TProofServ::GetSessionStatus ; (; ). protected . Return the status of this session: 0 idle 1 running 2 being terminated (currently unused) 3 queued 4 idle timed-out (not set in here but in TIdleTOTimer::Notify) This is typically run in the reader thread, so access needs to be protected. ; Definition at line 6786 of file TProofServ.cxx. ◆ GetSessionTag(). const char * TProofServ::GetSessionTag ; (; ); const. inline . Definition at line 245 of file TProofServ.h. ◆ GetSocket(). TSocket * TProofServ::GetSocket ; (; ); const. inline . Definition at line 257 of file TProofServ.h. ◆ GetTopSessionTag(). const char * TProofServ::GetTopSessionTag ; (; ); const. inline . Definition at line 246 of file TProofServ.h. ◆ GetTotSessions(). Int_t TProofServ::GetTotSessions ; (; ); const. inline . Definition at line 262 of file TProofServ.h. ◆ GetUser(). const char * TProofServ::GetUser ; (; ); const. inline . Definition at line 241 of file TProofServ.h. ◆ GetVirtMemMax(). Long_t TProofServ::GetVirtMemMax ; (; ). static . VirtMemMax getter. ; Definition at line 6920 of file TProofServ.cxx. ◆ GetWorkDir(). const char * TProofServ::GetWorkDir ; (; ); const. inline . Def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServ.html:42510,access,access,42510,doc/master/classTProofServ.html,https://root.cern,https://root.cern/doc/master/classTProofServ.html,1,['access'],['access']
Security,"; *-* Those pseudo operation are used to implement lazy evaluation of; *-* && and ||. When the left hand of the expression if false; *-* (respectively true), the evaluation of the right is entirely skipped; *-* (since it would not change the value of the expreession).; -; *-* && 142 11 (one operation on right) 142 21 (2 operations on right); *-* || 142 12 (one operation on right) 142 22 (2 operations on right); -; *-* * functions calls (kFunctionCall) :; -; *-* f0 145 0 f1 145 1 etc..; -; *-* errors :; *-* ========; -; *-* 1 : Division By Zero; *-* 2 : Invalid Floating Point Operation; *-* 4 : Empty String; *-* 5 : invalid syntax; *-* 6 : Too many operators; *-* 7 : Too many parameters; *-* 10 : z specified but not x and y; *-* 11 : z and y specified but not x; *-* 12 : y specified but not x; *-* 13 : z and x specified but not y; *-* 20 : non integer value for parameter number; *-* 21 : atan2 requires two arguments; *-* 22 : pow requires two arguments; *-* 23 : degree of polynomial not specified; *-* 24 : Degree of polynomial must be positive; *-* 25 : Degree of polynomial must be less than 20; *-* 26 : Unknown name; *-* 27 : Too many constants in expression; *-* 28 : strstr requires two arguments; *-* 29 : interpreted or compiled function have to return a numerical type; *-* 30 : Bad numerical expression; *-* 31 : Part of the variable exist but some of it is not accessible or useable; *-* 40 : '(' is expected; *-* 41 : ')' is expected; *-* 42 : '[' is expected; *-* 43 : ']' is expected. /*. */. -; *-* Special functions; *-* -----------------; *-* By default, the formula is assigned fNumber=0. However, the following; *-* formula built with simple functions are assigned fNumber:; *-* ""gaus"" 100 (or gausn); *-* ""xygaus"" 110; *-* ""expo"" 200; *-* ""polN"" 300+N; *-* ""landau"" 400; *-* ""xylandau"" 410; *-* Note that expressions like gaus(0), expo(1) will force fNumber=0; -; *-* Warning when deriving a class from TFormula; *-* -------------------------------------------; *-* I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFormula.html:19870,access,accessible,19870,root/html528/TFormula.html,https://root.cern,https://root.cern/root/html528/TFormula.html,3,['access'],['accessible']
Security,"; - -> <intersection ...>. Special cases of solids:; TGeoScaledShape -> <elcone ...> if scaled TGeoCone or; - -> element without scale; TGeoCompositeShape -> <ellipsoid ...>; - intersection of:; - scaled TGeoSphere and TGeoBBox. Materials:; TGeoIsotope -> <isotope ...>; TGeoElement -> <element ...>; TGeoMaterial -> <material ...>; TGeoMixture -> <material ...>. Structure; TGeoVolume -> <volume ...> or; - -> <assembly ...>; TGeoNode -> <physvol ...>; TGeoPatternFinder -> <divisionvol ...>. There are options that can be set to change resulting document; Options:; g - is set by default in gGeoManager, this option ensures compatibility; - with Geant4. It means:; - -> atomic number of material will be changed if <1 to 1; - -> if polycone is set badly it will try to export it correctly; - -> if widht * ndiv + offset is more then width of object being divided; - (in divisions) then it will be rounded so it will not exceed or; - if kPhi divsion then it will keep range of offset in -360 -> 0; f - if this option is set then names of volumes and solids will have; - pointer as a suffix to ensure uniqness of names; n - if this option is set then names will not have suffix, but uniqness is; - of names is not secured; - - if none of this two options (f,n) is set then default behaviour is so; - that incremental suffix is added to the names.; - (eg. TGeoBBox_0x1, TGeoBBox_0x2 ...). USAGE:; gGeoManager->Export(""output.gdml"");; gGeoManager->Export(""output.gdml"","""",""vg""); //the same as previous just; options are set explicitly; gGeoManager->Export(""output.gdml"","""",""vgf"");; gGeoManager->Export(""output.gdml"","""",""gn"");; gGeoManager->Export(""output.gdml"","""",""f"");. NB:; Options discussed above are used only for TGDMLWrite class. There are; other options in the TGeoManager::Export(...) method that can be used.; See that function for details. Function Members (Methods); public:. TGDMLWrite(); TGDMLWrite(const TGDMLWrite&); virtual~TGDMLWrite(); voidTObject::AbstractMethod(const char* method) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGDMLWrite.html:3136,secur,secured,3136,root/html534/TGDMLWrite.html,https://root.cern,https://root.cern/root/html534/TGDMLWrite.html,1,['secur'],['secured']
Security,"; - -> <intersection ...>. Special cases of solids:; TGeoScaledShape -> <elcone ...> if scaled TGeoCone or; - -> element without scale; TGeoCompositeShape -> <ellipsoid ...>; - intersection of:; - scaled TGeoSphere and TGeoBBox. Materials:; TGeoIsotope -> <isotope ...>; TGeoElement -> <element ...>; TGeoMaterial -> <material ...>; TGeoMixture -> <material ...>. Structure; TGeoVolume -> <volume ...> or; - -> <assembly ...>; TGeoNode -> <physvol ...>; TGeoPatternFinder -> <divisionvol ...>. There are options that can be set to change resulting document; Options:; g - is set by default in gGeoManager, this option ensures compatibility; - with Geant4. It means:; - -> atomic number of material will be changed if <1 to 1; - -> if polycone is set badly it will try to export it correctly; - -> if widht * ndiv + offset is more then width of object being divided; - (in divisions) then it will be rounded so it will not exceed or; - if kPhi divsion then it will keep range of offset in -360 -> 0; f - if this option is set then names of volumes and solids will have; - pointer as a suffix to ensure uniqness of names; n - if this option is set then names will not have suffix, but uniqness is; - of names is not secured; - - if none of this two options (f,n) is set then default behaviour is so; - that incremental suffix is added to the names.; - (eg. TGeoBBox_0x1, TGeoBBox_0x2 ...). USAGE:; gGeoManager->Export(""output.gdml"");; gGeoManager->Export(""output.gdml"","""",""vg""); //the same as previous just; options are set explicitly; gGeoManager->Export(""output.gdml"","""",""vgf"");; gGeoManager->Export(""output.gdml"","""",""gn"");; gGeoManager->Export(""output.gdml"","""",""f"");. NB:; Options discussed above are used only for TGDMLWrite class. There are; other options in the TGeoManager::Export(...) method that can be used.; See that function for details. Function Members (Methods); public:. virtual~TGDMLWrite(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGDMLWrite.html:3136,secur,secured,3136,root/html602/TGDMLWrite.html,https://root.cern,https://root.cern/root/html602/TGDMLWrite.html,2,['secur'],['secured']
Security,"; - computation of the minimal box bounding the shape, given that this box have; to be aligned with the local coordinates;; - algorithms for dividing the shape along a given axis and producing resulting; divisions volumes. The modeler currently provides a set of 16 basic shapes, which we will call; primitives. It also provides a special class allowing the creation of shapes; made as a result of boolean operations between primitives. These are called; composite shapes and the composition operation can be recursive (composition; of composites). This allows the creation of a quite large number of different; shape topologies and combinations. Shapes are named objects and register themselves to the manager class at; creation time. This is responsible for their final deletion. Shapes; can be created without name if their retreival by name is no needed. Generally; shapes are objects that are usefull only at geometry creation stage. The pointer; to a shape is in fact needed only when referring to a given volume and it is; always accessible at that level. A shape may be referenced by several volumes,; therefore its deletion is not possible once volumes were defined based on it. Creating shapes. Shape objects embeed only the minimum set of parameters that are fully; describing a valid physical shape. For instance, a tube is represented by; its half length, the minimum radius and the maximum radius. Shapes are used; togeather with media in order to create volumes, which in their turn; are the main components of the geometrical tree. A specific shape can be created; stand-alone :. TGeoBBox *box = new TGeoBBox(""s_box"", halfX, halfY, halfZ); // named; TGeoTube *tub = new TGeoTube(rmin, rmax, halfZ); // no name; ... (see each specific shape constructors). Sometimes it is much easier to create a volume having a given shape in one; step, since shapes are not direcly linked in the geometrical tree but volumes; are :. TGeoVolume *vol_box = gGeoManager->MakeBox(""BOX_VOL"", ""mat1"", halfX",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoShape.html:2325,access,accessible,2325,root/html528/TGeoShape.html,https://root.cern,https://root.cern/root/html528/TGeoShape.html,6,['access'],['accessible']
Security,"; 10 *************************************************************************/; 11 ; 12/**; 13\class TKey; 14\ingroup IO; 15 ; 16 Book space in a file, create I/O buffers, to fill them, (un)compress them.; 17 ; 18 The TKey class includes functions to book space in a file, to create I/O; 19 buffers, to fill these buffers, to compress/uncompress data buffers.; 20 Before saving (making persistent) an object in a file, a key must; 21 be created. The key structure contains all the information to; 22 uniquely identify a persistent object in a file.; 23 | Data Member | Explanation |; 24 |-------------|-------------|; 25 | fNbytes | Number of bytes for the compressed object and key. |; 26 | fObjlen | Length of uncompressed object. |; 27 | fDatime | Date/Time when the object was written. |; 28 | fKeylen | Number of bytes for the key structure. |; 29 | fCycle | Cycle number of the object. |; 30 | fSeekKey | Address of the object on file (points to fNbytes). This is a redundant information used to cross-check the data base integrity. |; 31 | fSeekPdir | Pointer to the directory supporting this object.|; 32 | fClassName | Object class name. |; 33 | fName | Name of the object. |; 34 | fTitle | Title of the object. |; 35 ; 36 In the 16 highest bits of fSeekPdir is encoded a pid offset. This; 37 offset is to be added to the pid index stored in the TRef object; 38 and the referenced TObject.; 39 ; 40 The TKey class is used by ROOT to:; 41 - Write an object in the current directory; 42 - Write a new ntuple buffer; 43 ; 44 The structure of a file is shown in TFile::TFile.; 45 The structure of a directory is shown in TDirectoryFile::TDirectoryFile.; 46 The TKey class is used by the TBasket class.; 47 See also TTree.; 48*/; 49 ; 50#include <atomic>; 51#include <iostream>; 52 ; 53#include ""TROOT.h""; 54#include ""TClass.h""; 55#include ""TDirectoryFile.h""; 56#include ""TFile.h""; 57#include ""TKey.h""; 58#include ""TBufferFile.h""; 59#include ""TFree.h""; 60#include ""TBrowser.h""; 61#include ""Bytes.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TKey_8cxx_source.html:1547,integrity,integrity,1547,doc/master/TKey_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TKey_8cxx_source.html,1,['integrity'],['integrity']
Security,"; 1113 size_t trainingPhase = 1;; 1114 for (TTrainingSettings & settings : fTrainingSettings) {; 1115 ; 1116 if (fInteractive){; 1117 fInteractive->ClearGraphs();; 1118 }; 1119 ; 1120 Log() << ""Training phase "" << trainingPhase << "" of ""; 1121 << fTrainingSettings.size() << "":"" << Endl;; 1122 trainingPhase++;; 1123 ; 1124 TNet<TCpu<>> net(settings.batchSize, fNet);; 1125 net.SetWeightDecay(settings.weightDecay);; 1126 net.SetRegularization(settings.regularization);; 1127 // Need to convert dropoutprobabilities to conventions used; 1128 // by backend implementation.; 1129 std::vector<Double_t> dropoutVector(settings.dropoutProbabilities);; 1130 for (auto & p : dropoutVector) {; 1131 p = 1.0 - p;; 1132 }; 1133 net.SetDropoutProbabilities(dropoutVector);; 1134 net.InitializeGradients();; 1135 auto testNet = net.CreateClone(settings.batchSize);; 1136 ; 1137 using DataLoader_t = TDataLoader<TMVAInput_t, TCpu<>>;; 1138 ; 1139 // Split training data into training and validation set; 1140 const std::vector<Event *> &allData = GetEventCollection(Types::kTraining);; 1141 const std::vector<Event *> trainingInputData =; 1142 std::vector<Event *>(allData.begin(), allData.begin() + nTrainingSamples);; 1143 const std::vector<Event *> testInputData =; 1144 std::vector<Event *>(allData.begin() + nTrainingSamples, allData.end());; 1145 ; 1146 if (trainingInputData.size() != nTrainingSamples) {; 1147 Log() << kFATAL << ""Inconsistent training sample size"" << Endl;; 1148 }; 1149 if (testInputData.size() != nTestSamples) {; 1150 Log() << kFATAL << ""Inconsistent test sample size"" << Endl;; 1151 }; 1152 ; 1153 size_t nThreads = 1;; 1154 TMVAInput_t trainingTuple = std::tie(trainingInputData, DataInfo());; 1155 TMVAInput_t testTuple = std::tie(testInputData, DataInfo());; 1156 DataLoader_t trainingData(trainingTuple, nTrainingSamples,; 1157 net.GetBatchSize(), net.GetInputWidth(),; 1158 net.GetOutputWidth(), nThreads);; 1159 DataLoader_t testData(testTuple, nTestSamples, testNet.GetBatchSize",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:40923,validat,validation,40923,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['validat'],['validation']
Security,"; 11724 ; 11725 /* Request to create a directory has been fulfilled successfully.; 11726 * No need to put a file. */; 11727 return;; 11728 }; 11729 ; 11730 if (rc == -1) {; 11731 /* put_dir returns -1 if the path is too long */; 11732 mg_send_http_error(conn,; 11733 414,; 11734 ""Error: Path too long\nput_dir(%s): %s"",; 11735 path,; 11736 strerror(ERRNO));; 11737 return;; 11738 }; 11739 ; 11740 if (rc == -2) {; 11741 /* put_dir returns -2 if the directory can not be created */; 11742 mg_send_http_error(conn,; 11743 500,; 11744 ""Error: Can not create directory\nput_dir(%s): %s"",; 11745 path,; 11746 strerror(ERRNO));; 11747 return;; 11748 }; 11749 ; 11750 /* A file should be created or overwritten. */; 11751 /* Currently CivetWeb does not nead read+write access. */; 11752 if (!mg_fopen(conn, path, MG_FOPEN_MODE_WRITE, &file); 11753 || file.access.fp == NULL) {; 11754 (void)mg_fclose(&file.access);; 11755 mg_send_http_error(conn,; 11756 500,; 11757 ""Error: Can not create file\nfopen(%s): %s"",; 11758 path,; 11759 strerror(ERRNO));; 11760 return;; 11761 }; 11762 ; 11763 fclose_on_exec(&file.access, conn);; 11764 range = mg_get_header(conn, ""Content-Range"");; 11765 r1 = r2 = 0;; 11766 if ((range != NULL) && parse_range_header(range, &r1, &r2) > 0) {; 11767 conn->status_code = 206; /* Partial content */; 11768 fseeko(file.access.fp, r1, SEEK_SET);; 11769 }; 11770 ; 11771 if (!forward_body_data(conn, file.access.fp, INVALID_SOCKET, NULL)) {; 11772 /* forward_body_data failed.; 11773 * The error code has already been sent to the client,; 11774 * and conn->status_code is already set. */; 11775 (void)mg_fclose(&file.access);; 11776 return;; 11777 }; 11778 ; 11779 if (mg_fclose(&file.access) != 0) {; 11780 /* fclose failed. This might have different reasons, but a likely; 11781 * one is ""no space on disk"", http 507. */; 11782 conn->status_code = 507;; 11783 }; 11784 ; 11785 /* Create response (status_code has been set before) */; 11786 mg_response_header_start(conn, conn->status_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:340051,access,access,340051,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['access'],['access']
Security,"; 11725 ; 11726 /* Request to create a directory has been fulfilled successfully.; 11727 * No need to put a file. */; 11728 return;; 11729 }; 11730 ; 11731 if (rc == -1) {; 11732 /* put_dir returns -1 if the path is too long */; 11733 mg_send_http_error(conn,; 11734 414,; 11735 ""Error: Path too long\nput_dir(%s): %s"",; 11736 path,; 11737 strerror(ERRNO));; 11738 return;; 11739 }; 11740 ; 11741 if (rc == -2) {; 11742 /* put_dir returns -2 if the directory can not be created */; 11743 mg_send_http_error(conn,; 11744 500,; 11745 ""Error: Can not create directory\nput_dir(%s): %s"",; 11746 path,; 11747 strerror(ERRNO));; 11748 return;; 11749 }; 11750 ; 11751 /* A file should be created or overwritten. */; 11752 /* Currently CivetWeb does not nead read+write access. */; 11753 if (!mg_fopen(conn, path, MG_FOPEN_MODE_WRITE, &file); 11754 || file.access.fp == NULL) {; 11755 (void)mg_fclose(&file.access);; 11756 mg_send_http_error(conn,; 11757 500,; 11758 ""Error: Can not create file\nfopen(%s): %s"",; 11759 path,; 11760 strerror(ERRNO));; 11761 return;; 11762 }; 11763 ; 11764 fclose_on_exec(&file.access, conn);; 11765 range = mg_get_header(conn, ""Content-Range"");; 11766 r1 = r2 = 0;; 11767 if ((range != NULL) && parse_range_header(range, &r1, &r2) > 0) {; 11768 conn->status_code = 206; /* Partial content */; 11769 fseeko(file.access.fp, r1, SEEK_SET);; 11770 }; 11771 ; 11772 if (!forward_body_data(conn, file.access.fp, INVALID_SOCKET, NULL)) {; 11773 /* forward_body_data failed.; 11774 * The error code has already been sent to the client,; 11775 * and conn->status_code is already set. */; 11776 (void)mg_fclose(&file.access);; 11777 return;; 11778 }; 11779 ; 11780 if (mg_fclose(&file.access) != 0) {; 11781 /* fclose failed. This might have different reasons, but a likely; 11782 * one is ""no space on disk"", http 507. */; 11783 conn->status_code = 507;; 11784 }; 11785 ; 11786 /* Create response (status_code has been set before) */; 11787 mg_response_header_start(conn, conn->status_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:340084,access,access,340084,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['access'],['access']
Security,"; 1268////////////////////////////////////////////////////////////////////////////////; 1269/// Expand a pathname getting rid of special shell characters like ~.$, etc.; 1270/// For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; 1271/// environment variables in a pathname. If compatibility is not an issue; 1272/// you can use on Unix directly $XXX.; 1273 ; 1274Bool_t TSystem::ExpandPathName(TString&); 1275{; 1276 return kFALSE;; 1277}; 1278 ; 1279////////////////////////////////////////////////////////////////////////////////; 1280/// Expand a pathname getting rid of special shell characters like ~.$, etc.; 1281/// For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; 1282/// environment variables in a pathname. If compatibility is not an issue; 1283/// you can use on Unix directly $XXX. The user must delete returned string.; 1284 ; 1285char *TSystem::ExpandPathName(const char *); 1286{; 1287 return nullptr;; 1288}; 1289 ; 1290////////////////////////////////////////////////////////////////////////////////; 1291/// Returns FALSE if one can access a file using the specified access mode.; 1292/// The file name must not contain any special shell characters line ~ or $,; 1293/// in those cases first call ExpandPathName().; 1294/// Attention, bizarre convention of return value!!; 1295 ; 1296Bool_t TSystem::AccessPathName(const char *, EAccessMode); 1297{; 1298 return kFALSE;; 1299}; 1300 ; 1301////////////////////////////////////////////////////////////////////////////////; 1302/// Returns TRUE if the url in 'path' points to the local file system.; 1303/// This is used to avoid going through the NIC card for local operations.; 1304 ; 1305Bool_t TSystem::IsPathLocal(const char *path); 1306{; 1307 Bool_t localPath = kTRUE;; 1308 ; 1309 TUrl url(path);; 1310 if (strlen(url.GetHost()) > 0) {; 1311 // Check locality; 1312 localPath = kFALSE;; 1313 TInetAddress a(gSystem->GetHostByName(url.GetHost()));; 1314 TInetAddress b(gSystem->GetHostByName(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:39989,access,access,39989,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,2,['access'],['access']
Security,"; 132 << Endl;; 133 ; 134}; 135 ; 136////////////////////////////////////////////////////////////////////////////////; 137/// Options to be set in the option string:; 138///; 139/// - LearningRate <float> DNN learning rate parameter.; 140/// - DecayRate <float> Decay rate for learning parameter.; 141/// - TestRate <int> Period of validation set error computation.; 142/// - BatchSize <int> Number of event per batch.; 143///; 144/// - ValidationSize <string> How many events to use for validation. ""0.2""; 145/// or ""20%"" indicates that a fifth of the; 146/// training data should be used. ""100""; 147/// indicates that 100 events should be used.; 148 ; 149void TMVA::MethodDNN::DeclareOptions(); 150{; 151 ; 152 DeclareOptionRef(fLayoutString=""SOFTSIGN|(N+100)*2,LINEAR"",; 153 ""Layout"",; 154 ""Layout of the network."");; 155 ; 156 DeclareOptionRef(fValidationSize = ""20%"", ""ValidationSize"",; 157 ""Part of the training data to use for ""; 158 ""validation. Specify as 0.2 or 20% to use a ""; 159 ""fifth of the data set as validation set. ""; 160 ""Specify as 100 to use exactly 100 events. ""; 161 ""(Default: 20%)"");; 162 ; 163 DeclareOptionRef(fErrorStrategy=""CROSSENTROPY"",; 164 ""ErrorStrategy"",; 165 ""Loss function: Mean squared error (regression)""; 166 "" or cross entropy (binary classification)."");; 167 AddPreDefVal(TString(""CROSSENTROPY""));; 168 AddPreDefVal(TString(""SUMOFSQUARES""));; 169 AddPreDefVal(TString(""MUTUALEXCLUSIVE""));; 170 ; 171 DeclareOptionRef(fWeightInitializationString=""XAVIER"",; 172 ""WeightInitialization"",; 173 ""Weight initialization strategy"");; 174 AddPreDefVal(TString(""XAVIER""));; 175 AddPreDefVal(TString(""XAVIERUNIFORM""));; 176 ; 177 DeclareOptionRef(fArchitectureString = ""CPU"", ""Architecture"", ""Which architecture to perform the training on."");; 178 AddPreDefVal(TString(""STANDARD""));; 179 AddPreDefVal(TString(""CPU""));; 180 AddPreDefVal(TString(""GPU""));; 181 AddPreDefVal(TString(""OPENCL""));; 182 ; 183 DeclareOptionRef(; 184 fTrainingStrategyString = ""LearningRate=1e-1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:5527,validat,validation,5527,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['validat'],['validation']
Security,"; 16280{; 16281#if defined(GCC_DIAGNOSTIC); 16282#pragma GCC diagnostic push; 16283#pragma GCC diagnostic ignored ""-Wcast-align""; 16284#endif /* defined(GCC_DIAGNOSTIC) */; 16285 ; 16286 /* We used an aligned pointer in SSL_set_app_data */; 16287 struct mg_connection *conn = (struct mg_connection *)SSL_get_app_data(ssl);; 16288 ; 16289#if defined(GCC_DIAGNOSTIC); 16290#pragma GCC diagnostic pop; 16291#endif /* defined(GCC_DIAGNOSTIC) */; 16292 ; 16293 const char *servername = SSL_get_servername(ssl, TLSEXT_NAMETYPE_host_name);; 16294 ; 16295 (void)ad;; 16296 (void)arg;; 16297 ; 16298 if ((conn == NULL) || (conn->phys_ctx == NULL)) {; 16299 DEBUG_ASSERT(0);; 16300 return SSL_TLSEXT_ERR_NOACK;; 16301 }; 16302 conn->dom_ctx = &(conn->phys_ctx->dd);; 16303 ; 16304 /* Old clients (Win XP) will not support SNI. Then, there; 16305 * is no server name available in the request - we can; 16306 * only work with the default certificate.; 16307 * Multiple HTTPS hosts on one IP+port are only possible; 16308 * with a certificate containing all alternative names.; 16309 */; 16310 if ((servername == NULL) || (*servername == 0)) {; 16311 DEBUG_TRACE(""%s"", ""SSL connection not supporting SNI"");; 16312 mg_lock_context(conn->phys_ctx);; 16313 SSL_set_SSL_CTX(ssl, conn->dom_ctx->ssl_ctx);; 16314 mg_unlock_context(conn->phys_ctx);; 16315 return SSL_TLSEXT_ERR_NOACK;; 16316 }; 16317 ; 16318 DEBUG_TRACE(""TLS connection to host %s"", servername);; 16319 ; 16320 while (conn->dom_ctx) {; 16321 if (!mg_strcasecmp(servername,; 16322 conn->dom_ctx->config[AUTHENTICATION_DOMAIN])) {; 16323 /* Found matching domain */; 16324 DEBUG_TRACE(""TLS domain %s found"",; 16325 conn->dom_ctx->config[AUTHENTICATION_DOMAIN]);; 16326 break;; 16327 }; 16328 mg_lock_context(conn->phys_ctx);; 16329 conn->dom_ctx = conn->dom_ctx->next;; 16330 mg_unlock_context(conn->phys_ctx);; 16331 }; 16332 ; 16333 if (conn->dom_ctx == NULL) {; 16334 /* Default domain */; 16335 DEBUG_TRACE(""TLS default domain %s used"",; 16336 conn->ph",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:481989,certificate,certificate,481989,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['certificate'],['certificate']
Security,"; 16281{; 16282#if defined(GCC_DIAGNOSTIC); 16283#pragma GCC diagnostic push; 16284#pragma GCC diagnostic ignored ""-Wcast-align""; 16285#endif /* defined(GCC_DIAGNOSTIC) */; 16286 ; 16287 /* We used an aligned pointer in SSL_set_app_data */; 16288 struct mg_connection *conn = (struct mg_connection *)SSL_get_app_data(ssl);; 16289 ; 16290#if defined(GCC_DIAGNOSTIC); 16291#pragma GCC diagnostic pop; 16292#endif /* defined(GCC_DIAGNOSTIC) */; 16293 ; 16294 const char *servername = SSL_get_servername(ssl, TLSEXT_NAMETYPE_host_name);; 16295 ; 16296 (void)ad;; 16297 (void)arg;; 16298 ; 16299 if ((conn == NULL) || (conn->phys_ctx == NULL)) {; 16300 DEBUG_ASSERT(0);; 16301 return SSL_TLSEXT_ERR_NOACK;; 16302 }; 16303 conn->dom_ctx = &(conn->phys_ctx->dd);; 16304 ; 16305 /* Old clients (Win XP) will not support SNI. Then, there; 16306 * is no server name available in the request - we can; 16307 * only work with the default certificate.; 16308 * Multiple HTTPS hosts on one IP+port are only possible; 16309 * with a certificate containing all alternative names.; 16310 */; 16311 if ((servername == NULL) || (*servername == 0)) {; 16312 DEBUG_TRACE(""%s"", ""SSL connection not supporting SNI"");; 16313 mg_lock_context(conn->phys_ctx);; 16314 SSL_set_SSL_CTX(ssl, conn->dom_ctx->ssl_ctx);; 16315 mg_unlock_context(conn->phys_ctx);; 16316 return SSL_TLSEXT_ERR_NOACK;; 16317 }; 16318 ; 16319 DEBUG_TRACE(""TLS connection to host %s"", servername);; 16320 ; 16321 while (conn->dom_ctx) {; 16322 if (!mg_strcasecmp(servername,; 16323 conn->dom_ctx->config[AUTHENTICATION_DOMAIN])) {; 16324 /* Found matching domain */; 16325 DEBUG_TRACE(""TLS domain %s found"",; 16326 conn->dom_ctx->config[AUTHENTICATION_DOMAIN]);; 16327 break;; 16328 }; 16329 mg_lock_context(conn->phys_ctx);; 16330 conn->dom_ctx = conn->dom_ctx->next;; 16331 mg_unlock_context(conn->phys_ctx);; 16332 }; 16333 ; 16334 if (conn->dom_ctx == NULL) {; 16335 /* Default domain */; 16336 DEBUG_TRACE(""TLS default domain %s used"",; 16337 conn->ph",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:482022,certificate,certificate,482022,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['certificate'],['certificate']
Security,"; 223 */; 224 template <class IT>; 225 void GetCoordinates( IT begin ) const {; 226 Scalar a = Scalar(0);; 227 Scalar b = Scalar(0);; 228 Scalar c = Scalar(0);; 229 GetCoordinates(a, b, c);; 230 *begin++ = a;; 231 *begin++ = b;; 232 *begin = c;; 233 }; 234 ; 235 /**; 236 set the values of the vector from the cartesian components (x,y,z); 237 (if the vector is held in polar or cylindrical eta coordinates,; 238 then (x, y, z) are converted to that form); 239 */; 240 PositionVector3D<CoordSystem, Tag>& SetXYZ (Scalar a, Scalar b, Scalar c) {; 241 fCoordinates.SetXYZ(a,b,c);; 242 return *this;; 243 }; 244 ; 245 // ------------------- Equality -----------------; 246 ; 247 /**; 248 Exact equality; 249 */; 250 bool operator==(const PositionVector3D & rhs) const {; 251 return fCoordinates==rhs.fCoordinates;; 252 }; 253 bool operator!= (const PositionVector3D & rhs) const {; 254 return !(operator==(rhs));; 255 }; 256 ; 257 // ------ Individual element access, in various coordinate systems ------; 258 ; 259 /**; 260 Dimension; 261 */; 262 unsigned int Dimension() const; 263 {; 264 return fDimension;; 265 };; 266 ; 267 /**; 268 Cartesian X, converting if necessary from internal coordinate system.; 269 */; 270 Scalar X() const { return fCoordinates.X(); }; 271 ; 272 /**; 273 Cartesian Y, converting if necessary from internal coordinate system.; 274 */; 275 Scalar Y() const { return fCoordinates.Y(); }; 276 ; 277 /**; 278 Cartesian Z, converting if necessary from internal coordinate system.; 279 */; 280 Scalar Z() const { return fCoordinates.Z(); }; 281 ; 282 /**; 283 Polar R, converting if necessary from internal coordinate system.; 284 */; 285 Scalar R() const { return fCoordinates.R(); }; 286 ; 287 /**; 288 Polar theta, converting if necessary from internal coordinate system.; 289 */; 290 Scalar Theta() const { return fCoordinates.Theta(); }; 291 ; 292 /**; 293 Polar phi, converting if necessary from internal coordinate system.; 294 */; 295 Scalar Phi() const { return fCoordin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2PositionVector3D_8h_source.html:8087,access,access,8087,doc/master/GenVector_2PositionVector3D_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2PositionVector3D_8h_source.html,1,['access'],['access']
Security,"; 241 memcpy(buf_out, &l64buf, sizeof(Long64_t));; 242 return l64buf;; 243 }; 244 ; 245 // else: doesn't fit into a Long64_t:; 246 memset(buf_out, 0, fCoordBufferSize);; 247 for (Int_t i = 0; i < fNdimensions; ++i) {; 248 const Int_t offset = fBitOffsets[i] / 8;; 249 const Int_t shift = fBitOffsets[i] % 8;; 250 ULong64_t val = coord_in[i];; 251 ; 252 Char_t* pbuf = buf_out + offset;; 253 *pbuf += 0xff & (val << shift);; 254 val = val >> (8 - shift);; 255 while (val) {; 256 ++pbuf;; 257 *pbuf += 0xff & val;; 258 val = val >> 8;; 259 }; 260 }; 261 ; 262 return GetHashFromBuffer(buf_out);; 263}; 264 ; 265/*; 266////////////////////////////////////////////////////////////////////////////////; 267/// Calculate hash from bin indexes.; 268 ; 269ULong64_t THnSparseCoordCompression::GetHashFromCoords(const Int_t* coord) const; 270{; 271 // Bins are addressed in two different modes, depending; 272 // on whether the compact bin index fits into a Long64_t or not.; 273 // If it does, we can use it as a ""perfect hash"" for the TExMap.; 274 // If not we build a hash from the compact bin index, and use that; 275 // as the TExMap's hash.; 276 ; 277 if (fCoordBufferSize <= 8) {; 278 // fits into a Long64_t; 279 ULong64_t hash1 = 0;; 280 for (Int_t i = 0; i < fNdimensions; ++i) {; 281 hash1 += coord[i] << fBitOffsets[i];; 282 }; 283 return hash1;; 284 }; 285 ; 286 // else: doesn't fit into a Long64_t:; 287 memset(coord, 0, fCoordBufferSize);; 288 for (Int_t i = 0; i < fNdimensions; ++i) {; 289 const Int_t offset = fBitOffsets[i] / 8;; 290 const Int_t shift = fBitOffsets[i] % 8;; 291 ULong64_t val = coord[i];; 292 ; 293 Char_t* pbuf = fCoordBuffer + offset;; 294 *pbuf += 0xff & (val << shift);; 295 val = val >> (8 - shift);; 296 while (val) {; 297 ++pbuf;; 298 *pbuf += 0xff & val;; 299 val = val >> 8;; 300 }; 301 }; 302 ; 303 ULong64_t hash = 5381;; 304 Char_t* str = fCoordBuffer;; 305 while (str - fCoordBuffer < fCoordBufferSize) {; 306 hash *= 5;; 307 hash += *(str++);; 308 }; 309 ret",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THnSparse_8cxx_source.html:9601,hash,hash,9601,doc/master/THnSparse_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THnSparse_8cxx_source.html,1,['hash'],['hash']
Security,"; 2502 if (!infoalloc) {; 2503 Error(""BuildOld"",""Unable to create the StreamerInfo for %s."",TString::Format(""%s@@%d"",GetName(),GetOnFileClassVersion()).Data());; 2504 } else {; 2505 infoalloc->SetBit(kBuildOldUsed,false);; 2506 infoalloc->BuildCheck();; 2507 infoalloc->BuildOld();; 2508 allocClass = infoalloc->GetClass();; 2509 }; 2510 }; 2511 ; 2512 // Now that we are caching the unconverted element, we do not assign it to the real type even if we could have!; 2513 if (element->GetNewType()>0 /* intentionally not including base class for now */; 2514 && !rules.HasRuleWithTarget( element->GetName(), kTRUE ) ) {; 2515 ; 2516 TStreamerElement *copy = (TStreamerElement*)element->Clone();; 2517 R__TObjArray_InsertBefore( fElements, copy, element );; 2518 next(); // move the cursor passed the insert object.; 2519 copy->SetBit(TStreamerElement::kRepeat);; 2520 element = copy;; 2521 ; 2522 // Warning(""BuildOld"",""%s::%s is not set from the version %d of %s (You must add a rule for it)\n"",GetName(), element->GetName(), GetClassVersion(), GetName() );; 2523 } else {; 2524 // If the element is just cached and not repeat, we need to inject an element; 2525 // to insure the writing.; 2526 TStreamerElement *writecopy = (TStreamerElement*)element->Clone();; 2527 R__TObjArray_InsertAfter( fElements, writecopy, element );; 2528 next(); // move the cursor passed the insert object.; 2529 writecopy->SetBit(TStreamerElement::kWrite);; 2530 writecopy->SetNewType( writecopy->GetType() );; 2531 writecopy->SetOffset(element->GetOffset());; 2532 }; 2533 element->SetBit(TStreamerElement::kCache);; 2534 element->SetNewType( element->GetType() );; 2535 element->SetOffset(infoalloc ? infoalloc->GetOffset(element->GetName()) : 0);; 2536 } else if (rules.HasRuleWithTarget( element->GetName(), kTRUE ) ) {; 2537 // The data member exist in the onfile StreamerInfo and there is a rule; 2538 // that has the same member 'only' has a target ... so this means we are; 2539 // asked to ignore the input data ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:100858,inject,inject,100858,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['inject'],['inject']
Security,"; 2793/// A good default will be provided so that a typical user session should be at; 2794/// most:; 2795/// ~~~ {.cpp}; 2796/// root[1] gSystem->SetIncludePath(""-I$ROOTSYS/include; 2797/// -I$HOME/mypackage/include"");; 2798/// root[2] .x myfunc.C++(10,20);; 2799/// ~~~; 2800/// The user may sometimes try to compile a script before it has loaded all the; 2801/// needed shared libraries. In this case we want to be helpful and output a; 2802/// list of the unresolved symbols. So if the loading of the created shared; 2803/// library fails, we will try to build a executable that contains the; 2804/// script. The linker should then output a list of missing symbols.; 2805///; 2806/// To support this we provide a TSystem::SetMakeExe() function, that sets the; 2807/// directive telling how to create an executable. The loader will need; 2808/// to be informed of all the libraries available. The information about; 2809/// the libraries that has been loaded by .L and TSystem::Load() is accessible; 2810/// to the script compiler. However, the information about; 2811/// the libraries that have been selected at link time by the application; 2812/// builder (like the root libraries for root.exe) are not available and need; 2813/// to be explicitly listed in fLinkedLibs (either by default or by a call to; 2814/// TSystem::SetLinkedLibs()).; 2815///; 2816/// To simplify customization we could also add to the .rootrc support for the; 2817/// variables; 2818/// ~~~ {.cpp}; 2819/// Unix.*.Root.IncludePath: -I$ROOTSYS/include; 2820/// WinNT.*.Root.IncludePath: -I%ROOTSYS%/include; 2821///; 2822/// Unix.*.Root.LinkedLibs: -L$ROOTSYS/lib -lBase ....; 2823/// WinNT.*.Root.LinkedLibs: %ROOTSYS%/lib/*.lib msvcrt.lib ....; 2824/// ~~~; 2825/// And also support for MakeSharedLibs() and MakeExe().; 2826///; 2827/// (the ... have to be replaced by the actual values and are here only to; 2828/// shorten this comment).; 2829///; 2830/// Note that the default behavior is to remove libraries when c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:92692,access,accessible,92692,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['access'],['accessible']
Security,"; 2844 ; 2845#if defined(_WIN32); 2846 while (*c) {; 2847 if (*c < 32) {; 2848 /* Control character */; 2849 return 1;; 2850 }; 2851 if ((*c == '>') || (*c == '<') || (*c == '|')) {; 2852 /* stdin/stdout redirection character */; 2853 return 1;; 2854 }; 2855 if ((*c == '*') || (*c == '?')) {; 2856 /* Wildcard character */; 2857 return 1;; 2858 }; 2859 if (*c == '""') {; 2860 /* Windows quotation */; 2861 return 1;; 2862 }; 2863 c++;; 2864 }; 2865#endif; 2866 ; 2867 /* Nothing suspicious found */; 2868 return 0;; 2869}; 2870 ; 2871 ; 2872/* mg_fopen will open a file either in memory or on the disk.; 2873 * The input parameter path is a string in UTF-8 encoding.; 2874 * The input parameter mode is MG_FOPEN_MODE_*; 2875 * On success, fp will be set in the output struct mg_file.; 2876 * All status members will also be set.; 2877 * The function returns 1 on success, 0 on error. */; 2878static int; 2879mg_fopen(const struct mg_connection *conn,; 2880 const char *path,; 2881 int mode,; 2882 struct mg_file *filep); 2883{; 2884 int found;; 2885 ; 2886 if (!filep) {; 2887 return 0;; 2888 }; 2889 filep->access.fp = NULL;; 2890 ; 2891 if (mg_path_suspicious(conn, path)) {; 2892 return 0;; 2893 }; 2894 ; 2895 /* filep is initialized in mg_stat: all fields with memset to,; 2896 * some fields like size and modification date with values */; 2897 found = mg_stat(conn, path, &(filep->stat));; 2898 ; 2899 if ((mode == MG_FOPEN_MODE_READ) && (!found)) {; 2900 /* file does not exist and will not be created */; 2901 return 0;; 2902 }; 2903 ; 2904#if defined(_WIN32); 2905 {; 2906 wchar_t wbuf[UTF16_PATH_MAX];; 2907 path_to_unicode(conn, path, wbuf, ARRAY_SIZE(wbuf));; 2908 switch (mode) {; 2909 case MG_FOPEN_MODE_READ:; 2910 filep->access.fp = _wfopen(wbuf, L""rb"");; 2911 break;; 2912 case MG_FOPEN_MODE_WRITE:; 2913 filep->access.fp = _wfopen(wbuf, L""wb"");; 2914 break;; 2915 case MG_FOPEN_MODE_APPEND:; 2916 filep->access.fp = _wfopen(wbuf, L""ab"");; 2917 break;; 2918 }; 2919 }; 2920#else; 29",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:88342,access,access,88342,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['access'],['access']
Security,"; 2845 ; 2846#if defined(_WIN32); 2847 while (*c) {; 2848 if (*c < 32) {; 2849 /* Control character */; 2850 return 1;; 2851 }; 2852 if ((*c == '>') || (*c == '<') || (*c == '|')) {; 2853 /* stdin/stdout redirection character */; 2854 return 1;; 2855 }; 2856 if ((*c == '*') || (*c == '?')) {; 2857 /* Wildcard character */; 2858 return 1;; 2859 }; 2860 if (*c == '""') {; 2861 /* Windows quotation */; 2862 return 1;; 2863 }; 2864 c++;; 2865 }; 2866#endif; 2867 ; 2868 /* Nothing suspicious found */; 2869 return 0;; 2870}; 2871 ; 2872 ; 2873/* mg_fopen will open a file either in memory or on the disk.; 2874 * The input parameter path is a string in UTF-8 encoding.; 2875 * The input parameter mode is MG_FOPEN_MODE_*; 2876 * On success, fp will be set in the output struct mg_file.; 2877 * All status members will also be set.; 2878 * The function returns 1 on success, 0 on error. */; 2879static int; 2880mg_fopen(const struct mg_connection *conn,; 2881 const char *path,; 2882 int mode,; 2883 struct mg_file *filep); 2884{; 2885 int found;; 2886 ; 2887 if (!filep) {; 2888 return 0;; 2889 }; 2890 filep->access.fp = NULL;; 2891 ; 2892 if (mg_path_suspicious(conn, path)) {; 2893 return 0;; 2894 }; 2895 ; 2896 /* filep is initialized in mg_stat: all fields with memset to,; 2897 * some fields like size and modification date with values */; 2898 found = mg_stat(conn, path, &(filep->stat));; 2899 ; 2900 if ((mode == MG_FOPEN_MODE_READ) && (!found)) {; 2901 /* file does not exist and will not be created */; 2902 return 0;; 2903 }; 2904 ; 2905#if defined(_WIN32); 2906 {; 2907 wchar_t wbuf[UTF16_PATH_MAX];; 2908 path_to_unicode(conn, path, wbuf, ARRAY_SIZE(wbuf));; 2909 switch (mode) {; 2910 case MG_FOPEN_MODE_READ:; 2911 filep->access.fp = _wfopen(wbuf, L""rb"");; 2912 break;; 2913 case MG_FOPEN_MODE_WRITE:; 2914 filep->access.fp = _wfopen(wbuf, L""wb"");; 2915 break;; 2916 case MG_FOPEN_MODE_APPEND:; 2917 filep->access.fp = _wfopen(wbuf, L""ab"");; 2918 break;; 2919 }; 2920 }; 2921#else; 29",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:88374,access,access,88374,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['access'],['access']
Security,"; 302 ; 303 ULong64_t hash = 5381;; 304 Char_t* str = fCoordBuffer;; 305 while (str - fCoordBuffer < fCoordBufferSize) {; 306 hash *= 5;; 307 hash += *(str++);; 308 }; 309 return hash;; 310}; 311*/; 312 ; 313 ; 314////////////////////////////////////////////////////////////////////////////////; 315/// Calculate hash from compact bin index.; 316 ; 317ULong64_t THnSparseCoordCompression::GetHashFromBuffer(const Char_t* buf) const; 318{; 319 // Bins are addressed in two different modes, depending; 320 // on whether the compact bin index fits into a Long64_t or not.; 321 // If it does, we can use it as a ""perfect hash"" for the TExMap.; 322 // If not we build a hash from the compact bin index, and use that; 323 // as the TExMap's hash.; 324 ; 325 if (fCoordBufferSize <= 8) {; 326 // fits into a Long64_t; 327 ULong64_t hash1 = 0;; 328 memcpy(&hash1, buf, fCoordBufferSize);; 329 return hash1;; 330 }; 331 ; 332 // else: doesn't fit into a Long64_t:; 333 ULong64_t hash = 5381;; 334 const Char_t* str = buf;; 335 while (str - buf < fCoordBufferSize) {; 336 hash *= 5;; 337 hash += *(str++);; 338 }; 339 return hash;; 340}; 341 ; 342 ; 343 ; 344 ; 345/** \class THnSparseCompactBinCoord; 346THnSparseCompactBinCoord is a class used by THnSparse internally. It; 347maps between an n-dimensional array of bin coordinates (indices) and; 348its compact version, the THnSparseCoordCompression.; 349*/; 350 ; 351class THnSparseCompactBinCoord: public THnSparseCoordCompression {; 352public:; 353 THnSparseCompactBinCoord(Int_t dim, const Int_t* nbins);; 354 ~THnSparseCompactBinCoord();; 355 Int_t* GetCoord() { return fCurrentBin; }; 356 const Char_t* GetBuffer() const { return fCoordBuffer; }; 357 ULong64_t GetHash() const { return fHash; }; 358 void UpdateCoord() {; 359 fHash = SetBufferFromCoord(fCurrentBin, fCoordBuffer);; 360 }; 361 void SetCoord(const Int_t* coord) {; 362 memcpy(fCurrentBin, coord, sizeof(Int_t) * GetNdimensions());; 363 fHash = SetBufferFromCoord(coord, fCoordBuffer);; 3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THnSparse_8cxx_source.html:11382,hash,hash,11382,doc/master/THnSparse_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THnSparse_8cxx_source.html,4,['hash'],['hash']
Security,"; 312 TVirtualCollectionProxy *proxy = src->GetCollectionProxy();; 313 if (proxy->GetValueClass() == 0) {; 314 // ... would need to check if we already have; 315 // the rule (or any rule?); 316 }; 317 }; 318 }; 319 }; 320#endif; 321 return arr;; 322}; 323 ; 324////////////////////////////////////////////////////////////////////////////////; 325/// Return all the rules that applies to the specified version of the given 'source' class.; 326/// User has to delete the returned array; 327 ; 328const TSchemaRuleSet::TMatches TSchemaRuleSet::FindRules( const TString &source, Int_t version ) const; 329{; 330 TObject* obj;; 331 TObjArrayIter it( fAllRules );; 332 TMatches arr;; 333 // arr->SetOwner( kFALSE );; 334 ; 335 while( (obj = it.Next()) ) {; 336 TSchemaRule* rule = (TSchemaRule*)obj;; 337 if( rule->GetSourceClass() == source && rule->TestVersion( version ) ); 338 arr.push_back( rule );; 339 }; 340 ; 341 return arr;; 342}; 343 ; 344////////////////////////////////////////////////////////////////////////////////; 345/// Return all the rules that applies to the specified checksum of the given 'source' class.; 346/// User has to delete the returned array; 347 ; 348const TSchemaRuleSet::TMatches TSchemaRuleSet::FindRules( const TString &source, UInt_t checksum ) const; 349{; 350 TObject* obj;; 351 TObjArrayIter it( fAllRules );; 352 TMatches arr;; 353 // arr->SetOwner( kFALSE );; 354 ; 355 while( (obj = it.Next()) ) {; 356 TSchemaRule* rule = (TSchemaRule*)obj;; 357 if( rule->GetSourceClass() == source && rule->TestChecksum( checksum ) ); 358 arr.push_back( rule );; 359 }; 360 ; 361 return arr;; 362}; 363 ; 364////////////////////////////////////////////////////////////////////////////////; 365/// Return all the rules that applies to the specified version OR checksum of the given 'source' class.; 366/// User has to delete the returned array; 367 ; 368const TSchemaRuleSet::TMatches TSchemaRuleSet::FindRules( const TString &source, Int_t version, UInt_t checksum ) const; 36",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRuleSet_8cxx_source.html:12694,checksum,checksum,12694,doc/master/TSchemaRuleSet_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRuleSet_8cxx_source.html,1,['checksum'],['checksum']
Security,"; 348 ///; 349 /// For example, the following snippet prints out a thread-safe progress bar of the events processed by RDataFrame; 350 /// \code; 351 /// auto c = tdf.Count(); // any action would do, but `Count` is the most lightweight; 352 /// std::string progress;; 353 /// std::mutex bar_mutex;; 354 /// c.OnPartialResultSlot(nEvents / 100, [&progress, &bar_mutex](unsigned int, ULong64_t &) {; 355 /// std::lock_guard<std::mutex> lg(bar_mutex);; 356 /// progress.push_back('#');; 357 /// std::cout << ""\r["" << std::left << std::setw(100) << progress << ']' << std::flush;; 358 /// });; 359 /// std::cout << ""Analysis running..."" << std::endl;; 360 /// *c; // trigger the event loop by accessing an action's result; 361 /// std::cout << ""\nDone!"" << std::endl;; 362 /// \endcode; 363 // clang-format on; 364 RResultPtr<T> &OnPartialResultSlot(ULong64_t everyNEvents, std::function<void(unsigned int, T &)> callback); 365 {; 366 ThrowIfNull();; 367 auto actionPtr = fActionPtr;; 368 auto c = [actionPtr, callback](unsigned int slot) {; 369 auto partialResult = static_cast<Value_t *>(actionPtr->PartialUpdate(slot));; 370 callback(slot, *partialResult);; 371 };; 372 fLoopManager->RegisterCallback(everyNEvents, std::move(c));; 373 return *this;; 374 }; 375 ; 376 // clang-format off; 377 /// Check whether the result has already been computed; 378 ///; 379 /// ~~~{.cpp}; 380 /// auto res = df.Count();; 381 /// res.IsReady(); // false, access will trigger event loop; 382 /// std::cout << *res << std::endl; // triggers event loop; 383 /// res.IsReady(); // true; 384 /// ~~~; 385 // clang-format on; 386 bool IsReady() const; 387 {; 388 if (fActionPtr == nullptr); 389 return false;; 390 return fActionPtr->HasRun();; 391 }; 392};; 393 ; 394template <typename T>; 395void RResultPtr<T>::TriggerRun(); 396{; 397 fLoopManager->Run();; 398}; 399 ; 400template <class T1, class T2>; 401bool operator==(const RResultPtr<T1> &lhs, const RResultPtr<T2> &rhs); 402{; 403 return lhs.fObjPtr == rhs.fObjPt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RResultPtr_8hxx_source.html:16387,access,accessing,16387,doc/master/RResultPtr_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RResultPtr_8hxx_source.html,1,['access'],['accessing']
Security,"; 403 /// \brief Define a new column.; 404 /// \param[in] name The name of the defined column.; 405 /// \param[in] expression Function, lambda expression, functor class or any other callable object producing the defined value. Returns the value that will be assigned to the defined column.; 406 /// \param[in] columns Names of the columns/branches in input to the producer function.; 407 /// \return the first node of the computation graph for which the new quantity is defined.; 408 ///; 409 /// Define a column that will be visible from all subsequent nodes; 410 /// of the functional chain. The `expression` is only evaluated for entries that pass; 411 /// all the preceding filters.; 412 /// A new variable is created called `name`, accessible as if it was contained; 413 /// in the dataset from subsequent transformations/actions.; 414 ///; 415 /// Use cases include:; 416 /// * caching the results of complex calculations for easy and efficient multiple access; 417 /// * extraction of quantities of interest from complex objects; 418 ///; 419 /// An exception is thrown if the name of the new column is already in use in this branch of the computation graph.; 420 ///; 421 /// ### Example usage:; 422 /// ~~~{.cpp}; 423 /// // assuming a function with signature:; 424 /// double myComplexCalculation(const RVec<float> &muon_pts);; 425 /// // we can pass it directly to Define; 426 /// auto df_with_define = df.Define(""newColumn"", myComplexCalculation, {""muon_pts""});; 427 /// // alternatively, we can pass the body of the function as a string, as in Filter:; 428 /// auto df_with_define = df.Define(""newColumn"", ""x*x + y*y"");; 429 /// ~~~; 430 ///; 431 /// \note If the body of the string expression contains an explicit `return` statement (even if it is in a nested; 432 /// scope), RDataFrame _will not_ add another one in front of the expression. So this will not work:; 433 /// ~~~{.cpp}; 434 /// df.Define(""x2"", ""Map(v, [](float e) { return e*e; })""); 435 /// ~~~; 436 /// but instead thi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:20441,access,access,20441,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['access'],['access']
Security,"; 4158 if (!gROOT->GetListOfBrowsables()->FindObject(gGeoManager)); 4159 gROOT->GetListOfBrowsables()->Add(gGeoManager);; 4160 gGeoManager->UpdateElements();; 4161 return gGeoManager;; 4162}; 4163 ; 4164////////////////////////////////////////////////////////////////////////////////; 4165/// Update element flags when geometry is loaded from a file.; 4166 ; 4167void TGeoManager::UpdateElements(); 4168{; 4169 if (!fElementTable); 4170 return;; 4171 TIter next(fMaterials);; 4172 TGeoMaterial *mat;; 4173 TGeoMixture *mix;; 4174 TGeoElement *elem, *elem_table;; 4175 Int_t i, nelem;; 4176 while ((mat = (TGeoMaterial *)next())) {; 4177 if (mat->IsMixture()) {; 4178 mix = (TGeoMixture *)mat;; 4179 nelem = mix->GetNelements();; 4180 for (i = 0; i < nelem; i++) {; 4181 elem = mix->GetElement(i);; 4182 if (!elem); 4183 continue;; 4184 elem_table = fElementTable->GetElement(elem->Z());; 4185 if (!elem_table); 4186 continue;; 4187 if (elem != elem_table) {; 4188 elem_table->SetDefined(elem->IsDefined());; 4189 elem_table->SetUsed(elem->IsUsed());; 4190 } else {; 4191 elem_table->SetDefined();; 4192 }; 4193 }; 4194 } else {; 4195 elem = mat->GetElement();; 4196 if (!elem); 4197 continue;; 4198 elem_table = fElementTable->GetElement(elem->Z());; 4199 if (!elem_table); 4200 continue;; 4201 if (elem != elem_table) {; 4202 elem_table->SetDefined(elem->IsDefined());; 4203 elem_table->SetUsed(elem->IsUsed());; 4204 } else {; 4205 elem_table->SetUsed();; 4206 }; 4207 }; 4208 }; 4209}; 4210 ; 4211////////////////////////////////////////////////////////////////////////////////; 4212/// Initialize PNE array for fast access via index and unique-id.; 4213 ; 4214Bool_t TGeoManager::InitArrayPNE() const; 4215{; 4216 if (fHashPNE) {; 4217 fArrayPNE = new TObjArray(fHashPNE->GetSize());; 4218 TIter next(fHashPNE);; 4219 TObject *obj;; 4220 while ((obj = next())) {; 4221 fArrayPNE->Add(obj);; 4222 }; 4223 return kTRUE;; 4224 }; 4225 return kFALSE;; 4226}; 4227 ; 4228///////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:153482,access,access,153482,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['access'],['access']
Security,"; 5064 // The DeclarationName is funcname, unless it's a ctor or dtor.; 5065 // FIXME: or operator or conversion! See enum clang::DeclarationName::NameKind.; 5066 ; 5067 if (RecDecl) {; 5068 if (RecDecl->getNameAsString() == funcname) {; 5069 clang::QualType QT = Ctx.getTypeDeclType(RecDecl);; 5070 DName = Ctx.DeclarationNames.getCXXConstructorName(Ctx.getCanonicalType(QT));; 5071 } else if (funcname[0] == '~' && RecDecl->getNameAsString() == funcname + 1) {; 5072 clang::QualType QT = Ctx.getTypeDeclType(RecDecl);; 5073 DName = Ctx.DeclarationNames.getCXXDestructorName(Ctx.getCanonicalType(QT));; 5074 } else {; 5075 DName = &Ctx.Idents.get(funcname);; 5076 }; 5077 } else {; 5078 DName = &Ctx.Idents.get(funcname);; 5079 }; 5080 ; 5081 // NotForRedeclaration: we want to find names in inline namespaces etc.; 5082 clang::LookupResult R(S, DName, clang::SourceLocation(),; 5083 Sema::LookupOrdinaryName, clang::Sema::NotForRedeclaration);; 5084 R.suppressDiagnostics(); // else lookup with NotForRedeclaration will check access etc; 5085 S.LookupQualifiedName(R, const_cast<DeclContext*>(DeclCtx));; 5086 if (R.empty()) return;; 5087 R.resolveKind();; 5088 res.reserve(res.size() + (R.end() - R.begin()));; 5089 for (clang::LookupResult::iterator IR = R.begin(), ER = R.end();; 5090 IR != ER; ++IR) {; 5091 if (const clang::FunctionDecl* FD; 5092 = llvm::dyn_cast<const clang::FunctionDecl>(*IR)) {; 5093 if (!FD->getDescribedFunctionTemplate()) {; 5094 res.push_back(FD);; 5095 }; 5096 } else if (const auto *USD = llvm::dyn_cast<const clang::UsingShadowDecl>(*IR)) {; 5097 // FIXME: multi-level using; 5098 if (llvm::isa<clang::FunctionDecl>(USD->getTargetDecl())) {; 5099 res.push_back(USD);; 5100 }; 5101 }; 5102 }; 5103}; 5104 ; 5105////////////////////////////////////////////////////////////////////////////////; 5106/// Return pointer to cling interface function for a method of a class with; 5107/// a certain prototype, i.e. ""char*,int,float"". If the class is 0 the global; 5108/// fu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:197755,access,access,197755,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['access'],['access']
Security,"; 580 return kTRUE;; 581 }; 582 }; 583 ; 584 return kFALSE;; 585}; 586 ; 587////////////////////////////////////////////////////////////////////////////////; 588/// Remove a class from the class table. This happens when a shared library; 589/// is unloaded (i.e. the dtor's of the global init objects are called).; 590 ; 591void TClassTable::Remove(const char *cname); 592{; 593 if (!CheckClassTableInit()); 594 return;; 595 ; 596 std::lock_guard<std::mutex> lock(GetClassTableMutex());; 597 ; 598 UInt_t slot = ROOT::ClassTableHash(cname, fgSize);; 599 ; 600 TClassRec *r;; 601 TClassRec *prev = nullptr;; 602 for (r = fgTable[slot]; r; r = r->fNext) {; 603 if (!strcmp(r->fName, cname)) {; 604 if (prev); 605 prev->fNext = r->fNext;; 606 else; 607 fgTable[slot] = r->fNext;; 608 fgIdMap->Remove(r->fInfo->name());; 609 r->fNext = nullptr; // Do not delete the others.; 610 delete r;; 611 fgTally--;; 612 fgSorted = kFALSE;; 613 break;; 614 }; 615 prev = r;; 616 }; 617}; 618 ; 619////////////////////////////////////////////////////////////////////////////////; 620/// Find a class by name in the class table (using hash of name). Returns; 621/// 0 if the class is not in the table. Unless arguments insert is true in; 622/// which case a new entry is created and returned.; 623/// `cname` must be the normalized name of the class.; 624 ; 625TClassRec *TClassTable::FindElement(const char *cname, Bool_t insert); 626{; 627 // Internal routine, no explicit lock needed here.; 628 ; 629 UInt_t slot = ROOT::ClassTableHash(cname, fgSize);; 630 ; 631 for (TClassRec *r = fgTable[slot]; r; r = r->fNext); 632 if (strcmp(cname, r->fName) == 0); 633 return r;; 634 ; 635 if (!insert); 636 return nullptr;; 637 ; 638 fgTable[slot] = new TClassRec(fgTable[slot]);; 639 ; 640 fgTally++;; 641 return fgTable[slot];; 642}; 643 ; 644////////////////////////////////////////////////////////////////////////////////; 645/// Returns the ID of a class.; 646 ; 647Version_t TClassTable::GetID(const char *cname); 648{",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClassTable_8cxx_source.html:20389,hash,hash,20389,doc/master/TClassTable_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClassTable_8cxx_source.html,2,['hash'],['hash']
Security,"; 619 if ((i = len*sizeof(char)%sizeof(UInt_t)) != 0) {; 620 h = 0;; 621 const char* c = (const char*)p;; 622 while (i--); 623 h = ((h << kBitsPerByte*sizeof(char)) | *c++);; 624 Mash(hv, h);; 625 }; 626 }; 627 return hv;; 628}; 629 ; 630////////////////////////////////////////////////////////////////////////////////; 631/// Return a case-sensitive hash value (endian independent).; 632 ; 633UInt_t TString::HashCase() const; 634{; 635 UInt_t hv = (UInt_t)Length(); // Mix in the string length.; 636 UInt_t i = hv*sizeof(char)/sizeof(UInt_t);; 637 const UInt_t *p = (const UInt_t*)Data();; 638 {; 639 while (i--) {; 640#ifndef R__BYTESWAP; 641 UInt_t h = *p++;; 642 Mash(hv, SwapInt(h)); // XOR in the characters.; 643#else; 644 Mash(hv, *p++); // XOR in the characters.; 645#endif; 646 }; 647 }; 648 // XOR in any remaining characters:; 649 if ((i = Length()*sizeof(char)%sizeof(UInt_t)) != 0) {; 650 UInt_t h = 0;; 651 const char* c = (const char*)p;; 652 while (i--); 653 h = ((h << kBitsPerByte*sizeof(char)) | *c++);; 654 Mash(hv, h);; 655 }; 656 return hv;; 657}; 658 ; 659////////////////////////////////////////////////////////////////////////////////; 660/// Return a case-insensitive hash value (endian independent).; 661 ; 662UInt_t TString::HashFoldCase() const; 663{; 664 UInt_t hv = (UInt_t)Length(); // Mix in the string length.; 665 UInt_t i = hv;; 666 const unsigned char *p = (const unsigned char*)Data();; 667 while (i--) {; 668 Mash(hv, toupper(*p));; 669 ++p;; 670 }; 671 return hv;; 672}; 673 ; 674////////////////////////////////////////////////////////////////////////////////; 675/// Return hash value.; 676 ; 677UInt_t TString::Hash(ECaseCompare cmp) const; 678{; 679 return (cmp == kExact) ? HashCase() : HashFoldCase();; 680}; 681 ; 682 // MurmurHash3 - a blazingly fast public domain hash!; 683 // See http://code.google.com/p/smhasher/; 684 // There are two versions, one optimized for 32 bit and one for 64 bit.; 685 // They give different hash results!; 686 // We us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8cxx_source.html:19383,hash,hash,19383,doc/master/TString_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TString_8cxx_source.html,1,['hash'],['hash']
Security,"; 658 nbytes += obj->Write(name, option, bsize);; 659 }; 660 return nbytes;; 661 }; 662}; 663 ; 664////////////////////////////////////////////////////////////////////////////////; 665/// Write all objects in this collection. By default all objects in; 666/// the collection are written individually (each object gets its; 667/// own key). Note, this is recursive, i.e. objects in collections; 668/// in the collection are also written individually. To write all; 669/// objects using a single key specify a name and set option to; 670/// TObject::kSingleKey (i.e. 1).; 671 ; 672Int_t TCollection::Write(const char *name, Int_t option, Int_t bsize); 673{; 674 return ((const TCollection*)this)->Write(name,option,bsize);; 675}; 676 ; 677////////////////////////////////////////////////////////////////////////////////; 678/// Return the globally accessible collection.; 679 ; 680TCollection *TCollection::GetCurrentCollection(); 681{; 682 return fgCurrentCollection;; 683}; 684 ; 685////////////////////////////////////////////////////////////////////////////////; 686/// Set this collection to be the globally accessible collection.; 687 ; 688void TCollection::SetCurrentCollection(); 689{; 690 fgCurrentCollection = this;; 691}; 692 ; 693////////////////////////////////////////////////////////////////////////////////; 694/// Set up for garbage collection.; 695 ; 696void TCollection::StartGarbageCollection(); 697{; 698 R__LOCKGUARD2(gCollectionMutex);; 699 if (!fgGarbageCollection) {; 700 fgGarbageCollection = new TObjectTable;; 701 fgEmptyingGarbage = kFALSE;; 702 fgGarbageStack = 0;; 703 }; 704 fgGarbageStack++;; 705}; 706 ; 707////////////////////////////////////////////////////////////////////////////////; 708/// Do the garbage collection.; 709 ; 710void TCollection::EmptyGarbageCollection(); 711{; 712 R__LOCKGUARD2(gCollectionMutex);; 713 if (fgGarbageStack > 0) fgGarbageStack--;; 714 if (fgGarbageCollection && fgGarbageStack == 0 && fgEmptyingGarbage == kFALSE) {; 715 fgEmptyingG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollection_8cxx_source.html:23105,access,accessible,23105,doc/master/TCollection_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCollection_8cxx_source.html,1,['access'],['accessible']
Security,"; 6729/// extension).; 6730///; 6731/// Concretely, with the script named h1analysisProxy.C,; 6732///; 6733/// - The method calls the method (if it exist); 6734/// - Begin -> void h1analysisProxy_Begin(TTree*);; 6735/// - SlaveBegin -> void h1analysisProxy_SlaveBegin(TTree*);; 6736/// - Notify -> bool h1analysisProxy_Notify();; 6737/// - Process -> bool h1analysisProxy_Process(Long64_t);; 6738/// - SlaveTerminate -> void h1analysisProxy_SlaveTerminate();; 6739/// - Terminate -> void h1analysisProxy_Terminate();; 6740///; 6741/// If a file name macrofilename.h (or .hh, .hpp, .hxx, .hPP, .hXX) exist; 6742/// it is included before the declaration of the proxy class. This can; 6743/// be used in particular to insure that the include files needed by; 6744/// the macro file are properly loaded.; 6745///; 6746/// The default histogram is accessible via the variable named 'htemp'.; 6747///; 6748/// If the library of the classes describing the data in the branch is; 6749/// loaded, the skeleton will add the needed `include` statements and; 6750/// give the ability to access the object stored in the branches.; 6751///; 6752/// To draw px using the file hsimple.root (generated by the; 6753/// hsimple.C tutorial), we need a file named hsimple.cxx:; 6754/// ~~~ {.cpp}; 6755/// double hsimple() {; 6756/// return px;; 6757/// }; 6758/// ~~~; 6759/// MakeProxy can then be used indirectly via the TTree::Draw interface; 6760/// as follow:; 6761/// ~~~ {.cpp}; 6762/// new TFile(""hsimple.root""); 6763/// ntuple->Draw(""hsimple.cxx"");; 6764/// ~~~; 6765/// A more complete example is available in the tutorials directory:; 6766/// h1analysisProxy.cxx , h1analysProxy.h and h1analysisProxyCut.C; 6767/// which reimplement the selector found in h1analysis.C; 6768 ; 6769Int_t TTree::MakeProxy(const char* proxyClassname, const char* macrofilename, const char* cutfilename, const char* option, Int_t maxUnrolling); 6770{; 6771 GetPlayer();; 6772 if (!fPlayer) return 0;; 6773 return fPlayer->MakeProxy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:264119,access,access,264119,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['access'],['access']
Security,"; 82 && !fHist->IsInRange(useCoordBuf); 83 && (fHaveSkippedBin = kTRUE /* assignment! */));; 84 ; 85 if (coord && coord[0] == -1) {; 86 if (fCoord[0] == -1) {; 87 fHist->GetBinContent(fIndex, coord);; 88 } else {; 89 memcpy(coord, fCoord, fHist->GetNdimensions() * sizeof(Int_t));; 90 }; 91 }; 92 ; 93 return fIndex;; 94}; 95 ; 96 ; 97 ; 98/** \class THnSparseCoordCompression; 99THnSparseCoordCompression is a class used by THnSparse internally. It; 100represents a compacted n-dimensional array of bin coordinates (indices).; 101As the total number of bins in each dimension is known by THnSparse, bin; 102indices can be compacted to only use the amount of bins needed by the total; 103number of bins in each dimension. E.g. for a THnSparse with; 104{15, 100, 2, 20, 10, 100} bins per dimension, a bin index will only occupy; 10528 bits (4+7+1+5+4+7), i.e. less than a 32bit integer. The tricky part is; 106the fast compression and decompression, the platform-independent storage; 107(think of endianness: the bits of the number 0x123456 depend on the; 108platform), and the hashing needed by THnSparseArrayChunk.; 109*/; 110 ; 111 ; 112class THnSparseCoordCompression {; 113public:; 114 THnSparseCoordCompression(Int_t dim, const Int_t* nbins);; 115 THnSparseCoordCompression(const THnSparseCoordCompression& other);; 116 ~THnSparseCoordCompression();; 117 ; 118 THnSparseCoordCompression& operator=(const THnSparseCoordCompression& other);; 119 ; 120 ULong64_t GetHashFromBuffer(const Char_t* buf) const;; 121 Int_t GetBufferSize() const { return fCoordBufferSize; }; 122 Int_t GetNdimensions() const { return fNdimensions; }; 123 void SetCoordFromBuffer(const Char_t* buf_in, Int_t* coord_out) const;; 124 ULong64_t SetBufferFromCoord(const Int_t* coord_in, Char_t* buf_out) const;; 125 ; 126protected:; 127 Int_t GetNumBits(Int_t n) const {; 128 // return the number of bits allocated by the number ""n""; 129 Int_t r = (n > 0);; 130 while (n/=2) ++r;; 131 return r;; 132 }; 133private:; 134 Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THnSparse_8cxx_source.html:3857,hash,hashing,3857,doc/master/THnSparse_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THnSparse_8cxx_source.html,1,['hash'],['hashing']
Security,"; 8676 ; 8677 if (!conn || !conn->dom_ctx) {; 8678 return 0;; 8679 }; 8680 ; 8681 list = conn->dom_ctx->config[PROTECT_URI];; 8682 while ((list = next_option(list, &uri_vec, &filename_vec)) != NULL) {; 8683 if (!memcmp(conn->request_info.local_uri, uri_vec.ptr, uri_vec.len)) {; 8684 mg_snprintf(conn,; 8685 &truncated,; 8686 fname,; 8687 sizeof(fname),; 8688 ""%.*s"",; 8689 (int)filename_vec.len,; 8690 filename_vec.ptr);; 8691 ; 8692 if (truncated; 8693 || !mg_fopen(conn, fname, MG_FOPEN_MODE_READ, &file)) {; 8694 mg_cry_internal(conn,; 8695 ""%s: cannot open %s: %s"",; 8696 __func__,; 8697 fname,; 8698 strerror(errno));; 8699 }; 8700 break;; 8701 }; 8702 }; 8703 ; 8704 if (!is_file_opened(&file.access)) {; 8705 open_auth_file(conn, path, &file);; 8706 }; 8707 ; 8708 if (is_file_opened(&file.access)) {; 8709 authorized = authorize(conn, &file, NULL);; 8710 (void)mg_fclose(&file.access); /* ignore error on read only file */; 8711 }; 8712 ; 8713 return authorized;; 8714#else; 8715 (void)conn;; 8716 (void)path;; 8717 return 1;; 8718#endif /* NO_FILESYSTEMS */; 8719}; 8720 ; 8721 ; 8722/* Internal function. Assumes conn is valid */; 8723static void; 8724send_authorization_request(struct mg_connection *conn, const char *realm); 8725{; 8726 uint64_t nonce = (uint64_t)(conn->phys_ctx->start_time);; 8727 int trunc = 0;; 8728 char buf[128];; 8729 ; 8730 if (!realm) {; 8731 realm = conn->dom_ctx->config[AUTHENTICATION_DOMAIN];; 8732 }; 8733 ; 8734 mg_lock_context(conn->phys_ctx);; 8735 nonce += conn->dom_ctx->nonce_count;; 8736 ++conn->dom_ctx->nonce_count;; 8737 mg_unlock_context(conn->phys_ctx);; 8738 ; 8739 nonce ^= conn->dom_ctx->auth_nonce_mask;; 8740 conn->must_close = 1;; 8741 ; 8742 /* Create 401 response */; 8743 mg_response_header_start(conn, 401);; 8744 send_no_cache_header(conn);; 8745 send_additional_header(conn);; 8746 mg_response_header_add(conn, ""Content-Length"", ""0"", -1);; 8747 ; 8748 /* Content for ""WWW-Authenticate"" header */; 8749 mg_snprintf(conn,; 8750 &trunc,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:250989,access,access,250989,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,"['access', 'authoriz']","['access', 'authorized']"
Security,"; 8677 ; 8678 if (!conn || !conn->dom_ctx) {; 8679 return 0;; 8680 }; 8681 ; 8682 list = conn->dom_ctx->config[PROTECT_URI];; 8683 while ((list = next_option(list, &uri_vec, &filename_vec)) != NULL) {; 8684 if (!memcmp(conn->request_info.local_uri, uri_vec.ptr, uri_vec.len)) {; 8685 mg_snprintf(conn,; 8686 &truncated,; 8687 fname,; 8688 sizeof(fname),; 8689 ""%.*s"",; 8690 (int)filename_vec.len,; 8691 filename_vec.ptr);; 8692 ; 8693 if (truncated; 8694 || !mg_fopen(conn, fname, MG_FOPEN_MODE_READ, &file)) {; 8695 mg_cry_internal(conn,; 8696 ""%s: cannot open %s: %s"",; 8697 __func__,; 8698 fname,; 8699 strerror(errno));; 8700 }; 8701 break;; 8702 }; 8703 }; 8704 ; 8705 if (!is_file_opened(&file.access)) {; 8706 open_auth_file(conn, path, &file);; 8707 }; 8708 ; 8709 if (is_file_opened(&file.access)) {; 8710 authorized = authorize(conn, &file, NULL);; 8711 (void)mg_fclose(&file.access); /* ignore error on read only file */; 8712 }; 8713 ; 8714 return authorized;; 8715#else; 8716 (void)conn;; 8717 (void)path;; 8718 return 1;; 8719#endif /* NO_FILESYSTEMS */; 8720}; 8721 ; 8722 ; 8723/* Internal function. Assumes conn is valid */; 8724static void; 8725send_authorization_request(struct mg_connection *conn, const char *realm); 8726{; 8727 uint64_t nonce = (uint64_t)(conn->phys_ctx->start_time);; 8728 int trunc = 0;; 8729 char buf[128];; 8730 ; 8731 if (!realm) {; 8732 realm = conn->dom_ctx->config[AUTHENTICATION_DOMAIN];; 8733 }; 8734 ; 8735 mg_lock_context(conn->phys_ctx);; 8736 nonce += conn->dom_ctx->nonce_count;; 8737 ++conn->dom_ctx->nonce_count;; 8738 mg_unlock_context(conn->phys_ctx);; 8739 ; 8740 nonce ^= conn->dom_ctx->auth_nonce_mask;; 8741 conn->must_close = 1;; 8742 ; 8743 /* Create 401 response */; 8744 mg_response_header_start(conn, 401);; 8745 send_no_cache_header(conn);; 8746 send_additional_header(conn);; 8747 mg_response_header_add(conn, ""Content-Length"", ""0"", -1);; 8748 ; 8749 /* Content for ""WWW-Authenticate"" header */; 8750 mg_snprintf(conn,; 8751 &trunc,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:251021,access,access,251021,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,2,"['access', 'authoriz']","['access', 'authorized']"
Security,"; 871 TString md5Enumerator(""@ "");; 872 md5Enumerator.Append(scopeName);; 873 md5Enumerator.Append(""::"");; 874 md5Enumerator.Append(dataMemberName);; 875 md5Enumerator.Append(dataMemberName);; 876 // We make the URL for the ""scopeName"".; 877 TString url = UrlGenerator(scopeName, scopeType);; 878 // Then we have to append the hashed text for the enumerator.; 879 url.Append(""#a"");; 880 url.Append(md5EnumClass.MD5());; 881 // We append ""a"" and then the next hashed text.; 882 url.Append(""a"");; 883 url.Append(md5Enumerator.MD5());; 884 return url;; 885}; 886} // namespace; 887 ; 888namespace {; 889////////////////////////////////////////////////////////////////////////////////; 890/// The function generates URL for enumeration. The hashed text consist of:; 891/// ""Class::EnumerationEnumeration"".; 892///; 893/// \param[in] scopeName the name of the class/namespace/struct; 894/// \param[in] enumeration the name of the enumeration; 895/// \param[in] scopeType enumerator for class/namespace/struct; 896 ; 897static TString GetUrlForEnumeration(TString scopeName, const TString &enumeration, EUrl scopeType); 898{; 899 // The URL consists of URL for the ""scopeName"", ""#a"" and hashed as MD5 text.; 900 // The text is ""Class::EnumerationEnumeration.; 901 TString md5Enumeration(scopeName);; 902 md5Enumeration.Append(""::"");; 903 md5Enumeration.Append(enumeration);; 904 md5Enumeration.Append(enumeration);; 905 // We make the URL for the scope ""scopeName"".; 906 TString url(UrlGenerator(scopeName, scopeType));; 907 // Then we have to append ""#a"" and the hashed text.; 908 url.Append(""#a"");; 909 url.Append(md5Enumeration.MD5());; 910 return url;; 911}; 912} // namespace; 913 ; 914namespace {; 915enum EMethodKind { kURLforMethod, kURLforStructor };; 916////////////////////////////////////////////////////////////////////////////////; 917/// The function generates URL for any member function (including Constructor/; 918/// Destructor) of ""scopeName"". Doxygen first generates the URL for the sco",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:33790,hash,hashed,33790,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['hash'],['hashed']
Security,"; 873 /// \param[in] colName name of the column for which varied values are provided.; 874 /// \param[in] expression a callable that evaluates the varied values for the specified columns. The callable can; 875 /// take any column values as input, similarly to what happens during Filter and Define calls. It must; 876 /// return an RVec of varied values, one for each variation tag, in the same order as the tags.; 877 /// \param[in] inputColumns the names of the columns to be passed to the callable.; 878 /// \param[in] nVariations number of variations returned by the expression. The corresponding tags will be `""0""`,; 879 /// `""1""`, etc. ; 880 /// \param[in] variationName a generic name for this set of varied values, e.g. `""ptvariation""`.; 881 /// colName is used if none is provided.; 882 ///; 883 /// This overload of Vary takes an nVariations parameter instead of a list of tag names.; 884 /// The varied results will be accessible via the keys of the dictionary with the form `variationName:N` where `N`; 885 /// is the corresponding sequential tag starting at 0 and going up to `nVariations - 1`.; 886 ///; 887 /// Example usage:; 888 /// ~~~{.cpp}; 889 /// auto nominal_hx =; 890 /// df.Vary(""pt"", [] (double pt) { return RVecD{pt*0.9, pt*1.1}; }, 2); 891 /// .Histo1D(""x"");; 892 ///; 893 /// auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; 894 /// hx[""nominal""].Draw();; 895 /// hx[""x:0""].Draw(""SAME"");; 896 /// hx[""x:1""].Draw(""SAME"");; 897 /// ~~~; 898 ///; 899 /// \sa This Vary() overload for more information.; 900 template <typename F>; 901 RInterface<Proxied, DS_t> Vary(std::string_view colName, F &&expression, const ColumnNames_t &inputColumns,; 902 std::size_t nVariations, std::string_view variationName = """"); 903 {; 904 R__ASSERT(nVariations > 0 && ""Must have at least one variation."");; 905 ; 906 std::vector<std::string> variationTags;; 907 variationTags.reserve(nVariations);; 908 for (std::size_t i = 0u; i < nVariations; ++i); 909 variationTags.emplace_b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:47994,access,accessible,47994,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['access'],['accessible']
Security,"; : 19 | 0.509836 0.557055 0.617073 0.042121 4348.19 0; : 20 | 0.510257 0.574511 0.617241 0.0402784 4333.04 1; : ; : Elapsed time for training with 3200 events: 12.3 sec ; : Evaluate deep neural network on CPU using batches with size = 100; : ; TMVA_LSTM : [dataset] : Evaluation of TMVA_LSTM on training sample (3200 events); : Elapsed time for evaluation of 3200 events: 0.22 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_TMVA_LSTM.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAClassification_TMVA_LSTM.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: TMVA_DNN for Classification; : ; : Start of deep neural network training on CPU using MT, nthreads = 4; : ; : ***** Deep Learning Network *****; DEEP NEURAL NETWORK: Depth = 4 Input = ( 1, 1, 300 ) Batch size = 256 Loss function = C; Layer 0 DENSE Layer: ( Input = 300 , Width = 64 ) Output = ( 1 , 256 , 64 ) Activation Function = Tanh; Layer 1 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 256 , 64 ) Activation Function = Tanh; Layer 2 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 256 , 64 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 64 , Width = 1 ) Output = ( 1 , 256 , 1 ) Activation Function = Identity; : Using 2560 events for training and 640 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 0.7616; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.731202 0.712689 0.193045 0.0157486 14439.1 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.701214 0.698536 0.191577 0.0154545 14535.3 0; : 3 Minimum Test error f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:18642,validat,validation,18642,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['validat'],['validation']
Security,"; ; // Let's first create a RDF that will read from the CSV file.; // See the tutorial (https://root.cern/doc/master/df014__CSVDataSource_8C.html) on CSV data sources for more details!; auto fileNameUrl = ""http://root.cern/files/tutorials/df014_CsvDataSource_MuRun2010B.csv"";; auto fileName = ""df015_CsvDataSource_MuRun2010B.csv"";; if(gSystem->AccessPathName(fileName)); TFile::Cp(fileNameUrl, fileName);; ; auto csv_rdf = FromCSV(fileName);; ; // Now we take out two columns: px and py of the first muon in the muon pair; std::string px1Name = ""px1"";; auto px1 = csv_rdf.Take<double>(px1Name);; std::string py1Name = ""py1"";; auto py1 = csv_rdf.Take<double>(py1Name);; ; // Now we create a new dataframe built on top of the columns above. Note that up to now, no event loop; // has been carried out!; auto df = MakeLazyDataFrame(std::make_pair(px1Name, px1), std::make_pair(py1Name, py1));; ; // We build a histogram of the transverse momentum of the muons.; auto ptFormula = [](double px, double py) { return sqrt(px * px + py * py); };; auto pt_h = df.Define(""pt"", ptFormula, {""px1"", ""py1""}); .Histo1D<double>({""pt"", ""Muon p_{T};p_{T} [GeV/c];"", 128, 0, 128}, ""pt"");; ; auto can = new TCanvas();; can->SetLogy();; pt_h->DrawCopy();; ; return 0;; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TCanvasThe Canvas class.Definition TCanvas.h:23; TFile::Cpvirtual Bool_t Cp(const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000)Allows to copy this file to the dst URL.Definition TFile.cxx:5003; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; ROOT::RDFDefinition RArrowDS.hxx:28; . DateFebruary 2018 ; AuthorDanilo Piparo (CERN) ; Definition in file df015_LazyDataSource.C. tutorialsdataframedf015_LazyDataSource.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df015__LazyDataSource_8C.html:2514,access,access,2514,doc/master/df015__LazyDataSource_8C.html,https://root.cern,https://root.cern/doc/master/df015__LazyDataSource_8C.html,2,['access'],['access']
Security,"; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Download Downloading ROOT. We are developing ROOT according to the principle of Release early and release often. However, since a very large portion of the user base requires a stable product we generally keep at least three versions of the system available for download. The development, production and old versions.; Production release; This is a version we feel comfortable with to exposing to a large audience for serious work. We may issue patch releases of production versions with bug fixes. We release about two production versions per year. The old version is the previous production version that people might need for some time before switching to the new version.; Release candidate; A Release Candidate is a preview of the next production release. It allows users to make their code ready for the new production release, and to provide early feedback.; Development release; Use this to get access to the latest and greatest, but as a side effect there might be some instabilities. However, by trying out the development version you can help us converge much more quickly to a stable version that can then become the new production version.; Nightlies; You can download nightly snapshots of ROOT. That's useful to check whether a bug fix actually fixes an issue you reported, or to see the newest feature you heard about. It helps us tremendously to get feedback from you on nightlies: please try them out and report back to us!; Using binaries; After unpacking / installing the binary, and before using ROOT you should use a special script distributed with ROOT:; source <pathname>/root/bin/thisroot.sh (there are versions for [t]csh and fish, too.); where <pathname> is the location where you unpacked the ROOT distribution.; Typically add these lines to your .profile or .login files. Docker (Experimental); We also provide ROOT in Docker containers, for more information see Docker Hub.; The following recent vers",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/downloading-root.html:2755,access,access,2755,d/downloading-root.html,https://root.cern,https://root.cern/d/downloading-root.html,1,['access'],['access']
Security,"; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooChangeTracker(); Default constructor. RooChangeTracker(const char* name, const char* title, const RooArgSet& trackSet, Bool_t checkValues = kFALSE); Constructor. The set trackSet contains the observables to be; tracked for changes. If checkValues is true an additional; validation step is activated where the numeric values of the; tracked arguments are compared with reference values ensuring; that values have actually changed. RooChangeTracker(const RooChangeTracker& other, const char* name = 0); Copy constructor. Bool_t hasChanged(Bool_t clearState); Returns true if state has changes since last call with clearState=kTRUE; If clearState is true, changeState flag will be cleared. ~RooChangeTracker(); Destructor. RooArgSet parameters() const. TObject* clone(const char* newname) const; { return new RooChangeTracker(*this, newname); }. Double_t evaluate() const; { return 1 ; }. » Last changed: Tue Jun 2 15:29:53 2015 » Last generated: 2015-06-02 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooChangeTracker.html:38277,validat,validation,38277,root/html604/RooChangeTracker.html,https://root.cern,https://root.cern/root/html604/RooChangeTracker.html,1,['validat'],['validation']
Security,"; Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgrThe cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Int_t_ipOrderInterpolation order for cache histograms; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsCachedPdf.html:43649,access,access,43649,root/html602/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html602/RooAbsCachedPdf.html,2,['access'],['access']
Security,"; Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; vector<Int_t>_catRefReference valyes for categories; RooListProxy_catSetList of categories to check; TIterator*_catSetIter! do not persist; Bool_t_checkValCheck contents as well if true; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_t_init!; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooChangeTracker.html:35415,access,access,35415,root/html602/RooChangeTracker.html,https://root.cern,https://root.cern/root/html602/RooChangeTracker.html,2,['access'],['access']
Security,"; Double_t GetCoord (Int_t i) const;  ; Int_t GetDim () const;  ; virtual TClass * IsA () const;  ; PDEFoamVect & operator*= (const Double_t &);  unary multiplication operator *= ;  ; PDEFoamVect operator+ (const PDEFoamVect &);  addition operator +; sum of 2 vectors: c=a+b, a=a+b, NEVER USE IT, VERY SLOW!!! ;  ; PDEFoamVect & operator+= (const PDEFoamVect &);  unary addition operator +=; adding vector c*=x, ;  ; PDEFoamVect operator- (const PDEFoamVect &);  subtraction operator -; difference of 2 vectors; c=a-b, a=a-b, NEVER USE IT, VERY SLOW!!! ;  ; PDEFoamVect & operator-= (const PDEFoamVect &);  unary subtraction operator -= ;  ; PDEFoamVect & operator= (const PDEFoamVect &);  substitution operator ;  ; PDEFoamVect & operator= (Double_t);  Loading in double prec. number, sometimes can be useful. ;  ; PDEFoamVect & operator= (Double_t[]);  Loading in ordinary double prec. vector, sometimes can be useful. ;  ; Double_t & operator[] (Int_t);  [] is for access to elements as in ordinary matrix like a[j]=b[j] (Perhaps against some strict rules but rather practical.) Range protection is built in, consequently for substitution one should use rather use a=b than explicit loop! ;  ; void Print (Option_t *option) const;  Printout of all vector components. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamVect.html:1514,access,access,1514,doc/master/classTMVA_1_1PDEFoamVect.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamVect.html,1,['access'],['access']
Security,"; How to Draw objects.; How to Pick objects.; Dividing a canvas with no margins between pads.; Using transparent pads. . Classes; class  TAnnotation;  An annotation is a TLatex which can be drawn in a 2D or 3D space. More...;  ; class  TAttCanvas;  Manages canvas attributes. More...;  ; class  TButton;  A TButton object is a user interface object. More...;  ; class  TCanvas;  The Canvas class. More...;  ; class  TClassTree;  Draw inheritance tree and their relations for a list of classes. More...;  ; class  TColorWheel;  Draw the ROOT Color Wheel. More...;  ; class  TControlBar;  A Control Bar is a fully user configurable tool which provides fast access to frequently used operations. More...;  ; class  TControlBarButton;  This class defines the control bar buttons. More...;  ; class  TCreatePrimitives;  Creates new primitives. More...;  ; class  TDialogCanvas;  A canvas specialized to set attributes. More...;  ; class  TGroupButton;  A specialized TButton used in a group of Buttons. More...;  ; class  TInspectCanvas;  A TInspectCanvas is a canvas specialized to inspect Root objects. More...;  ; class  TInspectorObject;  This class is designed to wrap a Foreign object in order to inject it into the Browse sub-system. More...;  ; class  TPad;  The most important graphics class in the ROOT system. More...;  ; class  TPadPainter;  Implement TVirtualPadPainter which abstracts painting operations. More...;  ; class  TPaveClass;  A TPaveLabel specialized to process classes inside a TClassTree. More...;  ; class  TRatioPlot;  Class for displaying ratios, differences and fit residuals. More...;  ; class  TSlider;  A specialized TPad including a TSliderBox object. More...;  ; class  TSliderBox;  The moving box in a TSlider. More...;  ; class  TView;  See TView3D. More...;  ; class  TViewer3DPad;  Provides 3D viewer interface (TVirtualViewer3D) support on a pad. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__gpad.html:1478,inject,inject,1478,doc/master/group__gpad.html,https://root.cern,https://root.cern/doc/master/group__gpad.html,1,['inject'],['inject']
Security,"; How to iterate over a collection; How to manage memory for collections and collection elements; How collection elements are tested for equality (IsEqual()); How collection elements are compared (Compare()) in case of sorted collections; How collection elements are hashed (Hash()) in hash tables . Classes; class  TArray;  Abstract array base class. More...;  ; class  TArrayC;  Array of chars or bytes (8 bits per element). More...;  ; class  TArrayD;  Array of doubles (64 bits per element). More...;  ; class  TArrayF;  Array of floats (32 bits per element). More...;  ; class  TArrayI;  Array of integers (32 bits per element). More...;  ; class  TArrayL;  Array of longs (32 or 64 bits per element). More...;  ; class  TArrayL64;  Array of long64s (64 bits per element). More...;  ; class  TArrayS;  Array of shorts (16 bits per element). More...;  ; class  TBits;  Container of bits. More...;  ; class  TBtree;  B-tree class. More...;  ; class  TClassTable;  This class registers for all classes their name, id and dictionary function in a hash table. More...;  ; class  TClonesArray;  An array of clone (identical) objects. More...;  ; class  TCollection;  Collection abstract base class. More...;  ; class  THashList;  THashList implements a hybrid collection class consisting of a hash table and a list to store TObject's. More...;  ; class  THashTable;  THashTable implements a hash table to store TObject's. More...;  ; class  TIterator;  Iterator abstract base class. More...;  ; class  TList;  A doubly linked list. More...;  ; class  TMap;  TMap implements an associative array of (key,value) pairs using a THashTable for efficient retrieval (therefore TMap does not conserve the order of the entries). More...;  ; class  TObjArray;  An array of TObjects. More...;  ; class  TObjectTable;  This class registers all instances of TObject and its derived classes in a hash table. More...;  ; class  TOrdCollection;  Ordered collection. More...;  ; class  TRefArray;  An array of referenc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Containers.html:1892,hash,hash,1892,doc/master/group__Containers.html,https://root.cern,https://root.cern/doc/master/group__Containers.html,1,['hash'],['hash']
Security,"; Int_tTObject::TestBits(UInt_t f) const; static TUriTransform(const TUri& reference, const TUri& base); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TStringfFragment; Bool_tfHasFragment; Bool_tfHasHost; Bool_tfHasPath; Bool_tfHasPort; Bool_tfHasQuery; Bool_tfHasScheme; Bool_tfHasUserinfo; TStringfHostauthority/host: hostname or ip-address; TStringfPath; TStringfPortauthority/port: port number, normally 1-65535; TStringfQuery; TStringfScheme; TStringfUserinfoauthority/userinfo: user@password, ... Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TUri(const TString& uri); Constructor that calls SetUri with a complete URI. TUri(const char* uri); Constructor that calls SetUri with a complete URI. TUri(const TUri& uri); TUri copy ctor. TUri & operator=(const TUri& rhs); TUri assignment operator. const TString GetUri() const; Returns the whole URI -; an implementation of chapter 5.3 component recomposition.; The result URI is composed out of the five basic parts. URI = scheme "":"" hier-part [ ""?"" query ] [ ""#"" fragment ]; hier-part = ""//"" authority path-abempty; / path-absolute; / path-rootless; / path-empty. const TString RemoveDotSegments(const TString& ); This functions implements the ""remove_dot_segments"" routine; of chapter 5.2.4 ""for interpreting and removing the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUri.html:7894,password,password,7894,root/html528/TUri.html,https://root.cern,https://root.cern/root/html528/TUri.html,4,['password'],['password']
Security,"; Int_t GetRecordHeader (char *buf, Long64_t first, Int_t maxbytes, Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header starting at a certain postion. ;  ; Long64_t GetRelOffset () const;  ; virtual Long64_t GetSeekFree () const;  ; virtual Long64_t GetSeekInfo () const;  ; virtual Long64_t GetSize () const;  Returns the current file size. ;  ; const TList * GetStreamerInfoCache ();  Returns the cached list of StreamerInfos used in this file. ;  ; virtual TList * GetStreamerInfoList () final;  Read the list of TStreamerInfo objects written to this file. ;  ; Int_t GetVersion () const;  ; virtual void IncrementProcessIDs ();  ; virtual Bool_t IsArchive () const;  ; Bool_t IsBinary () const;  ; Bool_t IsRaw () const;  ; void ls (Option_t *option="""") const override;  List file contents. ;  ; virtual void MakeFree (Long64_t first, Long64_t last);  Mark unused bytes on the file. ;  ; virtual void MakeProject (const char *dirname, const char *classes=""*"", Option_t *option=""new"");  Generate source code necessary to access the objects stored in the file. ;  ; virtual void Map ();  ; virtual void Map (Option_t *opt);  List the contents of a file sequentially. ;  ; virtual Bool_t MustFlush () const;  ; void Paint (Option_t *option="""") override;  Paint all objects in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual void ResetErrno () const;  Method resetting the errno. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetFile.html:7193,access,access,7193,doc/master/classTNetFile.html,https://root.cern,https://root.cern/doc/master/classTNetFile.html,1,['access'],['access']
Security,"; Int_t GetSize () const override;  Return the capacity of the collection, i.e. ;  ; TClass * IsA () const override;  ; TIterator * MakeIterator (Bool_t dir=kIterForward) const override;  Returns a hash table iterator. ;  ; virtual void Print (Option_t *option, const char *wildcard, Int_t recurse=1) const;  Print the collection header and its elements that match the wildcard. ;  ; virtual void Print (Option_t *option, Int_t recurse) const;  Print the collection header and its elements. ;  ; void Print (Option_t *option, Int_t recurse) const override;  Print the collection header and its elements. ;  ; virtual void Print (Option_t *option, TPRegexp &regexp, Int_t recurse=1) const;  Print the collection header and its elements that match the regexp. ;  ; void Print (Option_t *option="""") const override;  Default print for collections, calls Print(option, 1). ;  ; void Rehash (Int_t newCapacity, Bool_t checkObjValidity=kTRUE);  Rehash the hashtable. ;  ; TObject * Remove (TObject *obj) override;  Remove object from the hashtable. ;  ; TObject * RemoveSlow (TObject *obj);  Remove object from the hashtable without using the hash value. ;  ; void SetRehashLevel (Int_t rehash);  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TCollection; virtual ~TCollection ();  TNamed destructor. ;  ; void AddVector (TObject *obj1,...);  Add all arguments to the collection. ;  ; Bool_t AssertClass (TClass *cl) const;  Make sure all objects in this collection inherit from class cl. ;  ; TIter begin () const;  ; void Browse (TBrowser *b) override;  Browse this collection (called by TBrowser). ;  ; Int_t Capacity () const;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an collection using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TCollection objects.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHashTable.html:3341,hash,hashtable,3341,doc/master/classTHashTable.html,https://root.cern,https://root.cern/doc/master/classTHashTable.html,2,['hash'],['hashtable']
Security,"; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 7. Using the TTreeReader. Accessing Value from a TTree; Up to now we have used TTree's ability to parse TTree::Draw() expressions and the TBrowser interface. Sometimes it's better to access the values in a script, one by one. There is a traditional way of doing this (TTree::SetBranchAddress() etc) and a new, recommended one: the TTreeReader. That's what we will use later and introduce here.; The TTreeReader Concept; The TTree loads entry by entry into memory. You and the TTree need to agree what data the TTree should make available (i.e. for which branches) and what data these branches contain. First, we set up a TTreeReader object that connects our data requests to the TTree:; // Access a TTree called ""MyTree"" in the file:; TTreeReader reader(""MyTree"", file);. The TTreeReader Values and Arrays; This reader object can now be used by the data accessors. There are two types: TTreeReaderArray can iterate through collections (std::vector, TClonesArray, TList, MyType[12] - whatever) and TTreeReaderValue that doesn't. You can choose how you access the values - for our tree, all of these might make sense in different contexts:; TTreeReaderValue<float> rvMissingET(reader, ""missing",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/7-using-ttreereader.html:2069,access,access,2069,d/7-using-ttreereader.html,https://root.cern,https://root.cern/d/7-using-ttreereader.html,1,['access'],['access']
Security,"; OFF; Built the GSL library internally (downloading tarfile from the Web). builtin_cfitsio; OFF; Built the FITSIO library internally (downloading tarfile from the Web). builtin_xrootd; OFF; Built the XROOTD internally (downloading tarfile from the Web). builtin_llvm; ON; Built the LLVM internally. builtin_tbb; OFF; Built the TBB internally. cxx11; ON; Build using C++11 compatible mode, requires gcc > 4.7.x or clang. cxx14; OFF; Build using C++14 compatible mode, requires gcc > 4.9.x or clang. cxx17; OFF; Build using C++17 compatible mode, requires gcc > 7.1.x or clang. libcxx; OFF; Build using libc++, requires cxx11 option (MacOS X only, for the time being). castor; ON; CASTOR support, requires libshift from CASTOR >= 1.5.2. ccache; OFF; Enable ccache usage for speeding up builds. chirp; ON; Chirp support (Condor remote I/O), requires libchirp_client. cling; ON; Enable new CLING C++ interpreter. cocoa; *; Use native Cocoa/Quartz graphics backend (MacOS X only). davix; *; DavIx library for HTTP/WEBDAV access. dcache; ON; dCache support, requires libdcap from DESY. exceptions; ON; Turn on compiler exception handling capability. explicit link; *; Explicitly link with all dependent libraries. fail-on-missing; OFF; Fail the configure step if a required external package is missing. fftw3; ON; Fast Fourier Transform support, requires libfftw3. fitsio; ON; Read images and data from FITS files, requires cfitsio. fortran; *; Enable the Fortran components of ROOT. gdml; *; GDML writer and reader. geocad; OFF; ROOT-CAD Interface. genvector; ON; Build the new libGenVector library. gfal; ON; GFAL support, requires libgfal. glite; ON; gLite support, requires libglite-api-wrapper v.3 from GSI (https://subversion.gsi.de/trac/dgrid/wiki). globus; OFF; Globus authentication support, requires Globus toolkit. gminimal; OFF; Do not automatically search for support libraries, but include X11. gnuinstall; OFF; Perform installation following the GNU guidelines. gsl_shared; OFF; Enable link",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/building-root.html:9099,access,access,9099,d/building-root.html,https://root.cern,https://root.cern/d/building-root.html,1,['access'],['access']
Security,"; Reimplemented from TNamed.; Definition at line 802 of file TStreamerElement.cxx. ◆ StreamerNVirtual(). void TStreamerBase::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 194 of file TStreamerElement.h. ◆ Update(). void TStreamerBase::Update ; (; const TClass * ; oldClass, . TClass * ; newClass . ). overridevirtual . Function called by the TClass constructor when replacing an emulated class by the real class. ; Reimplemented from TStreamerElement.; Definition at line 839 of file TStreamerElement.cxx. ◆ WriteBuffer(). Int_t TStreamerBase::WriteBuffer ; (; TBuffer & ; b, . char * ; pointer . ). Write the base class into the buffer. ; Definition at line 860 of file TStreamerElement.cxx. Member Data Documentation. ◆ fBaseCheckSum. UInt_t& TStreamerBase::fBaseCheckSum. protected . Definition at line 158 of file TStreamerElement.h. ◆ fBaseClass. TClass* TStreamerBase::fBaseClass. protected . checksum of the base class (used during memberwise streaming) ; Definition at line 159 of file TStreamerElement.h. ◆ fBaseVersion. Int_t TStreamerBase::fBaseVersion. protected . Definition at line 157 of file TStreamerElement.h. ◆ fConvStreamerFunc. ClassConvStreamerFunc_t TStreamerBase::fConvStreamerFunc. protected . Pointer to a wrapper around a custom streamer member function. ; Definition at line 162 of file TStreamerElement.h. ◆ fErrorMsg. TString TStreamerBase::fErrorMsg. protected . Pointer to the current StreamerInfo for the baset class. ; Definition at line 164 of file TStreamerElement.h. ◆ fNewBaseClass. TClass* TStreamerBase::fNewBaseClass. protected . pointer to base class ; Definition at line 160 of file TStreamerElement.h. ◆ fStreamerFunc. ClassStreamerFunc_t TStreamerBase::fStreamerFunc. protected . pointer to new base class if renamed ; Definition at line 161 of file TStreamerElement.h. ◆ fStreamerInfo. TVirtualStreamerInfo* TStreamerBase::fStreamerInfo. protected . Pointer to a wrapper around a custom convertion streamer me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerBase.html:24222,checksum,checksum,24222,doc/master/classTStreamerBase.html,https://root.cern,https://root.cern/doc/master/classTStreamerBase.html,1,['checksum'],['checksum']
Security,"; Returns the number of bytes sent and -1 in case of error. In case the ""kind"" has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending synchronous. ; Reimplemented from TSocket.; Definition at line 76 of file TServerSocket.h. ◆ SendRaw(). Int_t TServerSocket::SendRaw ; (; const void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). inlineoverridevirtual . Send a raw buffer of specified length. ; Using option kOob one can send OOB data. Returns the number of bytes sent or -1 in case of error. Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Reimplemented from TSocket.; Definition at line 78 of file TServerSocket.h. ◆ SetAcceptOptions(). void TServerSocket::SetAcceptOptions ; (; UChar_t ; mod). static . Set default options for Accept according to modifier 'mod'. ; Use: kSrvAuth require client authentication kSrvNoAuth do not require client authentication ; Definition at line 283 of file TServerSocket.cxx. ◆ ShowAcceptOptions(). void TServerSocket::ShowAcceptOptions ; (; ). static . Print default options for Accept. ; Definition at line 291 of file TServerSocket.cxx. ◆ Streamer(). void TServerSocket::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TServerSocket::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 95 of file TServerSocket.h. Member Data Documentation. ◆ fgAcceptOpt. UChar_t TServerSocket::fgAcceptOpt = kSrvNoAuth. staticprivate . Definition at line 48 of file TServerSocket.h. ◆ fgSrvAuthClupHook. SrvClup_t TServerSocket::fgSrvAuthClupHook = 0. staticprivate . Definition at line 47 of file TServerSocket.h. ◆ fgSrvAuthHook. SrvAuth_t TServerSocket::fgSrvAuthHook = 0. staticprivate . Definition at line 46 of file TServerSocket.h. ◆ fSecContexts. TSeqCollection* TServer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTServerSocket.html:30852,authenticat,authentication,30852,doc/master/classTServerSocket.html,https://root.cern,https://root.cern/doc/master/classTServerSocket.html,2,['authenticat'],['authentication']
Security,"; Returns when connection has been accepted by remote side. Use IsValid(); to check the validity of the socket. Every socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TUDPSocket(const char* host, const char* service); Create a socket. Connect to named service on the remote host.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Returns when connection has been accepted by remote side. Use IsValid(); to check the validity of the socket. Every socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TUDPSocket(const char* host, Int_t port); Create a socket; see CreateAuthSocket for the form of url.; Connect to the specified port # on the remote host.; If user is specified in url, try authentication as user.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Returns when connection has been accepted by remote side. Use IsValid(); to check the validity of the socket. Every socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TUDPSocket(const char* sockpath); Create a socket in the Unix domain on 'sockpath'.; Returns when connection has been accepted by the server. Use IsValid(); to check the validity of the socket. Every socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TUDPSocket(Int_t descriptor); Create a socket. The socket will adopt previously opened TCP socket with; descriptor desc. TUDPSocket(Int_t descriptor, const char* sockpath); Create a s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TUDPSocket.html:11051,authenticat,authentication,11051,root/html532/TUDPSocket.html,https://root.cern,https://root.cern/root/html532/TUDPSocket.html,4,['authenticat'],['authentication']
Security,; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAICRegistry_codeReg! Registry of analytical integration codes; RooObjCacheManager_coefNormMgrCoefficient normalization manager; RooArgSet*_convNormSet! Subset of last normalization that applies to convolutions; RooListProxy_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*_convSetIter! Iterator over _convNormSet; RooRealProxy_convVarConvolution variable; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; Bool_t_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealProxy_modelOriginal model; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsAnaConvPdf.html:44698,access,access,44698,root/html602/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html602/RooAbsAnaConvPdf.html,2,['access'],['access']
Security,"; TGeoManager.h; gGeoManagerR__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; gROOT#define gROOTDefinition TROOT.h:406; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; gPad#define gPadDefinition TVirtualPad.h:308; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TControlBarA Control Bar is a fully user configurable tool which provides fast access to frequently used operati...Definition TControlBar.h:26; TControlBar::Showvoid Show()Show control bar.Definition TControlBar.cxx:317; TControlBar::AddButtonvoid AddButton(TControlBarButton *button)Add button.Definition TControlBar.cxx:141; TGeoAtt::SetVisRaytracevoid SetVisRaytrace(Bool_t flag=kTRUE)Definition TGeoAtt.h:66; TGeoBBoxDefinition TGeoBBox.h:17; TGeoCompositeShapeComposite shapes are Boolean combinations of two or more shape components.Definition TGeoCompositeShape.h:27; TGeoManagerThe manager class for any TGeo geometry.Definition TGeoManager.h:44; TGeoManager::CloseGeometryvoid CloseGeometry(Option_t *option=""d"")Closing geometry implies checking the geometry validity, fixing shapes with negative parameters (run-...Definition TGeoManager.cxx:1480; TGeoManager::MakeBoxTGeoVolume * MakeBox(const char *name, TGeoMedium *medium, Double_t dx, Double_t dy, Double_t dz)Make in one step a volume pointing to a box shape with given medium.Definition ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/geom_2csgdemo_8C.html:11072,access,access,11072,doc/master/geom_2csgdemo_8C.html,https://root.cern,https://root.cern/doc/master/geom_2csgdemo_8C.html,1,['access'],['access']
Security,; TH2*_callHist! Histogram recording number of calls per convolution integral calculation; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAbsReal*_cloneModelPointer to cloned model; RooAbsReal*_clonePdfPointer to cloned PDF ; RooAbsReal*_cloneVarPointer to cloned convolution variable; RooNumIntConfig_convIntConfigConfiguration of numeric convolution integral ;; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; Bool_t_doProfSwitch to activate profiling option; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_t_init; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; RooConvIntegrandBinding*_integrand! Binding of Convolution Integrand function; RooAbsIntegrator*_integrator! Numeric integrator of convolution integrand; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do n,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumConvolution.html:36226,access,access,36226,root/html534/RooNumConvolution.html,https://root.cern,https://root.cern/root/html534/RooNumConvolution.html,1,['access'],['access']
Security,"; TListOfDataMembersA collection of TDataMember objects designed for fast access given a DeclId_t and for keep track of T...Definition TListOfDataMembers.h:33; TListOfDataMembers::Deletevoid Delete(Option_t *option="""") overrideDelete all TDataMember object files.Definition TListOfDataMembers.cxx:171; TListOfDataMembers::Unloadvoid Unload()Mark 'all func' as being unloaded.Definition TListOfDataMembers.cxx:542; TListOfDataMembers::GetTDictionary * Get(DeclId_t id)Return (after creating it if necessary) the TDataMember describing the data member corresponding to t...Definition TListOfDataMembers.cxx:216; TListOfDataMembers::Loadvoid Load()Load all the DataMembers known to the interpreter for the scope 'fClass' into this collection.Definition TListOfDataMembers.cxx:399; TListOfEnumsWithLockA collection of TEnum objects designed for fast access given a DeclId_t and for keep track of TEnum t...Definition TListOfEnumsWithLock.h:31; TListOfFunctionTemplatesA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFu...Definition TListOfFunctionTemplates.h:35; TListOfFunctionTemplates::FindObjectTObject * FindObject(const char *name) const overrideSpecialize FindObject to do search for the a function just by name or create it if its not already in...Definition TListOfFunctionTemplates.cxx:175; TListOfFunctionsA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFu...Definition TListOfFunctions.h:35; TListOfFunctions::GetTFunction * Get(DeclId_t id)Return (after creating it if necessary) the TMethod or TFunction describing the function correspondin...Definition TListOfFunctions.cxx:262; TListOfFunctions::Deletevoid Delete(Option_t *option="""") overrideDelete all TFunction object files.Definition TListOfFunctions.cxx:162; TListOfFunctions::Loadvoid Load()Load all the functions known to the interpreter for the scope 'fClass' into this collection.Definition TListOfFunctions.cxx:374; TListOfFun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:138911,access,access,138911,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,['access'],['access']
Security,"; TObject::DrawClassvirtual void DrawClass() constDraw class inheritance tree of the class to which this object belongs.Definition TObject.cxx:295; TObject::TestBitsInt_t TestBits(UInt_t f) constDefinition TObject.h:200; TObject::Comparevirtual Int_t Compare(const TObject *obj) constCompare abstract method.Definition TObject.cxx:244; TObject::MakeZombievoid MakeZombie()Definition TObject.h:53; TObject::~TObjectvirtual ~TObject()TObject destructor.Definition TObject.cxx:164; TObject::Paintvirtual void Paint(Option_t *option="""")This method must be overridden if a class wants to paint itself.Definition TObject.cxx:612; TObject::Printvirtual void Print(Option_t *option="""") constThis method must be overridden when a class wants to print itself.Definition TObject.cxx:642; TObject::Popvirtual void Pop()Pop on object drawn in a pad to the top of the display list.Definition TObject.cxx:621; TObject::TObjectTObject()TObject constructor.Definition TObject.h:254; TObject::Hashvirtual ULong_t Hash() constReturn hash value for this object.Definition TObject.cxx:520; TObject::lsvirtual void ls(Option_t *option="""") constThe ls function lists the contents of a class on stdout.Definition TObject.cxx:579; TObject::fgObjectStatstatic Bool_t fgObjectStatif true keep track of objects in TObjectTableDefinition TObject.h:48; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TObject::EStatusBitsEStatusBitsDefinition TObject.h:61; TObject::kCannotPick@ kCannotPickif object in a pad cannot be pickedDefinition TObject.h:67; TObject::kNoContextMenu@ kNoContextMenuif object does not want context menuDefinition TObject.h:69; TObject::kCanDelete@ kCanDeleteif object in a list can be deletedDefinition TObject.h:62; TObject::kHasUUID@ kHasUUIDif object has a TUUID (its fUniqueID=UUIDNumber)Definition TObject.h:66; TObject::kInvalidObject@ kInvalidObjectif object ctor succeeded but object should not be usedDefinition TObject.h:72; TObject::kIsReferenced@ kIsReferencedif object is refe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8h_source.html:30515,hash,hash,30515,doc/master/TObject_8h_source.html,https://root.cern,https://root.cern/doc/master/TObject_8h_source.html,1,['hash'],['hash']
Security,; TRefCnt ; TRefTable Table of referenced objects during an I/O operation; TRegexp Regular expression class; TRemoteObject A remote object; TResponseTable Generic Geant detector response table; TRint ROOT Interactive Application Interface; TRobustEstimator Minimum Covariance Determinant Estimator; TRolke ; TRootApplication ROOT native GUI application environment; TRootAuth client auth interface; TRootBrowser New ROOT Browser; TRootBrowserLite ROOT native GUI version of browser; TRootCanvas ROOT native GUI version of main window with menubar and drawing area; TRootContextMenu ROOT native GUI context sensitive popup menu; TRootControlBar ROOT native GUI implementation of TControlBar; TRootDialog Native GUI method argument prompt dialog box; TRootEmbeddedCanvas A ROOT TCanvas that can be embedded in a TGFrame; TRootGuiBuilder ROOT GUI Builder; TRootGuiFactory Factory for ROOT GUI components; TRootHelpDialog Dialog to display help text; TRootSecContext Class providing host specific authentication information; TRotMatrix Rotation Matrix for 3-D geometry objects; TRotation Rotations of TVector3 objects; TRuby Ruby/ROOT interface; TSAXParser SAX Parser; TSPHE SPHE shape; TSPlot class to disentangle signal from background; TSQLColumnInfo Summury information about column from SQL table; TSQLMonitoringWriter Sending monitoring data to a SQL DB; TSQLResult SQL query result; TSQLRow One row of an SQL query result; TSQLServer Connection to SQL server; TSQLStatement SQL statement; TSQLTableInfo Summury information about SQL table; TSVG SVG driver; TSecContext Class providing host specific authentication information; TSecContextCleanup Update the remote authentication table; TSelector A utility class for tree and object processing; TSelectorCint A utility class for tree and object processing (interpreted version); TSelectorDraw A specialized TSelector for TTree::Draw; TSelectorEntries A specialized TSelector for TTree::GetEntries(selection); TSelectorList Special TList used in the ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:117257,authenticat,authentication,117257,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,1,['authenticat'],['authentication']
Security,"; TStyle::GetOptLogxInt_t GetOptLogx() constDefinition TStyle.h:247; TStyle::GetDateYFloat_t GetDateY() constDefinition TStyle.h:198; TStyle::GetPadBorderModeInt_t GetPadBorderMode() constDefinition TStyle.h:210; TStyle::GetNumberOfColorsInt_t GetNumberOfColors() constReturn number of colors in the color palette.Definition TStyle.cxx:1175; TStyle::GetOptLogzInt_t GetOptLogz() constDefinition TStyle.h:249; TStyle::SetPadBorderSizevoid SetPadBorderSize(Width_t size=1)Definition TStyle.h:356; TStyle::GetHatchesLineWidthInt_t GetHatchesLineWidth() constDefinition TStyle.h:200; TStyle::GetPadTopMarginFloat_t GetPadTopMargin() constDefinition TStyle.h:212; TSystem::ExpandPathNamevirtual Bool_t ExpandPathName(TString &path)Expand a pathname getting rid of special shell characters like ~.Definition TSystem.cxx:1274; TSystem::Execvirtual Int_t Exec(const char *shellcmd)Execute a command.Definition TSystem.cxx:653; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TSystem::Renamevirtual int Rename(const char *from, const char *to)Rename a file.Definition TSystem.cxx:1350; TSystem::Sleepvirtual void Sleep(UInt_t milliSec)Sleep milliSec milli seconds.Definition TSystem.cxx:437; TSystem::ProcessEventsvirtual Bool_t ProcessEvents()Process pending events (GUI, timers, sockets).Definition TSystem.cxx:416; TTextBase class for several text objects.Definition TText.h:22; TText::Paintvoid Paint(Option_t *option="""") overridePaint this text with its current attributes.Definition TText.cxx:687; TText::SetNDCvirtual void SetNDC(Bool_t isNDC=kTRUE)Set NDC mode on if isNDC = kTRUE, off otherwise.Definition TText.cxx:823; TViewSee TView3D.Definition TView.h:25; TView::WCtoNDCvirtual void WCtoNDC(const Float_t *pw, Float_t *pn)=0; TView::GetDistancetoAxisvirtual Int_t GetDistancetoAxis(Int_t axis, Int_t px, Int_t py, Double_t &ratio)=0; TView::Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:329156,access,access,329156,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,2,['access'],['access']
Security,"; Trapezoids: TGeoTrd1, TGeoTrd2 classes; General Trapezoid: TGeoTrap class; Twisted Trapezoid: TGeoGtra class; Arbitrary 8 vertices shapes: TGeoArb8 class; Tubes: TGeoTube class; Tube Segments: TGeoTubeSeg class; Cut Tubes: TGeoCtub class; Elliptical Tubes: TGeoEltu class; Hyperboloids: TGeoHype class; Cones: TGeoCone class; Cone Segments: TGeoConeSeg class; Sphere: TGeoSphere class; Torus: TGeoTorus class; Paraboloid: TGeoParaboloid class; Polycone: TGeoPcon class; Polygon: TGeoPgon class; Polygonal extrusion: TGeoXtru class; Half Spaces: TGeoHalfSpace class; Composite Shapes: TGeoCompositeShape class. Navigation Methods Performed By Shapes; Shapes are named objects and register themselves to the manager class at creation time. This is responsible for their final deletion. Shapes can be created without name if their retrieval by name is no needed. Generally shapes are objects that are useful only at geometry creation stage. The pointer to a shape is in fact needed only when referring to a given volume and it is always accessible at that level. Several volumes may reference a single shape; therefore its deletion is not possible once volumes were defined based on it.; The navigation features related for instance to tracking particles are performed in the following way: Each shape implement its specific algorithms for all required tasks in its local reference system. Note that the manager class handles global queries related to geometry. However, shape-related queries might be sometimes useful:; Bool_t TGeoShape::Contains(Double_t *point[3]);; Bool_tbool Bool_tDefinition RtypesCore.h:63; Double_tdouble Double_tDefinition RtypesCore.h:59; TGeoShape::Containsvirtual Bool_t Contains(const Double_t *point) const =0; The method above returns kTRUE if the point *point is actually inside the shape. The point has to be defined in the local shape reference. For instance, for a box having DX,DY and DZhalf-lengths a point will be considered inside if:; -DX <= point[0] <= DX; -D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Shapes__classes.html:4248,access,accessible,4248,doc/master/group__Shapes__classes.html,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html,1,['access'],['accessible']
Security,"; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgr! The cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooRealProxy_effEfficiency function; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; RooArgSet*_fixedNset! Fixed normalization set overriding default normalization set (if provided); Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooEffProd.html:41960,access,access,41960,root/html602/RooEffProd.html,https://root.cern,https://root.cern/root/html602/RooEffProd.html,2,['access'],['access']
Security,"; auto fullSpectrum =; filteredEvents.Histo1D({""Spectrum"", ""Subset of CMS Run 2010B;#mu#mu mass [GeV];Events"", 1024, 2, 110}, ""m"");; ; // Next we will create the histogram for the J/psi particle, applying first; // the corresponding cut.; double jpsiLow = 2.95;; double jpsiHigh = 3.25;; auto jpsiCut = [jpsiLow, jpsiHigh](double m) { return m < jpsiHigh && m > jpsiLow; };; auto jpsi =; filteredEvents.Filter(jpsiCut, {""m""}); .Histo1D({""jpsi"", ""Subset of CMS Run 2010B: J/#psi window;#mu#mu mass [GeV];Events"", 128, jpsiLow, jpsiHigh},; ""m"");; ; // Finally we draw the two histograms side by side.; auto dualCanvas = new TCanvas(""DualCanvas"", ""DualCanvas"", 800, 512);; dualCanvas->Divide(2, 1);; auto leftPad = dualCanvas->cd(1);; leftPad->SetLogx();; leftPad->SetLogy();; fullSpectrum->DrawClone(""Hist"");; dualCanvas->cd(2);; jpsi->SetMarkerStyle(20);; jpsi->DrawClone(""HistP"");; ; return 0;; }; c#define c(i)Definition RSha256.hxx:101; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TCanvasThe Canvas class.Definition TCanvas.h:23; TFile::Cpvirtual Bool_t Cp(const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000)Allows to copy this file to the dst URL.Definition TFile.cxx:5003; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; ROOT::RDF::FromCSVRDataFrame FromCSV(std::string_view fileName, bool readHeaders=true, char delimiter=',', Long64_t linesChunkSize=-1LL, std::unordered_map< std::string, char > &&colTypes={})Factory method to create a CSV RDataFrame.Definition RCsvDS.cxx:558; df014_CSVDataSourceDefinition df014_CSVDataSource.py:1; mTMarker mDefinition textangle.C:8; . DateOctober 2017 ; AuthorEnric Tejedor (CERN) ; Definition in file df014_CSVDataSource.C. tutorialsdataframedf014_CSVDataSource.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df014__CSVDataSource_8C.html:3551,access,access,3551,doc/master/df014__CSVDataSource_8C.html,https://root.cern,https://root.cern/doc/master/df014__CSVDataSource_8C.html,2,['access'],['access']
Security,"; corresponding MouseOver() signals.; Protected method. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Process event of type 'event' - one of EEventType types,; occuring at window location px, py; This is provided for use when embedding GL viewer into pad. Bool_t HandleEvent(Event_t* event); Handle generic Event_t type 'event' - provided to catch focus changes; and terminate any interaction in viewer. Bool_t HandleFocusChange(Event_t* event); Handle generic Event_t type 'event' - provided to catch focus changes; and terminate any interaction in viewer. Bool_t HandleCrossing(Event_t* event); Handle generic Event_t type 'event' - provided to catch focus changes; and terminate any interaction in viewer. Bool_t HandleButton(Event_t* event); Handle mouse button 'event'. Bool_t HandleDoubleClick(Event_t* event); Handle mouse double click 'event'. Bool_t HandleConfigureNotify(Event_t* event); Handle configure notify 'event' - a window resize/movement. Bool_t HandleExpose(Event_t* event); Handle window expose 'event' - show. Bool_t HandleKey(Event_t* event); Handle keyboard 'event'. Bool_t HandleMotion(Event_t* event); Handle mouse motion 'event'. Bool_t Rotate(Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2); Method to handle action TGLViewer::kDragCameraRotate. Bool_t HandleTimer(TTimer* t); If mouse delay timer times out emit signal. void StartMouseTimer(); Start mouse timer in single-shot mode. void StopMouseTimer(); Make sure mouse timers are not running. void ClearMouseOver(); Clear mouse-over state and emit mouse-over signals.; Current overlay element is also told the mouse has left. void Repaint(); Handle window expose 'event' - show. void PopupContextMenu(TGLPhysicalShape* pshp, Event_t* event, Int_t gx, Int_t gy); Popup context menu. void TriggerTooltip(const char* text); Trigger display of tooltip. void RemoveTooltip(); Hide the tooltip. void SetMouseOverSelectDelay(Int_t ms); Set delay of mouse-over probe (highlight). void SetMouseOverTooltipDelay(Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLEventHandler.html:13333,expose,expose,13333,root/html528/TGLEventHandler.html,https://root.cern,https://root.cern/root/html528/TGLEventHandler.html,6,['expose'],['expose']
Security,"; disable scan of global directories. basic_sniffer; use basic TRootSniffer without support of hist, gpad, graph, tree classes. Example:; new THttpServer(""http:8080;ro;noglobal""); 1.2 Registering objects; At any time, one could register other objects with the command:; TGraph* gr = new TGraph(10);; gr->SetName(""gr1"");; serv->Register(""graphs/subfolder"", gr);; One should specify sub-folder name, where objects will be registered. If sub-folder name does not starts with slash /, than top-name folder /Objects/ will be prepended. At any time one could unregister objects:; serv->Unregister(gr);; THttpServer does not take ownership over registered objects - they should be deleted by user.; If the objects content is changing in the application, one could enable monitoring flag in the browser - then objects view will be regularly updated.; 1.3 Accessing file system; THttpServer provides partial access to the files from file system. First of all, JSROOT scripts and files can be accessed via “jsrootsys/” path like “http://localhost:8080/jsrootsys/modules/core.mjs”. Files from ROOT install directory can be get via “rootsys/” path like “http://localhost:8080/rootsys/icons/about.xpm”. Also files from current directory where ROOT is running can be accessed via “currentdir/” path like “http://localhost:8080/currentdir/file.txt”.; If necessary, one can add custom path as well, using THttpServer::AddLocation method:; serv->AddLocation(""mydir/"", ""/home/user/specials"");; Then files from that directory could be addressed via URL like “http://localhost:8080/mydir/myfile.root”; 1.4 Command interface; THttpServer class provide simple interface to invoke command from web browser. One just register command like:; serv->RegisterCommand(""/DoSomething"", ""SomeFunction()"");; Element with name DoSomething will appear in the web browser and can be clicked. It will result in gROOT->ProcessLineSync(""SomeFunction()"") call.; One could configure argument(s) for the command. For that one should use %arg1,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html:4107,access,accessed,4107,root/htmldoc/guides/HttpServer/HttpServer.html,https://root.cern,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html,1,['access'],['accessed']
Security,"; enum  EAclicProperties { kFlatBuildDir = (1ULL << ( 0 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TWinNTSystem ();  ctor ;  ; virtual ~TWinNTSystem ();  dtor ;  ; void Abort (int code=0) override;  Abort the application. ;  ; int AcceptConnection (int sock) override;  Accept a connection. ;  ; Bool_t AccessPathName (const char *path, EAccessMode mode=kFileExists) override;  Returns FALSE if one can access a file using the specified access mode. ;  ; void AddDynamicPath (const char *dir) override;  Add a new directory to the dynamic path. ;  ; void AddFileHandler (TFileHandler *fh) override;  Add a file handler to the list of system file handlers. ;  ; void AddSignalHandler (TSignalHandler *sh) override;  Add a signal handler to list of system signal handlers. ;  ; void AddTimer (TTimer *ti) override;  Add timer to list of system timers. ;  ; int AnnounceTcpService (int port, Bool_t reuse, int backlog, int tcpwindowsize=-1) override;  Announce TCP/IP service. ;  ; int AnnounceUdpService (int port, int backlog) override;  Announce UDP service. ;  ; int AnnounceUnixService (const char *sockpath, int backlog) override;  Open a socket on path 'sockpath', bind to it and start listening for Unix domain connections to it. ;  ; int AnnounceUnixService (int port, int backlog) override;  Announce unix domain service. ;  ; const char * BaseName (const char *n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWinNTSystem.html:1624,access,access,1624,doc/master/classTWinNTSystem.html,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html,2,['access'],['access']
Security,"; event, . Node * ; node . ). private . private internal function to insert a event (node) at the proper position ; Definition at line 147 of file BinarySearchTree.cxx. ◆ InVolume(). Bool_t TMVA::BinarySearchTree::InVolume ; (; const std::vector< Float_t > & ; event, . Volume * ; volume . ); const. private . test if the data points are in the given volume ; Definition at line 415 of file BinarySearchTree.cxx. ◆ IsA(). virtual TClass * TMVA::BinarySearchTree::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::BinaryTree.; Definition at line 173 of file BinarySearchTree.h. ◆ Max(). Float_t TMVA::BinarySearchTree::Max ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to Maximum for signal and background for each variable ; Definition at line 128 of file BinarySearchTree.h. ◆ Mean(). Float_t TMVA::BinarySearchTree::Mean ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to mean for signal and background for each variable ; Definition at line 119 of file BinarySearchTree.h. ◆ Min(). Float_t TMVA::BinarySearchTree::Min ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to Minimum for signal and background for each variable ; Definition at line 125 of file BinarySearchTree.h. ◆ NormalizeTree() [1/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; ). Normalisation of tree. ; Definition at line 343 of file BinarySearchTree.cxx. ◆ NormalizeTree() [2/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; leftBound, . std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; rightBound, . UInt_t ; actDim . ). private . normalises the binary-search tree to reduce the branch length and hence speed up the search procedure (on average). ; Definition at line 286 of file BinarySearchTree.cxx. ◆ RMS() [1/2]. Float_t TMVA::BinarySearchTree::RMS ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to RMS for signal ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:12625,access,access,12625,doc/master/classTMVA_1_1BinarySearchTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html,1,['access'],['access']
Security,"; function members; data members; class charts. ROOT; » NET; » NET; » TNetSystem. class TNetSystem: public TSystem. TNetFile. A TNetFile is like a normal TFile except that it reads and writes; its data via a rootd server (for more on the rootd daemon see the; source files root/rootd/src/*.cxx). TNetFile file names are in; standard URL format with protocol ""root"" or ""roots"". The following; are valid TNetFile URL's:. roots://hpsalo/files/aap.root; root://hpbrun.cern.ch/root/hsimple.root; root://pcna49a:5151/~na49/data/run821.root; root://pcna49d.cern.ch:5050//v1/data/run810.root. The only difference with the well known httpd URL's is that the root; of the remote file tree is the user's home directory. Therefore an; absolute pathname requires a // after the host or port specifier; (see last example). Further the expansion of the standard shell; characters, like ~, $, .., are handled as expected.; TNetFile (actually TUrl) uses 1094 as default port for rootd. Connecting to a rootd requires the remote user id and password.; TNetFile allows three ways for you to provide your login:; 1) Setting it globally via the static functions:; TAuthenticate::SetGlobalUser() and; TAuthenticate::SetGlobalPasswd(); 2) Getting it from the ~/.netrc file (same file as used by ftp); 3) Command line prompt; The different methods will be tried in the order given above.; On machines with AFS rootd will authenticate using AFS (if it was; compiled with AFS support). If the protocol is specified as ""roots"" a secure authetication; method will be used. The secure method uses the SRP, Secure Remote; Passwords, package. SRP uses a so called ""asymmetric key exchange //; protocol"" in which no passwords are ever send over the wire. This //; protocol is safe against all known security attacks. For more see:. NetFile //; ; //; If the protocol is specified as ""rootk"" kerberos5 will be used for; authentication. The rootd daemon lives in the directory $ROOTSYS/bin. It can be; started either via inetd or by ha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TNetSystem.html:1196,password,password,1196,root/html528/TNetSystem.html,https://root.cern,https://root.cern/root/html528/TNetSystem.html,6,['password'],['password']
Security,"; gROOT->GetListOfFunctions(); gROOT->GetListOfSpecials(); gROOT->GetListOfGeometries(); gROOT->GetListOfBrowsers(); gROOT->GetListOfMessageHandlers(); These methods return a TSeqCollection, meaning a collection of objects, and they can be used to do list operations such as finding an object, or traversing the list and calling a method for each of the members. See the TCollection class description for the full set of methods supported for a collection. For example, to find a canvas called c1you can do:; root[] gROOT->GetListOfCanvases()->FindObject(""c1""); This returns a pointer to a TObject, and before you can use it as a canvas you need to cast it to a TCanvas*.; 2.6.2 gFile; gFile is the pointer to the current opened file in the ROOT session.; 2.6.3 gDirectory; gDirectory is a pointer to the current directory. The concept and role of a directory is explained in the chapter “Input/Output”.; 2.6.4 gPad; A graphic object is always drawn on the active pad. It is convenient to access the active pad, no matter what it is. For that, we have gPad that is always pointing to the active pad. For example, if you want to change the fill color of the active pad to blue, but you do not know its name, you can use gPad.; root[] gPad->SetFillColor(38); To get the list of colors, if you have an open canvas, click in the “View” menu, selecting the “Colors” entry.; 2.6.5 gRandom; gRandom is a pointer to the current random number generator. By default, it points to a TRandom3 object, based on the “Mersenne-Twister” generator. This generator is very fast and has very good random proprieties (a very long period of 10600). Setting the seed to 0 implies that the seed will be uniquely generated using the TUUID. Any other value will be used as a constant. The following basic random distributions are provided: Rndm() or Uniform(min,max), Gaus(mean,sigma), Exp(tau), BreitWigner(mean,sigma), Landau(mean,sigma), Poisson(mean), Binomial(ntot,prob). You can customize your ROOT session by replacing ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:61462,access,access,61462,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['access'],['access']
Security,"; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Int_tfSize; TExMap::Assoc_t*fTable; Int_tfTally. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TExMap(Int_t mapSize = 100); Create a TExMap. TExMap(const TExMap& map); Copy constructor. TExMap& operator=(const TExMap& ); Assignement operator. ~TExMap(); Delete TExMap. void Add(ULong64_t hash, Long64_t key, Long64_t value); Add an (key,value) pair to the table. The key should be unique. void AddAt(UInt_t slot, ULong64_t hash, Long64_t key, Long64_t value); Add an (key,value) pair to the table. The key should be unique.; If the 'slot' is open, use it to store the value,; otherwise revert to Add(hash,key,value); This is usually used in conjuction with GetValue wiht 3 parameters:; if ((idx = (ULong64_t)fMap->GetValue(hash, key, slot)) != 0) {. } else {; fMap->AddAt(slot,hash,key,value);; }. Long64_t & operator()(ULong64_t hash, Long64_t key); Return a reference to the value belonging to the key with the; specified hash value. If the key does not exist it will be added.; NOTE: the reference will be invalidated an Expand() triggered by; an Add() or another operator() call. void Delete(Option_t* opt = """"); Delete all entries stored in the TExMap. Long64_t GetValue(ULong64_t hash, Long64_t key); Return the value belonging to specified key and hash value. If key not; found return 0. Long64_t GetValue(ULong64_t hash, Long64_t key, UInt_t& slot); Return the value belonging to specified key and hash value. If key not; found return 0.; In 'slot', return the index of the slot used or the first empty slot.; (to be used with AddAt). void Remove(ULong64_t hash, Long64_t key); Remove entry with specified key from the TExMap. Int_t FindElement(ULong64_t hash, Long64_t key); Find an entry with specified hash and key in the TExMap.; Returns the slot of the key or ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TExMap.html:6655,hash,hash,6655,root/html528/TExMap.html,https://root.cern,https://root.cern/root/html528/TExMap.html,4,['hash'],['hash']
Security,; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfAccessIdUser id ; TStringfAccessKeySecret key; TArchiveFile*TFile::fArchive!Archive file from which we read this file; Long64_tTFile::fArchiveOffset!Offset at which file starts in archive; TFileOpenHandle*TFile::fAsyncHandle!For proper automatic cleanup; TFile::EAsyncOpenStatusTFile::fAsyncOpenStatus!Status of an asynchronous open request; TStringfAuthPrefixAuthentication prefix for Amazon S3; Long64_tTFile::fBEGINFirst used byte in file; TStringTWebFile::fBasicUrlbasic url without authentication and options; TStringTWebFile::fBasicUrlOrgsave original url in case of temp redirection; TStringfBucketBucket name; Int_tTDirectoryFile::fBufferSizeDefault buffer size to create new TKeys; Long64_tTFile::fBytesReadNumber of bytes read from this file; Long64_tTFile::fBytesReadExtraNumber of extra bytes (overhead) read by the readahead buffer; Long64_tTFile::fBytesWriteNumber of bytes written to this file; TFileCacheRead*TFile::fCacheRead!Pointer to the read cache (if any); TFileCacheWrite*TFile::fCacheWrite!Pointer to the write cache (if any); TArrayC*TFile::fClassIndex!Index of TStreamerInfo classes written to this file; Int_tTFile::fCompressCompression level and algorithm; TDirectory::TContext*TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; Int_tTFile::fDFile descriptor; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; Long64_tTFile::fENDLast used byte in file; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TFile::fFreeFree segments linked list table; Bool_tTWebFile::fHTTP11true if server support HTTP/1.1; Bool_tTWebFile::fHasModRoottrue if server has mod_root installed; TList*TFile::fInfoCache!Cached list of the streamer infos in this file; Bool_tTFile::fInitD,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TAS3File.html:19317,authenticat,authentication,19317,root/html532/TAS3File.html,https://root.cern,https://root.cern/root/html532/TAS3File.html,1,['authenticat'],['authentication']
Security,; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TArchiveFile*TFile::fArchive!Archive file from which we read this file; Long64_tTFile::fArchiveOffset!Offset at which file starts in archive; TFileOpenHandle*TFile::fAsyncHandle!For proper automatic cleanup; TFile::EAsyncOpenStatusTFile::fAsyncOpenStatus!Status of an asynchronous open request; Long64_tTFile::fBEGINFirst used byte in file; TStringfBasicUrlbasic url without authentication and options; TStringfBasicUrlOrgsave original url in case of temp redirection; Int_tTDirectoryFile::fBufferSizeDefault buffer size to create new TKeys; Long64_tTFile::fBytesReadNumber of bytes read from this file; Long64_tTFile::fBytesReadExtraNumber of extra bytes (overhead) read by the readahead buffer; Long64_tTFile::fBytesWriteNumber of bytes written to this file; TFileCacheRead*TFile::fCacheRead!Pointer to the read cache (if any); TMap*TFile::fCacheReadMap!Pointer to the read cache (if any); TFileCacheWrite*TFile::fCacheWrite!Pointer to the write cache (if any); TArrayC*TFile::fClassIndex!Index of TStreamerInfo classes written to this file; Int_tTFile::fCompressCompression level and algorithm; TDirectory::TContext*TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; Int_tTFile::fDFile descriptor; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; Long64_tTFile::fENDLast used byte in file; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TFile::fFreeFree segments linked list table; Bool_tfHTTP11true if server support HTTP/1.1; Bool_tfHasModRoottrue if server has mod_root installed; TList*TFile::fInfoCache!Cached list of the streamer infos in this file; Bool_tTFile::fInitDone!True if the file has been initialized; Bool_tTFile::fIsArc,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TWebFile.html:18849,authenticat,authentication,18849,root/html534/TWebFile.html,https://root.cern,https://root.cern/root/html534/TWebFile.html,1,['authenticat'],['authentication']
Security,"; kStandard; kVerbose; kTreeStructure; };. public:. static map<RooAbsArg*,TRefArray*>RooAbsArg::_ioEvoListtemporary holding list for proxies needed in schema evolution ; static stack<RooAbsArg*>RooAbsArg::_ioReadStackreading stack ; static const UInt_tRooAbsArg::fnv1a32start; static const ULong64_tRooAbsArg::fnv1a64start. protected:. set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsCategory::_byteValue! Transient cache for byte values from tree branches; deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooSetProxy_catSetSet of input category; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMultiCategory.html:21533,access,access,21533,root/html534/RooMultiCategory.html,https://root.cern,https://root.cern/root/html534/RooMultiCategory.html,1,['access'],['access']
Security,"; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooLinkedListElem*_first! Link to first element of list; Int_t_hashThreshSize threshold for hashing; RooHashTable*_htableLink! Hash table by link pointer; RooHashTable*_htableName! Hash table by name ; RooLinkedListElem*_last! Link to last element of list; TString_name; Int_t_sizeCurrent size of list; Bool_t_useNptr!. private:. static RooLinkedListImplDetails::Pool*_pool!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooLinkedList(Int_t htsize = 0). RooLinkedList(const RooLinkedList& other); Copy constructor. RooLinkedListElem* createElement(TObject* obj, RooLinkedListElem* elem = 0); cout << ""RooLinkedList::createElem("" << this << "") obj = "" << obj << "" elem = "" << elem << endl ;. void deleteElement(RooLinkedListElem* ). RooLinkedList& operator=(const RooLinkedList& other); Assignment operator, copy contents from 'other'. void setHashTableSize(Int_t size); Change the threshold for hash-table use to given size.; If a hash table exists when this method is called, it is regenerated. ~RooLinkedList(); Destructor. RooLinkedListElem* findLink(const TObject* arg) const; Find the element link containing the given object. void Add(TObject* arg, Int_t refCount); Insert object into collection with given reference count value. Bool_t Remove(TObject* arg); Remove object from collection. TObject* At(Int_t index) const; Return object stored in sequential position given by index.; If index is out of range, a null pointer is returned. Bool_t Replace(const TObject* oldArg, const TObject* newArg); Replace object 'oldArg' in collection with new object 'newArg'.; If 'oldArg' is not found in collection kFALSE is returned. TObject* FindObject(const char* name) const; Return pointer to obejct with given name. If no such object; is found return a null pointer. TObject* FindObject(const TObject* obj) const; Find object in list. If list contains object return; (same) point",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooLinkedList.html:7154,hash,hash-table,7154,root/html534/RooLinkedList.html,https://root.cern,https://root.cern/root/html534/RooLinkedList.html,1,['hash'],['hash-table']
Security,"; max, . Int_t & ; count . ). virtual . Returns list of font names matching fontname regexp, like ""-*-times-*"". ; The pattern string can contain any characters, but each asterisk (*) is a wildcard for any number of characters, and each question mark (?) is a wildcard for a single character. If the pattern string is not in the Host Portable Character Encoding, the result is implementation dependent. Use of uppercase or lowercase does not matter. Each returned string is null-terminated.; Parameters. [in]fontnamespecifies the null-terminated pattern string that can contain wildcard characters ; [in]maxspecifies the maximum number of names to be returned ; [in]countreturns the actual number of font names . Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 2260 of file TVirtualX.cxx. ◆ LoadQueryFont(). FontStruct_t TVirtualX::LoadQueryFont ; (; const char * ; font_name). virtual . Provides the most common way for accessing a font: opens (loads) the specified font and returns a pointer to the appropriate FontStruct_t structure. ; If the font does not exist, it returns NULL. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 1299 of file TVirtualX.cxx. ◆ LookupString(). void TVirtualX::LookupString ; (; Event_t * ; event, . char * ; buf, . Int_t ; buflen, . UInt_t & ; keysym . ). virtual . Converts the keycode from the event structure to a key symbol (according to the modifiers specified in the event structure and the current keyboard mapping). ; In ""buf"" a null terminated ASCII string is returned representing the string that is currently mapped to the key code.; Parameters. [in]eventspecifies the event structure to be used ; [in]bufreturns the translated characters ; [in]buflenthe length of the buffer ; [in]keysymreturns the ""keysym"" computed from the event if this argument is not NULL . Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 2009 of file TVirtualX.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:100277,access,accessing,100277,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,1,['access'],['accessing']
Security,; mg_domain_context::ssl_ctxSSL_CTX * ssl_ctxDefinition civetweb.c:2252; mg_domain_context::handlersstruct mg_handler_info * handlersDefinition civetweb.c:2254; mg_error_dataDefinition civetweb.h:1671; mg_error_data::codeunsigned * codeDefinition civetweb.h:1672; mg_error_data::text_buffer_sizesize_t text_buffer_sizeDefinition civetweb.h:1674; mg_error_data::textchar * textDefinition civetweb.h:1673; mg_file_accessDefinition civetweb.c:1871; mg_file_access::fpFILE * fpDefinition civetweb.c:1873; mg_file_statDefinition civetweb.c:1860; mg_file_stat::sizeuint64_t sizeDefinition civetweb.c:1862; mg_file_stat::locationint locationDefinition civetweb.c:1867; mg_file_stat::is_directoryint is_directoryDefinition civetweb.c:1864; mg_file_stat::last_modifiedtime_t last_modifiedDefinition civetweb.c:1863; mg_file_stat::is_gzippedint is_gzippedDefinition civetweb.c:1865; mg_fileDefinition civetweb.c:1876; mg_file::statstruct mg_file_stat statDefinition civetweb.c:1877; mg_file::accessstruct mg_file_access accessDefinition civetweb.c:1878; mg_handler_infoDefinition civetweb.c:2210; mg_handler_info::handlermg_request_handler handlerDefinition civetweb.c:2219; mg_handler_info::uri_lensize_t uri_lenDefinition civetweb.c:2213; mg_handler_info::auth_handlermg_authorization_handler auth_handlerDefinition civetweb.c:2233; mg_handler_info::close_handlermg_websocket_close_handler close_handlerDefinition civetweb.c:2227; mg_handler_info::nextstruct mg_handler_info * nextDefinition civetweb.c:2239; mg_handler_info::urichar * uriDefinition civetweb.c:2212; mg_handler_info::refcountunsigned int refcountDefinition civetweb.c:2220; mg_handler_info::connect_handlermg_websocket_connect_handler connect_handlerDefinition civetweb.c:2224; mg_handler_info::cbdatavoid * cbdataDefinition civetweb.c:2236; mg_handler_info::subprotocolsstruct mg_websocket_subprotocols * subprotocolsDefinition civetweb.c:2230; mg_handler_info::handler_typeint handler_typeDefinition civetweb.c:2216; mg_handler_info::removi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:708730,access,accessstruct,708730,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,['access'],"['accessDefinition', 'accessstruct']"
Security,; mg_domain_context::ssl_ctxSSL_CTX * ssl_ctxDefinition civetweb.c:2253; mg_domain_context::handlersstruct mg_handler_info * handlersDefinition civetweb.c:2255; mg_error_dataDefinition civetweb.h:1671; mg_error_data::codeunsigned * codeDefinition civetweb.h:1672; mg_error_data::text_buffer_sizesize_t text_buffer_sizeDefinition civetweb.h:1674; mg_error_data::textchar * textDefinition civetweb.h:1673; mg_file_accessDefinition civetweb.c:1872; mg_file_access::fpFILE * fpDefinition civetweb.c:1874; mg_file_statDefinition civetweb.c:1861; mg_file_stat::sizeuint64_t sizeDefinition civetweb.c:1863; mg_file_stat::locationint locationDefinition civetweb.c:1868; mg_file_stat::is_directoryint is_directoryDefinition civetweb.c:1865; mg_file_stat::last_modifiedtime_t last_modifiedDefinition civetweb.c:1864; mg_file_stat::is_gzippedint is_gzippedDefinition civetweb.c:1866; mg_fileDefinition civetweb.c:1877; mg_file::statstruct mg_file_stat statDefinition civetweb.c:1878; mg_file::accessstruct mg_file_access accessDefinition civetweb.c:1879; mg_handler_infoDefinition civetweb.c:2211; mg_handler_info::handlermg_request_handler handlerDefinition civetweb.c:2220; mg_handler_info::uri_lensize_t uri_lenDefinition civetweb.c:2214; mg_handler_info::auth_handlermg_authorization_handler auth_handlerDefinition civetweb.c:2234; mg_handler_info::close_handlermg_websocket_close_handler close_handlerDefinition civetweb.c:2228; mg_handler_info::nextstruct mg_handler_info * nextDefinition civetweb.c:2240; mg_handler_info::urichar * uriDefinition civetweb.c:2213; mg_handler_info::refcountunsigned int refcountDefinition civetweb.c:2221; mg_handler_info::connect_handlermg_websocket_connect_handler connect_handlerDefinition civetweb.c:2225; mg_handler_info::cbdatavoid * cbdataDefinition civetweb.c:2237; mg_handler_info::subprotocolsstruct mg_websocket_subprotocols * subprotocolsDefinition civetweb.c:2231; mg_handler_info::handler_typeint handler_typeDefinition civetweb.c:2217; mg_handler_info::removi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:708763,access,accessstruct,708763,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,2,['access'],"['accessDefinition', 'accessstruct']"
Security,"; num_features = len(input_columns); ; ; def calc_accuracy(targets, pred):; return torch.sum(targets == pred.round()) / pred.size(0); ; ; # Initialize PyTorch model; model = torch.nn.Sequential(; torch.nn.Linear(num_features, 300),; torch.nn.Tanh(),; torch.nn.Linear(300, 300),; torch.nn.Tanh(),; torch.nn.Linear(300, 300),; torch.nn.Tanh(),; torch.nn.Linear(300, 1),; torch.nn.Sigmoid(),; ); loss_fn = torch.nn.MSELoss(reduction=""mean""); optimizer = torch.optim.SGD(model.parameters(), lr=0.01, momentum=0.9); ; ; # Loop through the training set and train model; for i, (x_train, y_train) in enumerate(gen_train):; # Make prediction and calculate loss; pred = model(x_train).view(-1); loss = loss_fn(pred, y_train); ; # improve model; model.zero_grad(); loss.backward(); optimizer.step(); ; # Calculate accuracy; accuracy = calc_accuracy(y_train, pred); ; print(f""Training => accuracy: {accuracy}""); ; #################################################################; # Validation; #################################################################; ; # Evaluate the model on the validation set; for i, (x_train, y_train) in enumerate(gen_validation):; # Make prediction and calculate accuracy; pred = model(x_train).view(-1); accuracy = calc_accuracy(y_train, pred); ; print(f""Validation => accuracy: {accuracy}""); lenOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h uns",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RBatchGenerator__PyTorch_8py.html:1942,validat,validation,1942,doc/master/RBatchGenerator__PyTorch_8py.html,https://root.cern,https://root.cern/doc/master/RBatchGenerator__PyTorch_8py.html,1,['validat'],['validation']
Security,"; opening the file.; - a call to TExec::SetAction at any time.; One can compute a pointer to an existing TExec with a name with:; TExec *myExec = gROOT->GetExec(execName);; myExec->SetAction(actionCommand); where; - actionCommand is a string containing a CINT instruction. Examples:; myExec->SetAction(""LoadHits()"");; myExec->SetAction("".x script.C"");. When a TRef is dereferenced via TRef::GetObject, its TExec will be; automatically executed. In the function/script being executed, one or more; of the following actions can be executed:; - load a file containing the referenced object. This function typically; looks in the file catalog (GRID).; - compute a pointer to the referenced object and communicate this pointer; back to the calling function TRef::GetObject via:; TRef::SetStaticObject(object).; When the TExec is called, it has access to the dereferencing TRef; by calling GetStaticObject() (TRef::GetObject() sets fgObject to ""this""; before the call to TExec). This can be useful for accessing the TRef's; fUniqueID.; As soon as an object is returned to GetObject, the fUniqueID of the TRef is set; to the fUniqueID of the referenced object. At the next call to GetObject,; the pointer stored in fPid:fObjects[fUniqueID] will be returned directly. An example of action on demand is shown in $ROOTSYS/test/Event.h with; the member:; TRef fWebHistogram; //EXEC:GetWebHistogram; When calling fWebHistogram.GetObject(), the function GetObject; will automatically invoke a script GetWebHistogram.C via the interpreter.; An example of a GetWebHistogram.C script is shown below; void GetWebHistogram() {; TFile *f= TFile::Open(""http://root.cern.ch/files/pippa.root"");; f->cd(""DM/CJ"");; TH1 *h6 = (TH1*)gDirectory->Get(""h6"");; h6->SetDirectory(0);; delete f;; TRef::SetStaticObject(h6);; }; In the above example, a call to fWebHistogram.GetObject() executes the; script with the function GetWebHistogram. This script connects a file; with histograms: pippa.root on the ROOT Web site and returns t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRef.html:6842,access,accessing,6842,root/html528/TRef.html,https://root.cern,https://root.cern/root/html528/TRef.html,6,['access'],['accessing']
Security,"; port, . Int_t ; size = 0, . Int_t ; tcpwindowsize = -1, . TSocket * ; opensock = nullptr, . Int_t * ; err = nullptr . ). static . Creates a socket or a parallel socket and authenticates to the remote server specified in 'url' on remote 'port' as 'user'. ; url: [[proto][p][auth]://]host[/?options]; where proto = ""sockd"", ""rootd"", ""proofd"" indicates the type of remote server if missing ""sockd"" is assumed (""sockd"" indicates any remote server session using TServerSocket) [p] = for parallel sockets (forced internally for rootd) [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication [options] = ""m"" or ""s"", when proto=proofd indicates whether we are master or slave (used internally by TSlave); An already opened connection can be used by passing its socket in opensock.; If 'err' is defined, '*err' on return from a failed call contains an error code (see NetErrors.h).; Example:; TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3); creates an authenticated parallel socket of size 3 to a sockd server running on remote machine machine.fq.dn on port 5052; authentication will attempt protocol Kerberos first.; NB: may hang if the remote server is not of the correct type; at present TSocket has no way to find out the type of the remote server automatically; Returns pointer to an authenticated socket or 0 if creation or authentication is unsuccessful. ; Definition at line 1432 of file TSocket.cxx. ◆ DeclFileName(). static const char * TSocket::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 171 of file TSocket.h. ◆ GetBytesRecv(). UInt_t TSocket::GetBytesRecv ; (; ); const. inline . Definition at line 120 of file TSocket.h. ◆ GetBytesSent(). UInt_t TSocket::GetBytesSent ; (; ); const. inline . Definition at line 119 of file TSocket.h. ◆ GetClientProtocol(). Int_t TSocket::GetClientProtocol ; (; ). static . Static method returning supported client protocol. ; Definition at line 1469 of file TSocket.c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSocket.html:25828,authenticat,authenticated,25828,doc/master/classTSocket.html,https://root.cern,https://root.cern/doc/master/classTSocket.html,1,['authenticat'],['authenticated']
Security,"; rehashing. ~THashTable(); Delete a hashtable. Objects are not deleted unless the THashTable is the; owner (set via SetOwner()). void Add(TObject* obj); Add object to the hash table. Its position in the table will be; determined by the value returned by its Hash() function. void AddBefore(const TObject* before, TObject* obj); Add object to the hash table. Its position in the table will be; determined by the value returned by its Hash() function.; If and only if 'before' is in the same bucket as obj, obj is added; in front of 'before' within the bucket's list. void AddAll(const TCollection* col); Add all objects from collection col to this collection.; Implemented for more efficient rehashing. void Clear(Option_t* option = """"); Remove all objects from the table. Does not delete the objects; unless the THashTable is the owner (set via SetOwner()). Int_t Collisions(const char* name) const; Returns the number of collisions for an object with a certain name; (i.e. number of objects in same slot in the hash table, i.e. length; of linked list). Int_t Collisions(TObject* obj) const; Returns the number of collisions for an object (i.e. number of objects; in same slot in the hash table, i.e. length of linked list). void Delete(Option_t* option = """"); Remove all objects from the table AND delete all heap based objects. TObject * FindObject(const char* name) const; Find object using its name. Uses the hash value returned by the; TString::Hash() after converting name to a TString. TObject * FindObject(const TObject* obj) const; Find object using its hash value (returned by its Hash() member). TList * GetListForObject(const char* name) const; Return the TList corresponding to object's name based hash value.; One can iterate this list ""manually"" to find, e.g. objects with; the same name. TList * GetListForObject(const TObject* obj) const; Return the TList corresponding to object's hash value.; One can iterate this list ""manually"" to find, e.g. identical; objects. TObject ** GetObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THashTable.html:10151,hash,hash,10151,root/html534/THashTable.html,https://root.cern,https://root.cern/root/html534/THashTable.html,3,['hash'],['hash']
Security,"; silent = kFALSE . ). Create a TClass object. ; This object contains the full dictionary of a class. It has list to baseclasses, datamembers and methods. Use this ctor to create a standalone TClass object. Only useful to get a temporary TClass interface to an interpreted class. Used by TTabCom.; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1103 of file TClass.cxx. ◆ TClass() [4/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . Bool_t ; silent = kFALSE . ). Internal constructor. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1151 of file TClass.cxx. ◆ TClass() [5/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . EState ; theState, . Bool_t ; silent = kFALSE . ). Internal constructor, mimicing the case of a class fwd declared in the interpreter. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1179 of file TClass.cxx. ◆ TClass() [6/8]. TClass::TClass ; (; ClassInfo_t * ; classInfo, . Version_t ; cversion, . const char * ; dfil, . const char * ; ifil = nullptr, . Int_t ; dl = 0, . Int_t ; il = 0, . Bool_t ; silent = kFALSE . ). Internal constructor. ; Create a TClass object. This object contains the full dictionary of a class. It has list to baseclasses, datamembers and methods. Use this ctor to create a standalone TClass object. Most useful to get a TClass interface to an interpreted class. Used by TTabCom.; This copies the ClassInfo (i.e. does not take ownership of it).; NoteUse TClass::GetClass(""class"") to get access to a TClass object for a certain class! ; Definition at line 1224 of file TClass.cxx. ◆ TClass() [7/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . const char * ; dfil, . const char * ; ifil = nullptr, . Int_t ; dl = 0, . Int_t ; il = 0, . Bool_t ; silent = kFALSE . ). Internal constructor.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:50476,access,access,50476,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,1,['access'],['access']
Security,"; silent = kFALSE . ). Create a TClass object. ; This object contains the full dictionary of a class. It has list to baseclasses, datamembers and methods. Use this ctor to create a standalone TClass object. Only useful to get a temporary TClass interface to an interpreted class. Used by TTabCom.; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1170 of file TClass.cxx. ◆ TClass() [4/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . Bool_t ; silent = kFALSE . ). Internal constructor. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1218 of file TClass.cxx. ◆ TClass() [5/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . EState ; theState, . Bool_t ; silent = kFALSE . ). Internal constructor, mimicing the case of a class fwd declared in the interpreter. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1246 of file TClass.cxx. ◆ TClass() [6/8]. TClass::TClass ; (; ClassInfo_t * ; classInfo, . Version_t ; cversion, . const char * ; dfil, . const char * ; ifil = nullptr, . Int_t ; dl = 0, . Int_t ; il = 0, . Bool_t ; silent = kFALSE . ). Internal constructor. ; Create a TClass object. This object contains the full dictionary of a class. It has list to baseclasses, datamembers and methods. Use this ctor to create a standalone TClass object. Most useful to get a TClass interface to an interpreted class. Used by TTabCom.; This copies the ClassInfo (i.e. does not take ownership of it).; NoteUse TClass::GetClass(""class"") to get access to a TClass object for a certain class! ; Definition at line 1291 of file TClass.cxx. ◆ TClass() [7/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . const char * ; dfil, . const char * ; ifil = nullptr, . Int_t ; dl = 0, . Int_t ; il = 0, . Bool_t ; silent = kFALSE . ). Internal constructor.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass.html:50477,access,access,50477,doc/master/classTClass.html,https://root.cern,https://root.cern/doc/master/classTClass.html,1,['access'],['access']
Security,"; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; TString ComputeSignature (TS3HTTPRequest::EHTTPVerb httpVerb) const;  Returns this request's signature. ;  ; TString HTTPVerbToTString (EHTTPVerb httpVerb) const;  ; TString MakeAuthHeader (TS3HTTPRequest::EHTTPVerb httpVerb) const;  Returns the authentication header for this HTTP request. ;  ; TString MakeAuthPrefix () const;  Returns the authentication prefix. ;  ; TString MakeDateHeader () const;  Returns the date header for this HTTP request. ;  ; TString MakeHostHeader () const;  Returns the 'Host' header to include in the HTTP request. ;  ; TString MakeRequestLine (TS3HTTPRequest::EHTTPVerb httpVerb) const;  Returns the first line of a HTTP request for this object. ;  ; TString MakeTokenHeader () const;  Returns the session security token header for this HTTP request. ;  ; TS3HTTPRequest & SetTimeStamp ();  Sets this request's time stamp according to: http://code.google.com/apis/storage/docs/reference-headers.html#date. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Attributes; TString fAccessKey;  ; EAuthType fAuthType;  ; TString fBucket;  ; TString fHost;  ; TString fObjectKey;  ; TString fSecretKey;  ; TString fSessionToken;  ; TString fTimeStamp;  ; EHTTPVerb fVerb;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TS3HTTPRequest.h>. Inheritance diagram for TS3HTTPRequest:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EAuthType. enum TS3HTTPRequest::EAut",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTS3HTTPRequest.html:11685,secur,security,11685,doc/master/classTS3HTTPRequest.html,https://root.cern,https://root.cern/doc/master/classTS3HTTPRequest.html,1,['secur'],['security']
Security,"; static RooPrintable::StyleOptionRooPrintable::kTreeStructure; static RooPrintable::ContentsOptionRooPrintable::kValue; static RooPrintable::StyleOptionRooPrintable::kVerbose; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsCategory::_byteValue! Transient cache for byte values from tree branches; deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooCatType*_defCatDefault (unmapped) output type; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; RooCategoryProxy_inputCatInput category; Bool_tRooAbsArg::_isConstant! Cached isConstant status; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; map<string,RooMappedCategory::Entry>_mapArrayList of mapping rules; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMappedCategory.html:22597,access,access,22597,root/html602/RooMappedCategory.html,https://root.cern,https://root.cern/root/html602/RooMappedCategory.html,2,['access'],['access']
Security,"; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TS3WebFile. class TS3WebFile: public TWebFile. TS3WebFile. A TS3WebFile is a TWebFile which retrieves the file contents from a; web server implementing the REST API of the Amazon S3 protocol. This; class is meant to be as generic as possible to be used with files; hosted not only by Amazon S3 servers but also by other providers; implementing the core of the S3 protocol. The S3 protocol works on top of HTTPS (and HTTP) and imposes that; each HTTP request be signed using a specific convention: the request; must include an 'Authorization' header which contains the signature; of a concatenation of selected request fields. For signing the; request, an 'Access Key Id' and a 'Secret Access Key' need to be; known. These keys are used by the S3 servers to identify the client; and to authenticate the request as genuine. As an end user, you must know the Access Key and Secret Access Key; in order to access each S3 file. They are provided to you by your S3; service provider. Those two keys can be provided to ROOT when; initializing an object of this class by two means:; a) by using the environmental variables S3_ACCESS_KEY and; S3_SECRET_KEY, or; b) by specifying them when opening each file. The first method is convenient if all the S3 files you want to; access are hosted by a single provider. The second one is more; flexible as it allows you to specify which credentials to use; on a per-file basis. See the documentation of the constructor of; this class for details on the syntax. For generating and signing the HTTP request, this class uses; TS3HTTPRequest. For more information on the details of S3 protocol please refer to:; ""Amazon Simple Storage Service Developer Guide"":; http://docs.amazonwebservices.com/AmazonS3/latest/dev/Welcome.html. ""Amazon Simple Storage Service REST API Reference""; http://docs.amazonwebservices.com/AmazonS3/latest/API/APIRest",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TS3WebFile.html:1145,access,access,1145,root/html534/TS3WebFile.html,https://root.cern,https://root.cern/root/html534/TS3WebFile.html,1,['access'],['access']
Security,"; virtual Bool_t HandleIdleEvent (TGIdleHandler *);  ; Bool_t HandleTimer (TTimer *) override;  Execute action in response of a timer timing out. ;  ; virtual void IconifyWindow ();  iconify window ;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual void LowerWindow ();  lower window ;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionFrame.html:14139,hash,hash,14139,doc/master/classTSessionFrame.html,https://root.cern,https://root.cern/doc/master/classTSessionFrame.html,4,['hash'],['hash']
Security,"; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; RooLinkedListElem*findLink(const TObject* arg) const; voidTObject::MakeZombie(); voidswapWithNext(RooLinkedListElem* elem). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooLinkedListElem*_first! Link to first element of list; Int_t_hashThreshSize threshold for hashing; RooHashTable*_htableLink! Hash table by link pointer; RooHashTable*_htableName! Hash table by name ; RooLinkedListElem*_last! Link to last element of list; TString_name; Int_t_sizeCurrent size of list. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooLinkedList(Int_t htsize); Constructor with hashing threshold. If collection size exceeds threshold; a hash table is added. RooLinkedList(const RooLinkedList& other); Copy constructor. RooLinkedList& operator=(const RooLinkedList& other); Assignment operator, copy contents from 'other'. void setHashTableSize(Int_t size); Change the threshold for hash-table use to given size.; If a hash table exists when this method is called, it is regenerated. ~RooLinkedList(); Destructor. RooLinkedListElem* findLink(const TObject* arg) const; Find the element link containing the given object. void Add(TObject* arg, Int_t refCount); Insert object into collection with given reference count value. Bool_t Remove(TObject* arg); Remove object from collection. TObject* At(Int_t index) const; Return object stored in sequential position given by index.; If index is out of range, a null pointer is returned. Bool_t Replace(const TObject* oldArg, const TObject* newArg); Replace object 'oldArg' in collection with new object 'newArg'.; If 'oldArg' is not found in collection kFALSE is returned. TObject* Fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooLinkedList.html:6495,hash,hash,6495,root/html526/RooLinkedList.html,https://root.cern,https://root.cern/root/html526/RooLinkedList.html,1,['hash'],['hash']
Security,"; virtual voidprintCompactTreeHook(ostream&, const char*); virtual Bool_tredirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidreset(); RooCacheManager<vector<double,allocator<double> > >(Int_t maxSize = 10); RooCacheManager<vector<double,allocator<double> > >(RooAbsArg* owner, Int_t maxSize = 10); RooCacheManager<vector<double,allocator<double> > >(const RooCacheManager<vector<double,allocator<double> > >& other, RooAbsArg* owner = 0); Int_tsetObj(const RooArgSet* nset, vector<double,allocator<double> >* obj, const TNamed* isetRangeName = 0); Int_tsetObj(const RooArgSet* nset, const RooArgSet* iset, vector<double,allocator<double> >* obj, const TNamed* isetRangeName = 0); virtual voidShowMembers(TMemberInspector& insp); virtual voidsterilize(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. Int_t_lastIndexLast slot accessed; Int_t_maxSizeMaximum size; RooNormSetCache*_nsetCache! Normalization/Integration set manager; vector<double,allocator<double> >**_object! Payload; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_t_sizeActual use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; T* getObj(const RooArgSet* nset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); Getter function without integration set. return getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0). Int_t setObj(const RooArgSet* nset, vector<double,allocator<double> >* obj, const TNamed* isetRangeName = 0); Setter function without integration set. return setObj(const RooArgSet* nset, const RooArgSet* iset, vector<double,allocator<double> >* obj, const TNamed* isetRangeName = 0). void reset(). void sterilize(). Int_t lastIndex() const; Return index of slot used in last get or set operation. Int_t cacheSize() const; Return size of cache. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCacheManager_vector_double___.html:3094,access,accessed,3094,root/html530/RooCacheManager_vector_double___.html,https://root.cern,https://root.cern/root/html530/RooCacheManager_vector_double___.html,2,['access'],['accessed']
Security,"; voidRooAbsArg::unRegisterProxy(RooListProxy& proxy). Data Members; public:. enum RooAbsReal::ScaleType { Raw; Relative; NumEvent; RelativeExpected; };; enum RooAbsArg::ConstOpCode { Activate; DeActivate; ConfigChange; ValueChange; };; enum RooAbsArg::OperMode { Auto; AClean; ADirty; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; Bool_t_cdfBoundariesUse boundary conditions for CDFs.; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistry_codeReg! Auxiliary class keeping tracking of analytical integration code; RooDataHist*_dataHistUnowned pointer to underlying histogram; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooSetProxy_depListList of dependents defining dimensions of histogram; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooHistFunc.html:29790,validat,validate,29790,root/html526/RooHistFunc.html,https://root.cern,https://root.cern/root/html526/RooHistFunc.html,1,['validat'],['validate']
Security,"; voidTHttpEngine::SetServer(THttpServer* serv). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. void*fCallbacks! call-back table for civetweb webserver; void*fCtx! civetweb context; Bool_tfDebug! debug mode; TStringTNamed::fNameobject identifier; THttpServer*THttpEngine::fServer! object server; TStringTNamed::fTitleobject title; TStringfTopName! name of top item. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCivetweb(); constructor. ~TCivetweb(); destructor. Bool_t Create(const char* args); Creates embedded civetweb server; As argument, http port should be specified in form ""8090""; One could provide extra parameters after '?' (like URL parameters); thrds=N - there N is number of threads used by the civetweb (default is 5); top=name - configure top name, visible at the web browser; auth_file=filename - authentication file name, created with htdigets utility; auth_domain=domain - authentication domain. TCivetweb(). const char * GetTopName() const. Bool_t IsDebugMode() const; indicates that. » Last changed: Tue Sep 8 17:43:13 2015 » Last generated: 2015-09-08 17:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TCivetweb.html:7654,authenticat,authentication,7654,root/html604/TCivetweb.html,https://root.cern,https://root.cern/root/html604/TCivetweb.html,2,['authenticat'],['authentication']
Security,"; void RemoveReadCallback (size_t idx);  . Static Protected Member Functions; static std::size_t CallAppendOn (RFieldBase &other, const void *from);  Allow derived classes to call Append and Read on other (sub) fields. ;  ; static void CallConstructValueOn (const RFieldBase &other, void *where);  Allow derived classes to call ConstructValue(void *) and GetDeleter on other (sub) fields. ;  ; static void * CallCreateObjectRawPtrOn (RFieldBase &other);  ; static void CallReadOn (RFieldBase &other, NTupleSize_t globalIndex, void *to);  ; static void CallReadOn (RFieldBase &other, RClusterIndex clusterIndex, void *to);  ; static RResult< std::unique_ptr< RFieldBase > > Create (const std::string &fieldName, const std::string &canonicalType, const std::string &typeAlias, bool continueOnError=false);  Factory method to resurrect a field from the stored on-disk type information. ;  ; static std::unique_ptr< RDeleter > GetDeleterOf (const RFieldBase &other);  ; static Internal::RColumn * GetPrincipalColumnOf (const RFieldBase &other);  Fields may need direct access to the principal column of their sub fields, e.g. in RRVecField::ReadBulk. ;  . Protected Attributes; Internal::RColumn * fAuxiliaryColumn = nullptr;  Some fields have a second column in its column representation. ;  ; std::vector< std::unique_ptr< Internal::RColumn > > fAvailableColumns;  The columns are connected either to a sink or to a source (not to both); they are owned by the field. ;  ; std::vector< std::reference_wrapper< const ColumnRepresentation_t > > fColumnRepresentatives;  Pointers into the static vector GetColumnRepresentations().GetSerializationTypes() when SetColumnRepresentatives is called. ;  ; std::uint32_t fOnDiskTypeChecksum = 0;  TClass checksum cached from the descriptor after a call to ConnectPageSource(). ;  ; std::uint32_t fOnDiskTypeVersion = kInvalidTypeVersion;  C++ type version cached from the descriptor after a call to ConnectPageSource() ;  ; RFieldBase * fParent;  Sub fields point ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:12417,access,access,12417,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,1,['access'],['access']
Security,"; void Transform (const Double_t *source, Double_t *destVector);  This function transforms the source spectrum. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrumTransform.html:5101,hash,hash,5101,doc/master/classTSpectrumTransform.html,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html,1,['hash'],['hash']
Security,"; w80r, . Bool_t & ; w80v, . TString & ; wmsg . ). protected . Check the memory usage, if requested. ; Return kTRUE if OK, kFALSE if above 95% of at least one between virtual or resident limits are depassed. ; Definition at line 1512 of file TProofPlayer.cxx. ◆ Class(). static TClass * TProofPlayer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TProofPlayer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProofPlayer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 228 of file TProofPlayer.h. ◆ ClearInput(). void TProofPlayer::ClearInput ; (; ). overridevirtual . Clear input list. ; Implements TVirtualProofPlayer.; Definition at line 468 of file TProofPlayer.cxx. ◆ CreateDrawFeedback(). TDrawFeedback * TProofPlayer::CreateDrawFeedback ; (; TProof * ; p). overridevirtual . Draw feedback creation proxy. ; When accessed via TProof avoids link dependency on libProofPlayer. ; Implements TVirtualProofPlayer.; Definition at line 733 of file TProofPlayer.cxx. ◆ DeclFileName(). static const char * TProofPlayer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 228 of file TProofPlayer.h. ◆ DeleteDrawFeedback(). void TProofPlayer::DeleteDrawFeedback ; (; TDrawFeedback * ; f). overridevirtual . Delete draw feedback object. ; Implements TVirtualProofPlayer.; Definition at line 750 of file TProofPlayer.cxx. ◆ DrawCanvas(). Int_t TProofPlayer::DrawCanvas ; (; TObject * ; obj). protectedvirtual . Draw the object if it is a canvas. ; Return 0 in case of success, 1 if it is not a canvas or libProofDraw is not available. ; Definition at line 1696 of file TProofPlayer.cxx. ◆ DrawSelect(). Long64_t TProofPlayer::DrawSelect ; (; TDSet * ; set, . const char * ; varexp, . const char * ; selection, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; firstentry",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayer.html:27119,access,accessed,27119,doc/master/classTProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTProofPlayer.html,1,['access'],['accessed']
Security,";  . Protected Member Functions; void CheckFunctions () const;  Check existence of function pointers. ;  ; virtual void DeleteItem (Bool_t force, void *ptr) const;  Call to delete/destruct individual item. ;  ; TGenCollectionProxy * Initialize (Bool_t silent) const;  Proxy initializer. ;  ; virtual TGenCollectionProxy * InitializeEx (Bool_t silent);  Proxy initializer. ;  . Protected Attributes; Method fClear;  Method cache for container accessors: clear container. ;  ; Collectfunc_t fCollect;  Method to collect objects from container. ;  ; ArrIterfunc_t fConstruct;  Container accessors: block construct. ;  ; std::map< std::string, TObjArray * > * fConversionReadMemberWise;  Array of bundle of TStreamerInfoActions to stream out (read) derived from another class. ;  ; Method0 fCreateEnv;  Method to allocate an Environment holder. ;  ; Sizing_t fDestruct;  Container accessors: block destruct. ;  ; EnvironBase_t * fEnv;  Address of the currently proxied object. ;  ; Feedfunc_t fFeed;  Container accessors: block feed. ;  ; Method fFirst;  Container accessors: generic iteration: first. ;  ; CopyIterator_t fFunctionCopyIterator;  ; CreateIterators_t fFunctionCreateIterators;  ; DeleteIterator_t fFunctionDeleteIterator;  ; DeleteTwoIterators_t fFunctionDeleteTwoIterators;  ; Next_t fFunctionNextIterator;  ; Value * fKey;  Descriptor of the key_type. ;  ; std::string fName;  Name of the class being proxied. ;  ; Method fNext;  Container accessors: generic iteration: next. ;  ; TClass * fOnFileClass;  On file class. ;  ; Bool_t fPointers;  Flag to indicate if containee has pointers (key or value) ;  ; Proxies_t fProxyKept;  Optimization: Keep proxies once they were created. ;  ; Proxies_t fProxyList;  Stack of recursive proxies. ;  ; TObjArray * fReadMemberWise;  Array of bundle of TStreamerInfoActions to stream out (read) ;  ; Sizing_t fResize;  Container accessors: resize container. ;  ; Method fSize;  Container accessors: size of container. ;  ; Staged_t fStaged;  Optimiza",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenCollectionProxy.html:10532,access,accessors,10532,doc/master/classTGenCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTGenCollectionProxy.html,1,['access'],['accessors']
Security,";  ; Double_t GetUymin () const override;  Returns the minimum y-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; TView * GetView () const override;  ; TObject * GetView3D () const override;  ; TVirtualViewer3D * GetViewer3D (Option_t *type="""") override;  Create/obtain handle to 3D viewer. ;  ; TVirtualPad * GetVirtCanvas () const override;  Get virtual canvas. ;  ; UInt_t GetWh () const override;  Get Wh. ;  ; Double_t GetWNDC () const override;  Get width of pad along X in Normalized Coordinates (NDC) ;  ; UInt_t GetWw () const override;  Get Ww. ;  ; Double_t GetX1 () const override;  ; Double_t GetX2 () const override;  ; Double_t GetXlowNDC () const override;  ; Double_t GetY1 () const override;  ; Double_t GetY2 () const override;  ; Double_t GetYlowNDC () const override;  ; Bool_t HasCrosshair () const override;  Return kTRUE if the crosshair has been activated (via SetCrosshair). ;  ; Bool_t HasFixedAspectRatio () const override;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t HasViewer3D () const override;  ; void HighLight (Color_t col=kRed, Bool_t set=kTRUE) override;  Highlight pad. ;  ; Int_t IncrementPaletteColor (Int_t i, TString opt) override;  Increment (i==1) or set (i>1) the number of autocolor in the pad. ;  ; Bool_t IsBatch () const override;  Is pad in batch mode ? ;  ; Bool_t IsEditable () const override;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; Bool_t IsModified () const override;  ; Bool_t IsRetained () const override;  Is pad retained ? ;  ; Bool_t IsVertical () const override;  ; Bool_t IsWeb () const override;  Is web ? ;  ; void ls (Option_t *option="""") const override;  List all primitives in pad. ;  ; void Modified (Bool_t flag=true) override;  Mark pad modified Will be repainted when TCanvas::Update() will be called next time. ;  ; void ModifiedUpdate () overri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSlider.html:13852,hash,hash,13852,doc/master/classTSlider.html,https://root.cern,https://root.cern/doc/master/classTSlider.html,1,['hash'],['hash']
Security,";  ; Double_t GetUymin () const override;  Returns the minimum y-coordinate value visible on the pad. If log axis the returned value is in decades. ;  ; TView * GetView () const override;  ; TObject * GetView3D () const override;  ; TVirtualViewer3D * GetViewer3D (Option_t *type="""") override;  Create/obtain handle to 3D viewer. ;  ; TVirtualPad * GetVirtCanvas () const override;  Get virtual canvas. ;  ; UInt_t GetWh () const override;  Get Wh. ;  ; Double_t GetWNDC () const override;  Get width of pad along X in Normalized Coordinates (NDC) ;  ; UInt_t GetWw () const override;  Get Ww. ;  ; Double_t GetX1 () const override;  ; Double_t GetX2 () const override;  ; Double_t GetXlowNDC () const override;  ; Double_t GetY1 () const override;  ; Double_t GetY2 () const override;  ; Double_t GetYlowNDC () const override;  ; Bool_t HasCrosshair () const override;  Return kTRUE if the crosshair has been activated (via SetCrosshair). ;  ; Bool_t HasFixedAspectRatio () const override;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t HasViewer3D () const override;  ; void HighLight (Color_t col=kRed, Bool_t set=kTRUE) override;  Highlight pad. ;  ; Int_t IncrementPaletteColor (Int_t i, TString opt) override;  Increment (i==1) or set (i>1) the number of autocolor in the pad. ;  ; TClass * IsA () const override;  ; Bool_t IsBatch () const override;  Is pad in batch mode ? ;  ; Bool_t IsEditable () const override;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; Bool_t IsModified () const override;  ; Bool_t IsRetained () const override;  Is pad retained ? ;  ; Bool_t IsVertical () const override;  ; Bool_t IsWeb () const override;  Is web ? ;  ; void ls (Option_t *option="""") const override;  List all primitives in pad. ;  ; void Modified (Bool_t flag=true) override;  Mark pad modified Will be repainted when TCanvas::Update() will be called next time.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCanvas.html:20820,hash,hash,20820,doc/v632/classTCanvas.html,https://root.cern,https://root.cern/doc/v632/classTCanvas.html,7,['hash'],['hash']
Security,";  ; Int_t MakeDirectory (const char *dir) override;  Create a directory. ;  ; void * OpenDirectory (const char *dir) override;  Open a directory. ;  ; virtual Int_t Stage (const char *path, UChar_t priority);  Issue a stage request for a single file. ;  ; virtual Int_t Stage (TCollection *files, UChar_t priority);  Issue stage requests for multiple files. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; int Unlink (const char *path) override;  Unlink a file on the remote server. ;  ;  Public Member Functions inherited from TSystem;  TSystem (const char *name=""Generic"", const char *title=""Generic System"");  Create a new OS interface. ;  ; virtual ~TSystem ();  Delete the OS interface. ;  ; virtual void Abort (int code=0);  Abort the application. ;  ; virtual int AcceptConnection (int sock);  Accept a connection. ;  ; virtual Bool_t AccessPathName (const char *path, EAccessMode mode=kFileExists);  Returns FALSE if one can access a file using the specified access mode. ;  ; virtual void AddDynamicPath (const char *pathname);  Add a new directory to the dynamic path. ;  ; virtual void AddFileHandler (TFileHandler *fh);  Add a file handler to the list of system file handlers. ;  ; virtual void AddIncludePath (const char *includePath);  Add a directory to the already set include path. ;  ; virtual void AddLinkedLibs (const char *linkedLib);  Add linkedLib to already set linked libs. ;  ; virtual void AddSignalHandler (TSignalHandler *sh);  Add a signal handler to list of system signal handlers. ;  ; virtual void AddStdExceptionHandler (TStdExceptionHandler *eh);  Add an exception handler to list of system exception handlers. ;  ; virtual void AddTimer (TTimer *t);  Add timer to list of system timers. ;  ; virtual int AnnounceTcpService (int port, Bool_t reuse, int backlog, int tcpwindowsize=-1);  Announce TCP/IP service. ;  ; virtual int AnnounceUdpService (int port, int bac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetXNGSystem.html:2280,access,access,2280,doc/master/classTNetXNGSystem.html,https://root.cern,https://root.cern/doc/master/classTNetXNGSystem.html,2,['access'],['access']
Security,";  ; Int_t ReadStaticArray (UChar_t *c) override;  ; Int_t ReadStaticArray (UInt_t *i) override;  ; Int_t ReadStaticArray (ULong64_t *l) override;  ; Int_t ReadStaticArray (ULong_t *l) override;  ; Int_t ReadStaticArray (UShort_t *h) override;  ; Int_t ReadStaticArrayDouble32 (Double_t *d, TStreamerElement *ele=nullptr) override;  Read array of doubles (written as float) from the I/O buffer. ;  ; Int_t ReadStaticArrayFloat16 (Float_t *f, TStreamerElement *ele=nullptr) override;  Read array of floats (written as truncated float) from the I/O buffer. ;  ; char * ReadString (char *s, Int_t max) override;  Read string from I/O buffer. ;  ; Version_t ReadVersion (UInt_t *start=nullptr, UInt_t *bcnt=nullptr, const TClass *cl=nullptr) override;  Read class version from I/O buffer. ;  ; Version_t ReadVersionForMemberWise (const TClass *cl=nullptr) override;  Read class version from I/O buffer. ;  ; Version_t ReadVersionNoCheckSum (UInt_t *start=nullptr, UInt_t *bcnt=nullptr) override;  Read class version from I/O buffer, when the caller knows for sure that there is no checksum written/involved. ;  ; void ReadWithFactor (Double_t *ptr, Double_t factor, Double_t minvalue) override;  Read a Double32_t from the buffer when the factor and minimum value have been specified see comments about Double32_t encoding at TBufferFile::WriteDouble32(). ;  ; void ReadWithFactor (Float_t *ptr, Double_t factor, Double_t minvalue) override;  Read a Float16_t from the buffer when the factor and minimum value have been specified see comments about Double32_t encoding at TBufferFile::WriteDouble32(). ;  ; void ReadWithNbits (Double_t *ptr, Int_t nbits) override;  Read a Double32_t from the buffer when the number of bits is specified (explicitly or not) see comments about Double32_t encoding at TBufferFile::WriteDouble32(). ;  ; void ReadWithNbits (Float_t *ptr, Int_t nbits) override;  Read a Float16_t from the buffer when the number of bits is specified (explicitly or not) see comments about Floa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferSQL.html:13565,checksum,checksum,13565,doc/master/classTBufferSQL.html,https://root.cern,https://root.cern/doc/master/classTBufferSQL.html,1,['checksum'],['checksum']
Security,";  ; TObject * Remove (TObject *obj) override;  Remove object from the list. ;  ; TObject * Remove (TObjLink *lnk) override;  Remove object via its objlink from the list. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Unload ();  Mark 'all func' as being unloaded. ;  ; void Unload (TFunction *func);  Mark 'func' as being unloaded. ;  ;  Public Member Functions inherited from THashList;  THashList (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashList object. ;  ;  THashList (TObject *parent, Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  For backward compatibility only. Use other ctor. ;  ; virtual ~THashList ();  Delete a hashlist. ;  ; Float_t AverageCollisions () const;  Return the average collision rate. ;  ; const TList * GetListForObject (const char *name) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; const TList * GetListForObject (const TObject *obj) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; void Rehash (Int_t newCapacity);  Rehash the hashlist. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; bool UseRWLock (Bool_t enable=true) override;  Set this collection to use a RW lock upon access, making it thread safe. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; Bool_t IsAscending ();  ; TObject * Remove (const TObjLinkPtr_t &lnk);  ; void RemoveLast () override;  Remove the last object of the list. ;  ; virtual void Sort (Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfFunctions.html:5949,hash,hash,5949,doc/master/classTListOfFunctions.html,https://root.cern,https://root.cern/doc/master/classTListOfFunctions.html,1,['hash'],['hash']
Security,";  ; bool writeToFile (const char *fileName, bool recreate=true);  Save this current workspace into given file. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWorkspace.html:10948,hash,hash,10948,doc/master/classRooWorkspace.html,https://root.cern,https://root.cern/doc/master/classRooWorkspace.html,1,['hash'],['hash']
Security,";  ; virtual void Subtract (const TEventList *list);  Remove elements from this list that are present in alist. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEventList.html:5426,hash,hash,5426,doc/master/classTEventList.html,https://root.cern,https://root.cern/doc/master/classTEventList.html,1,['hash'],['hash']
Security,";  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static TSQLServer * Connect (const char *db, const char *uid, const char *pw);  The db should be of the form: <dbms>://<host>[:<port>][/<database>], e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main, pgsql://... or sqlite://<database>... The uid is the username and pw the password that should be used for the connection. ;  ; static const char * DeclFileName ();  ; static const char * GetFloatFormat ();  return current printf format for float/double members, default ""%e"" ;  ; static void SetFloatFormat (const char *fmt=""%e"");  set printf format for float/double members, default ""%e"" ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TSQLServer ();  ; void ClearError ();  reset error fields ;  ; void SetError (Int_t code, const char *msg, const char *method=nullptr);  s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLServer.html:11988,password,password,11988,doc/master/classTSQLServer.html,https://root.cern,https://root.cern/doc/master/classTSQLServer.html,1,['password'],['password']
Security,";  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UnzoomAll ();  Unzoom all variables. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoord.html:12882,hash,hash,12882,doc/master/classTParallelCoord.html,https://root.cern,https://root.cern/doc/master/classTParallelCoord.html,1,['hash'],['hash']
Security,";  ;  ~TWrkInfoFile () override;  ; void Print (Option_t *opt="""") const override;  Print TNamed name and title. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPerfAnalysis_1_1TWrkInfoFile.html:1423,hash,hash,1423,doc/master/classTProofPerfAnalysis_1_1TWrkInfoFile.html,https://root.cern,https://root.cern/doc/master/classTProofPerfAnalysis_1_1TWrkInfoFile.html,1,['hash'],['hash']
Security,";  CTRangeBase;  CTBranchProxyBase class for all the proxy object ;  ►CTCollectionProxyInfo;  CAddress;  CEnvironSmall helper to save proxy environment in the event of recursive calls ;  CEnvironBase;  CInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CIteratorsSmall helper to implement the function to create,access and destroy iterators ;  CIterators< Cont_t, true >;  CIterators< std::vector< T >, false >;  CIteratorValueSmall helper to encapsulate whether to return the value pointed to by the iterator or its address ;  CIteratorValue< Cont_t, value_ptr * >;  CMapInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CPairHolder;  CPushbackSmall helper to encapsulate all necessary data accesses for containers like vector, list, deque ;  CPushback< Internal::TStdBitsetHelper< Bitset_t > >;  CPushback< std::vector< bool > >;  CPushfrontSmall helper to encapsulate all necessary data accesses for containers like forward_list ;  CSfinaeHelper;  CTypeSmall helper to encapsulate basic data accesses for all STL continers ;  ►CType< Internal::TStdBitsetHelper< Bitset_t > >;  ►CIterators;  CPtrSize_t;  ►CType< std::vector< Bool_t > >;  CIterators;  ►CTSchemaRuleSet;  CTMatches;  ►NExecutorUtilsThis namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce ;  CReduceObjectsMerge collection of TObjects ;  ►NExperimental;  ►NDetail;  CTHistBinIterIterates over the bins of a THist or THistImpl ;  CTHistBinPtrPoints to a histogram bin (or actually a THistBinRef) ;  CTHistBinRefRepresents a bin reference ;  CTHistBinStatConst view on a bin's statistical data ;  CTHistDataA THistImplBase's data, provides accessors to all its statistics ;  CTHistImpl;  CTHistImplBaseInterface class for THistImpl ;  CTHistImplPrecisionAgnosticBaseBase class for THistImplBase that abstracts out the histogram's PRECISION ;  ►NInternal;  CAxisConfigToT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:11661,access,accesses,11661,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['access'],['accesses']
Security,";  MSVC doesn't support = ATOMIC_FLAG_INIT;. ;  . #include <TNetXNGFile.h>. Inheritance diagram for TNetXNGFile:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TNetXNGFile() [1/4]. TNetXNGFile::TNetXNGFile ; (; ). Definition at line 123 of file TNetXNGFile.cxx. ◆ TNetXNGFile() [2/4]. TNetXNGFile::TNetXNGFile ; (; const char * ; url, . const char * ; lurl, . Option_t * ; mode, . const char * ; title, . Int_t ; compress, . Int_t ; netopt, . Bool_t ; parallelopen . ). Definition at line 152 of file TNetXNGFile.cxx. ◆ TNetXNGFile() [3/4]. TNetXNGFile::TNetXNGFile ; (; const char * ; url, . Option_t * ; mode = """", . const char * ; title = """", . Int_t ; compress = 1, . Int_t ; netopt = 0, . Bool_t ; parallelopen = kFALSE . ). Constructor. ; param url: URL of the entry-point server to be contacted param mode: initial file access mode param title: title of the file (shown by ROOT browser) param compress: compression level and algorithm param netopt: TCP window size in bytes (unused) param parallelopen: open asynchronously ; Definition at line 144 of file TNetXNGFile.cxx. ◆ ~TNetXNGFile(). TNetXNGFile::~TNetXNGFile ; (; ). virtual . Destructor. ; Definition at line 244 of file TNetXNGFile.cxx. ◆ TNetXNGFile() [4/4]. TNetXNGFile::TNetXNGFile ; (; const TNetXNGFile & ; other). private . Member Function Documentation. ◆ Class(). static TClass * TNetXNGFile::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TNetXNGFile::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TNetXNGFile::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 77 of file TNetXNGFile.h. ◆ Close(). void TNetXNGFile::Close ; (; const Option_t * ; option = """"). override . Close the file. ; param option: if == ""R"", all TProcessIDs referenced by this file are deleted (is this valid ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetXNGFile.html:42143,access,access,42143,doc/master/classTNetXNGFile.html,https://root.cern,https://root.cern/doc/master/classTNetXNGFile.html,1,['access'],['access']
Security,";  Stream an object of class TStreamerElement. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerBase.html:5836,hash,hash,5836,doc/master/classTStreamerBase.html,https://root.cern,https://root.cern/doc/master/classTStreamerBase.html,3,['hash'],['hash']
Security,";; 1519 ; 1520#ifdef DEBUG; 1521 std::cout << ""minmimizer step - momentum "" << settings.momentum << "" learning rate "" << optimizer->GetLearningRate() << std::endl;; 1522 for (size_t l = 0; l < nlayers; ++l) {; 1523 if (deepNet.GetLayerAt(l)->GetWeights().size() > 0) {; 1524 Architecture_t::PrintTensor(deepNet.GetLayerAt(l)->GetWeightsAt(0),TString::Format(""weights after step layer %d"",l).Data());; 1525 Architecture_t::PrintTensor(deepNet.GetLayerAt(l)->GetWeightGradientsAt(0),""weight gradients"");; 1526 }; 1527 }; 1528#endif; 1529 ; 1530 }; 1531 ; 1532 if (debugFirstEpoch) std::cout << ""\n End batch loop - compute validation loss \n"";; 1533 //}; 1534 debugFirstEpoch = false;; 1535 if ((nTrainEpochs % settings.testInterval) == 0) {; 1536 ; 1537 std::chrono::time_point<std::chrono::system_clock> t1,t2;; 1538 ; 1539 t1 = std::chrono::system_clock::now();; 1540 ; 1541 // Compute validation error.; 1542 ; 1543 ; 1544 Double_t valError = 0.0;; 1545 bool inTraining = false;; 1546 for (auto batch : validationData) {; 1547 auto inputTensor = batch.GetInput();; 1548 auto outputMatrix = batch.GetOutput();; 1549 auto weights = batch.GetWeights();; 1550 // should we apply droput to the loss ??; 1551 valError += deepNet.Loss(inputTensor, outputMatrix, weights, inTraining, includeRegularization);; 1552 }; 1553 // normalize loss to number of batches and add regularization term; 1554 Double_t regTerm = (includeRegularization) ? deepNet.RegularizationTerm() : 0.0;; 1555 valError /= (Double_t)(nValidationSamples / settings.batchSize);; 1556 valError += regTerm;; 1557 ; 1558 //Log the loss value; 1559 fTrainHistory.AddValue(""valError"",nTrainEpochs,valError);; 1560 ; 1561 t2 = std::chrono::system_clock::now();; 1562 ; 1563 // checking for convergence; 1564 if (valError < minValError) {; 1565 convergenceCount = 0;; 1566 } else {; 1567 convergenceCount += settings.testInterval;; 1568 }; 1569 ; 1570 // copy configuration when reached a minimum error; 1571 if (valError < minValError ) {; 1572",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:61294,validat,validationData,61294,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['validat'],['validationData']
Security,";; 15380 ; 15381 mg_snprintf(conn,; 15382 NULL, /* Ignore truncation in access log */; 15383 log_buf,; 15384 sizeof(log_buf),; 15385 ""%s - %s [%s] \""%s %s%s%s HTTP/%s\"" %d %"" INT64_FMT; 15386 "" %s %s"",; 15387 src_addr,; 15388 (ri->remote_user == NULL) ? ""-"" : ri->remote_user,; 15389 date,; 15390 ri->request_method ? ri->request_method : ""-"",; 15391 ri->request_uri ? ri->request_uri : ""-"",; 15392 ri->query_string ? ""?"" : """",; 15393 ri->query_string ? ri->query_string : """",; 15394 ri->http_version,; 15395 conn->status_code,; 15396 conn->num_bytes_sent,; 15397 referer,; 15398 user_agent);; 15399 }; 15400 ; 15401 /* Here we have a log message in log_buf. Call the callback */; 15402 if (conn->phys_ctx->callbacks.log_access) {; 15403 if (conn->phys_ctx->callbacks.log_access(conn, log_buf)) {; 15404 /* do not log if callack returns non-zero */; 15405 if (fi.access.fp) {; 15406 mg_fclose(&fi.access);; 15407 }; 15408 return;; 15409 }; 15410 }; 15411 ; 15412 /* Store in file */; 15413 if (fi.access.fp) {; 15414 int ok = 1;; 15415 flockfile(fi.access.fp);; 15416 if (fprintf(fi.access.fp, ""%s\n"", log_buf) < 1) {; 15417 ok = 0;; 15418 }; 15419 if (fflush(fi.access.fp) != 0) {; 15420 ok = 0;; 15421 }; 15422 funlockfile(fi.access.fp);; 15423 if (mg_fclose(&fi.access) != 0) {; 15424 ok = 0;; 15425 }; 15426 if (!ok) {; 15427 mg_cry_internal(conn,; 15428 ""Error writing log file %s"",; 15429 conn->dom_ctx->config[ACCESS_LOG_FILE]);; 15430 }; 15431 }; 15432}; 15433#else; 15434#error ""Either enable filesystems or provide a custom log_access implementation""; 15435#endif /* Externally provided function */; 15436 ; 15437 ; 15438/* Verify given socket address against the ACL.; 15439 * Return -1 if ACL is malformed, 0 if address is disallowed, 1 if allowed.; 15440 */; 15441static int; 15442check_acl(struct mg_context *phys_ctx, const union usa *sa); 15443{; 15444 int allowed, flag, matched;; 15445 struct vec vec;; 15446 ; 15447 if (phys_ctx) {; 15448 const char *list = phys_ctx->dd.config[ACCE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:455742,access,access,455742,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['access'],['access']
Security,";; 15381 ; 15382 mg_snprintf(conn,; 15383 NULL, /* Ignore truncation in access log */; 15384 log_buf,; 15385 sizeof(log_buf),; 15386 ""%s - %s [%s] \""%s %s%s%s HTTP/%s\"" %d %"" INT64_FMT; 15387 "" %s %s"",; 15388 src_addr,; 15389 (ri->remote_user == NULL) ? ""-"" : ri->remote_user,; 15390 date,; 15391 ri->request_method ? ri->request_method : ""-"",; 15392 ri->request_uri ? ri->request_uri : ""-"",; 15393 ri->query_string ? ""?"" : """",; 15394 ri->query_string ? ri->query_string : """",; 15395 ri->http_version,; 15396 conn->status_code,; 15397 conn->num_bytes_sent,; 15398 referer,; 15399 user_agent);; 15400 }; 15401 ; 15402 /* Here we have a log message in log_buf. Call the callback */; 15403 if (conn->phys_ctx->callbacks.log_access) {; 15404 if (conn->phys_ctx->callbacks.log_access(conn, log_buf)) {; 15405 /* do not log if callack returns non-zero */; 15406 if (fi.access.fp) {; 15407 mg_fclose(&fi.access);; 15408 }; 15409 return;; 15410 }; 15411 }; 15412 ; 15413 /* Store in file */; 15414 if (fi.access.fp) {; 15415 int ok = 1;; 15416 flockfile(fi.access.fp);; 15417 if (fprintf(fi.access.fp, ""%s\n"", log_buf) < 1) {; 15418 ok = 0;; 15419 }; 15420 if (fflush(fi.access.fp) != 0) {; 15421 ok = 0;; 15422 }; 15423 funlockfile(fi.access.fp);; 15424 if (mg_fclose(&fi.access) != 0) {; 15425 ok = 0;; 15426 }; 15427 if (!ok) {; 15428 mg_cry_internal(conn,; 15429 ""Error writing log file %s"",; 15430 conn->dom_ctx->config[ACCESS_LOG_FILE]);; 15431 }; 15432 }; 15433}; 15434#else; 15435#error ""Either enable filesystems or provide a custom log_access implementation""; 15436#endif /* Externally provided function */; 15437 ; 15438 ; 15439/* Verify given socket address against the ACL.; 15440 * Return -1 if ACL is malformed, 0 if address is disallowed, 1 if allowed.; 15441 */; 15442static int; 15443check_acl(struct mg_context *phys_ctx, const union usa *sa); 15444{; 15445 int allowed, flag, matched;; 15446 struct vec vec;; 15447 ; 15448 if (phys_ctx) {; 15449 const char *list = phys_ctx->dd.config[ACCE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:455775,access,access,455775,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['access'],['access']
Security,";; 2336#endif; 2337 ; 2338 /* Thread related */; 2339 stop_flag_t stop_flag; /* Should we stop event loop */; 2340 pthread_mutex_t thread_mutex; /* Protects client_socks or queue */; 2341 ; 2342 pthread_t masterthreadid; /* The master thread ID */; 2343 unsigned int; 2344 cfg_worker_threads; /* The number of configured worker threads. */; 2345 pthread_t *worker_threadids; /* The worker thread IDs */; 2346 unsigned long starter_thread_idx; /* thread index which called mg_start */; 2347 ; 2348 /* Connection to thread dispatching */; 2349#if defined(ALTERNATIVE_QUEUE); 2350 struct socket *client_socks;; 2351 void **client_wait_events;; 2352#else; 2353 struct socket *squeue; /* Socket queue (sq) : accepted sockets waiting for a; 2354 worker thread */; 2355 volatile int sq_head; /* Head of the socket queue */; 2356 volatile int sq_tail; /* Tail of the socket queue */; 2357 pthread_cond_t sq_full; /* Signaled when socket is produced */; 2358 pthread_cond_t sq_empty; /* Signaled when socket is consumed */; 2359 volatile int sq_blocked; /* Status information: sq is full */; 2360 int sq_size; /* No of elements in socket queue */; 2361#if defined(USE_SERVER_STATS); 2362 int sq_max_fill;; 2363#endif /* USE_SERVER_STATS */; 2364#endif /* ALTERNATIVE_QUEUE */; 2365 ; 2366 /* Memory related */; 2367 unsigned int max_request_size; /* The max request size */; 2368 ; 2369#if defined(USE_SERVER_STATS); 2370 struct mg_memory_stat ctx_memory;; 2371#endif; 2372 ; 2373 /* Operating system related */; 2374 char *systemName; /* What operating system is running */; 2375 time_t start_time; /* Server start time, used for authentication; 2376 * and for diagnstics. */; 2377 ; 2378#if defined(USE_TIMERS); 2379 struct ttimers *timers;; 2380#endif; 2381 ; 2382 /* Lua specific: Background operations and shared websockets */; 2383#if defined(USE_LUA); 2384 void *lua_background_state; /* lua_State (here as void *) */; 2385 pthread_mutex_t lua_bg_mutex; /* Protect background state */; 2386 int lua_bg_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:73789,authenticat,authentication,73789,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['authenticat'],['authentication']
Security,";; 2337#endif; 2338 ; 2339 /* Thread related */; 2340 stop_flag_t stop_flag; /* Should we stop event loop */; 2341 pthread_mutex_t thread_mutex; /* Protects client_socks or queue */; 2342 ; 2343 pthread_t masterthreadid; /* The master thread ID */; 2344 unsigned int; 2345 cfg_worker_threads; /* The number of configured worker threads. */; 2346 pthread_t *worker_threadids; /* The worker thread IDs */; 2347 unsigned long starter_thread_idx; /* thread index which called mg_start */; 2348 ; 2349 /* Connection to thread dispatching */; 2350#if defined(ALTERNATIVE_QUEUE); 2351 struct socket *client_socks;; 2352 void **client_wait_events;; 2353#else; 2354 struct socket *squeue; /* Socket queue (sq) : accepted sockets waiting for a; 2355 worker thread */; 2356 volatile int sq_head; /* Head of the socket queue */; 2357 volatile int sq_tail; /* Tail of the socket queue */; 2358 pthread_cond_t sq_full; /* Signaled when socket is produced */; 2359 pthread_cond_t sq_empty; /* Signaled when socket is consumed */; 2360 volatile int sq_blocked; /* Status information: sq is full */; 2361 int sq_size; /* No of elements in socket queue */; 2362#if defined(USE_SERVER_STATS); 2363 int sq_max_fill;; 2364#endif /* USE_SERVER_STATS */; 2365#endif /* ALTERNATIVE_QUEUE */; 2366 ; 2367 /* Memory related */; 2368 unsigned int max_request_size; /* The max request size */; 2369 ; 2370#if defined(USE_SERVER_STATS); 2371 struct mg_memory_stat ctx_memory;; 2372#endif; 2373 ; 2374 /* Operating system related */; 2375 char *systemName; /* What operating system is running */; 2376 time_t start_time; /* Server start time, used for authentication; 2377 * and for diagnstics. */; 2378 ; 2379#if defined(USE_TIMERS); 2380 struct ttimers *timers;; 2381#endif; 2382 ; 2383 /* Lua specific: Background operations and shared websockets */; 2384#if defined(USE_LUA); 2385 void *lua_background_state; /* lua_State (here as void *) */; 2386 pthread_mutex_t lua_bg_mutex; /* Protect background state */; 2387 int lua_bg_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:73821,authenticat,authentication,73821,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['authenticat'],['authentication']
Security,";; 2389 return kTRUE;; 2390}; 2391 ; 2392////////////////////////////////////////////////////////////////////////////////; 2393/// Return the C++ property of this class, eg. is abstract, has virtual base; 2394/// class, see EClassProperty in TDictionary.h; 2395 ; 2396Long_t TClass::ClassProperty() const; 2397{; 2398 if (fProperty == -1) Property();; 2399 return fClassProperty;; 2400}; 2401 ; 2402////////////////////////////////////////////////////////////////////////////////; 2403/// Create a Clone of this TClass object using a different name but using the same 'dictionary'.; 2404/// This effectively creates a hard alias for the class name.; 2405 ; 2406TObject *TClass::Clone(const char *new_name) const; 2407{; 2408 if (new_name == nullptr || new_name[0]=='\0' || fName == new_name) {; 2409 Error(""Clone"",""The name of the class must be changed when cloning a TClass object."");; 2410 return nullptr;; 2411 }; 2412 ; 2413 // Need to lock access to TROOT::GetListOfClasses so the cloning happens atomically; 2414 R__LOCKGUARD(gInterpreterMutex);; 2415 // Temporarily remove the original from the list of classes.; 2416 TClass::RemoveClass(const_cast<TClass*>(this));; 2417 ; 2418 TClass *copy;; 2419 if (fTypeInfo) {; 2420 copy = new TClass(GetName(),; 2421 fClassVersion,; 2422 *fTypeInfo,; 2423 new TIsAProxy(*fTypeInfo),; 2424 GetDeclFileName(),; 2425 GetImplFileName(),; 2426 GetDeclFileLine(),; 2427 GetImplFileLine());; 2428 } else {; 2429 copy = new TClass(GetName(),; 2430 fClassVersion,; 2431 GetDeclFileName(),; 2432 GetImplFileName(),; 2433 GetDeclFileLine(),; 2434 GetImplFileLine());; 2435 }; 2436 copy->fShowMembers = fShowMembers;; 2437 // Remove the copy before renaming it; 2438 TClass::RemoveClass(copy);; 2439 copy->fName = new_name;; 2440 TClass::AddClass(copy);; 2441 ; 2442 copy->SetNew(fNew);; 2443 copy->SetNewArray(fNewArray);; 2444 copy->SetDelete(fDelete);; 2445 copy->SetDeleteArray(fDeleteArray);; 2446 copy->SetDestructor(fDestructor);; 2447 copy->SetDirectoryAuto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:90983,access,access,90983,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['access'],['access']
Security,";; 2456 return kTRUE;; 2457}; 2458 ; 2459////////////////////////////////////////////////////////////////////////////////; 2460/// Return the C++ property of this class, eg. is abstract, has virtual base; 2461/// class, see EClassProperty in TDictionary.h; 2462 ; 2463Long_t TClass::ClassProperty() const; 2464{; 2465 if (fProperty == -1) Property();; 2466 return fClassProperty;; 2467}; 2468 ; 2469////////////////////////////////////////////////////////////////////////////////; 2470/// Create a Clone of this TClass object using a different name but using the same 'dictionary'.; 2471/// This effectively creates a hard alias for the class name.; 2472 ; 2473TObject *TClass::Clone(const char *new_name) const; 2474{; 2475 if (new_name == nullptr || new_name[0]=='\0' || fName == new_name) {; 2476 Error(""Clone"",""The name of the class must be changed when cloning a TClass object."");; 2477 return nullptr;; 2478 }; 2479 ; 2480 // Need to lock access to TROOT::GetListOfClasses so the cloning happens atomically; 2481 R__LOCKGUARD(gInterpreterMutex);; 2482 // Temporarily remove the original from the list of classes.; 2483 TClass::RemoveClass(const_cast<TClass*>(this));; 2484 ; 2485 TClass *copy;; 2486 if (fTypeInfo) {; 2487 copy = new TClass(GetName(),; 2488 fClassVersion,; 2489 *fTypeInfo,; 2490 new TIsAProxy(*fTypeInfo),; 2491 GetDeclFileName(),; 2492 GetImplFileName(),; 2493 GetDeclFileLine(),; 2494 GetImplFileLine());; 2495 } else {; 2496 copy = new TClass(GetName(),; 2497 fClassVersion,; 2498 GetDeclFileName(),; 2499 GetImplFileName(),; 2500 GetDeclFileLine(),; 2501 GetImplFileLine());; 2502 }; 2503 copy->fShowMembers = fShowMembers;; 2504 // Remove the copy before renaming it; 2505 TClass::RemoveClass(copy);; 2506 copy->fName = new_name;; 2507 TClass::AddClass(copy);; 2508 ; 2509 copy->SetNew(fNew);; 2510 copy->SetNewArray(fNewArray);; 2511 copy->SetDelete(fDelete);; 2512 copy->SetDeleteArray(fDeleteArray);; 2513 copy->SetDestructor(fDestructor);; 2514 copy->SetDirectoryAuto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:93734,access,access,93734,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['access'],['access']
Security,";; 2605 for (Int_t i = 0; i < size; ++i) {; 2606 ; 2607 const TString &vname = vars[i];; 2608 ; 2609 TFormulaVariable &var = fVars[vname];; 2610 if (var.fArrayPos < 0) {; 2611 ; 2612 var.fName = vname;; 2613 var.fArrayPos = fVars.size();; 2614 anyNewVar = true;; 2615 var.fValue = 0;; 2616 if (var.fArrayPos >= (int)fClingVariables.capacity()) {; 2617 Int_t multiplier = 2;; 2618 if (fFuncs.size() > 100) {; 2619 multiplier = TMath::Floor(TMath::Log10(fFuncs.size()) * 10);; 2620 }; 2621 fClingVariables.reserve(multiplier * fClingVariables.capacity());; 2622 }; 2623 fClingVariables.push_back(0.0);; 2624 }; 2625 // else; 2626 // {; 2627 // var.fValue = v.second;; 2628 // fClingVariables[var.fArrayPos] = v.second;; 2629 // }; 2630 }; 2631 if (anyNewVar && !fFormula.IsNull()) {; 2632 ProcessFormula(fClingInput);; 2633 }; 2634}; 2635 ; 2636////////////////////////////////////////////////////////////////////////////////; 2637/// Set the name of the formula. We need to allow the list of function to; 2638/// properly handle the hashes.; 2639 ; 2640void TFormula::SetName(const char* name); 2641{; 2642 if (IsReservedName(name)) {; 2643 Error(""SetName"", ""The name \'%s\' is reserved as a TFormula variable name.\n""; 2644 ""\tThis function will not be renamed."",; 2645 name);; 2646 } else {; 2647 // Here we need to remove and re-add to keep the hashes consistent with; 2648 // the underlying names.; 2649 auto listOfFunctions = gROOT->GetListOfFunctions();; 2650 TObject* thisAsFunctionInList = nullptr;; 2651 R__LOCKGUARD(gROOTMutex);; 2652 if (listOfFunctions){; 2653 thisAsFunctionInList = listOfFunctions->FindObject(this);; 2654 if (thisAsFunctionInList) listOfFunctions->Remove(thisAsFunctionInList);; 2655 }; 2656 TNamed::SetName(name);; 2657 if (thisAsFunctionInList) listOfFunctions->Add(thisAsFunctionInList);; 2658 }; 2659}; 2660 ; 2661////////////////////////////////////////////////////////////////////////////////; 2662///; 2663/// Sets multiple variables.; 2664/// First argument is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:101725,hash,hashes,101725,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,1,['hash'],['hashes']
Security,";; 2650 sum += RetrieveBinContent(bin);; 2651 hintegrated->AddBinContent(bin, sum);; 2652 if (fSumw2.fN) {; 2653 esum += GetBinErrorSqUnchecked(bin);; 2654 hintegrated->fSumw2.fArray[bin] = esum;; 2655 }; 2656 }; 2657 }; 2658 }; 2659 }; 2660 return hintegrated;; 2661}; 2662 ; 2663////////////////////////////////////////////////////////////////////////////////; 2664/// Copy this histogram structure to newth1.; 2665///; 2666/// Note that this function does not copy the list of associated functions.; 2667/// Use TObject::Clone to make a full copy of a histogram.; 2668///; 2669/// Note also that the histogram it will be created in gDirectory (if AddDirectoryStatus()=true); 2670/// or will not be added to any directory if AddDirectoryStatus()=false; 2671/// independently of the current directory stored in the original histogram; 2672 ; 2673void TH1::Copy(TObject &obj) const; 2674{; 2675 if (((TH1&)obj).fDirectory) {; 2676 // We are likely to change the hash value of this object; 2677 // with TNamed::Copy, to keep things correct, we need to; 2678 // clean up its existing entries.; 2679 ((TH1&)obj).fDirectory->Remove(&obj);; 2680 ((TH1&)obj).fDirectory = nullptr;; 2681 }; 2682 TNamed::Copy(obj);; 2683 ((TH1&)obj).fDimension = fDimension;; 2684 ((TH1&)obj).fNormFactor= fNormFactor;; 2685 ((TH1&)obj).fNcells = fNcells;; 2686 ((TH1&)obj).fBarOffset = fBarOffset;; 2687 ((TH1&)obj).fBarWidth = fBarWidth;; 2688 ((TH1&)obj).fOption = fOption;; 2689 ((TH1&)obj).fBinStatErrOpt = fBinStatErrOpt;; 2690 ((TH1&)obj).fBufferSize= fBufferSize;; 2691 // copy the Buffer; 2692 // delete first a previously existing buffer; 2693 if (((TH1&)obj).fBuffer != nullptr) {; 2694 delete [] ((TH1&)obj).fBuffer;; 2695 ((TH1&)obj).fBuffer = nullptr;; 2696 }; 2697 if (fBuffer) {; 2698 Double_t *buf = new Double_t[fBufferSize];; 2699 for (Int_t i=0;i<fBufferSize;i++) buf[i] = fBuffer[i];; 2700 // obj.fBuffer has been deleted before; 2701 ((TH1&)obj).fBuffer = buf;; 2702 }; 2703 ; 2704 // copy bin contents ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:106733,hash,hash,106733,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['hash'],['hash']
Security,";; 301 if( it1 == rule.end() ) {; 302 error_string = ""You always have to specify the targetClass "";; 303 error_string += ""when specyfying an IO rule"";; 304 return false;; 305 }; 306 ; 307 std::string className = TSchemaRuleProcessor::Trim( it1->second );; 308 std::string warning = ""IO rule for class "" + className;; 309 ; 310 //-----------------------------------------------------------------------; 311 // Check if we have the source tag; 312 //////////////////////////////////////////////////////////////////////////; 313 ; 314 it1 = rule.find( ""sourceClass"" );; 315 if( it1 == rule.end()); 316 {; 317 error_string = warning + "" - sourceClass parameter is missing"";; 318 return false;; 319 }; 320 ; 321 //-----------------------------------------------------------------------; 322 // Check if we have either version or checksum specified; 323 //////////////////////////////////////////////////////////////////////////; 324 ; 325 it1 = rule.find( ""version"" );; 326 it2 = rule.find( ""checksum"" );; 327 if( it1 == rule.end() && it2 == rule.end() ) {; 328 error_string = warning + "" - you need to specify either version or "";; 329 error_string += ""checksum"";; 330 return false;; 331 }; 332 ; 333 //-----------------------------------------------------------------------; 334 // Check if the checksum has been set to right value; 335 //////////////////////////////////////////////////////////////////////////; 336 ; 337 if( it2 != rule.end() ) {; 338 if( it2->second.size() < 2 || it2->second[0] != '[' ||; 339 it2->second[it2->second.size()-1] != ']' ) {; 340 error_string = warning + "" - a comma separated list of ints"";; 341 error_string += "" enclosed in square brackets expected"";; 342 error_string += "" as a value of checksum parameter"";; 343 return false;; 344 }; 345 ; 346 TSchemaRuleProcessor::SplitList( it2->second.substr( 1, it2->second.size()-2 ),; 347 lst );; 348 if( lst.empty() ) {; 349 error_string += warning + "" - the list of checksums is empty\n"";; 350 }; 351 ; 352 for( const auto&",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RConversionRuleParser_8cxx_source.html:12077,checksum,checksum,12077,doc/master/RConversionRuleParser_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RConversionRuleParser_8cxx_source.html,2,['checksum'],['checksum']
Security,";; 3361 ; 3362#if defined(GCC_DIAGNOSTIC); 3363#pragma GCC diagnostic push; 3364#pragma GCC diagnostic ignored ""-Wformat-nonliteral""; 3365#endif; 3366 ; 3367 IGNORE_UNUSED_RESULT(vsnprintf_impl(buf, sizeof(buf), fmt, ap));; 3368 ; 3369#if defined(GCC_DIAGNOSTIC); 3370#pragma GCC diagnostic pop; 3371#endif; 3372 ; 3373 buf[sizeof(buf) - 1] = 0;; 3374 ; 3375 DEBUG_TRACE(""mg_cry called from %s:%u: %s"", func, line, buf);; 3376 ; 3377 if (!conn) {; 3378 puts(buf);; 3379 return;; 3380 }; 3381 ; 3382 /* Do not lock when getting the callback value, here and below.; 3383 * I suppose this is fine, since function cannot disappear in the; 3384 * same way string option can. */; 3385 if ((conn->phys_ctx->callbacks.log_message == NULL); 3386 || (conn->phys_ctx->callbacks.log_message(conn, buf) == 0)) {; 3387 ; 3388 if (conn->dom_ctx->config[ERROR_LOG_FILE] != NULL) {; 3389 if (mg_fopen(conn,; 3390 conn->dom_ctx->config[ERROR_LOG_FILE],; 3391 MG_FOPEN_MODE_APPEND,; 3392 &fi); 3393 == 0) {; 3394 fi.access.fp = NULL;; 3395 }; 3396 } else {; 3397 fi.access.fp = NULL;; 3398 }; 3399 ; 3400 if (fi.access.fp != NULL) {; 3401 flockfile(fi.access.fp);; 3402 timestamp = time(NULL);; 3403 ; 3404 sockaddr_to_string(src_addr, sizeof(src_addr), &conn->client.rsa);; 3405 fprintf(fi.access.fp,; 3406 ""[%010lu] [error] [client %s] "",; 3407 (unsigned long)timestamp,; 3408 src_addr);; 3409 ; 3410 if (conn->request_info.request_method != NULL) {; 3411 fprintf(fi.access.fp,; 3412 ""%s %s: "",; 3413 conn->request_info.request_method,; 3414 conn->request_info.request_uri; 3415 ? conn->request_info.request_uri; 3416 : """");; 3417 }; 3418 ; 3419 fprintf(fi.access.fp, ""%s"", buf);; 3420 fputc('\n', fi.access.fp);; 3421 fflush(fi.access.fp);; 3422 funlockfile(fi.access.fp);; 3423 (void)mg_fclose(&fi.access); /* Ignore errors. We can't call; 3424 * mg_cry here anyway ;-) */; 3425 }; 3426 }; 3427}; 3428#else; 3429#error Must either enable filesystems or provide a custom mg_cry_internal_impl implementation; 3430#endi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:101059,access,access,101059,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['access'],['access']
Security,";; 3362 ; 3363#if defined(GCC_DIAGNOSTIC); 3364#pragma GCC diagnostic push; 3365#pragma GCC diagnostic ignored ""-Wformat-nonliteral""; 3366#endif; 3367 ; 3368 IGNORE_UNUSED_RESULT(vsnprintf_impl(buf, sizeof(buf), fmt, ap));; 3369 ; 3370#if defined(GCC_DIAGNOSTIC); 3371#pragma GCC diagnostic pop; 3372#endif; 3373 ; 3374 buf[sizeof(buf) - 1] = 0;; 3375 ; 3376 DEBUG_TRACE(""mg_cry called from %s:%u: %s"", func, line, buf);; 3377 ; 3378 if (!conn) {; 3379 puts(buf);; 3380 return;; 3381 }; 3382 ; 3383 /* Do not lock when getting the callback value, here and below.; 3384 * I suppose this is fine, since function cannot disappear in the; 3385 * same way string option can. */; 3386 if ((conn->phys_ctx->callbacks.log_message == NULL); 3387 || (conn->phys_ctx->callbacks.log_message(conn, buf) == 0)) {; 3388 ; 3389 if (conn->dom_ctx->config[ERROR_LOG_FILE] != NULL) {; 3390 if (mg_fopen(conn,; 3391 conn->dom_ctx->config[ERROR_LOG_FILE],; 3392 MG_FOPEN_MODE_APPEND,; 3393 &fi); 3394 == 0) {; 3395 fi.access.fp = NULL;; 3396 }; 3397 } else {; 3398 fi.access.fp = NULL;; 3399 }; 3400 ; 3401 if (fi.access.fp != NULL) {; 3402 flockfile(fi.access.fp);; 3403 timestamp = time(NULL);; 3404 ; 3405 sockaddr_to_string(src_addr, sizeof(src_addr), &conn->client.rsa);; 3406 fprintf(fi.access.fp,; 3407 ""[%010lu] [error] [client %s] "",; 3408 (unsigned long)timestamp,; 3409 src_addr);; 3410 ; 3411 if (conn->request_info.request_method != NULL) {; 3412 fprintf(fi.access.fp,; 3413 ""%s %s: "",; 3414 conn->request_info.request_method,; 3415 conn->request_info.request_uri; 3416 ? conn->request_info.request_uri; 3417 : """");; 3418 }; 3419 ; 3420 fprintf(fi.access.fp, ""%s"", buf);; 3421 fputc('\n', fi.access.fp);; 3422 fflush(fi.access.fp);; 3423 funlockfile(fi.access.fp);; 3424 (void)mg_fclose(&fi.access); /* Ignore errors. We can't call; 3425 * mg_cry here anyway ;-) */; 3426 }; 3427 }; 3428}; 3429#else; 3430#error Must either enable filesystems or provide a custom mg_cry_internal_impl implementation; 3431#endi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:101091,access,access,101091,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['access'],['access']
Security,";; 5034 if (r1 > fIntegral[ibin]) x +=; 5035 GetBinWidth(ibin+1)*(r1-fIntegral[ibin])/(fIntegral[ibin+1] - fIntegral[ibin]);; 5036 return x;; 5037}; 5038 ; 5039////////////////////////////////////////////////////////////////////////////////; 5040/// Return content of bin number bin.; 5041///; 5042/// Implemented in TH1C,S,F,D; 5043///; 5044/// Convention for numbering bins; 5045///; 5046/// For all histogram types: nbins, xlow, xup; 5047///; 5048/// - bin = 0; underflow bin; 5049/// - bin = 1; first bin with low-edge xlow INCLUDED; 5050/// - bin = nbins; last bin with upper-edge xup EXCLUDED; 5051/// - bin = nbins+1; overflow bin; 5052///; 5053/// In case of 2-D or 3-D histograms, a ""global bin"" number is defined.; 5054/// For example, assuming a 3-D histogram with binx,biny,binz, the function; 5055///; 5056/// ~~~ {.cpp}; 5057/// Int_t bin = h->GetBin(binx,biny,binz);; 5058/// ~~~; 5059///; 5060/// returns a global/linearized bin number. This global bin is useful; 5061/// to access the bin information independently of the dimension.; 5062 ; 5063Double_t TH1::GetBinContent(Int_t bin) const; 5064{; 5065 if (fBuffer) const_cast<TH1*>(this)->BufferEmpty();; 5066 if (bin < 0) bin = 0;; 5067 if (bin >= fNcells) bin = fNcells-1;; 5068 ; 5069 return RetrieveBinContent(bin);; 5070}; 5071 ; 5072////////////////////////////////////////////////////////////////////////////////; 5073/// Compute first binx in the range [firstx,lastx] for which; 5074/// diff = abs(bin_content-c) <= maxdiff; 5075///; 5076/// In case several bins in the specified range with diff=0 are found; 5077/// the first bin found is returned in binx.; 5078/// In case several bins in the specified range satisfy diff <=maxdiff; 5079/// the bin with the smallest difference is returned in binx.; 5080/// In all cases the function returns the smallest difference.; 5081///; 5082/// NOTE1: if firstx <= 0, firstx is set to bin 1; 5083/// if (lastx < firstx then firstx is set to the number of bins; 5084/// ie if firstx=0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:204879,access,access,204879,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['access'],['access']
Security,";; 558 } else if (((fSTLtype >= ROOT::kSTLvector) && (fSTLtype < ROOT::kSTLend)) || ((fSTLtype > -ROOT::kSTLend) && (fSTLtype <= -ROOT::kSTLvector))) {; 559 // -- We are an STL container element.; 560 TClass* contCl = elementClass;; 561 fCollProxy = contCl->GetCollectionProxy()->Generate();; 562 TClass* valueClass = GetCollectionProxy()->GetValueClass();; 563 // Check to see if we can split the container.; 564 bool cansplit = true;; 565 if (!valueClass) {; 566 cansplit = false;; 567 } else if ((valueClass == TString::Class()) || (valueClass == TClass::GetClass(""string""))) {; 568 cansplit = false;; 569 } else if (GetCollectionProxy()->HasPointers() && !splitSTLP ) {; 570 cansplit = false;; 571 } else if (!valueClass->CanSplit() && !(GetCollectionProxy()->HasPointers() && splitSTLP)) {; 572 cansplit = false;; 573 } else if (valueClass->GetCollectionProxy()) {; 574 // -- A collection was stored in a collection, we choose not to split it.; 575 // Note: Splitting it would require extending TTreeFormula; 576 // to understand how to access it.; 577 cansplit = false;; 578 }; 579 if (cansplit) {; 580 // -- Do the splitting work if we are allowed to.; 581 fType = 4;; 582 // Create a leaf for the master branch (the counter).; 583 TLeaf *leaf = new TLeafElement(this, name, fID, fStreamerType);; 584 fNleaves = 1;; 585 fLeaves.Add(leaf);; 586 fTree->GetListOfLeaves()->Add(leaf);; 587 // Check that the contained objects class name is part of the element title.; 588 // This name is mandatory when reading the tree later on and; 589 // the parent class with the pointer to the STL container is not available.; 590 fClonesName = valueClass->GetName();; 591 fClonesClass = valueClass;; 592 TString aname;; 593 aname.Form("" (%s)"", valueClass->GetName());; 594 TString atitle = element->GetTitle();; 595 if (!atitle.Contains(aname)) {; 596 atitle += aname;; 597 element->SetTitle(atitle.Data());; 598 }; 599 TString branchname (name);; 600 if (branchname.EndsWith(""."")); 601 branchname.Remove(bra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:20972,access,access,20972,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['access'],['access']
Security,";; 63 void SetTarget( const TString& target );; 64 const TObjArray* GetTarget() const;; 65 const char *GetTargetString() const;; 66 void SetSource( const TString& source );; 67 const TObjArray* GetSource() const;; 68 void SetEmbed( Bool_t embed );; 69 Bool_t GetEmbed() const;; 70 Bool_t IsAliasRule() const;; 71 Bool_t IsRenameRule() const;; 72 Bool_t IsValid() const;; 73 void SetCode( const TString& code );; 74 const char *GetCode() const;; 75 void SetAttributes( const TString& attributes );; 76 const char *GetAttributes() const;; 77 Bool_t HasTarget( const TString& target ) const;; 78 ; 79 Bool_t HasSource( const TString& source ) const;; 80 void SetReadFunctionPointer( ReadFuncPtr_t ptr );; 81 ReadFuncPtr_t GetReadFunctionPointer() const;; 82 void SetReadRawFunctionPointer( ReadRawFuncPtr_t ptr );; 83 ReadRawFuncPtr_t GetReadRawFunctionPointer() const;; 84 void SetInclude( const TString& include );; 85 const TObjArray* GetInclude() const;; 86 void SetRuleType( RuleType_t type );; 87 RuleType_t GetRuleType() const;; 88 Bool_t Conflicts( const TSchemaRule* rule ) const;; 89 ; 90 void AsString( TString &out, const char *options = """" ) const;; 91 void ls(Option_t *option="""") const override;; 92 ; 93 private:; 94 ; 95 Bool_t ProcessVersion( const TString& version ) const;; 96 Bool_t ProcessChecksum( const TString& checksum ) const;; 97 UInt_t ParseChecksum( const char* checksum ) const;; 98 static void ProcessList( TObjArray* array, const TString& list );; 99 static void ProcessDeclaration( TObjArray* array, const TString& list );; 100 ; 101 TString fVersion; // Source version string; 102 mutable std::vector<std::pair<Int_t, Int_t> >* fVersionVect; //! Source version vector (for searching purposes); 103 TString fChecksum; // Source checksum string; 104 mutable std::vector<UInt_t>* fChecksumVect; //! Source checksum vector (for searching purposes); 105 TString fSourceClass; // Source class; 106 TString fTargetClass; // Target class, this is the owner of this rule object.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRule_8h_source.html:3197,checksum,checksum,3197,doc/master/TSchemaRule_8h_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRule_8h_source.html,4,['checksum'],['checksum']
Security,";; 659 THnSparseCoordCompression compactCoord(*GetCompactCoord());; 660 Long64_t idx = 0;; 661 if (2 * GetNbins() > fBins.Capacity()); 662 fBins.Expand(3 * GetNbins());; 663 while ((chunk = (THnSparseArrayChunk*) iChunk())) {; 664 const Int_t chunkSize = chunk->GetEntries();; 665 Char_t* buf = chunk->fCoordinates;; 666 const Int_t singleCoordSize = chunk->fSingleCoordinateSize;; 667 const Char_t* endbuf = buf + singleCoordSize * chunkSize;; 668 for (; buf < endbuf; buf += singleCoordSize, ++idx) {; 669 Long64_t hash = compactCoord.GetHashFromBuffer(buf);; 670 Long64_t linidx = fBins.GetValue(hash);; 671 if (linidx) {; 672 Long64_t nextidx = linidx;; 673 while (nextidx) {; 674 // must be a collision, so go to fBinsContinued.; 675 linidx = nextidx;; 676 nextidx = fBinsContinued.GetValue(linidx);; 677 }; 678 fBinsContinued.Add(linidx, idx + 1);; 679 } else {; 680 fBins.Add(hash, idx + 1);; 681 }; 682 }; 683 }; 684}; 685 ; 686////////////////////////////////////////////////////////////////////////////////; 687/// Initialize storage for nbins; 688 ; 689void THnSparse::Reserve(Long64_t nbins) {; 690 if (!fBins.GetSize() && fBinContent.GetSize()) {; 691 FillExMap();; 692 }; 693 if (2 * nbins > fBins.Capacity()) {; 694 fBins.Expand(3 * nbins);; 695 }; 696}; 697 ; 698////////////////////////////////////////////////////////////////////////////////; 699/// Get the bin index for the n dimensional tuple x,; 700/// allocate one if it doesn't exist yet and ""allocate"" is true.; 701 ; 702Long64_t THnSparse::GetBin(const Double_t* x, Bool_t allocate /* = kTRUE */); 703{; 704 THnSparseCompactBinCoord* cc = GetCompactCoord();; 705 Int_t *coord = cc->GetCoord();; 706 for (Int_t i = 0; i < fNdimensions; ++i); 707 coord[i] = GetAxis(i)->FindBin(x[i]);; 708 cc->UpdateCoord();; 709 ; 710 return GetBinIndexForCurrentBin(allocate);; 711}; 712 ; 713 ; 714////////////////////////////////////////////////////////////////////////////////; 715/// Get the bin index for the n dimensional tuple address",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THnSparse_8cxx_source.html:25803,hash,hash,25803,doc/master/THnSparse_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THnSparse_8cxx_source.html,1,['hash'],['hash']
Security,";; 9765 if (sf_sent > 0) {; 9766 len -= sf_sent;; 9767 offset += sf_sent;; 9768 } else if (loop_cnt == 0) {; 9769 /* This file can not be sent using sendfile.; 9770 * This might be the case for pseudo-files in the; 9771 * /sys/ and /proc/ file system.; 9772 * Use the regular user mode copy code instead. */; 9773 break;; 9774 } else if (sf_sent == 0) {; 9775 /* No error, but 0 bytes sent. May be EOF? */; 9776 return;; 9777 }; 9778 loop_cnt++;; 9779 ; 9780 } while ((len > 0) && (sf_sent >= 0));; 9781 ; 9782 if (sf_sent > 0) {; 9783 return; /* OK */; 9784 }; 9785 ; 9786 /* sf_sent<0 means error, thus fall back to the classic way */; 9787 /* This is always the case, if sf_file is not a ""normal"" file,; 9788 * e.g., for sending data from the output of a CGI process. */; 9789 offset = (int64_t)sf_offs;; 9790 }; 9791#endif; 9792 if ((offset > 0) && (fseeko(filep->access.fp, offset, SEEK_SET) != 0)) {; 9793 mg_cry_internal(conn,; 9794 ""%s: fseeko() failed: %s"",; 9795 __func__,; 9796 strerror(ERRNO));; 9797 mg_send_http_error(; 9798 conn,; 9799 500,; 9800 ""%s"",; 9801 ""Error: Unable to access file at requested position."");; 9802 } else {; 9803 while (len > 0) {; 9804 /* Calculate how much to read from the file in the buffer */; 9805 to_read = sizeof(buf);; 9806 if ((int64_t)to_read > len) {; 9807 to_read = (int)len;; 9808 }; 9809 ; 9810 /* Read from file, exit the loop on error */; 9811 if ((num_read =; 9812 (int)fread(buf, 1, (size_t)to_read, filep->access.fp)); 9813 <= 0) {; 9814 break;; 9815 }; 9816 ; 9817 /* Send read bytes to the client, exit the loop on error */; 9818 if ((num_written = mg_write(conn, buf, (size_t)num_read)); 9819 != num_read) {; 9820 break;; 9821 }; 9822 ; 9823 /* Both read and were successful, adjust counters */; 9824 len -= num_written;; 9825 }; 9826 }; 9827 }; 9828}; 9829 ; 9830 ; 9831static int; 9832parse_range_header(const char *header, int64_t *a, int64_t *b); 9833{; 9834 return sscanf(header,; 9835 ""bytes=%"" INT64_FMT ""-%"" INT64_FMT,; 9836 a,; 983",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:280841,access,access,280841,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['access'],['access']
Security,";; 9766 if (sf_sent > 0) {; 9767 len -= sf_sent;; 9768 offset += sf_sent;; 9769 } else if (loop_cnt == 0) {; 9770 /* This file can not be sent using sendfile.; 9771 * This might be the case for pseudo-files in the; 9772 * /sys/ and /proc/ file system.; 9773 * Use the regular user mode copy code instead. */; 9774 break;; 9775 } else if (sf_sent == 0) {; 9776 /* No error, but 0 bytes sent. May be EOF? */; 9777 return;; 9778 }; 9779 loop_cnt++;; 9780 ; 9781 } while ((len > 0) && (sf_sent >= 0));; 9782 ; 9783 if (sf_sent > 0) {; 9784 return; /* OK */; 9785 }; 9786 ; 9787 /* sf_sent<0 means error, thus fall back to the classic way */; 9788 /* This is always the case, if sf_file is not a ""normal"" file,; 9789 * e.g., for sending data from the output of a CGI process. */; 9790 offset = (int64_t)sf_offs;; 9791 }; 9792#endif; 9793 if ((offset > 0) && (fseeko(filep->access.fp, offset, SEEK_SET) != 0)) {; 9794 mg_cry_internal(conn,; 9795 ""%s: fseeko() failed: %s"",; 9796 __func__,; 9797 strerror(ERRNO));; 9798 mg_send_http_error(; 9799 conn,; 9800 500,; 9801 ""%s"",; 9802 ""Error: Unable to access file at requested position."");; 9803 } else {; 9804 while (len > 0) {; 9805 /* Calculate how much to read from the file in the buffer */; 9806 to_read = sizeof(buf);; 9807 if ((int64_t)to_read > len) {; 9808 to_read = (int)len;; 9809 }; 9810 ; 9811 /* Read from file, exit the loop on error */; 9812 if ((num_read =; 9813 (int)fread(buf, 1, (size_t)to_read, filep->access.fp)); 9814 <= 0) {; 9815 break;; 9816 }; 9817 ; 9818 /* Send read bytes to the client, exit the loop on error */; 9819 if ((num_written = mg_write(conn, buf, (size_t)num_read)); 9820 != num_read) {; 9821 break;; 9822 }; 9823 ; 9824 /* Both read and were successful, adjust counters */; 9825 len -= num_written;; 9826 }; 9827 }; 9828 }; 9829}; 9830 ; 9831 ; 9832static int; 9833parse_range_header(const char *header, int64_t *a, int64_t *b); 9834{; 9835 return sscanf(header,; 9836 ""bytes=%"" INT64_FMT ""-%"" INT64_FMT,; 9837 a,; 983",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:280873,access,access,280873,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['access'],['access']
Security,"< Proxied, DataSource >::Vary ; (; const std::vector< std::string > & ; colNames, . std::string_view ; expression, . std::size_t ; nVariations, . std::string_view ; variationName . ). inline . Register systematic variations for multiple existing columns using auto-generated variation tags. ; Parameters. [in]colNamesset of names of the columns for which varied values are provided. ; [in]expressiona string containing valid C++ code that evaluates to an RVec or RVecs containing the varied values for the specified columns. ; [in]nVariationsnumber of variations returned by the expression. The corresponding tags will be ""0"", ""1"", etc. ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". This overload adds the possibility for the expression used to evaluate the varied values to be just-in-time compiled. It takes an nVariations parameter instead of a list of tag names. The varied results will be accessible via the keys of the dictionary with the form variationName:N where N is the corresponding sequential tag starting at 0 and going up to nVariations - 1. The example below shows how Vary() is used while dealing with multiple columns.; auto nominal_hx =; df.Vary({""x"", ""y""}, ""ROOT::RVec<ROOT::RVecD>{{x*0.9, x*1.1}, {y*0.9, y*1.1}}"", 2, ""xy""); .Histo1D(""x"", ""y"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""xy:0""].Draw(""SAME"");; hx[""xy:1""].Draw(""SAME"");; See alsoThis Vary() overload for more information. ; Definition at line 1144 of file RInterface.hxx. ◆ Vary() [5/11]. template<typename Proxied , typename DataSource = void> . template<typename F > . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; std::initializer_list< std::string > ; colNames, . F && ; expression, . const ColumnNames_t & ; inputColumns, . const std::vector< std::string > & ; variationTags, . std::string_view ; variationName . ). inline . Register systematic variations for multiple existing colu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:143415,access,accessible,143415,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['access'],['accessible']
Security,"< nblocks; i++); 778 {; 779 uint64_t k1 = getblock(blocks,i*2+0);; 780 uint64_t k2 = getblock(blocks,i*2+1);; 781 ; 782 k1 *= c1; k1 = ROTL64(k1,31); k1 *= c2; h1 ^= k1;; 783 ; 784 h1 = ROTL64(h1,27); h1 += h2; h1 = h1*5+0x52dce729;; 785 ; 786 k2 *= c2; k2 = ROTL64(k2,33); k2 *= c1; h2 ^= k2;; 787 ; 788 h2 = ROTL64(h2,31); h2 += h1; h2 = h2*5+0x38495ab5;; 789 }; 790 ; 791 //----------; 792 // tail; 793 ; 794 const uint8_t * tail = (const uint8_t*)(data + nblocks*16);; 795 ; 796 uint64_t k1 = 0;; 797 uint64_t k2 = 0;; 798 ; 799 switch(len & 15) {; 800 case 15: k2 ^= uint64_t(tail[14]) << 48; // fall through; 801 case 14: k2 ^= uint64_t(tail[13]) << 40; // fall through; 802 case 13: k2 ^= uint64_t(tail[12]) << 32; // fall through; 803 case 12: k2 ^= uint64_t(tail[11]) << 24; // fall through; 804 case 11: k2 ^= uint64_t(tail[10]) << 16; // fall through; 805 case 10: k2 ^= uint64_t(tail[ 9]) << 8; // fall through; 806 case 9: k2 ^= uint64_t(tail[ 8]) << 0;; 807 k2 *= c2; k2 = ROTL64(k2,33); k2 *= c1; h2 ^= k2;; 808 // fall through; 809 case 8: k1 ^= uint64_t(tail[ 7]) << 56; // fall through; 810 case 7: k1 ^= uint64_t(tail[ 6]) << 48; // fall through; 811 case 6: k1 ^= uint64_t(tail[ 5]) << 40; // fall through; 812 case 5: k1 ^= uint64_t(tail[ 4]) << 32; // fall through; 813 case 4: k1 ^= uint64_t(tail[ 3]) << 24; // fall through; 814 case 3: k1 ^= uint64_t(tail[ 2]) << 16; // fall through; 815 case 2: k1 ^= uint64_t(tail[ 1]) << 8; // fall through; 816 case 1: k1 ^= uint64_t(tail[ 0]) << 0;; 817 k1 *= c1; k1 = ROTL64(k1,31); k1 *= c2; h1 ^= k1;; 818 };; 819 ; 820 //----------; 821 // finalization; 822 ; 823 h1 ^= len; h2 ^= len;; 824 ; 825 h1 += h2;; 826 h2 += h1;; 827 ; 828 h1 = fmix(h1);; 829 h2 = fmix(h2);; 830 ; 831 h1 += h2;; 832 h2 += h1;; 833 ; 834 ((uint64_t*)out)[0] = h1;; 835 ((uint64_t*)out)[1] = h2;; 836 }; 837 ; 838}; 839 ; 840////////////////////////////////////////////////////////////////////////////////; 841/// Calculates hash index from any char string.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8cxx_source.html:25244,hash,hash,25244,doc/master/TString_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TString_8cxx_source.html,1,['hash'],['hash']
Security,"<::TGraph> Graph(std::string_view x = """", std::string_view y = """"); 2226 {; 2227 auto graph = std::make_shared<::TGraph>();; 2228 const std::vector<std::string_view> columnViews = {x, y};; 2229 const auto userColumns = RDFInternal::AtLeastOneEmptyString(columnViews); 2230 ? ColumnNames_t(); 2231 : ColumnNames_t(columnViews.begin(), columnViews.end());; 2232 ; 2233 const auto validatedColumns = GetValidatedColumnNames(2, userColumns);; 2234 ; 2235 // We build a default name and title based on the input columns; 2236 const auto g_name = validatedColumns[1] + ""_vs_"" + validatedColumns[0];; 2237 const auto g_title = validatedColumns[1] + "" vs "" + validatedColumns[0];; 2238 graph->SetNameTitle(g_name.c_str(), g_title.c_str());; 2239 graph->GetXaxis()->SetTitle(validatedColumns[0].c_str());; 2240 graph->GetYaxis()->SetTitle(validatedColumns[1].c_str());; 2241 ; 2242 return CreateAction<RDFInternal::ActionTags::Graph, X, Y>(validatedColumns, graph, graph, fProxiedPtr);; 2243 }; 2244 ; 2245 ////////////////////////////////////////////////////////////////////////////; 2246 /// \brief Fill and return a TGraphAsymmErrors object (*lazy action*).; 2247 /// \param[in] x The name of the column that will fill the x axis.; 2248 /// \param[in] y The name of the column that will fill the y axis.; 2249 /// \param[in] exl The name of the column of X low errors; 2250 /// \param[in] exh The name of the column of X high errors; 2251 /// \param[in] eyl The name of the column of Y low errors; 2252 /// \param[in] eyh The name of the column of Y high errors; 2253 /// \return the TGraphAsymmErrors wrapped in a RResultPtr.; 2254 ///; 2255 /// Columns can be of a container type (e.g. std::vector<double>), in which case the graph; 2256 /// is filled with each one of the elements of the container.; 2257 /// If Multithreading is enabled, the order in which points are inserted is undefined.; 2258 ///; 2259 /// This action is *lazy*: upon invocation of this method the calculation is; 2260 /// booked bu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:125582,validat,validatedColumns,125582,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['validat'],['validatedColumns']
Security,"<< ""MethodDNN is deprecated and it will be removed in future ROOT version. ""; 131 ""Please use MethodDL ( TMVA::kDL)""; 132 << Endl;; 133 ; 134}; 135 ; 136////////////////////////////////////////////////////////////////////////////////; 137/// Options to be set in the option string:; 138///; 139/// - LearningRate <float> DNN learning rate parameter.; 140/// - DecayRate <float> Decay rate for learning parameter.; 141/// - TestRate <int> Period of validation set error computation.; 142/// - BatchSize <int> Number of event per batch.; 143///; 144/// - ValidationSize <string> How many events to use for validation. ""0.2""; 145/// or ""20%"" indicates that a fifth of the; 146/// training data should be used. ""100""; 147/// indicates that 100 events should be used.; 148 ; 149void TMVA::MethodDNN::DeclareOptions(); 150{; 151 ; 152 DeclareOptionRef(fLayoutString=""SOFTSIGN|(N+100)*2,LINEAR"",; 153 ""Layout"",; 154 ""Layout of the network."");; 155 ; 156 DeclareOptionRef(fValidationSize = ""20%"", ""ValidationSize"",; 157 ""Part of the training data to use for ""; 158 ""validation. Specify as 0.2 or 20% to use a ""; 159 ""fifth of the data set as validation set. ""; 160 ""Specify as 100 to use exactly 100 events. ""; 161 ""(Default: 20%)"");; 162 ; 163 DeclareOptionRef(fErrorStrategy=""CROSSENTROPY"",; 164 ""ErrorStrategy"",; 165 ""Loss function: Mean squared error (regression)""; 166 "" or cross entropy (binary classification)."");; 167 AddPreDefVal(TString(""CROSSENTROPY""));; 168 AddPreDefVal(TString(""SUMOFSQUARES""));; 169 AddPreDefVal(TString(""MUTUALEXCLUSIVE""));; 170 ; 171 DeclareOptionRef(fWeightInitializationString=""XAVIER"",; 172 ""WeightInitialization"",; 173 ""Weight initialization strategy"");; 174 AddPreDefVal(TString(""XAVIER""));; 175 AddPreDefVal(TString(""XAVIERUNIFORM""));; 176 ; 177 DeclareOptionRef(fArchitectureString = ""CPU"", ""Architecture"", ""Which architecture to perform the training on."");; 178 AddPreDefVal(TString(""STANDARD""));; 179 AddPreDefVal(TString(""CPU""));; 180 AddPreDefVal(TString(""GPU""));; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:5451,validat,validation,5451,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['validat'],['validation']
Security,"<< ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TGFrame; enum  { kDeleteWindowCalled = (1ULL << ( 15 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGTextView; void Copy (TObject &) const override;  Copy this to obj. ;  ; void DrawRegion (Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Draw lines in exposed region. ;  ; virtual void HLayout ();  Horizontal layout of widgets (canvas, scrollbar). ;  ; void Init (Pixel_t bg);  Initialize a text view widget. ;  ; virtual void Mark (Long_t xPos, Long_t yPos);  Mark a text region from xPos to yPos. ;  ; virtual void UnMark ();  Clear marked region. ;  ; virtual void VLayout ();  Vertical layout of widgets (canvas, scrollbar). ;  ;  Protected Member Functions inherited from TGView; void DoRedraw () override;  redraw ;  ; virtual Bool_t ItemLayout ();  ; virtual void UpdateRegion (Int_t x, Int_t y, UInt_t w, UInt_t h);  update a part of view ;  ;  Protected Member Functions inherited from TGFrame; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame border. ;  ; TString GetOptionString () const;  Returns a frame option string - used in SavePrimitive(). ;  ; const TGResourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTextViewostream.html:36596,expose,exposed,36596,doc/master/classTGTextViewostream.html,https://root.cern,https://root.cern/doc/master/classTGTextViewostream.html,1,['expose'],['exposed']
Security,"<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >& ); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordinates(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar* src). Set internal data based on an array of 4 Scalar numbers. void GetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar& a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar& b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar* dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar xx, ROOT::Math",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:11277,access,access,11277,root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,4,['access'],['access']
Security,"<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >& ); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. void GetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar& a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar& b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar* dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. LorentzVector<CoordSystem>& SetCoordinates(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar* src). Set internal data based on an array of 4 Scalar numbers. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar xx, ROOT::Math",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:11278,access,access,11278,root/html534/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,1,['access'],['access']
Security,"<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >& ); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. LorentzVector<CoordSystem>& SetCoordinates(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar* src). Set internal data based on an array of 4 Scalar numbers. void GetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar& a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar& b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar* dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar xx, ROOT::Math",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:11277,access,access,11277,root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,4,['access'],['access']
Security,"<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LorentzVector & operator=(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >& ); ------ assignment ------. Assignment operator from a lorentz vector of arbitrary type. SetXYZT(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar tt). fCoordinates. SetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar d). const CoordSystem & Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a const reference to the coordinates object. void GetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar& a, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar& b, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar* dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. LorentzVector<CoordSystem>& SetCoordinates(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar* src). Set internal data based on an array of 4 Scalar numbers. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar xx, ROOT::Math",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:11278,access,access,11278,root/html534/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,1,['access'],['access']
Security,"<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::CylindricalEta3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=(const ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>& ). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar* src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). Set internal data based on 3 Scalar numbers. { fCoordinates.SetCoordinates(a, b, c); return *this; }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Cylindric",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:12035,access,access,12035,root/html526/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,5,['access'],['access']
Security,"<RooAbsArg*,TRefArray*>RooAbsArg::_ioEvoListtemporary holding list for proxies needed in schema evolution ; static stack<RooAbsArg*>RooAbsArg::_ioReadStackreading stack ; static const UInt_tRooAbsArg::fnv1a32start; static const ULong64_tRooAbsArg::fnv1a64start. protected:. set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsCategory::_byteValue! Transient cache for byte values from tree branches; deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooCatType*_defCatDefault (unmapped) output type; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; RooCategoryProxy_inputCatInput category; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; map<std::string,RooMappedCategory::Entry>_mapArrayList of mapping rules; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debug",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMappedCategory.html:21328,access,access,21328,root/html534/RooMappedCategory.html,https://root.cern,https://root.cern/root/html534/RooMappedCategory.html,1,['access'],['access']
Security,<double> ; TEveVector2T<float> ; TEveVector4T<double> ; TEveVector4T<float> ; TEveVectorT<double> ; TEveVectorT<float> ; TEveViewer Reve representation of TGLViewer.; TEveViewerList List of Viewers providing common operations on TEveViewer collections.; TEveViewerListEditor GUI editor for TEveViewerList.; TEveWindow Abstract base-class for eve-windows.; TEveWindowEditor GUI editor for TEveWindow.; TEveWindowFrame Eve-window containing any TGFrame.; TEveWindowManager Manager for EVE windows.; TEveWindowPack Eve-window containing a TGPack.; TEveWindowSlot An unoccupied eve-window slot.; TEveWindowTab Eve-window containing a TGTab.; TEventIter Event iterator used by TProofPlayer's; TEventIterObj Event iterator for objects; TEventIterTree Event iterator for Trees; TEventIterUnit Event iterator for objects; TEventList A list of selected entries in a TTree.; TExMap Map with external hash; TExMapIter TExMap iterator; TExec To execute a CINT command; TF1 The Parametric 1-D function; TF12 Projection of a TF2 along x or y; TF1Editor user interface for TF1 objects; TF2 The Parametric 2-D function; TF2GL GL renderer for TF2 and TF3.; TF3 The Parametric 3-D function; TFFTComplex ; TFFTComplexReal ; TFFTReal ; TFFTRealComplex ; TFITSHDU Class interfacing FITS HDUs; TFPBlock File prefetch block; TFTP File Transfer Protocol class using rootd; TFastCgi fastcgi engine for THttpServer; TFeldmanCousins calculate the CL upper limit using the Feldman-Cousins method; TFile ROOT file; TFileCacheRead TFile cache when reading; TFileCacheWrite TFile cache when writing; TFileCollection Collection of TFileInfo objects; TFileDrawMap Draw a 2-d map of the objects in a file; TFileHandler Handles events on file descriptors; TFileInfo Describes generic file info including meta data information; TFileInfoMeta Describes TFileInfo meta data; TFileIter TFile class iterator; TFileMergeInfo ; TFileMerger File copying and merging services; TFilePrefetch File block prefetcher; TFileSet TDataSet class to read,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:69913,hash,hash,69913,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,1,['hash'],['hash']
Security,"<typename G > ; bool Invert (G *m) const;  place the inverse into m ;  ; template<class M > ; bool Invert (M &m) const;  place the inverse into m ;  ; bool ok () const;  returns true if decomposition was successful ;  ;  operator bool () const;  returns true if decomposition was successful ;  ; template<class V > ; bool Solve (V &rhs) const;  solves a linear system for the given right hand side ;  . Private Attributes; F * fL;  lower triangular matrix L ;  ; unsigned fN;  dimensionality dimensionality of the problem ;  ; bool fOk;  flag indicating a successful decomposition ;  . #include <Math/CholeskyDecomp.h>; Constructor & Destructor Documentation. ◆ CholeskyDecompGenDim() [1/2]. template<class F > . template<class M > . ROOT::Math::CholeskyDecompGenDim< F >::CholeskyDecompGenDim ; (; unsigned ; N, . const M & ; m . ). inline . perform a Cholesky decomposition ; perform a Cholesky decomposition of a symmetric positive definite matrix m; this is the constructor to uses with an SMatrix (and objects that behave like an SMatrix in terms of using operator()(int i, int j) for access to elements) ; Definition at line 331 of file CholeskyDecomp.h. ◆ CholeskyDecompGenDim() [2/2]. template<class F > . template<typename G > . ROOT::Math::CholeskyDecompGenDim< F >::CholeskyDecompGenDim ; (; unsigned ; N, . G * ; m . ). inline . perform a Cholesky decomposition ; perform a Cholesky decomposition of a symmetric positive definite matrix m; this is the constructor to use in special applications where plain arrays are used; NOTE: the matrix is given in packed representation, matrix element m(i,j) (j <= i) is supposed to be in array element (i * (i + 1)) / 2 + j ; Definition at line 349 of file CholeskyDecomp.h. ◆ ~CholeskyDecompGenDim(). template<class F > . ROOT::Math::CholeskyDecompGenDim< F >::~CholeskyDecompGenDim ; (; ). inline . destructor ; Definition at line 359 of file CholeskyDecomp.h. Member Function Documentation. ◆ getL() [1/2]. template<class F > . template<typename",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html:3405,access,access,3405,doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1CholeskyDecompGenDim.html,1,['access'],['access']
Security,"= """"); Info is a string describing the names and types of attributes; written by the class Streamer function.; If info is an empty string (when called by TObject::StreamerInfo); the default Streamer info string is build. This corresponds to; the case of an automatically generated Streamer.; In case of user defined Streamer function, it is the user responsability; to implement a StreamerInfo function (override TObject::StreamerInfo).; The user must call IsA()->SetStreamerInfo(info) from this function. Bool_t MatchLegacyCheckSum(UInt_t checksum) const; Return true if the checksum passed as argument is one of the checksum; value produced by the older checksum calulcation algorithm. UInt_t GetCheckSum(ECheckSum code); Call GetCheckSum with validity check. UInt_t GetCheckSum(Bool_t& isvalid) const; Return GetCheckSum(kCurrentCheckSum,isvalid);. UInt_t GetCheckSum(TClass::ECheckSum code, Bool_t& isvalid) const; Compute and/or return the class check sum. isvalid is set to false, if the function is unable to calculate the; checksum. The class ckecksum is used by the automatic schema evolution algorithm; to uniquely identify a class version.; The check sum is built from the names/types of base classes and; data members.; Original algorithm from Victor Perevovchikov (perev@bnl.gov). The valid range of code is determined by ECheckSum. kNoEnum: data members of type enum are not counted in the checksum; kNoRange: return the checksum of data members and base classes, not including the ranges and array size found in comments.; kWithTypeDef: use the sugared type name in the calculation. This is needed for backward compatibility. WARNING: this function must be kept in sync with TStreamerInfo::GetCheckSum.; They are both used to handle backward compatibility and should both return the same values.; TStreamerInfo uses the information in TStreamerElement while TClass uses the information; from TClass::GetListOfBases and TClass::GetListOfDataMembers. void AdoptReferenceProxy(TVirtualRefP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClass.html:57131,checksum,checksum,57131,root/html602/TClass.html,https://root.cern,https://root.cern/root/html602/TClass.html,2,['checksum'],['checksum']
Security,"= 0u; i < N; ++i, ++target); 1561/// frombuf(rawdata, target); // `frombuf` also advances the `rawdata` pointer; 1562/// ~~~; 1563///; 1564/// where target is a pointer or array to the type stored on this branch.; 1565///; 1566/// When `count_buf` points to a valid TBuffer and the branch has a branch count,; 1567/// `count_buf` will be filled (via a call to GetEntriesSerialized()) with the data; 1568/// from the branchCount. After deserialization those value can be used to calculate; 1569/// the number of elements corresponding to each entries.; 1570///; 1571/// For each entry the number of elements is the multiplication of; 1572///; 1573/// ~~~{.cpp}; 1574/// TLeaf *leaf = dynamic_cast<TLeaf*>(branch->GetListOfLeaves()->At(0));; 1575/// auto len = leaf->GetLen();; 1576/// ~~~; 1577///; 1578/// and the value in the BranchCount corresponding to that entry (can be obtained; 1579/// from `branch->GetBranchCount()`).; 1580///; 1581/// \note This interface is not meant to be exposed to end users, but rather it should; 1582/// be wrapped by higher-level interfaces.; 1583///; 1584/// \note See TBranch::GetBulkEntries() for an alternative that also performs byte swapping.; 1585///; 1586Int_t TBranch::GetEntriesSerialized(Long64_t entry, TBuffer &user_buf, TBuffer *count_buf); 1587{; 1588 // TODO: Template this and TBranch::GetBulkEntries; only difference is the TLeaf function (ReadBasketFast vs; 1589 // ReadBasketSerialized; 1590 ; 1591 // TODO: eventually support multiple leaves.; 1592 if (R__unlikely(fNleaves != 1)) { return -1; }; 1593 TLeaf *leaf = static_cast<TLeaf*>(fLeaves.UncheckedAt(0));; 1594 if (R__unlikely(leaf->GetDeserializeType() == TLeaf::DeserializeType::kDestructive)) {; 1595 Error(""GetEntriesSerialized"", ""Encountered a branch with destructive deserialization; failing."");; 1596 return -1;; 1597 }; 1598 ; 1599 // Remember which entry we are reading.; 1600 fReadEntry = entry;; 1601 ; 1602 bool enabled = !TestBit(kDoNotProcess);; 1603 if (R__unlikely(!enabled)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranch_8cxx_source.html:57313,expose,exposed,57313,doc/master/TBranch_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranch_8cxx_source.html,1,['expose'],['exposed']
Security,"= 1; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFTP (const char *url, Int_t parallel=1, Int_t wsize=kDfltWindowSize, TSocket *sock=nullptr);  Open connection to host specified by the url using par parallel sockets. ;  ; virtual ~TFTP ();  TFTP dtor. Send close message and close socket. ;  ; Bool_t AccessPathName (const char *path, EAccessMode mode=kFileExists, Bool_t print=kFALSE);  Returns kFALSE if one can access a file using the specified access mode. ;  ; void Ascii ();  ; void ascii ();  ; void bin ();  ; void Binary ();  ; void bye ();  ; void cd (const char *dir) const;  ; Int_t ChangeDirectory (const char *dir) const;  Change the remote directory. ;  ; Int_t ChangePermission (const char *file, Int_t mode) const;  Change permissions of a remote file. ;  ; void chmod (const char *file, Int_t mode) const;  ; Int_t Close ();  Close ftp connection. ;  ; Int_t DeleteDirectory (const char *dir) const;  Delete a remote directory. ;  ; Int_t DeleteFile (const char *file) const;  Delete a remote file. ;  ; void FreeDirectory (Bool_t print=kFALSE);  Free a remotely open directory via rootd. ;  ; void get (const char *file, const char *localName=nullptr);  ; Int_t GetBlockSize () const;  ; const char * GetDirEntry (Bool_t print=kFALSE);  Get directory entry via rootd. ;  ; Long64_t GetFile (const char *file, const char *localName=nullptr);  Transfer file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFTP.html:1513,access,access,1513,doc/master/classTFTP.html,https://root.cern,https://root.cern/doc/master/classTFTP.html,2,['access'],['access']
Security,"= c->GetBaseDataMember(datamember);; 2842 if (cdm) return cdm;; 2843 }; 2844 }; 2845 ; 2846 return nullptr;; 2847}; 2848 ; 2849namespace {; 2850 // A local Helper class used to keep 2 pointer (the collection proxy; 2851 // and the class streamer) in the thread local storage.; 2852 ; 2853 struct TClassLocalStorage {; 2854 TClassLocalStorage() : fCollectionProxy(nullptr), fStreamer(nullptr) {};; 2855 ; 2856 TVirtualCollectionProxy *fCollectionProxy;; 2857 TClassStreamer *fStreamer;; 2858 ; 2859 static TClassLocalStorage *GetStorage(const TClass *cl); 2860 {; 2861 // Return the thread storage for the TClass.; 2862 ; 2863 void **thread_ptr = (*gThreadTsd)(nullptr,ROOT::kClassThreadSlot);; 2864 if (thread_ptr) {; 2865 if (*thread_ptr==nullptr) *thread_ptr = new TExMap();; 2866 TExMap *lmap = (TExMap*)(*thread_ptr);; 2867 ULong_t hash = TString::Hash(&cl, sizeof(void*));; 2868 ULongptr_t local = 0;; 2869 UInt_t slot;; 2870 if ((local = (ULongptr_t)lmap->GetValue(hash, (Longptr_t)cl, slot)) != 0) {; 2871 } else {; 2872 local = (ULongptr_t) new TClassLocalStorage();; 2873 lmap->AddAt(slot, hash, (Longptr_t)cl, local);; 2874 }; 2875 return (TClassLocalStorage*)local;; 2876 }; 2877 return nullptr;; 2878 }; 2879 };; 2880}; 2881 ; 2882////////////////////////////////////////////////////////////////////////////////; 2883/// Return the 'type' of the STL the TClass is representing.; 2884/// and return ROOT::kNotSTL if it is not representing an STL collection.; 2885 ; 2886ROOT::ESTLType TClass::GetCollectionType() const; 2887{; 2888 auto proxy = GetCollectionProxy();; 2889 if (proxy) return (ROOT::ESTLType)proxy->GetCollectionType();; 2890 return ROOT::kNotSTL;; 2891}; 2892 ; 2893 ; 2894////////////////////////////////////////////////////////////////////////////////; 2895/// Return the proxy describing the collection (if any).; 2896 ; 2897TVirtualCollectionProxy *TClass::GetCollectionProxy() const; 2898{; 2899 // Use assert, so that this line (slow because of the TClassEdit) is comp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:107098,hash,hash,107098,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,3,['hash'],['hash']
Security,"= c->GetBaseDataMember(datamember);; 2909 if (cdm) return cdm;; 2910 }; 2911 }; 2912 ; 2913 return nullptr;; 2914}; 2915 ; 2916namespace {; 2917 // A local Helper class used to keep 2 pointer (the collection proxy; 2918 // and the class streamer) in the thread local storage.; 2919 ; 2920 struct TClassLocalStorage {; 2921 TClassLocalStorage() : fCollectionProxy(nullptr), fStreamer(nullptr) {};; 2922 ; 2923 TVirtualCollectionProxy *fCollectionProxy;; 2924 TClassStreamer *fStreamer;; 2925 ; 2926 static TClassLocalStorage *GetStorage(const TClass *cl); 2927 {; 2928 // Return the thread storage for the TClass.; 2929 ; 2930 void **thread_ptr = (*gThreadTsd)(nullptr,ROOT::kClassThreadSlot);; 2931 if (thread_ptr) {; 2932 if (*thread_ptr==nullptr) *thread_ptr = new TExMap();; 2933 TExMap *lmap = (TExMap*)(*thread_ptr);; 2934 ULong_t hash = TString::Hash(&cl, sizeof(void*));; 2935 ULongptr_t local = 0;; 2936 UInt_t slot;; 2937 if ((local = (ULongptr_t)lmap->GetValue(hash, (Longptr_t)cl, slot)) != 0) {; 2938 } else {; 2939 local = (ULongptr_t) new TClassLocalStorage();; 2940 lmap->AddAt(slot, hash, (Longptr_t)cl, local);; 2941 }; 2942 return (TClassLocalStorage*)local;; 2943 }; 2944 return nullptr;; 2945 }; 2946 };; 2947}; 2948 ; 2949////////////////////////////////////////////////////////////////////////////////; 2950/// Return the 'type' of the STL the TClass is representing.; 2951/// and return ROOT::kNotSTL if it is not representing an STL collection.; 2952 ; 2953ROOT::ESTLType TClass::GetCollectionType() const; 2954{; 2955 auto proxy = GetCollectionProxy();; 2956 if (proxy) return (ROOT::ESTLType)proxy->GetCollectionType();; 2957 return ROOT::kNotSTL;; 2958}; 2959 ; 2960 ; 2961////////////////////////////////////////////////////////////////////////////////; 2962/// Return the proxy describing the collection (if any).; 2963 ; 2964TVirtualCollectionProxy *TClass::GetCollectionProxy() const; 2965{; 2966 // Use assert, so that this line (slow because of the TClassEdit) is comp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:109849,hash,hash,109849,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,3,['hash'],['hash']
Security,"= new TCanvas(""c"",""Marker colors"",0,0,500,200);; c->DrawColorTable();; return c;; }. Color transparency; SetMarkerColorAlpha(), allows to set a transparent color.; In the following example the marker color of the histogram histo; is set to blue with a transparency of 35%. The color kBlue; itself remains fully opaque. histo->SetMarkerColorAlpha(kBlue, 0.35);. The transparency is available on all platforms when the flagOpenGL.CanvasPreferGL is set to 1; in $ROOTSYS/etc/system.rootrc, or on Mac with the Cocoa backend. On the file output; it is visible with PDF, PNG, Gif, JPEG, SVG ... but not PostScript.; Marker style; The Marker style defines the markers' shape.; The marker style of any class inheriting from TAttMarker can; be changed using the method SetMarkerStyle and retrieved using the; method GetMarkerStyle.; The following list gives the currently supported markers (screen; and PostScript) style. Each marker style is identified by an integer number; (first column) corresponding to a marker shape (second column) and can be also; accessed via a global name (third column). Marker number Marker shape Marker name; 1 dot kDot; 2 + kPlus; 3 * kStar; 4 o kCircle; 5 x kMultiply; 6 small dot kFullDotSmall; 7 medium dot kFullDotMedium; 8 large scalable dot kFullDotLarge; 9 -->19 large scalable dot; 20 full circle kFullCircle; 21 full square kFullSquare; 22 full triangle up kFullTriangleUp; 23 full triangle down kFullTriangleDown; 24 open circle kOpenCircle; 25 open square kOpenSquare; 26 open triangle up kOpenTriangleUp; 27 open diamond kOpenDiamond; 28 open cross kOpenCross; 29 full star kFullStar; 30 open star kOpenStar; 31 *; 32 open triangle down; 33 full diamond; 34 full cross. Picture; Source. {; TCanvas *c = new TCanvas(""c"",""Marker types"",0,0,500,200);; TMarker marker;; marker.DisplayMarkerTypes();; return c;; }. Marker size; Various marker sizes are shown in the figure below. The default marker size=1; is shown in the top left corner. Marker sizes smaller than 1 can ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TAttMarker.html:1914,access,accessed,1914,root/html602/TAttMarker.html,https://root.cern,https://root.cern/root/html602/TAttMarker.html,2,['access'],['accessed']
Security,"=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; const DataSetInfo * fDsi;  -> a pointer to the datasetinfo-object ;  ; std::map< TString, TObject * > * fHistAlias;  -> internal map for quick access to stored histograms ;  ; MsgLogger * fLogger;  ! message logger ;  ; TList * fStorage;  -> stores all the result-histograms ;  ; Types::ETreeType fTreeType;  tree type for this result ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Results.html:10004,access,access,10004,doc/master/classTMVA_1_1Results.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Results.html,1,['access'],['access']
Security,"==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of lenght 1. std::ostream& Print(ostream& os) const; used by operator<<(). » Last changed: root/smatrix:$Id: SVector.h 21553 2007-12-21 10:55:46Z moneta $ » Last generated: 2010-09-23 19:57; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__SVector_double_2_.html:5976,access,access,5976,root/html528/ROOT__Math__SVector_double_2_.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__SVector_double_2_.html,6,['access'],['access']
Security,"==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of lenght 1. std::ostream& Print(ostream& os) const; used by operator<<(). » Last changed: root/smatrix:$Id: SVector.h 21553 2007-12-21 10:55:46Z moneta $ » Last generated: 2011-07-04 15:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__SVector_double_2_.html:5978,access,access,5978,root/html530/ROOT__Math__SVector_double_2_.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__SVector_double_2_.html,6,['access'],['access']
Security,"==(const T& rhs); @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator==(const SVector<T,D>& rhs); element wise comparison. bool operator!=(const SVector<T,D>& rhs); element wise comparison. bool operator>(const T& rhs); element wise comparison. bool operator<(const T& rhs); element wise comparison. bool operator>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const double& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const double& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of lenght 1. std::ostream& Print(ostream& os) const; used by operator<<(). » Last changed: root/smatrix:$Id: SVector.h 21553 2007-12-21 10:55:46Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__SVector_double_2_.html:5978,access,access,5978,root/html532/ROOT__Math__SVector_double_2_.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__SVector_double_2_.html,6,['access'],['access']
Security,"=========================================================; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; totalstatic unsigned int totalDefinition TGWin32ProxyDefs.h:40; onOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void onDefinition TGWin32VirtualXProxy.cxx:106; TApplicationThis class creates the ROOT Application Environment that interfaces to the windowing system eventloop...Definition TApplication.h:39; TArrowDraw all kinds of Arrows.Definition TArrow.h:29; TAxisClass to manage histogram axis.Definition TAxis.h:31; TBaseClassEach class (see TClass) has a linked list of its base class(es).Definition TBaseClass.h:33; TBenchmarkThis class is a ROOT utility to help benchmarking applications.Definition TBenchmark.h:29; TBoxCreate a Box.Definition TBox.h:22; TCanvasThe Canvas class.Definition TCanvas.h:23; TClassTableThis class registers for all classes their name, id and dictionary function in a hash table.Definition TClassTable.h:37; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TClingThis class defines an interface to the cling C++ interpreter.Definition TCling.h:102; TColorThe color creation and management class.Definition TColor.h:21; TContextMenuThis class provides an interface to context sensitive popup menus.Definition TContextMenu.h:44; TDataMemberAll ROOT classes may have RTTI (run time type identification) support added.Definition TDataMember.h:31; TDataTypeBasic data type descriptor (datatype information is obtained from CINT).Definition TDataType.h:44; TEnvThe TEnv class reads config files, by default named .rootrc.Definition TEnv.h:124; TFileHandlerDefinition TSysEvtHandler.h:65; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TGX11This class is the basic interface to the X",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjectTable.html:3516,hash,hash,3516,doc/master/classTObjectTable.html,https://root.cern,https://root.cern/doc/master/classTObjectTable.html,1,['hash'],['hash']
Security,"=nullptr) override;  Read array of floats (written as truncated float) from the I/O buffer. ;  ; virtual void ReadStdString (std::string &s);  ; void ReadStdString (std::string *s) override;  Read std::string from TBuffer. ;  ; virtual void ReadStdString (std::string *s)=0;  ; char * ReadString (char *s, Int_t max) override;  Read string from I/O buffer. ;  ; void ReadTString (TString &s) override;  Read TString from TBuffer. ;  ; void ReadUChar (UChar_t &c) override;  ; void ReadUInt (UInt_t &i) override;  ; void ReadULong (ULong_t &l) override;  ; void ReadULong64 (ULong64_t &l) override;  ; void ReadUShort (UShort_t &s) override;  ; Version_t ReadVersion (UInt_t *start=nullptr, UInt_t *bcnt=nullptr, const TClass *cl=nullptr) override;  Read class version from I/O buffer. ;  ; Version_t ReadVersionForMemberWise (const TClass *cl=nullptr) override;  Read class version from I/O buffer. ;  ; Version_t ReadVersionNoCheckSum (UInt_t *start=nullptr, UInt_t *bcnt=nullptr) override;  Read class version from I/O buffer, when the caller knows for sure that there is no checksum written/involved. ;  ; void ReadWithFactor (Double_t *ptr, Double_t factor, Double_t minvalue) override;  Read a Double32_t from the buffer when the factor and minimum value have been specified see comments about Double32_t encoding at TBufferFile::WriteDouble32(). ;  ; void ReadWithFactor (Float_t *ptr, Double_t factor, Double_t minvalue) override;  Read a Float16_t from the buffer when the factor and minimum value have been specified see comments about Double32_t encoding at TBufferFile::WriteDouble32(). ;  ; void ReadWithNbits (Double_t *ptr, Int_t nbits) override;  Read a Double32_t from the buffer when the number of bits is specified (explicitly or not) see comments about Double32_t encoding at TBufferFile::WriteDouble32(). ;  ; void ReadWithNbits (Float_t *ptr, Int_t nbits) override;  Read a Float16_t from the buffer when the number of bits is specified (explicitly or not) see comments about Floa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferFile.html:11509,checksum,checksum,11509,doc/master/classTBufferFile.html,https://root.cern,https://root.cern/doc/master/classTBufferFile.html,2,['checksum'],['checksum']
Security,"> // for make_shared, allocator, shared_ptr; 27#include <ostream> // ostringstream; 28#include <stdexcept>; 29#include <string>; 30#include <vector>; 31 ; 32// clang-format off; 33/**; 34* \class ROOT::RDataFrame; 35* \ingroup dataframe; 36* \brief ROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree , CSV and other data formats, in C++ or Python.; 37 ; 38In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available; 39on their machines completely transparently.<br>; 40Skip to the [class reference](#reference) or keep reading for the user guide.; 41 ; 42In a nutshell:; 43~~~{.cpp}; 44ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel; 45ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; 46auto myHisto = d.Histo1D(""Branch_A""); // This books the (lazy) filling of a histogram; 47myHisto->Draw(); // Event loop is run here, upon first access to a result; 48~~~; 49 ; 50Calculations are expressed in terms of a type-safe *functional chain of actions and transformations*, RDataFrame takes; 51care of their execution. The implementation automatically puts in place several low level optimisations such as; 52multi-thread parallelization and caching.; 53 ; 54\htmlonly; 55<a href=""https://doi.org/10.5281/zenodo.260230""><img src=""https://zenodo.org/badge/DOI/10.5281/zenodo.260230.svg""; 56alt=""DOI""></a>; 57\endhtmlonly; 58 ; 59## For the impatient user; 60You can directly see RDataFrame in action in our [tutorials](https://root.cern/doc/master/group__tutorial__dataframe.html), in C++ or Python.; 61 ; 62## Table of Contents; 63- [Cheat sheet](\ref cheatsheet); 64- [Introduction](\ref introduction); 65- [Crash course](\ref crash-course); 66- [Working with collections](\ref collections); 67- [Transformations: manipulating data](\ref transformations); 68- [Actions: getting results](\ref actions); 69- [Distributed execution in Python](\ref distrdf); 70- [Perf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:2122,access,access,2122,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,2,['access'],['access']
Security,">Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);. }. a.Delete();; }. Note: the only supported way to add objects to a TClonesArray is; via the new with placement method. The diffrent Add() methods of; TObjArray and its base classes are not allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offer the possibility to allocate and delete memory.; Forgetting to delete allocated memory is a programming error that originate ""leaks"",; i.e. the memory of your process grows and eventually your program crashes.; Even if you *always* delete the allocated memory, the recovered space may not be; efficiently reused. The process knows that there are portions of free memory,; but when you allocate it again, a fresh piece of memory is grabbed.; Your program is free from semantic errors, but the total memory of your process; still grows. Moreover your program's memory is full of ""holes"" which reduce the; efficiency of memory access, this is called ""memory fragmentation"".; Moreover new / delete are expensive operations in terms of CPU time. Without entering into technical details, the TClonesArray allow to ""reuse"" the; same portion of memory for new/delete avoiding memory fragmentation and memory; growth and improving by orders of magnitude the performance. Every time the; memory of the TClonesArray has to be reused, the Clear() method is employed.; To provide its benefits, each TClonesArray must be allocated *once* per process; and disposed of (deleted) *only when not needed any more*.; So a job should see *only one* deletion for each TClonesArray, which should be; ""Cleared()"" in between several times. Keep deleting a TClonesArray is a double; waste. Not only you do not avoid memory fragmentation, but you worsen it because; the TClonesArray itself is a rather heavy structure, and there is quite some; code in the destructor, so you have more memory fragmentation and slower code. NOTE 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TClonesArray.html:2097,access,access,2097,root/html528/TClonesArray.html,https://root.cern,https://root.cern/root/html528/TClonesArray.html,2,['access'],['access']
Security,">RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooRealProxyRooLegendre::_ctheta; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; intRooLegendre::_l1; intRooLegendre::_l2; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; intRooLegendre::_m1; intRooLegendre::_m2; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooSpHarmonic.html:35829,access,access,35829,root/html602/RooSpHarmonic.html,https://root.cern,https://root.cern/root/html602/RooSpHarmonic.html,2,['access'],['access']
Security,">SetIncludePath(""-I$ROOTSYS/include; -I$HOME/mypackage/include"");; root[2] .x myfunc.C++(10,20);; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TSystem::SetIncludePathvirtual void SetIncludePath(const char *includePath)IncludePath should contain the list of compiler flags to indicate where to find user defined header f...Definition TSystem.cxx:4194; The user may sometimes try to compile a script before it has loaded all the needed shared libraries. In this case we want to be helpful and output a list of the unresolved symbols. So if the loading of the created shared library fails, we will try to build a executable that contains the script. The linker should then output a list of missing symbols.; To support this we provide a TSystem::SetMakeExe() function, that sets the directive telling how to create an executable. The loader will need to be informed of all the libraries available. The information about the libraries that has been loaded by .L and TSystem::Load() is accessible to the script compiler. However, the information about the libraries that have been selected at link time by the application builder (like the root libraries for root.exe) are not available and need to be explicitly listed in fLinkedLibs (either by default or by a call to TSystem::SetLinkedLibs()).; To simplify customization we could also add to the .rootrc support for the variables Unix.*.Root.IncludePath: -I$ROOTSYS/include; WinNT.*.Root.IncludePath: -I%ROOTSYS%/include; ; Unix.*.Root.LinkedLibs: -L$ROOTSYS/lib -lBase ....; WinNT.*.Root.LinkedLibs: %ROOTSYS%/lib/*.lib msvcrt.lib ....; I#define I(x, y, z); And also support for MakeSharedLibs() and MakeExe().; (the ... have to be replaced by the actual values and are here only to shorten this comment).; Note that the default behavior is to remove libraries when closing ROOT, ie TSystem::CleanCompiledMacros() is called in the TROOT destructor. The default behavior of .L script.C+ is the opposite one, leaving things after closing, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem.html:45432,access,accessible,45432,doc/master/classTSystem.html,https://root.cern,https://root.cern/doc/master/classTSystem.html,1,['access'],['accessible']
Security,"? fReadMemberWise : fReadObjectWise; }. TStreamerInfoActions::TActionSequence * GetReadObjectWiseActions(); { return fReadObjectWise; }. TStreamerInfoActions::TActionSequence * GetWriteMemberWiseActions(Bool_t forCollection); { return forCollection ? fWriteMemberWise : fWriteObjectWise; }. TStreamerInfoActions::TActionSequence * GetWriteObjectWiseActions(); { return fWriteObjectWise; }. Int_t GetNdata() const; {return fNdata;}. Int_t GetNumber() const; {return fNumber;}. Int_t * GetLengths() const; {return fLength;}. ULong_t * GetMethods() const; {return fMethod;}. Int_t * GetNewTypes() const; {return fNewType;}. Int_t * GetOffsets() const; {return fOffset;}. Version_t GetOldVersion() const; {return fOldVersion;}. Int_t GetOnFileClassVersion() const; {return fOnFileClassVersion;}. Int_t * GetTypes() const; {return fType;}. TVirtualStreamerInfo * NewInfo(TClass* cl); {return new TStreamerInfo(cl);}. Int_t ReadBufferClones(TBuffer& b, TClonesArray* clones, Int_t nc, Int_t first, Int_t eoffset). Int_t ReadBufferSTL(TBuffer& b, TVirtualCollectionProxy* cont, Int_t nc, Int_t first, Int_t eoffset). void SetCheckSum(UInt_t checksum); {fCheckSum = checksum;}. void SetClass(TClass* cl); {fClass = cl;}. void SetClassVersion(Int_t vers); {fClassVersion=vers;}. Int_t WriteBuffer(TBuffer& b, char* pointer, Int_t first). Int_t WriteBufferClones(TBuffer& b, TClonesArray* clones, Int_t nc, Int_t first, Int_t eoffset). Int_t WriteBufferSTL(TBuffer& b, TVirtualCollectionProxy* cont, Int_t nc, Int_t first, Int_t eoffset). Int_t WriteBufferSTLPtrs(TBuffer& b, TVirtualCollectionProxy* cont, Int_t nc, Int_t first, Int_t eoffset). » Author: Rene Brun 12/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/io:$Id: TStreamerInfo.h 41102 2011-10-03 21:42:02Z pcanal $ » Last generated: 2011-12-02 14:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TStreamerInfo.html:27050,checksum,checksum,27050,root/html532/TStreamerInfo.html,https://root.cern,https://root.cern/root/html532/TStreamerInfo.html,2,['checksum'],['checksum']
Security,"?. { return fNormalise; }. void SetNormalised(Bool_t norm); { fNormalise = norm; }. Bool_t Verbose() const; set number of input variables (only used by MethodCuts, could perhaps be removed); void SetNvar( Int_t n ) { fNvar = n; }; verbose and help flags. { return fVerbose; }. Bool_t Help() const; { return fHelp; }. const TString& GetInternalVarName(Int_t ivar) const; ---------- protected event and tree accessors -----------------------------; names of input variables (if the original names are expressions, they are; transformed into regexps). { return (*fInputVars)[ivar]; }. const TString& GetOriginalVarName(Int_t ivar) const; { return DataInfo().GetVariableInfo(ivar).GetExpression(); }. Bool_t HasTrainingTree() const; { return Data()->GetNTrainingEvents() != 0; }. void MakeClassSpecific(ostream& , const TString& = """") const; ---------- protected auxiliary methods ------------------------------------; make ROOT-independent C++ class for classifier response (classifier-specific implementation). {}. void MakeClassSpecificHeader(ostream& , const TString& = """") const; header and auxiliary classes. {}. Bool_t TxtWeightsOnly() const; if TRUE, write weights only to text files. { return kTRUE; }. Float_t GetTWeight(const TMVA::Event* ev) const; access to event information that needs method-specific information. Bool_t IsConstructedFromWeightFile() const; { return fConstructedFromWeightFile; }. void SetCurrentEvent(Long64_t ievt) const. Data(). ECutOrientation GetCutOrientation() const; { return fCutOrientation; }. Bool_t IgnoreEventsWithNegWeightsInTraining() const; { return fIgnoreNegWeightsInTraining; }. » Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: MethodBase.h 36966 2010-11-26 09:50:13Z evt $ » Last generated: 2010-12-08 16:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodBase.html:35362,access,access,35362,root/html528/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodBase.html,1,['access'],['access']
Security,"A Simple Fitting Example"");; bar.AddButton(""draw2dopt"", "".x hist/draw2dopt.C"",; ""Drawing Options for 2D Histograms"");; bar.AddButton(""graph"", "".x graphs/graph.C"",; ""Examples of a simple graph"");; bar.AddButton(""tornado"", "".x graphics/tornado.C"",; ""Examples of 3-D PolyMarkers"");; bar.AddButton(""shapes"", "".x geom/shapes.C"",; ""The Geometry Shapes"");; bar.AddButton(""file_layout"", "".x io/file.C"",; ""The ROOT file format"");; bar.AddButton(""tree_layout"", "".x tree/tree.C"",; ""The Tree Data Structure"");; bar.AddButton(""ntuple1"", "".x tree/ntuple1.C"",; ""Ntuples and Selections"");; bar.AddButton(""run benchmarks"", "".x legacy/benchmarks.C"",; ""Runs all the ROOT benchmarks"");; bar.AddButton(""rootmarks"", "".x legacy/rootmarks.C"",; ""Prints an estimated ROOTMARKS for your machine"");; bar.AddButton(""edit_hsimple"", "".!vi hsimple.C &"",; ""Invokes the text editor on file hsimple.C"");; bar.AddButton(""Close Bar"", ""bar.Hide()"",; ""Close ControlBar"");; bar.Show();; }; TControlBarA Control Bar is a fully user configurable tool which provides fast access to frequently used operati...Definition TControlBar.h:26; . Definition at line 26 of file TControlBar.h. Public Types; enum  { kVertical = 1; , kHorizontal = 2; };  ;  Public Types inherited from TControlBarButton; enum  { kButton = 1; , kDrawnButton; , kSeparator; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TControlBar ();  Default cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTControlBar.html:2754,access,access,2754,doc/master/classTControlBar.html,https://root.cern,https://root.cern/doc/master/classTControlBar.html,1,['access'],['access']
Security,"A TTree object has a header with a name and a title ;  CTClusterIteratorHelper class to iterate over cluster of baskets ;  CTFriendLockHelper class to prevent infinite recursion in the usage of TTree Friends ;  ►CTTreeCache;  CIOPos;  ►CMissCache;  CEntry;  ►CTTreeCacheUnzipSpecialization of TTreeCache for parallel Unzipping ;  CUnzipState;  ►CTTreeClonerClass implementing or helping the various TTree cloning method ;  CCompareEntry;  CCompareSeek;  CTTreeDrawArgsParserA class that parses all parameters for TTree::Draw() ;  ►CTTreeFormulaUsed to pass a selection expression to the Tree drawing routine ;  CRealInstanceCache;  CTTreeFormulaManagerUsed to coordinate one or more TTreeFormula objects ;  CTTreeFriendLeafIterIterator on all the leaves in a TTree and its friend ;  CTTreeIndexA Tree Index with majorname and minorname ;  CTTreeInput;  ►CTTreePerfStatsTTree I/O performance measurement ;  CBasketInfo;  CTTreePlayerImplement some of the functionality of the class TTree requiring access to extra libraries (Histogram, display, etc) ;  ►CTTreeReaderA simple, robust and fast interface to read values from ROOT colmnar datasets such as TTree, TChain or TNtuple ;  CIterator_tIterate through the entries of a TTree ;  ►CTTreeReaderArrayAn interface for reading collections stored in ROOT columnar datasets ;  CIterator_tRandom access iterator to the elements of a TTreeReaderArray ;  CTTreeReaderValueAn interface for reading values stored in ROOT columnar datasets ;  CTTreeResultClass defining interface to a TTree query result with the same interface as for SQL databases ;  CTTreeRowClass defining interface to a row of a TTree query result ;  CTTreeSQLImplement TTree for a SQL backend ;  CTTreeTableInterfaceTTreeTableInterface is used to interface to data that is stored in a TTree ;  CTTreeViewA helper class that encapsulates a file and a tree ;  CTTreeViewerA graphic user interface designed to handle ROOT trees and to take advantage of TTree class features ;  CTTUBEA tube ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:217343,access,access,217343,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,1,['access'],['access']
Security,"A function is reentrant if it will behave correctly even if a thread of execution enters the function while one or more threads are already executing within the function. These could be the same thread, in the case of recursion, or different threads, in the case of concurrency.; Thread-specific data (TSD) is also known as thread-local storage (TLS). Normally, any data that has lifetime beyond the local variables on the thread’s private stack are shared among all threads within the process. Thread-specific data is a form of static or global data that is maintained on a per-thread basis. That is, each thread gets its own private copy of the data.; Left to their own devices, threads execute independently. Synchronization is the work that must be done when there are, in fact, interdependencies that require some form of communication among threads. Synchronization tools include mutexes, semaphores, condition variables, and other variations on locking.; A critical section is a section of code that accesses a non-sharable resource. To ensure correct code, only one thread at a time may execute in a critical section. In other words, the section is not reentrant.; A mutex, or mutual exclusion lock, is a synchronization object with two states locked and unlocked. A mutex is usually used to ensure that only one thread at a time executes some critical section of code. Before entering a critical section, a thread will attempt to lock the mutex, which guards that section. If the mutex is already locked, the thread will block until the mutex is unlocked, at which time it will lock the mutex, execute the critical section, and unlock the mutex upon leaving the critical section.; A semaphore is a synchronization mechanism that starts out initialized to some positive value. A thread may ask to wait on a semaphore in which case the thread blocks until the value of the semaphore is positive. At that time the semaphore count is decremented and the thread continues. When a thread releases ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1121313,access,accesses,1121313,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['access'],['accesses']
Security,"A. const std::vector< Float_t >& EvaluateMulticlass(const TString& methodTag, Double_t aux = 0); evaluates MVA for given set of input variables. const std::vector< Float_t >& EvaluateMulticlass(TMVA::MethodBase* method, Double_t aux = 0); evaluates the multiclass MVA. Float_t EvaluateMulticlass(UInt_t clsNumber, const TString& methodTag, Double_t aux = 0); evaluates the multiclass MVA. TMVA::IMethod* FindMVA(const TString& methodTag); return pointer to method with tag ""methodTag"". TMVA::MethodCuts* FindCutsMVA(const TString& methodTag); special function for Cuts to avoid dynamic_casts in ROOT macros,; which are not properly handled by CINT. Double_t GetProba(const TString& methodTag, Double_t ap_sig = 0.5, Double_t mvaVal = -9999999); evaluates probability of MVA for given set of input variables. Double_t GetRarity(const TString& methodTag, Double_t mvaVal = -9999999); evaluates the MVA's rarity. void DecodeVarNames( const std::string& varNames ); decodes ""name1:name2:..."" form. void DecodeVarNames(const TString& varNames); decodes ""name1:name2:..."" form. Double_t GetMVAError() const; returns error on MVA response for given event; NOTE: must be called AFTER ""EvaluateMVA(...)"" call !. { return fMvaEventError; }. Double_t GetMVAErrorLower() const; { return fMvaEventError; }. Double_t GetMVAErrorUpper() const; { return fMvaEventErrorUpper; }. const char* GetName() const; accessors. { return ""Reader""; }. Bool_t Verbose( void ); { return fVerbose; }. void SetVerbose(Bool_t v); { fVerbose = v; }. const DataSetInfo& DataInfo() const; { return fDataSetInfo; }. DataSetInfo& DataInfo(); { return fDataSetInfo; }. » Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: Reader.h 36966 2010-11-26 09:50:13Z evt $ » Last generated: 2010-11-26 16:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Reader.html:14847,access,accessors,14847,root/html528/TMVA__Reader.html,https://root.cern,https://root.cern/root/html528/TMVA__Reader.html,1,['access'],['accessors']
Security,"A::IntervalTMVA::Interval::Interval(const TMVA::Interval& other); TMVA::IntervalTMVA::Interval::Interval(Double_t min, Double_t max, Int_t nbins = 0); virtual TClass*IsA() const; TMVA::MsgLogger&Log() const; TMVA::LogIntervalLogInterval(const TMVA::LogInterval& other); TMVA::LogIntervalLogInterval(Double_t min, Double_t max, Int_t nbins = 0); TMVA::LogInterval&operator=(const TMVA::LogInterval&); virtual voidTMVA::Interval::Print(ostream& os) const; voidSetMax(Double_t m); voidSetMin(Double_t m); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. Double_tTMVA::Interval::fMaxthe constraints of the Interval; Double_tTMVA::Interval::fMinthe constraints of the Interval; Int_tTMVA::Interval::fNbinswhen >0 : number of bins (discrete interval); when ==0 continuous interval. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LogInterval(Double_t min, Double_t max, Int_t nbins = 0). LogInterval(const TMVA::LogInterval& other). ~LogInterval(); destructor. Double_t GetElement(Int_t position) const; calculates the value of the ""number"" bin in a discrete interval.; Parameters:; Double_t position. Double_t GetStepSize(Int_t iBin = 0) const; retuns the step size between the numbers of a ""discrete LogInterval"". Double_t GetRndm(TRandom3& ) const; get uniformely distributed number within interval. Double_t GetWidth() const. Double_t GetMean() const. TMVA::MsgLogger& Log() const. Double_t GetMin() const; accessors. { return fMin; }. Double_t GetMax() const; { return fMax; }. Int_t GetNbins() const; { return fNbins; }. void SetMax(Double_t m); { fMax = m; }. void SetMin(Double_t m); { fMin = m; }. » Last changed: Tue Jun 30 15:15:51 2015 » Last generated: 2015-06-30 15:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__LogInterval.html:2274,access,accessors,2274,root/html602/TMVA__LogInterval.html,https://root.cern,https://root.cern/root/html602/TMVA__LogInterval.html,1,['access'],['accessors']
Security,"ALSE;; 876 ; 877 } else if (fClass->IsLoaded() /* implied: && fClass->IsForeign() */ ) {; 878 // We are in the case of a Foreign class with no specified; 879 // class version.; 880 ; 881 searchOnChecksum = kTRUE;; 882 ; 883 }; 884 else {; 885 // We are in the case of an 'emulated' class.; 886 ; 887 if (fOnFileClassVersion >= 2 && !isStdPair) {; 888 // The class version was specified when the object was; 889 // written; 890 ; 891 searchOnChecksum = kFALSE;; 892 ; 893 } else {; 894 // The class version was not specified when the object was; 895 // written OR it was specified to be 1.; 896 ; 897 searchOnChecksum = kTRUE;; 898 ; 899 TStreamerInfo* v1 = (TStreamerInfo*) array->At(1);; 900 if (v1) {; 901 if (fCheckSum != v1->GetCheckSum()) {; 902 fClassVersion = array->GetLast() + 1;; 903 }; 904 }; 905 }; 906 }; 907 ; 908 if (!searchOnChecksum) {; 909 if (fClassVersion < (array->GetEntriesFast() - 1)) {; 910 info = (TStreamerInfo*) array->At(fClassVersion);; 911 }; 912 } else {; 913 Int_t ninfos = array->GetEntriesFast() - 1;; 914 for (Int_t i = -1; i < ninfos; ++i) {; 915 info = (TStreamerInfo*) array->UncheckedAt(i);; 916 if (!info) {; 917 continue;; 918 }; 919 if (fCheckSum == info->GetCheckSum() && (info->GetOnFileClassVersion()==1 || info->GetOnFileClassVersion()==0)) {; 920 // We must match on the same checksum, an existing TStreamerInfo; 921 // for one of the 'unversioned' class layout (i.e. version was 1).; 922 fClassVersion = i;; 923 break;; 924 }; 925 info = 0;; 926 }; 927 if (info==0) {; 928 // Find an empty slot.; 929 ninfos = array->GetEntriesFast() - 1;; 930 Int_t slot = 1; // Start of Class version 1.; 931 while ((slot < ninfos) && (array->UncheckedAt(slot) != 0)) {; 932 ++slot;; 933 }; 934 fClassVersion = slot;; 935 }; 936 }; 937 ; 938 // NOTE: Should we check if the already existing info is the same as; 939 // the current one? Yes; 940 // In case a class (eg Event.h) has a TClonesArray of Tracks, it could be; 941 // that the old info does not have the clas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:33581,checksum,checksum,33581,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['checksum'],['checksum']
Security,"AMP; static TSQLServer::ESQLDataTypeskSQL_VARCHAR; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringfDBcurrently selected DB; Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output; TStringfHosthost to which we are connected; Int_tfPortport to which we are connected; TStringfTypetype of DBMS (MySQL, Oracle, SysBase, ...); static const char*fgFloatFmt! printf argument for floats and doubles, either ""%f"" or ""%e"" or ""%10f"" and so on. Class Charts. Inheritance Chart:. TObject. ←; TSQLServer. ←. TMySQLServer. Function documentation; TSQLServer * Connect(const char* db, const char* uid, const char* pw); The db should be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if successful. Bool_t Commit(); subm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSQLServer.html:9170,password,password,9170,root/html602/TSQLServer.html,https://root.cern,https://root.cern/root/html602/TSQLServer.html,2,['password'],['password']
Security,"ARNING: landau and landaun are mutually exclusive in the same expression. Boolean optimization (kBoolOptmize) :; Those pseudo operation are used to implement lazy evaluation of && and ||. When the left hand of the expression if false (respectively true), the evaluation of the right is entirely skipped (since it would not change the value of the expression).; && 142 11 (one operation on right) 142 21 (2 operations on right) || 142 12 (one operation on right) 142 22 (2 operations on right). functions calls (kFunctionCall) :; f0 145 0 f1 145 1 etc.. Errors :; 1 : Division By Zero; 2 : Invalid Floating Point Operation; 4 : Empty String; 5 : invalid syntax; 6 : Too many operators; 7 : Too many parameters; 10 : z specified but not x and y; 11 : z and y specified but not x; 12 : y specified but not x; 13 : z and x specified but not y; 20 : non integer value for parameter number; 21 : atan2 requires two arguments; 22 : pow requires two arguments; 23 : degree of polynomial not specified; 24 : Degree of polynomial must be positive; 25 : Degree of polynomial must be less than 20; 26 : Unknown name; 27 : Too many constants in expression; 28 : strstr requires two arguments; 29 : interpreted or compiled function have to return a numerical type; 30 : Bad numerical expression; 31 : Part of the variable exist but some of it is not accessible or useable; 40 : '(' is expected; 41 : ')' is expected; 42 : '[' is expected; 43 : ']' is expected; . Special functions; By default, the formula is assigned fNumber=0. However, the following formula built with simple functions are assigned fNumber: ""gaus"" 100 (or gausn); ""xygaus"" 110; ""expo"" 200; ""polN"" 300+N; ""landau"" 400; ""xylandau"" 410; Note that expressions like gaus(0), expo(1) will force fNumber=0. Warning when deriving a class from TFormula; If you overload this member function, you also HAVE TO never call the constructor:; TFormula::TFormula(const char *name,const char *expression); namechar name[80]Definition TGX11.cxx:110; ROOT::v5::TF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html:29138,access,accessible,29138,doc/master/classROOT_1_1v5_1_1TFormula.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html,1,['access'],['accessible']
Security,"ARNINGS /* Disable deprecation warning in VS2005 */; 51#endif; 52#if !defined(_WIN32_WINNT) /* defined for tdm-gcc so we can use getnameinfo */; 53#define _WIN32_WINNT 0x0502; 54#endif; 55#else; 56#if !defined(_GNU_SOURCE); 57#define _GNU_SOURCE /* for setgroups(), pthread_setname_np() */; 58#endif; 59#if defined(__linux__) && !defined(_XOPEN_SOURCE); 60#define _XOPEN_SOURCE 600 /* For flockfile() on Linux */; 61#endif; 62#if defined(__LSB_VERSION__) || defined(__sun); 63#define NEED_TIMEGM; 64#define NO_THREAD_NAME; 65#endif; 66#if !defined(_LARGEFILE_SOURCE); 67#define _LARGEFILE_SOURCE /* For fseeko(), ftello() */; 68#endif; 69#if !defined(_FILE_OFFSET_BITS); 70#define _FILE_OFFSET_BITS 64 /* Use 64-bit file offsets by default */; 71#endif; 72#if !defined(__STDC_FORMAT_MACROS); 73#define __STDC_FORMAT_MACROS /* <inttypes.h> wants this for C++ */; 74#endif; 75#if !defined(__STDC_LIMIT_MACROS); 76#define __STDC_LIMIT_MACROS /* C++ wants that for INT64_MAX */; 77#endif; 78#if !defined(_DARWIN_UNLIMITED_SELECT); 79#define _DARWIN_UNLIMITED_SELECT; 80#endif; 81#if defined(__sun); 82#define __EXTENSIONS__ /* to expose flockfile and friends in stdio.h */; 83#define __inline inline /* not recognized on older compiler versions */; 84#endif; 85#endif; 86 ; 87#if defined(__clang__); 88/* Enable reserved-id-macro warning again. */; 89#pragma GCC diagnostic pop; 90#endif; 91 ; 92 ; 93#if defined(USE_LUA); 94#define USE_TIMERS; 95#endif; 96 ; 97#if defined(_MSC_VER); 98/* 'type cast' : conversion from 'int' to 'HANDLE' of greater size */; 99#pragma warning(disable : 4306); 100/* conditional expression is constant: introduced by FD_SET(..) */; 101#pragma warning(disable : 4127); 102/* non-constant aggregate initializer: issued due to missing C99 support */; 103#pragma warning(disable : 4204); 104/* padding added after data member */; 105#pragma warning(disable : 4820); 106/* not defined as a preprocessor macro, replacing with '0' for '#if/#elif' */; 107#pragma warning(disable :",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:3527,expose,expose,3527,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,2,['expose'],['expose']
Security,"AX];; 8672 struct vec uri_vec, filename_vec;; 8673 const char *list;; 8674 struct mg_file file = STRUCT_FILE_INITIALIZER;; 8675 int authorized = 1, truncated;; 8676 ; 8677 if (!conn || !conn->dom_ctx) {; 8678 return 0;; 8679 }; 8680 ; 8681 list = conn->dom_ctx->config[PROTECT_URI];; 8682 while ((list = next_option(list, &uri_vec, &filename_vec)) != NULL) {; 8683 if (!memcmp(conn->request_info.local_uri, uri_vec.ptr, uri_vec.len)) {; 8684 mg_snprintf(conn,; 8685 &truncated,; 8686 fname,; 8687 sizeof(fname),; 8688 ""%.*s"",; 8689 (int)filename_vec.len,; 8690 filename_vec.ptr);; 8691 ; 8692 if (truncated; 8693 || !mg_fopen(conn, fname, MG_FOPEN_MODE_READ, &file)) {; 8694 mg_cry_internal(conn,; 8695 ""%s: cannot open %s: %s"",; 8696 __func__,; 8697 fname,; 8698 strerror(errno));; 8699 }; 8700 break;; 8701 }; 8702 }; 8703 ; 8704 if (!is_file_opened(&file.access)) {; 8705 open_auth_file(conn, path, &file);; 8706 }; 8707 ; 8708 if (is_file_opened(&file.access)) {; 8709 authorized = authorize(conn, &file, NULL);; 8710 (void)mg_fclose(&file.access); /* ignore error on read only file */; 8711 }; 8712 ; 8713 return authorized;; 8714#else; 8715 (void)conn;; 8716 (void)path;; 8717 return 1;; 8718#endif /* NO_FILESYSTEMS */; 8719}; 8720 ; 8721 ; 8722/* Internal function. Assumes conn is valid */; 8723static void; 8724send_authorization_request(struct mg_connection *conn, const char *realm); 8725{; 8726 uint64_t nonce = (uint64_t)(conn->phys_ctx->start_time);; 8727 int trunc = 0;; 8728 char buf[128];; 8729 ; 8730 if (!realm) {; 8731 realm = conn->dom_ctx->config[AUTHENTICATION_DOMAIN];; 8732 }; 8733 ; 8734 mg_lock_context(conn->phys_ctx);; 8735 nonce += conn->dom_ctx->nonce_count;; 8736 ++conn->dom_ctx->nonce_count;; 8737 mg_unlock_context(conn->phys_ctx);; 8738 ; 8739 nonce ^= conn->dom_ctx->auth_nonce_mask;; 8740 conn->must_close = 1;; 8741 ; 8742 /* Create 401 response */; 8743 mg_response_header_start(conn, 401);; 8744 send_no_cache_header(conn);; 8745 send_additional_header(conn)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:250901,access,access,250901,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,3,"['access', 'authoriz']","['access', 'authorize', 'authorized']"
Security,"AX];; 8673 struct vec uri_vec, filename_vec;; 8674 const char *list;; 8675 struct mg_file file = STRUCT_FILE_INITIALIZER;; 8676 int authorized = 1, truncated;; 8677 ; 8678 if (!conn || !conn->dom_ctx) {; 8679 return 0;; 8680 }; 8681 ; 8682 list = conn->dom_ctx->config[PROTECT_URI];; 8683 while ((list = next_option(list, &uri_vec, &filename_vec)) != NULL) {; 8684 if (!memcmp(conn->request_info.local_uri, uri_vec.ptr, uri_vec.len)) {; 8685 mg_snprintf(conn,; 8686 &truncated,; 8687 fname,; 8688 sizeof(fname),; 8689 ""%.*s"",; 8690 (int)filename_vec.len,; 8691 filename_vec.ptr);; 8692 ; 8693 if (truncated; 8694 || !mg_fopen(conn, fname, MG_FOPEN_MODE_READ, &file)) {; 8695 mg_cry_internal(conn,; 8696 ""%s: cannot open %s: %s"",; 8697 __func__,; 8698 fname,; 8699 strerror(errno));; 8700 }; 8701 break;; 8702 }; 8703 }; 8704 ; 8705 if (!is_file_opened(&file.access)) {; 8706 open_auth_file(conn, path, &file);; 8707 }; 8708 ; 8709 if (is_file_opened(&file.access)) {; 8710 authorized = authorize(conn, &file, NULL);; 8711 (void)mg_fclose(&file.access); /* ignore error on read only file */; 8712 }; 8713 ; 8714 return authorized;; 8715#else; 8716 (void)conn;; 8717 (void)path;; 8718 return 1;; 8719#endif /* NO_FILESYSTEMS */; 8720}; 8721 ; 8722 ; 8723/* Internal function. Assumes conn is valid */; 8724static void; 8725send_authorization_request(struct mg_connection *conn, const char *realm); 8726{; 8727 uint64_t nonce = (uint64_t)(conn->phys_ctx->start_time);; 8728 int trunc = 0;; 8729 char buf[128];; 8730 ; 8731 if (!realm) {; 8732 realm = conn->dom_ctx->config[AUTHENTICATION_DOMAIN];; 8733 }; 8734 ; 8735 mg_lock_context(conn->phys_ctx);; 8736 nonce += conn->dom_ctx->nonce_count;; 8737 ++conn->dom_ctx->nonce_count;; 8738 mg_unlock_context(conn->phys_ctx);; 8739 ; 8740 nonce ^= conn->dom_ctx->auth_nonce_mask;; 8741 conn->must_close = 1;; 8742 ; 8743 /* Create 401 response */; 8744 mg_response_header_start(conn, 401);; 8745 send_no_cache_header(conn);; 8746 send_additional_header(conn)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:250933,access,access,250933,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,3,"['access', 'authoriz']","['access', 'authorize', 'authorized']"
Security,"AbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; RooListProxy_list; TIterator*_listIter! do not persist; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRecursiveFraction.html:33314,access,access,33314,root/html534/RooRecursiveFraction.html,https://root.cern,https://root.cern/root/html534/RooRecursiveFraction.html,1,['access'],['access']
Security,"AbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgrThe cache manager ; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_t_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCachedPdf.html:40261,access,access,40261,root/html532/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsCachedPdf.html,1,['access'],['access']
Security,AbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAICRegistryRooAbsAnaConvPdf::_codeReg! Registry of analytical integration codes; RooObjCacheManagerRooAbsAnaConvPdf::_coefNormMgrCoefficient normalization manager; RooArgSet*RooAbsAnaConvPdf::_convNormSet! Subset of last normalization that applies to convolutions; RooListProxyRooAbsAnaConvPdf::_convSetSet of (resModel (x) basisFunc) convolution objects; TIterator*RooAbsAnaConvPdf::_convSetIter! Iterator over _convNormSet; RooRealProxyRooAbsAnaConvPdf::_convVarConvolution variable; RooRealProxy_correctQ; RooRealProxy_delC; RooRealProxy_delS; RooRealProxy_delW; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooRealProxy_dm; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; Double_t_genB0Frac; Double_t_genRhoPlusFrac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; Bool_tRooAbsAnaConvPdf::_isCopy; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealProxyRooAbsAnaConvPdf::_modelOriginal model; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNonCPEigenDecay.html:44858,access,access,44858,root/html602/RooNonCPEigenDecay.html,https://root.cern,https://root.cern/root/html602/RooNonCPEigenDecay.html,2,['access'],['access']
Security,"AbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooChangeTracker(); Deault constructor. RooChangeTracker(const char* name, const char* title, const RooArgSet& trackSet, Bool_t checkValues = kFALSE); Constructor. The set trackSet contains the observables to be; tracked for changes. If checkValues is true an additional; validation step is activated where the numeric values of the; tracked arguments are compared with reference values ensuring; that values have actually changed. RooChangeTracker(const RooChangeTracker& other, const char* name = 0); Copy constructor. Bool_t hasChanged(Bool_t clearState); Returns true if state has changes since last call with clearState=kTRUE; If clearState is true, changeState flag will be cleared. ~RooChangeTracker(); Destructor. RooArgSet parameters() const. TObject* clone(const char* newname) const; { return new RooChangeTracker(*this, newname); }. Double_t evaluate() const; { return 1 ; }. » Last changed: Thu Sep 23 19:59:14 2010 » Last generated: 2010-09-23 19:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooChangeTracker.html:33684,validat,validation,33684,root/html528/RooChangeTracker.html,https://root.cern,https://root.cern/root/html528/RooChangeTracker.html,1,['validat'],['validation']
Security,"AbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooChangeTracker(); Default constructor. RooChangeTracker(const char* name, const char* title, const RooArgSet& trackSet, Bool_t checkValues = kFALSE); Constructor. The set trackSet contains the observables to be; tracked for changes. If checkValues is true an additional; validation step is activated where the numeric values of the; tracked arguments are compared with reference values ensuring; that values have actually changed. RooChangeTracker(const RooChangeTracker& other, const char* name = 0); Copy constructor. Bool_t hasChanged(Bool_t clearState); Returns true if state has changes since last call with clearState=kTRUE; If clearState is true, changeState flag will be cleared. ~RooChangeTracker(); Destructor. RooArgSet parameters() const. TObject* clone(const char* newname) const; { return new RooChangeTracker(*this, newname); }. Double_t evaluate() const; { return 1 ; }. » Last changed: Mon Jul 4 15:22:26 2011 » Last generated: 2011-07-04 15:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooChangeTracker.html:34202,validat,validation,34202,root/html530/RooChangeTracker.html,https://root.cern,https://root.cern/root/html530/RooChangeTracker.html,1,['validat'],['validation']
Security,"AbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooChangeTracker(); Default constructor. RooChangeTracker(const char* name, const char* title, const RooArgSet& trackSet, Bool_t checkValues = kFALSE); Constructor. The set trackSet contains the observables to be; tracked for changes. If checkValues is true an additional; validation step is activated where the numeric values of the; tracked arguments are compared with reference values ensuring; that values have actually changed. RooChangeTracker(const RooChangeTracker& other, const char* name = 0); Copy constructor. Bool_t hasChanged(Bool_t clearState); Returns true if state has changes since last call with clearState=kTRUE; If clearState is true, changeState flag will be cleared. ~RooChangeTracker(); Destructor. RooArgSet parameters() const. TObject* clone(const char* newname) const; { return new RooChangeTracker(*this, newname); }. Double_t evaluate() const; { return 1 ; }. » Last changed: Thu Nov 3 20:07:44 2011 » Last generated: 2011-11-03 20:07; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooChangeTracker.html:34581,validat,validation,34581,root/html532/RooChangeTracker.html,https://root.cern,https://root.cern/root/html532/RooChangeTracker.html,1,['validat'],['validation']
Security,AbsCache*>RooAbsArg::_cacheListlist of caches; Bool_t_cdfBoundariesUse boundary conditions for CDFs.; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistry_codeReg! Auxiliary class keeping tracking of analytical integration code; RooDataHist*_dataHistUnowned pointer to underlying histogram; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; TIterator*_histObsIter! ; RooArgSet_histObsListList of observables defining dimensions of histogram; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_t_intOrderInterpolation order; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; Int_tRooAbsPdf::_negCountNumber of ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooHistPdf.html:39164,access,access,39164,root/html532/RooHistPdf.html,https://root.cern,https://root.cern/root/html532/RooHistPdf.html,1,['access'],['access']
Security,"AbsCollection&, Bool_t, Bool_t, Bool_t); voidRooCacheManager<RooAbsCacheElement>::reset(); Int_tRooCacheManager<RooAbsCacheElement>::setObj(const RooArgSet* nset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Int_tRooCacheManager<RooAbsCacheElement>::setObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); virtual voidShowMembers(TMemberInspector& insp); virtual voidsterilize(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidRooCacheManager<RooAbsCacheElement>::wireCache(). Data Members; protected:. static Bool_t_clearObsListClear obslist on sterilize?; Bool_t_clearOnRedirect; Int_tRooCacheManager<RooAbsCacheElement>::_lastIndexLast slot accessed; Int_tRooCacheManager<RooAbsCacheElement>::_maxSizeMaximum size; RooNormSetCache*RooCacheManager<RooAbsCacheElement>::_nsetCache! Normalization/Integration set manager; RooAbsCacheElement**RooCacheManager<RooAbsCacheElement>::_object! Payload; Bool_t_optCacheModeSeen! ; list<RooArgSet*>_optCacheObsList! list of all optCacheObservables owned; RooArgSet*_optCacheObservables! current optCacheObservables ; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_tRooCacheManager<RooAbsCacheElement>::_sizeActual use; Bool_tRooCacheManager<RooAbsCacheElement>::_wired! In wired mode, there is a single payload which is returned always. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooObjCacheManager(RooAbsArg* owner = 0, Int_t maxSize = 10, Bool_t clearCacheOnServerRedirect = kTRUE); Constructor of object cache manager for given owner. If clearCacheOnServerRedirect is true; all cache elements will be cleared when a server redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cycl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooObjCacheManager.html:3241,access,accessed,3241,root/html532/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html532/RooObjCacheManager.html,1,['access'],['accessed']
Security,"AbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAbsHiddenReal(const char* name, const char* title, const char* unit = """"); Constructor. RooAbsHiddenReal(const char* name, const char* title, RooAbsCategory& blindState, const char* unit = """"); Constructor. RooAbsHiddenReal(const RooAbsHiddenReal& other, const char* name = 0); Copy constructor. ~RooAbsHiddenReal(); Destructor. void printValue(ostream& stream) const; Special version of printValue that doesn't reveal the objects value. Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); Special version of readFromStream that disallows reading from stream. void writeToStream(ostream& os, Bool_t compact) const; Special version of writeToStream that disallows reading from stream. RooAbsCategory& dummyBlindState() const; Return reference to internal dummy RooCategory implementation; blinding state switch. inline RooAbsHiddenReal(); Constructors, assignment etc. Bool_t isHidden() const; If true, hiding mode is active. Double_t getHiddenVal(const RooArgSet* nset = 0) const; Bypass accessor to function value that also works in hidden mode. Double_t getValV(const RooArgSet* nset = 0) const; This is dubious from a C++ point of view, but it blocks the interactive user; from accidentally calling getVal() without explicit cast, which is the whole; point of this class. » Last changed: Tue Jun 30 14:30:08 2015 » Last generated: 2015-06-30 14:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsHiddenReal.html:38756,access,accessor,38756,root/html602/RooAbsHiddenReal.html,https://root.cern,https://root.cern/root/html602/RooAbsHiddenReal.html,1,['access'],['accessor']
Security,"AclicModeWhether the compilation should be done debug or opt; Int_tfAclicPropertiesVarious boolean flag for change ACLiC's behavior.; Int_tfBeepDurationUsed by Beep(); Int_tfBeepFreqUsed by Beep(); TStringfBuildArchArchitecure for which ROOT was built (passed to ./configure); TStringfBuildCompilerCompiler used to build this ROOT; TStringfBuildCompilerVersionCompiler version used to build this ROOT; TStringfBuildDirLocation where to build ACLiC shared library and use as scratch area.; TStringfBuildNodeDetailed information where ROOT was built; TSeqCollection*fCompiledList of shared libs from compiled macros to be deleted; Bool_tfDoneTrue if eventloop should be finished; TSeqCollection*fFileHandlerList of file handlers; TStringfFlagsDebugFlags for debug compilation; TStringfFlagsOptFlags for optimized compilation; TSeqCollection*fHelpersList of helper classes for alternative file/directory access; TStringfHostnameHostname; Bool_tfInControlTrue if in eventloop; TStringfIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tfInsideNotifyUsed by DispatchTimers(); Int_tfLevelLevel of nested eventloops; TStringfLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EACLiCProperties); TStringfLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringfListLibsList shared libraries, cache used by GetLibraries; TStringfListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringfMakeExeDirective used to build an executable; TStringfMakeSharedLibDirective used to build a shared library; Int_tfMaxrfdLargest fd in read mask; Int_tfMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tfNfdNumber of fd's in masks; TStringfObjExtExtension of object files (.o, .obj, etc.); TSeqCollection*fOnExitListList of items to be cleaned-up on exit; TFdSet*fReadmask!Files that should be checked for read events; TFdS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSystem.html:15913,access,access,15913,root/html534/TSystem.html,https://root.cern,https://root.cern/root/html534/TSystem.html,3,['access'],['access']
Security,"Actions::TActionSequence& sequence, void* start_collection, void* end_collection); Read one collection of objects from the buffer using the StreamerInfoLoopAction.; The collection needs to be a split TClonesArray or a split vector of pointers. Int_t ApplySequence(const TStreamerInfoActions::TActionSequence& sequence, void* start_collection, void* end_collection); Read one collection of objects from the buffer using the StreamerInfoLoopAction. void SetGlobalReadParam(Int_t mapsize); Set the initial size of the map used to store object and class; references during reading. The default size is kMapSize=503.; Increasing the default has the benefit that when reading many; small objects the array does not need to be resized too often; (the system is always dynamic, even with the default everything; will work, only the initial resizing will cost some time).; Per TBuffer object this option can be changed using SetReadParam(). void SetGlobalWriteParam(Int_t mapsize); Set the initial size of the hashtable used to store object and class; references during writing. The default size is kMapSize=503.; Increasing the default has the benefit that when writing many; small objects the hashtable does not get too many collisions; (the system is always dynamic, even with the default everything; will work, only a large number of collisions will cost performance).; For optimal performance hashsize should always be a prime.; Per TBuffer object this option can be changed using SetWriteParam(). Int_t GetGlobalReadParam(); Get default read map size. Int_t GetGlobalWriteParam(); Get default write map size. void WriteBool(Bool_t b). void WriteChar(Char_t c). void WriteUChar(UChar_t c). void WriteShort(Short_t h). void WriteUShort(UShort_t h). void WriteInt(Int_t i). void WriteUInt(UInt_t i). void WriteLong(Long_t l). void WriteULong(ULong_t l). void WriteLong64(Long64_t ll). void WriteULong64(ULong64_t ll). void WriteFloat(Float_t f). void WriteDouble(Double_t d). void WriteCharP(const Char_t* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TBufferFile.html:47103,hash,hashtable,47103,root/html532/TBufferFile.html,https://root.cern,https://root.cern/root/html532/TBufferFile.html,2,['hash'],['hashtable']
Security,"Actions::TActionSequence& sequence, void* start_collection, void* end_collection); Read one collection of objects from the buffer using the StreamerInfoLoopAction.; The collection needs to be a split TClonesArray or a split vector of pointers. Int_t ApplySequence(const TStreamerInfoActions::TActionSequence& sequence, void* start_collection, void* end_collection); Read one collection of objects from the buffer using the StreamerInfoLoopAction. void SetGlobalReadParam(Int_t mapsize); Set the initial size of the map used to store object and class; references during reading. The default size is kMapSize=503.; Increasing the default has the benefit that when reading many; small objects the array does not need to be resized too often; (the system is always dynamic, even with the default everything; will work, only the initial resizing will cost some time).; Per TBuffer object this option can be changed using SetReadParam(). void SetGlobalWriteParam(Int_t mapsize); Set the initial size of the hashtable used to store object and class; references during writing. The default size is kMapSize=503.; Increasing the default has the benefit that when writing many; small objects the hashtable does not get too many collisions; (the system is always dynamic, even with the default everything; will work, only a large number of collisions will cost performance).; For optimal performance hashsize should always be a prime.; Per TBuffer object this option can be changed using SetWriteParam(). Int_t GetGlobalReadParam(); Get default read map size. Int_t GetGlobalWriteParam(); Get default write map size. void WriteBool(Bool_t b). void WriteChar(Char_t c). void WriteUChar(UChar_t c). void WriteShort(Short_t s). void WriteUShort(UShort_t s). void WriteInt(Int_t i). void WriteUInt(UInt_t i). void WriteLong(Long_t l). void WriteULong(ULong_t l). void WriteLong64(Long64_t l). void WriteULong64(ULong64_t l). void WriteFloat(Float_t f). void WriteDouble(Double_t d). void WriteCharP(const Char_t* c)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBufferFile.html:49405,hash,hashtable,49405,root/html602/TBufferFile.html,https://root.cern,https://root.cern/root/html602/TBufferFile.html,2,['hash'],['hashtable']
Security,"Add object at the end of the list. ;  ; void AddLast (TObject *obj, Option_t *opt) override;  Add object at the end of the list and also store option. ;  ; TObject * After (const TObject *obj) const override;  Returns the object after object obj. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * Before (const TObject *obj) const override;  Returns the object before object obj. ;  ; void Clear (Option_t *option="""") override;  Remove all objects from the list. ;  ; void Delete (Option_t *option="""") override;  Delete all TFunction object files. ;  ; TFunction * Find (DeclId_t id) const;  Return the TMethod or TFunction describing the function corresponding to the Decl 'id'. ;  ; TObject * FindObject (const char *name) const override;  Specialize FindObject to do search for the a function just by name or create it if its not already in the list. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object using its hash value (returned by its Hash() member). ;  ; TObject * First () const override;  Return the first object in the list. Returns 0 when list is empty. ;  ; TObjLink * FirstLink () const override;  ; TFunction * Get (DeclId_t id);  Return (after creating it if necessary) the TMethod or TFunction describing the function corresponding to the Decl 'id'. ;  ; Int_t GetLast () const override;  Returns index of last object in collection. ;  ; virtual TList * GetListForObject (const char *name) const;  Return the set of overloads for this name, collecting all available ones. ;  ; virtual TList * GetListForObject (const TObject *obj) const;  Return the set of overloads for function obj, collecting all available ones. ;  ; TObject ** GetObjectRef (const TObject *obj) const override;  Return address of pointer to obj. ;  ; Int_t GetSize () const override;  Return the capacity of the collection, i.e. ;  ; Int_t IndexOf (const TObject *obj) const override;  Return index of ob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfFunctions.html:3345,hash,hash,3345,doc/master/classTListOfFunctions.html,https://root.cern,https://root.cern/doc/master/classTListOfFunctions.html,1,['hash'],['hash']
Security,"Add object to the fMap container. ;  ; void MapObject (const void *obj, const TClass *cl, UInt_t offset=1) override;  Add object to the fMap container. ;  ; Int_t ReadClones (TClonesArray *a, Int_t nobjects, Version_t objvers) override;  Interface to TStreamerInfo::ReadBufferClones. ;  ; TProcessID * ReadProcessID (UShort_t pidf) override;  The TProcessID with number pidf is read from file. ;  ; void Reset () override;  Reset buffer object. Resets map and buffer offset. ;  ; void ResetMap () override;  Delete existing fMap and reset map counter. ;  ; void SetBufferDisplacement () override;  ; void SetBufferDisplacement (Int_t skipped) override;  ; void SetPidOffset (UShort_t offset) override;  This offset is used when a key (or basket) is transfered from one file to the other. ;  ; void SetReadParam (Int_t mapsize) override;  Set the initial size of the map used to store object and class references during reading. ;  ; void SetWriteParam (Int_t mapsize) override;  Set the initial size of the hashtable used to store object and class references during writing. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TagStreamerInfo (TVirtualStreamerInfo *info) override;  Mark the classindex of the current file as using this TStreamerInfo. ;  ; Int_t WriteClones (TClonesArray *a, Int_t nobjects) override;  Interface to TStreamerInfo::WriteBufferClones. ;  ; template<class T > ; Int_t WriteObject (const T *objptr, Bool_t cacheReuse=kTRUE);  ; virtual void WriteObject (const TObject *obj, Bool_t cacheReuse)=0;  ; void WriteObject (const TObject *obj, Bool_t cacheReuse=kTRUE) override;  Write object to I/O buffer. ;  ; Int_t WriteObjectAny (const void *obj, const TClass *ptrClass, Bool_t cacheReuse=kTRUE) override;  Write object to I/O buffer. ;  ; UShort_t WriteProcessID (TProcessID *pid) override;  Check if the ProcessID pid is already in the file. ;  ;  Public Member Functions",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferFile.html:21860,hash,hashtable,21860,doc/master/classTBufferFile.html,https://root.cern,https://root.cern/doc/master/classTBufferFile.html,2,['hash'],['hashtable']
Security,"Add object to the fMap container. ;  ; void MapObject (const void *obj, const TClass *cl, UInt_t offset=1) override;  Add object to the fMap container. ;  ; Int_t ReadClones (TClonesArray *a, Int_t nobjects, Version_t objvers) override;  Interface to TStreamerInfo::ReadBufferClones. ;  ; TProcessID * ReadProcessID (UShort_t pidf) override;  The TProcessID with number pidf is read from file. ;  ; void Reset () override;  Reset buffer object. Resets map and buffer offset. ;  ; void ResetMap () override;  Delete existing fMap and reset map counter. ;  ; void SetBufferDisplacement () override;  ; void SetBufferDisplacement (Int_t skipped) override;  ; void SetPidOffset (UShort_t offset) override;  This offset is used when a key (or basket) is transfered from one file to the other. ;  ; void SetReadParam (Int_t mapsize) override;  Set the initial size of the map used to store object and class references during reading. ;  ; void SetWriteParam (Int_t mapsize) override;  Set the initial size of the hashtable used to store object and class references during writing. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TagStreamerInfo (TVirtualStreamerInfo *info) override;  Mark the classindex of the current file as using this TStreamerInfo. ;  ; Int_t WriteClones (TClonesArray *a, Int_t nobjects) override;  Interface to TStreamerInfo::WriteBufferClones. ;  ; template<class T > ; Int_t WriteObject (const T *objptr, Bool_t cacheReuse=kTRUE);  ; virtual void WriteObject (const TObject *obj, Bool_t cacheReuse)=0;  ; void WriteObject (const TObject *obj, Bool_t cacheReuse=kTRUE) override;  Write object to I/O buffer. ;  ; Int_t WriteObjectAny (const void *obj, const TClass *ptrClass, Bool_t cacheReuse=kTRUE) override;  Write object to I/O buffer. ;  ; UShort_t WriteProcessID (TProcessID *pid) override;  Check if the ProcessID pid is already in the file. ;  ;  Public Member Functions inherited from TBuffer;  TBuffer (EMode mode);  Create an I/O buffer object.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferJSON.html:27551,hash,hashtable,27551,doc/master/classTBufferJSON.html,https://root.cern,https://root.cern/doc/master/classTBufferJSON.html,5,['hash'],['hashtable']
Security,"Add object to the hash table. ;  ; void AddAll (const TCollection *col) override;  Add all objects from collection col to this collection. ;  ; void AddBefore (const TObject *before, TObject *obj);  Add object to the hash table. ;  ; Float_t AverageCollisions () const;  ; void Clear (Option_t *option="""") override;  Remove all objects from the table. ;  ; Int_t Collisions (const char *name) const;  Returns the number of collisions for an object with a certain name (i.e. ;  ; Int_t Collisions (TObject *obj) const;  Returns the number of collisions for an object (i.e. ;  ; void Delete (Option_t *option="""") override;  Remove all objects from the table AND delete all heap based objects. ;  ; Bool_t Empty () const;  ; TObject * FindObject (const char *name) const override;  Find object using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object using its hash value (returned by its Hash() member). ;  ; const TList * GetListForObject (const char *name) const;  Return the TList corresponding to object's name based hash value. ;  ; const TList * GetListForObject (const TObject *obj) const;  Return the TList corresponding to object's hash value. ;  ; TObject ** GetObjectRef (const TObject *obj) const override;  Return address of pointer to obj. ;  ; Int_t GetRehashLevel () const;  ; Int_t GetSize () const override;  Return the capacity of the collection, i.e. ;  ; TClass * IsA () const override;  ; TIterator * MakeIterator (Bool_t dir=kIterForward) const override;  Returns a hash table iterator. ;  ; virtual void Print (Option_t *option, const char *wildcard, Int_t recurse=1) const;  Print the collection header and its elements that match the wildcard. ;  ; virtual void Print (Option_t *option, Int_t recurse) const;  Print the collection header and its elements. ;  ; void Print (Option_t *option, Int_t recurse) const override;  Print the collection header and its elements. ;  ; virtual void Print (Option_t *option, TPRegexp &regexp, Int_t recurs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHashTable.html:2040,hash,hash,2040,doc/master/classTHashTable.html,https://root.cern,https://root.cern/doc/master/classTHashTable.html,1,['hash'],['hash']
Security,"AnalysisType type ) { fAnalysisType = type; }; 437 Types::EAnalysisType GetAnalysisType() const { return fAnalysisType; }; 438 Bool_t DoRegression() const { return fAnalysisType == Types::kRegression; }; 439 Bool_t DoMulticlass() const { return fAnalysisType == Types::kMulticlass; }; 440 ; 441 // setter method for suppressing writing to XML and writing of standalone classes; 442 void DisableWriting(Bool_t setter){ fModelPersistence = setter?kFALSE:kTRUE; }//DEPRECATED; 443 ; 444 protected:; 445 mutable const Event *fTmpEvent; //! temporary event when testing on a different DataSet than the own one; 446 DataSet *fTmpData = nullptr; //! temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues); 447 // helper variables for JsMVA; 448 IPythonInteractive *fInteractive = nullptr;; 449 bool fExitFromTraining = false;; 450 UInt_t fIPyMaxIter = 0, fIPyCurrentIter = 0;; 451 ; 452 public:; 453 ; 454 // initializing IPythonInteractive class (for JsMVA only); 455 inline void InitIPythonInteractive(){; 456 if (fInteractive) delete fInteractive;; 457 fInteractive = new IPythonInteractive();; 458 }; 459 ; 460 // get training errors (for JsMVA only); 461 inline TMultiGraph* GetInteractiveTrainingError(){return fInteractive->Get();}; 462 ; 463 // stop's the training process (for JsMVA only); 464 inline void ExitFromTraining(){; 465 fExitFromTraining = true;; 466 }; 467 ; 468 // check's if the training ended (for JsMVA only); 469 inline bool TrainingEnded(){; 470 if (fExitFromTraining && fInteractive){; 471 delete fInteractive;; 472 fInteractive = nullptr;; 473 }; 474 return fExitFromTraining;; 475 }; 476 ; 477 // get fIPyMaxIter; 478 inline UInt_t GetMaxIter(){ return fIPyMaxIter; }; 479 ; 480 // get fIPyCurrentIter; 481 inline UInt_t GetCurrentIter(){ return fIPyCurrentIter; }; 482 ; 483 protected:; 484 ; 485 // ---------- protected accessors -------------------------------------------; 486 ; 487 //TDirectory* LocalTDir() const { return Data().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodBase_8h_source.html:21267,access,accessors,21267,doc/master/MethodBase_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html,1,['access'],['accessors']
Security,"AndFileName(const char* fullpath); set complete path of requested http element; For instance, it could be ""/folder/subfolder/get.bin""; Here ""/folder/subfolder/"" is element path and ""get.bin"" requested file.; One could set path and file name separately. TString GetHeader(const char* name); return specified header. void AddHeader(const char* name, const char* value); Set name: value pair to reply header; Content-Type field handled separately - one should use SetContentType() method; Content-Length field cannot be set at all;. void FillHttpHeader(TString& buf, const char* header = 0); fill HTTP header. Bool_t CompressWithGzip(); compress reply data with gzip compression. Bool_t IsBinData() const. void SetMethod(const char* method); these methods used to set http request arguments. void SetTopName(const char* topname); set engine-specific top-name. void SetPathName(const char* p); set request path name. void SetFileName(const char* f); set request file name. void SetUserName(const char* n); set name of authenticated user. void SetQuery(const char* q); set request query. void SetRequestHeader(const char* h); set full set of request header. Int_t NumRequestHeader() const; returns number of fields in request header. TString GetRequestHeaderName(Int_t number) const; returns field name in request header. TString GetRequestHeader(const char* name); get named field from request header. const char * GetTopName() const; returns engine-specific top-name. const char * GetMethod() const; returns request method like GET or POST. Bool_t IsPostMethod() const; returns kTRUE if post method is used. void* GetPostData() const; return pointer on posted with request data. Long_t GetPostDataLength() const; return length of posted with request data. const char * GetPathName() const; returns path name from request URL. const char * GetFileName() const; returns file name from request URL. const char * GetUserName() const; return authenticated user name (0 - when no authentication). const char * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THttpCallArg.html:9562,authenticat,authenticated,9562,root/html534/THttpCallArg.html,https://root.cern,https://root.cern/root/html534/THttpCallArg.html,1,['authenticat'],['authenticated']
Security,"Arg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooDataHist_dataSet; RooListProxy_dataVarsThe RooRealVars; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ParamHistFunc.html:33980,access,access,33980,root/html534/ParamHistFunc.html,https://root.cern,https://root.cern/root/html534/ParamHistFunc.html,1,['access'],['access']
Security,Arg::_cacheListlist of caches; RooArgSetRooAbsOptTestStatistic::_cachedNodes! List of nodes that are cached as constant expressions; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAbsData*RooAbsTestStatistic::_dataPointer to original input dataset; RooAbsData*RooAbsOptTestStatistic::_dataClonePointer to internal clone if input data; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; static RooArgSet_emptySetSupports named argument constructor; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_t_extended; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Bool_t_first!; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAbsReal*RooAbsTestStatistic::_funcPointer to original input function; RooAbsReal*RooAbsOptTestStatistic::_funcClonePointer to internal clone of input function; RooArgSet*RooAbsOptTestStatistic::_funcCloneSetSet owning all components of internal clone of input function; RooArgSet*RooAbsOptTestStatistic::_funcObsSetList of observables in the pdf expression; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg:,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNLLVar.html:35024,access,access,35024,root/html532/RooNLLVar.html,https://root.cern,https://root.cern/root/html532/RooNLLVar.html,1,['access'],['access']
Security,"Arg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()); Build a RooSimultaneous p.d.f with name simPdfName from cloning specializations of protytpe p.d.f protoPdfName.; The following named arguments are supported. SplitParam(varname, catname) -- Split parameter(s) with given name(s) in category(s) with given names; SplitParam(var, cat) -- Split given parameter(s) in givem category(s); SplitParamConstrained(vname, cname, remainder) -- Make constrained split in parameter(s) with given name(s) in category(s) with given names; putting remainder fraction formula in state with name ""remainder""; SplitParamConstrained(var,cat,remainder) -- Make constrained split in parameter(s) with given name(s) in category(s) with given names; putting remainder fraction formula in state with name ""remainder""; Restrict(catName,stateNameList) -- Restrict build by only considered listed state names of category with given name. RooSimultaneous* build(const char* simPdfName, RooSimWSTool::BuildConfig& bc, Bool_t verbose = kTRUE); Build a RooSimultaneous p.d.f with name simPdfName from cloning specializations of protytpe p.d.f protoPdfName.; Use the provided BuildConfig or MultiBuildConfig object to configure the build. RooSimultaneous* executeBuild(const char* simPdfName, RooSimWSTool::ObjBuildConfig& obc, Bool_t verbose = kTRUE); Internal build driver from validation ObjBuildConfig. std::string makeSplitName(const RooArgSet& splitCatSet); Construct name of composite split. RooSimWSTool(RooWorkspace& ws); Constructors, assignment etc. ObjBuildConfig* validateConfig(RooSimWSTool::BuildConfig& bc). » Last changed: Mon Dec 7 13:49:03 2009 » Last generated: 2009-12-07 13:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSimWSTool.html:12546,validat,validation,12546,root/html526/RooSimWSTool.html,https://root.cern,https://root.cern/root/html526/RooSimWSTool.html,2,['validat'],"['validateConfig', 'validation']"
Security,"Arg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()); Build a RooSimultaneous p.d.f with name simPdfName from cloning specializations of protytpe p.d.f protoPdfName.; The following named arguments are supported. SplitParam(varname, catname) -- Split parameter(s) with given name(s) in category(s) with given names; SplitParam(var, cat) -- Split given parameter(s) in givem category(s); SplitParamConstrained(vname, cname, remainder) -- Make constrained split in parameter(s) with given name(s) in category(s) with given names; putting remainder fraction formula in state with name ""remainder""; SplitParamConstrained(var,cat,remainder) -- Make constrained split in parameter(s) with given name(s) in category(s) with given names; putting remainder fraction formula in state with name ""remainder""; Restrict(catName,stateNameList) -- Restrict build by only considered listed state names of category with given name. RooSimultaneous* build(const char* simPdfName, RooSimWSTool::BuildConfig& bc, Bool_t verbose = kTRUE); Build a RooSimultaneous p.d.f with name simPdfName from cloning specializations of protytpe p.d.f protoPdfName.; Use the provided BuildConfig or MultiBuildConfig object to configure the build. RooSimultaneous* executeBuild(const char* simPdfName, RooSimWSTool::ObjBuildConfig& obc, Bool_t verbose = kTRUE); Internal build driver from validation ObjBuildConfig. std::string makeSplitName(const RooArgSet& splitCatSet); Construct name of composite split. RooSimWSTool(RooWorkspace& ws); Constructors, assignment etc. ObjBuildConfig* validateConfig(RooSimWSTool::BuildConfig& bc). » Last changed: Mon Jul 4 15:24:00 2011 » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooSimWSTool.html:12601,validat,validation,12601,root/html530/RooSimWSTool.html,https://root.cern,https://root.cern/root/html530/RooSimWSTool.html,2,['validat'],"['validateConfig', 'validation']"
Security,"Arg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()); Build a RooSimultaneous p.d.f with name simPdfName from cloning specializations of protytpe p.d.f protoPdfName.; The following named arguments are supported. SplitParam(varname, catname) -- Split parameter(s) with given name(s) in category(s) with given names; SplitParam(var, cat) -- Split given parameter(s) in givem category(s); SplitParamConstrained(vname, cname, remainder) -- Make constrained split in parameter(s) with given name(s) in category(s) with given names; putting remainder fraction formula in state with name ""remainder""; SplitParamConstrained(var,cat,remainder) -- Make constrained split in parameter(s) with given name(s) in category(s) with given names; putting remainder fraction formula in state with name ""remainder""; Restrict(catName,stateNameList) -- Restrict build by only considered listed state names of category with given name. RooSimultaneous* build(const char* simPdfName, RooSimWSTool::BuildConfig& bc, Bool_t verbose = kTRUE); Build a RooSimultaneous p.d.f with name simPdfName from cloning specializations of protytpe p.d.f protoPdfName.; Use the provided BuildConfig or MultiBuildConfig object to configure the build. RooSimultaneous* executeBuild(const char* simPdfName, RooSimWSTool::ObjBuildConfig& obc, Bool_t verbose = kTRUE); Internal build driver from validation ObjBuildConfig. std::string makeSplitName(const RooArgSet& splitCatSet); Construct name of composite split. RooSimWSTool(RooWorkspace& ws); Constructors, assignment etc. ObjBuildConfig* validateConfig(RooSimWSTool::BuildConfig& bc). » Last changed: Sat Oct 9 22:38:48 2010 » Last generated: 2010-10-09 22:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooSimWSTool.html:12532,validat,validation,12532,root/html528/RooSimWSTool.html,https://root.cern,https://root.cern/root/html528/RooSimWSTool.html,2,['validat'],"['validateConfig', 'validation']"
Security,"Arg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()); Build a RooSimultaneous p.d.f with name simPdfName from cloning specializations of protytpe p.d.f protoPdfName.; The following named arguments are supported. SplitParam(varname, catname) -- Split parameter(s) with given name(s) in category(s) with given names; SplitParam(var, cat) -- Split given parameter(s) in givem category(s); SplitParamConstrained(vname, cname, remainder) -- Make constrained split in parameter(s) with given name(s) in category(s) with given names; putting remainder fraction formula in state with name ""remainder""; SplitParamConstrained(var,cat,remainder) -- Make constrained split in parameter(s) with given name(s) in category(s) with given names; putting remainder fraction formula in state with name ""remainder""; Restrict(catName,stateNameList) -- Restrict build by only considered listed state names of category with given name. RooSimultaneous* build(const char* simPdfName, RooSimWSTool::BuildConfig& bc, Bool_t verbose = kTRUE); Build a RooSimultaneous p.d.f with name simPdfName from cloning specializations of protytpe p.d.f protoPdfName.; Use the provided BuildConfig or MultiBuildConfig object to configure the build. RooSimultaneous* executeBuild(const char* simPdfName, RooSimWSTool::ObjBuildConfig& obc, Bool_t verbose = kTRUE); Internal build driver from validation ObjBuildConfig. std::string makeSplitName(const RooArgSet& splitCatSet); Construct name of composite split. RooSimWSTool(RooWorkspace& ws); Constructors, assignment etc. ObjBuildConfig* validateConfig(RooSimWSTool::BuildConfig& bc). » Last changed: Thu Nov 3 20:09:16 2011 » Last generated: 2011-11-03 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooSimWSTool.html:12601,validat,validation,12601,root/html532/RooSimWSTool.html,https://root.cern,https://root.cern/root/html532/RooSimWSTool.html,2,['validat'],"['validateConfig', 'validation']"
Security,"Arg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none()); Build a RooSimultaneous p.d.f with name simPdfName from cloning specializations of protytpe p.d.f protoPdfName.; The following named arguments are supported. SplitParam(varname, catname) -- Split parameter(s) with given name(s) in category(s) with given names; SplitParam(var, cat) -- Split given parameter(s) in givem category(s); SplitParamConstrained(vname, cname, remainder) -- Make constrained split in parameter(s) with given name(s) in category(s) with given names; putting remainder fraction formula in state with name ""remainder""; SplitParamConstrained(var,cat,remainder) -- Make constrained split in parameter(s) with given name(s) in category(s) with given names; putting remainder fraction formula in state with name ""remainder""; Restrict(catName,stateNameList) -- Restrict build by only considered listed state names of category with given name. RooSimultaneous* build(const char* simPdfName, RooSimWSTool::BuildConfig& bc, Bool_t verbose = kTRUE); Build a RooSimultaneous p.d.f with name simPdfName from cloning specializations of protytpe p.d.f protoPdfName.; Use the provided BuildConfig or MultiBuildConfig object to configure the build. RooSimultaneous* executeBuild(const char* simPdfName, RooSimWSTool::ObjBuildConfig& obc, Bool_t verbose = kTRUE); Internal build driver from validation ObjBuildConfig. std::string makeSplitName(const RooArgSet& splitCatSet); Construct name of composite split. RooSimWSTool(RooWorkspace& ws); Constructors, assignment etc. ObjBuildConfig* validateConfig(RooSimWSTool::BuildConfig& bc). » Last changed: Tue Jun 2 15:33:51 2015 » Last generated: 2015-06-02 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooSimWSTool.html:13623,validat,validation,13623,root/html604/RooSimWSTool.html,https://root.cern,https://root.cern/root/html604/RooSimWSTool.html,2,['validat'],"['validateConfig', 'validation']"
Security,"Args(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0); Cache given RooAbsArgs with this tree: The tree is; given direct write access of the args internal cache; the args values is pre-calculated for all data points; in this data collection. Upon a get() call, the; internal cache of 'newVar' will be loaded with the; precalculated value and it's dirty flag will be cleared. void setArgStatus(const RooArgSet& set, Bool_t active); Activate or deactivate the branch status of the TTree branch associated; with the given set of dataset observables. void resetCache(); Remove tree with values of cached observables; and clear list of cached observables. void checkInit() const. Stat_t GetEntries() const; Interface function to TTree::GetEntries. void Reset(Option_t* option = 0); Interface function to TTree::Reset. Int_t Fill(); Interface function to TTree::Fill. Int_t GetEntry(Int_t entry = 0, Int_t getall = 0); Interface function to TTree::GetEntry. void Draw(Option_t* option = """"). void Streamer(TBuffer& b); Stream an object of class RooTreeDataStore. RooAbsDataStore* clone(const RooArgSet& vars, const char* newname = 0) const; { return new RooTreeDataStore(*this,vars,newname) ; }. Bool_t isWeighted() const; { return (_wgtVar!=0||_extWgtArray!=0) ; }. TTree& tree(); Tree access. { return *_tree ; }. const TTree* tree() const; { return _tree ; }. const RooAbsArg* cacheOwner(); { return _cacheOwner ; }. void setExternalWeightArray(Double_t* arrayWgt, Double_t* arrayWgtErrLo, Double_t* arrayWgtErrHi, Double_t* arraySumW2). const RooArgSet& row(); { return _varsww ; }. void setBranchBufferSize(Int_t size); TTree Branch buffer size control. { _defTreeBufSize = size ; }. Int_t getBranchBufferSize() const; { return _defTreeBufSize ; }. » Last changed: Thu Sep 23 20:01:27 2010 » Last generated: 2010-09-23 20:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooTreeDataStore.html:17697,access,access,17697,root/html528/RooTreeDataStore.html,https://root.cern,https://root.cern/root/html528/RooTreeDataStore.html,1,['access'],['access']
Security,"Arr1[iEl] = arr1[iEl];; 1363 localArr2[iEl] = iEl;; 1364 }; 1365 ; 1366 for (iEl = 0; iEl < Narr; iEl++) {; 1367 for (iEl2 = Narr-1; iEl2 > iEl; --iEl2) {; 1368 if (localArr1[iEl2-1] > localArr1[iEl2]) {; 1369 double tmp = localArr1[iEl2-1];; 1370 localArr1[iEl2-1] = localArr1[iEl2];; 1371 localArr1[iEl2] = tmp;; 1372 ; 1373 int tmp2 = localArr2[iEl2-1];; 1374 localArr2[iEl2-1] = localArr2[iEl2];; 1375 localArr2[iEl2] = tmp2;; 1376 }; 1377 }; 1378 }; 1379 ; 1380 for (iEl = 0; iEl < Narr; iEl++) {; 1381 arr2[iEl] = localArr2[iEl];; 1382 }; 1383 delete [] localArr2;; 1384 delete [] localArr1;; 1385}; 1386 ; 1387 ; 1388////////////////////////////////////////////////////////////////////////////////; 1389/// Calculates hash index from any char string.; 1390/// Based on pre-calculated table of 256 specially selected numbers.; 1391/// These numbers are selected in such a way, that for string; 1392/// length == 4 (integer number) the hash is unambiguous, i.e.; 1393/// from hash value we can recalculate input (no degeneration).; 1394///; 1395/// The quality of hash method is good enough, that; 1396/// ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); 1397/// tested by `<R>`, `<R*R>`, `<Ri*Ri+1>` gives the same result; 1398/// as for libc rand().; 1399///; 1400/// - For string: i = TMath::Hash(string,nstring);; 1401/// - For int: i = TMath::Hash(&intword,sizeof(int));; 1402/// - For pointer: i = TMath::Hash(&pointer,sizeof(void*));; 1403///; 1404/// V.Perev; 1405/// This function is kept for back compatibility. The code previously in this function; 1406/// has been moved to the static function TString::Hash; 1407 ; 1408ULong_t TMath::Hash(const void *txt, Int_t ntxt); 1409{; 1410 return TString::Hash(txt,ntxt);; 1411}; 1412 ; 1413 ; 1414////////////////////////////////////////////////////////////////////////////////; 1415 ; 1416ULong_t TMath::Hash(const char *txt); 1417{; 1418 return Hash(txt, Int_t(strlen(txt)));; 1419}; 1420 ; 1421//////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:46171,hash,hash,46171,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,1,['hash'],['hash']
Security,"Arrow will be able to access this variable. Nobody else will see it. Even the classes that we could derive from TArrow will not see it. On the other hand, if we declare the method Draw() as public, everybody will be able to see it and use it. You see that the character public or private does not depend of the type of argument. It can be a data member, a member function, or even a class. For example, in the case of TArrow, the base class TLine is declared as public:; class TArrow : public TLine { ...; This means that all methods of TArrow will be able to access all methods of TLine, but this will be also true for anybody in the outside world. Of course, this is true if TLine accepts the outside world to see its methods/data members. If something is declared private in TLine, nobody will see it, not even TArrow members, even if TLine is declared as a public base class.; What if TLine is declared “private” instead of “public” ? Well, it will behave as any other name declared private in TArrow: only the data members and methods of TArrow will be able to access TLine, its methods and data members, nobody else. This may seem a little bit confusing and readers should read a good C++ book if they want more details. Especially since, besides public and private, a member can be protected. Usually, one puts private the methods that the class uses internally, like some utilities classes, and that the programmer does not want to be seen in the outside world.; With “good” C++ practice (which we have tried to use in ROOT), all data members of a class are private. This is called data encapsulation and is one of the strongest advantages of Object Oriented Programming (OOP). Private data members of a class are not visible, except to the class itself. So, from the outside world, if one wants to access those data members, one should use so called “getters” and “setters” methods, which are special methods used only to get or set the data members. The advantage is that if the programmers ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:246625,access,access,246625,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['access'],['access']
Security,"AttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TVectorD_frac; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; Int_t_ixmax; Int_t_ixmin; Int_t_iymax; Int_t_iymin; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; TMatrixD_mref; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/Roo2DMomentMorphFunction.html:36225,access,access,36225,root/html602/Roo2DMomentMorphFunction.html,https://root.cern,https://root.cern/root/html602/Roo2DMomentMorphFunction.html,2,['access'],['access']
Security,"Attributes(const TString& attributes); Set the attributes code of this rule. const char * GetAttributes() const; Get the attributes code of this rule. Bool_t HasTarget(const TString& target) const; Return true if one of the rule's data member target is 'target'. Bool_t HasSource(const TString& source) const; Return true if one of the rule's data member source is 'source'. void SetReadFunctionPointer(ROOT::TSchemaRule::ReadFuncPtr_t ptr); Set the pointer to the function to be run for the rule (if it is a read rule). void SetReadRawFunctionPointer(ROOT::TSchemaRule::ReadRawFuncPtr_t ptr); Set the pointer to the function to be run for the rule (if it is a raw read rule). void SetRuleType(ROOT::TSchemaRule::RuleType_t type); Set the type of the rule. Bool_t IsAliasRule() const; Return kTRUE if the rule is a strict renaming of one of the data member of the class. Bool_t IsRenameRule() const; Return kTRUE if the rule is a strict renaming of the class to a new name. Bool_t Conflicts(const ROOT::TSchemaRule* rule) const; Check if this rule conflicts with the given one. Bool_t ProcessVersion(const TString& version) const; Check if specified version string is correct and build version vector. Bool_t ProcessChecksum(const TString& checksum) const; Check if specified checksum string is correct and build checksum vector. void ProcessList(TObjArray* array, const TString& list); Split the list as a comma separated list into a TObjArray of TObjString. void ProcessDeclaration(TObjArray* array, const TString& list); Split the list as a declaration into as a TObjArray of TNamed(name,type). ReadFuncPtr_t GetReadFunctionPointer() const. ReadRawFuncPtr_t GetReadRawFunctionPointer() const. RuleType_t GetRuleType() const. » Last changed: root/core:$Id: TSchemaRule.h 34641 2010-07-28 18:12:36Z pcanal $ » Last generated: 2010-09-23 19:57; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__TSchemaRule.html:12240,checksum,checksum,12240,root/html528/ROOT__TSchemaRule.html,https://root.cern,https://root.cern/root/html528/ROOT__TSchemaRule.html,3,['checksum'],['checksum']
Security,"Attributes(const TString& attributes); Set the attributes code of this rule. const char * GetAttributes() const; Get the attributes code of this rule. Bool_t HasTarget(const TString& target) const; Return true if one of the rule's data member target is 'target'. Bool_t HasSource(const TString& source) const; Return true if one of the rule's data member source is 'source'. void SetReadFunctionPointer(ROOT::TSchemaRule::ReadFuncPtr_t ptr); Set the pointer to the function to be run for the rule (if it is a read rule). void SetReadRawFunctionPointer(ROOT::TSchemaRule::ReadRawFuncPtr_t ptr); Set the pointer to the function to be run for the rule (if it is a raw read rule). void SetRuleType(ROOT::TSchemaRule::RuleType_t type); Set the type of the rule. Bool_t IsAliasRule() const; Return kTRUE if the rule is a strict renaming of one of the data member of the class. Bool_t IsRenameRule() const; Return kTRUE if the rule is a strict renaming of the class to a new name. Bool_t Conflicts(const ROOT::TSchemaRule* rule) const; Check if this rule conflicts with the given one. Bool_t ProcessVersion(const TString& version) const; Check if specified version string is correct and build version vector. Bool_t ProcessChecksum(const TString& checksum) const; Check if specified checksum string is correct and build checksum vector. void ProcessList(TObjArray* array, const TString& list); Split the list as a comma separated list into a TObjArray of TObjString. void ProcessDeclaration(TObjArray* array, const TString& list); Split the list as a declaration into as a TObjArray of TNamed(name,type). ReadFuncPtr_t GetReadFunctionPointer() const. ReadRawFuncPtr_t GetReadRawFunctionPointer() const. RuleType_t GetRuleType() const. » Last changed: root/core:$Id: TSchemaRule.h 34641 2010-07-28 18:12:36Z pcanal $ » Last generated: 2011-07-04 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__TSchemaRule.html:12309,checksum,checksum,12309,root/html530/ROOT__TSchemaRule.html,https://root.cern,https://root.cern/root/html530/ROOT__TSchemaRule.html,3,['checksum'],['checksum']
Security,"Attributes(const TString& attributes); Set the attributes code of this rule. const char * GetAttributes() const; Get the attributes code of this rule. Bool_t HasTarget(const TString& target) const; Return true if one of the rule's data member target is 'target'. Bool_t HasSource(const TString& source) const; Return true if one of the rule's data member source is 'source'. void SetReadFunctionPointer(ROOT::TSchemaRule::ReadFuncPtr_t ptr); Set the pointer to the function to be run for the rule (if it is a read rule). void SetReadRawFunctionPointer(ROOT::TSchemaRule::ReadRawFuncPtr_t ptr); Set the pointer to the function to be run for the rule (if it is a raw read rule). void SetRuleType(ROOT::TSchemaRule::RuleType_t type); Set the type of the rule. Bool_t IsAliasRule() const; Return kTRUE if the rule is a strict renaming of one of the data member of the class. Bool_t IsRenameRule() const; Return kTRUE if the rule is a strict renaming of the class to a new name. Bool_t Conflicts(const ROOT::TSchemaRule* rule) const; Check if this rule conflicts with the given one. Bool_t ProcessVersion(const TString& version) const; Check if specified version string is correct and build version vector. Bool_t ProcessChecksum(const TString& checksum) const; Check if specified checksum string is correct and build checksum vector. void ProcessList(TObjArray* array, const TString& list); Split the list as a comma separated list into a TObjArray of TObjString. void ProcessDeclaration(TObjArray* array, const TString& list); Split the list as a declaration into as a TObjArray of TNamed(name,type). ReadFuncPtr_t GetReadFunctionPointer() const. ReadRawFuncPtr_t GetReadRawFunctionPointer() const. RuleType_t GetRuleType() const. » Last changed: root/core:$Id: TSchemaRule.h 34641 2010-07-28 18:12:36Z pcanal $ » Last generated: 2011-11-03 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__TSchemaRule.html:12309,checksum,checksum,12309,root/html532/ROOT__TSchemaRule.html,https://root.cern,https://root.cern/root/html532/ROOT__TSchemaRule.html,3,['checksum'],['checksum']
Security,"Authenticate.cxx. ◆ SetRSAKeyType(). void TAuthenticate::SetRSAKeyType ; (; Int_t ; key). inline . Definition at line 148 of file TAuthenticate.h. ◆ SetRSAPublic(). Int_t TAuthenticate::SetRSAPublic ; (; const char * ; rsaPubExport, . Int_t ; klen . ). static . Store RSA public keys from export string rsaPubExport. ; Returns type of stored key, or -1 is not recognized ; Definition at line 3039 of file TAuthenticate.cxx. ◆ SetSecContext(). void TAuthenticate::SetSecContext ; (; TRootSecContext * ; ctx). inline . Definition at line 149 of file TAuthenticate.h. ◆ SetSecureAuthHook(). void TAuthenticate::SetSecureAuthHook ; (; SecureAuth_t ; func). static . Set secure authorization function. ; Definition at line 1393 of file TAuthenticate.cxx. ◆ SetTimeOut(). void TAuthenticate::SetTimeOut ; (; Int_t ; to). static . Set timeout (active if > 0) ; Definition at line 1369 of file TAuthenticate.cxx. ◆ Show(). void TAuthenticate::Show ; (; Option_t * ; opt = ""S""). static . Print info about the authentication sector. ; If 'opt' contains 's' or 'S' prints information about established TSecContext, else prints information about THostAuth (if 'opt' is 'p' or 'P', prints Proof related information) ; Definition at line 2219 of file TAuthenticate.cxx. ◆ SshAuth(). Int_t TAuthenticate::SshAuth ; (; TString & ; user). private . SSH client authentication code (no longer supported) ; Definition at line 1419 of file TAuthenticate.cxx. ◆ SshError(). Int_t TAuthenticate::SshError ; (; const char * ; errfile). private . ◆ Streamer(). void TAuthenticate::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TAuthenticate::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 207 of file TAuthenticate.h. Friends And Related Symbol Documentation. ◆ TRootAuth. friend class TRootAuth. friend . Definition at line 55 of file TAuthenticate.h. ◆ TRootSecContext. friend clas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAuthenticate.html:41322,authenticat,authentication,41322,doc/master/classTAuthenticate.html,https://root.cern,https://root.cern/doc/master/classTAuthenticate.html,1,['authenticat'],['authentication']
Security,"Axis"", 100, 0, 1);; 188~~~; 189 The histogram title and the axis titles can be any TLatex string, and; 190 are persisted if a histogram is written to a file.; 191 ; 192 Any title can be omitted:; 193~~~ {.cpp}; 194 TH1F* h=new TH1F(""h"", ""Histogram title;;Y Axis"", 100, 0, 1);; 195 TH1F* h=new TH1F(""h"", "";;Y Axis"", 100, 0, 1);; 196~~~; 197 The method SetTitle() has the same syntax:; 198~~~ {.cpp}; 199 h->SetTitle(""Histogram title;Another X title Axis"");; 200~~~; 201Alternatively, the title of each axis can be set directly:; 202~~~ {.cpp}; 203 h->GetXaxis()->SetTitle(""X axis title"");; 204 h->GetYaxis()->SetTitle(""Y axis title"");; 205~~~; 206For bin labels see \ref binning.; 207 ; 208\anchor binning; 209## Binning; 210 ; 211\anchor fix-var; 212### Fix or variable bin size; 213 ; 214 All histogram types support either fix or variable bin sizes.; 215 2-D histograms may have fix size bins along X and variable size bins; 216 along Y or vice-versa. The functions to fill, manipulate, draw or access; 217 histograms are identical in both cases.; 218 ; 219 Each histogram always contains 3 axis objects of type TAxis: fXaxis, fYaxis and fZaxis.; 220 To access the axis parameters, use:; 221~~~ {.cpp}; 222 TAxis *xaxis = h->GetXaxis(); etc.; 223 Double_t binCenter = xaxis->GetBinCenter(bin), etc.; 224~~~; 225 See class TAxis for a description of all the access functions.; 226 The axis range is always stored internally in double precision.; 227 ; 228\anchor convention; 229### Convention for numbering bins; 230 ; 231 For all histogram types: nbins, xlow, xup; 232~~~ {.cpp}; 233 bin = 0; underflow bin; 234 bin = 1; first bin with low-edge xlow INCLUDED; 235 bin = nbins; last bin with upper-edge xup EXCLUDED; 236 bin = nbins+1; overflow bin; 237~~~; 238 In case of 2-D or 3-D histograms, a ""global bin"" number is defined.; 239 For example, assuming a 3-D histogram with (binx, biny, binz), the function; 240~~~ {.cpp}; 241 Int_t gbin = h->GetBin(binx, biny, binz);; 242~~~; 243 returns a glob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:9835,access,access,9835,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['access'],['access']
Security,"AxisAngle(const ROOT::Math::AxisAngle& ); ======== Construction From other Rotation Forms ==================. Construct from another supported rotation type (see gv_detail::convert ). {gv_detail::convert(r,*this);}. AxisAngle & operator=( OtherRotation const & r ). Assign from another supported rotation type (see gv_detail::convert ). void SetComponents(double* begin, double* end); ======== Components ==============. Set the axis and then the angle given a pair of pointers or iterators; defining the beginning and end of an array of four Scalars.; Precondition: The first three components are assumed to represent; the rotation axis vector and the 4-th the rotation angle.; The angle is assumed to be in the range (-pi,pi].; The axis vector is automatically normalized to be a unit vector. void GetComponents(IT begin, IT end). Get the axis and then the angle into data specified by an iterator begin; and another to the end of the desired data (4 past start). Scalar Angle() const. access to rotation angle. { return fAngle; }. XYZVector operator()(const ROOT::Math::AxisAngle::XYZVector& v) const. AVector operator*(const AVector & v). Overload operator * for rotation on a vector. void Invert(). Invert an AxisAngle rotation in place. { fAngle = -fAngle; }. AxisAngle Inverse() const. Return inverse of an AxisAngle rotation. { AxisAngle result(*this); result.Invert(); return result; }. return ! operator==(const ROOT::Math::AxisAngle& rhs) const. void RectifyAngle(). double Pi(); { return 3.14159265358979323; }. AxisAngle operator*(RotationX const & r1, AxisAngle const & r2). Multiplication of an axial rotation by an AxisAngle. AxisAngle operator*(RotationY const & r1, AxisAngle const & r2). AxisAngle operator*(RotationZ const & r1, AxisAngle const & r2). » Last changed: root/mathcore:$Id: AxisAngle.h 22516 2008-03-07 15:14:26Z moneta $ » Last generated: 2009-12-07 13:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__AxisAngle.html:5221,access,access,5221,root/html526/ROOT__Math__AxisAngle.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__AxisAngle.html,1,['access'],['access']
Security,"AxisAngle(const ROOT::Math::AxisAngle& ); ======== Construction From other Rotation Forms ==================. Construct from another supported rotation type (see gv_detail::convert ). {gv_detail::convert(r,*this);}. AxisAngle & operator=( OtherRotation const & r ). Assign from another supported rotation type (see gv_detail::convert ). void SetComponents(double* begin, double* end); ======== Components ==============. Set the axis and then the angle given a pair of pointers or iterators; defining the beginning and end of an array of four Scalars.; Precondition: The first three components are assumed to represent; the rotation axis vector and the 4-th the rotation angle.; The angle is assumed to be in the range (-pi,pi].; The axis vector is automatically normalized to be a unit vector. void GetComponents(IT begin, IT end). Get the axis and then the angle into data specified by an iterator begin; and another to the end of the desired data (4 past start). Scalar Angle() const. access to rotation angle. { return fAngle; }. XYZVector operator()(const ROOT::Math::AxisAngle::XYZVector& v) const. AVector operator*(const AVector & v). Overload operator * for rotation on a vector. void Invert(). Invert an AxisAngle rotation in place. { fAngle = -fAngle; }. AxisAngle Inverse() const. Return inverse of an AxisAngle rotation. { AxisAngle result(*this); result.Invert(); return result; }. return ! operator==(rhs). void RectifyAngle(). double Pi(); { return 3.14159265358979323; }. AxisAngle operator*(RotationX const & r1, AxisAngle const & r2). Multiplication of an axial rotation by an AxisAngle. AxisAngle operator*(RotationY const & r1, AxisAngle const & r2). AxisAngle operator*(RotationZ const & r1, AxisAngle const & r2). » Last changed: root/mathcore:$Id: AxisAngle.h 22516 2008-03-07 15:14:26Z moneta $ » Last generated: 2010-09-23 19:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__AxisAngle.html:5221,access,access,5221,root/html528/ROOT__Math__AxisAngle.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__AxisAngle.html,1,['access'],['access']
Security,"AxisAngle(const ROOT::Math::AxisAngle& ); ======== Construction From other Rotation Forms ==================. Construct from another supported rotation type (see gv_detail::convert ). {gv_detail::convert(r,*this);}. AxisAngle & operator=( OtherRotation const & r ). Assign from another supported rotation type (see gv_detail::convert ). void SetComponents(double* begin, double* end); ======== Components ==============. Set the axis and then the angle given a pair of pointers or iterators; defining the beginning and end of an array of four Scalars.; Precondition: The first three components are assumed to represent; the rotation axis vector and the 4-th the rotation angle.; The angle is assumed to be in the range (-pi,pi].; The axis vector is automatically normalized to be a unit vector. void GetComponents(IT begin, IT end). Get the axis and then the angle into data specified by an iterator begin; and another to the end of the desired data (4 past start). Scalar Angle() const. access to rotation angle. { return fAngle; }. XYZVector operator()(const ROOT::Math::AxisAngle::XYZVector& v) const. AVector operator*(const AVector & v). Overload operator * for rotation on a vector. void Invert(). Invert an AxisAngle rotation in place. { fAngle = -fAngle; }. AxisAngle Inverse() const. Return inverse of an AxisAngle rotation. { AxisAngle result(*this); result.Invert(); return result; }. return ! operator==(rhs). void RectifyAngle(). double Pi(); { return 3.14159265358979323; }. AxisAngle operator*(RotationX const & r1, AxisAngle const & r2). Multiplication of an axial rotation by an AxisAngle. AxisAngle operator*(RotationY const & r1, AxisAngle const & r2). AxisAngle operator*(RotationZ const & r1, AxisAngle const & r2). » Last changed: root/mathcore:$Id: AxisAngle.h 22516 2008-03-07 15:14:26Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__AxisAngle.html:5223,access,access,5223,root/html530/ROOT__Math__AxisAngle.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__AxisAngle.html,1,['access'],['access']
Security,"AxisAngle(const ROOT::Math::AxisAngle& ); ======== Construction From other Rotation Forms ==================. Construct from another supported rotation type (see gv_detail::convert ). {gv_detail::convert(r,*this);}. AxisAngle & operator=( OtherRotation const & r ). Assign from another supported rotation type (see gv_detail::convert ). void SetComponents(double* begin, double* end); ======== Components ==============. Set the axis and then the angle given a pair of pointers or iterators; defining the beginning and end of an array of four Scalars.; Precondition: The first three components are assumed to represent; the rotation axis vector and the 4-th the rotation angle.; The angle is assumed to be in the range (-pi,pi].; The axis vector is automatically normalized to be a unit vector. void GetComponents(IT begin, IT end). Get the axis and then the angle into data specified by an iterator begin; and another to the end of the desired data (4 past start). Scalar Angle() const. access to rotation angle. { return fAngle; }. XYZVector operator()(const ROOT::Math::AxisAngle::XYZVector& v) const. AVector operator*(const AVector & v). Overload operator * for rotation on a vector. void Invert(). Invert an AxisAngle rotation in place. { fAngle = -fAngle; }. AxisAngle Inverse() const. Return inverse of an AxisAngle rotation. { AxisAngle result(*this); result.Invert(); return result; }. return ! operator==(rhs). void RectifyAngle(). double Pi(); { return 3.14159265358979323; }. AxisAngle operator*(RotationX const & r1, AxisAngle const & r2). Multiplication of an axial rotation by an AxisAngle. AxisAngle operator*(RotationY const & r1, AxisAngle const & r2). AxisAngle operator*(RotationZ const & r1, AxisAngle const & r2). » Last changed: root/mathcore:$Id: AxisAngle.h 22516 2008-03-07 15:14:26Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__AxisAngle.html:5223,access,access,5223,root/html532/ROOT__Math__AxisAngle.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__AxisAngle.html,1,['access'],['access']
Security,"BC())); 5991 {if (TClassEdit::IsSTLCont(bc->GetName())) warn = kFALSE;}; 5992 }; 5993 ; 5994 if (warn) {; 5995 if (info->GetOnFileClassVersion()==1 && fClassVersion>1) {; 5996 Warning(""PostLoadCheck"",""\n\; 5997 The class %s transitioned from not having a specified class version\n\; 5998 to having a specified class version (the current class version is %d).\n\; 5999 However too many different non-versioned layouts of the class have\n\; 6000 already been loaded so far. To work around this problem you can\n\; 6001 load fewer 'old' file in the same ROOT session or load the C++ library\n\; 6002 describing the class %s before opening the files or increase the version\n\; 6003 number of the class for example ClassDef(%s,%d).\n\; 6004 Do not try to write objects with the current class definition,\n\; 6005 the files might not be readable.\n"",; 6006 GetName(), fClassVersion, GetName(), GetName(), fStreamerInfo->GetLast()+1);; 6007 } else {; 6008 Warning(""PostLoadCheck"",""\n\; 6009 The StreamerInfo version %d for the class %s which was read\n\; 6010 from a file previously opened has the same version as the active class\n\; 6011 but a different checksum. You should update the version to ClassDef(%s,%d).\n\; 6012 Do not try to write objects with the current class definition,\n\; 6013 the files will not be readable.\n""; 6014 , fClassVersion, GetName(), GetName(), fStreamerInfo->GetLast()+1);; 6015 }; 6016 info->CompareContent(this,nullptr,kTRUE,kTRUE,nullptr);; 6017 SetBit(kWarned);; 6018 }; 6019 }; 6020 }; 6021 if (fCollectionProxy) {; 6022 // Update the related pair's TClass if it has already been created.; 6023 size_t noffset = 0;; 6024 if (strncmp(GetName(), ""map<"", 4) == 0); 6025 noffset = 3;; 6026 else if (strncmp(GetName(), ""multimap<"", 9) == 0); 6027 noffset = 8;; 6028 else if (strncmp(GetName(), ""unordered_map<"", 14) == 0); 6029 noffset = 13;; 6030 else if (strncmp(GetName(), ""unordered_multimap<"", 19) == 0); 6031 noffset = 18;; 6032 if (noffset) {; 6033 std::string pairn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:231195,checksum,checksum,231195,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['checksum'],['checksum']
Security,"BC())); 6058 {if (TClassEdit::IsSTLCont(bc->GetName())) warn = kFALSE;}; 6059 }; 6060 ; 6061 if (warn) {; 6062 if (info->GetOnFileClassVersion()==1 && fClassVersion>1) {; 6063 Warning(""PostLoadCheck"",""\n\; 6064 The class %s transitioned from not having a specified class version\n\; 6065 to having a specified class version (the current class version is %d).\n\; 6066 However too many different non-versioned layouts of the class have\n\; 6067 already been loaded so far. To work around this problem you can\n\; 6068 load fewer 'old' file in the same ROOT session or load the C++ library\n\; 6069 describing the class %s before opening the files or increase the version\n\; 6070 number of the class for example ClassDef(%s,%d).\n\; 6071 Do not try to write objects with the current class definition,\n\; 6072 the files might not be readable.\n"",; 6073 GetName(), fClassVersion, GetName(), GetName(), fStreamerInfo->GetLast()+1);; 6074 } else {; 6075 Warning(""PostLoadCheck"",""\n\; 6076 The StreamerInfo version %d for the class %s which was read\n\; 6077 from a file previously opened has the same version as the active class\n\; 6078 but a different checksum. You should update the version to ClassDef(%s,%d).\n\; 6079 Do not try to write objects with the current class definition,\n\; 6080 the files will not be readable.\n""; 6081 , fClassVersion, GetName(), GetName(), fStreamerInfo->GetLast()+1);; 6082 }; 6083 info->CompareContent(this,nullptr,kTRUE,kTRUE,nullptr);; 6084 SetBit(kWarned);; 6085 }; 6086 }; 6087 }; 6088 if (fCollectionProxy) {; 6089 // Update the related pair's TClass if it has already been created.; 6090 size_t noffset = 0;; 6091 if (strncmp(GetName(), ""map<"", 4) == 0); 6092 noffset = 3;; 6093 else if (strncmp(GetName(), ""multimap<"", 9) == 0); 6094 noffset = 8;; 6095 else if (strncmp(GetName(), ""unordered_map<"", 14) == 0); 6096 noffset = 13;; 6097 else if (strncmp(GetName(), ""unordered_multimap<"", 19) == 0); 6098 noffset = 18;; 6099 if (noffset) {; 6100 std::string pairn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:233946,checksum,checksum,233946,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['checksum'],['checksum']
Security,"Ball shape:. symmetric or asymmetric power-law tails on both sides; different width parameters for the left and right sides of the Gaussian core. The new RooCrystalBall class can substitute the RooDSCBShape and RooSDSCBShape, which were passed around in the community.; 2D Graphics Libraries. Add the method AddPointto TGraph(x,y) and TGraph2D(x,y,z), equivalent to SetPoint(g->GetN(),x,y)and SetPoint(g->GetN(),x,y,z); Option E0 draws error bars and markers are drawn for bins with 0 contents. Now, combined with options E1 and E2, it avoids error bars clipping.; Fix TAxis::ChangeLabel for vertical axes and 3D plots. Networking Libraries; Multithreaded support for FastCGI; Now when THttpServer creates FastCGI engine, 10 worker threads used to process requests received via FastCGI channel. This significantly increase a performance, especially when several clients are connected.; Better security for THttpServer with webgui; If THttpServer created for use with webgui widgets (RBrowser, RCanvas, REve), it only will provide access to the widgets via websocket connection - any other kind of requests like root.json or exe.json will be refused completely. Combined with connection tokens and https protocol, this makes usage of webgui components in public networks more secure.; Enabled WLCG Bearer Tokens support in RDavix; Bearer tokens are part of WLCG capability-based infrastructure with capability-based scheme which uses an infrastructure that describes what the bearer is allowed to do as opposed to who that bearer is. Token discovery procedure are developed according to the WLCG Bearer Token Discovery specification document. Short overview:. If the BEARER_TOKEN environment variable is set, then the value is taken to be the token contents.; If the BEARER_TOKEN_FILE environment variable is set, then its value is interpreted as a filename. The contents of the specified file are taken to be the token contents.; If the XDG_RUNTIME_DIR environment variable is set, then take the toke",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:26635,secur,security,26635,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,2,"['access', 'secur']","['access', 'security']"
Security,"BaseTGLPlotPainter::fSelectionBase; Bool_tTGLPlotPainter::fSelectionPass; Bool_tTGLPlotPainter::fUpdateSelection; TAxis*TGLPlotPainter::fXAxis; Double_tTGLPlotPainter::fXOYSectionPos; Double_tTGLPlotPainter::fXOZSectionPos; TAxis*TGLPlotPainter::fYAxis; Double_tTGLPlotPainter::fYOZSectionPos; TAxis*TGLPlotPainter::fZAxis; vector<Double_t>TGLPlotPainter::fZLevels. private:. vector<Int_t>fBinColors; TStringfBinInfoUsed by GetPlotInfo.; list<Rgl::Pad::Tesselation_t>fCapsCaps for all bins.; vector<Double_t>fPolygonTemporary array for polygon's vertices.; Bool_tfZLogChange in logZ updates only bin heights.; Double_tfZMin. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLH2PolyPainter(TH1* hist, TGLPlotCamera* camera, TGLPlotCoordinates* coord); Ctor. char * GetPlotInfo(Int_t px, Int_t py); Show number of bin and bin contents, if bin is under the cursor. Bool_t InitGeometry(); Tesselate polygons, if not done yet.; All pointers are validated here (and in functions called from here).; If any pointer is invalid - zero, or has unexpected type (dynamic_cast fails) -; InitGeometry will return false and nothing will be painted later.; That's why there are no checks in other functions. void StartPan(Int_t px, Int_t py); User clicks on a lego with middle mouse button (middle for pad). void Pan(Int_t px, Int_t py); Mouse events handler. void AddOption(const TString& stringOption); No additional options. void ProcessEvent(Int_t event, Int_t px, Int_t py); No events. void InitGL() const; Initialize some gl state variables. void DeInitGL() const; Return some gl states to original values. void DrawPlot() const; Draw extruded polygons and plot's frame. void DrawExtrusion() const; Extruded part of bins.; GL_QUADS, GL_QUAD_STRIP - have the same time on my laptop, so I use; GL_QUADS and forgot about vertex arrays (can require more memory BTW). void DrawExtrusion(const TGraph* polygon, Double_t zMin, Double_t zMax, Int_t nBin) const; Extrude poly",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLH2PolyPainter.html:4383,validat,validated,4383,root/html528/TGLH2PolyPainter.html,https://root.cern,https://root.cern/root/html528/TGLH2PolyPainter.html,2,['validat'],['validated']
Security,"BigNumber); Add all files referenced in the list to the chain. The object type in the; list must be either TFileInfo or TObjString or TUrl .; The function return 1 if successful, 0 otherwise. TFriendElement* AddFriend(const char* chain, const char* dummy /* = """" */); -- Add a TFriendElement to the list of friends of this chain. A TChain has a list of friends similar to a tree (see TTree::AddFriend).; You can add a friend to a chain with the TChain::AddFriend method, and you; can retrieve the list of friends with TChain::GetListOfFriends.; This example has four chains each has 20 ROOT trees from 20 ROOT files. TChain ch(""t""); // a chain with 20 trees from 20 files; TChain ch1(""t1"");; TChain ch2(""t2"");; TChain ch3(""t3"");; Now we can add the friends to the first chain. ch.AddFriend(""t1""); ch.AddFriend(""t2""); ch.AddFriend(""t3""). /*; ; */. The parameter is the name of friend chain (the name of a chain is always; the name of the tree from which it was created).; The original chain has access to all variable in its friends.; We can use the TChain::Draw method as if the values in the friends were; in the original chain.; To specify the chain to use in the Draw method, use the syntax:. <chainname>.<branchname>.<varname>; If the variable name is enough to uniquely identify the variable, you can; leave out the chain and/or branch name.; For example, this generates a 3-d scatter plot of variable ""var"" in the; TChain ch versus variable v1 in TChain t1 versus variable v2 in TChain t2. ch.Draw(""var:t1.v1:t2.v2"");; When a TChain::Draw is executed, an automatic call to TTree::AddFriend; connects the trees in the chain. When a chain is deleted, its friend; elements are also deleted. The number of entries in the friend must be equal or greater to the number; of entries of the original chain. If the friend has fewer entries a warning; is given and the resulting histogram will have missing entries.; For additional information see TTree::AddFriend. TFriendElement* AddFriend(const char* ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TChain.html:31163,access,access,31163,root/html526/TChain.html,https://root.cern,https://root.cern/root/html526/TChain.html,1,['access'],['access']
Security,"Bits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TStringTCollection::fNamename of the collection; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; THashTable*fTableHashtable used for quick lookup of objects. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THashList(Int_t capacity = TCollection::kInitHashTableCapacity, Int_t rehash = 0); Create a THashList object. Capacity is the initial hashtable capacity; (i.e. number of slots), by default kInitHashTableCapacity = 17, and; rehash is the value at which a rehash will be triggered. I.e. when the; average size of the linked lists at a slot becomes longer than rehash; then the hashtable will be resized and refilled to reduce the collision; rate to about 1. The higher the collision rate, i.e. the longer the; linked lists, the longer lookup will take. If rehash=0 the table will; NOT automatically be rehashed. Use Rehash() for manual rehashing.; WARNING !!!; If the name of an object in the HashList is modified, The hashlist; must be Rehashed. THashList(TObject* parent, Int_t capacity = TCollection::kInitHashTableCapacity, Int_t rehash = 0); For backward compatibility only. Use other ctor. ~THashList(); Delete a hashlist. Objects are not deleted unless the THashList is the; owner (set via SetOwner()). void AddFirst(TObject* obj); Add object at the beginning of the list. void AddFirst(TObject* obj, Option_t* opt); Add object ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THashList.html:10623,hash,hashtable,10623,root/html528/THashList.html,https://root.cern,https://root.cern/root/html528/THashList.html,4,['hash'],['hashtable']
Security,Bits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TArchiveFile*TFile::fArchive!Archive file from which we read this file; Long64_tTFile::fArchiveOffset!Offset at which file starts in archive; TFileOpenHandle*TFile::fAsyncHandle!For proper automatic cleanup; TFile::EAsyncOpenStatusTFile::fAsyncOpenStatus!Status of an asynchronous open request; Long64_tTFile::fBEGINFirst used byte in file; TStringfBasicUrlbasic url without authentication and options; TStringfBasicUrlOrgsave original url in case of temp redirection; Int_tTDirectoryFile::fBufferSizeDefault buffer size to create new TKeys; Long64_tTFile::fBytesReadNumber of bytes read from this file; Long64_tTFile::fBytesReadExtraNumber of extra bytes (overhead) read by the readahead buffer; Long64_tTFile::fBytesWriteNumber of bytes written to this file; TFileCacheRead*TFile::fCacheRead!Pointer to the read cache (if any); TFileCacheWrite*TFile::fCacheWrite!Pointer to the write cache (if any); TArrayC*TFile::fClassIndex!Index of TStreamerInfo classes written to this file; Int_tTFile::fCompressCompression level and algorithm; TDirectory::TContext*TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; Int_tTFile::fDFile descriptor; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; Long64_tTFile::fENDLast used byte in file; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TFile::fFreeFree segments linked list table; Bool_tfHTTP11true if server support HTTP/1.1; Bool_tfHasModRoottrue if server has mod_root installed; TList*TFile::fInfoCache!Cached list of the streamer infos in this file; Bool_tTFile::fInitDone!True if the file has been initialized; Bool_tTFile::fIsArchive!True if this is a pure arc,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TWebFile.html:18570,authenticat,authentication,18570,root/html532/TWebFile.html,https://root.cern,https://root.cern/root/html532/TWebFile.html,1,['authenticat'],['authentication']
Security,"Bool_t SetPort(const TString& port); Set port component of URI:; port = *DIGIT. Bool_t SetPath(const TString& path); Set path component of URI:; path = path-abempty ; begins with ""/"" or is empty; / path-absolute ; begins with ""/"" but not ""//""; / path-noscheme ; begins with a non-colon segment; / path-rootless ; begins with a segment; / path-empty ; zero characters. Bool_t SetFragment(const TString& fragment); Set fragment component of URI:; fragment = *( pchar / ""/"" / ""?"" ). Bool_t IsFragment(const TString& ); Returns kTRUE if string qualifies as valid fragment component; fragment = *( pchar / ""/"" / ""?"" ). void Print(Option_t* option = """") const; Display function,; option ""d"" .. debug output; anything else .. simply print URI. void Reset(); Initialize this URI object.; Set all TString members to empty string,; set all Bool_t members to kFALSE. Bool_t SetUri(const TString& uri); Parse URI and set the member variables accordingly,; returns kTRUE if URI validates, and kFALSE otherwise:; URI = scheme "":"" hier-part [ ""?"" query ] [ ""#"" fragment ]; hier-part = ""//"" authority path-abempty; / path-absolute; / path-rootless; / path-empty. const TString GetHierPart() const; hier-part = ""//"" authority path-abempty; / path-absolute; / path-rootless; / path-empty. const TString GetRelativePart() const; relative-part = ""//"" authority path-abempty; / path-absolute; / path-noscheme; / path-empty. Bool_t SetHierPart(const TString& hier); returns hier-part component of URI; hier-part = ""//"" authority path-abempty; / path-absolute; / path-rootless; / path-empty. Bool_t IsHierPart(const TString& ); Returns kTRUE if string qualifies as hier-part:. hier-part = ""//"" authority path-abempty; / path-absolute; / path-rootless; / path-empty. Bool_t IsRelativePart(const TString& ); Returns kTRUE is string qualifies as relative-part:; relative-part = ""//"" authority path-abempty; / path-absolute; / path-noscheme; / path-empty. Bool_t SetRelativePart(const TString& ); Returns kTRUE is string qualifi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUri.html:11919,validat,validates,11919,root/html528/TUri.html,https://root.cern,https://root.cern/root/html528/TUri.html,6,['validat'],['validates']
Security,"Bool_t HasSource (const TString &source) const;  Return true if one of the rule's data member source is 'source'. ;  ; Bool_t HasTarget (const TString &target) const;  Return true if one of the rule's data member target is 'target'. ;  ; TClass * IsA () const override;  ; Bool_t IsAliasRule () const;  Return kTRUE if the rule is a strict renaming of one of the data member of the class. ;  ; Bool_t IsRenameRule () const;  Return kTRUE if the rule is a strict renaming of the class to a new name. ;  ; Bool_t IsValid () const;  Return kTRUE if this rule is valid. ;  ; void ls (Option_t *option="""") const override;  The ls function lists the contents of a class on stdout. ;  ; TSchemaRule & operator= (const TSchemaRule &rhs);  Copy operator. ;  ; Bool_t operator== (const TSchemaRule &rhs) const;  Return true if the rule have the same effects. ;  ; void SetAttributes (const TString &attributes);  Set the attributes code of this rule. ;  ; Bool_t SetChecksum (const TString &checksum);  Set the checksum string - returns kFALSE if the format is incorrect. ;  ; void SetCode (const TString &code);  Set the source code of this rule. ;  ; void SetEmbed (Bool_t embed);  Set whether this rule should be save in the ROOT file (if true) ;  ; Bool_t SetFromRule (const char *rule);  Set the content fot this object from the rule See TClass::AddRule for details on the syntax. ;  ; void SetInclude (const TString &include);  Set the comma separated list of header files to include to be able to compile this rule. ;  ; void SetReadFunctionPointer (ReadFuncPtr_t ptr);  Set the pointer to the function to be run for the rule (if it is a read rule). ;  ; void SetReadRawFunctionPointer (ReadRawFuncPtr_t ptr);  Set the pointer to the function to be run for the rule (if it is a raw read rule). ;  ; void SetRuleType (RuleType_t type);  Set the type of the rule. ;  ; void SetSource (const TString &source);  Set the list of source members. ;  ; void SetSourceClass (const TString &classname);  Set the so",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:4199,checksum,checksum,4199,doc/v632/classROOT_1_1TSchemaRule.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html,4,['checksum'],['checksum']
Security,"BrowserImpABC describing GUI independent browser implementation protocol.Definition TBrowserImp.h:29; TBrowserImp::ExecuteDefaultActionvirtual void ExecuteDefaultAction(TObject *)Definition TBrowserImp.h:51; TBrowserImp::CloseTabsvirtual void CloseTabs()Definition TBrowserImp.h:50; TBrowserImp::RemoveCheckBoxvirtual void RemoveCheckBox(TObject *)Definition TBrowserImp.h:47; TBrowserImp::AddCheckBoxvirtual void AddCheckBox(TObject *, Bool_t=kFALSE)Definition TBrowserImp.h:45; TBrowserImp::BrowseObjvirtual void BrowseObj(TObject *)Definition TBrowserImp.h:48; TBrowserImp::RecursiveRemovevirtual void RecursiveRemove(TObject *)Definition TBrowserImp.h:53; TBrowserImp::Refreshvirtual void Refresh(Bool_t=kFALSE)Definition TBrowserImp.h:54; TBrowserImp::CheckObjectItemvirtual void CheckObjectItem(TObject *, Bool_t=kFALSE)Definition TBrowserImp.h:46; TBrowserImp::Addvirtual void Add(TObject *, const char *, Int_t)Definition TBrowserImp.h:44; TBrowserObjectThis class is designed to wrap a Foreign object in order to inject it into the Browse sub-system.Definition TBrowser.cxx:80; TBrowserObject::TBrowserObjectTBrowserObject(void *obj, TClass *cl, const char *brname)Definition TBrowser.cxx:83; TBrowserObject::IsATClass * IsA() const overrideDefinition TBrowser.cxx:95; TBrowserObject::~TBrowserObject~TBrowserObject()Definition TBrowser.cxx:91; TBrowserObject::IsFolderBool_t IsFolder() const overrideReturns kTRUE in case object contains browsable objects (like containers or lists of other objects).Definition TBrowser.cxx:94; TBrowserObject::fClassTClass * fClass! pointer to class of the foreign objectDefinition TBrowser.cxx:99; TBrowserObject::fObjvoid * fObj! pointer to the foreign objectDefinition TBrowser.cxx:98; TBrowserObject::Browsevoid Browse(TBrowser *b) overrideBrowse object. May be overridden for another default action.Definition TBrowser.cxx:93; TBrowserTimerCalled whenever timer times out.Definition TBrowser.cxx:51; TBrowserTimer::NotifyBool_t Notify() overrideThis me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBrowser_8cxx_source.html:17223,inject,inject,17223,doc/master/TBrowser_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBrowser_8cxx_source.html,1,['inject'],['inject']
Security,"Buffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html:1602,hash,hash,1602,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooFit_1_1StoredFitResult.html,3,['hash'],['hash']
Security,"Buffer(const char* buf, Int_t len); Write specified byte range to remote file via rootd daemon.; Returns kTRUE in case of error. Int_t Recv(Int_t& status, EMessageTypes& kind); Return status from rootd server and message kind. Returns -1 in; case of error otherwise 8 (sizeof 2 words, status and kind). void Seek(Long64_t offset, TFile::ERelativeTo pos = kBeg); Set position from where to start reading. void ConnectServer(Int_t* stat, EMessageTypes* kind, Int_t netopt, Int_t tcpwindowsize, Bool_t forceOpen, Bool_t forceRead); Connect to remote rootd server. void Create(const char* url, Option_t* option, Int_t netopt); Create a NetFile object. A net file is the same as a TFile; except that it is being accessed via a rootd server. The url; argument must be of the form: root[s|k]://host.dom.ain/file.root.; When protocol is ""roots"" try using SRP authentication.; When protocol is ""rootk"" try using kerberos5 authentication.; If the file specified in the URL does not exist, is not accessable; or can not be created the kZombie bit will be set in the TNetFile; object. Use IsZombie() to see if the file is accessable.; If the remote daemon thinks the file is still connected, while you are; sure this is not the case you can force open the file by preceding the; option argument with an ""-"", e.g.: ""-recreate"". Do this only; in cases when you are very sure nobody else is using the file.; To bypass the writelock on a file, to allow the reading of a file; that is being written by another process, explicitely specify the; ""+read"" option (""read"" being the default option).; The netopt argument can be used to specify the size of the tcp window in; bytes (for more info see: http://www.psc.edu/networking/perf_tune.html).; The default and minimum tcp window size is 65535 bytes.; If netopt < -1 then |netopt| is the number of parallel sockets that will; be used to connect to rootd. This option should be used on fat pipes; (i.e. high bandwidth, high latency links). The ideal number of parallel; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TNetFile.html:27318,access,accessable,27318,root/html528/TNetFile.html,https://root.cern,https://root.cern/root/html528/TNetFile.html,3,['access'],['accessable']
Security,"Buffer(const char* buf, Int_t len); Write specified byte range to remote file via rootd daemon.; Returns kTRUE in case of error. Int_t Recv(Int_t& status, EMessageTypes& kind); Return status from rootd server and message kind. Returns -1 in; case of error otherwise 8 (sizeof 2 words, status and kind). void Seek(Long64_t offset, TFile::ERelativeTo pos = kBeg); Set position from where to start reading. void ConnectServer(Int_t* stat, EMessageTypes* kind, Int_t netopt, Int_t tcpwindowsize, Bool_t forceOpen, Bool_t forceRead); Connect to remote rootd server. void Create(const char* url, Option_t* option, Int_t netopt); Create a NetFile object. A net file is the same as a TFile; except that it is being accessed via a rootd server. The url; argument must be of the form: root[s|k]://host.dom.ain/file.root.; When protocol is ""roots"" try using SRP authentication.; When protocol is ""rootk"" try using kerberos5 authentication.; If the file specified in the URL does not exist, is not accessable; or can not be created the kZombie bit will be set in the TNetFile; object. Use IsZombie() to see if the file is accessable.; If the remote daemon thinks the file is still connected, while you are; sure this is not the case you can force open the file by preceding the; option argument with an ""-"", e.g.: ""-recreate"". Do this only; in cases when you are very sure nobody else is using the file.; To bypass the writelock on a file, to allow the reading of a file; that is being written by another process, explicitly specify the; ""+read"" option (""read"" being the default option).; The netopt argument can be used to specify the size of the tcp window in; bytes (for more info see: http://www.psc.edu/networking/perf_tune.html).; The default and minimum tcp window size is 65535 bytes.; If netopt < -1 then |netopt| is the number of parallel sockets that will; be used to connect to rootd. This option should be used on fat pipes; (i.e. high bandwidth, high latency links). The ideal number of parallel; s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNetFile.html:28311,access,accessable,28311,root/html534/TNetFile.html,https://root.cern,https://root.cern/root/html534/TNetFile.html,3,['access'],['accessable']
Security,"CEnvironSmall helper to save proxy environment in the event of recursive calls ;  CEnvironBase;  CInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CIteratorsSmall helper to implement the function to create,access and destroy iterators ;  CIterators< Cont_t, true >;  CIterators< std::vector< T >, false >;  CIteratorValueSmall helper to encapsulate whether to return the value pointed to by the iterator or its address ;  CIteratorValue< Cont_t, value_ptr * >;  CMapInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CPairHolder;  CPushbackSmall helper to encapsulate all necessary data accesses for containers like vector, list, deque ;  CPushback< Internal::TStdBitsetHelper< Bitset_t > >;  CPushback< std::vector< bool > >;  CPushfrontSmall helper to encapsulate all necessary data accesses for containers like forward_list ;  CSfinaeHelper;  CTypeSmall helper to encapsulate basic data accesses for all STL continers ;  ►CType< Internal::TStdBitsetHelper< Bitset_t > >;  ►CIterators;  CPtrSize_t;  ►CType< std::vector< Bool_t > >;  CIterators;  CTFutureImpl;  CTRangeStaticCastTRangeStaticCast is an adaptater class that allows the typed iteration through a TCollection ;  ►CTSchemaRuleSet;  CTMatches;  ►CTStatusBitsChecker;  CRegistry;  CTTypedIterTTypedIter is a typed version of TIter ;  ►NExecutorUtilsThis namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce ;  CReduceObjectsMerge collection of TObjects ;  ►NExperimental;  ►NDetail;  CTArgsMenuItem;  CTCheckedMenuItem;  CTHistBinIterIterates over the bins of a THist or THistImpl ;  CTHistBinPtrPoints to a histogram bin (or actually a THistBinRef) ;  CTHistBinRefRepresents a bin reference ;  CTHistBinStatConst view on a bin's statistical data ;  CTHistDataA THistImplBase's data, provides accessors to all its statistics ;  CTHistImpl;  CTHistImplBaseInterface class for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:12197,access,accesses,12197,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,2,['access'],['accesses']
Security,"CEnvironSmall helper to save proxy environment in the event of recursive calls ;  CEnvironBase;  CInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CIteratorsSmall helper to implement the function to create,access and destroy iterators ;  CIterators< Cont_t, true >;  CIterators< std::vector< T >, false >;  CIteratorValueSmall helper to encapsulate whether to return the value pointed to by the iterator or its address ;  CIteratorValue< Cont_t, value_ptr * >;  CMapInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CPairHolder;  CPushbackSmall helper to encapsulate all necessary data accesses for containers like vector, list, deque ;  CPushback< Internal::TStdBitsetHelper< Bitset_t > >;  CPushback< std::vector< bool > >;  CPushfrontSmall helper to encapsulate all necessary data accesses for containers like forward_list ;  CSfinaeHelper;  CTypeSmall helper to encapsulate basic data accesses for all STL continers ;  ►CType< Internal::TStdBitsetHelper< Bitset_t > >;  ►CIterators;  CPtrSize_t;  ►CType< std::vector< Bool_t > >;  CIterators;  ►CTSchemaRuleSet;  CTMatches;  ►NExecutorUtils;  CReduceObjectsMerge collection of TObjects ;  ►NExperimental;  ►NDetail;  CTHistBinIterIterates over the bins of a THist or THistImpl ;  CTHistBinPtrPoints to a histogram bin (or actually a THistBinRef) ;  CTHistBinRefRepresents a bin reference ;  CTHistBinStatConst view on a bin's statistical data ;  CTHistDataA THistImplBase's data, provides accessors to all its statistics ;  CTHistImpl;  CTHistImplBaseInterface class for THistImpl ;  CTHistImplPrecisionAgnosticBaseBase class for THistImplBase that abstracts out the histogram's PRECISION ;  ►NInternal;  CAxisConfigToTypeConverts a TAxisConfig of whatever kind to the corresponding TAxisBase-derived object ;  CAxisConfigToType< TAxisConfig::kEquidistant >;  CAxisConfigToType< TAxisConfig::kGrow >;  CAxisConfigToType< TAxisConfig::kIrreg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:11300,access,accesses,11300,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['access'],['accesses']
Security,"CEnvironSmall helper to save proxy environment in the event of recursive calls ;  CEnvironBase;  CInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CIteratorsSmall helper to implement the function to create,access and destroy iterators ;  CIterators< Cont_t, true >;  CIterators< std::vector< T >, false >;  CIteratorValueSmall helper to encapsulate whether to return the value pointed to by the iterator or its address ;  CIteratorValue< Cont_t, value_ptr * >;  CMapInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CPairHolder;  CPushbackSmall helper to encapsulate all necessary data accesses for containers like vector, list, deque ;  CPushback< Internal::TStdBitsetHelper< Bitset_t > >;  CPushback< std::vector< bool > >;  CPushfrontSmall helper to encapsulate all necessary data accesses for containers like forward_list ;  CSfinaeHelper;  CTypeSmall helper to encapsulate basic data accesses for all STL continers ;  ►CType< Internal::TStdBitsetHelper< Bitset_t > >;  ►CIterators;  CPtrSize_t;  ►CType< std::vector< Bool_t > >;  CIterators;  ►CTSchemaRuleSet;  CTMatches;  ►NExecutorUtilsThis namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce ;  CReduceObjectsMerge collection of TObjects ;  ►NExperimental;  ►NDetail;  CTHistBinIterIterates over the bins of a THist or THistImpl ;  CTHistBinPtrPoints to a histogram bin (or actually a THistBinRef) ;  CTHistBinRefRepresents a bin reference ;  CTHistBinStatConst view on a bin's statistical data ;  CTHistDataA THistImplBase's data, provides accessors to all its statistics ;  CTHistImpl;  CTHistImplBaseInterface class for THistImpl ;  CTHistImplPrecisionAgnosticBaseBase class for THistImplBase that abstracts out the histogram's PRECISION ;  ►NInternal;  CAxisConfigToTypeConverts a TAxisConfig of whatever kind to the corresponding TAxisBase-derived object ;  CAxisConfigTo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:11766,access,accesses,11766,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['access'],['accesses']
Security,"CN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>(const shared_ptr<ROOT::Fit::BinData>& data, const shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>& func); voidSetData(const shared_ptr<ROOT::Fit::BinData>& data); voidSetModelFunction(const shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>& func). Data Members; public:. static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kLeastSquare; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kLogLikelihood; static ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::Type_tROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::kUndefined. protected:. shared_ptr<ROOT::Fit::BinData>fData; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>fFunc. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; std::shared_ptr<DataType> DataPtr() const; access to data pointer. { return fData; }. std::shared_ptr<IModelFunction> ModelFunctionPtr() const; access to function pointer. { return fFunc; }. void SetData(const shared_ptr<ROOT::Fit::BinData>& data); Set the data pointer. { fData = data; }. void SetModelFunction(const shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>& func); Set the function pointer. { fFunc = func; }. » Author: L. Moneta 25 Nov 2014 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__BasicFCN_-p0Math__IBaseFunctionMultiDim_-p1BinData_.html:4800,access,access,4800,root/html604/ROOT__Fit__BasicFCN_-p0Math__IBaseFunctionMultiDim_-p1BinData_.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__BasicFCN_-p0Math__IBaseFunctionMultiDim_-p1BinData_.html,2,['access'],['access']
Security,"CVectorHelper< double >;  CVectorHelper< float >;  CVectorHelper< float8 >;  CVectorHelper< int >;  CVectorHelper< M256 >;  CVectorHelper< signed short >;  CVectorHelper< unsigned int >;  CVectorHelper< unsigned short >;  CVectorHelperSize;  CVectorTraits;  CVectorTypeHelper;  CVectorTypeHelper< double >;  CVectorTypeHelper< float >;  CVectorTypeHelper< sfloat >;  CWriteMaskedVector;  C_MemorySizeCalculation;  CBinaryOperation;  CCpuIdThis class is available for x86 / AMD64 systems to read and interpret information about the CPU's capabilities ;  CDetermineEntryType;  CDetermineEntryType< sfloat >;  CImplementationT;  CMath;  CMath< double >;  CMath< float >;  CMemoryA helper class for fixed-size two-dimensional arrays ;  CMemory< V, 0u, 0u >A helper class that is very similar to Memory<V, Size> but with dynamically allocated memory and thus dynamic size ;  CMemory< V, Size, 0u >A helper class to simplify usage of correctly aligned and padded memory, allowing both vector and scalar access ;  CMemoryBaseCommon interface to all Memory classes, independent of allocation on the stack or heap ;  CMemoryDimensionBase;  CMemoryDimensionBase< V, Parent, 1, RowMemory >;  CMemoryDimensionBase< V, Parent, 2, RowMemory >;  CNegateTypeHelper;  CNegateTypeHelper< unsigned char >;  CNegateTypeHelper< unsigned int >;  CNegateTypeHelper< unsigned short >;  COperand;  Csfloat;  CTrigonometric;  CVectorPointerHelperHelper class for the Memory::vector(size_t) class of functions ;  CVectorPointerHelperConstHelper class for the Memory::vector(size_t) class of functions ;  C_ConfigurationConfiguration ------------------------------------------------------------— ;  C_ExpandMacroFunctionPut std namespace directly onto ROOT ----------------------------------—— ;  CModuleFacadeAllow loading ROOT classes as attributes ---------------------------------— ;  CRootNameCompleter;  ►CTAxisBaseHistogram axis base class ;  Cconst_iteratorRandom const_iterator through bins ;  ►CTAxisConfigObjects used ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:68249,access,access,68249,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,1,['access'],['access']
Security,Cache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistry_codeReg! Registry of component analytical integration codes; Double_t*_coefCache! Transiet cache with transformed values of coefficients; Int_t_coefErrCount! Coefficient error counter; TIterator*_coefIter! Iterator over coefficient list; RooListProxy_coefListList of coefficients; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveLastCoefFlag indicating if last PDFs coefficient was supplied in the ctor; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddPdf.html:41888,access,access,41888,root/html534/RooAddPdf.html,https://root.cern,https://root.cern/root/html534/RooAddPdf.html,1,['access'],['access']
Security,"CacheUnzipSpecialization of TTreeCache for parallel Unzipping ;  ►CTTreeClonerClass implementing or helping the various TTree cloning method ;  CCompareEntry;  CCompareSeek;  CTTreeDrawArgsParserA class that parses all parameters for TTree::Draw() ;  ►CTTreeFormulaUsed to pass a selection expression to the Tree drawing routine ;  CRealInstanceCache;  CTTreeFormulaManagerUsed to coordinate one or more TTreeFormula objects ;  CTTreeFriendLeafIterIterator on all the leaves in a TTree and its friend ;  CTTreeIndexA Tree Index with majorname and minorname ;  CTTreeInput;  CTTreePerfStatsTTree I/O performance measurement ;  CTTreePlayerImplement some of the functionality of the class TTree requiring access to extra libraries (Histogram, display, etc) ;  ►CTTreeReaderTTreeReader is a simple, robust and fast interface to read values from a TTree, TChain or TNtuple ;  CIterator_tIterate through the entries of a TTree ;  ►CTTreeReaderArrayExtracts array data from a TTree ;  CIterator_tRandom access iterator to the elements of a TTreeReaderArray ;  CTTreeReaderValueExtracts data from a TTree ;  CTTreeResultClass defining interface to a TTree query result with the same interface as for SQL databases ;  CTTreeRowClass defining interface to a row of a TTree query result ;  CTTreeSQLImplement TTree for a SQL backend ;  CTTreeTableInterfaceTTreeTableInterface is used to interface to data that is stored in a TTree ;  CTTreeViewA helper class that encapsulates a file and a tree ;  CTTreeViewerA graphic user interface designed to handle ROOT trees and to take advantage of TTree class features ;  CTTUBEA tube ;  CTTUBSA segment of a tube ;  CTTVLVContainerThis class represent the list view container for the ;  CTTVLVEntryThis class represent entries that goes into the TreeViewer listview container ;  CTTVRecordI/O classes for TreeViewer session handling ;  CTTVSessionI/O classes for TreeViewer session handling ;  CTUDPSocket;  CTUnfoldAn algorithm to unfold distributions from detector t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:210210,access,access,210210,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,1,['access'],['access']
Security,"Callbacks;  Registered callbacks to call at the beginning of each ""data block"". ;  ; std::vector< ROOT::RDF::RSampleInfo > fSampleInfos;  ; std::unordered_map< std::string, ROOT::RDF::Experimental::RSample * > fSampleMap;  Keys are fname + ""/"" + treename as RSampleInfo::fID; Values are pointers to the corresponding sample. ;  ; std::vector< ROOT::RDF::Experimental::RSample > fSamples;  Samples need to survive throughout the whole event loop, hence stored as an attribute. ;  ; std::vector< std::string > fSuppressErrorsForMissingBranches {};  ; std::shared_ptr< TTree > fTree {nullptr};  Shared pointer to the input TTree. ;  ; std::set< std::pair< std::string_view, std::unique_ptr< ROOT::Internal::RDF::RDefinesWithReaders > > > fUniqueDefinesWithReaders;  ; std::set< std::pair< std::string_view, std::unique_ptr< ROOT::Internal::RDF::RVariationsWithReaders > > > fUniqueVariationsWithReaders;  ; ColumnNames_t fValidBranchNames;  Cache of the tree/chain branch names. Never access directy, always use GetBranchNames(). ;  . Friends; struct RCallCleanUpTask;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Detail::RDF::RNodeBase; RLoopManager * fLoopManager;  ; unsigned int fNChildren {0};  Number of nodes of the functional graph hanging from this object. ;  ; unsigned int fNStopsReceived {0};  Number of times that a children node signaled to stop processing entries. ;  ; std::vector< std::string > fVariations;  List of systematic variations that affect this node. ;  . #include <ROOT/RDF/RLoopManager.hxx>. Inheritance diagram for ROOT::Detail::RDF::RLoopManager:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ColumnNames_t. using ROOT::Detail::RDF::RLoopManager::ColumnNames_t = std::vector<std::string>. private . Definition at line 115 of file RLoopManager.hxx. Member Enumeration Documentation. ◆ ELoopType. enum class ROOT::Detail::RDF::RLoopManager::ELoopType. strongpr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html:10345,access,access,10345,doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,1,['access'],['access']
Security,"Cexternal_constructor< value_t::array >;  Cexternal_constructor< value_t::boolean >;  Cexternal_constructor< value_t::number_float >;  Cexternal_constructor< value_t::number_integer >;  Cexternal_constructor< value_t::number_unsigned >;  Cexternal_constructor< value_t::object >;  Cexternal_constructor< value_t::string >;  Cfrom_json_fn;  Chas_from_json;  Chas_non_default_from_json;  Chas_to_json;  Cis_basic_json_nested_type;  Cis_compatible_array_type;  Cis_compatible_integer_type;  Cis_compatible_integer_type_impl;  Cis_compatible_integer_type_impl< true, RealIntegerType, CompatibleNumberIntegerType >;  Cis_compatible_object_type;  Cis_compatible_object_type_impl;  Cis_compatible_object_type_impl< true, RealType, CompatibleObjectType >;  Cnegation;  Cpriority_tag;  Cpriority_tag< 0 >;  Cstatic_const;  Cto_json_fn;  Cadl_serializerDefault JSONSerializer template argument ;  ►Cbasic_jsonClass to store JSON values ;  Cinternal_iteratorIterator value ;  Citer_implTemplate for a random access iterator for the basic_json class ;  ►Citeration_proxyProxy class for the iterator_wrapper functions ;  Citeration_proxy_internalHelper class for iteration ;  Cjson_pointerJSON Pointer ;  Cjson_reverse_iteratorTemplate for a reverse iterator class ;  Cjson_valueJSON value ;  ►ClexerLexical analysis ;  CstrtonumParse string into a built-in arithmetic type as if the current locale is POSIX ;  CnumtostrLocale-independent serialization for built-in arithmetic types ;  CparserSyntax analysis ;  Cprimitive_iterator_tIterator for primitive JSON types ;  NnormalDist;  Nntuple1;  NnumberEntry;  Nparse_CSV_file_with_TTree_ReadStream;  Nprincipal;  ►NPyROOT;  NPyStrings;  NUtility;  ►CMethodProxy;  CMethodInfo_t;  CObjectProxy;  CPropertyProxy;  CPyCallable;  CPyGILRAII;  CPyRootClassType object to hold TClassRef instance (this is only semantically a presentation of PyRootType instances, not in a C++ sense) ;  CTCallContext;  CTClassMethodHolder;  CTConstructorHolder;  CTConverter;  CTCppObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/namespaces.html:2791,access,access,2791,doc/v616/namespaces.html,https://root.cern,https://root.cern/doc/v616/namespaces.html,1,['access'],['access']
Security,"Cexternal_constructor< value_t::array >;  Cexternal_constructor< value_t::boolean >;  Cexternal_constructor< value_t::number_float >;  Cexternal_constructor< value_t::number_integer >;  Cexternal_constructor< value_t::number_unsigned >;  Cexternal_constructor< value_t::object >;  Cexternal_constructor< value_t::string >;  Cfrom_json_fn;  Chas_from_json;  Chas_non_default_from_json;  Chas_to_json;  Cis_basic_json_nested_type;  Cis_compatible_array_type;  Cis_compatible_integer_type;  Cis_compatible_integer_type_impl;  Cis_compatible_integer_type_impl< true, RealIntegerType, CompatibleNumberIntegerType >;  Cis_compatible_object_type;  Cis_compatible_object_type_impl;  Cis_compatible_object_type_impl< true, RealType, CompatibleObjectType >;  Cnegation;  Cpriority_tag;  Cpriority_tag< 0 >;  Cstatic_const;  Cto_json_fn;  Cadl_serializerDefault JSONSerializer template argument ;  ►Cbasic_jsonClass to store JSON values ;  Cinternal_iteratorIterator value ;  Citer_implTemplate for a random access iterator for the basic_json class ;  ►Citeration_proxyProxy class for the iterator_wrapper functions ;  Citeration_proxy_internalHelper class for iteration ;  Cjson_pointerJSON Pointer ;  Cjson_reverse_iteratorTemplate for a reverse iterator class ;  Cjson_valueJSON value ;  ►ClexerLexical analysis ;  CstrtonumParse string into a built-in arithmetic type as if the current locale is POSIX ;  CnumtostrLocale-independent serialization for built-in arithmetic types ;  CparserSyntax analysis ;  Cprimitive_iterator_tIterator for primitive JSON types ;  ►NPyROOT;  ►CMethodProxy;  CMethodInfo_t;  CObjectProxy;  CPropertyProxy;  CPyCallable;  CPyGILRAII;  CPyRootClassType object to hold TClassRef instance (this is only semantically a presentation of PyRootType instances, not in a C++ sense) ;  CTCallContext;  CTClassMethodHolder;  CTConstructorHolder;  CTConverter;  CTCppObjectArrayConverter;  CTCppObjectArrayExecutor;  CTCppObjectBySmartPtrExecutor;  CTCppObjectBySmartPtrPtrExecutor;  CTCpp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:1647,access,access,1647,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,2,['access'],['access']
Security,"Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Types; enum  { ;   kClassDoc_Uninitialized; , kClassDoc_LookingNothingFound; , kClassDoc_LookingHaveSomething; , kClassDoc_Written; , ;   kClassDoc_Ignore; , kClassDoc_NumStates. };  ; enum  EDocContext { kIgnore; , kDocFunc; , kDocClass; , kNumDocContexts; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions; void AddClassDataMembersRecursively (TBaseClass *bc);  Add data members of fCurrentClass and of bc to datamembers, recursively. ;  ; void AddClassMethodsRecursively (TBaseClass *bc);  Add accessible (i.e. ;  ; EParseContext Context () const;  ; virtual void ExpandCPPLine (TString &line, Ssiz_t &pos);  Expand preprocessor statements. ;  ; virtual Bool_t HandleDirective (TString &keyword, Ssiz_t &pos, TString &word, Ssiz_t &copiedToCommentUpTo);  Process directives to the documentation engine, like ""Begin_Html"" / ""End_Html"", ""Begin_Macro"" / ""End_Macro"", and ""Begin_Latex"" / ""End_Latex"". ;  ; void InitKeywords () const;  fill C++ keywords into fgKeywords ;  ; virtual TClass * IsDirective (const TString &line, Ssiz_t pos, const TString &word, Bool_t &begin) const;  return whether word at line's pos is a valid directive, and returns its TDocDirective's TClass object, or 0 if it's not a directive. ;  ; TMethod * LocateMethodInCurrentLine (Ssiz_t &posMethodName, TString &ret, TString &name, TString &params, Bool_t &isconst, std::ostream &srcOut, TString &anchor, std::ifstream &sourcefile, Bool_t allowPureVirtual);  Search for a method starting at posMetho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocParser.html:12879,access,accessible,12879,doc/master/classTDocParser.html,https://root.cern,https://root.cern/doc/master/classTDocParser.html,1,['access'],['accessible']
Security,"Class *newClass);  function called by the TClass constructor when replacing an emulated class by the real class ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerArtificial.html:5296,hash,hash,5296,doc/master/classTStreamerArtificial.html,https://root.cern,https://root.cern/doc/master/classTStreamerArtificial.html,10,['hash'],['hash']
Security,"Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THashList(Int_t capacity = TCollection::kInitHashTableCapacity, Int_t rehash = 0); Create a THashList object. Capacity is the initial hashtable capacity; (i.e. number of slots), by default kInitHashTableCapacity = 17, and; rehash is the value at which a rehash will be triggered. I.e. when the; average size of the linked lists at a slot becomes longer than rehash; then the hashtable will be resized and refilled to reduce the collision; rate to about 1. The higher the collision rate, i.e. the longer the; linked lists, the longer lookup will take. If rehash=0 the table will; NOT automatically be rehashed. Use Rehash() for manual rehashing.; WARNING !!!; If the name of an object in the HashList is modified, The hashlist; must be Rehashed. THashList(TObject* parent, Int_t capacity = TCollection::kInitHashTableCapacity, Int_t rehash = 0); For backward compatibility only. Use other ctor. ~THashList(); Delete a hashlist. Objects are not deleted unless the THashList is the; owner (set via SetOwner()). void AddFirst(TObject* obj); Add object at the beginning of the list. void AddFirst(TObject* obj, Option_t* opt); Add object at the beginning of the list and also store option.; Storing an option is useful when one wants to change the behaviour; of an object a little without having to create a complete new; copy of the object. This feature is used, for example, by the Draw(); method. It allows the same object to be drawn in different ways. void AddLast(TObject* obj); Add object at the end of the list. void AddLast(TObject* obj, Option_t* opt); Add object at the end of the list and also store option.; Storing an option is useful when one wants to change the behaviour; of an object a little without having to create a complete new; copy of the object. This feature is used, for example, by the Draw(); method. It allows the same object to be drawn in different ways. void AddBefore(const TObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THashList.html:11406,hash,hashlist,11406,root/html528/THashList.html,https://root.cern,https://root.cern/root/html528/THashList.html,6,['hash'],['hashlist']
Security,"Class for Fitting ;  CTVirtualGeoConverterAbstract class for geometry converters ;  CTVirtualGeoPainterAbstract class for geometry painters ;  CTVirtualGeoTrackBase class for user-defined tracks attached to a geometry ;  CTVirtualGLManip;  CTVirtualGLPainter;  CTVirtualGraphPainterAbstract interface to a histogram painter ;  CTVirtualHistPainterAbstract interface to a histogram painter ;  CTVirtualIndexAbstract interface for Tree Index ;  CTVirtualIsAProxy;  CTVirtualMagFieldAbstract class for magnetic field ;  CTVirtualMCAbstract Monte Carlo interface ;  CTVirtualMCApplicationInterface to a user Monte Carlo application ;  CTVirtualMCDecayerAbstract base class for particle decays ;  CTVirtualMCGeometryInterface to Monte Carlo geometry construction ;  CTVirtualMCStackInterface to a user defined particles stack ;  CTVirtualMonitoringReader;  CTVirtualMonitoringWriter;  CTVirtualMutexThis class implements a mutex interface ;  CTVirtualObjectWrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  ►CTVirtualPacketizerThe packetizer is a load balancing object created for each query ;  CTVirtualSlaveStat;  CTVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes ;  CTVirtualPadEditorAbstract base class used by ROOT graphics editor ;  CTVirtualPadPainterTo make it possible to use GL for 2D graphic in a TPad/TCanvas ;  CTVirtualPerfStatsProvides the interface for the PROOF internal performance measurement and event tracing ;  CTVirtualProofPlayerAbstract interface for the PROOF player ;  CTVirtualPSTVirtualPS is an abstract interface to Postscript, PDF, SVG ;  CTVirtualQConnectionMediates the link between the signal and the slot ;  CTVirtualRefProxy;  CTVirtualStreamerInfoAbstract Interface class describing Streamer information for one class ;  CTVirtualTableInterface;  CTVirtualTreePlayerAbstract base class defining the interface for the plugins that implement Draw, Scan,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:206447,access,access,206447,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,2,['access'],['access']
Security,"Class for Fitting ;  CTVirtualGeoConverterAbstract class for geometry converters ;  CTVirtualGeoPainterAbstract class for geometry painters ;  CTVirtualGeoTrackBase class for user-defined tracks attached to a geometry ;  CTVirtualGLManip;  CTVirtualGLPainter;  CTVirtualGraphPainterAbstract interface to a histogram painter ;  CTVirtualHistPainterAbstract interface to a histogram painter ;  CTVirtualIndexAbstract interface for Tree Index ;  CTVirtualIsAProxy;  CTVirtualMagFieldAbstract class for magnetic field ;  CTVirtualMCAbstract Monte Carlo interface ;  CTVirtualMCApplicationInterface to a user Monte Carlo application ;  CTVirtualMCDecayerAbstract base class for particle decays ;  CTVirtualMCGeometryInterface to Monte Carlo geometry construction ;  CTVirtualMCStackInterface to a user defined particles stack ;  CTVirtualMonitoringReader;  CTVirtualMonitoringWriter;  CTVirtualMutexThis class implements a mutex interface ;  CTVirtualObjectWrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  ►CTVirtualPacketizerThe packetizer is a load balancing object created for each query ;  CTVirtualSlaveStat;  CTVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes ;  CTVirtualPadEditorAbstract base class used by ROOT graphics editor ;  CTVirtualPadPainterTo make it possible to use GL for 2D graphic in a TPad/TCanvas ;  CTVirtualPerfStatsProvides the interface for the PROOF internal performance measurement and event tracing ;  CTVirtualProofPlayerAbstract interface for the PROOF player ;  CTVirtualPSTVirtualPS is an abstract interface to Postscript, PDF, SVG ;  CTVirtualRefProxy;  CTVirtualStreamerInfoAbstract Interface class describing Streamer information for one class ;  CTVirtualTableInterface;  CTVirtualTreePlayerAbstract base class defining the interface for the plugins that implement Draw, Scan, Process, MakeProxy, etc ;  CTVirtualVectorIterators;  CTVirtualViewer3DA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:196893,access,access,196893,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['access'],['access']
Security,"Class', ns='NS'); 164def pythonizor_for_first_and_second(klass, name):; 165 print('Executed for class ' + name); 166 ; 167# If we now access both classes, we should see that the pythonizor runs twice.; 168f = ROOT.FirstClass(); 169s = ROOT.NS.SecondClass(); 170 ; 171# So far we have seen how pythonizations can be registered for classes that; 172# have not been used yet. We have discussed how, in that case, the pythonizor; 173# functions are executed lazily when their target class/es are used for the; 174# first time in the application.; 175# However, it can also happen that our target class/es have already been; 176# accessed by the time we register a pythonization. In such a scenario, the; 177# pythonizor is applied immediately (at registration time) to the target; 178# class/es.; 179 ; 180# Let's see an example of what was just explained. We will define a new class; 181# and immediately create an object of that class. We can check how the object; 182# still does not have a new attribute `pythonized` that we are going to inject; 183# in the next step.; 184ROOT.gInterpreter.Declare('''; 185class MyClass2 {};; 186'''); 187o = ROOT.MyClass2(); 188try:; 189 print(o.pythonized); 190except AttributeError:; 191 print(""Object has not been pythonized yet!""); 192 ; 193# After that, we will register a pythonization for `MyClass2`. Since the class; 194# has already been used, the pythonization will happen right away.; 195@pythonization('MyClass2'); 196def pythonizor_for_myclass2(klass):; 197 klass.pythonized = True; 198 ; 199# Now our object does have the `pythonized` attribute:; 200print(o.pythonized) # prints True; formatOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetCol",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/pyroot002__pythonizationDecorator_8py_source.html:9201,inject,inject,9201,doc/master/pyroot002__pythonizationDecorator_8py_source.html,https://root.cern,https://root.cern/doc/master/pyroot002__pythonizationDecorator_8py_source.html,1,['inject'],['inject']
Security,"ClassMenuItemDescribes one element of the context menu associated to a class The menu item may describe.Definition TClassMenuItem.h:31; TClassMenuItem::SetTogglevirtual void SetToggle(Bool_t toggle=kTRUE)Definition TClassMenuItem.h:75; TClassMenuItem::kIsSelf@ kIsSelfDefinition TClassMenuItem.h:37; TClassMenuItem::kPopupStandardList@ kPopupStandardListDefinition TClassMenuItem.h:35; TClassMenuItem::kPopupSeparator@ kPopupSeparatorDefinition TClassMenuItem.h:35; TClassMenuItem::kPopupUserFunction@ kPopupUserFunctionDefinition TClassMenuItem.h:35; TClassRefTClassRef is used to implement a permanent reference to a TClass object.Definition TClassRef.h:28; TClassStreamerDefinition TClassStreamer.h:26; TClassStreamer::Streamvirtual void Stream(TBuffer &b, void *objp, const TClass *onfileClass)Definition TClassStreamer.h:51; TClassStreamer::Generatevirtual TClassStreamer * Generate() constDefinition TClassStreamer.h:38; TClassTable::GetDictstatic DictFuncPtr_t GetDict(const char *cname)Given the class name returns the Dictionary() function of a class (uses hash of name).Definition TClassTable.cxx:674; TClassTable::GetProtoNormstatic TProtoClass * GetProtoNorm(const char *cname)Given the class normalized name returns the TClassProto object for the class.Definition TClassTable.cxx:770; TClassTable::GetDictNormstatic DictFuncPtr_t GetDictNorm(const char *cname)Given the normalized class name returns the Dictionary() function of a class (uses hash of name).Definition TClassTable.cxx:717; TClass::InsertTClassInRegistryRAIIDefinition TClass.h:173; TClass::InsertTClassInRegistryRAII::~InsertTClassInRegistryRAII~InsertTClassInRegistryRAII()Definition TClass.cxx:254; TClass::InsertTClassInRegistryRAII::InsertTClassInRegistryRAIIInsertTClassInRegistryRAII(TClass::EState &state, const char *name, TDeclNameRegistry &emuRegistry)Definition TClass.cxx:248; TClass::TDeclNameRegistryDefinition TClass.h:158; TClass::TDeclNameRegistry::~TDeclNameRegistry~TDeclNameRegistry()Definition TClass.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:308814,hash,hash,308814,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,2,['hash'],['hash']
Security,"ClassPDG(const TParticleClassPDG& pcp). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TObjArray*fListOfParticleslist of (non-owned) particles; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TParticleClassPDG(const char* name = 0); default constructor. ~TParticleClassPDG(); destructor, class doesn't own its particles... void Print(Option_t* opt = """") const. Print the entire information of this kind of particle. void Browse(TBrowser* b); browse this particle class. TParticleClassPDG(const TParticleClassPDG& pcp); { }. TParticleClassPDG& operator=(const TParticleClassPDG& pcp). Int_t GetNParticles(); ****** access methods. TParticlePDG* GetParticle(Int_t i). TObjArray* GetListOfParticles(); { return fListOfParticles; }. void AddParticle(TObject* p); ****** modifiers. { fListOfParticles->Add(p); }. Bool_t IsFolder() const; { return kTRUE; }. » Author: Pasha Murat 12/02/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/eg:$Id$ » Last generated: 2015-06-02 16:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TParticleClassPDG.html:6686,access,access,6686,root/html604/TParticleClassPDG.html,https://root.cern,https://root.cern/root/html604/TParticleClassPDG.html,1,['access'],['access']
Security,"ClassPDG(const TParticleClassPDG& pcp). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TObjArray*fListOfParticleslist of (non-owned) particles; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TParticleClassPDG(const char* name = 0); default constructor. ~TParticleClassPDG(); destructor, class doesn't own its particles... void Print(Option_t* opt = """") const. Print the entire information of this kind of particle. void Browse(TBrowser* b); browse this particle class. TParticleClassPDG(const TParticleClassPDG& pcp); { }. TParticleClassPDG& operator=(const TParticleClassPDG& pcp). Int_t GetNParticles(); ****** access methods. TParticlePDG* GetParticle(Int_t i). TObjArray* GetListOfParticles(); { return fListOfParticles; }. void AddParticle(TObject* p); ****** modifiers. { fListOfParticles->Add(p); }. Bool_t IsFolder() const; { return kTRUE; }. » Author: Pasha Murat 12/02/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/eg:$Id$ » Last generated: 2015-06-30 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TParticleClassPDG.html:6686,access,access,6686,root/html602/TParticleClassPDG.html,https://root.cern,https://root.cern/root/html602/TParticleClassPDG.html,1,['access'],['access']
Security,"Classes(). { return fgTally; }. void Init(); { fgCursor = 0; SortTable(); }. void Add(const char* cname, Version_t id, const type_info& info, DictFuncPtr_t dict, Int_t pragmabits); Add a class to the class table (this is a static function).; Note that the given cname *must* be already normalized. void Add(TProtoClass* protoClass); Add a class to the class table (this is a static function). void AddAlternate(const char* normname, const char* alternate). Bool_t Check(const char* cname, string& normname). void Remove(const char* cname); Remove a class from the class table. This happens when a shared library; is unloaded (i.e. the dtor's of the global init objects are called). TClassRec * FindElementImpl(const char* cname, Bool_t insert); Find a class by name in the class table (using hash of name). Returns; 0 if the class is not in the table. Unless arguments insert is true in; which case a new entry is created and returned. TClassRec * FindElement(const char* cname, Bool_t insert = kFALSE); Find a class by name in the class table (using hash of name). Returns; 0 if the class is not in the table. Unless arguments insert is true in; which case a new entry is created and returned.; cname can be any spelling of the class name. See FindElementImpl if the; name is already normalized. Version_t GetID(const char* cname); Returns the ID of a class. Int_t GetPragmaBits(const char* name); Returns the pragma bits as specified in the LinkDef.h file. DictFuncPtr_t GetDict(const char* cname); Given the class name returns the Dictionary() function of a class; (uses hash of name). DictFuncPtr_t GetDict(const type_info& info); Given the type_info returns the Dictionary() function of a class; (uses hash of type_info::name()). DictFuncPtr_t GetDictNorm(const char* cname); Given the normalized class name returns the Dictionary() function of a class; (uses hash of name). TProtoClass * GetProto(const char* cname); Given the class name returns the TClassProto object for the class.; (uses has",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClassTable.html:9053,hash,hash,9053,root/html602/TClassTable.html,https://root.cern,https://root.cern/root/html602/TClassTable.html,2,['hash'],['hash']
Security,"Classmutableprivate; fClassInfoTClassprivate; fClassMenuListTClassmutableprivate; fClassPropertyTClassmutableprivate; fClassVersionTClassprivate; fCollectionProxyTClassprivate; fContextMenuTitleTClassprivate; fConversionStreamerInfoTClassmutableprivate; fConvStreamerFuncTClassprivate; fCurrentInfoTClassmutableprivate; fDataTClassprivate; fDeclFileLineTClassprivate; fDeclFileNameTClassprivate; fDeleteTClassprivate; fDeleteArrayTClassprivate; fDestructorTClassprivate; fDirAutoAddTClassprivate; fEnumsTClassprivate; fFuncTemplateTClassprivate; fgClassCountTClassprivatestatic; fgClassTypedefHashTClassprivatestatic; fgDtorOnlyTObjectprivatestatic; fGlobalIsATClassprivate; fgObjectStatTObjectprivatestatic; fHasCustomStreamerMemberTClassprivate; fHasRootPcmInfoTClassprivate; FillBuffer(char *&buffer)TNamedvirtual; fImplFileLineTClassprivate; fImplFileNameTClassprivate; FindClassOrBaseMethodWithId(DeclId_t faddr)TClassprivate; FindConversionStreamerInfo(const char *onfile_classname, UInt_t checksum) constTClass; FindConversionStreamerInfo(const TClass *onfile_cl, UInt_t checksum) constTClass; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; FindStreamerInfo(TObjArray *arr, UInt_t checksum) constTClassprotected; FindStreamerInfo(UInt_t checksum, Bool_t isTransient=kFALSE) constTClass; FindStreamerInfoAbstractEmulated(UInt_t checksum) constTClass; fInstanceCountTClassprivate; fIsATClassprivate; fIsAMethodTClassmutableprivate; fIsOffsetStreamerSetTClassmutableprivate; fIsSyntheticPairTClassprivate; fLastReadInfoTClassmutableprivate; fMergeTClassprivate; fMethodTClassprivate; fNameTNamedprotected; fNewTClassprivate; fNewArrayTClassprivate; fNoInfoOrEmuOrFwdDeclNameRegistryTClassprivatestatic; fObjectVersionRepositoryTClassmutableprivate; fOffsetStreamerTClassmutableprivate; fOnHeapTClassprivate; ForceReload(TClass *oldcl)TClass; fOVRMutexTClassmutableprivate; fPersistentRefTClassprivate; fPropertyTClassmutableprivate; fRealData",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass-members.html:4941,checksum,checksum,4941,doc/master/classTClass-members.html,https://root.cern,https://root.cern/doc/master/classTClass-members.html,1,['checksum'],['checksum']
Security,"Close the socket. ; If option is ""force"", calls shutdown(id,2) to shut down the connection. This will close the connection also for the parent of this process. Also called via the dtor (without option ""force"", call explicitly Close(""force"") if this is desired). ; Reimplemented in TPSocket, and TSSLSocket.; Definition at line 389 of file TSocket.cxx. ◆ CreateAuthSocket() [1/2]. TSocket * TSocket::CreateAuthSocket ; (; const char * ; url, . Int_t ; size = 0, . Int_t ; tcpwindowsize = -1, . TSocket * ; opensock = nullptr, . Int_t * ; err = nullptr . ). static . Creates a socket or a parallel socket and authenticates to the remote server. ; url: [[proto][p][auth]://][user@]host[:port][/service][?options]; where proto = ""sockd"", ""rootd"", ""proofd"" indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates any remote server session using TServerSocket) [p] = for parallel sockets (forced internally for rootd; ignored for proofd) [auth] = ""up"" or ""k"" to force UsrPwd or Krb5 authentication [port] = is the remote port number [service] = service name used to determine the port (for backward compatibility, specification of port as priority) options = ""m"" or ""s"", when proto=proofd indicates whether we are master or slave (used internally by TSlave); An already opened connection can be used by passing its socket in opensock.; If 'err' is defined, '*err' on return from a failed call contains an error code (see NetErrors.h).; Example:; TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3); creates an authenticated parallel socket of size 3 to a sockd server running on remote machine machine.fq.dn on port 5052; authentication will attempt protocol Kerberos first.; NB: may hang if the remote server is not of the correct type; at present TSocket has no way to find out the type of the remote server automatically; Returns pointer to an authenticated socket or 0 if creation or authentication is unsuccessful. ; Definition at line 1290 of file TSocket.cxx.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSocket.html:23748,authenticat,authentication,23748,doc/master/classTSocket.html,https://root.cern,https://root.cern/doc/master/classTSocket.html,1,['authenticat'],['authentication']
Security,"Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials TTree and Its Data. TTree; A TTree is a large, structured chunk of data on disk. The trick is that only selected parts of it are in memory at any given time. Here, with the help of some illustrations by our colleague Ioannis, we see how to extract these parts. Sit back and enjoy - in this step there is nothing for you to run.; Too much data! Let's assume a TTree holds ""all the worlds' newspapers of all times"". That's a lot, and no way would you want to have that delivered in one serving. So how you can make access to the newspapers more reasonable?; TBranch; Of course you don't care about all newspapers. You want only one or two - say we take the Tribune de Geneve. You create a subscription - that's the TBranch in ROOT's world. You can of course have as many subscriptions as you need. Pick a subscription!; The subscription manager is called the TTreeReader. You subscribe to a branch by creating a TTreeReaderValue (or TTreeReaderArray for arrays of any sort) and register it with the TTreeReader:; // Our subscription manager:; TTreeReader subscriptionManager(theTree);; // Tell the manager that we want to subscribe to the branch ""TribuneDeGeneve"",; // and that we expect to get an object of type Newspaper.; TTreeReaderValue<Newspaper> myTribuneDeGeneve(subscriptionManager, ""TribuneDeGeneve"");. TTreeReader::Next(); You would not want to have all issues of the Tribune de Geneve at once, but only one, say today's. You do that by requesting delivery of an issue from the subscription manager: Data delivery; // In this example, we loop ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/ttree-and-its-data.html:2417,access,access,2417,d/ttree-and-its-data.html,https://root.cern,https://root.cern/d/ttree-and-its-data.html,1,['access'],['access']
Security,"Collection::fgGarbageStack = 0;; 58 ; 59ClassImp(TCollection);; 60ClassImp(TIter);; 61 ; 62#ifdef R__CHECK_COLLECTION_MULTI_ACCESS; 63 ; 64void TCollection::TErrorLock::ConflictReport(std::thread::id holder, const char *accesstype,; 65 const TCollection *collection, const char *function); 66{; 67 ; 68 auto local = std::this_thread::get_id();; 69 std::stringstream cur, loc;; 70 if (holder == std::thread::id()); 71 cur << ""None"";; 72 else; 73 cur << ""0x"" << std::hex << holder;; 74 loc << ""0x"" << std::hex << local;; 75 ; 76 // std::cerr << ""Error in "" << function << "": Access ("" << accesstype << "") to a collection ("" <<; 77 // collection->IsA()->GetName() << "":"" << collection <<; 78 // "") from multiple threads at a time. holder="" << ""0x"" << std::hex << holder << "" readers="" << fReadSet.size() <<; 79 // ""0x"" << std::hex << local << std::endl;; 80 ; 81 ::Error(function,; 82 ""Access (%s) to a collection (%s:%p) from multiple threads at a time. holder=%s readers=%lu intruder=%s"",; 83 accesstype, collection->IsA()->GetName(), collection, cur.str().c_str(), fReadSet.size(), loc.str().c_str());; 84 ; 85 std::set<std::thread::id> tmp;; 86 for (auto r : fReadSet) tmp.insert(r);; 87 for (auto r : tmp) {; 88 std::stringstream reader;; 89 reader << ""0x"" << std::hex << r;; 90 ::Error(function, "" Readers includes %s"", reader.str().c_str());; 91 }; 92 gSystem->StackTrace();; 93}; 94 ; 95void TCollection::TErrorLock::Lock(const TCollection *collection, const char *function); 96{; 97 auto local = std::this_thread::get_id();; 98 ; 99 std::thread::id holder;; 100 ; 101 if (fWriteCurrent.compare_exchange_strong(holder, local)) {; 102 // fWriteCurrent was the default id and is now local.; 103 ++fWriteCurrentRecurse;; 104 // std::cerr << ""#"" << ""0x"" << std::hex << local << "" acquired first "" << collection << "" lock:"" << this <<; 105 // std::endl;; 106 ; 107 // Now check if there is any readers lingering; 108 if (fReadCurrentRecurse) {; 109 if (fReadSet.size() > 1 || fReadSet.find(local) != f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollection_8cxx_source.html:3285,access,accesstype,3285,doc/master/TCollection_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCollection_8cxx_source.html,1,['access'],['accesstype']
Security,"CollectionProxy::kIsEmulated; static TVirtualCollectionProxy::EPropertyTVirtualCollectionProxy::kNeedDelete. protected:. TClassRefTVirtualCollectionProxy::fClass; TGenCollectionProxy::MethodfClearMethod cache for container accessors: clear container; TGenCollectionProxy::Collectfunc_tfCollectMethod to collect objects from container; TGenCollectionProxy::ArrIterfunc_tfConstructContainer accessors: block construct; map<string,TObjArray*>*fConversionReadMemberWiseArray of bundle of TStreamerInfoActions to stream out (read) derived from another class.; TGenCollectionProxy::Method0fCreateEnvMethod to allocate an Environment holder.; TGenCollectionProxy::Sizing_tfDestructContainer accessors: block destruct; TGenCollectionProxy::EnvironBase_t*fEnvAddress of the currently proxied object; TGenCollectionProxy::Feedfunc_tfFeedContainer accessors: block feed; TGenCollectionProxy::MethodfFirstContainer accessors: generic iteration: first; TVirtualCollectionProxy::CopyIterator_tfFunctionCopyIterator; TVirtualCollectionProxy::CreateIterators_tfFunctionCreateIterators; TVirtualCollectionProxy::DeleteIterator_tfFunctionDeleteIterator; TVirtualCollectionProxy::DeleteTwoIterators_tfFunctionDeleteTwoIterators; TVirtualCollectionProxy::Next_tfFunctionNextIterator; TGenCollectionProxy::Value*fKeyDescriptor of the key_type; stringfNameName of the class being proxied.; TGenCollectionProxy::MethodfNextContainer accessors: generic iteration: next; TClass*fOnFileClassOn file class; Bool_tfPointersFlag to indicate if containee has pointers (key or value); UInt_tTVirtualCollectionProxy::fProperties; TGenCollectionProxy::Proxies_tfProxyKeptOptimization: Keep proxies once they were created; TGenCollectionProxy::Proxies_tfProxyListStack of recursive proxies; TObjArray*fReadMemberWiseArray of bundle of TStreamerInfoActions to stream out (read); TGenCollectionProxy::Sizing_tfResizeContainer accessors: resize container; intfSTL_typeSTL container type; TGenCollectionProxy::MethodfSizeContainer accesso",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGenCollectionProxy.html:4794,access,accessors,4794,root/html602/TGenCollectionProxy.html,https://root.cern,https://root.cern/root/html602/TGenCollectionProxy.html,6,['access'],['accessors']
Security,"Compare cmp = kExact) const; Compare a string to char *cs2. Returns returns zero if the two; strings are identical, otherwise returns the difference between; the first two differing bytes (treated as unsigned char values,; so that `\200' is greater than `\0', for example). Zero-length; strings are always identical. int CompareTo(const TString& st, TString::ECaseCompare cmp = kExact) const; Compare a string to another string. Returns returns zero if the two; strings are identical, otherwise returns the difference between; the first two differing bytes (treated as unsigned char values,; so that `\200' is greater than `\0', for example). Zero-length; strings are always identical. Int_t CountChar(Int_t c) const; Return number of times character c occurs in the string. TString Copy() const; Copy a string. Ssiz_t First(char c) const; Find first occurrence of a character c. Ssiz_t First(const char* cs) const; Find first occurrence of a character in cs. UInt_t HashCase() const; Return a case-sensitive hash value (endian independent). UInt_t HashFoldCase() const; Return a case-insensitive hash value (endian independent). UInt_t Hash(TString::ECaseCompare cmp = kExact) const; Return hash value. UInt_t Hash(const void* txt, Int_t ntxt); Calculates hash index from any char string. (static function); Based on precalculated table of 256 specially selected numbers.; These numbers are selected in such a way, that for string; length == 4 (integer number) the hash is unambigous, i.e.; from hash value we can recalculate input (no degeneration). The quality of hash method is good enough, that; ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); tested by <R>, <R*R>, <Ri*Ri+1> gives the same result; as for libc rand(). For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. V.Perev. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Search for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TString.html:10474,hash,hash,10474,root/html530/TString.html,https://root.cern,https://root.cern/root/html530/TString.html,2,['hash'],['hash']
Security,"Compare cmp = kExact) const; Compare a string to char *cs2. Returns returns zero if the two; strings are identical, otherwise returns the difference between; the first two differing bytes (treated as unsigned char values,; so that `\200' is greater than `\0', for example). Zero-length; strings are always identical. int CompareTo(const TString& st, TString::ECaseCompare cmp = kExact) const; Compare a string to another string. Returns returns zero if the two; strings are identical, otherwise returns the difference between; the first two differing bytes (treated as unsigned char values,; so that `\200' is greater than `\0', for example). Zero-length; strings are always identical. Int_t CountChar(Int_t c) const; Return number of times character c occurs in the string. TString Copy() const; Copy a string. Ssiz_t First(char c) const; Find first occurrence of a character c. Ssiz_t First(const char* cs) const; Find first occurrence of a character in cs. UInt_t HashCase() const; Return a case-sensitive hash value (endian independent). UInt_t HashFoldCase() const; Return a case-insensitive hash value (endian independent). UInt_t Hash(TString::ECaseCompare cmp = kExact) const; Return hash value. UInt_t Hash(const void* txt, Int_t ntxt); Calculates hash index from any char string. (static function); For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. This employs two different hash functions, depending on ntxt:; ntxt == sizeof(void*): a simple bitwise xor to get fast pointer hashes; else: MurmurHash3_x64_128 http://code.google.com/p/smhasher. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Search for a string in the TString. Plen is the length of pattern,; startIndex is the index from which to start and cmp selects the type; of case-comparison. Ssiz_t Last(char c) const; Find last occurrence of a character c. TString MD5() const; Retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TString.html:11153,hash,hash,11153,root/html534/TString.html,https://root.cern,https://root.cern/root/html534/TString.html,3,['hash'],['hash']
Security,"ConstField(std::string_view fieldName) constDefinition RNTupleModel.cxx:417; ROOT::Experimental::RNTupleModel::fSchemaIdstd::uint64_t fSchemaIdModels have a separate schema ID to remember that the clone of a frozen model still has the same sche...Definition RNTupleModel.hxx:213; ROOT::Experimental::RNTupleModel::GetTokenREntry::RFieldToken GetToken(std::string_view fieldName) constCreates a token to be used in REntry methods to address a field present in the entry.Definition RNTupleModel.cxx:470; ROOT::Experimental::RNTupleModel::EnsureNotBarevoid EnsureNotBare() constThrows an RException if fDefaultEntry is nullptr.Definition RNTupleModel.cxx:226; ROOT::Experimental::RNTupleModel::Clonestd::unique_ptr< RNTupleModel > Clone() constDefinition RNTupleModel.cxx:262; ROOT::Experimental::RNTupleModel::EnsureNotFrozenvoid EnsureNotFrozen() constThrows an RException if fFrozen is true.Definition RNTupleModel.cxx:220; ROOT::Experimental::RNTupleModel::GetMutableFieldZeroRFieldZero & GetMutableFieldZero()Mutable access to the root field is used to make adjustments to the fields.Definition RNTupleModel.cxx:399; ROOT::Experimental::RNTupleModel::GetDefaultEntryREntry & GetDefaultEntry()Definition RNTupleModel.cxx:426; ROOT::Experimental::RNTupleModel::EstimateWriteMemoryUsagestd::size_t EstimateWriteMemoryUsage(const RNTupleWriteOptions &options=RNTupleWriteOptions()) constEstimate the memory usage for this model during writing.Definition RNTupleModel.cxx:518; ROOT::Experimental::RNTupleModel::CreateBareEntrystd::unique_ptr< REntry > CreateBareEntry() constIn a bare entry, all values point to nullptr.Definition RNTupleModel.cxx:455; ROOT::Experimental::RNTupleModel::CreateEntrystd::unique_ptr< REntry > CreateEntry() constDefinition RNTupleModel.cxx:440; ROOT::Experimental::RNTupleModel::CreateBulkRFieldBase::RBulk CreateBulk(std::string_view fieldName) constCalls the given field's CreateBulk() method. Throws an exception if no field with the given name exis...Definition RNTuple",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleModel_8cxx_source.html:30143,access,access,30143,doc/master/RNTupleModel_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RNTupleModel_8cxx_source.html,1,['access'],['access']
Security,"CoordBufferSize);; 288 for (Int_t i = 0; i < fNdimensions; ++i) {; 289 const Int_t offset = fBitOffsets[i] / 8;; 290 const Int_t shift = fBitOffsets[i] % 8;; 291 ULong64_t val = coord[i];; 292 ; 293 Char_t* pbuf = fCoordBuffer + offset;; 294 *pbuf += 0xff & (val << shift);; 295 val = val >> (8 - shift);; 296 while (val) {; 297 ++pbuf;; 298 *pbuf += 0xff & val;; 299 val = val >> 8;; 300 }; 301 }; 302 ; 303 ULong64_t hash = 5381;; 304 Char_t* str = fCoordBuffer;; 305 while (str - fCoordBuffer < fCoordBufferSize) {; 306 hash *= 5;; 307 hash += *(str++);; 308 }; 309 return hash;; 310}; 311*/; 312 ; 313 ; 314////////////////////////////////////////////////////////////////////////////////; 315/// Calculate hash from compact bin index.; 316 ; 317ULong64_t THnSparseCoordCompression::GetHashFromBuffer(const Char_t* buf) const; 318{; 319 // Bins are addressed in two different modes, depending; 320 // on whether the compact bin index fits into a Long64_t or not.; 321 // If it does, we can use it as a ""perfect hash"" for the TExMap.; 322 // If not we build a hash from the compact bin index, and use that; 323 // as the TExMap's hash.; 324 ; 325 if (fCoordBufferSize <= 8) {; 326 // fits into a Long64_t; 327 ULong64_t hash1 = 0;; 328 memcpy(&hash1, buf, fCoordBufferSize);; 329 return hash1;; 330 }; 331 ; 332 // else: doesn't fit into a Long64_t:; 333 ULong64_t hash = 5381;; 334 const Char_t* str = buf;; 335 while (str - buf < fCoordBufferSize) {; 336 hash *= 5;; 337 hash += *(str++);; 338 }; 339 return hash;; 340}; 341 ; 342 ; 343 ; 344 ; 345/** \class THnSparseCompactBinCoord; 346THnSparseCompactBinCoord is a class used by THnSparse internally. It; 347maps between an n-dimensional array of bin coordinates (indices) and; 348its compact version, the THnSparseCoordCompression.; 349*/; 350 ; 351class THnSparseCompactBinCoord: public THnSparseCoordCompression {; 352public:; 353 THnSparseCompactBinCoord(Int_t dim, const Int_t* nbins);; 354 ~THnSparseCompactBinCoord();; 355 Int_t* GetCoo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THnSparse_8cxx_source.html:11029,hash,hash,11029,doc/master/THnSparse_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THnSparse_8cxx_source.html,1,['hash'],['hash']
Security,"Create THxx histograms . TH1 * CreateHistogram(const char* histogramName, Bool_t originalAxisBinning = kFALSE, Int_t** binMap = 0, const char* histogramTitle = 0, const char* axisSteering = 0) const. TH2D * CreateErrorMatrixHistogram(const char* histogramName, Bool_t originalAxisBinning, Int_t** binMap = 0, const char* histogramTitle = 0, const char* axisSteering = 0) const. TH2D * CreateHistogramOfMigrations(TUnfoldBinning *const xAxis, TUnfoldBinning *const yAxis, char *const histogramName, Bool_t originalXAxisBinning = kFALSE, Bool_t originalYAxisBinning = kFALSE, char *const histogramTitle = 0); Calculate global bin number . Int_t GetGlobalBinNumber(Double_t x) const. Int_t GetGlobalBinNumber(Double_t x, Double_t y) const. Int_t GetStartBin(void); { return fFirstBin; }. Int_t GetEndBin(void); { return fLastBin; }. void GetBinUnderflowOverflowStatus(Int_t iBin, Int_t* uStatus, Int_t* oStatus) const. void GetBinNeighbours(Int_t globalBin, Int_t axis, Int_t* prev, Double_t* distPrev, Int_t* next, Double_t* distNext) const; access by bin number, given an axis steering . { MAXDIM=32 }. const TUnfoldBinning * GetBinLocation(Int_t binTHxx, const char* axisSteering, Int_t* axisBins) const; access distribution properties . Int_t GetDistributionNumberOfBins(void); { return fDistributionSize; }. Int_t GetDistributionDimension(void); { return fAxisList->GetEntriesFast(); }. Double_t GetDistributionAverageBinSize(Int_t axis, Bool_t includeUnderflow, Bool_t includeOverflow) const. TVectorD const * GetDistributionBinning(Int_t axis) const. TString GetDistributionAxisLabel(Int_t axis) const. Double_t GetDistributionBinCenter(Int_t axis, Int_t bin) const. TUnfoldBinning const * ToAxisBins(Int_t globalBin, Int_t* axisBins) const. TString BuildHistogramTitle(const char* histogramName, const char* histogramTitle, Int_t *const axisList) const. Int_t GetTHxxBinning(Int_t maxDim, Int_t* axisBins, Int_t* axisList, const char* axisSteering) const. Int_t GetTHxxBinningSingleNode(Int_t max",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldBinning.html:16555,access,access,16555,root/html534/TUnfoldBinning.html,https://root.cern,https://root.cern/root/html534/TUnfoldBinning.html,1,['access'],['access']
Security,"Create THxx histograms . TH1 * CreateHistogram(const char* histogramName, Bool_t originalAxisBinning = kFALSE, Int_t** binMap = 0, const char* histogramTitle = 0, const char* axisSteering = 0) const. TH2D * CreateErrorMatrixHistogram(const char* histogramName, Bool_t originalAxisBinning, Int_t** binMap = 0, const char* histogramTitle = 0, const char* axisSteering = 0) const. TH2D * CreateHistogramOfMigrations(const TUnfoldBinning* xAxis, const TUnfoldBinning* yAxis, const char* histogramName, Bool_t originalXAxisBinning = kFALSE, Bool_t originalYAxisBinning = kFALSE, const char* histogramTitle = 0); Calculate global bin number . Int_t GetGlobalBinNumber(Double_t x) const. Int_t GetGlobalBinNumber(Double_t x, Double_t y) const. Int_t GetStartBin(void); { return fFirstBin; }. Int_t GetEndBin(void); { return fLastBin; }. void GetBinUnderflowOverflowStatus(Int_t iBin, Int_t* uStatus, Int_t* oStatus) const. void GetBinNeighbours(Int_t globalBin, Int_t axis, Int_t* prev, Double_t* distPrev, Int_t* next, Double_t* distNext) const; access by bin number, given an axis steering . { MAXDIM=32 }. const TUnfoldBinning * GetBinLocation(Int_t binTHxx, const char* axisSteering, Int_t[32] axisBins) const; access distribution properties . Int_t GetDistributionNumberOfBins(void); { return fDistributionSize; }. Int_t GetDistributionDimension(void); { return fAxisList->GetEntriesFast(); }. Double_t GetDistributionAverageBinSize(Int_t axis, Bool_t includeUnderflow, Bool_t includeOverflow) const. TVectorD const * GetDistributionBinning(Int_t axis) const. TString GetDistributionAxisLabel(Int_t axis) const. Double_t GetDistributionBinCenter(Int_t axis, Int_t bin) const. TUnfoldBinning const * ToAxisBins(Int_t globalBin, Int_t* axisBins) const. TString BuildHistogramTitle(const char* histogramName, const char* histogramTitle, const Int_t* axisList) const. Int_t GetTHxxBinning(Int_t maxDim, Int_t* axisBins, Int_t* axisList, const char* axisSteering) const. Int_t GetTHxxBinningSingleNode(Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnfoldBinning.html:17148,access,access,17148,root/html602/TUnfoldBinning.html,https://root.cern,https://root.cern/root/html602/TUnfoldBinning.html,2,['access'],['access']
Security,"CreateAuthSocket(""rootds://qwerty@machine.fq.dn:5051""). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel"" sockets; are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. TSocket * CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0); Creates a socket or a parallel socket and authenticates to the; remote server specified in 'url' on remote 'port' as 'user'. url: [[proto][p][auth]://]host[/?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [options] = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by TSlave). An already opened connection can be used by passing its socket; in opensock. Example:. TSocket::CreateAuthSocket(""qwerty"",""rootdps://machine.fq.dn"",5051). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel""; sockets are forced internally because rootd expects; parallel sockets; however a simple socket will",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSocket.html:21484,authenticat,authenticates,21484,root/html528/TSocket.html,https://root.cern,https://root.cern/root/html528/TSocket.html,1,['authenticat'],['authenticates']
Security,"D2, class R > . template<class A , class R2 > . bool ROOT::Math::SMatrix< T, D1, D2, R >::operator!= ; (; const Expr< A, T, D1, D2, R2 > & ; rhs); const. inline . element wise comparison ; Definition at line 338 of file SMatrix.icc. ◆ operator!=() [2/3]. template<class T , unsigned int D1, unsigned int D2, class R > . bool ROOT::Math::SMatrix< T, D1, D2, R >::operator!= ; (; const SMatrix< T, D1, D2, R > & ; rhs); const. inline . element wise comparison ; Definition at line 332 of file SMatrix.icc. ◆ operator!=() [3/3]. template<class T , unsigned int D1, unsigned int D2, class R > . bool ROOT::Math::SMatrix< T, D1, D2, R >::operator!= ; (; const T & ; rhs); const. inline . element wise comparison ; Definition at line 327 of file SMatrix.icc. ◆ operator()() [1/2]. template<class T , unsigned int D1, unsigned int D2, class R > . T & ROOT::Math::SMatrix< T, D1, D2, R >::operator() ; (; unsigned int ; i, . unsigned int ; j . ). inline . read/write access to matrix element with indices starting from 0 ; Definition at line 644 of file SMatrix.icc. ◆ operator()() [2/2]. template<class T , unsigned int D1, unsigned int D2, class R > . const T & ROOT::Math::SMatrix< T, D1, D2, R >::operator() ; (; unsigned int ; i, . unsigned int ; j . ); const. inline . read only access to matrix element, with indices starting from 0 ; Definition at line 639 of file SMatrix.icc. ◆ operator*=() [1/3]. template<class T , unsigned int D1, unsigned int D2, class R > . template<class A , class R2 > . SMatrix< T, D1, D2, R > & ROOT::Math::SMatrix< T, D1, D2, R >::operator*= ; (; const Expr< A, T, D1, D2, R2 > & ; rhs). multiplication with a compatible matrix expression (it is a real matrix multiplication) ; Definition at line 276 of file SMatrix.icc. ◆ operator*=() [2/3]. template<class T , unsigned int D1, unsigned int D2, class R > . template<class R2 > . SMatrix< T, D1, D2, R > & ROOT::Math::SMatrix< T, D1, D2, R >::operator*= ; (; const SMatrix< T, D1, D2, R2 > & ; rhs). multiplication with a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1SMatrix.html:27267,access,access,27267,doc/master/classROOT_1_1Math_1_1SMatrix.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1SMatrix.html,1,['access'],['access']
Security,"D> . template<class A > . bool ROOT::Math::SVector< T, D >::operator== ; (; const VecExpr< A, T, D > & ; rhs); const. element wise comparison ; Definition at line 249 of file SVector.icc. ◆ operator>() [1/3]. template<class T , unsigned int D> . bool ROOT::Math::SVector< T, D >::operator> ; (; const SVector< T, D > & ; rhs); const. element wise comparison ; Definition at line 289 of file SVector.icc. ◆ operator>() [2/3]. template<class T , unsigned int D> . bool ROOT::Math::SVector< T, D >::operator> ; (; const T & ; rhs); const. element wise comparison ; Definition at line 280 of file SVector.icc. ◆ operator>() [3/3]. template<class T , unsigned int D> . template<class A > . bool ROOT::Math::SVector< T, D >::operator> ; (; const VecExpr< A, T, D > & ; rhs); const. element wise comparison ; Definition at line 299 of file SVector.icc. ◆ operator[]() [1/2]. template<class T , unsigned int D> . T & ROOT::Math::SVector< T, D >::operator[] ; (; unsigned int ; i). inline . read/write access of vector elements. Index starts from 0. ; Definition at line 588 of file SVector.icc. ◆ operator[]() [2/2]. template<class T , unsigned int D> . const T & ROOT::Math::SVector< T, D >::operator[] ; (; unsigned int ; i); const. inline . read-only access of vector elements. Index starts from 0. ; Definition at line 582 of file SVector.icc. ◆ Place_at() [1/2]. template<class T , unsigned int D> . template<unsigned int D2> . SVector< T, D > & ROOT::Math::SVector< T, D >::Place_at ; (; const SVector< T, D2 > & ; rhs, . unsigned int ; row . ). place a sub-vector starting from the given position ; Definition at line 490 of file SVector.icc. ◆ Place_at() [2/2]. template<class T , unsigned int D> . template<class A , unsigned int D2> . SVector< T, D > & ROOT::Math::SVector< T, D >::Place_at ; (; const VecExpr< A, T, D2 > & ; rhs, . unsigned int ; row . ). place a sub-vector expression starting from the given position ; Definition at line 507 of file SVector.icc. ◆ Print(). template<class T , un",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1SVector.html:21000,access,access,21000,doc/master/classROOT_1_1Math_1_1SVector.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1SVector.html,1,['access'],['access']
Security,"Data(data) {}; 132 };; 133 ; 134 using ConnectionsList_t = std::vector<std::shared_ptr<WebConn>>;; 135 ; 136 std::shared_ptr<RWebWindowsManager> fMgr; ///<! display manager; 137 std::shared_ptr<RWebWindow> fMaster; ///<! master window where this window is embedded; 138 std::vector<MasterConn> fMasterConns; ///<! master connections; 139 std::string fDefaultPage; ///<! HTML page (or file name) returned when window URL is opened; 140 std::string fPanelName; ///<! panel name which should be shown in the window; 141 unsigned fId{0}; ///<! unique identifier; 142 bool fUseServerThreads{false}; ///<! indicates that server thread is using, no special window thread; 143 bool fUseProcessEvents{false}; ///<! all window functionality will run through process events; 144 bool fProcessMT{false}; ///<! if window event processing performed in dedicated thread; 145 bool fSendMT{false}; ///<! true is special threads should be used for sending data; 146 bool fRequireAuthKey{true}; ///<! defines if authentication key always required when connect to the widget; 147 std::shared_ptr<RWebWindowWSHandler> fWSHandler; ///<! specialize websocket handler for all incoming connections; 148 unsigned fConnCnt{0}; ///<! counter of new connections to assign ids; 149 ConnectionsList_t fPendingConn; ///<! list of pending connection with pre-assigned keys; 150 ConnectionsList_t fConn; ///<! list of all accepted connections; 151 mutable std::mutex fConnMutex; ///<! mutex used to protect connection list; 152 unsigned fConnLimit{1}; ///<! number of allowed active connections; 153 std::string fConnToken; ///<! value of ""token"" URL parameter which should be provided for connecting window; 154 bool fNativeOnlyConn{false}; ///<! only native connection are allowed, created by Show() method; 155 bool fUseCurrentDir{false}; ///<! if window can access local files via currentdir/ path of http server; 156 unsigned fMaxQueueLength{10}; ///<! maximal number of queue entries; 157 WebWindowConnectCallback_t fConnCallback",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RWebWindow_8hxx_source.html:6494,authenticat,authentication,6494,doc/v632/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RWebWindow_8hxx_source.html,1,['authenticat'],['authentication']
Security,"Data(data) {}; 135 };; 136 ; 137 using ConnectionsList_t = std::vector<std::shared_ptr<WebConn>>;; 138 ; 139 std::shared_ptr<RWebWindowsManager> fMgr; ///<! display manager; 140 std::shared_ptr<RWebWindow> fMaster; ///<! master window where this window is embedded; 141 std::vector<MasterConn> fMasterConns; ///<! master connections; 142 std::string fDefaultPage; ///<! HTML page (or file name) returned when window URL is opened; 143 std::string fPanelName; ///<! panel name which should be shown in the window; 144 unsigned fId{0}; ///<! unique identifier; 145 bool fUseServerThreads{false}; ///<! indicates that server thread is using, no special window thread; 146 bool fUseProcessEvents{false}; ///<! all window functionality will run through process events; 147 bool fProcessMT{false}; ///<! if window event processing performed in dedicated thread; 148 bool fSendMT{false}; ///<! true is special threads should be used for sending data; 149 bool fRequireAuthKey{true}; ///<! defines if authentication key always required when connect to the widget; 150 std::shared_ptr<RWebWindowWSHandler> fWSHandler; ///<! specialize websocket handler for all incoming connections; 151 unsigned fConnCnt{0}; ///<! counter of new connections to assign ids; 152 ConnectionsList_t fPendingConn; ///<! list of pending connection with pre-assigned keys; 153 ConnectionsList_t fConn; ///<! list of all accepted connections; 154 mutable std::mutex fConnMutex; ///<! mutex used to protect connection list; 155 unsigned fConnLimit{1}; ///<! number of allowed active connections; 156 std::string fConnToken; ///<! value of ""token"" URL parameter which should be provided for connecting window; 157 bool fNativeOnlyConn{false}; ///<! only native connection are allowed, created by Show() method; 158 bool fUseCurrentDir{false}; ///<! if window can access local files via currentdir/ path of http server; 159 unsigned fMaxQueueLength{10}; ///<! maximal number of queue entries; 160 WebWindowConnectCallback_t fConnCallback",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RWebWindow_8hxx_source.html:6645,authenticat,authentication,6645,doc/master/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RWebWindow_8hxx_source.html,1,['authenticat'],['authentication']
Security,"DataMember.Append(dataMemberName);; 844 md5DataMember.Append(dataMemberName);; 845 // We call UrlGenerator for the scopeName.; 846 TString urlForDataMember = UrlGenerator(scopeName, scopeType);; 847 // Then we append ""#a"" and the hashed text.; 848 urlForDataMember.Append(""#a"");; 849 urlForDataMember.Append(md5DataMember.MD5());; 850 return urlForDataMember;; 851 }; 852 // If the data member is enumerator, then we first have to check if the enumeration is anonymous.; 853 // Doxygen requires different syntax for anonymous enumeration (""scopeName::@1@1"").; 854 // We create a TString with the name of the scope and the enumeration from which the enumerator is.; 855 TString scopeEnumeration = dataMember->GetTrueTypeName();; 856 TString md5EnumClass;; 857 if (scopeEnumeration.Contains(""(unnamed)"")) {; 858 // FIXME: need to investigate the numbering scheme.; 859 md5EnumClass.Append(scopeName);; 860 md5EnumClass.Append(""::@1@1"");; 861 } else {; 862 // If the enumeration is not anonymous we put ""scopeName::Enumeration"" in a TString,; 863 // which will be hashed with MD5 later.; 864 md5EnumClass.Append(scopeEnumeration);; 865 // We extract the part after ""::"" (this is the enumerator name).; 866 TString enumOnlyName = TClassEdit::GetUnqualifiedName(scopeEnumeration);; 867 // The syntax is ""Class::EnumeratorEnumerator; 868 md5EnumClass.Append(enumOnlyName);; 869 }; 870 // The next part of the URL is hashed ""@ scopeName::EnumeratorEnumerator"".; 871 TString md5Enumerator(""@ "");; 872 md5Enumerator.Append(scopeName);; 873 md5Enumerator.Append(""::"");; 874 md5Enumerator.Append(dataMemberName);; 875 md5Enumerator.Append(dataMemberName);; 876 // We make the URL for the ""scopeName"".; 877 TString url = UrlGenerator(scopeName, scopeType);; 878 // Then we have to append the hashed text for the enumerator.; 879 url.Append(""#a"");; 880 url.Append(md5EnumClass.MD5());; 881 // We append ""a"" and then the next hashed text.; 882 url.Append(""a"");; 883 url.Append(md5Enumerator.MD5());; 884 return url",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:32217,hash,hashed,32217,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['hash'],['hashed']
Security,"DataSet::GetNEvtSigTest ; (; ). return number of signal test events in dataset ; Definition at line 427 of file DataSet.cxx. ◆ GetNEvtSigTrain(). Long64_t TMVA::DataSet::GetNEvtSigTrain ; (; ). return number of signal training events in dataset ; Definition at line 443 of file DataSet.cxx. ◆ GetNSpectators(). UInt_t TMVA::DataSet::GetNSpectators ; (; ); const. access the number of targets through the datasetinfo ; Definition at line 232 of file DataSet.cxx. ◆ GetNTargets(). UInt_t TMVA::DataSet::GetNTargets ; (; ); const. access the number of targets through the datasetinfo ; Definition at line 224 of file DataSet.cxx. ◆ GetNTestEvents(). Long64_t TMVA::DataSet::GetNTestEvents ; (; ); const. inline . Definition at line 69 of file DataSet.h. ◆ GetNTrainingEvents(). Long64_t TMVA::DataSet::GetNTrainingEvents ; (; ); const. inline . Definition at line 68 of file DataSet.h. ◆ GetNVariables(). UInt_t TMVA::DataSet::GetNVariables ; (; ); const. access the number of variables through the datasetinfo ; Definition at line 216 of file DataSet.cxx. ◆ GetResults(). TMVA::Results * TMVA::DataSet::GetResults ; (; const TString & ; resultsName, . Types::ETreeType ; type, . Types::EAnalysisType ; analysistype . ). Definition at line 265 of file DataSet.cxx. ◆ GetTestEvent(). const Event * TMVA::DataSet::GetTestEvent ; (; Long64_t ; ievt); const. inline . Definition at line 75 of file DataSet.h. ◆ GetTrainingEvent(). const Event * TMVA::DataSet::GetTrainingEvent ; (; Long64_t ; ievt); const. inline . Definition at line 74 of file DataSet.h. ◆ GetTree(). TTree * TMVA::DataSet::GetTree ; (; Types::ETreeType ; type). create the test/trainings tree with all the variables, the weights, the classes, the targets, the spectators, the MVA outputs ; Definition at line 609 of file DataSet.cxx. ◆ HasNegativeEventWeights(). Bool_t TMVA::DataSet::HasNegativeEventWeights ; (; ); const. inline . Definition at line 101 of file DataSet.h. ◆ IncrementNClassEvents(). void TMVA::DataSet::IncrementNClassE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSet.html:22022,access,access,22022,doc/master/classTMVA_1_1DataSet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSet.html,1,['access'],['access']
Security,"DeclId_t DeclId_tDefinition TInterpreter.h:288; TInterpreter::ClassInfo_HasDefaultConstructorvirtual Bool_t ClassInfo_HasDefaultConstructor(ClassInfo_t *, Bool_t=kFALSE) constDefinition TInterpreter.h:412; TInterpreter::ClassInfo_ClassPropertyvirtual Long_t ClassInfo_ClassProperty(ClassInfo_t *) constDefinition TInterpreter.h:400; TInterpreter::ClassInfo_GetBaseOffsetvirtual Longptr_t ClassInfo_GetBaseOffset(ClassInfo_t *, ClassInfo_t *, void *=nullptr, bool=true) constDefinition TInterpreter.h:409; TInterpreter::ClassInfo_Destructvirtual void ClassInfo_Destruct(ClassInfo_t *, void *) constDefinition TInterpreter.h:404; TIsAProxyTIsAProxy implementation class.Definition TIsAProxy.h:27; TIterDefinition TCollection.h:235; TIter::Resetvoid Reset()Definition TCollection.h:254; TListOfDataMembersA collection of TDataMember objects designed for fast access given a DeclId_t and for keep track of T...Definition TListOfDataMembers.h:33; TListOfEnumsWithLockA collection of TEnum objects designed for fast access given a DeclId_t and for keep track of TEnum t...Definition TListOfEnumsWithLock.h:31; TListOfEnumsWithLock::Classstatic TClass * Class(); TListOfEnumsA collection of TEnum objects designed for fast access given a DeclId_t and for keep track of TEnum t...Definition TListOfEnums.h:33; TListOfFunctionTemplatesA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFu...Definition TListOfFunctionTemplates.h:35; TListOfFunctionTemplates::fClassTClass * fClassDefinition TListOfFunctionTemplates.h:40; TListOfFunctionTemplates::FindObjectTObject * FindObject(const char *name) const overrideSpecialize FindObject to do search for the a function just by name or create it if its not already in...Definition TListOfFunctionTemplates.cxx:175; TListOfFunctionTemplates::Loadvoid Load()Load all the functions known to the interpreter for the scope 'fClass' into this collection.Definition TListOfFunctionTemplates.cxx:356; TListOfFunctionTemplate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:356555,access,access,356555,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,2,['access'],['access']
Security,"DeclId_t and for keep track of TFunction that were described unloaded function ;  CTListOfFunctionsIterIterator for TListOfFunctions ;  CTListOfFunctionTemplatesA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFunction that were described unloaded function ;  CTListOfTypesA collection of TDataType designed to hold the typedef information and numerical type information ;  CTLockFileA scoped lock based on files ;  CTLockGuard;  ►CTLorentzRotation;  CTLorentzRotationRow;  CTLorentzVector;  CTMacOSXSystem;  CTMacroClass supporting a collection of lines with C++ code ;  CTMakeProject;  CTMapTMap implements an associative array of (key,value) pairs using a THashTable for efficient retrieval (therefore TMap does not conserve the order of the entries) ;  CTMapFileThis class implements a shared memory region mapped to a file ;  CTMapIterIterator of map ;  CTMapRecKeep track of an object in the mapped file ;  CTMarkerManages Markers ;  CTMarker3DBoxA special 3-D marker designed for event display ;  CTMaterialManages a detector material ;  CTMathTextTo draw TeX Mathematical Formula ;  CTMatrixDEigen;  CTMatrixDSymEigen;  CTMatrixT;  CTMatrixTBase;  CTMatrixTColumn;  CTMatrixTColumn_const;  CTMatrixTDiag;  CTMatrixTDiag_const;  CTMatrixTFlat;  CTMatrixTFlat_const;  CTMatrixTLazy;  CTMatrixTRow;  CTMatrixTRow_const;  CTMatrixTSparse;  CTMatrixTSparseDiag;  CTMatrixTSparseDiag_const;  CTMatrixTSparseRow;  CTMatrixTSparseRow_const;  CTMatrixTSub;  CTMatrixTSub_const;  CTMatrixTSym;  CTMatrixTSymLazy;  CTMCParticle;  CTMCVerbose;  CTMD5This code implements the MD5 message-digest algorithm ;  CTMehrotraSolver;  CTMemberInspectorAbstract base class for accessing the data-members of a class ;  CTMemberStreamer;  ►CTMemFileA TMemFile is like a normal TFile except that it reads and writes only from memory ;  CTMemBlock;  CTMemStat;  CTMemStatHook;  CTMemStatShowUtility class post-processing the file generated by TMemStat (default memstat.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:142366,access,accessing,142366,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,1,['access'],['accessing']
Security,"Default Constructor. ~TSchemaRule(); Destructor. TSchemaRule(const ROOT::TSchemaRule& rhs); Copy Constructor. void ls(Option_t* option = """") const; The ls function lists the contents of a class on stdout. Ls output; is typically much less verbose then Dump(). void AsString(TString& out, const char* options = """") const; Add to the string 'out' the string representation of the rule.; if options contains:; 's' : add the short form of the rule is possible; 'x' : add the xml form of the rule. void Clear(Option_t* = """"); Zero out this rule object. Bool_t SetFromRule(const char* rule); Set the content fot this object from the rule; See TClass::AddRule for details on the syntax. Bool_t SetVersion(const TString& version); Set the version string - returns kFALSE if the format is incorrect. const char * GetVersion() const; Get the version string. Bool_t TestVersion(Int_t version) const; Check if given version number is defined in this rule. Bool_t SetChecksum(const TString& checksum); Set the checksum string - returns kFALSE if the format is incorrect. Bool_t TestChecksum(UInt_t checksum) const; Check if given checksum is defined in this rule. void SetSourceClass(const TString& classname); Set the source class of this rule (i.e. the onfile class). const char * GetSourceClass() const; Get the source class of this rule (i.e. the onfile class). void SetTargetClass(const TString& classname); Set the target class of this rule (i.e. the in memory class). const char * GetTargetClass() const; Get the targte class of this rule (i.e. the in memory class). void SetTarget(const TString& target); Set the target member of this rule (i.e. the in memory data member). const char * GetTargetString() const; Get the target data members of this rule as a simple string (i.e. the in memory data member). const TObjArray* GetTarget() const; Get the target data members of this rule (i.e. the in memory data member). void SetSource(const TString& source); Set the list of source members. This should be in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__TSchemaRule.html:9096,checksum,checksum,9096,root/html528/ROOT__TSchemaRule.html,https://root.cern,https://root.cern/root/html528/ROOT__TSchemaRule.html,8,['checksum'],['checksum']
Security,"DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& c) const. get internal data into 3 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c); }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar* dest) const. get internal data into a C-style array of 3 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. bool operator==(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const. Scalar X() const; ------ Individual element access, in various coordinate systems ------. Cartesian X, converting if necessary from internal coordinate system. { return fCoordinates.X(); }. Scalar Y() const. Cartesian Y, converting if necessary from internal coordinate system. { return fCoordinates.Y(); }. Scalar Z() const. Cartesian Z, converting if necessary from internal coordinate system. { return fCoordinates.Z(); }. Scalar R() const. Polar R, converting if necessary from internal coordinate system. { return fCoordinates.R(); }. Scalar Theta() const. Polar theta, converting if necessary from internal coordinate system. { return fCoordinates.Theta(); }. Scalar Phi() const. Polar phi, converting if necessary from internal coordinate system. { return fCoordinates.Phi(); }. Scalar Eta() const. Polar eta, converting if necessary from internal coordinate system. { return fCoordinates.Eta(); }. Scalar Rho() const. Cylindrical transverse component rho. { return fCoordinates.Rho(); }. Scalar Mag2() const; ----- Other fundamental pro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html:24208,access,access,24208,root/html526/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html,5,['access'],['access']
Security,"DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& b, ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& c) const. get internal data into 3 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c); }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar* dest) const. get internal data into a C-style array of 3 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. bool operator==(const ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::DisplacementVector3D<ROOT::Math::Polar3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const. Scalar X() const; ------ Individual element access, in various coordinate systems ------. Cartesian X, converting if necessary from internal coordinate system. { return fCoordinates.X(); }. Scalar Y() const. Cartesian Y, converting if necessary from internal coordinate system. { return fCoordinates.Y(); }. Scalar Z() const. Cartesian Z, converting if necessary from internal coordinate system. { return fCoordinates.Z(); }. Scalar R() const. Polar R, converting if necessary from internal coordinate system. { return fCoordinates.R(); }. Scalar Theta() const. Polar theta, converting if necessary from internal coordinate system. { return fCoordinates.Theta(); }. Scalar Phi() const. Polar phi, converting if necessary from internal coordinate system. { return fCoordinates.Phi(); }. Scalar Eta() const. Polar eta, converting if necessary from internal coordinate system. { return fCoordinates.Eta(); }. Scalar Rho() const. Cylindrical transverse component rho. { return fCoordinates.Rho(); }. Scalar Mag2() const; ----- Other fundamental pro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1Polar3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:13227,access,access,13227,root/html526/ROOT__Math__DisplacementVector3D_-p1Polar3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1Polar3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,5,['access'],['access']
Security,"DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& b, ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& c) const. get internal data into 3 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c); }. void GetCoordinates(ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar* dest) const. get internal data into a C-style array of 3 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. bool operator==(const ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const. Scalar X() const; ------ Individual element access, in various coordinate systems ------. Cartesian X, converting if necessary from internal coordinate system. { return fCoordinates.X(); }. Scalar Y() const. Cartesian Y, converting if necessary from internal coordinate system. { return fCoordinates.Y(); }. Scalar Z() const. Cartesian Z, converting if necessary from internal coordinate system. { return fCoordinates.Z(); }. Scalar R() const. Polar R, converting if necessary from internal coordinate system. { return fCoordinates.R(); }. Scalar Theta() const. Polar theta, converting if necessary from internal coordinate system. { return fCoordinates.Theta(); }. Scalar Phi() const. Polar phi, converting if necessary from internal coordinate system. { return fCoordinates.Phi(); }. Scalar Eta() const. Polar eta, converting if necessary from internal coordinate system. { return fCoordinates.Eta(); }. Scalar Rho() const. Cylindrical transverse component rho. { return fCoordinates.Rho(); }. Scalar Mag2() const; ----- Other fundamental pro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:12702,access,access,12702,root/html526/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,5,['access'],['access']
Security,"Definition TClassTable.h:53; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TClass::GetStateEState GetState() constDefinition TClass.h:488; TClass::fClassVersionVersion_t fClassVersionDefinition TClass.h:221; TClass::SetUnloadedvoid SetUnloaded()Call this method to indicate that the shared library containing this class's code has been removed (u...Definition TClass.cxx:6309; TClass::SetClassVersionvoid SetClassVersion(Version_t version)Private function.Definition TClass.cxx:5675; TClass::fVersionUsedstd::atomic< Bool_t > fVersionUsedsaved remember if fOffsetStreamer has been set.Definition TClass.h:262; TClass::kHasTClassInit@ kHasTClassInitDefinition TClass.h:127; TClass::GetClassstatic TClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE)Static method returning pointer to TClass of the specified class name.Definition TClass.cxx:2968; TCollection::UseRWLockvirtual bool UseRWLock(Bool_t enable=true)Set this collection to use a RW lock upon access, making it thread safe.Definition TCollection.cxx:761; TCollection::SetOwnervirtual void SetOwner(Bool_t enable=kTRUE)Set whether this collection is the owner (enable==true) of its content.Definition TCollection.cxx:746; TInterpreter::RegisterTClassUpdatevirtual void RegisterTClassUpdate(TClass *oldcl, DictFuncPtr_t dict)=0; TIterDefinition TCollection.h:235; TListA doubly linked list.Definition TList.h:38; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TMapTMap implements an associative array of (key,value) pairs using a THashTable for efficient retrieval ...Definition TMap.h:40; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObjStringColle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClassTable_8cxx_source.html:46183,access,access,46183,doc/v632/TClassTable_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClassTable_8cxx_source.html,1,['access'],['access']
Security,"Definition TClassTable.h:53; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TClass::GetStateEState GetState() constDefinition TClass.h:488; TClass::fClassVersionVersion_t fClassVersionDefinition TClass.h:221; TClass::SetUnloadedvoid SetUnloaded()Call this method to indicate that the shared library containing this class's code has been removed (u...Definition TClass.cxx:6376; TClass::SetClassVersionvoid SetClassVersion(Version_t version)Private function.Definition TClass.cxx:5742; TClass::fVersionUsedstd::atomic< Bool_t > fVersionUsedsaved remember if fOffsetStreamer has been set.Definition TClass.h:262; TClass::kHasTClassInit@ kHasTClassInitDefinition TClass.h:127; TClass::GetClassstatic TClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE)Static method returning pointer to TClass of the specified class name.Definition TClass.cxx:3035; TCollection::UseRWLockvirtual bool UseRWLock(Bool_t enable=true)Set this collection to use a RW lock upon access, making it thread safe.Definition TCollection.cxx:761; TCollection::SetOwnervirtual void SetOwner(Bool_t enable=kTRUE)Set whether this collection is the owner (enable==true) of its content.Definition TCollection.cxx:746; TInterpreter::RegisterTClassUpdatevirtual void RegisterTClassUpdate(TClass *oldcl, DictFuncPtr_t dict)=0; TIterDefinition TCollection.h:235; TListA doubly linked list.Definition TList.h:38; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TMapTMap implements an associative array of (key,value) pairs using a THashTable for efficient retrieval ...Definition TMap.h:40; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObjStringColle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClassTable_8cxx_source.html:46183,access,access,46183,doc/master/TClassTable_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClassTable_8cxx_source.html,1,['access'],['access']
Security,"Definition TString.cxx:1182; TString::StripTSubString Strip(EStripType s=kTrailing, char c=' ') constReturn a substring of self stripped at beginning and/or end.Definition TString.cxx:1163; TString::Dataconst char * Data() constDefinition TString.h:376; TString::kBoth@ kBothDefinition TString.h:276; TString::BeginsWithBool_t BeginsWith(const char *s, ECaseCompare cmp=kExact) constDefinition TString.h:623; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TString::Streamervirtual void Streamer(TBuffer &)Stream a string object.Definition TString.cxx:1412; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TUUIDThis class defines a UUID (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDent...Definition TUUID.h:42; TUUID::Streamervirtual void Streamer(TBuffer &); TUUID::AsStringconst char * AsString() constReturn UUID as string. Copy string immediately since it will be reused.Definition TUUID.cxx:571; TUUID::SizeofInt_t Sizeof() constDefinition TUUID.h:85; TUUID::FillBuffervoid FillBuffer(char *&buffer)Stream UUID into output buffer.Definition TUUID.cxx:275; TUUID::StreamerV1void StreamerV1(TBuffer &b)Stream UUID from input buffer.Definition TUUID.cxx:309; TVirtualStreamerInfoAbstract Interface class describing Streamer information for one class.Definition TVirtualStreamerInfo.h:44; TVirtualStreamerInfo::GetClassvirtual TClass * GetClass() const =0; bool; int; unsigned int; nconst Int_t nDefinition legend1.C:16; ROOT::DirAutoAdd_tvoid(* DirAutoAdd_t)(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html:105868,access,access,105868,doc/master/TDirectoryFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html,2,['access'],['access']
Security,"Definition at line 2166 of file rootcling_impl.cxx. ◆ IncludeHeaders(). static bool IncludeHeaders ; (; const std::vector< std::string > & ; headers, . cling::Interpreter & ; interpreter . ). static . Includes all given headers in the interpreter. ; Returns true when we could include the headers and otherwise false on an error when including. ; Definition at line 2048 of file rootcling_impl.cxx. ◆ InheritsFromTObject(). bool InheritsFromTObject ; (; const clang::RecordDecl * ; cl, . const cling::Interpreter & ; interp . ). Definition at line 431 of file rootcling_impl.cxx. ◆ InheritsFromTSelector(). bool InheritsFromTSelector ; (; const clang::RecordDecl * ; cl, . const cling::Interpreter & ; interp . ). Definition at line 443 of file rootcling_impl.cxx. ◆ InjectModuleUtilHeader(). static bool InjectModuleUtilHeader ; (; const char * ; argv0, . TModuleGenerator & ; modGen, . cling::Interpreter & ; interp, . bool ; umbrella . ). static . Write the extra header injected into the module: umbrella header if (umbrella) else content header. ; Definition at line 1972 of file rootcling_impl.cxx. ◆ IsCorrectClingArgument(). bool IsCorrectClingArgument ; (; const std::string & ; argument). Check if the argument is a sane cling argument. ; Performing the following checks: 1) It does not start with ""--"" and is not the –param option. ; Definition at line 3419 of file rootcling_impl.cxx. ◆ IsGoodForAutoParseMap(). bool IsGoodForAutoParseMap ; (; const clang::RecordDecl & ; rcd). Check if the class good for being an autoparse key. ; We exclude from this set stl containers of pods/strings TODO: we may use also __gnu_cxx:: ; Definition at line 3169 of file rootcling_impl.cxx. ◆ IsGoodLibraryName(). bool IsGoodLibraryName ; (; const std::string & ; name). Definition at line 5563 of file rootcling_impl.cxx. ◆ IsImplementationName(). bool IsImplementationName ; (; const std::string & ; filename). Definition at line 3410 of file rootcling_impl.cxx. ◆ IsLinkdefFile(). bool IsLinkdefFile ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx.html:54426,inject,injected,54426,doc/master/rootcling__impl_8cxx.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx.html,1,['inject'],['injected']
Security,"Definition at line 54 of file TExMap.h. ◆ IsA(). TClass * TExMap::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 81 of file TExMap.h. ◆ operator()() [1/2]. Long64_t & TExMap::operator() ; (; Long64_t ; key). inline . Definition at line 79 of file TExMap.h. ◆ operator()() [2/2]. Long64_t & TExMap::operator() ; (; ULong64_t ; hash, . Long64_t ; key . ). Return a reference to the value belonging to the key with the specified hash value. ; If the key does not exist it will be added. NOTE: the reference will be invalidated an Expand() triggered by an Add() or another operator() call. ; Definition at line 139 of file TExMap.cxx. ◆ operator=(). TExMap & TExMap::operator= ; (; const TExMap & ; map). Assignment operator. ; Definition at line 64 of file TExMap.cxx. ◆ Remove() [1/2]. void TExMap::Remove ; (; Long64_t ; key). inline . Definition at line 76 of file TExMap.h. ◆ Remove() [2/2]. void TExMap::Remove ; (; ULong64_t ; hash, . Long64_t ; key . ). Remove entry with specified key from the TExMap. ; Definition at line 217 of file TExMap.cxx. ◆ Streamer(). void TExMap::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the collection to or from the I/O buffer. ; Reimplemented from TObject.; Definition at line 306 of file TExMap.cxx. ◆ StreamerNVirtual(). void TExMap::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 81 of file TExMap.h. Friends And Related Symbol Documentation. ◆ TExMapIter. friend class TExMapIter. friend . Definition at line 35 of file TExMap.h. Member Data Documentation. ◆ fSize. Int_t TExMap::fSize. private . Definition at line 51 of file TExMap.h. ◆ fTable. Assoc_t* TExMap::fTable. private . Definition at line 50 of file TExMap.h. ◆ fTally. Int_t TExMap::fTally. private . Definition at line 52 of file TExMap.h. Libraries for TExMap:. [legend]; The documentation for this class was generated from the following",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTExMap.html:16555,hash,hash,16555,doc/master/classTExMap.html,https://root.cern,https://root.cern/doc/master/classTExMap.html,1,['hash'],['hash']
Security,"Delete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. public:. static map<RooAbsArg*,TRefArray*>RooAbsArg::_ioEvoListtemporary holding list for proxies needed in schema evolution ; static stack<RooAbsArg*>RooAbsArg::_ioReadStackreading stack ; static const UInt_tRooAbsArg::fnv1a32start; static const ULong64_tRooAbsArg::fnv1a64start. protected:. set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; Bool_t_cdfBoundariesUse boundary conditions for CDFs.; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistry_codeReg! Auxiliary class keeping tracking of analytical integration code; RooDataHist*_dataHistUnowned pointer to underlying histogram; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components create",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooHistPdf.html:39713,validat,validate,39713,root/html534/RooHistPdf.html,https://root.cern,https://root.cern/root/html534/RooHistPdf.html,1,['validat'],['validate']
Security,"Delete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. public:. static map<RooAbsArg*,TRefArray*>RooAbsArg::_ioEvoListtemporary holding list for proxies needed in schema evolution ; static stack<RooAbsArg*>RooAbsArg::_ioReadStackreading stack ; static const UInt_tRooAbsArg::fnv1a32start; static const ULong64_tRooAbsArg::fnv1a64start. protected:. set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; Bool_t_cdfBoundariesUse boundary conditions for CDFs.; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistry_codeReg! Auxiliary class keeping tracking of analytical integration code; RooDataHist*_dataHistUnowned pointer to underlying histogram; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooSetProxy_depListList of observables mapped onto histogram observables; RooExpensiveObjectCache*RooAbsArg::_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooHistFunc.html:32890,validat,validate,32890,root/html534/RooHistFunc.html,https://root.cern,https://root.cern/root/html534/RooHistFunc.html,1,['validat'],['validate']
Security,"Dimension] Minima of varexp columns; Double_t*fW![fSelectedRows]Local buffer for weights; Double_tfWeightTree weight (see TTree::SetWeight). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input variables and selection expression. varexp is an expression of the general form e1:e2:e3; where e1,etc is a formula referencing a combination of the columns; Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x). selection is an expression with a combination of the columns; Example:; selection = ""x<y && sqrt(z)>3.2""; in a selection all the C++ operators are authorized. Return kFALSE if any of the variable is not compilable. Double_t* GetVal(Int_t i) const; Get variable buffer. TTreeFormula* GetVar(Int_t i) const; Get variable formula. void InitArrays(Int_t newsize); Initialization of the primitive type arrays if the new size is bigger than the available space. UInt_t SplitNames(const TString& varexp, vector<TString>& names); Build Index array for names in varexp.; This will allocated a C style array of TString and Ints. Bool_t Notify(); This function is called at the first entry of a new tree in a chain. void ProcessFill(Long64_t entry); Called in the entry loop for all entries accepted by Select. void ProcessFillMultiple(Long64_t entry); Called in the entry loop for all entries accepted by Select.; Complex case with multiplicity. void ProcessFillObject(Long64_t entry); Called in the entry loop for all entries accepted by Select.; Case where the only variable returns an object (or pointer to). void SetEstimate(Long64_t n)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSelectorDraw.html:9836,authoriz,authorized,9836,root/html528/TSelectorDraw.html,https://root.cern,https://root.cern/root/html528/TSelectorDraw.html,1,['authoriz'],['authorized']
Security,"Dimension] Minima of varexp columns; Double_t*fW![fSelectedRows]Local buffer for weights; Double_tfWeightTree weight (see TTree::SetWeight). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input variables and selection expression. varexp is an expression of the general form e1:e2:e3; where e1,etc is a formula referencing a combination of the columns; Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x). selection is an expression with a combination of the columns; Example:; selection = ""x<y && sqrt(z)>3.2""; in a selection all the C++ operators are authorized. Return kFALSE if any of the variable is not compilable. Double_t* GetVal(Int_t i) const; Return the last values corresponding to the i-th component; of the formula being processed (where the component are ':' separated).; The actual number of entries is:; GetSelectedRows() % tree->GetEstimate(); Note GetSelectedRows currently returns the actual number of values plotted; and thus if the formula contains arrays, this number might be greater than; the number of entries in the trees.; By default TTree::Draw creates the arrays obtained; with all GetVal and GetW with a length corresponding to the; parameter fEstimate. By default fEstimate=10000 and can be modified; via TTree::SetEstimate. A possible recipee is to do; tree->SetEstimate(tree->GetEntries());; You must call SetEstimate if the expected number of selected rows; is greater than 10000.; See TTree::Draw for additional details. TTreeFormula* GetVar(Int_t i) const; Return the TTreeFormula corresponding to t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSelectorDraw.html:9942,authoriz,authorized,9942,root/html530/TSelectorDraw.html,https://root.cern,https://root.cern/root/html530/TSelectorDraw.html,3,['authoriz'],['authorized']
Security,"Directory == dir) return;; 8942 if (fDirectory) fDirectory->Remove(this);; 8943 fDirectory = dir;; 8944 if (fDirectory) {; 8945 fFunctions->UseRWLock();; 8946 fDirectory->Append(this);; 8947 }; 8948}; 8949 ; 8950////////////////////////////////////////////////////////////////////////////////; 8951/// Replace bin errors by values in array error.; 8952 ; 8953void TH1::SetError(const Double_t *error); 8954{; 8955 for (Int_t i = 0; i < fNcells; ++i) SetBinError(i, error[i]);; 8956}; 8957 ; 8958////////////////////////////////////////////////////////////////////////////////; 8959/// Change the name of this histogram; 8960///; 8961 ; 8962void TH1::SetName(const char *name); 8963{; 8964 // Histograms are named objects in a THashList.; 8965 // We must update the hashlist if we change the name; 8966 // We protect this operation; 8967 R__LOCKGUARD(gROOTMutex);; 8968 if (fDirectory) fDirectory->Remove(this);; 8969 fName = name;; 8970 if (fDirectory) fDirectory->Append(this);; 8971}; 8972 ; 8973////////////////////////////////////////////////////////////////////////////////; 8974/// Change the name and title of this histogram; 8975 ; 8976void TH1::SetNameTitle(const char *name, const char *title); 8977{; 8978 // Histograms are named objects in a THashList.; 8979 // We must update the hashlist if we change the name; 8980 SetName(name);; 8981 SetTitle(title);; 8982}; 8983 ; 8984////////////////////////////////////////////////////////////////////////////////; 8985/// Set statistics option on/off.; 8986///; 8987/// By default, the statistics box is drawn.; 8988/// The paint options can be selected via gStyle->SetOptStat.; 8989/// This function sets/resets the kNoStats bit in the histogram object.; 8990/// It has priority over the Style option.; 8991 ; 8992void TH1::SetStats(Bool_t stats); 8993{; 8994 ResetBit(kNoStats);; 8995 if (!stats) {; 8996 SetBit(kNoStats);; 8997 //remove the ""stats"" object from the list of functions; 8998 if (fFunctions) {; 8999 TObject *obj = fFunctions->Fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:349998,hash,hashlist,349998,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['hash'],['hashlist']
Security,"Directory::fContext!Pointer to a list of TContext object pointing to this TDirectory; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TDirectoryFile::fKeysPointer to keys list in memory; TList*TDirectory::fListList of objects in memory; Bool_tTDirectoryFile::fModifiedtrue if directory has been modified; TObject*TDirectory::fMotherpointer to mother of the directory; TStringTNamed::fNameobject identifier; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Bool_tTDirectoryFile::fWritabletrue if directory is writable; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void InternalAppend(TObject* obj); Internal access to TDirectory append method. void Add(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. void Append(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. WSDir(const char* name, const char* title, RooWorkspace* wspace). virtual ~WSDir(); { Clear(""nodelete"") ; }. » Last changed: Sat Jun 20 17:31:22 2015 » Last generated: 2015-06-20 17:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooWorkspace__WSDir.html:13255,access,access,13255,root/html604/RooWorkspace__WSDir.html,https://root.cern,https://root.cern/root/html604/RooWorkspace__WSDir.html,1,['access'],['access']
Security,"Directory::fContext!Pointer to a list of TContext object pointing to this TDirectory; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TDirectoryFile::fKeysPointer to keys list in memory; TList*TDirectory::fListList of objects in memory; Bool_tTDirectoryFile::fModifiedtrue if directory has been modified; TObject*TDirectory::fMotherpointer to mother of the directory; TStringTNamed::fNameobject identifier; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Bool_tTDirectoryFile::fWritabletrue if directory is writable; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void InternalAppend(TObject* obj); Internal access to TDirectory append method. void Add(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. void Append(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. WSDir(const char* name, const char* title, RooWorkspace* wspace). virtual ~WSDir(); { Clear(""nodelete"") ; }. » Last changed: Tue Jun 30 14:38:17 2015 » Last generated: 2015-06-30 14:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooWorkspace__WSDir.html:13255,access,access,13255,root/html602/RooWorkspace__WSDir.html,https://root.cern,https://root.cern/root/html602/RooWorkspace__WSDir.html,1,['access'],['access']
Security,"Directory::fContext!Pointer to a list of TContext object pointing to this TDirectory; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TDirectoryFile::fKeysPointer to keys list in memory; TList*TDirectory::fListList of objects in memory; Bool_tTDirectoryFile::fModifiedtrue if directory has been modified; TObject*TDirectory::fMotherpointer to mother of the directory; TStringTNamed::fNameobject identifier; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Bool_tTDirectoryFile::fWritabletrue if directory is writable; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void InternalAppend(TObject* obj); Internal access to TDirectory append method. void Add(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. void Append(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. WSDir(const char* name, const char* title, RooWorkspace* wspace). virtual ~WSDir(); { Clear(""nodelete"") ; }. » Last changed: Tue Mar 10 17:21:17 2015 » Last generated: 2015-03-10 17:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooWorkspace__WSDir.html:12883,access,access,12883,root/html534/RooWorkspace__WSDir.html,https://root.cern,https://root.cern/root/html534/RooWorkspace__WSDir.html,1,['access'],['access']
Security,"DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::ScalarZ() const; ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Cartesian3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=( const ForeignVector & v). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const Scalar[] src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar c). Set internal data based on 3 Scalar numbers. { fCoordinates.SetCoordinates(a, b, c); return *this; }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::Globa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1GlobalCoordinateSystemTag_.html:11288,access,access,11288,root/html602/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1GlobalCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1GlobalCoordinateSystemTag_.html,2,['access'],['access']
Security,"DocFunc; static TDocParser::EDocContextkIgnore; static TDocParser::EDocContextkNumDocContexts. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDocParser(TClassDocOutput& docOutput, TClass* cl); Constructor called for parsing class sources. TDocParser(TDocOutput& docOutput); constructor called for parsing text files with Convert(). ~TDocParser(); destructor, checking whether all methods have been found for gDebug > 3. void AddClassMethodsRecursively(TBaseClass* bc); Add accessible (i.e. non-private) methods of base class bc; and its base classes' methods to methodNames.; If bc==0, we add fCurrentClass's methods (and also private functions). void AddClassDataMembersRecursively(TBaseClass* bc); Add data members of fCurrentClass and of bc to datamembers, recursively.; Real data members are in idx 0..2 (public, protected, private access),; enum constants in idx 3..5. void AnchorFromLine(const TString& line, TString& anchor); Create an anchor from the given line, by hashing it and; convertig the hash into a custom base64 string. void Convert(ostream& out, istream& in, const char* relpath, Bool_t isCode, Bool_t interpretDirectives); Parse text file ""in"", add links etc, and write output to ""out"".; If ""isCode"", ""in"" is assumed to be C++ code. void DecorateKeywords(ostream& out, const char* text); Expand keywords in text, writing to out. void DecorateKeywords(TString& text); Find keywords in line and create URLs around them. Escape characters with a; special meaning for HTML. Protect ""Begin_Html""/""End_Html"" pairs, and set the; parsing context. Evaluate sequences like a::b->c.; Skip regions where directives are active. void DecrementMethodCount(const char* name); reduce method count for method called name,; removing it from fMethodCounts once the count reaches 0. void DeleteDirectiveOutput() const; Delete output generated by prior runs of all known directives;; the output file names might have changes. void ExpandCPPLine(TString& lin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDocParser.html:12998,hash,hashing,12998,root/html602/TDocParser.html,https://root.cern,https://root.cern/root/html602/TDocParser.html,4,['hash'],"['hash', 'hashing']"
Security,"Double_t variable.; By default all components are initialized by zero.;   TLorentzVector v1;      // initialized; by (0., 0., 0., 0.);   TLorentzVector v2(1., 1., 1., 1.);;   TLorentzVector v3(v1);;   TLorentzVector v4(TVector3(1., 2., 3.),4.);; For backward compatibility there are two constructors from an Double_t; and Float_t  C array.;  . Access to the components; There are two sets of access functions to the components of a LorentzVector:; X(), Y(), Z(), T() and Px(),; Py(), Pz() and E(). Both sets return the same values; but the first set is more relevant for use where TLorentzVector; describes a combination of position and time and the second set is more; relevant where TLorentzVector describes momentum and energy:;   Double_t xx =v.X();;   ...;   Double_t tt = v.T();;   Double_t px = v.Px();;   ...;   Double_t ee = v.E();; The components of TLorentzVector can also accessed by index:;   xx = v(0);       or    ; xx = v[0];;   yy = v(1);             ; yy = v[1];;   zz = v(2);             ; zz = v[2];;   tt = v(3);             ; tt = v[3];; You can use the Vect() member function to get the vector component; of TLorentzVector:;   TVector3 p = v.Vect();; For setting components also two sets of member functions can be used:; SetX(),.., SetPx(),..:;  ;   v.SetX(1.);        or   ; v.SetPx(1.);;   ...                              ; ...;   v.SetT(1.);             ; v.SetE(1.);; To set more the one component by one call you can use the SetVect(); function for the TVector3 part or SetXYZT(), SetPxPyPzE(). For convenience there is; also a SetXYZM():;   v.SetVect(TVector3(1,2,3));;   v.SetXYZT(x,y,z,t);;   v.SetPxPyPzE(px,py,pz,e);;   v.SetXYZM(x,y,z,m);   //   -> ; v=(x,y,z,e=Sqrt(x*x+y*y+z*z+m*m)). Vector components in noncartesian coordinate systems; There are a couple of memberfunctions to get and set the TVector3; part of the parameters in; sherical coordinate systems:;   Double_t m, theta, cost, phi, pp, pp2, ppv2, pp2v2;;   m = v.Rho();;   t = v.Theta();;   cost = v.C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLorentzVector.html:1935,access,accessed,1935,root/html528/TLorentzVector.html,https://root.cern,https://root.cern/root/html528/TLorentzVector.html,3,['access'],['accessed']
Security,"Double_t variable.; By default all components are initialized by zero.;   TLorentzVector v1;      // initialized; by (0., 0., 0., 0.);   TLorentzVector v2(1., 1., 1., 1.);;   TLorentzVector v3(v1);;   TLorentzVector v4(TVector3(1., 2., 3.),4.);; For backward compatibility there are two constructors from an Double_t; and Float_t  C array.;  . Access to the components; There are two sets of access functions to the components of a LorentzVector:; X(), Y(), Z(), T() and Px(),; Py(), Pz() and E(). Both sets return the same values; but the first set is more relevant for use where TLorentzVector; describes a combination of position and time and the second set is more; relevant where TLorentzVector describes momentum and energy:;   Double_t xx =v.X();;   ...;   Double_t tt = v.T();;   Double_t px = v.Px();;   ...;   Double_t ee = v.E();; The components of TLorentzVector can also accessed by index:;   xx = v(0);       or    ; xx = v[0];;   yy = v(1);             ; yy = v[1];;   zz = v(2);             ; zz = v[2];;   tt = v(3);             ; tt = v[3];; You can use the Vect() member function to get the vector component; of TLorentzVector:;   TVector3 p = v.Vect();; For setting components also two sets of member functions can be used:; SetX(),.., SetPx(),..:;  ;   v.SetX(1.);        or   ; v.SetPx(1.);;   ...                              ; ...;   v.SetT(1.);             ; v.SetE(1.);; To set more the one component by one call you can use the SetVect(); function for the TVector3 part or SetXYZT(), SetPxPyPzE(). For convenience there is; also a SetXYZM():;   v.SetVect(TVector3(1,2,3));;   v.SetXYZT(x,y,z,t);;   v.SetPxPyPzE(px,py,pz,e);;   v.SetXYZM(x,y,z,m);   //   -> ; v=(x,y,z,e=Sqrt(x*x+y*y+z*z+m*m)). Vector components in noncartesian coordinate systems; There are a couple of memberfunctions to get and set the TVector3; part of the parameters in; spherical coordinate systems:;   Double_t m, theta, cost, phi, pp, pp2, ppv2, pp2v2;;   m = v.Rho();;   t = v.Theta();;   cost = v.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLorentzVector.html:1935,access,accessed,1935,root/html534/TLorentzVector.html,https://root.cern,https://root.cern/root/html534/TLorentzVector.html,3,['access'],['accessed']
Security,"Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize=4, Option_t *option=""br"");  Pave normal constructor. ;  ;  ~TPave () override;  Pave default destructor. ;  ; virtual void ConvertNDCtoPad ();  Convert pave coordinates from NDC to Pad coordinates. ;  ; void Copy (TObject &pave) const override;  Copy this pave to pave. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a pave. ;  ; virtual TPave * DrawPave (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize=4, Option_t *option=""br"");  Draw this pave with new coordinates. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; Int_t GetBorderSize () const;  ; Double_t GetCornerRadius () const;  ; const char * GetName () const override;  Returns name of object. ;  ; Option_t * GetOption () const override;  ; Int_t GetShadowColor () const;  ; Double_t GetX1NDC () const;  ; Double_t GetX2NDC () const;  ; Double_t GetY1NDC () const;  ; Double_t GetY2NDC () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List this pave with its attributes. ;  ; TPave & operator= (const TPave &src);  Assignment operator. ;  ; virtual void PaintPave (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize=4, Option_t *option=""br"");  Draw this pave with new coordinates. ;  ; virtual void PaintPaveArc (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize=4, Option_t *option=""br"");  Draw this pave with rounded corners. ;  ; virtual void SetBorderSize (Int_t bordersize=4);  Sets the border size of the TPave box and shadow. ;  ; virtual void SetCornerRadius (Double_t rad=0.2);  ; virtual void SetName (const char *name="""");  ; virtual void SetOption (Option_t *option=""br"");  ; virtual void SetShadowColor (Int_t color);  ; void SetX1 (Double_t x1) override;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDiamond.html:6555,hash,hash,6555,doc/master/classTDiamond.html,https://root.cern,https://root.cern/doc/master/classTDiamond.html,4,['hash'],['hash']
Security,"Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); virtual Bool_tRooAbsAnaConvPdf::forceAnalyticalInt(const RooAbsArg& dep) const; virtual voidRooAbsReal::forceNumInt(Bool_t flag = kTRUE); RooFunctor*RooAbsReal::functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; RooDataSet*RooAbsPdf::generate(RooAbsPdf::GenSpec&) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, const RooDataSet& prototype, Int_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t randProtoOrder = kFALSE, Bool_t resampleProto = kFALSE) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, Int_t nEvents, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none()); RooDataSet*RooAbsPdf::gene",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooBCPEffDecay.html:13256,hash,hash,13256,root/html534/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html534/RooBCPEffDecay.html,18,['hash'],['hash']
Security,"Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); virtual Bool_tRooAbsCachedPdf::forceAnalyticalInt(const RooAbsArg& dep) const; virtual voidRooAbsReal::forceNumInt(Bool_t flag = kTRUE); RooFunctor*RooAbsReal::functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; RooDataSet*RooAbsPdf::generate(RooAbsPdf::GenSpec&) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, const RooDataSet& prototype, Int_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t randProtoOrder = kFALSE, Bool_t resampleProto = kFALSE) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, Int_t nEvents, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none()); RooDataSet*RooAbsPdf::gener",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsSelfCachedPdf.html:13176,hash,hash,13176,root/html534/RooAbsSelfCachedPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsSelfCachedPdf.html,12,['hash'],['hash']
Security,"Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); virtual Bool_tRooAbsReal::forceAnalyticalInt(const RooAbsArg&) const; virtual voidRooAbsReal::forceNumInt(Bool_t flag = kTRUE); RooFunctor*RooAbsReal::functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; RooDataSet*RooAbsPdf::generate(RooAbsPdf::GenSpec&) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, const RooDataSet& prototype, Int_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t randProtoOrder = kFALSE, Bool_t resampleProto = kFALSE) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, Int_t nEvents, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none()); RooDataSet*RooAbsPdf::generate(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Roo2DKeysPdf.html:12740,hash,hash,12740,root/html534/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html534/Roo2DKeysPdf.html,131,['hash'],['hash']
Security,"Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); virtual Bool_tRooAbsReal::forceAnalyticalInt(const RooAbsArg&) const; virtual voidRooAbsReal::forceNumInt(Bool_t flag = kTRUE); RooFunctor*RooAbsReal::functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; virtual RooAbsGenContext*RooAbsPdf::genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; RooDataSet*RooAbsPdf::generate(RooAbsPdf::GenSpec&) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, const RooDataSet& prototype, Int_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t randProtoOrder = kFALSE, Bool_t resampleProto = kFALSE) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, Int_t nEvents, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCFunction1PdfBinding_double_double_.html:13112,hash,hash,13112,root/html534/RooCFunction1PdfBinding_double_double_.html,https://root.cern,https://root.cern/root/html534/RooCFunction1PdfBinding_double_double_.html,34,['hash'],['hash']
Security,"Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); virtual Bool_tRooSimultaneous::forceAnalyticalInt(const RooAbsArg&) const; virtual voidRooAbsReal::forceNumInt(Bool_t flag = kTRUE); RooFunctor*RooAbsReal::functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; RooDataSet*RooAbsPdf::generate(RooAbsPdf::GenSpec&) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, const RooDataSet& prototype, Int_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t randProtoOrder = kFALSE, Bool_t resampleProto = kFALSE) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, Int_t nEvents, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none()); RooDataSet*RooAbsPdf::generate(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__HistFactorySimultaneous.html:13186,hash,hash,13186,root/html534/RooStats__HistFactory__HistFactorySimultaneous.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__HistFactorySimultaneous.html,3,['hash'],['hash']
Security,"Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); virtual Bool_tforceAnalyticalInt(const RooAbsArg& arg) const; virtual voidRooAbsReal::forceNumInt(Bool_t flag = kTRUE); const RooArgList&funcList() const; RooFunctor*RooAbsReal::functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; RooDataSet*RooAbsPdf::generate(RooAbsPdf::GenSpec&) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, const RooDataSet& prototype, Int_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t randProtoOrder = kFALSE, Bool_t resampleProto = kFALSE) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, Int_t nEvents, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none()); RooDataSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealSumPdf.html:13217,hash,hash,13217,root/html534/RooRealSumPdf.html,https://root.cern,https://root.cern/root/html534/RooRealSumPdf.html,3,['hash'],['hash']
Security,"Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); virtual Bool_tforceAnalyticalInt(const RooAbsArg& dep) const; virtual voidRooAbsReal::forceNumInt(Bool_t flag = kTRUE); RooFunctor*RooAbsReal::functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; RooDataSet*RooAbsPdf::generate(RooAbsPdf::GenSpec&) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, const RooDataSet& prototype, Int_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t randProtoOrder = kFALSE, Bool_t resampleProto = kFALSE) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, Int_t nEvents, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none()); RooDataSet*RooAbsPdf::generate(const RooArgS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsCachedPdf.html:13261,hash,hash,13261,root/html534/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsCachedPdf.html,7,['hash'],['hash']
Security,"Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); virtual Bool_tforceAnalyticalInt(const RooAbsArg& dep) const; virtual voidRooAbsReal::forceNumInt(Bool_t flag = kTRUE); RooFunctor*RooAbsReal::functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; virtual RooAbsGenContext*genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; RooDataSet*RooAbsPdf::generate(RooAbsPdf::GenSpec&) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, const RooDataSet& prototype, Int_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t randProtoOrder = kFALSE, Bool_t resampleProto = kFALSE) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, Int_t nEvents, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsAnaConvPdf.html:14859,hash,hash,14859,root/html534/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsAnaConvPdf.html,2,['hash'],['hash']
Security,"Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); virtual Bool_tforceAnalyticalInt(const RooAbsArg&) const; virtual voidRooAbsReal::forceNumInt(Bool_t flag = kTRUE); RooFunctor*RooAbsReal::functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; RooDataSet*RooAbsPdf::generate(RooAbsPdf::GenSpec&) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, const RooDataSet& prototype, Int_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t randProtoOrder = kFALSE, Bool_t resampleProto = kFALSE) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, Int_t nEvents, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none()); RooDataSet*RooAbsPdf::generate(const RooArgSet& ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooExtendPdf.html:13200,hash,hash,13200,root/html534/RooExtendPdf.html,https://root.cern,https://root.cern/root/html534/RooExtendPdf.html,6,['hash'],['hash']
Security,"Double_t yval); RooAbsArg*RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); virtual Bool_tforceAnalyticalInt(const RooAbsArg&) const; virtual voidRooAbsReal::forceNumInt(Bool_t flag = kTRUE); RooFunctor*RooAbsReal::functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; virtual RooAbsGenContext*genContext(const RooArgSet& vars, const RooDataSet* prototype, const RooArgSet* auxProto, Bool_t verbose) const; RooDataSet*RooAbsPdf::generate(RooAbsPdf::GenSpec&) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, const RooDataSet& prototype, Int_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t randProtoOrder = kFALSE, Bool_t resampleProto = kFALSE) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, Int_t nEvents, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooEffProd.html:12847,hash,hash,12847,root/html534/RooEffProd.html,https://root.cern,https://root.cern/root/html534/RooEffProd.html,3,['hash'],['hash']
Security,"Draw ; (; Option_t * ; option = """"). inlineoverrideprotectedvirtual . Default Draw method for all objects. ; Reimplemented from TObject.; Definition at line 46 of file TGPicture.h. ◆ GetHeight(). UInt_t TGPicture::GetHeight ; (; ); const. inline . Definition at line 53 of file TGPicture.h. ◆ GetMask(). Pixmap_t TGPicture::GetMask ; (; ); const. inline . Definition at line 55 of file TGPicture.h. ◆ GetName(). const char * TGPicture::GetName ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 51 of file TGPicture.h. ◆ GetPicture(). Pixmap_t TGPicture::GetPicture ; (; ); const. inline . Definition at line 54 of file TGPicture.h. ◆ GetWidth(). UInt_t TGPicture::GetWidth ; (; ); const. inline . Definition at line 52 of file TGPicture.h. ◆ Hash(). ULong_t TGPicture::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TGPicture::HashULong_t Hash() const overrideReturn hash value for this object.Definition TGPicture.h:57; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGPicture.html:13896,hash,hash,13896,doc/master/classTGPicture.html,https://root.cern,https://root.cern/doc/master/classTGPicture.html,1,['hash'],['hash']
Security,"E if user and passwd were found for the machine; specified in the URL. If kFALSE, user and passwd are """".; If srppwd == kTRUE then a SRP ('secure') pwd is searched for in; the files.; The boolean pwhash is set to kTRUE if the returned passwd is to; be understood as password hash, i.e. if the 'password-hash' keyword; is found in the 'machine' lines; not implemented for 'secure'; and the .netrc file.; The format of these files are:. # this is a comment line; machine <machine fqdn> login <user> password <passwd>; machine <machine fqdn> login <user> password-hash <passwd>. and in addition ~/.rootnetrc also supports:. secure <machine fqdn> login <user> password <passwd>. <machine fqdn> may be a domain name or contain the wild card '*'. for the secure protocols. All lines must start in the first column. const char * GetGlobalUser(); Static method returning the global user. Bool_t GetGlobalPwHash(); Static method returning the global password hash flag. Bool_t GetGlobalSRPPwd(); Static method returning the global SRP password flag. TDatime GetGlobalExpDate(); Static method returning default expiring date for new validity contexts. const char * GetDefaultUser(); Static method returning the default user information. const char * GetKrb5Principal(); Static method returning the principal to be used to init Krb5 tickets. Bool_t GetAuthReUse(); Static method returning the authentication reuse settings. Bool_t GetPromptUser(); Static method returning the prompt user settings. const char * GetAuthMethod(Int_t idx); Static method returning the method corresponding to idx. Int_t GetAuthMethodIdx(const char* meth); Static method returning the method index (which can be used to find; the method in GetAuthMethod()). Returns -1 in case meth is not found. char * PromptUser(const char* remote); Static method to prompt for the user name to be used for authentication; to rootd or proofd. User is asked to type user name.; Returns user name (which must be deleted by caller) or 0.; If non-inte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAuthenticate.html:13198,password,password,13198,root/html526/TAuthenticate.html,https://root.cern,https://root.cern/root/html526/TAuthenticate.html,7,['password'],['password']
Security,"ED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinWidthFunction.html:36924,hash,hash,36924,doc/master/classRooBinWidthFunction.html,https://root.cern,https://root.cern/doc/master/classRooBinWidthFunction.html,149,['hash'],['hash']
Security,"ENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TClass*GetCurrentClass() const; voidGetCurrentModule(TString& out_module) const; const TList*GetDataMembers(TDocParser::EAccess access) const; TDocOutput*GetDocOutput() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const TList*GetEnums(TDocParser::EAccess access) const; virtual const char*TObject::GetIconName() const; Long_tGetLineNumber() const; const TList*GetMethods(TDocParser::EAccess access) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetSourceInfo(TDocParser::ESourceInfo type) const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; UInt_tInContext(Int_t context) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; static Bool_tIsName(UChar_t c); Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDocParser.html:3291,access,access,3291,root/html528/TDocParser.html,https://root.cern,https://root.cern/root/html528/TDocParser.html,5,['access'],['access']
Security,"EN_OFF; kENTRY_NAMELEN_LEN; kENTRY_EXTRALEN_OFF; kENTRY_EXTRALEN_LEN; kENTRY_HEADER_SIZE; kZIP64_EXTENDED_MAGIC_OFF; kZIP64_EXTENDED_MAGIC_LEN; kZIP64_EXTENDED_SIZE_OFF; kZIP64_EXTENDED_SIZE_LEN; kZIP64_EXTENDED_USIZE_OFF; kZIP64_EXTENDED_USIZE_LEN; kZIP64_EXTENTED_CSIZE_OFF; kZIP64_EXTENDED_CSIZE_LEN; kZIP64_EXTENDED_HDR_OFFSET_OFF; kZIP64_EXTENDED_HDR_OFFSET_LEN; kZIP64_EXTENDED_DISK_OFF; kZIP64_EXTENDED_DISK_LEN; kZIP64_EXTENDED_SIZE; kSTORED; kDEFLATED; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTArchiveFile::fArchiveNameArchive file name; TStringfCommentArchive comment; TArchiveMember*TArchiveFile::fCurMemberCurrent archive member; Long64_tfDirOffsetCentral directory offset (from the beginning of the archive); Long64_tfDirPosCentral directory position; Long64_tfDirSizeCentral directory size; TFile*TArchiveFile::fFileFile stream used to access the archive; Int_tTArchiveFile::fMemberIndexIndex of sub-file in archive; TStringTArchiveFile::fMemberNameSub-file name; TObjArray*TArchiveFile::fMembersMembers in this archive. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TZIPFile(); Default ctor. TZIPFile(const char* archive, const char* member, TFile* file); Specify the archive name and member name. The member can be a decimal; number which allows to access the n-th member. Int_t OpenArchive(); Open archive and read end-header and directory. Returns -1 in case; of error, 0 otherwise. Long64_t FindEndHeader(); Find the end header of the ZIP archive. Returns 0 in case of error. Int_t ReadEndHeader(Long64_t pos); Read the end header of the ZIP archive including the archive comment; at the current file position. Check that it really was a single-disk; archive with all the entries as expected. Most im",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TZIPFile.html:11191,access,access,11191,root/html530/TZIPFile.html,https://root.cern,https://root.cern/root/html530/TZIPFile.html,3,['access'],['access']
Security,"Element(). Int_t TExMap::FindElement ; (; ULong64_t ; hash, . Long64_t ; key . ). private . Find an entry with specified hash and key in the TExMap. ; Returns the slot of the key or the next empty slot. ; Definition at line 237 of file TExMap.cxx. ◆ FixCollisions(). void TExMap::FixCollisions ; (; Int_t ; index). private . Rehash the map in case an entry has been removed. ; Definition at line 257 of file TExMap.cxx. ◆ GetSize(). Int_t TExMap::GetSize ; (; ); const. inline . Definition at line 71 of file TExMap.h. ◆ GetValue() [1/3]. Long64_t TExMap::GetValue ; (; Long64_t ; key). inline . Definition at line 73 of file TExMap.h. ◆ GetValue() [2/3]. Long64_t TExMap::GetValue ; (; ULong64_t ; hash, . Long64_t ; key . ). Return the value belonging to specified key and hash value. ; If key not found return 0. ; Definition at line 174 of file TExMap.cxx. ◆ GetValue() [3/3]. Long64_t TExMap::GetValue ; (; ULong64_t ; hash, . Long64_t ; key, . UInt_t & ; slot . ). Return the value belonging to specified key and hash value. ; If key not found return 0. In 'slot', return the index of the slot used or the first empty slot. (to be used with AddAt). ; Definition at line 197 of file TExMap.cxx. ◆ HighWaterMark(). Bool_t TExMap::HighWaterMark ; (; ). inlineprivate . Definition at line 54 of file TExMap.h. ◆ IsA(). TClass * TExMap::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 81 of file TExMap.h. ◆ operator()() [1/2]. Long64_t & TExMap::operator() ; (; Long64_t ; key). inline . Definition at line 79 of file TExMap.h. ◆ operator()() [2/2]. Long64_t & TExMap::operator() ; (; ULong64_t ; hash, . Long64_t ; key . ). Return a reference to the value belonging to the key with the specified hash value. ; If the key does not exist it will be added. NOTE: the reference will be invalidated an Expand() triggered by an Add() or another operator() call. ; Definition at line 139 of file TExMap.cxx. ◆ operator=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTExMap.html:15286,hash,hash,15286,doc/master/classTExMap.html,https://root.cern,https://root.cern/doc/master/classTExMap.html,1,['hash'],['hash']
Security,"Entry::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 133 of file THtml.h. ◆ GetFullName(). virtual void THtml::TFileSysEntry::GetFullName ; (; TString & ; fullname, . Bool_t ; asIncluded . ); const. inlinevirtual . Reimplemented in THtml::TFileSysRoot.; Definition at line 117 of file THtml.h. ◆ GetLevel(). Int_t THtml::TFileSysEntry::GetLevel ; (; ); const. inline . Definition at line 128 of file THtml.h. ◆ GetName(). const char * THtml::TFileSysEntry::GetName ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 115 of file THtml.h. ◆ GetParent(). TFileSysDir * THtml::TFileSysEntry::GetParent ; (; ); const. inline . Definition at line 127 of file THtml.h. ◆ Hash(). ULong_t THtml::TFileSysEntry::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; THtml::TFileSysEntry::HashULong_t Hash() const overrideReturn hash value for this object.Definition THtml.h:116; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHtml_1_1TFileSysEntry.html:12047,hash,hash,12047,doc/master/classTHtml_1_1TFileSysEntry.html,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileSysEntry.html,1,['hash'],['hash']
Security,"ExMap& ); Assignement operator. ~TExMap(); Delete TExMap. void Add(ULong64_t hash, Long64_t key, Long64_t value); Add an (key,value) pair to the table. The key should be unique. void AddAt(UInt_t slot, ULong64_t hash, Long64_t key, Long64_t value); Add an (key,value) pair to the table. The key should be unique.; If the 'slot' is open, use it to store the value,; otherwise revert to Add(hash,key,value); This is usually used in conjuction with GetValue wiht 3 parameters:; if ((idx = (ULong64_t)fMap->GetValue(hash, key, slot)) != 0) {. } else {; fMap->AddAt(slot,hash,key,value);; }. Long64_t & operator()(ULong64_t hash, Long64_t key); Return a reference to the value belonging to the key with the; specified hash value. If the key does not exist it will be added.; NOTE: the reference will be invalidated an Expand() triggered by; an Add() or another operator() call. void Delete(Option_t* opt = """"); Delete all entries stored in the TExMap. Long64_t GetValue(ULong64_t hash, Long64_t key); Return the value belonging to specified key and hash value. If key not; found return 0. Long64_t GetValue(ULong64_t hash, Long64_t key, UInt_t& slot); Return the value belonging to specified key and hash value. If key not; found return 0.; In 'slot', return the index of the slot used or the first empty slot.; (to be used with AddAt). void Remove(ULong64_t hash, Long64_t key); Remove entry with specified key from the TExMap. Int_t FindElement(ULong64_t hash, Long64_t key); Find an entry with specified hash and key in the TExMap.; Returns the slot of the key or the next empty slot. void FixCollisions(Int_t index); Rehash the map in case an entry has been removed. void Expand(Int_t newsize); Expand the TExMap. void Streamer(TBuffer& ); Stream all objects in the collection to or from the I/O buffer. Bool_t HighWaterMark(); { return (Bool_t) (fTally >= ((3*fSize)/4)); }. void Add(ULong64_t hash, Long64_t key, Long64_t value). Int_t Capacity() const; { return fSize; }. Int_t GetSize() const; { re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TExMap.html:7152,hash,hash,7152,root/html534/TExMap.html,https://root.cern,https://root.cern/root/html534/TExMap.html,6,['hash'],['hash']
Security,"ExMap& ); Assignement operator. ~TExMap(); Delete TExMap. void Add(ULong64_t hash, Long64_t key, Long64_t value); Add an (key,value) pair to the table. The key should be unique. void AddAt(UInt_t slot, ULong64_t hash, Long64_t key, Long64_t value); Add an (key,value) pair to the table. The key should be unique.; If the 'slot' is open, use it to store the value,; otherwise revert to Add(hash,key,value); This is usually used in conjuction with GetValue wiht 3 parameters:; if ((idx = (ULong64_t)fMap->GetValue(hash, key, slot)) != 0) {. } else {; fMap->AddAt(slot,hash,key,value);; }. Long64_t & operator()(ULong64_t hash, Long64_t key); Return a reference to the value belonging to the key with the; specified hash value. If the key does not exist it will be added.; NOTE: the reference will be invalidated an Expand() triggered by; an Add() or another operator() call. void Delete(Option_t* opt = """"); Delete all entries stored in the TExMap. Long64_t GetValue(ULong64_t hash, Long64_t key); Return the value belonging to specified key and hash value. If key not; found return 0. Long64_t GetValue(ULong64_t hash, Long64_t key, UInt_t& slot); Return the value belonging to specified key and hash value. If key not; found return 0.; In 'slot', return the index of the slot used or the first empty slot.; (to be used with AddAt). void Remove(ULong64_t hash, Long64_t key); Remove entry with specified key from the TExMap. Int_t FindElement(ULong64_t hash, Long64_t key); Find an entry with specified hash and key in the TExMap.; Returns the slot of the key or the next empty slot. void FixCollisions(Int_t index); Rehash the map in case an entry has been removed. void Expand(Int_t newsize); Expand the TExMap. void Streamer(TBuffer& b); Stream all objects in the collection to or from the I/O buffer. Bool_t HighWaterMark(); { return (Bool_t) (fTally >= ((3*fSize)/4)); }. void Add(ULong64_t hash, Long64_t key, Long64_t value). Int_t Capacity() const; { return fSize; }. Int_t GetSize() const; { r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TExMap.html:7064,hash,hash,7064,root/html528/TExMap.html,https://root.cern,https://root.cern/root/html528/TExMap.html,6,['hash'],['hash']
Security,"Extras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooConstVar.html:30619,validat,validate,30619,root/html532/RooConstVar.html,https://root.cern,https://root.cern/root/html532/RooConstVar.html,2,"['access', 'validat']","['access', 'validate']"
Security,"F1(""f1"",""gaus"",0,10);; 616 f1->SetParameters(1,5,2);; 617 pEff->Fit(f1);; 618 ; 619 //create a threshold function; 620 TF1* f2 = new TF1(""thres"",""0.8"",0,10);; 621 f2->SetLineColor(kRed);; 622 //add it to the list of functions; 623 //use add first because the parameters of the last function will be displayed; 624 pEff->GetListOfFunctions()->AddFirst(f2);; 625 ; 626 pEff->Draw(""AP"");; 627}; 628End_Macro; 629 ; 630\anchor EFF063; 631### VI.3 Draw a TEfficiency object; 632A TEfficiency object can be drawn by calling the usual TEfficiency::Draw method.; 633At the moment drawing is only supported for 1- and 2-dimensional TEfficiency objects.; 634In the 1-dimensional case, you can use the same options as for the TGraphAsymmErrors::Draw; 635method. For 2-dimensional TEfficiency objects, you can pass the same options as; 636for a TH2::Draw object.; 637 ; 638\anchor EFF064; 639### VI.4 TEfficiency object's axis customisation; 640The axes of a TEfficiency object can be accessed and customised by calling the; 641GetPaintedGraph method and then GetXaxis() or GetYaxis() and the corresponding TAxis; 642methods.; 643Note that in order to access the painted graph via GetPaintedGraph(), one should either; 644call Paint or, better, gPad->Update().; 645 ; 646Begin_Macro(source); 647{; 648 //canvas only needed for this documentation; 649 TCanvas* c1 = new TCanvas(""example"","""",600,400);; 650 c1->SetFillStyle(1001);; 651 c1->SetFillColor(kWhite);; 652 c1->Divide(2,1);; 653 ; 654 //create one-dimensional TEfficiency object with fixed bin size; 655 TEfficiency* pEff = new TEfficiency(""eff"",""my efficiency;x;#epsilon"",20,0,10);; 656 TRandom3 rand3;; 657 ; 658 bool bPassed;; 659 double x;; 660 for(int i=0; i<10000; ++i); 661 {; 662 //simulate events with variable under investigation; 663 x = rand3.Uniform(10);; 664 //check selection: bPassed = DoesEventPassSelection(x); 665 bPassed = rand3.Rndm() < TMath::Gaus(x,5,4);; 666 pEff->Fill(bPassed,x);; 667 }; 668 c1->cd(1);; 669 pEff->Draw(""AP"");; 6",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEfficiency_8cxx_source.html:28399,access,accessed,28399,doc/master/TEfficiency_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEfficiency_8cxx_source.html,1,['access'],['accessed']
Security,"FALSE); Dummy version provided for completeness. Just returns a pointer to; existing session 'id' (as shown by TProof::QuerySessions) or 0 if 'id' is; not valid. The boolena 'gui' should be kTRUE when invoked from the GUI. void DetachSession(Int_t , Option_t* = """"); Detach session with 'id' from its proofserv. The 'id' is the number; shown by QuerySessions. The correspondent TProof object is deleted.; If id == 0 all the known sessions are detached.; Option opt=""S"" or ""s"" forces session shutdown. void DetachSession(TProof* , Option_t* = """"); Detach session 'p' from its proofserv. The instance 'p' is invalidated; and should be deleted by the caller. Bool_t MatchUrl(const char* url); Checks if 'url' refers to the same 'user@host:port' entity as the URL; in memory. TProofMgr::MatchUrl cannot be used here because of the; 'double' default port, implying an additional check on the port effectively; open. void ShowWorkers(); Show available workers. TList * QuerySessions(Option_t* opt = ""S""); Get list of sessions accessible to this manager. Bool_t HandleInput(const void* ); Handle asynchronous input on the socket. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Int_t Reset(Bool_t hard = kFALSE, const char* usr = 0); Send a cleanup request for the sessions associated with the current user.; If 'hard' is true sessions are signalled for termination and moved to; terminate at all stages (top master, sub-master, workers). Otherwise; (default) only top-master sessions are asked to terminate, triggering; a gentle session termination. In all cases all sessions should be gone; after a few (2 or 3) session checking cycles.; A user with superuser privileges can also asks cleaning for an different; user, specified by 'usr', or for all users (usr = *); Return 0 on success, -1 in case of error. TProofLog * GetSessionLogs(Int_t ridx = 0, const char* stag = 0, const char* pattern = ""-v \""| SvcMsg\""""); Get logs or log tails from last session associated with this mana",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXProofMgr.html:10717,access,accessible,10717,root/html528/TXProofMgr.html,https://root.cern,https://root.cern/root/html528/TXProofMgr.html,1,['access'],['accessible']
Security,"FALSE); Dummy version provided for completeness. Just returns a pointer to; existing session 'id' (as shown by TProof::QuerySessions) or 0 if 'id' is; not valid. The boolena 'gui' should be kTRUE when invoked from the GUI. void DetachSession(Int_t , Option_t* = """"); Detach session with 'id' from its proofserv. The 'id' is the number; shown by QuerySessions. The correspondent TProof object is deleted.; If id == 0 all the known sessions are detached.; Option opt=""S"" or ""s"" forces session shutdown. void DetachSession(TProof* , Option_t* = """"); Detach session 'p' from its proofserv. The instance 'p' is invalidated; and should be deleted by the caller. Bool_t MatchUrl(const char* url); Checks if 'url' refers to the same 'user@host:port' entity as the URL; in memory. TProofMgr::MatchUrl cannot be used here because of the; 'double' default port, implying an additional check on the port effectively; open. void ShowWorkers(); Show available workers. TList * QuerySessions(Option_t* opt = ""S""); Get list of sessions accessible to this manager. Bool_t HandleInput(const void* ); Handle asynchronous input on the socket. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Int_t Reset(Bool_t hard = kFALSE, const char* usr = 0); Send a cleanup request for the sessions associated with the current user.; If 'hard' is true sessions are signalled for termination and moved to; terminate at all stages (top master, sub-master, workers). Otherwise; (default) only top-master sessions are asked to terminate, triggering; a gentle session termination. In all cases all sessions should be gone; after a few (2 or 3) session checking cycles.; A user with superuser privileges can also asks cleaning for an different; user, specified by 'usr', or for all users (usr = *); Return 0 on success, -1 in case of error. TProofLog * GetSessionLogs(Int_t ridx = 0, const char* stag = 0, const char* pattern = ""-v \""| SvcMsg\"""", Bool_t rescan = kFALSE); Get logs or log tails from last session a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXProofMgr.html:10834,access,accessible,10834,root/html530/TXProofMgr.html,https://root.cern,https://root.cern/root/html530/TXProofMgr.html,2,['access'],['accessible']
Security,"FRuleFit( void ); training of rules using Jerome Friedmans implementation. const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void AddWeightsXMLTo(void* parent) const; add the rules to XML node. void ReadWeightsFromStream(istream& istr); read rules from an istream. void ReadWeightsFromXML(void* wghtnode); read rules from XML node. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns MVA value for given event. void WriteMonitoringHistosToFile( void ); write special monitoring histograms to file (here ntuple). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void MakeClassRuleCuts(ostream& ) const; print out the rule cuts. void MakeClassLinear(ostream& ) const; print out the linear terms. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". Bool_t UseBoost() const; { return fUseBoost; }. RuleFit* GetRuleFitPtr(); accessors. { return &fRuleFit; }. const RuleFit* GetRuleFitConstPtr() const; { return &fRuleFit; }. TDirectory* GetMethodBaseDir() const; { return BaseDir(); }. const std::vector<TMVA::Event*>& GetTrainingEvents() const; { return fEventSample; }. const std::vector<TMVA::DecisionTree*>& GetForest() const; { return fForest; }. Int_t GetNTrees() const; { return fNTrees; }. Double_t GetTreeEveFrac() const; { return fTreeEveFrac; }. const SeparationBase* GetSeparationBaseConst() const; { return fSepType; }. SeparationBase* GetSeparationBase() const; { return fSepType; }. TMVA::DecisionTree::EPruneMethod GetPruneMethod() const; { return fPruneMethod; }. Double_t GetPruneStrength() const; { return fPruneStrength; }. Double_t GetMinFracNEve() const; { return fMinFracNEve; }. Double_t GetMaxFracNEve() const; { return fMaxFracNEve; }. Int_t GetNCuts() const. { return fNCuts; }. Int_t GetGDNPathSteps() const; { return fGDNPathSteps; }. Double_t GetGDPathStep() const; { return fGDPathStep;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodRuleFit.html:22556,access,accessors,22556,root/html528/TMVA__MethodRuleFit.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodRuleFit.html,3,['access'],['accessors']
Security,"Feedfunc_t) (void *from, void *to, size_t size);  ; typedef std::vector< EnvironBase_t * > Proxies_t;  ; typedef void(* Sizing_t) (void *obj, size_t size);  ; typedef std::vector< TStaging * > Staged_t;  Collection of pre-allocated staged array for associative containers. ;  ;  Protected Attributes inherited from TGenCollectionProxy; Method fClear;  Method cache for container accessors: clear container. ;  ; Collectfunc_t fCollect;  Method to collect objects from container. ;  ; ArrIterfunc_t fConstruct;  Container accessors: block construct. ;  ; std::map< std::string, TObjArray * > * fConversionReadMemberWise;  Array of bundle of TStreamerInfoActions to stream out (read) derived from another class. ;  ; Method0 fCreateEnv;  Method to allocate an Environment holder. ;  ; Sizing_t fDestruct;  Container accessors: block destruct. ;  ; EnvironBase_t * fEnv;  Address of the currently proxied object. ;  ; Feedfunc_t fFeed;  Container accessors: block feed. ;  ; Method fFirst;  Container accessors: generic iteration: first. ;  ; CopyIterator_t fFunctionCopyIterator;  ; CreateIterators_t fFunctionCreateIterators;  ; DeleteIterator_t fFunctionDeleteIterator;  ; DeleteTwoIterators_t fFunctionDeleteTwoIterators;  ; Next_t fFunctionNextIterator;  ; Value * fKey;  Descriptor of the key_type. ;  ; std::string fName;  Name of the class being proxied. ;  ; Method fNext;  Container accessors: generic iteration: next. ;  ; TClass * fOnFileClass;  On file class. ;  ; Bool_t fPointers;  Flag to indicate if containee has pointers (key or value) ;  ; Proxies_t fProxyKept;  Optimization: Keep proxies once they were created. ;  ; Proxies_t fProxyList;  Stack of recursive proxies. ;  ; TObjArray * fReadMemberWise;  Array of bundle of TStreamerInfoActions to stream out (read) ;  ; Sizing_t fResize;  Container accessors: resize container. ;  ; Method fSize;  Container accessors: size of container. ;  ; Staged_t fStaged;  Optimization: Keep staged array once they were created. ;  ; int fSTL_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEmulatedCollectionProxy.html:11881,access,accessors,11881,doc/master/classTEmulatedCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTEmulatedCollectionProxy.html,2,['access'],['accessors']
Security,"File() [1/3]. TSQLFile::TSQLFile ; (; const TSQLFile & ; ). privatedelete . ◆ TSQLFile() [2/3]. TSQLFile::TSQLFile ; (; ). default TSQLFile constructor ; Definition at line 271 of file TSQLFile.cxx. ◆ TSQLFile() [3/3]. TSQLFile::TSQLFile ; (; const char * ; dbname, . Option_t * ; option = ""read"", . const char * ; user = ""user"", . const char * ; pass = ""pass"" . ). Connects to SQL server with provided arguments. ; If the constructor fails in any way IsZombie() will return true. Use IsOpen() to check if the file is (still) open. . Option Description . NEW or CREATE Create a ROOT tables in database if the tables already exists connection is not opened. . RECREATE Create completely new tables. Any existing table will be deleted. . UPDATE Open an existing database for writing. If data base open by other TSQLFile instance for writing, . write access will be rejected.| | BREAKLOCK | Special case when lock was not correctly released by TSQLFile instance. This may happen if program crashed when TSQLFile was open with write access mode.| | READ / OPEN | Open an existing data base for reading.|; For more details see comments for TFile::TFile() constructor. For a moment TSQLFile does not support TTree objects and subdirectories. ; Definition at line 297 of file TSQLFile.cxx. ◆ ~TSQLFile(). TSQLFile::~TSQLFile ; (; ). override . destructor of TSQLFile object ; Definition at line 689 of file TSQLFile.cxx. Member Function Documentation. ◆ AddIdEntry(). void TSQLFile::AddIdEntry ; (; Long64_t ; tableid, . Int_t ; subid, . Int_t ; type, . const char * ; name, . const char * ; sqlname, . const char * ; info . ). protected . Add entry into IdsTable, where all tables names and columns names are listed. ; Definition at line 2018 of file TSQLFile.cxx. ◆ Class(). static TClass * TSQLFile::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSQLFile::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Versi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:61304,access,access,61304,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,1,['access'],['access']
Security,"File.cxx:4599; TFile::~TFile~TFile() overrideFile destructor.Definition TFile.cxx:563; TFile::ReadBuffersvirtual Bool_t ReadBuffers(char *buf, Long64_t *pos, Int_t *len, Int_t nbuf)Read the nbuf blocks described in arrays pos and len.Definition TFile.cxx:1821; TFile::GetFileCounterstatic Long64_t GetFileCounter()Definition TFile.cxx:4617; TFile::fCacheReadMapTMap * fCacheReadMap!Pointer to the read cache (if any)Definition TFile.h:99; TFile::fBEGINLong64_t fBEGINFirst used byte in file.Definition TFile.h:78; TFile::MakeProjectParProofInfInt_t MakeProjectParProofInf(const char *packname, const char *proofinfdir)Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'.Definition TFile.cxx:3486; TFile::WriteProcessIDvirtual UShort_t WriteProcessID(TProcessID *pid)Check if the ProcessID pidd is already in the file, if not, add it and return the index number in the...Definition TFile.cxx:3763; TFile::MakeProjectvirtual void MakeProject(const char *dirname, const char *classes=""*"", Option_t *option=""new"")Generate source code necessary to access the objects stored in the file.Definition TFile.cxx:2726; TFile::fArchiveOffsetLong64_t fArchiveOffset!Offset at which file starts in archiveDefinition TFile.h:101; TFile::EOpenTimeOutEOpenTimeOutOpen timeout constants.Definition TFile.h:67; TFile::kInstantTimeout@ kInstantTimeoutDefinition TFile.h:67; TFile::kEternalTimeout@ kEternalTimeoutDefinition TFile.h:67; TFile::fNbytesInfoInt_t fNbytesInfoNumber of bytes for StreamerInfo record.Definition TFile.h:86; TFile::GetSizevirtual Long64_t GetSize() constReturns the current file size.Definition TFile.cxx:1347; TFile::GetFdInt_t GetFd() constDefinition TFile.h:234; TFile::IsOpenvirtual Bool_t IsOpen() constReturns kTRUE in case file is open and kFALSE if file is not open.Definition TFile.cxx:1469; TFile::fAsyncHandleTFileOpenHandle * fAsyncHandle!For proper automatic cleanupDefinition TFile.h:108; TFile::SetOnlyStagedstatic Bool_t SetOnlyStaged(Bool_t onlystaged)Sets only",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8h_source.html:35240,access,access,35240,doc/master/TFile_8h_source.html,https://root.cern,https://root.cern/doc/master/TFile_8h_source.html,1,['access'],['access']
Security,"File.cxx:4599; TFile::~TFile~TFile() overrideFile destructor.Definition TFile.cxx:563; TFile::ReadBuffersvirtual Bool_t ReadBuffers(char *buf, Long64_t *pos, Int_t *len, Int_t nbuf)Read the nbuf blocks described in arrays pos and len.Definition TFile.cxx:1821; TFile::GetFileCounterstatic Long64_t GetFileCounter()Definition TFile.cxx:4617; TFile::fCacheReadMapTMap * fCacheReadMap!Pointer to the read cache (if any)Definition TFile.h:99; TFile::fBEGINLong64_t fBEGINFirst used byte in file.Definition TFile.h:78; TFile::MakeProjectParProofInfInt_t MakeProjectParProofInf(const char *packname, const char *proofinfdir)Create BUILD.sh and SETUP.C under 'proofinf' for PAR package 'pack'.Definition TFile.cxx:3486; TFile::WriteProcessIDvirtual UShort_t WriteProcessID(TProcessID *pid)Check if the ProcessID pidd is already in the file, if not, add it and return the index number in the...Definition TFile.cxx:3763; TFile::MakeProjectvirtual void MakeProject(const char *dirname, const char *classes=""*"", Option_t *option=""new"")Generate source code necessary to access the objects stored in the file.Definition TFile.cxx:2726; TFile::fArchiveOffsetLong64_t fArchiveOffset!Offset at which file starts in archiveDefinition TFile.h:101; TFile::kEternalTimeout@ kEternalTimeoutDefinition TFile.h:67; TFile::fNbytesInfoInt_t fNbytesInfoNumber of bytes for StreamerInfo record.Definition TFile.h:86; TFile::GetSizevirtual Long64_t GetSize() constReturns the current file size.Definition TFile.cxx:1347; TFile::IsOpenvirtual Bool_t IsOpen() constReturns kTRUE in case file is open and kFALSE if file is not open.Definition TFile.cxx:1469; TFile::fAsyncHandleTFileOpenHandle * fAsyncHandle!For proper automatic cleanupDefinition TFile.h:108; TFile::SetOnlyStagedstatic Bool_t SetOnlyStaged(Bool_t onlystaged)Sets only staged flag.Definition TFile.cxx:4744; TFile::GetBytesReadvirtual Long64_t GetBytesRead() constDefinition TFile.h:241; TFile::GetErrnovirtual Int_t GetErrno() constMethod returning errno.Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:218656,access,access,218656,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['access'],['access']
Security,"File::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TNetFile::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TNetFile::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 81 of file TNetFile.h. ◆ Close(). void TNetFile::Close ; (; Option_t * ; option = """"). overridevirtual . Close remote file. ; Reimplemented from TFile.; Definition at line 208 of file TNetFile.cxx. ◆ ConnectServer(). void TNetFile::ConnectServer ; (; Int_t * ; stat, . EMessageTypes * ; kind, . Int_t ; netopt, . Int_t ; tcpwindowsize, . Bool_t ; forceOpen, . Bool_t ; forceRead . ). protectedvirtual . Connect to remote rootd server. ; Definition at line 570 of file TNetFile.cxx. ◆ Create() [1/2]. void TNetFile::Create ; (; const char * ; url, . Option_t * ; option, . Int_t ; netopt . ). protectedvirtual . Create a NetFile object. ; A net file is the same as a TFile except that it is being accessed via a rootd server. The url argument must be of the form: root[k]://host.dom.ain/file.root. When protocol is ""rootk"" try using kerberos5 authentication. If the file specified in the URL does not exist, is not accessable or can not be created the kZombie bit will be set in the TNetFile object. Use IsZombie() to see if the file is accessable. If the remote daemon thinks the file is still connected, while you are sure this is not the case you can force open the file by preceding the option argument with an ""-"", e.g.: ""-recreate"". Do this only in cases when you are very sure nobody else is using the file. To bypass the writelock on a file, to allow the reading of a file that is being written by another process, explicitly specify the ""+read"" option (""read"" being the default option). The netopt argument can be used to specify the size of the tcp window in bytes (for more info see: http://www.psc.edu/networking/perf_tune.html). The default and minimum tcp window size",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetFile.html:45394,access,accessed,45394,doc/master/classTNetFile.html,https://root.cern,https://root.cern/doc/master/classTNetFile.html,1,['access'],['accessed']
Security,"FileHandler(TFileHandler *fh)Remove a file handler from the list of file handlers.Definition TSystem.cxx:564; TSystem::fSigcntInt_t fSigcntDefinition TSystem.h:283; TSystem::Loadvirtual int Load(const char *module, const char *entry="""", Bool_t system=kFALSE)Load a shared library.Definition TSystem.cxx:1857; TSystem::ListLibrariesvirtual void ListLibraries(const char *regexp="""")List the loaded shared libraries.Definition TSystem.cxx:2085; TSystem::OpenPipevirtual FILE * OpenPipe(const char *command, const char *mode)Open a pipe.Definition TSystem.cxx:662; TSystem::GetPathInfoint GetPathInfo(const char *path, Long_t *id, Long_t *size, Long_t *flags, Long_t *modtime)Get info about a file: id, size, flags, modification time.Definition TSystem.cxx:1398; TSystem::PrependPathNamevirtual const char * PrependPathName(const char *dir, TString &name)Concatenate a directory and a file name.Definition TSystem.cxx:1081; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TSystem::GetDirEntryvirtual const char * GetDirEntry(void *dirp)Get a directory entry. Returns 0 if no more entries.Definition TSystem.cxx:853; TSystem::Initvirtual Bool_t Init()Initialize the OS interface.Definition TSystem.cxx:183; TSystem::AddTimervirtual void AddTimer(TTimer *t)Add timer to list of system timers.Definition TSystem.cxx:471; TSystem::fWritereadyTFdSet * fWritereadyFiles with reads waiting.Definition TSystem.h:278; TSystem::ClosePipevirtual int ClosePipe(FILE *pipe)Close the pipe.Definition TSystem.cxx:671; TSystem::BaseNamevirtual const char * BaseName(const char *pathname)Base name of a file name. Base name of /user/root is root.Definition TSystem.cxx:934; TSystem::AddSignalHandlervirtual void AddSignalHandler(TSignalHandler *sh)Add a signal handler to list of system signal handlers.Definition TSystem.cxx:532; TSystem::fSignalHandlerTSeqCollection *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8cxx_source.html:197932,access,access,197932,doc/master/TUnixSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8cxx_source.html,2,['access'],['access']
Security,"Fit( void ); training of rules using Jerome Friedmans implementation. const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void AddWeightsXMLTo(void* parent) const; add the rules to XML node. void ReadWeightsFromStream(istream& istr); read rules from an std::istream. void ReadWeightsFromXML(void* wghtnode); read rules from XML node. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns MVA value for given event. void WriteMonitoringHistosToFile( void ); write special monitoring histograms to file (here ntuple). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void MakeClassRuleCuts(ostream& ) const; print out the rule cuts. void MakeClassLinear(ostream& ) const; print out the linear terms. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". Bool_t UseBoost() const; { return fUseBoost; }. RuleFit* GetRuleFitPtr(); accessors. { return &fRuleFit; }. const RuleFit* GetRuleFitConstPtr() const; { return &fRuleFit; }. TDirectory* GetMethodBaseDir() const; { return BaseDir(); }. const std::vector<TMVA::Event*>& GetTrainingEvents() const; { return fEventSample; }. const std::vector<TMVA::DecisionTree*>& GetForest() const; { return fForest; }. Int_t GetNTrees() const; { return fNTrees; }. Double_t GetTreeEveFrac() const; { return fTreeEveFrac; }. const SeparationBase* GetSeparationBaseConst() const; { return fSepType; }. SeparationBase* GetSeparationBase() const; { return fSepType; }. TMVA::DecisionTree::EPruneMethod GetPruneMethod() const; { return fPruneMethod; }. Double_t GetPruneStrength() const; { return fPruneStrength; }. Double_t GetMinFracNEve() const; { return fMinFracNEve; }. Double_t GetMaxFracNEve() const; { return fMaxFracNEve; }. Int_t GetNCuts() const. { return fNCuts; }. Int_t GetGDNPathSteps() const; { return fGDNPathSteps; }. Double_t GetGDPathStep() const; { return fGDPathStep;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodRuleFit.html:23244,access,accessors,23244,root/html534/TMVA__MethodRuleFit.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodRuleFit.html,1,['access'],['accessors']
Security,"FitConfig &rhs);  ;  FitConfig (unsigned int npar=0);  Default constructor. ;  ;  ~FitConfig ();  Destructor. ;  ; ROOT::Math::Minimizer * CreateMinimizer ();  create a new minimizer according to chosen configuration ;  ; template<class T > ; void CreateParamsSettings (const ROOT::Math::IParamMultiFunctionTempl< T > &func);  set the parameter settings from a model function. ;  ; const std::string & MinimizerAlgoType () const;  return type of minimizer algorithms ;  ; std::string MinimizerName () const;  return Minimizer full name (type / algorithm) ;  ; ROOT::Math::MinimizerOptions & MinimizerOptions ();  access to the minimizer control parameter (non const method) ;  ; const std::string & MinimizerType () const;  return type of minimizer package ;  ; bool MinosErrors () const;  do minos errors analysis on the parameters ;  ; const std::vector< unsigned int > & MinosParams () const;  return vector of parameter indices for which the Minos Error will be computed ;  ; bool NormalizeErrors () const;  flag to check if resulting errors are be normalized according to chi2/ndf ;  ; unsigned int NPar () const;  number of parameters settings ;  ; FitConfig & operator= (const FitConfig &rhs);  ; bool ParabErrors () const;  do analysis for parabolic errors ;  ; std::vector< ROOT::Fit::ParameterSettings > & ParamsSettings ();  get the vector of parameter settings (non-const method) ;  ; const std::vector< ROOT::Fit::ParameterSettings > & ParamsSettings () const;  get the vector of parameter settings (const method) ;  ; std::vector< double > ParamsValues () const;  return a vector of stored parameter values (i.e initial fit parameters) ;  ; ParameterSettings & ParSettings (unsigned int i);  get the parameter settings for the i-th parameter (non-const method) ;  ; const ParameterSettings & ParSettings (unsigned int i) const;  get the parameter settings for the i-th parameter (const method) ;  ; void SetFromFitResult (const FitResult &rhs);  ; void SetMinimizer (const char *type, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:1193,access,access,1193,doc/master/classROOT_1_1Fit_1_1FitConfig.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html,1,['access'],['access']
Security,FitConfig::CreateMinimizer ; (; ). create a new minimizer according to chosen configuration ; Definition at line 173 of file FitConfig.cxx. ◆ CreateParamsSettings(). template<class T > . void ROOT::Fit::FitConfig::CreateParamsSettings ; (; const ROOT::Math::IParamMultiFunctionTempl< T > & ; func). inline . set the parameter settings from a model function. ; Create always new parameter setting list from a given model function ; Definition at line 109 of file FitConfig.h. ◆ MinimizerAlgoType(). const std::string & ROOT::Fit::FitConfig::MinimizerAlgoType ; (; ); const. inline . return type of minimizer algorithms ; Definition at line 192 of file FitConfig.h. ◆ MinimizerName(). std::string ROOT::Fit::FitConfig::MinimizerName ; (; ); const. return Minimizer full name (type / algorithm) ; Definition at line 239 of file FitConfig.cxx. ◆ MinimizerOptions(). ROOT::Math::MinimizerOptions & ROOT::Fit::FitConfig::MinimizerOptions ; (; ). inline . access to the minimizer control parameter (non const method) ; Definition at line 167 of file FitConfig.h. ◆ MinimizerType(). const std::string & ROOT::Fit::FitConfig::MinimizerType ; (; ); const. inline . return type of minimizer package ; Definition at line 187 of file FitConfig.h. ◆ MinosErrors(). bool ROOT::Fit::FitConfig::MinosErrors ; (; ); const. inline . do minos errors analysis on the parameters ; Definition at line 208 of file FitConfig.h. ◆ MinosParams(). const std::vector< unsigned int > & ROOT::Fit::FitConfig::MinosParams ; (; ); const. inline . return vector of parameter indices for which the Minos Error will be computed ; Definition at line 218 of file FitConfig.h. ◆ NormalizeErrors(). bool ROOT::Fit::FitConfig::NormalizeErrors ; (; ); const. inline . flag to check if resulting errors are be normalized according to chi2/ndf ; Definition at line 202 of file FitConfig.h. ◆ NPar(). unsigned int ROOT::Fit::FitConfig::NPar ; (; ); const. inline . number of parameters settings ; Definition at line 96 of file FitConfig.h. ◆ oper,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:6318,access,access,6318,doc/master/classROOT_1_1Fit_1_1FitConfig.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html,1,['access'],['access']
Security,"For example, when two threads create a histogram object, ROOT allocates memory and puts them to the same collection. If it happens at the same time, the results are undetermined. To avoid this problem, the user has to synchronize these actions with:; TThread::Lock() // Locking the following part of code; ... // Create an object, etc...; TThread::UnLock() // Unlocking; The code between Lock() and UnLock() will be performed uninterrupted. No other threads can perform actions or access objects/collections while it is being executed. The methods TThread::Lock()and TThread::UnLock() internally use a global TMutex instance for locking.; The user may also define their own TMutex MyMutex instance and may locally protect their asynchronous actions by calling MyMutex.Lock() and MyMutex.UnLock().; 23.2.4.2 Synchronous Actions: TCondition; To synchronize the actions of different threads you can use the TCondition class, which provides a signaling mechanism. The TCondition instance must be accessible by all threads that need to use it, i.e. it should be a global object (or a member of the class which owns the threaded methods, see below). To create a TCondition object, a TMutex instance is required for the Wait and TimedWait locking methods. One can pass the address of an external mutex to the TCondition constructor:; TMutex MyMutex;; TCondition MyCondition(&MyMutex);; If zero is passed, TCondition creates and uses its own internal mutex:; TCondition MyCondition(0);; You can now use the following methods of synchronization:. TCondition::Wait() waits until any thread sends a signal of the same condition instance: MyCondition.Wait() reacts on MyCondition.Signal() or MyCondition.Broadcast(). MyOtherCondition.Signal() has no effect.; If several threads wait for the signal from the same TCondition MyCondition, at MyCondition.Signal() only one thread will react; to activate a further thread another MyCondition.Signal() is required, etc.; If several threads wait for the signal from the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1108289,access,accessible,1108289,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['access'],['accessible']
Security,"GetAxis(12)->SetRange(from_bin, to_bin);. * Internal Representation; An entry for a filled bin consists of its n-dimensional coordinates and; its bin content. The coordinates are compacted to use as few bits as; possible; e.g. a histogram with 10 bins in x and 20 bins in y will only; use 4 bits for the x representation and 5 bits for the y representation.; This is handled by the internal class THnSparseCompactBinCoord.; Bin data (content and coordinates) are allocated in chunks of size; fChunkSize; this parameter can be set when constructing a THnSparse. Each; chunk is represented by an object of class THnSparseArrayChunk. Translation from an n-dimensional bin coordinate to the linear index within; the chunks is done by GetBin(). It creates a hash from the compacted bin; coordinates (the hash of a bin coordinate is the compacted coordinate itself; if it takes less than 8 bytes, the size of a Long64_t.; This hash is used to lookup the linear index in the TExMap member fBins;; the coordinates of the entry fBins points to is compared to the coordinates; passed to GetBin(). If they do not match, these two coordinates have the same; hash - which is extremely unlikely but (for the case where the compact bin; coordinates are larger than 4 bytes) possible. In this case, fBinsContinued; contains a chain of linear indexes with the same hash. Iterating through this; chain and comparing each bin coordinates with the one passed to GetBin() will; retrieve the matching bin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~THnSparse(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidAddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidAddBinContent(Long64_t bin, Double_t v = 1.); virtual voidAddBinError2(Long64_t bin, Double_t e2); vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnSparse.html:4183,hash,hash,4183,root/html534/THnSparse.html,https://root.cern,https://root.cern/root/html534/THnSparse.html,3,['hash'],['hash']
Security,"GetCheckSum() == fClass->GetCheckSum() || fClass->MatchLegacyCheckSum(info->GetCheckSum())); 965 ); 966 {; 967 match = kTRUE;; 968 }; 969 if (fOldVersion <= 2) {; 970 // Names of STL base classes was modified in vers==3. Allocators removed; 971 // (We could be more specific (see test for the same case below); 972 match = kTRUE;; 973 }; 974 if (!match && CompareContent(0,info,kFALSE,kFALSE,file)) {; 975 match = kTRUE;; 976 }; 977#ifdef TEST_FOR_BACKWARD_COMPATIBILITY_ABSTRACT_CLASSES; 978 if (!match && file->GetVersion() < 51800 && fClass && (fClass->Property() & kIsAbstract); 979 && fClass->GetListOfDataMembers()->GetEntries() != 0); 980 {; 981 // In some instances of old files (v5.17 and less), some StreamerInfo for; 982 // an abstract class where not written correctly, and add no; 983 // data member listed. If in addition one of the data member; 984 // was declared using a typedef _and_ the current class definition; 985 // uses a different typedef, we are unable to recalculate the; 986 // checksum as it was, because the information is missing from; 987 // the StreamerInfo, and for the same reason CompareContent can; 988 // not know whether this is okay or not ...; 989 //; 990 // Since this is such an unlikely scenario, let's complain; 991 // about it anyway (The class layout *may* have changed, we; 992 // don't know).; 993 ; 994 // if (this has only base classes) {; 995 // match = kTRUE;; 996 // }; 997 }; 998#endif; 999 } else {; 1000 // The on-file TStreamerInfo's checksum differs from the checksum of a TStreamerInfo on another file.; 1001 ; 1002 match = kFALSE;; 1003 oldIsNonVersioned = (info->fOnFileClassVersion==1 && info->fClassVersion != 1) || isStdPair;; 1004 ; 1005 // In the case where the read-in TStreamerInfo does not; 1006 // match in the 'current' in memory TStreamerInfo for; 1007 // a non foreign class (we can not get here if this is; 1008 // a foreign class so we do not need to test it),; 1009 // we need to add this one more test since the CINT behavi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:36596,checksum,checksum,36596,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['checksum'],['checksum']
Security,"GetMaxWaste()Definition TString.cxx:1584; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::AdjustCapacitystatic Ssiz_t AdjustCapacity(Ssiz_t oldCap, Ssiz_t newCap)Calculate a nice capacity greater than or equal to newCap.Definition TString.cxx:1220; TString::MD5TString MD5() constReturn the MD5 digest for this string, in a string representation.Definition TString.cxx:940; TString::Resizevoid Resize(Ssiz_t n)Resize the string. Truncate or add blanks as necessary.Definition TString.cxx:1152; TString::EStripTypeEStripTypeDefinition TString.h:276; TString::kLeading@ kLeadingDefinition TString.h:276; TString::kTrailing@ kTrailingDefinition TString.h:276; TString::ECaseCompareECaseCompareDefinition TString.h:277; TString::kExact@ kExactDefinition TString.h:277; TString::IsAlphaBool_t IsAlpha() constReturns true if all characters in string are alphabetic.Definition TString.cxx:1798; TString::HashFoldCaseUInt_t HashFoldCase() constReturn a case-insensitive hash value (endian independent).Definition TString.cxx:662; TString::LastSsiz_t Last(char c) constFind last occurrence of a character c.Definition TString.cxx:931; TString::ToUppervoid ToUpper()Change string to upper case.Definition TString.cxx:1195; TString::IsAsciiBool_t IsAscii() constReturns true if all characters in string are ascii.Definition TString.cxx:1785; TString::TokenizeTObjArray * Tokenize(const TString &delim) constThis function is used to isolate sequential tokens in a TString.Definition TString.cxx:2264; TString::BeginsWithBool_t BeginsWith(const char *s, ECaseCompare cmp=kExact) constDefinition TString.h:623; TString::GetResizeIncrementstatic Ssiz_t GetResizeIncrement()Definition TString.cxx:1576; TString::SetLongCapvoid SetLongCap(Ssiz_t s)Definition TString.h:249; TString::kAlignment@ kAlignmentDefinition TString.h:232; TString::PrependTString & Prepend(const char *cs)Definition TString.h:673; TString::IsBinBool_t IsBin() constReturns true ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8cxx_source.html:100661,hash,hash,100661,doc/master/TString_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TString_8cxx_source.html,1,['hash'],['hash']
Security,"GetParent () const;  ; Bool_t HandleTimer (TTimer *) override;  Execute action in response of a timer timing out. ;  ; virtual void IconifyWindow ();  iconify window ;  ; TClass * IsA () const override;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual void LowerWindow ();  lower window ;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetName (const char *name);  ; virtual void SetWindowName (const char *name=nullptr);  Set window name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtml.html:18494,hash,hash,18494,doc/master/classTGHtml.html,https://root.cern,https://root.cern/doc/master/classTGHtml.html,1,['hash'],['hash']
Security,"GetRSAPubExport(Int_t key = 0); Static method returning the RSA public keys. Int_t GetRSAInit(); Static method returning the RSA initialization flag. void SetDefaultRSAKeyType(Int_t key); Static method setting the default type of RSA key. void SetRSAInit(Int_t init = 1); Static method setting RSA initialization flag. TList * GetAuthInfo(); Static method returning the list with authentication details. TList * GetProofAuthInfo(); Static method returning the list with authentication directives; to be sent to proof. void AuthError(const char* where, Int_t error); Print error string depending on error code. void SetGlobalUser(const char* user); Set global user name to be used for authentication to rootd or proofd. void SetGlobalPasswd(const char* passwd); Set global passwd to be used for authentication to rootd or proofd. void SetGlobalPwHash(Bool_t pwhash); Set global passwd hash flag to be used for authentication to rootd or proofd. void SetGlobalSRPPwd(Bool_t srppwd); Set global SRP passwd flag to be used for authentication to rootd or proofd. void SetReadHomeAuthrc(Bool_t readhomeauthrc); Set flag controlling the reading of $HOME/.rootauthrc.; In PROOF the administrator may want to switch off private settings.; Always true, may only be set false via option to proofd. void SetGlobalExpDate(TDatime expdate); Set default expiring date for new validity contexts. void SetDefaultUser(const char* defaultuser); Set default user name. void SetTimeOut(Int_t to); Set timeout (active if > 0). void SetAuthReUse(Bool_t authreuse); Set global AuthReUse flag. void SetPromptUser(Bool_t promptuser); Set global PromptUser flag. void SetSecureAuthHook(SecureAuth_t func); Set secure authorization function. Automatically called when libSRPAuth; is loaded. void SetKrb5AuthHook(Krb5Auth_t func); Set kerberos5 authorization function. Automatically called when; libKrb5Auth is loaded. void SetGlobusAuthHook(GlobusAuth_t func); Set Globus authorization function. Automatically called when; libGl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAuthenticate.html:15651,authenticat,authentication,15651,root/html526/TAuthenticate.html,https://root.cern,https://root.cern/root/html526/TAuthenticate.html,7,['authenticat'],['authentication']
Security,"GetTopFolder (Bool_t force=kFALSE);  Returns top TFolder instance for the sniffer. ;  ; Bool_t HasRestriction (const char *item_name);  Made fast check if item with specified name is in restriction list If returns true, requires precise check with CheckRestriction() method. ;  ; TClass * IsA () const override;  ; Bool_t IsReadOnly () const;  Returns readonly mode. ;  ; Bool_t IsScanGlobalDir () const;  Returns true when sniffer allowed to scan global directories. ;  ; virtual Bool_t IsStreamerInfoItem (const char *);  ; Bool_t Produce (const std::string &path, const std::string &file, const std::string &options, std::string &res);  Method produce different kind of data out of object. ;  ; Bool_t RegisterCommand (const char *cmdname, const char *method, const char *icon);  Register command which can be executed from web interface. ;  ; Bool_t RegisterObject (const char *subfolder, TObject *obj);  Register object in subfolder structure. ;  ; void Restrict (const char *path, const char *options);  Restrict access to the specified location. ;  ; void ScanHierarchy (const char *topname, const char *path, TRootSnifferStore *store, Bool_t only_fields=kFALSE);  Method scans normal objects, registered in ROOT. ;  ; void SetAutoLoad (const char *scripts="""");  When specified, _autoload attribute will be always add to top element of h.json/h.hml requests Used to instruct browser automatically load special code. ;  ; THttpCallArg * SetCurrentCallArg (THttpCallArg *arg);  set current http arguments, which then used in different process methods For instance, if user authorized with some user name, depending from restrictions some objects will be invisible or user get full access to the element Returns previous argument which was set before ;  ; Bool_t SetItemField (const char *fullname, const char *name, const char *value);  Set field for specified item. ;  ; void SetReadOnly (Bool_t on=kTRUE);  When readonly on (default), sniffer is not allowed to change ROOT structures For insta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootSniffer.html:3372,access,access,3372,doc/master/classTRootSniffer.html,https://root.cern,https://root.cern/doc/master/classTRootSniffer.html,1,['access'],['access']
Security,"Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; THashList Class ReferenceCore ROOT classes » Containers. ; THashList implements a hybrid collection class consisting of a hash table and a list to store TObject's. ; The hash table is used for quick access and lookup of objects while the list allows the objects to be ordered. The hash value is calculated using the value returned by the TObject's Hash() function. Each class inheriting from TObject can override Hash() as it sees fit. ; Definition at line 34 of file THashList.h. Public Member Functions;  THashList (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashList object. ;  ;  THashList (TObject *parent, Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  For backward compatibility only. Use other ctor. ;  ; virtual ~THashList ();  Delete a hashlist. ;  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAfter (TObjLink *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Insert object at location idx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddBefore (TObjLink *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddFirst (TObject *obj) override;  Add object at the beginning of the list. ;  ; void AddFirst (TObject *obj, Option_t *opt) override;  Add object at the beginning of the list and also store option. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; void AddLast (TObject *obj, Option_t *opt) override;  Add object at the end of the list and also store option. ;  ; Float_t AverageColli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHashList.html:1080,hash,hashlist,1080,doc/master/classTHashList.html,https://root.cern,https://root.cern/doc/master/classTHashList.html,1,['hash'],['hashlist']
Security,"HEP HepLorentzVector that implements the required signature.; XYZTVector v1(1,2,3,4);; PtEtaPhiEVector v2(v1);; CLHEP::HepLorentzVector q(1,2,3,4);; XYZTVector v3(q);; 13.12.4.2 Coordinate Accessors; All the same coordinate accessors are available through the interface of ROOT::Math::LorentzVector. For example:; //returns cartesian components for the cartesian vector v1; v1.X(); v1.X(); v1.Z(); v1.T();; //returns cartesian components for the cylindrical vector v2; v2.Px(); v2.Py(); v2.Pz(); v2.E();; //returns other components for the cartesian vector v1; v1.Pt(); v1.Eta(); v1.Phi(); v1.M(); In addition, all 4 vector coordinates can be retrieved with the GetCoordinates method:; double d[4];; //fill d array with (x,y,z,t) components of v1; v1.GetCoordinates(d);; //fill d array with (pt,eta,phi,e) components of v2; v2.GetCoordinates(d);; std::vector w(4);; //fill std::vector with (x,y,z,t); v1.GetCoordinates(w.begin(),w.end());; //components of v1; To get information on all the coordinate accessors see the ROOT::Math::LorentzVector reference documentation.; 13.12.4.3 Setter Methods; One can set only all the three coordinates via:; //sets the (x,y,z,t) for a XYZTVector; v1.SetCoordinates(c1,c2,c3,c4);; //sets pt,eta,phi,e for a PtEtaPhiEVector; v2.SetCoordinates(c1,c2,c3,c4);; //sets cartesian components for PtEtaPhiEVector; v2.SetXYZ(x,y,z,t);; Single coordinate setter methods are available for the basic vector coordinates, like SetX() for a XYZTVector or SetPt() for a PtEtaPhiEVector. Attempting to do a SetX() on a non-Cartesian vector will not compile.; XYZTVector v1;; v1.SetX(1); //OK setting x for a cartesian vector; PtEtaPhiEVector v2;; v2.SetX(1); //ERROR: cannot set X for a non-cartesian; //vector. Method will not compile.; v2.SetR(1) // OK setting Pt for a PtEtaPhiEVector vector; In addition, there are setter methods from C arrays or iterators.; double d[4] = {1.,2.,3.,4.};; XYZTVector v;; //set (x,y,z,t) components of v using values from d; v.SetCoordinates(d)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:738147,access,accessors,738147,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['access'],['accessors']
Security,"HEP,JDAHEP ; DOUBLE PRECISION PHEP,VHEP ; The generic member functions SetParameter and GetParameter can be overloaded to set and get parameters of the event generator.; Note, if the derived class interfaces a (set of) Fortran common blocks (like TPythia, TVenus does), one better make the derived class a singleton. That is, something like; class MyGenerator : public TGenerator ; { ; public: ; static MyGenerator* Instance() ; { ; if (!fgInstance) fgInstance = new MyGenerator; ; return fgInstance; ; } ; void GenerateEvent() { ... } ; void ImportParticles(TClonesArray* a, Option_t opt="""") {...} ; Int_t ImportParticles(Option_t opt="""") { ... } ; Int_t SetParameter(const char* name, Double_t val) { ... } ; Double_t GetParameter(const char* name) { ... } ; virtual ~MyGenerator() { ... } ; protected: ; MyGenerator() { ... } ; MyGenerator(const MyGenerator& o) { ... } ; MyGenerator& operator=(const MyGenerator& o) { ... } ; static MyGenerator* fgInstance; ; ClassDefOverride(MyGenerator,0); ; }; ; Having multiple objects accessing the same common blocks is not ; safe. . Concrete TGenerator classes can be loaded in scripts and subseqent- ; ly used in compiled code: . // MyRun.h ; class MyRun : public TObject ; { ; public: ; static MyRun* Instance() { ... } ; void SetGenerator(TGenerator* g) { fGenerator = g; } ; void Run(Int_t n, Option_t* option="""") ; { ; TFile* file = TFile::Open(""file.root"",""RECREATE""); ; TTree* tree = new TTree(""T"",""T""); ; TClonesArray* p = new TClonesArray(""TParticles""); ; tree->Branch(""particles"", &p); ; for (Int_t event = 0; event < n; event++) { ; fGenerator->GenerateEvent(); ; fGenerator->ImportParticles(p,option); ; tree->Fill(); ; } ; file->Write(); ; file->Close(); ; } ; ... ; protected: ; TGenerator* fGenerator; ; ClassDefOverride(MyRun,0); ; }; ; ; // Config.C ; void Config() ; { ; MyRun* run = MyRun::Instance(); ; run->SetGenerator(MyGenerator::Instance()); ; } ; ; // main.cxx ; int ; main(int argc, char** argv) ; { ; TApplication app("""", 0, 0)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenerator.html:2677,access,accessing,2677,doc/master/classTGenerator.html,https://root.cern,https://root.cern/doc/master/classTGenerator.html,1,['access'],['accessing']
Security,"Hash() function. void AddAll(const TCollection* col); Add all objects from collection col to this collection.; Implemented for more efficient rehashing. void Clear(Option_t* option = """"); Remove all objects from the table. Does not delete the objects; unless the THashTable is the owner (set via SetOwner()). Int_t Collisions(const char* name) const; Returns the number of collisions for an object with a certain name; (i.e. number of objects in same slot in the hash table, i.e. length; of linked list). Int_t Collisions(TObject* obj) const; Returns the number of collisions for an object (i.e. number of objects; in same slot in the hash table, i.e. length of linked list). void Delete(Option_t* option = """"); Remove all objects from the table AND delete all heap based objects. TObject * FindObject(const char* name) const; Find object using its name. Uses the hash value returned by the; TString::Hash() after converting name to a TString. TObject * FindObject(const TObject* obj) const; Find object using its hash value (returned by its Hash() member). TList * GetListForObject(const char* name) const; Return the TList corresponding to object's name based hash value.; One can iterate this list ""manually"" to find, e.g. objects with; the same name. TList * GetListForObject(const TObject* obj) const; Return the TList corresponding to object's hash value.; One can iterate this list ""manually"" to find, e.g. identical; objects. TObject ** GetObjectRef(const TObject* obj) const; Return address of pointer to obj. TIterator * MakeIterator(Bool_t dir = kIterForward) const; Returns a hash table iterator. void Rehash(Int_t newCapacity, Bool_t checkObjValidity = kTRUE); Rehash the hashtable. If the collision rate becomes too high (i.e.; the average size of the linked lists become too long) then lookup; efficiency decreases since relatively long lists have to be searched; every time. To improve performance rehash the hashtable. This resizes; the table to newCapacity slots and refills the tab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THashTable.html:10203,hash,hash,10203,root/html528/THashTable.html,https://root.cern,https://root.cern/root/html528/THashTable.html,3,['hash'],['hash']
Security,"HnSparse.cxx. Public Member Functions;  THnSparseCompactBinCoord (Int_t dim, const Int_t *nbins);  Initialize a THnSparseCompactBinCoord object with ""dim"" dimensions and ""bins"" holding the number of bins for each dimension. ;  ;  ~THnSparseCompactBinCoord ();  destruct a THnSparseCompactBinCoord ;  ; const Char_t * GetBuffer () const;  ; Int_t * GetCoord ();  ; ULong64_t GetHash () const;  ; void SetBuffer (const Char_t *buf);  ; void SetCoord (const Int_t *coord);  ; void UpdateCoord ();  ;  Public Member Functions inherited from THnSparseCoordCompression;  THnSparseCoordCompression (const THnSparseCoordCompression &other);  Construct a THnSparseCoordCompression from another one. ;  ;  THnSparseCoordCompression (Int_t dim, const Int_t *nbins);  Initialize a THnSparseCoordCompression object with ""dim"" dimensions and ""bins"" holding the number of bins for each dimension; it stores the. ;  ;  ~THnSparseCoordCompression ();  destruct a THnSparseCoordCompression ;  ; Int_t GetBufferSize () const;  ; ULong64_t GetHashFromBuffer (const Char_t *buf) const;  Calculate hash from compact bin index. ;  ; Int_t GetNdimensions () const;  ; THnSparseCoordCompression & operator= (const THnSparseCoordCompression &other);  Set this to other if different. ;  ; ULong64_t SetBufferFromCoord (const Int_t *coord_in, Char_t *buf_out) const;  Given the cbin coordinates coord_in, calculate (""compact"") the bin coordinates and return them in buf_in. ;  ; void SetCoordFromBuffer (const Char_t *buf_in, Int_t *coord_out) const;  Given the compressed coordinate buffer buf_in, calculate (""decompact"") the bin coordinates and return them in coord_out. ;  . Private Member Functions;  THnSparseCompactBinCoord (const THnSparseCompactBinCoord &)=delete;  ; THnSparseCompactBinCoord & operator= (const THnSparseCompactBinCoord &)=delete;  . Private Attributes; Char_t * fCoordBuffer;  ; Int_t * fCurrentBin;  ; ULong64_t fHash;  . Additional Inherited Members;  Protected Member Functions inherited from THnSpa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparseCompactBinCoord.html:1599,hash,hash,1599,doc/master/classTHnSparseCompactBinCoord.html,https://root.cern,https://root.cern/doc/master/classTHnSparseCompactBinCoord.html,1,['hash'],['hash']
Security,"Html.cxx. ◆ HandleMotion(). Bool_t TGHtml::HandleMotion ; (; Event_t * ; event). overridevirtual . handle mouse motion events ; Reimplemented from TGCompositeFrame.; Definition at line 1438 of file TGHtml.cxx. ◆ HandleRadioButton(). Bool_t TGHtml::HandleRadioButton ; (; TGHtmlInput * ; p). Handle radio button event. ; Definition at line 1267 of file TGHtml.cxx. ◆ HandleTimer(). Bool_t TGHtml::HandleTimer ; (; TTimer * ; timer). overridevirtual . Handle timer event. ; Reimplemented from TObject.; Definition at line 1004 of file TGHtml.cxx. ◆ HClear(). void TGHtml::HClear ; (; ). protected . Erase all data from the HTML widget. Bring it back to an empty screen. ; Definition at line 901 of file TGHtml.cxx. ◆ ImageChanged(). void TGHtml::ImageChanged ; (; TGHtmlImage * ; pImage, . int ; newWidth, . int ; newHeight . ). protected . This routine is called when an image changes. ; If the size of the images changes, then we need to completely redo the layout. If only the appearance changes, then this works like an expose event.; pImage - Pointer to an TGHtmlImage object newWidth - New width of the image newHeight - New height of the image ; Definition at line 127 of file TGHtmlImage.cxx. ◆ InArea(). int TGHtml::InArea ; (; TGHtmlMapArea * ; p, . int ; left, . int ; top, . int ; x, . int ; y . ). Only support rect and circles for now. ; Definition at line 1574 of file TGHtml.cxx. ◆ IndexMod(). int TGHtml::IndexMod ; (; TGHtmlElement ** ; pp, . int * ; ip, . char * ; cp . ). protected . Modify an index for both pointer and char +/-/=N. ; Definition at line 251 of file TGHtmlIndex.cxx. ◆ IndexToBlockIndex(). void TGHtml::IndexToBlockIndex ; (; SHtmlIndex_t ; sIndex, . TGHtmlBlock ** ; ppBlock, . int * ; piIndex . ). protected . Convert an Element-based index into a Block-based index. ; In other words, given a pointer to an element and an index of a particular character within that element, compute a pointer to the TGHtmlBlock used to display that character and the index in the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtml.html:73134,expose,expose,73134,doc/master/classTGHtml.html,https://root.cern,https://root.cern/doc/master/classTGHtml.html,1,['expose'],['expose']
Security,"IATE_CIPHERS;; 16274 }; 16275}; 16276 ; 16277 ; 16278static int; 16279ssl_servername_callback(SSL *ssl, int *ad, void *arg); 16280{; 16281#if defined(GCC_DIAGNOSTIC); 16282#pragma GCC diagnostic push; 16283#pragma GCC diagnostic ignored ""-Wcast-align""; 16284#endif /* defined(GCC_DIAGNOSTIC) */; 16285 ; 16286 /* We used an aligned pointer in SSL_set_app_data */; 16287 struct mg_connection *conn = (struct mg_connection *)SSL_get_app_data(ssl);; 16288 ; 16289#if defined(GCC_DIAGNOSTIC); 16290#pragma GCC diagnostic pop; 16291#endif /* defined(GCC_DIAGNOSTIC) */; 16292 ; 16293 const char *servername = SSL_get_servername(ssl, TLSEXT_NAMETYPE_host_name);; 16294 ; 16295 (void)ad;; 16296 (void)arg;; 16297 ; 16298 if ((conn == NULL) || (conn->phys_ctx == NULL)) {; 16299 DEBUG_ASSERT(0);; 16300 return SSL_TLSEXT_ERR_NOACK;; 16301 }; 16302 conn->dom_ctx = &(conn->phys_ctx->dd);; 16303 ; 16304 /* Old clients (Win XP) will not support SNI. Then, there; 16305 * is no server name available in the request - we can; 16306 * only work with the default certificate.; 16307 * Multiple HTTPS hosts on one IP+port are only possible; 16308 * with a certificate containing all alternative names.; 16309 */; 16310 if ((servername == NULL) || (*servername == 0)) {; 16311 DEBUG_TRACE(""%s"", ""SSL connection not supporting SNI"");; 16312 mg_lock_context(conn->phys_ctx);; 16313 SSL_set_SSL_CTX(ssl, conn->dom_ctx->ssl_ctx);; 16314 mg_unlock_context(conn->phys_ctx);; 16315 return SSL_TLSEXT_ERR_NOACK;; 16316 }; 16317 ; 16318 DEBUG_TRACE(""TLS connection to host %s"", servername);; 16319 ; 16320 while (conn->dom_ctx) {; 16321 if (!mg_strcasecmp(servername,; 16322 conn->dom_ctx->config[AUTHENTICATION_DOMAIN])) {; 16323 /* Found matching domain */; 16324 DEBUG_TRACE(""TLS domain %s found"",; 16325 conn->dom_ctx->config[AUTHENTICATION_DOMAIN]);; 16326 break;; 16327 }; 16328 mg_lock_context(conn->phys_ctx);; 16329 conn->dom_ctx = conn->dom_ctx->next;; 16330 mg_unlock_context(conn->phys_ctx);; 16331 }; 16332 ; 163",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:481897,certificate,certificate,481897,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['certificate'],['certificate']
Security,"IATE_CIPHERS;; 16275 }; 16276}; 16277 ; 16278 ; 16279static int; 16280ssl_servername_callback(SSL *ssl, int *ad, void *arg); 16281{; 16282#if defined(GCC_DIAGNOSTIC); 16283#pragma GCC diagnostic push; 16284#pragma GCC diagnostic ignored ""-Wcast-align""; 16285#endif /* defined(GCC_DIAGNOSTIC) */; 16286 ; 16287 /* We used an aligned pointer in SSL_set_app_data */; 16288 struct mg_connection *conn = (struct mg_connection *)SSL_get_app_data(ssl);; 16289 ; 16290#if defined(GCC_DIAGNOSTIC); 16291#pragma GCC diagnostic pop; 16292#endif /* defined(GCC_DIAGNOSTIC) */; 16293 ; 16294 const char *servername = SSL_get_servername(ssl, TLSEXT_NAMETYPE_host_name);; 16295 ; 16296 (void)ad;; 16297 (void)arg;; 16298 ; 16299 if ((conn == NULL) || (conn->phys_ctx == NULL)) {; 16300 DEBUG_ASSERT(0);; 16301 return SSL_TLSEXT_ERR_NOACK;; 16302 }; 16303 conn->dom_ctx = &(conn->phys_ctx->dd);; 16304 ; 16305 /* Old clients (Win XP) will not support SNI. Then, there; 16306 * is no server name available in the request - we can; 16307 * only work with the default certificate.; 16308 * Multiple HTTPS hosts on one IP+port are only possible; 16309 * with a certificate containing all alternative names.; 16310 */; 16311 if ((servername == NULL) || (*servername == 0)) {; 16312 DEBUG_TRACE(""%s"", ""SSL connection not supporting SNI"");; 16313 mg_lock_context(conn->phys_ctx);; 16314 SSL_set_SSL_CTX(ssl, conn->dom_ctx->ssl_ctx);; 16315 mg_unlock_context(conn->phys_ctx);; 16316 return SSL_TLSEXT_ERR_NOACK;; 16317 }; 16318 ; 16319 DEBUG_TRACE(""TLS connection to host %s"", servername);; 16320 ; 16321 while (conn->dom_ctx) {; 16322 if (!mg_strcasecmp(servername,; 16323 conn->dom_ctx->config[AUTHENTICATION_DOMAIN])) {; 16324 /* Found matching domain */; 16325 DEBUG_TRACE(""TLS domain %s found"",; 16326 conn->dom_ctx->config[AUTHENTICATION_DOMAIN]);; 16327 break;; 16328 }; 16329 mg_lock_context(conn->phys_ctx);; 16330 conn->dom_ctx = conn->dom_ctx->next;; 16331 mg_unlock_context(conn->phys_ctx);; 16332 }; 16333 ; 163",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:481930,certificate,certificate,481930,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['certificate'],['certificate']
Security,"IT,; Matevz Tadel, UCSD/CMS, Eve,; Vassil Vassilev, CERN/SFT; Wouter Verkerke, NIKHEF/Atlas, RooFit,; Omar, Zapata, Medellin, Columbia; Maciej Zimnoch, GSoC, Poland; ROOT reference manual; The ROOT reference manual has been moved into Doxygen. Still some work and polish has to be done but the reference guide in this new format is now online and can be seen from the ROOT home page.; Core Libraries; Dictionary generation; Fixed the dictionary generation in the case of class inside a namespace marked inlined.; Added mechanisms to stop the dictionary generation while parsing the XML and while selecting in presence of duplicates.; Fix ROOT-7760 : fully allow the usage of the dylib extension on OSx.; Fix ROOT-7723 : allow IOCtors to have as argument a ref to a type called void.; We added a dictionary for map as part of the default STL dictionary.; We added support for template parameter packs in class name involved in the I/O.; Thread safety and thread awareness; We added the function TMethodCall::GetCallFunc to allow direct access to the function wrapper.; We reduced thread serialization in TClass::GetCheckSum, TClass::GetBaseClassOffset and TClass::Property; TObjArray::Delete was updated to allow its caller to explicitly avoid costly checks (extra RecursiveRemove and lock); We removed the need to create a TThread object per thread in a multi-threaded application. Now ROOT can be used with any threading model (e.g. OpenMP, STL threads, TBB) transparently. All the internal synchronisation mechanisms of ROOT are activated by a single call: ROOT::EnableThreadSafety() which is the successor of the existing TThread::Initialize. This call must take place if ROOT needs to be used in a thread safe manner.; The implementation of TSemaphore was redone based on C++11 thread primitive in order to prevent cases where some of request post were lost.; TDirectory::TContext; We added a default constructor to TDirectory::TContext which record the current directory and will restore it at d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v606/release-notes.html:3394,access,access,3394,doc/v606/release-notes.html,https://root.cern,https://root.cern/doc/v606/release-notes.html,1,['access'],['access']
Security,ITomato 2-D histogram with an int per channel (see TH1 documentation)} ;  CTH2Poly2D Histogram with Polygonal Bins ;  CTH2PolyBinHelper class to represent a bin in the TH2Poly histogram ;  CTH2STomato 2-D histogram with a short per channel (see TH1 documentation) ;  CTH3The 3-D histogram classes derived from the 1-D histogram classes ;  CTH3CTomato 3-D histogram with a byte per channel (see TH1 documentation) ;  CTH3DTomato 3-D histogram with a double per channel (see TH1 documentation)} ;  CTH3FTomato 3-D histogram with a float per channel (see TH1 documentation)} ;  CTH3GLOpenGL renderer class for TH3 ;  CTH3ITomato 3-D histogram with an int per channel (see TH1 documentation)} ;  CTH3STomato 3-D histogram with a short per channel (see TH1 documentation) ;  CTHaarMatrixT;  CTHashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject's ;  CTHashTableTHashTable implements a hash table to store TObject's ;  CTHashTableIterIterator of hash table ;  CTHbookBranchHBOOK Branch ;  CTHbookFileThis class is an interface to the Hbook objects in Hbook files ;  CTHbookKeyHBOOK Key ;  CTHbookTreeA wrapper class supporting Hbook ntuples (CWN and RWN) ;  CTHDFSFileReads and writes its data via the HDFS protocols ;  CTHDFSSystemDirectory handler for HDFS (THDFSFile) ;  CTHelixTHelix has two different constructors ;  CTHilbertMatrixT;  CTHilbertMatrixTSym;  CTHistPainterThe histogram painter class ;  CTHistRenderingRegion;  CTHLimitsFinderClass to find nice axis limits ;  CTHnMultidimensional histogram ;  CTHnBaseMultidimensional histogram base ;  CTHnChainA class to chain together multiple histograms ;  CTHnIterIterator over THnBase bins ;  CTHnSparseEfficient multidimensional histogram ;  CTHnSparseArrayChunkTHnSparseArrayChunk is used internally by THnSparse ;  CTHnSparseTTemplated implementation of the abstract base THnSparse ;  CTHnTTemplated implementation of the abstract base THn ;  CTHostAuth;  CTHStackThe Histogram stack cl,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:171045,hash,hash,171045,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['hash'],['hash']
Security,ITomato 2-D histogram with an int per channel (see TH1 documentation)} ;  CTH2Poly2D Histogram with Polygonal Bins ;  CTH2PolyBinHelper class to represent a bin in the TH2Poly histogram ;  CTH2STomato 2-D histogram with a short per channel (see TH1 documentation) ;  CTH3The 3-D histogram classes derived from the 1-D histogram classes ;  CTH3CTomato 3-D histogram with a byte per channel (see TH1 documentation) ;  CTH3DTomato 3-D histogram with a double per channel (see TH1 documentation)} ;  CTH3FTomato 3-D histogram with a float per channel (see TH1 documentation)} ;  CTH3GLOpenGL renderer class for TH3 ;  CTH3ITomato 3-D histogram with an int per channel (see TH1 documentation)} ;  CTH3STomato 3-D histogram with a short per channel (see TH1 documentation) ;  CTHaarMatrixT;  CTHashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject's ;  CTHashTableTHashTable implements a hash table to store TObject's ;  CTHashTableIterIterator of hash table ;  CTHbookBranchHBOOK Branch ;  CTHbookFileThis class is an interface to the Hbook objects in Hbook files ;  CTHbookKeyHBOOK Key ;  CTHbookTreeA wrapper class supporting Hbook ntuples (CWN and RWN) ;  CTHDFSFileReads and writes its data via the HDFS protocols ;  CTHDFSSystemDirectory handler for HDFS (THDFSFile) ;  CTHelixTHelix has two different constructors ;  CTHilbertMatrixT;  CTHilbertMatrixTSym;  CTHistPainterThe histogram painter class ;  CTHistRenderingRegion;  CTHLimitsFinderClass to find nice axis limits ;  CTHnMultidimensional histogram ;  CTHnBaseMultidimensional histogram base ;  CTHnIterIterator over THnBase bins ;  CTHnSparseEfficient multidimensional histogram ;  CTHnSparseArrayChunkTHnSparseArrayChunk is used internally by THnSparse ;  CTHnSparseTTemplated implementation of the abstract base THnSparse ;  CTHnTTemplated implementation of the abstract base THn ;  CTHostAuth;  CTHStackThe Histogram stack class ;  ►CTHtml;  CDocEntityInfo_t;  CDocSyntax_t;  CLinkIn,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:162578,hash,hash,162578,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['hash'],['hash']
Security,"If a system overruns the clock adjustment by requesting too many UUIDs within a single system clock tick, the UUID generator will stall until the system clock catches up. ; Definition at line 42 of file TUUID.h. Classes; struct  uuid_time_t;  . Public Member Functions;  TUUID ();  Create a UUID. ;  ;  TUUID (const char *uuid_str);  Initialize a TUUID with uuid (which must be in TUUID::AsString() format). ;  ; virtual ~TUUID ();  delete this TUUID ;  ; const char * AsString () const;  Return UUID as string. Copy string immediately since it will be reused. ;  ; Int_t Compare (const TUUID &u) const;  Compare two UUIDs ""lexically"" and return. ;  ; void FillBuffer (char *&buffer);  Stream UUID into output buffer. ;  ; TInetAddress GetHostAddress () const;  Get address of host encoded in UUID. ;  ; TDatime GetTime () const;  Get time from UUID. ;  ; void GetUUID (UChar_t uuid[16]) const;  Return uuid in specified buffer (16 byte = 128 bits). ;  ; UInt_t GetUUIDNumber () const;  ; UShort_t Hash () const;  Compute 16-bit hash value of the UUID. ;  ; virtual TClass * IsA () const;  ; void Print () const;  Print UUID. ;  ; void ReadBuffer (char *&buffer);  Stream UUID from input buffer. ;  ; void SetUUID (const char *uuid_str);  Set this UUID to the value specified in uuid ((which must be in TUUID::AsString() format). ;  ; void SetUUIDNumber (UInt_t index);  ; Int_t Sizeof () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void StreamerV1 (TBuffer &b);  Stream UUID from input buffer. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; Int_t CmpTime (uuid_time_t *t1, uuid_time_t *t2);  Compare two time values. ;  ; void Format (UShort_t clockseq, uuid_time_t ts);  Make a UUID from timestamp, clockseq and node id. ;  ; void GetCurrentTime (uuid_time_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUUID.html:5365,hash,hash,5365,doc/master/classTUUID.html,https://root.cern,https://root.cern/doc/master/classTUUID.html,1,['hash'],['hash']
Security,"InCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooLinkedList**_arr! Array of linked lists storing elements in each slot; Int_t_entriesNumber of entries stored; RooHashTable::HashMethod_hashMethodHashing method; Int_t_sizeTotal number of slots; Int_t_usedSlotsNumber of used slots. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooHashTable(Int_t initSize = 17, RooHashTable::HashMethod hashMethod = Name); Construct a hash table with given capacity and hash method. RooHashTable(const RooHashTable& other); Copy constructor. void add(TObject* arg, TObject* hashArg = 0); Add given object to table. If hashArg is given, hash will be calculation; on that rather than on 'arg'. Bool_t remove(TObject* arg, TObject* hashArg = 0); Remove given object from table. If hashArg is given, hash will be calculation; on that rather than on 'arg'. Double_t avgCollisions() const; Calculate the average number of collisions (table slots with >1 filled entry). Bool_t replace(const TObject* oldArg, const TObject* newArg, const TObject* oldHashArg = 0); Replace oldArg with newArg in the table. If oldHashArg is given, use that to calculate; the hash associated with oldArg. TObject* find(const char* name) const; Return the object with given name from the table. RooAbsArg* findArg(const RooAbsArg* arg) const. TObject* find(const TObject* arg) const; Return object with the given pointer from the table. RooLinkedListElem* findLinkTo(const TObject* arg) const; Return RooLinkedList element link to object 'hashArg'. RooSetPair* findSetPair(const RooArgSet* set1, const RooArgSet* set2) const; Return RooSetPair with given pointers in table. ~RooHashTable(); Destructor. Int_t size() const; { return _size ; }. Int_t entries() const; { return _entries ; }. ULong_t hash(const TObject* arg) const; Return hash v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooHashTable.html:6798,hash,hashArg,6798,root/html532/RooHashTable.html,https://root.cern,https://root.cern/root/html532/RooHashTable.html,4,['hash'],"['hash', 'hashArg']"
Security,"InCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooLinkedList**_arr! Array of linked lists storing elements in each slot; Int_t_entriesNumber of entries stored; RooHashTable::HashMethod_hashMethodHashing method; Int_t_sizeTotal number of slots; Int_t_usedSlotsNumber of used slots. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooHashTable(Int_t initSize = 17, RooHashTable::HashMethod hashMethod = Name); Construct a hash table with given capacity and hash method. RooHashTable(const RooHashTable& other); Copy constructor. void add(TObject* arg, TObject* hashArg = 0); Add given object to table. If hashArg is given, hash will be calculation; on that rather than on 'arg'. Bool_t remove(TObject* arg, TObject* hashArg = 0); Remove given object from table. If hashArg is given, hash will be calculation; on that rather than on 'arg'. Double_t avgCollisions() const; Calculate the average number of collisions (table slots with >1 filled entry). Bool_t replace(const TObject* oldArg, const TObject* newArg, const TObject* oldHashArg = 0); Replace oldArg with newArg in the table. If oldHashArg is given, use that to calculate; the hash associated with oldArg. TObject* find(const char* name) const; Return the object with given name from the table. TObject* find(const TObject* arg) const; Return object with the given pointer from the table. RooLinkedListElem* findLinkTo(const TObject* arg) const; Return RooLinkedList element link to object 'hashArg'. RooSetPair* findSetPair(const RooArgSet* set1, const RooArgSet* set2) const; Return RooSetPair with given pointers in table. ~RooHashTable(); Destructor. Int_t size() const; { return _size ; }. ULong_t hash(const TObject* arg) const; Return hash value calculated by method chosen in constructor. » Last changed: Mon Jul 4 15:23:04 2011 » Las",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooHashTable.html:6729,hash,hashArg,6729,root/html530/RooHashTable.html,https://root.cern,https://root.cern/root/html530/RooHashTable.html,2,['hash'],"['hash', 'hashArg']"
Security,"InCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooLinkedList**_arr! Array of linked lists storing elements in each slot; Int_t_entriesNumber of entries stored; RooHashTable::HashMethod_hashMethodHashing method; Int_t_sizeTotal number of slots; Int_t_usedSlotsNumber of used slots. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooHashTable(Int_t initSize = 17, RooHashTable::HashMethod hashMethod = Name); Construct a hash table with given capacity and hash method. RooHashTable(const RooHashTable& other); Copy constructor. void add(TObject* arg, TObject* hashArg = 0); Add given object to table. If hashArg is given, hash will be calculation; on that rather than on 'arg'. Bool_t remove(TObject* arg, TObject* hashArg = 0); Remove given object from table. If hashArg is given, hash will be calculation; on that rather than on 'arg'. Double_t avgCollisions() const; Calculate the average number of collisions (table slots with >1 filled entry). Bool_t replace(const TObject* oldArg, const TObject* newArg, const TObject* oldHashArg = 0); Replace oldArg with newArg in the table. If oldHashArg is given, use that to calculate; the hash associated with oldArg. TObject* find(const char* name) const; Return the object with given name from the table. TObject* find(const TObject* arg) const; Return object with the given pointer from the table. RooLinkedListElem* findLinkTo(const TObject* arg) const; Return RooLinkedList element link to object 'hashArg'. RooSetPair* findSetPair(const RooArgSet* set1, const RooArgSet* set2) const; Return RooSetPair with given pointers in table. ~RooHashTable(); Destructor. Int_t size() const; { return _size ; }. ULong_t hash(const TObject* arg) const; Return hash value calculated by method chosen in constructor. » Last changed: Thu Sep 23 19:59:54 2010 » La",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooHashTable.html:6660,hash,hashArg,6660,root/html528/RooHashTable.html,https://root.cern,https://root.cern/root/html528/RooHashTable.html,2,['hash'],"['hash', 'hashArg']"
Security,"InCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooLinkedList**_arr! Array of linked lists storing elements in each slot; Int_t_entriesNumber of entries stored; RooHashTable::HashMethod_hashMethodHashing method; Int_t_sizeTotal number of slots; Int_t_usedSlotsNumber of used slots. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooHashTable(Int_t initSize = 17, RooHashTable::HashMethod hashMethod = Name); Construct a hash table with given capacity and hash method. RooHashTable(const RooHashTable& other); Copy constructor. void add(TObject* arg, TObject* hashArg = 0); Add given object to table. If hashArg is given, hash will be calculation; on that rather than on 'arg'. Bool_t remove(TObject* arg, TObject* hashArg = 0); Remove given object from table. If hashArg is given, hash will be calculation; on that rather than on 'arg'. Double_t avgCollisions() const; Calculate the average number of collisions (table slots with >1 filled entry). Bool_t replace(const TObject* oldArg, const TObject* newArg, const TObject* oldHashArg = 0); Replace oldArg with newArg in the table. If oldHashArg is given, use that to calculate; the hash associated with oldArg. TObject* find(const char* name); Return the object with given name from the table. TObject* find(const TObject* hashArg); Return object with the given pointer from the table. RooLinkedListElem* findLinkTo(const TObject* arg) const; Return RooLinkedList element link to object 'hashArg'. RooSetPair* findSetPair(const RooArgSet* set1, const RooArgSet* set2) const; Return RooSetPair with given pointers in table. ~RooHashTable(); Destructor. Int_t size() const; { return _size ; }. ULong_t hash(const TObject* arg) const; Return hash value calculated by method chosen in constructor. » Last changed: Mon Dec 7 13:47:56 2009 » Last genera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooHashTable.html:6674,hash,hashArg,6674,root/html526/RooHashTable.html,https://root.cern,https://root.cern/root/html526/RooHashTable.html,2,['hash'],"['hash', 'hashArg']"
Security,"Indicates, to force all READ to CACHEREAD; static Long64_tTFile::fgFileCounterCounter for all opened files; static Bool_tTFile::fgOnlyStagedBefore the file is opened, it is checked, that the file is staged, if not, the open fails; static UInt_tTFile::fgOpenTimeoutTimeout for open operations in ms - 0 corresponds to blocking i/o; static Int_tTFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size. private:. TStringfNewUrl; Int_tfQueryReadVParams. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNetXNGFile(const char* url, Option_t* mode = """", const char* title = """", Int_t compress = 1, Int_t netopt = 0, Bool_t parallelopen = kFALSE); Constructor. param url: URL of the entry-point server to be contacted; param mode: initial file access mode; param title: title of the file (shown by ROOT browser); param compress: compression level and algorithm; param netopt: TCP window size in bytes (unused); param parallelopen: open asynchronously. ~TNetXNGFile(); Destructor. void Init(Bool_t create); Initialize the file. Makes sure that the file is really open before; calling TFile::Init. It may block. Long64_t GetSize() const; Get the file size. Returns -1 in the case that the file could not be; stat'ed. Bool_t IsOpen() const; Check if the file is open. void SetAsyncOpenStatus(TFile::EAsyncOpenStatus status); Set the status of an asynchronous file open. void Close(Option_t* option = """"); Close the file. param option: if == ""R"", all TProcessIDs referenced by this file are; deleted (is this valid in xrootd context?). Int_t ReOpen(Option_t* modestr); Reopen the file with the new access mode. param mode: the new access mode; returns: 0 in case the mode was successfully modified, 1 in case; the mode did not change (was already as requested or wrong; input arguments) and -1 in case of failu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNetXNGFile.html:23116,access,access,23116,root/html534/TNetXNGFile.html,https://root.cern,https://root.cern/root/html534/TNetXNGFile.html,1,['access'],['access']
Security,"Info(TFile* file, Bool_t force = kFALSE). Int_t GenerateHeaderFile(const char* dirname, const TList* subClasses = 0, const TList* extrainfos = 0). TClass * GetActualClass(const void* obj) const. TClass * GetClass() const. UInt_t GetCheckSum() const. Int_t GetClassVersion() const. ULong_t * GetElems() const. TObjArray * GetElements() const. Int_t GetOffset(const char* ) const. Int_t * GetOffsets() const. Version_t GetOldVersion() const. Int_t GetOnFileClassVersion() const. Int_t GetNumber() const. Int_t GetSize() const. TStreamerElement * GetStreamerElement(const char* datamember, Int_t& offset) const. Bool_t IsBuilt() const; { return fIsBuilt; }. Bool_t IsCompiled() const; { return TestBit(kIsCompiled); }. Bool_t IsOptimized() const; { return fOptimized; }. Int_t IsRecovered() const; { return TestBit(kRecovered); }. void ls(Option_t* option = """") const. TVirtualStreamerInfo * NewInfo(TClass* cl). void * New(void* obj = 0). void * NewArray(Long_t nElements, void* ary = 0). void Destructor(void* p, Bool_t dtorOnly = kFALSE). void DeleteArray(void* p, Bool_t dtorOnly = kFALSE). void SetCheckSum(UInt_t checksum). void SetClass(TClass* cl). void SetClassVersion(Int_t vers). void TagFile(TFile* fFile). void Update(const TClass* oldClass, TClass* newClass). TVirtualCollectionProxy * GenEmulatedProxy(const char* class_name, Bool_t silent). TClassStreamer * GenEmulatedClassStreamer(const char* class_name, Bool_t silent). TVirtualCollectionProxy * GenExplicitProxy(const ROOT::TCollectionProxyInfo& info, TClass* cl). TClassStreamer * GenExplicitClassStreamer(const ROOT::TCollectionProxyInfo& info, TClass* cl). » Author: Rene Brun 05/02/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id: TVirtualStreamerInfo.h 41102 2011-10-03 21:42:02Z pcanal $ » Last generated: 2011-12-02 14:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TVirtualStreamerInfo.html:12730,checksum,checksum,12730,root/html532/TVirtualStreamerInfo.html,https://root.cern,https://root.cern/root/html532/TVirtualStreamerInfo.html,1,['checksum'],['checksum']
Security,"Inline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgrThe cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TIterator*_compCIter! do not persist; RooSetProxy_compCSet; TIterator*_compRIter! do not persist; RooSetProxy_compRSet; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProduct.html:30932,validat,validate,30932,root/html532/RooProduct.html,https://root.cern,https://root.cern/root/html532/RooProduct.html,2,"['access', 'validat']","['access', 'validate']"
Security,"Input/Output math: Maths and Statistics functions matrix: Matrices (TMatrix) examples mlp: Neural networks with TMultiLayerPerceptron net: Network classes (client/server examples) physics: LorentzVectors, phase space pyroot: Python tutorials pythia: Example with pythia8 quadp: Quadratic Programming smatrix: Matrices with a templated package spectrum: Peak finder, background, deconvolutions splot: Example of the TSplot class (signal/background estimator) sql: Interfaces to SQL (mysql, oracle, etc) thread: Using Threads tmva: Examples of the MultiVariate Analysis classes tree: Creating Trees, Playing with Trees unuran: Interface with the unuram random generator library xml: Writing/Reading xml files; You can execute the scripts in $ROOTSYS/tutorials (or sub-directories) by setting your current directory in the script directory or from any user directory with write access. Several tutorials create new files. If you have write access to the tutorials directory, the new files will be created in the tutorials directory, otherwise they will be created in the user directory.; 1.6.4 $ROOTSYS/test; The test directory contains a set of examples example that represent all areas of the framework. When a new release is cut, the examples in this directory are compiled and run to test the new release’s backward compatibility. The list of source files is described in chapter “The Tutorials and Tests”.; The $ROOTSYS/test directory is a gold mine of ROOT-wisdom nuggets, and we encourage you to explore and exploit it. We recommend the new users to read the chapter “Getting Started”. The chapter “The Tutorials and Tests” has instructions on how to build all the programs and it goes over the examples Event and stress.; 1.6.5 $ROOTSYS/include; The include directory contains all header files. It is especially important because the header files contain the class definitions.; 1.6.6 $ROOTSYS/<library>; The directories we explored above are available when downloading the binaries. When downloa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:26671,access,access,26671,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['access'],['access']
Security,"InputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in representative histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Bool_tfAutomaticuse user given prune strength or automatically determined one using a validation sample ; Double_tfDeltaPruneStrengthstep size in pruning, is adjusted according to experience of previous trees ; Double_tfErrorFractionntuple var: misclassification error fraction ; vector<TMVA::Event*,allocator<TMVA::Event*> >fEventSamplethe training events; UInt_tfMaxDepthmax depth; Int_tfNCutsgrid used in cut applied in node splitting; UInt_tfNNodesMaxmax # of nodes; Int_tfNodeMinEventsmin number of events in node ; Double_tfNodePurityLimitpurity limit for sig/bkg nodes; Bool_tfPruneBeforeBoostwhether to prune right after the training (before the boosting); TMVA::DecisionTree::EPruneMethodfPruneMethodmethod used for prunig ; TStringfPruneMethodSprune method option String; Double_tfPruneStrengtha parameter to set the ""amount"" of pruning..needs to be adjusted; Bool_tfRandomisedTreeschoose a random subset of possible cut variables at each node during training; TMVA::SeparationBase*fSepTypethe separation used in node splitting; TStringfSepTypeSthe separation (option string) used in node splitting; TMVA::DecisionTree*fTreethe decision tree; Int_tfUseNvarsthe number of variables used in the randomised tree splitting; Bool_tfUseYesNoLeafuse sig or bkg classification in leave nodes or sig/bkg; vector<Double_t>fVariableImportancethe relative importance of the different variables ; static const Int_tfgDebugLeve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodDT.html:18540,validat,validation,18540,root/html528/TMVA__MethodDT.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodDT.html,1,['validat'],['validation']
Security,"Inspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTestChecksum(UInt_t checksum) const; Bool_tTestVersion(Int_t version) const; ROOT::TSchemaRuleTSchemaRule(); ROOT::TSchemaRuleTSchemaRule(const ROOT::TSchemaRule& rhs); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. Bool_tProcessChecksum(const TString& checksum) const; static voidProcessDeclaration(TObjArray* array, const TString& list); static voidProcessList(TObjArray* array, const TString& list); Bool_tProcessVersion(const TString& version) const. Data Members; public:. enum RuleType_t { kReadRule; kReadRawRule; kNone; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TStringfAttributesAttributes to be applied to the member (like Owner/NotOwner); TStringfChecksumSource checksum string; vector<UInt_t>*fChecksumVect! Source checksum vector (for searching purposes); TStringfCodeUser specified code snippet; Bool_tfEmbedValue determining if the rule should be embedded; TStringfIncludeIncludes string; TObjArray*fIncludeVect! Includes vector; ROOT::TSchemaRule::ReadFuncPtr_tfReadFuncPtr! Conversion function pointer for read rule; ROOT::TSchemaRule::ReadRawFuncPtr_tfReadRawFuncPtr! Conversion function poin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__TSchemaRule.html:6470,checksum,checksum,6470,root/html534/ROOT__TSchemaRule.html,https://root.cern,https://root.cern/root/html534/ROOT__TSchemaRule.html,1,['checksum'],['checksum']
Security,"Int_t &nbytes, Int_t &objlen, Int_t &keylen);  Read the logical record header starting at a certain postion. ;  ; Long64_t GetRelOffset () const;  ; virtual Long64_t GetSeekFree () const;  ; virtual Long64_t GetSeekInfo () const;  ; const TList * GetStreamerInfoCache ();  Returns the cached list of StreamerInfos used in this file. ;  ; virtual TList * GetStreamerInfoList () final;  Read the list of TStreamerInfo objects written to this file. ;  ; Int_t GetVersion () const;  ; virtual void IncrementProcessIDs ();  ; TClass * IsA () const override;  ; virtual Bool_t IsArchive () const;  ; Bool_t IsBinary () const;  ; virtual Bool_t IsOpen () const;  Returns kTRUE in case file is open and kFALSE if file is not open. ;  ; Bool_t IsRaw () const;  ; void ls (Option_t *option="""") const override;  List file contents. ;  ; virtual void MakeFree (Long64_t first, Long64_t last);  Mark unused bytes on the file. ;  ; virtual void MakeProject (const char *dirname, const char *classes=""*"", Option_t *option=""new"");  Generate source code necessary to access the objects stored in the file. ;  ; virtual void Map ();  ; virtual void Map (Option_t *opt);  List the contents of a file sequentially. ;  ; virtual Bool_t Matches (const char *name);  Return kTRUE if 'url' matches the coordinates of this file. ;  ; virtual Bool_t MustFlush () const;  ; void Paint (Option_t *option="""") override;  Paint all objects in the file. ;  ; void Print (Option_t *option="""") const override;  Print all objects in the file. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void ResetErrno () const;  Method resetting the er",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDavixFile.html:5655,access,access,5655,doc/master/classTDavixFile.html,https://root.cern,https://root.cern/doc/master/classTDavixFile.html,1,['access'],['access']
Security,"Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Double_t*fCoords[fDim] Coordinates; Int_tfDimDimension; TFoamVect*fNextpointer for tree construction; TFoamVect*fPrevpointer for tree construction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFoamVect(); Default constructor for streamer. TFoamVect(Int_t ); User constructor creating n-dimensional vector; and allocating dynamically array of components. TFoamVect(const TFoamVect& ); Copy constructor. ~TFoamVect(); Destructor. Double_t & operator[](Int_t ); [] is for access to elements as in ordinary matrix like a[j]=b[j]; (Perhaps against some strict rules but rather practical.); Range protection is built in, consequently for substitution; one should use rather use a=b than explicit loop!. TFoamVect& operator*=(const Double_t& ); unary multiplication operator *=. TFoamVect& operator+=(const TFoamVect& ); unary addition operator +=; adding vector c*=x,. TFoamVect& operator-=(const TFoamVect& ); unary subtraction operator -=. TFoamVect operator+(const TFoamVect& ); addition operator +; sum of 2 vectors: c=a+b, a=a+b,; NEVER USE IT, VERY SLOW!!!. TFoamVect operator-(const TFoamVect& ); subtraction operator -; difference of 2 vectors; c=a-b, a=a-b,; NEVER USE IT, VERY SLOW!!!. void Print(Option_t* option) const; Printout of all vector components on ""cout"". void PrintList(void); Printout of all member vectors in the list starting from ""this"". Int_t GetDim() const; { return fDim; }. Double_t GetCoord(Int_t i) const; {return fCoords[i];}. » Last changed: root/foam:$Id$ » Last generated: 20",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFoamVect.html:6078,access,access,6078,root/html534/TFoamVect.html,https://root.cern,https://root.cern/root/html534/TFoamVect.html,1,['access'],['access']
Security,"Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Double_t*fCoords[fDim] Coordinates; Int_tfDimDimension; TFoamVect*fNextpointer for tree construction; TFoamVect*fPrevpointer for tree construction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFoamVect(); Default constructor for streamer. TFoamVect(Int_t ); User constructor creating n-dimensional vector; and allocating dynamically array of components. TFoamVect(const TFoamVect& ); Copy constructor. ~TFoamVect(); Destructor. Double_t & operator[](Int_t ); [] is for access to elements as in ordinary matrix like a[j]=b[j]; (Perhaps against some strict rules but rather practical.); Range protection is built in, consequently for substitution; one should use rather use a=b than explicit loop!. TFoamVect& operator*=(const Double_t& ); unary multiplication operator *=. TFoamVect& operator+=(const TFoamVect& ); unary addition operator +=; adding vector c*=x,. TFoamVect& operator-=(const TFoamVect& ); unary subtraction operator -=. TFoamVect operator+(const TFoamVect& ); addition operator +; sum of 2 vectors: c=a+b, a=a+b,; NEVER USE IT, VERY SLOW!!!. TFoamVect operator-(const TFoamVect& ); subtraction operator -; difference of 2 vectors; c=a-b, a=a-b,; NEVER USE IT, VERY SLOW!!!. void Print(Option_t* option) const; Printout of all vector components on ""cout"". void PrintList(void); Printout of all member vectors in the list starting from ""this"". Int_t GetDim() const; { return fDim; }. Double_t GetCoord(Int_t i) const; {return fCoords[i];}. » Last changed: root/foam:$Id: TFoamVect.h 20882 20",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFoamVect.html:5990,access,access,5990,root/html528/TFoamVect.html,https://root.cern,https://root.cern/root/html528/TFoamVect.html,3,['access'],['access']
Security,"Int_t len); Encodes input into output. Assumes len is a multiple of 4. void Decode(UInt_t* out, const UChar_t* in, UInt_t len); Decodes input into output. Assumes len is a multiple of 4. void Transform(UInt_t* buf, const UChar_t* in); The core of the MD5 algorithm, this alters an existing MD5 hash to; reflect the addition of 16 longwords of new data. Update() blocks; the data and converts bytes into longwords for this routine. Int_t SetDigest(const char* md5ascii); Set the digest from the ASCII representation 'md5ascii'. The caller; is responsible to make sure that the 32 chars md5ascii are valid.; Returns -1 if md5ascii is malformed, returns 0 otherwise. TMD5 * ReadChecksum(const char* file); Returns checksum stored in ASCII in specified file. Use to read files; created via WriteChecksum(). The returned TMD5 object must be deleted; by the user. Returns 0 in case the file cannot be opened or in case of; error. Static utlity function. Int_t WriteChecksum(const char* file, const TMD5* md5); Writes checksum in ASCII format to specified file. This file can; directly be read by ReadChecksum(). The md5 must have been finalized.; Returns -1 in case file cannot be opened or in case of error,; 0 otherwise. Static utility function. TMD5 * FileChecksum(const char* file); Returns checksum of specified file. The returned TMD5 object must; be deleted by the user. Returns 0 in case the file does not exists; or in case of error. This function preserves the modtime of the file; so it can be safely used in conjunction with methods that keep track; of the file's modtime. Static utility function. Int_t FileChecksum(const char* file, UChar_t* digest); Returns checksum of specified file in digest argument. Returns -1 in; case of error, 0 otherwise. This method preserves the modtime of the; file so it can be safely used in conjunction with methods that keep; track of the file's modtime. Static utility function. virtual ~TMD5(); { }. » Author: Fons Rademakers 29/9/2001 » Copyright (C) 1995-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMD5.html:4220,checksum,checksum,4220,root/html528/TMD5.html,https://root.cern,https://root.cern/root/html528/TMD5.html,4,['checksum'],['checksum']
Security,"Int_t phid, Double_t* trans, UChar_t* col); virtual voidUpdatePhysical(UInt_t phid, Double_t* trans, Color_t cidx = -1, UChar_t transp = 0); virtual voidUpdatePhysioLogical(TObject* logid, Double_t* trans, UChar_t* col); virtual voidUpdatePhysioLogical(TObject* logid, Double_t* trans, Color_t cidx, UChar_t transp); virtual voidUpdateSceneInfo(TGLRnrCtx& rnrCtx). protected:. virtual voidDestroyPhysicalInternal(TGLScene::PhysicalShapeMapIt_t pit); voidReleaseGLCtxIdentity(). private:. TGLScene(const TGLScene&); static Bool_tComparePhysicalDiagonals(const TGLPhysicalShape* shape1, const TGLPhysicalShape* shape2); static Bool_tComparePhysicalVolumes(const TGLPhysicalShape* shape1, const TGLPhysicalShape* shape2); TGLScene&operator=(const TGLScene&). Data Members; public:. enum TGLLockable::ELock { kUnlocked; kDrawLock; kSelectLock; kModifyLock; };. protected:. Bool_tTGLSceneBase::fAutoDestruct; TGLBoundingBoxTGLSceneBase::fBoundingBoxbounding box for scene (axis aligned) - lazy update - use BoundingBox() to access; Bool_tTGLSceneBase::fBoundingBoxValidbounding box valid?; TGLClip*TGLSceneBase::fClipScene clipping-plane.; Bool_tTGLSceneBase::fDoClipCheckPerform global clip-plane-check in UpdateSceneInfo(); Bool_tTGLSceneBase::fDoFrustumCheckPerform global frustum-check in UpdateSceneInfo(); TGLContextIdentity*fGLCtxIdentity; Bool_tfInSmartRefresh!; Short_tTGLSceneBase::fLODScene-lod.; Float_tfLastLineWidthScale; Float_tfLastPointSizeScale; TGLLockable::ELockTGLLockable::fLockLock state.; map<TObject*,TGLLogicalShape*>fLogicalShapes!; UInt_tTGLSceneBase::fMinorStampCounter increased on minimal update.; TStringTGLSceneBase::fNameObject identifier.; Float_tTGLSceneBase::fOLLineWScene outline line-width.; map<unsigned int,TGLPhysicalShape*>fPhysicalShapes!; UInt_tTGLSceneBase::fSceneIDUnique scene id.; Bool_tTGLSceneBase::fSelectableObjects in the scene are selectable.; map<TObject*,TGLLogicalShape*>fSmartRefreshCache!; Short_tTGLSceneBase::fStyleScene-style.; UInt_tTGLSceneB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLScene.html:6294,access,access,6294,root/html528/TGLScene.html,https://root.cern,https://root.cern/root/html528/TGLScene.html,4,['access'],['access']
Security,"Int_t* coord, Option_t* options) const; TObject*ProjectionAny(Int_t ndim, const Int_t* dim, Bool_t wantSparse, Option_t* option = """") const. private:. THnSparse&operator=(const THnSparse&). Data Members; public:. enum { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TObjArrayfAxesaxes of the histogram; TObjArrayfBinContentarray of THnSparseArrayChunk; TExMapfBins! filled bins; TExMapfBinsContinued! filled bins for non-unique hashes, containing pairs of (bin index 0, bin index 1); Int_tfChunkSizenumber of entries for each chunk; THnSparseCompactBinCoord*fCompactCoord! compact coordinate; Double_tfEntriesnumber of entries, spread over chunks; Long64_tfFilledBinsnumber of filled bins; Double_t*fIntegral! array with bin weight sums; enum THnSparse::fIntegralStatus! status of integral; Int_tfNdimensionsnumber of dimensions; Double_tfTsumwtotal sum of weights; Double_tfTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDfTsumwxtotal sum of weight*X for each dimension; TArrayDfTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THnSparse(); Destruct a THnSparse. void AddBinContent(const Int_t* x, Double_t v = 1.); Add ""v"" to the content of bin with coordinates ""coord"". void AddBinContent(Long64_t bin, Double_t v = 1.); Add ""v"" to the content of bin with index ""bin"". THnSparseArrayChunk* AddChunk(); Create a new chunk of bin content. THnSparse* CloneEmpty(const char* name, const char* title, const TObjArray* axes, Int_t chunksize, Bool_t keepTargetAxis) const; Create a new THnSparse object that is of the same type as *this,; but w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THnSparse.html:13630,hash,hashes,13630,root/html528/THnSparse.html,https://root.cern,https://root.cern/root/html528/THnSparse.html,2,['hash'],['hashes']
Security,"Int_tTBuffer::fVersionBuffer format version; Version_tfVersionBuf!; TXMLEngine*fXML!; TXMLSetup::EXMLLayoutTXMLSetup::fXmlLayout; static const char*fgFloatFmt! printf argument for floats and doubles, either ""%f"" or ""%e"" or ""%10f"" and so on; static Int_tTBufferFile::fgMapSizeDefault map size for all TBuffer objects; static TStringTXMLSetup::fgNameSpaceBase. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBufferXML(); Default constructor. TBufferXML(TBuffer::EMode mode); Creates buffer object to serailize/deserialize data to/from xml.; Mode should be either TBuffer::kRead or TBuffer::kWrite. TBufferXML(TBuffer::EMode mode, TXMLFile* file); Creates buffer object to serailize/deserialize data to/from xml.; This constructor should be used, if data from buffer supposed to be stored in file.; Mode should be either TBuffer::kRead or TBuffer::kWrite. ~TBufferXML(); destroy xml buffer. TXMLFile* XmlFile(); returns pointer to TXMLFile object; access to file is necessary to produce unique identifier for object references. TString ConvertToXML(TObject* obj, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces = kFALSE); converts object, inherited from TObject class, to XML string; fmt contains configuration of XML layout. See TXMLSetup class for detatils. TString ConvertToXML(void* obj, TClass* cl, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces = kFALSE); converts any type of object to XML string; fmt contains configuration of XML layout. See TXMLSetup class for detatils. TObject* ConvertFromXML(const char* str, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces = kFALSE); Read object from XML, produced by ConvertToXML() method.; If object does not inherit from TObject class, return 0.; GenericLayout and UseNamespaces should be the same as in ConvertToXML(). void* ConvertFromXMLAny(const char* str, TClass** cl = 0, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces = kFALSE); Read object of any class from XML, produced by ConvertT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBufferXML.html:24247,access,access,24247,root/html526/TBufferXML.html,https://root.cern,https://root.cern/root/html526/TBufferXML.html,4,['access'],['access']
Security,"Int_tTBuffer::fVersionBuffer format version; Version_tfVersionBuf!; TXMLEngine*fXML!; TXMLSetup::EXMLLayoutTXMLSetup::fXmlLayout; static const char*fgFloatFmt! printf argument for floats and doubles, either ""%f"" or ""%e"" or ""%10f"" and so on; static Int_tTBufferFile::fgMapSizeDefault map size for all TBuffer objects; static TStringTXMLSetup::fgNameSpaceBase. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBufferXML(); Default constructor. TBufferXML(TBuffer::EMode mode); Creates buffer object to serailize/deserialize data to/from xml.; Mode should be either TBuffer::kRead or TBuffer::kWrite. TBufferXML(TBuffer::EMode mode, TXMLFile* file); Creates buffer object to serailize/deserialize data to/from xml.; This constructor should be used, if data from buffer supposed to be stored in file.; Mode should be either TBuffer::kRead or TBuffer::kWrite. ~TBufferXML(); destroy xml buffer. TXMLFile* XmlFile(); returns pointer to TXMLFile object; access to file is necessary to produce unique identifier for object references. TString ConvertToXML(const TObject* obj, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces = kFALSE); converts object, inherited from TObject class, to XML string; fmt contains configuration of XML layout. See TXMLSetup class for detatils. TString ConvertToXML(const void* obj, const TClass* cl, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces = kFALSE); converts any type of object to XML string; fmt contains configuration of XML layout. See TXMLSetup class for detatils. TObject* ConvertFromXML(const char* str, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces = kFALSE); Read object from XML, produced by ConvertToXML() method.; If object does not inherit from TObject class, return 0.; GenericLayout and UseNamespaces should be the same as in ConvertToXML(). void* ConvertFromXMLAny(const char* str, TClass** cl = 0, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces = kFALSE); Read object of any class from XML, pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBufferXML.html:26063,access,access,26063,root/html534/TBufferXML.html,https://root.cern,https://root.cern/root/html534/TBufferXML.html,1,['access'],['access']
Security,"Int_t_entriesNumber of entries stored; RooHashTable::HashMethod_hashMethodHashing method; Int_t_sizeTotal number of slots; Int_t_usedSlotsNumber of used slots. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooHashTable(Int_t initSize = 17, RooHashTable::HashMethod hashMethod = Name); Construct a hash table with given capacity and hash method. RooHashTable(const RooHashTable& other); Copy constructor. void add(TObject* arg, TObject* hashArg = 0); Add given object to table. If hashArg is given, hash will be calculation; on that rather than on 'arg'. Bool_t remove(TObject* arg, TObject* hashArg = 0); Remove given object from table. If hashArg is given, hash will be calculation; on that rather than on 'arg'. Double_t avgCollisions() const; Calculate the average number of collisions (table slots with >1 filled entry). Bool_t replace(const TObject* oldArg, const TObject* newArg, const TObject* oldHashArg = 0); Replace oldArg with newArg in the table. If oldHashArg is given, use that to calculate; the hash associated with oldArg. TObject* find(const char* name) const; Return the object with given name from the table. RooAbsArg* findArg(const RooAbsArg* arg) const. TObject* find(const TObject* arg) const; Return object with the given pointer from the table. RooLinkedListElem* findLinkTo(const TObject* arg) const; Return RooLinkedList element link to object 'hashArg'. RooSetPair* findSetPair(const RooArgSet* set1, const RooArgSet* set2) const; Return RooSetPair with given pointers in table. ~RooHashTable(); Destructor. Int_t size() const; { return _size ; }. Int_t entries() const; { return _entries ; }. ULong_t hash(const TObject* arg) const; Return hash value calculated by method chosen in constructor. » Last changed: Fri Dec 2 14:26:50 2011 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooHashTable.html:7168,hash,hash,7168,root/html532/RooHashTable.html,https://root.cern,https://root.cern/root/html532/RooHashTable.html,4,['hash'],"['hash', 'hashArg']"
Security,"Int_tlastIndex() const; const RooNameSet*nameSet1ByIndex(Int_t index) const; const RooNameSet*nameSet2ByIndex(Int_t index) const; RooCacheManager<RooAbsCacheElement>&operator=(const RooCacheManager<RooAbsCacheElement>&); virtual voidoperModeHook(); virtual voidRooAbsCache::optimizeCacheMode(const RooArgSet&, RooArgSet&, RooLinkedList&); virtual voidprintCompactTreeHook(ostream&, const char*); virtual Bool_tredirectServersHook(const RooAbsCollection&, Bool_t, Bool_t, Bool_t); voidreset(); Int_tsetObj(const RooArgSet* nset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Int_tsetObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); virtual voidShowMembers(TMemberInspector& insp, char* parent); voidsterilize(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. Int_t_lastIndexLast slot accessed; Int_t_maxSizeMaximum size; RooNormSetCache*_nsetCache! Normalization/Integration set manager; RooAbsCacheElement**_object! Payload; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_t_sizeActual use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCacheManager<T> reset(); Clear the cache. void RooCacheManager<T> sterilize(); Clear the cache payload but retain slot mapping w.r.t to; normalization and integration sets. Int_t RooCacheManager<T> setObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. T* RooCacheManager<T> getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIdx = 0, const TNamed* isetRangeName = 0); Retrieve payload object indexed on nset,uset amd isetRangeName; If sterileIdx is not null, it is set to the index of the sterile; slot in cacse such a slot is recycled. T* RooCacheManager<T> getObjByIndex(Int_t index) const; Retrieve payload object by slot i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCacheManager_RooAbsCacheElement_.html:2907,access,accessed,2907,root/html526/RooCacheManager_RooAbsCacheElement_.html,https://root.cern,https://root.cern/root/html526/RooCacheManager_RooAbsCacheElement_.html,1,['access'],['accessed']
Security,"IntegralMorph::MorphCacheElem*_cacheCurrent morph cache element in use; Bool_t_cacheAlphaIf true, both (x,alpha) are cached; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManagerRooAbsCachedPdf::_cacheMgrThe cache manager ; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedPdf::_ipOrderInterpolation order for cache histograms ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooIntegralMorph.html:45483,access,access,45483,root/html534/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html534/RooIntegralMorph.html,1,['access'],['access']
Security,"IsA () const override;  ; TIterator * MakeIterator (Bool_t dir=kIterForward) const override;  Returns a hash table iterator. ;  ; virtual void Print (Option_t *option, const char *wildcard, Int_t recurse=1) const;  Print the collection header and its elements that match the wildcard. ;  ; virtual void Print (Option_t *option, Int_t recurse) const;  Print the collection header and its elements. ;  ; void Print (Option_t *option, Int_t recurse) const override;  Print the collection header and its elements. ;  ; virtual void Print (Option_t *option, TPRegexp &regexp, Int_t recurse=1) const;  Print the collection header and its elements that match the regexp. ;  ; void Print (Option_t *option="""") const override;  Default print for collections, calls Print(option, 1). ;  ; void Rehash (Int_t newCapacity, Bool_t checkObjValidity=kTRUE);  Rehash the hashtable. ;  ; TObject * Remove (TObject *obj) override;  Remove object from the hashtable. ;  ; TObject * RemoveSlow (TObject *obj);  Remove object from the hashtable without using the hash value. ;  ; void SetRehashLevel (Int_t rehash);  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TCollection; virtual ~TCollection ();  TNamed destructor. ;  ; void AddVector (TObject *obj1,...);  Add all arguments to the collection. ;  ; Bool_t AssertClass (TClass *cl) const;  Make sure all objects in this collection inherit from class cl. ;  ; TIter begin () const;  ; void Browse (TBrowser *b) override;  Browse this collection (called by TBrowser). ;  ; Int_t Capacity () const;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an collection using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TCollection objects. ;  ; Bool_t Contains (const char *name) const;  ; Bool_t Contains (const TObject *obj) const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHashTable.html:3418,hash,hashtable,3418,doc/master/classTHashTable.html,https://root.cern,https://root.cern/doc/master/classTHashTable.html,4,['hash'],"['hash', 'hashtable']"
Security,"IsRenameRule(). Bool_t TSchemaRule::IsRenameRule ; (; ); const. Return kTRUE if the rule is a strict renaming of the class to a new name. ; Definition at line 756 of file TSchemaRule.cxx. ◆ IsValid(). Bool_t TSchemaRule::IsValid ; (; ); const. Return kTRUE if this rule is valid. ; Definition at line 632 of file TSchemaRule.cxx. ◆ ls(). void TSchemaRule::ls ; (; Option_t * ; targetname = """"); const. overridevirtual . The ls function lists the contents of a class on stdout. ; Ls output is typically much less verbose then Dump(). ; Reimplemented from TObject.; Definition at line 177 of file TSchemaRule.cxx. ◆ operator=(). TSchemaRule & TSchemaRule::operator= ; (; const TSchemaRule & ; rhs). Copy operator. ; Definition at line 125 of file TSchemaRule.cxx. ◆ operator==(). Bool_t TSchemaRule::operator== ; (; const TSchemaRule & ; rhs); const. Return true if the rule have the same effects. ; Definition at line 147 of file TSchemaRule.cxx. ◆ ParseChecksum(). UInt_t TSchemaRule::ParseChecksum ; (; const char * ; checksum); const. private . Parse the checksum in the given string. ; Returns either the checksum or zero if the string is not a hex or decimal number. ; Definition at line 933 of file TSchemaRule.cxx. ◆ ProcessChecksum(). Bool_t TSchemaRule::ProcessChecksum ; (; const TString & ; checksum); const. private . Check if specified checksum string is correct and build checksum vector. ; Definition at line 887 of file TSchemaRule.cxx. ◆ ProcessDeclaration(). void TSchemaRule::ProcessDeclaration ; (; TObjArray * ; array, . const TString & ; list . ). staticprivate . Split the list as a declaration into as a TObjArray of TNamed(name,type). ; Definition at line 974 of file TSchemaRule.cxx. ◆ ProcessList(). void TSchemaRule::ProcessList ; (; TObjArray * ; array, . const TString & ; list . ). staticprivate . Split the list as a comma separated list into a TObjArray of TObjString. ; Definition at line 953 of file TSchemaRule.cxx. ◆ ProcessVersion(). Bool_t TSchemaRule::ProcessVe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:22723,checksum,checksum,22723,doc/v632/classROOT_1_1TSchemaRule.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html,2,['checksum'],['checksum']
Security,"Iterator>; 571void SVector<T,D>::SetElements(InputIterator ibegin, unsigned int size) {; 572 // size <= vector size; 573 assert( size <= D);; 574 std::copy(ibegin, ibegin+size, fArray);; 575}; 576 ; 577 ; 578//==============================================================================; 579// Operators; 580//==============================================================================; 581template <class T, unsigned int D>; 582inline const T& SVector<T,D>::operator[](unsigned int i) const { return fArray[i]; }; 583 ; 584template <class T, unsigned int D>; 585inline const T& SVector<T,D>::operator()(unsigned int i) const { return fArray[i]; }; 586 ; 587template <class T, unsigned int D>; 588inline T& SVector<T,D>::operator[](unsigned int i) { return fArray[i]; }; 589 ; 590template <class T, unsigned int D>; 591inline T& SVector<T,D>::operator()(unsigned int i) { return fArray[i]; }; 592//==============================================================================; 593// Element access with At(); 594//==============================================================================; 595template <class T, unsigned int D>; 596inline const T& SVector<T,D>::At(unsigned int i) const {; 597 assert(i < D);; 598 return fArray[i];; 599}; 600 ; 601template <class T, unsigned int D>; 602inline T& SVector<T,D>::At(unsigned int i) {; 603 assert(i < D);; 604 return fArray[i];; 605}; 606 ; 607//==============================================================================; 608// SubVector; 609//==============================================================================; 610template <class T, unsigned int D>; 611template <class SubVector>; 612SubVector SVector<T,D>::Sub(unsigned int row) const {; 613 ; 614 STATIC_CHECK( SubVector::kSize <= D,SVector_dimension_too_small);; 615 ; 616 assert(row + SubVector::kSize <= D);; 617 ; 618 SubVector tmp;; 619 // need to use std::copy ??; 620 for(unsigned int i=0; i < SubVector::kSize; ++i) {; 621 tmp[i] = fArray[i+row];; 622 }; 623 return t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SVector_8icc_source.html:19390,access,access,19390,doc/master/SVector_8icc_source.html,https://root.cern,https://root.cern/doc/master/SVector_8icc_source.html,1,['access'],['access']
Security,"KWARD_COMPATIBILITY_ABSTRACT_CLASSES; 978 if (!match && file->GetVersion() < 51800 && fClass && (fClass->Property() & kIsAbstract); 979 && fClass->GetListOfDataMembers()->GetEntries() != 0); 980 {; 981 // In some instances of old files (v5.17 and less), some StreamerInfo for; 982 // an abstract class where not written correctly, and add no; 983 // data member listed. If in addition one of the data member; 984 // was declared using a typedef _and_ the current class definition; 985 // uses a different typedef, we are unable to recalculate the; 986 // checksum as it was, because the information is missing from; 987 // the StreamerInfo, and for the same reason CompareContent can; 988 // not know whether this is okay or not ...; 989 //; 990 // Since this is such an unlikely scenario, let's complain; 991 // about it anyway (The class layout *may* have changed, we; 992 // don't know).; 993 ; 994 // if (this has only base classes) {; 995 // match = kTRUE;; 996 // }; 997 }; 998#endif; 999 } else {; 1000 // The on-file TStreamerInfo's checksum differs from the checksum of a TStreamerInfo on another file.; 1001 ; 1002 match = kFALSE;; 1003 oldIsNonVersioned = (info->fOnFileClassVersion==1 && info->fClassVersion != 1) || isStdPair;; 1004 ; 1005 // In the case where the read-in TStreamerInfo does not; 1006 // match in the 'current' in memory TStreamerInfo for; 1007 // a non foreign class (we can not get here if this is; 1008 // a foreign class so we do not need to test it),; 1009 // we need to add this one more test since the CINT behaviour; 1010 // with enums changed over time, so verify the checksum ignoring; 1011 // members of type enum. We also used to not count the //[xyz] comment; 1012 // in the checksum, so test for that too.; 1013 if (fCheckSum == info->GetCheckSum(TClass::kCurrentCheckSum); 1014 || info->MatchLegacyCheckSum(fCheckSum); 1015 || GetCheckSum(TClass::kCurrentCheckSum) == info->fCheckSum; 1016 || MatchLegacyCheckSum(info->GetCheckSum()); 1017 || GetCheckSum(T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:37082,checksum,checksum,37082,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,2,['checksum'],['checksum']
Security,"KeepCircular(maxEntries);; 6423 }; 6424 if (fNClusterRange) {; 6425 Long64_t entriesOffset = fEntries - maxEntries;; 6426 Int_t oldsize = fNClusterRange;; 6427 for(Int_t i = 0, j = 0; j < oldsize; ++j) {; 6428 if (fClusterRangeEnd[j] > entriesOffset) {; 6429 fClusterRangeEnd[i] = fClusterRangeEnd[j] - entriesOffset;; 6430 ++i;; 6431 } else {; 6432 --fNClusterRange;; 6433 }; 6434 }; 6435 }; 6436 fEntries = maxEntries;; 6437 fReadEntry = -1;; 6438}; 6439 ; 6440////////////////////////////////////////////////////////////////////////////////; 6441/// Read in memory all baskets from all branches up to the limit of maxmemory bytes.; 6442///; 6443/// If maxmemory is non null and positive SetMaxVirtualSize is called; 6444/// with this value. Default for maxmemory is 2000000000 (2 Gigabytes).; 6445/// The function returns the total number of baskets read into memory; 6446/// if negative an error occurred while loading the branches.; 6447/// This method may be called to force branch baskets in memory; 6448/// when random access to branch entries is required.; 6449/// If random access to only a few branches is required, you should; 6450/// call directly TBranch::LoadBaskets.; 6451 ; 6452Int_t TTree::LoadBaskets(Long64_t maxmemory); 6453{; 6454 if (maxmemory > 0) SetMaxVirtualSize(maxmemory);; 6455 ; 6456 TIter next(GetListOfLeaves());; 6457 TLeaf *leaf;; 6458 Int_t nimported = 0;; 6459 while ((leaf=(TLeaf*)next())) {; 6460 nimported += leaf->GetBranch()->LoadBaskets();//break;; 6461 }; 6462 return nimported;; 6463}; 6464 ; 6465////////////////////////////////////////////////////////////////////////////////; 6466/// Set current entry.; 6467///; 6468/// Returns -2 if entry does not exist (just as TChain::LoadTree()).; 6469/// Returns -6 if an error occurs in the notification callback (just as TChain::LoadTree()).; 6470///; 6471/// Calls fNotify->Notify() (if fNotify is not null) when starting the processing of a new tree.; 6472///; 6473/// \note This function is overloaded in TC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:252129,access,access,252129,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['access'],['access']
Security,"Key; kOverwrite; kWriteDelete; };. protected:. TSignalHandler*TProofMgr::fIntHandlerInterrupt signal handler (ctrl-c); TStringTProofMgr::fMssUrlURL for the remote data pool, if any; TStringTNamed::fNameobject identifier; Int_tTProofMgr::fRemoteProtocolProtocol number run by the daemon server; TProofMgr::EServTypeTProofMgr::fServTypeType of server: old-proofd, XrdProofd; TList*TProofMgr::fSessionsPROOF session managed by this server; TStringTNamed::fTitleobject title; TUrlTProofMgr::fUrlServer URL; static TListTProofMgr::fgListOfManagersSub-list of TROOT::ListOfProofs for managers. private:. TXSocket*fSocketConnection to XRD. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXProofMgr(const char* url, Int_t loglevel = -1, const char* alias = """"); Create a PROOF manager for the standard (old) environment. Int_t Init(Int_t loglevel = -1); Do real initialization: open the connection and set the relevant; variables.; Login and authentication are dealt with at this level, if required.; Return 0 in case of success, 1 if the remote server is a 'proofd',; -1 in case of error. ~TXProofMgr(); Destructor: close the connection. void SetInvalid(); Invalidate this manager by closing the connection. TProof * AttachSession(TProofDesc* d, Bool_t gui = kFALSE); Dummy version provided for completeness. Just returns a pointer to; existing session 'id' (as shown by TProof::QuerySessions) or 0 if 'id' is; not valid. The boolena 'gui' should be kTRUE when invoked from the GUI. void DetachSession(Int_t , Option_t* = """"); Detach session with 'id' from its proofserv. The 'id' is the number; shown by QuerySessions. The correspondent TProof object is deleted.; If id == 0 all the known sessions are detached.; Option opt=""S"" or ""s"" forces session shutdown. void DetachSession(TProof* , Option_t* = """"); Detach session 'p' from its proofserv. The instance 'p' is invalidated; and should be deleted by the caller. Bool_t MatchUrl(const char* url); Checks if 'url",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXProofMgr.html:9953,authenticat,authentication,9953,root/html534/TXProofMgr.html,https://root.cern,https://root.cern/root/html534/TXProofMgr.html,1,['authenticat'],['authentication']
Security,"KeyType, char** Out); Receive str from sock and decode it using key indicated by key type; Return number of received bytes or -1 in case of error.; dec = 1 for private decoding, dec = 2 for public decoding. Int_t DecodeRSAPublic(const char* rsapubexport, rsa_NUMBER& n, rsa_NUMBER& d, char** rsassl = 0); Store RSA public keys from export string rsaPubExport. Int_t SetRSAPublic(const char* rsapubexport, Int_t klen); Store RSA public keys from export string rsaPubExport.; Returns type of stored key, or -1 is not recognized. Int_t SendRSAPublicKey(TSocket* Socket, Int_t key = 0); Receives server RSA Public key; Sends local RSA public key encoded. Int_t ReadRootAuthrc(); Read authentication directives from $ROOTAUTHRC, $HOME/.rootauthrc or; <Root_etc_dir>/system.rootauthrc and create related THostAuth objects.; Files are read only if they changed since last reading; If 'proofconf' is defined, check also file proofconf for directives. Bool_t CheckProofAuth(Int_t cSec, TString& det); Check if the authentication method can be attempted for the client. void MergeHostAuthList(TList* Std, TList* New, Option_t* Opt = """"); Tool for updating fgAuthInfo or fgProofAuthInfo; 'nin' contains list of last input information through (re)reading; of a rootauthrc-alike file. 'nin' info has priority.; 'std' is cleaned from inactive members.; 'nin' members used to update existing members in 'std' are; removed from 'nin', do that they do not leak; opt = ""P"" for proofauthinfo. void RemoveSecContext(TRootSecContext* ctx); Tool for removing SecContext ctx from THostAuth listed in; fgAuthInfo or fgProofAuthInfo. Int_t ProofAuthSetup(); Authentication related stuff setup in TProofServ.; This is the place where the buffer send by the client / master is; decoded. It contains also password information, if the case requires.; Return 0 on success, -1 on failure. Int_t ProofAuthSetup(TSocket* sock, Bool_t client); Setup of authetication related stuff in PROOF run after a; successful authentication.; Retu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAuthenticate.html:21203,authenticat,authentication,21203,root/html526/TAuthenticate.html,https://root.cern,https://root.cern/root/html526/TAuthenticate.html,7,['authenticat'],['authentication']
Security,"Keys(TDirectory*); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTDirectory::FillFullPath(TString& buf) const; Bool_tTFile::FlushWriteCache(); virtual TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(); virtual Int_tTWebFile::GetFromWeb(char* buf, Int_t len, const TString& msg); virtual Int_tTWebFile::GetFromWeb10(char* buf, Int_t len, const TString& msg); virtual Int_tGetHead(); virtual Int_tTWebFile::GetHunk(TSocket* s, char* hunk, Int_t maxsize); virtual Int_tTWebFile::GetLine(TSocket* s, char* line, Int_t maxsize); virtual const char*TWebFile::HttpTerminator(const char* start, const char* peeked, Int_t peeklen); virtual voidTWebFile::Init(Bool_t readHeadOnly); Int_tTFile::MakeProjectParMake(const char* packname, const char* filename); Int_tTFile::MakeProjectParProofInf(const char* packname, const char* proofinfdir); voidTObject::MakeZombie(); virtual voidProcessHttpHeader(const TString& headerLine); virtual Bool_tTWebFile::ReadBuffer10(char* buf, Int_t len); virtual Bool_tTWebFile::ReadBuffers10(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Int_tTFile::ReadBufferViaCache(char* buf, Int_t len); voidTDirectory::RegisterContext(TDirectory::TContext* ctxt); voidSetAccessKey(const TString& accessKey); virtual voidSetMsgReadBuffer10(const char* redirectLocation = 0, Bool_t tempRedirect = kFALSE); voidSetSecretKey(const TString& secretKey); virtual Int_tTFile::SysClose(Int_t fd); virtual Int_tTFile::SysOpen(const char* pathname, Int_t flags, UInt_t mode); virtual Int_tTFile::SysRead(Int_t fd, void* buf, Int_t len); virtual Long64_tTFile::SysSeek(Int_t fd, Long64_t offset, Int_t whence); virtual Int_tTFile::SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); virtual Int_tTFile::SysSync(Int_t fd); virtual Int_tTFile::SysWrite(Int_t fd, const void* buf, Int_t len); voidTDirectory::UnregisterContext(TDirectory::TContext* ctxt); Int_tTFile::WriteBufferViaCache(const char* buf, Int_t len).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TS3WebFile.html:18825,access,accessKey,18825,root/html602/TS3WebFile.html,https://root.cern,https://root.cern/root/html602/TS3WebFile.html,2,['access'],['accessKey']
Security,"LManager.; Definition at line 576 of file TX11GL.cxx. ◆ PrintViewer(). void TX11GLManager::PrintViewer ; (; TVirtualViewer3D * ; vv). overridevirtual . Print viewer. ; Implements TGLManager.; Definition at line 551 of file TX11GL.cxx. ◆ ReadGLBuffer(). void TX11GLManager::ReadGLBuffer ; (; Int_t ; devInd). overridevirtual . GL buffer is read info buffer, after that lines are reordered into XImage, XImage copied into pixmap. ; Implements TGLManager.; Definition at line 453 of file TX11GL.cxx. ◆ ResizeOffScreenDevice(). Bool_t TX11GLManager::ResizeOffScreenDevice ; (; Int_t ; devInd, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Resize off screen device. ; Implements TGLManager.; Definition at line 395 of file TX11GL.cxx. ◆ SelectManip(). Bool_t TX11GLManager::SelectManip ; (; TVirtualGLManip * ; manip, . const TGLCamera * ; camera, . const TGLRect * ; rect, . const TGLBoundingBox * ; sceneBox . ). overridevirtual . Select manipulator. ; Implements TGLManager.; Definition at line 559 of file TX11GL.cxx. ◆ SelectOffScreenDevice(). void TX11GLManager::SelectOffScreenDevice ; (; Int_t ; devInd). overridevirtual . Selects off-screen device to make it accessible by gVirtualX. ; Implements TGLManager.; Definition at line 433 of file TX11GL.cxx. ◆ Streamer(). void TX11GLManager::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGLManager. ◆ StreamerNVirtual(). void TX11GLManager::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 96 of file TX11GL.h. Member Data Documentation. ◆ fPimpl. TX11GLImpl* TX11GLManager::fPimpl. private . Definition at line 37 of file TX11GL.h. Libraries for TX11GLManager:. [legend]; The documentation for this class was generated from the following files:; graf3d/gl/inc/TX11GL.h; graf3d/gl/src/TX11GL.cxx. TX11GLManager. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:48 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTX11GLManager.html:19629,access,accessible,19629,doc/master/classTX11GLManager.html,https://root.cern,https://root.cern/doc/master/classTX11GLManager.html,1,['access'],['accessible']
Security,"LObjectDataPool XML object keeper class; TSQLObjectInfo Info (classname, version) about object in database; TSQLResult SQL query result; TSQLRow One row of an SQL query result; TSQLServer Connection to SQL server; TSQLStatement SQL statement; TSQLStructure Table/structure description used internally by YBufferSQL.; TSQLTableData Collection of columns data for single SQL table; TSQLTableInfo Summury information about SQL table; TSSLSocket ; TSVDUnfold Data unfolding using Singular Value Decomposition (hep-ph/9509307); TSVG SVG driver; TSecContext Class providing host specific authentication information; TSecContextCleanup Update the remote authentication table; TSelVerifyDataSet PROOF selector for parallel dataset verification; TSelector A utility class for tree and object processing; TSelectorCint A utility class for tree and object processing (interpreted version); TSelectorDraw A specialized TSelector for TTree::Draw; TSelectorEntries A specialized TSelector for TTree::GetEntries(selection); TSelectorList Special TList used in the TSelector; TSelectorScalar Mergable scalar; TSemaphore Counting semaphore class; TSeqCollection Sequenceable collection ABC; TServerSocket This class implements server sockets; TSessionDescription Session description; TSessionFrame Session frame; TSessionInputFrame Input frame; TSessionLogView PROOF progress dialog; TSessionOutputFrame Output frame; TSessionQueryFrame Query frame; TSessionServerFrame Server frame; TSessionViewer Session Viewer; TShape Basic shape; TSignalHandler Signal event handler; TSlave PROOF slave server; TSlaveInfo basic info on workers; TSlaveLite PROOF lite worker server; TSlider A user interface slider.; TSliderBox The moving box of a TSlider; TSocket This class implements client sockets; TSortedList A sorted list; TSpectrum Peak Finder, background estimator, Deconvolution; TSpectrum2 Peak Finder, background estimator, Deconvolution for 2-D histograms; TSpectrum2Fit Spectrum2 Fitter using algorithm without matri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:124548,authenticat,authentication,124548,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,4,['authenticat'],['authentication']
Security,"LServer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 117 of file TSQLServer.h. ◆ ClearError(). void TSQLServer::ClearError ; (; ). protected . reset error fields ; Definition at line 119 of file TSQLServer.cxx. ◆ Close(). virtual void TSQLServer::Close ; (; Option_t * ; option = """"). pure virtual . Implemented in TMySQLServer, TODBCServer, TPgSQLServer, and TSQLiteServer. ◆ Commit(). Bool_t TSQLServer::Commit ; (; ). virtual . submit ""COMMIT"" query to database return kTRUE, if successful ; Reimplemented in TMySQLServer, TODBCServer, and TSQLiteServer.; Definition at line 160 of file TSQLServer.cxx. ◆ Connect(). TSQLServer * TSQLServer::Connect ; (; const char * ; db, . const char * ; uid, . const char * ; pw . ). static . The db should be of the form: <dbms>://<host>[:<port>][/<database>], e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main, pgsql://... or sqlite://<database>... The uid is the username and pw the password that should be used for the connection. ; Depending on the <dbms> the shared library (plugin) for the selected system will be loaded. When the connection could not be opened 0 is returned. ; Definition at line 61 of file TSQLServer.cxx. ◆ CreateDataBase(). virtual Int_t TSQLServer::CreateDataBase ; (; const char * ; dbname). pure virtual . Implemented in TMySQLServer, TODBCServer, TPgSQLServer, and TSQLiteServer. ◆ DeclFileName(). static const char * TSQLServer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 117 of file TSQLServer.h. ◆ DropDataBase(). virtual Int_t TSQLServer::DropDataBase ; (; const char * ; dbname). pure virtual . Implemented in TMySQLServer, TODBCServer, TPgSQLServer, and TSQLiteServer. ◆ EnableErrorOutput(). virtual void TSQLServer::EnableErrorOutput ; (; Bool_t ; on = kTRUE). inlinevirtual . Definition at line 102 of file TSQLServer.h. ◆ Exec(). Bool_t TSQLServer::Exec ; (; const char * ; sql). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLServer.html:15696,password,password,15696,doc/master/classTSQLServer.html,https://root.cern,https://root.cern/doc/master/classTSQLServer.html,1,['password'],['password']
Security,"LVEntry, TGTextEntry, TRootIconList, TAxis, TKey, TMapFile, TParticle, TPrimary, TPackMgr, Axis2, TParallelCoordSelect, and TVirtualPad.; Definition at line 483 of file TObject.cxx. ◆ GetUniqueID(). UInt_t TObject::GetUniqueID ; (; ); const. virtual . Return the unique object id. ; Definition at line 457 of file TObject.cxx. ◆ HandleTimer(). Bool_t TObject::HandleTimer ; (; TTimer * ; timer). virtual . Execute action in response of a timer timing out. ; This method must be overridden if an object has to react to timers. ; Reimplemented in TGWindow, TGuiBldDragManager, TSessionViewer, TGLEventHandler, TGCommandPlugin, TGDNDManager, TGFileContainer, TGPopupMenu, TGScrollBar, TGShutter, TGTextEdit, TGTextEditor, TGTextEntry, TGTextView, TGToolTip, TGHtml, TVirtualPacketizer, TProofPlayerRemote, TProofPlayerSlave, TProofPlayerSuperMaster, TProofPlayerLite, and TTreeViewer.; Definition at line 493 of file TObject.cxx. ◆ Hash(). ULong_t TObject::Hash ; (; ); const. virtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:987",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTObject.html:42197,hash,hash,42197,doc/v632/classTObject.html,https://root.cern,https://root.cern/doc/v632/classTObject.html,1,['hash'],['hash']
Security,"Limit(unsigned int ivar, double lower); virtual boolROOT::Math::Minimizer::SetVariableStepSize(unsigned int ivar, double value); virtual boolROOT::Math::Minimizer::SetVariableUpperLimit(unsigned int ivar, double upper); virtual boolROOT::Math::Minimizer::SetVariableValue(unsigned int ivar, double value); virtual boolROOT::Math::Minimizer::SetVariableValues(const double* x); intROOT::Math::Minimizer::Status() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; virtual intROOT::Math::Minimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::Minimizer::VariableName(unsigned int ivar) const; virtual const double*X() const. protected:. voidGetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const. Data Members; protected:. TMVA::IFitterTarget*fFitness; doublefMinValue; ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; ROOT::Math::GeneticMinimizerParametersfParameters; vector<TMVA::Interval*>fRanges; vector<double>fResult; intROOT::Math::Minimizer::fStatusstatus of minimizer ; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticMinimizer(int i = 0); GeneticMinimizer (int = 0);. virtual ~GeneticMinimizer(). void Clear(). void SetFunction(const ROOT::Math::IMultiGenFunction& func). bool SetLimitedVariable(unsigned int , const string& , double , double , double , double ). bool SetVariable(unsigned int ivar, const string& name, double val, double step). bool SetFixedVariable(unsigned int ivar, const string& name, double val). bool Minimize(). double MinValue() const. double Edm() const. const double * X() const. const double * MinGradient() const. unsigned int NCalls() const. unsigned int NDim() const. unsigned int NFree() const. bool ProvidesError() const. const double * Errors() const. double CovMatrix(unsigned ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GeneticMinimizer.html:5252,validat,validated,5252,root/html534/ROOT__Math__GeneticMinimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GeneticMinimizer.html,1,['validat'],['validated']
Security,"Line; kStandard; kVerbose; kTreeStructure; };. protected:. set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_t_errorCountNumber of errors remaining to print; static Bool_t_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_t_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsPdf.html:40621,validat,validate,40621,root/html532/RooAbsPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsPdf.html,2,"['access', 'validat']","['access', 'validate']"
Security,"List of TCanvas; TSeqCollection* fStyles List of TStyle; TSeqCollection* fFunctions List of TF1, TF2, TF3; TSeqCollection* fTasks List of TTask; TSeqCollection* fColors List of TColor; TSeqCollection* fGeometries List of geometries; TSeqCollection* fBrowsers List of TBrowser; TSeqCollection* fSpecials List of special objects; TSeqCollection* fCleanups List of recursiveRemove collections; These collections are also displayed in the root folder of the Object Browser. Most of these collections are self explanatory. The special cases are the collections of specials and cleanups.; 8.2.1 The Collection of Specials; This collection contains objects of the following classes: TCutG, TMultiDimFit, TPrincipal, TChains. In addition it contains the gHtml object, gMinuit objects, and the array of contours graphs (TGraph) created when calling the Draw method of a histogram with the ""CONT, LIST"" option.; 8.2.2 Access to the Collection Contents; The current content for a collection listed above can be accessed with the corresponding gROOT->GetListOf method (for example gROOT->GetListOfCanvases). In addition, gROOT->GetListOfBrowsables returns a collection of all objects visible on the left side panel in the browser. See the image of the Object Browser in the next figure. The ROOT Object Browser. 8.3 Ownership by Other Objects; When an object creates another, the creating object is the owner of the created one. For example:; myHisto->Fit(""gaus""); The call to Fit copies the global TF1 Gaussian function and attaches the copy to the histogram. When the histogram is deleted, the copy is deleted also.; When a pad is deleted or cleared, all objects in the pad with the kCanDelete bit set are deleted automatically. Currently the objects created by the DrawCopy methods, have the kCanDelete bit set and are therefore owned by the pad.; 8.4 Ownership by the User; The user owns all objects not described in one of the above cases. TObject has two bits, kCanDelete and kMustCleanup, that influence ho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:285583,access,accessed,285583,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['access'],['accessed']
Security,"ListElem*RooLinkedList::createElement(TObject* obj, RooLinkedListElem* elem = 0); voidRooLinkedList::deleteElement(RooLinkedListElem*); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; RooLinkedListElem*RooLinkedList::findLink(const TObject* arg) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooLinkedListElem*RooLinkedList::_first! Link to first element of list; Int_tRooLinkedList::_hashThreshSize threshold for hashing; RooHashTable*RooLinkedList::_htableLink! Hash table by link pointer; RooHashTable*RooLinkedList::_htableName! Hash table by name ; RooLinkedListElem*RooLinkedList::_last! Link to last element of list; TStringRooLinkedList::_name; Int_tRooLinkedList::_sizeCurrent size of list; Bool_tRooLinkedList::_useNptr!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooRefCountList(); Default constructor construct lists with initial hash table size of 17. void Add(TObject* obj, Int_t count); Add object to list with given reference count increment; List takes ownership of object. Bool_t Remove(TObject* obj); Remove object from list and if reference count; reaches zero delete object itself as well. Bool_t RemoveAll(TObject* obj); Remove object from list and delete object itself; regardless of reference count. Int_t refCount(TObject* obj); Return reference count associated with 'obj'. RooRefCountList(). virtual ~RooRefCountList(); {}. void Add(TObject* arg); { Add(arg,1) ; }. » Last changed: Tue Mar 10 17:18:54 2015 » Last generated: 2015-03-10 17:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRefCountList.html:7257,hash,hash,7257,root/html534/RooRefCountList.html,https://root.cern,https://root.cern/root/html534/RooRefCountList.html,1,['hash'],['hash']
Security,"Lock()Definition TClassTable.cxx:94; TClassTable::NormalizeThenLock::NormalizeThenLockNormalizeThenLock(const char *cname)Definition TClassTable.cxx:80; TClassTable::NormalizeThenLock::NormalizeThenLockNormalizeThenLock(NormalizeThenLock &&)=delete; TClassTable::NormalizeThenLock::NormalizeThenLockNormalizeThenLock()=delete; TClassTable::NormalizeThenLock::operator=NormalizeThenLock & operator=(const NormalizeThenLock &)=delete; TClassTable::NormalizeThenLock::operator=NormalizeThenLock & operator=(NormalizeThenLock &&)=delete; TClassTableThis class registers for all classes their name, id and dictionary function in a hash table.Definition TClassTable.h:37; TClassTable::PrintTablestatic void PrintTable()Print the class table.Definition TClassTable.cxx:823; TClassTable::GetPragmaBitsstatic Int_t GetPragmaBits(const char *name)Returns the pragma bits as specified in the LinkDef.h file.Definition TClassTable.cxx:660; TClassTable::GetDictstatic DictFuncPtr_t GetDict(const char *cname)Given the class name returns the Dictionary() function of a class (uses hash of name).Definition TClassTable.cxx:674; TClassTable::GetIDstatic Version_t GetID(const char *cname)Returns the ID of a class.Definition TClassTable.cxx:647; TClassTable::IdMap_tROOT::TMapTypeToClassRec IdMap_tDefinition TClassTable.h:43; TClassTable::SortTablestatic void SortTable()Sort the class table by ascending class ID's.Definition TClassTable.cxx:857; TClassTable::GetProtoNormstatic TProtoClass * GetProtoNorm(const char *cname)Given the class normalized name returns the TClassProto object for the class.Definition TClassTable.cxx:770; TClassTable::GetDictNormstatic DictFuncPtr_t GetDictNorm(const char *cname)Given the normalized class name returns the Dictionary() function of a class (uses hash of name).Definition TClassTable.cxx:717; TClassTable::fgAlternatestatic ROOT::TClassAlt ** fgAlternateDefinition TClassTable.h:46; TClassTable::Printvoid Print(Option_t *option="""") const overridePrint the class table.D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClassTable_8cxx_source.html:41701,hash,hash,41701,doc/master/TClassTable_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClassTable_8cxx_source.html,2,['hash'],['hash']
Security,"Log() << kFATAL << ""Validation size \"""" << fNumValidationString; 1153 << ""\"" is larger than or equal in size to training set (size=\"""" << trainingSetSize << ""\"")."" << Endl;; 1154 }; 1155 ; 1156 return nValidationSamples;; 1157}; 1158 ; 1159 ; 1160////////////////////////////////////////////////////////////////////////////////; 1161/// Implementation of architecture specific train method; 1162///; 1163template <typename Architecture_t>; 1164void MethodDL::TrainDeepNet(); 1165{; 1166 ; 1167 using Scalar_t = typename Architecture_t::Scalar_t;; 1168 using Layer_t = TMVA::DNN::VGeneralLayer<Architecture_t>;; 1169 using DeepNet_t = TMVA::DNN::TDeepNet<Architecture_t, Layer_t>;; 1170 using TensorDataLoader_t = TTensorDataLoader<TMVAInput_t, Architecture_t>;; 1171 ; 1172 bool debug = Log().GetMinType() == kDEBUG;; 1173 ; 1174 ; 1175 // set the random seed for weight initialization; 1176 Architecture_t::SetRandomSeed(fRandomSeed);; 1177 ; 1178 ///split training data in training and validation data; 1179 // and determine the number of training and testing examples; 1180 ; 1181 size_t nValidationSamples = GetNumValidationSamples();; 1182 size_t nTrainingSamples = GetEventCollection(Types::kTraining).size() - nValidationSamples;; 1183 ; 1184 const std::vector<TMVA::Event *> &allData = GetEventCollection(Types::kTraining);; 1185 const std::vector<TMVA::Event *> eventCollectionTraining{allData.begin(), allData.begin() + nTrainingSamples};; 1186 const std::vector<TMVA::Event *> eventCollectionValidation{allData.begin() + nTrainingSamples, allData.end()};; 1187 ; 1188 size_t trainingPhase = 1;; 1189 ; 1190 for (TTrainingSettings &settings : this->GetTrainingSettings()) {; 1191 ; 1192 size_t nThreads = 1; // FIXME threads are hard coded to 1, no use of slave threads or multi-threading; 1193 ; 1194 ; 1195 // After the processing of the options, initialize the master deep net; 1196 size_t batchSize = settings.batchSize;; 1197 this->SetBatchSize(batchSize);; 1198 // Should be replaced b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:45055,validat,validation,45055,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['validat'],['validation']
Security,"Long_t id, flags, modtime;; 1356 if (const_cast<TFile*>(this)->SysStat(fD, &id, &size, &flags, &modtime)) { // NOLINT: silence clang-tidy warnings; 1357 Error(""GetSize"", ""cannot stat the file %s"", GetName());; 1358 return -1;; 1359 }; 1360 }; 1361 return size;; 1362}; 1363 ; 1364////////////////////////////////////////////////////////////////////////////////; 1365/// Returns the cached list of StreamerInfos used in this file.; 1366 ; 1367const TList *TFile::GetStreamerInfoCache(); 1368{; 1369 return fInfoCache ? fInfoCache : (fInfoCache=GetStreamerInfoList());; 1370}; 1371 ; 1372////////////////////////////////////////////////////////////////////////////////; 1373/// See documentation of GetStreamerInfoList for more details.; 1374/// This is an internal method which returns the list of streamer infos and also; 1375/// information about the success of the operation.; 1376 ; 1377TFile::InfoListRet TFile::GetStreamerInfoListImpl(bool lookupSICache); 1378{; 1379 ROOT::Internal::RConcurrentHashColl::HashValue hash;; 1380 ; 1381 if (fIsPcmFile) return {nullptr, 1, hash}; // No schema evolution for ROOT PCM files.; 1382 ; 1383 TList *list = nullptr;; 1384 if (fSeekInfo) {; 1385 TDirectory::TContext ctxt(this); // gFile and gDirectory used in ReadObj; 1386 auto key = std::make_unique<TKey>(this);; 1387 std::vector<char> buffer(fNbytesInfo+1);; 1388 auto buf = buffer.data();; 1389 Seek(fSeekInfo); // NOLINT: silence clang-tidy warnings; 1390 if (ReadBuffer(buf,fNbytesInfo)) { // NOLINT: silence clang-tidy warnings; 1391 // ReadBuffer returns kTRUE in case of failure.; 1392 Warning(""GetRecordHeader"",""%s: failed to read the StreamerInfo data from disk."",; 1393 GetName());; 1394 return {nullptr, 1, hash};; 1395 }; 1396 ; 1397 if (lookupSICache) {; 1398 // key data must be excluded from the hash, otherwise the timestamp will; 1399 // always lead to unique hashes for each file; 1400 hash = fgTsSIHashes.Hash(buf + key->GetKeylen(), fNbytesInfo - key->GetKeylen());; 1401 auto si_uid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:49056,hash,hash,49056,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,2,['hash'],['hash']
Security,"Long_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; y1Option_t Option_t TPoint TPoint const char y1Definition TGWin32VirtualXProxy.cxx:70; namechar name[80]Definition TGX11.cxx:110; TString.h; TrainingHistory.h; TransformationHandler.h; TDirectoryDescribe directory structure in memory.Definition TDirectory.h:45; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; ClassificationClass to perform two class classification.; TMVA::ConfigurableDefinition Configurable.h:45; TMVA::CrossValidationClass to perform cross validation, splitting the dataloader into folds.Definition CrossValidation.h:124; TMVA::DataSetInfoClass that contains all the data information.Definition DataSetInfo.h:62; TMVA::DataSetInfo::GetNVariablesUInt_t GetNVariables() constDefinition DataSetInfo.h:127; TMVA::DataSetInfo::GetNTargetsUInt_t GetNTargets() constDefinition DataSetInfo.h:128; TMVA::DataSetInfo::GetDataSetDataSet * GetDataSet() constreturns data setDefinition DataSetInfo.cxx:493; TMVA::DataSetInfo::GetVariableInfoVariableInfo & GetVariableInfo(Int_t i)Definition DataSetInfo.h:105; TMVA::DataSetClass that contains all the data information.Definition DataSet.h:58; TMVA::DataSet::GetNEventsLong64_t GetNEvents(Types::ETreeType type=Types::kMaxTreeType) constDefinition DataSet.h:206; TMVA::DataSet::GetNTrainingEventsLong64_t GetNTrainingEvents() constDefinition DataSet.h:68; TMVA::EventDefinition Event.h:51; TMVA::Experimental::ClassificationDefinition Classification.h:162; TMVA::FactoryThis is the main MVA steering cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodBase_8h_source.html:36031,validat,validation,36031,doc/master/MethodBase_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html,1,['validat'],['validation']
Security,"Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; Int_t GetHead () override;  Overwrites TWebFile::GetHead() for retrieving the HTTP headers of this file. ;  ; void ProcessHttpHeader (const TString &headerLine) override;  This method is called by the super-class TWebFile when a HTTP header for this file is retrieved. ;  ; void SetAccessKey (const TString &accessKey);  ; void SetMsgReadBuffer10 (const char *redirectLocation=nullptr, Bool_t tempRedirect=kFALSE) override;  Overwrites TWebFile::SetMsgReadBuffer10() for setting the HTTP GET request compliant to the authentication mechanism used by the S3 protocol. ;  ; void SetSecretKey (const TString &secretKey);  ;  Protected Member Functions inherited from TWebFile; virtual TString BasicAuthentication ();  Return basic authentication scheme, to be added to the request. ;  ; virtual void CheckProxy ();  Check if shell var ""http_proxy"" has been set and should be used. ;  ; virtual Int_t GetFromCache (char *buf, Int_t len, Int_t nseg, Long64_t *seg_pos, Int_t *seg_len);  Extract requested segments from the cached content. ;  ; virtual Int_t GetFromWeb (char *buf, Int_t len, const TString &msg);  Read request from web server. ;  ; virtual Int_t GetFromWeb10 (char *buf, Int_t len, const TString &msg, Int_t nseg=0, Long64_t *seg_pos=nullptr, Int_t *seg_len=nullptr);  Read multiple byte range request from web server. ;  ; virtual Int_t GetHunk (TSocket *s, char *hunk, Int_t maxsize);  Read a hunk of data from the socket, up until a terminator. ;  ; virtual Int_t GetLine (TSocket *s, char *line, Int_t maxsize);  Read a line from the socket. ;  ; virtual const char * HttpTerminator (const char *start, const char *peeked, Int_t peeklen);  Determine whethe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTS3WebFile.html:32993,authenticat,authentication,32993,doc/master/classTS3WebFile.html,https://root.cern,https://root.cern/doc/master/classTS3WebFile.html,1,['authenticat'],['authentication']
Security,"MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TExMap(Int_t mapSize = 100); TExMap(const TExMap& map); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. Int_tFindElement(ULong64_t hash, Long64_t key); voidFixCollisions(Int_t index); Bool_tHighWaterMark(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Int_tfSize; TExMap::Assoc_t*fTable; Int_tfTally. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TExMap(Int_t mapSize = 100); Create a TExMap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TExMap.html:5542,hash,hash,5542,root/html602/TExMap.html,https://root.cern,https://root.cern/root/html602/TExMap.html,2,['hash'],['hash']
Security,"ML. XMLNodePointer_t ChooseObject(TGeoShape* geoShape); Chooses the object and method that should be used for processing object. TGeoCompositeShape* CreateFakeCtub(TGeoCtub* geoShape); Method creating cutTube as an intersection of tube and two boxes; - not used anymore because cutube is supported in Geant4 9.5. Bool_t IsInList(TGDMLWrite::NameList list, TString name2check); Checks whether name2check is in (NameList) list. TString GenName(TString oldname); NCNAME basic restrictions; Replace ""$"" character with empty character etc. TString GenName(TString oldname, TString objPointer); Important function which is responsible for naming volumes, solids and materials. Bool_t CanProcess(TObject* pointer); Method which tests whether solids can be processed. TString GetPattAxis(Int_t divAxis, const char* pattName, TString& unit); Method that retrieves axis and unit along which object is divided. Bool_t IsNullParam(Double_t parValue, TString parName, TString objName); Check for null parameter to skip the NULL objects. void UnsetTemporaryBits(TGeoManager* geoMng); Unsetting bits that were changed in gGeoManager during export so that export; can be run more times with the same instance of gGeoManager. TGDMLWrite(). void StartGDMLWriting(TGeoManager* geomanager, const char* filename, TString option); static function -; options:; g - set by default - geant4 compatibility; f,n - if none of this two is set then naming convention is; with incremental suffix, if ""f"" then suffix is pointer; if ""n"" then there is no suffix, but uniqness of names; is not secured. void SetG4Compatibility(Bool_t G4Compatible). Xyz GetXYZangles(const Double_t* rotationMatrix); II. Utility methods. » Author: Anton Pytel 15/9/2011 » Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; » Last changed: root/gdml:$Id$ » Last generated: 2015-03-13 19:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGDMLWrite.html:20210,secur,secured,20210,root/html534/TGDMLWrite.html,https://root.cern,https://root.cern/root/html534/TGDMLWrite.html,1,['secur'],['secured']
Security,"ML. XMLNodePointer_t ChooseObject(TGeoShape* geoShape); Chooses the object and method that should be used for processing object. TGeoCompositeShape* CreateFakeCtub(TGeoCtub* geoShape); Method creating cutTube as an intersection of tube and two boxes; - not used anymore because cutube is supported in Geant4 9.5. Bool_t IsInList(TGDMLWrite::NameList list, TString name2check); Checks whether name2check is in (NameList) list. TString GenName(TString oldname); NCNAME basic restrictions; Replace ""$"" character with empty character etc. TString GenName(TString oldname, TString objPointer); Important function which is responsible for naming volumes, solids and materials. Bool_t CanProcess(TObject* pointer); Method which tests whether solids can be processed. TString GetPattAxis(Int_t divAxis, const char* pattName, TString& unit); Method that retrieves axis and unit along which object is divided. Bool_t IsNullParam(Double_t parValue, TString parName, TString objName); Check for null parameter to skip the NULL objects. void UnsetTemporaryBits(TGeoManager* geoMng); Unsetting bits that were changed in gGeoManager during export so that export; can be run more times with the same instance of gGeoManager. TGDMLWrite(). void StartGDMLWriting(TGeoManager* geomanager, const char* filename, TString option); static function -; options:; g - set by default - geant4 compatibility; f,n - if none of this two is set then naming convention is; with incremental suffix, if ""f"" then suffix is pointer; if ""n"" then there is no suffix, but uniqness of names; is not secured. void SetG4Compatibility(Bool_t G4Compatible). Xyz GetXYZangles(const Double_t* rotationMatrix); II. Utility methods. » Author: Anton Pytel 15/9/2011 » Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; » Last changed: root/gdml:$Id$ » Last generated: 2015-06-02 15:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGDMLWrite.html:20738,secur,secured,20738,root/html604/TGDMLWrite.html,https://root.cern,https://root.cern/root/html604/TGDMLWrite.html,1,['secur'],['secured']
Security,"ML. XMLNodePointer_t ChooseObject(TGeoShape* geoShape); Chooses the object and method that should be used for processing object. TGeoCompositeShape* CreateFakeCtub(TGeoCtub* geoShape); Method creating cutTube as an intersection of tube and two boxes; - not used anymore because cutube is supported in Geant4 9.5. Bool_t IsInList(TGDMLWrite::NameList list, TString name2check); Checks whether name2check is in (NameList) list. TString GenName(TString oldname); NCNAME basic restrictions; Replace ""$"" character with empty character etc. TString GenName(TString oldname, TString objPointer); Important function which is responsible for naming volumes, solids and materials. Bool_t CanProcess(TObject* pointer); Method which tests whether solids can be processed. TString GetPattAxis(Int_t divAxis, const char* pattName, TString& unit); Method that retrieves axis and unit along which object is divided. Bool_t IsNullParam(Double_t parValue, TString parName, TString objName); Check for null parameter to skip the NULL objects. void UnsetTemporaryBits(TGeoManager* geoMng); Unsetting bits that were changed in gGeoManager during export so that export; can be run more times with the same instance of gGeoManager. TGDMLWrite(). void StartGDMLWriting(TGeoManager* geomanager, const char* filename, TString option); static function -; options:; g - set by default - geant4 compatibility; f,n - if none of this two is set then naming convention is; with incremental suffix, if ""f"" then suffix is pointer; if ""n"" then there is no suffix, but uniqness of names; is not secured. void SetG4Compatibility(Bool_t G4Compatible). Xyz GetXYZangles(const Double_t* rotationMatrix); II. Utility methods. » Author: Anton Pytel 15/9/2011 » Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; » Last changed: root/gdml:$Id$ » Last generated: 2015-06-30 14:50; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGDMLWrite.html:20738,secur,secured,20738,root/html602/TGDMLWrite.html,https://root.cern,https://root.cern/root/html602/TGDMLWrite.html,1,['secur'],['secured']
Security,"MVA. ; A class to prune a decision tree using the Cost Complexity method. ; (see ""Classification and Regression Trees"" by Leo Breiman et al). Some definitions:. \( T_{max} \) - the initial, usually highly overtrained tree, that is to be pruned back; \( R(T) \) - quality index (Gini, misclassification rate, or other) of a tree \( T \); \( \sim T \) - set of terminal nodes in \( T \); \( T' \) - the pruned subtree of \( T_max \) that has the best quality index \( R(T') \); \( \alpha \) - the prune strength parameter in Cost Complexity pruning \( (R_{\alpha}(T) = R(T) + \alpha*|\sim T|) \). There are two running modes in CCPruner: (i) one may select a prune strength and prune back the tree \( T_{max}\) until the criterion: ; \[; \alpha < \frac{R(T) - R(t)}{|\sim T_t| - 1}; \]. is true for all nodes t in \( T \), or (ii) the algorithm finds the sequence of critical points \( \alpha_k < \alpha_{k+1} ... < \alpha_K \) such that \( T_K = root(T_{max}) \) and then selects the optimally-pruned subtree, defined to be the subtree with the best quality index for the validation sample. ; Definition at line 62 of file CostComplexityPruneTool.h. Public Member Functions;  CostComplexityPruneTool (SeparationBase *qualityIndex=nullptr);  the constructor for the cost complexity pruning ;  ; virtual ~CostComplexityPruneTool ();  the destructor for the cost complexity pruning ;  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const IPruneTool::EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE);  the routine that basically ""steers"" the pruning process. ;  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; void InitTreePruningMetaData (DecisionTreeNode *n);  initialise ""meta data"" for the pruning, like the ""costcomplexity"", the critical alpha, the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CostComplexityPruneTool.html:1375,validat,validation,1375,doc/master/classTMVA_1_1CostComplexityPruneTool.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CostComplexityPruneTool.html,1,['validat'],['validation']
Security,"MVA::Node*TMVA::BinaryTree::GetLeftDaughter(TMVA::Node* n); UInt_tTMVA::BinaryTree::GetNNodes() const; Int_tGetNNodesBeforePruning(); TMVA::Node*GetNode(ULong_t sequence, UInt_t depth); Double_tGetNodePurityLimit() const; Double_tGetPruneStrength() const; voidGetRandomisedVariables(Bool_t* useVariable, UInt_t* variableMap, UInt_t& nVars); TMVA::Node*TMVA::BinaryTree::GetRightDaughter(TMVA::Node* n); virtual TMVA::DecisionTreeNode*GetRoot() const; Double_tGetSumWeights(const TMVA::DecisionTree::EventConstList* validationSample) const; UInt_tTMVA::BinaryTree::GetTotalTreeDepth() const; Int_tGetTreeID(); vector<Double_t>GetVariableImportance(); Double_tGetVariableImportance(UInt_t ivar); virtual TClass*IsA() const; TMVA::DecisionTree&operator=(const TMVA::DecisionTree&); virtual voidTMVA::BinaryTree::Print(ostream& os) const; voidPruneNode(TMVA::DecisionTreeNode* node); voidPruneNodeInPlace(TMVA::DecisionTreeNode* node); Double_tPruneTree(const TMVA::DecisionTree::EventConstList* validationSample = NULL); virtual voidTMVA::BinaryTree::Read(istream& istr, UInt_t tmva_Version_Code = TMVA_VERSION_CODE); virtual voidTMVA::BinaryTree::ReadXML(void* node, UInt_t tmva_Version_Code = TMVA_VERSION_CODE); voidSetAnalysisType(TMVA::Types::EAnalysisType t); voidSetMinLinCorrForFisher(Double_t min); voidSetNodePurityLimit(Double_t p); voidSetNVars(Int_t n); voidSetParentTreeInNodes(TMVA::Node* n = NULL); voidSetPruneMethod(TMVA::DecisionTree::EPruneMethod m = kCostComplexityPruning); voidSetPruneStrength(Double_t p); voidTMVA::BinaryTree::SetRoot(TMVA::Node* r); voidTMVA::BinaryTree::SetTotalTreeDepth(Int_t depth); voidTMVA::BinaryTree::SetTotalTreeDepth(TMVA::Node* n = NULL); voidSetTreeID(Int_t treeID); voidSetUseExclusiveVars(Bool_t t = kTRUE); voidSetUseFisherCuts(Bool_t t = kTRUE); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Double_tTestPrunedTreeQuality(const TMVA::DecisionTreeNode* dt ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__DecisionTree.html:4485,validat,validationSample,4485,root/html534/TMVA__DecisionTree.html,https://root.cern,https://root.cern/root/html534/TMVA__DecisionTree.html,1,['validat'],['validationSample']
Security,"MVA::Node*TMVA::BinaryTree::GetLeftDaughter(TMVA::Node* n); UInt_tTMVA::BinaryTree::GetNNodes() const; Int_tGetNNodesBeforePruning(); TMVA::Node*GetNode(ULong_t sequence, UInt_t depth); Double_tGetNodePurityLimit() const; Double_tGetPruneStrength() const; voidGetRandomisedVariables(Bool_t* useVariable, UInt_t* variableMap, UInt_t& nVars); TMVA::Node*TMVA::BinaryTree::GetRightDaughter(TMVA::Node* n); virtual TMVA::DecisionTreeNode*GetRoot() const; Double_tGetSumWeights(const TMVA::DecisionTree::EventConstList* validationSample) const; UInt_tTMVA::BinaryTree::GetTotalTreeDepth() const; Int_tGetTreeID(); vector<Double_t>GetVariableImportance(); Double_tGetVariableImportance(UInt_t ivar); virtual TClass*IsA() const; TMVA::DecisionTree&operator=(const TMVA::DecisionTree&); virtual voidTMVA::BinaryTree::Print(ostream& os) const; voidPruneNode(TMVA::DecisionTreeNode* node); voidPruneNodeInPlace(TMVA::DecisionTreeNode* node); Double_tPruneTree(const TMVA::DecisionTree::EventConstList* validationSample = __null); virtual voidTMVA::BinaryTree::Read(istream& istr, UInt_t tmva_Version_Code = 262656); virtual voidTMVA::BinaryTree::ReadXML(void* node, UInt_t tmva_Version_Code = 262656); voidSetAnalysisType(TMVA::Types::EAnalysisType t); voidSetMinLinCorrForFisher(Double_t min); voidSetNodePurityLimit(Double_t p); voidSetNVars(Int_t n); voidSetParentTreeInNodes(TMVA::Node* n = __null); voidSetPruneMethod(TMVA::DecisionTree::EPruneMethod m = kCostComplexityPruning); voidSetPruneStrength(Double_t p); voidTMVA::BinaryTree::SetRoot(TMVA::Node* r); voidTMVA::BinaryTree::SetTotalTreeDepth(Int_t depth); voidTMVA::BinaryTree::SetTotalTreeDepth(TMVA::Node* n = __null); voidSetTreeID(Int_t treeID); voidSetUseExclusiveVars(Bool_t t = kTRUE); voidSetUseFisherCuts(Bool_t t = kTRUE); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Double_tTestPrunedTreeQuality(const TMVA::DecisionTreeNode* dt = __n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__DecisionTree.html:4605,validat,validationSample,4605,root/html602/TMVA__DecisionTree.html,https://root.cern,https://root.cern/root/html602/TMVA__DecisionTree.html,1,['validat'],['validationSample']
Security,"MVA::Node*TMVA::BinaryTree::GetLeftDaughter(TMVA::Node* n); UInt_tTMVA::BinaryTree::GetNNodes() const; Int_tGetNNodesBeforePruning(); TMVA::Node*GetNode(ULong_t sequence, UInt_t depth); Double_tGetNodePurityLimit() const; Double_tGetPruneStrength() const; voidGetRandomisedVariables(Bool_t* useVariable, UInt_t* variableMap, UInt_t& nVars); TMVA::Node*TMVA::BinaryTree::GetRightDaughter(TMVA::Node* n); virtual TMVA::DecisionTreeNode*GetRoot() const; Double_tGetSumWeights(const TMVA::DecisionTree::EventConstList* validationSample) const; UInt_tTMVA::BinaryTree::GetTotalTreeDepth() const; Int_tGetTreeID(); vector<Double_t>GetVariableImportance(); Double_tGetVariableImportance(UInt_t ivar); virtual TClass*IsA() const; TMVA::DecisionTree&operator=(const TMVA::DecisionTree&); virtual voidTMVA::BinaryTree::Print(ostream& os) const; voidPruneNode(TMVA::DecisionTreeNode* node); voidPruneNodeInPlace(TMVA::DecisionTreeNode* node); Double_tPruneTree(const TMVA::DecisionTree::EventConstList* validationSample = __null); virtual voidTMVA::BinaryTree::Read(istream& istr, UInt_t tmva_Version_Code = 262657); virtual voidTMVA::BinaryTree::ReadXML(void* node, UInt_t tmva_Version_Code = 262657); voidSetAnalysisType(TMVA::Types::EAnalysisType t); voidSetMinLinCorrForFisher(Double_t min); voidSetNodePurityLimit(Double_t p); voidSetNVars(Int_t n); voidSetParentTreeInNodes(TMVA::Node* n = __null); voidSetPruneMethod(TMVA::DecisionTree::EPruneMethod m = kCostComplexityPruning); voidSetPruneStrength(Double_t p); voidTMVA::BinaryTree::SetRoot(TMVA::Node* r); voidTMVA::BinaryTree::SetTotalTreeDepth(Int_t depth); voidTMVA::BinaryTree::SetTotalTreeDepth(TMVA::Node* n = __null); voidSetTreeID(Int_t treeID); voidSetUseExclusiveVars(Bool_t t = kTRUE); voidSetUseFisherCuts(Bool_t t = kTRUE); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Double_tTestPrunedTreeQuality(const TMVA::DecisionTreeNode* dt = __n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__DecisionTree.html:4613,validat,validationSample,4613,root/html604/TMVA__DecisionTree.html,https://root.cern,https://root.cern/root/html604/TMVA__DecisionTree.html,1,['validat'],['validationSample']
Security,"Manager & operator= (const TGLManager &)=delete;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTX11GLManager.html:3906,hash,hash,3906,doc/master/classTX11GLManager.html,https://root.cern,https://root.cern/doc/master/classTX11GLManager.html,1,['hash'],['hash']
Security,"Manager & operator= (const TGLManager &)=delete;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGOSXGLManager.html:2964,hash,hash,2964,doc/master/classTGOSXGLManager.html,https://root.cern,https://root.cern/doc/master/classTGOSXGLManager.html,2,['hash'],['hash']
Security,"Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TLinearGradient Class Reference. . Definition at line 97 of file TColorGradient.h. Public Member Functions;  TLinearGradient ();  ; const Point & GetEnd () const;  Get end. ;  ; const Point & GetStart () const;  Get start. ;  ; TClass * IsA () const override;  ; void SetStartEnd (const Point &p1, const Point &p2);  Set end and start. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  TColorGradient ();  ;  TColorGradient (Color_t newColor, UInt_t nPoints, const Double_t *points, const Color_t *colorIndices, ECoordinateMode mode=kObjectBoundingMode);  There is no way to validate parameters here, so it's up to user to pass correct arguments. ;  ;  TColorGradient (Color_t newColor, UInt_t nPoints, const Double_t *points, const Double_t *colors, ECoordinateMode mode=kObjectBoundingMode);  There is no way to validate parameters here, so it's up to user to pass correct arguments. ;  ;  Public Member Functions inherited from TColorGradient;  TColorGradient ();  ;  TColorGradient (Color_t newColor, UInt_t nPoints, const Double_t *points, const Color_t *colorIndices, ECoordinateMode mode=kObjectBoundingMode);  There is no way to validate parameters here, so it's up to user to pass correct arguments. ;  ;  TColorGradient (Color_t newColor, UInt_t nPoints, const Double_t *points, const Double_t *colors, ECoordinateMode mode=kObjectBoundingMode);  There is no way to validate parameters here, so it's up to user to pass correct arguments. ;  ; Double_t GetColorAlpha (UInt_t indx) const;  Return alpha parameter of selected color. ;  ; const Double_t * GetColorPositions () const;  Get color positions. ;  ; const Double_t * GetColors () const;  Get colors. ;  ; ECoordinateMode GetCoordinateMode () const;  Get coordinate mode. ;  ; SizeType_t GetNumberOfS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLinearGradient.html:1162,validat,validate,1162,doc/master/classTLinearGradient.html,https://root.cern,https://root.cern/doc/master/classTLinearGradient.html,1,['validat'],['validate']
Security,"Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; List of all members ; TUnfoldBinningXML Class Reference. ; XML interfate to binning schemes, for use with the unfolding algorithm TUnfoldDensity. ; Binning schemes are used to map analysis bins on a single histogram axis and back. The analysis bins may include unconnected bins (e.g nuisances for background normalisation) or various multidimensional histograms (signal bins, differential background normalisation bins, etc). ; If you use this software, please consider the following citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Please consult the documentation of the class TUnfoldBinning about how to use binning schemes. This class provides methods to read and write binning schemes in the XML language. There is also a method which writes out a dtd file for validation. Example XML code; The example below encodes two binning schemes, detector and generator. The detecor scheme consists of a single, three-dimensional distribution (pt,eta,discriminator). The generator scheme consists of two two-dimensional distributions, signal and background. ; <?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>; <!DOCTYPE TUnfoldBinning SYSTEM ""tunfoldbinning.dtd"">; <TUnfoldBinning>; <BinningNode name=""detector"" firstbin=""1"" factor=""1"">; <BinningNode name=""detectordistribution"" firstbin=""1"" factor=""1"">; ; <Bin repeat=""3"" width=""0.5"" >; <Bin repeat=""3"" width=""1"" >; <Bin width=""2"" >; <Bin width=""3"" >; <Bin location=""overflow"">; ; <Bin repeat=""2"" width=""0.5"" >; <Bin width=""1"" >; <Bin repeat=""4"" width=""0.5"" >; <Bin width=""1"" >; <Bin repeat=""2"" width=""0.5"" >; ; <Bin width=""0.15"" >; <Bin repeat=""2"" width=""0.35"" >; <Bin width=""0.15"" >; </Axis>; </Axis>; </Axis>; </BinningNode>; </BinningNode>; <BinningNode name=""generator"" firstbin=""1"" fac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldBinningXML.html:1138,validat,validation,1138,doc/master/classTUnfoldBinningXML.html,https://root.cern,https://root.cern/doc/master/classTUnfoldBinningXML.html,1,['validat'],['validation']
Security,"Math::GlobalCoordinateSystemTag>::Scalar& a, ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar& b, ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar& c) const. get internal data into 3 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c); }. void GetCoordinates(ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar* dest) const. get internal data into a C-style array of 3 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. bool operator==(const ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::GlobalCoordinateSystemTag>& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::GlobalCoordinateSystemTag>& rhs) const. Scalar X() const; ------ Individual element access, in various coordinate systems ------. Cartesian X, converting if necessary from internal coordinate system. { return fCoordinates.X(); }. Scalar Y() const. Cartesian Y, converting if necessary from internal coordinate system. { return fCoordinates.Y(); }. Scalar Z() const. Cartesian Z, converting if necessary from internal coordinate system. { return fCoordinates.Z(); }. Scalar R() const. Polar R, converting if necessary from internal coordinate system. { return fCoordinates.R(); }. Scalar Theta() const. Polar theta, converting if necessary from internal coordinate system. { return fCoordinates.Theta(); }. Scalar Phi() const. Polar phi, converting if necessary from internal coordinate system. { return fCoordinates.Phi(); }. Scalar Eta() const. Polar eta, converting if necessary from internal coordinate system. { return fCoordinates.Eta(); }. Scalar Rho() const. Cylindrical transverse component rho. { return fCoordinates.Rho(); }. Scalar Mag2() const; ----- Other fundamental pro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1GlobalCoordinateSystemTag_.html:12492,access,access,12492,root/html526/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1GlobalCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1GlobalCoordinateSystemTag_.html,5,['access'],['access']
Security,"Math::PtEtaPhiE4D<Double32_t> >::Scalar* dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. LorentzVector<CoordSystem>& SetCoordinates(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<Double32_t> >::Scalar* src). Set internal data based on an array of 4 Scalar numbers. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<Double32_t> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<Double32_t> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<Double32_t> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<Double32_t> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<Double32_t> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<Double32_t> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html:13060,access,access,13060,root/html534/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,2,['access'],"['access', 'accessors']"
Security,"Math::PtEtaPhiM4D<Double32_t> >::Scalar* dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. LorentzVector<CoordSystem>& SetCoordinates(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<Double32_t> >::Scalar* src). Set internal data based on an array of 4 Scalar numbers. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<Double32_t> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<Double32_t> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<Double32_t> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<Double32_t> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<Double32_t> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<Double32_t> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html:13060,access,access,13060,root/html534/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,2,['access'],"['access', 'accessors']"
Security,"Matrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >(const double& rhs); ROOT::Math::SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >SMatrix<double,2,2,ROOT::Math::MatRepStd<double,2,2> >(const ROOT::Math::SVector<double,2*(2+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,2*(2+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<double,2,2>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:5331,access,access,5331,root/html526/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,2,['access'],"['access', 'accessing']"
Security,"Matrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >(const double& rhs); ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >(const ROOT::Math::SVector<double,3*(3+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3*(3+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<double,3,3>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html:5331,access,access,5331,root/html526/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_double_3_3_-p1MatRepStd_double_3_3___.html,2,['access'],"['access', 'accessing']"
Security,"Matrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >(const double& rhs); ROOT::Math::SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >SMatrix<double,3,4,ROOT::Math::MatRepStd<double,3,4> >(const ROOT::Math::SVector<double,3*(4+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3*(4+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<double,3,4>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html:5221,access,access,5221,root/html526/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_double_3_4_-p1MatRepStd_double_3_4___.html,2,['access'],"['access', 'accessing']"
Security,"Matrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >(const double& rhs); ROOT::Math::SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >SMatrix<double,4,3,ROOT::Math::MatRepStd<double,4,3> >(const ROOT::Math::SVector<double,4*(3+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4*(3+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<double,4,3>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:5221,access,access,5221,root/html526/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,2,['access'],"['access', 'accessing']"
Security,"Matrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >(const double& rhs); ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >(const ROOT::Math::SVector<double,4*(4+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4*(4+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<double,4,4>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html:5331,access,access,5331,root/html526/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_double_4_4_-p1MatRepStd_double_4_4___.html,2,['access'],"['access', 'accessing']"
Security,"Matrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >(const double& rhs); ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >(const ROOT::Math::SVector<double,5*(5+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,5*(5+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<double,5,5>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html:5331,access,access,5331,root/html526/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_double_5_5_-p1MatRepStd_double_5_5___.html,2,['access'],"['access', 'accessing']"
Security,"Matrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >(const double& rhs); ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >(const ROOT::Math::SVector<double,6*(6+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,6*(6+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<double,6,6>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:5331,access,access,5331,root/html526/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,2,['access'],"['access', 'accessing']"
Security,"Matrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >(const double& rhs); ROOT::Math::SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >SMatrix<double,7,7,ROOT::Math::MatRepStd<double,7,7> >(const ROOT::Math::SVector<double,7*(7+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,7*(7+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<double,7,7>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html:5331,access,access,5331,root/html526/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_double_7_7_-p1MatRepStd_double_7_7___.html,2,['access'],"['access', 'accessing']"
Security,"Matrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >(const double& rhs); ROOT::Math::SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >SMatrix<double,9,7,ROOT::Math::MatRepStd<double,9,7> >(const ROOT::Math::SVector<double,9*(7+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,9*(7+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<double,9,7>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html:5252,access,access,5252,root/html526/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_double_9_7_-p1MatRepStd_double_9_7___.html,2,['access'],"['access', 'accessing']"
Security,"MatrixTSym<Element> ResizeTo(Int_t nrows, Int_t ncols, Int_t = -1); Set size of the matrix to nrows x ncols; New dynamic elements are created, the overlapping part of the old ones are; copied to the new structures, then the old elements are deleted. TMatrixTBase<Element> &TMatrixTSym<Element> ResizeTo(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Int_t = -1); Set size of the matrix to [row_lwb:row_upb] x [col_lwb:col_upb]; New dynamic elemenst are created, the overlapping part of the old ones are; copied to the new structures, then the old elements are deleted. Double_t TMatrixTSym<Element> Determinant() const. void TMatrixTSym<Element> Determinant(Double_t& d1, Double_t& d2) const. TMatrixTSym<Element> &TMatrixTSym<Element> Invert(Double_t* det = 0); Invert the matrix and calculate its determinant; Notice that the LU decomposition is used instead of Bunch-Kaufman; Bunch-Kaufman guarantees a symmetric inverted matrix but is slower than LU .; The user can access Bunch-Kaufman through the TDecompBK class . TMatrixTSym<Element> &TMatrixTSym<Element> InvertFast(Double_t* det = 0); Invert the matrix and calculate its determinant. TMatrixTSym<Element> &TMatrixTSym<Element> Transpose(const TMatrixTSym<double>& source); Transpose a matrix. TMatrixTSym<Element> &TMatrixTSym<Element> Rank1Update(const TVectorT<double>& v, double alpha = 1.); Perform a rank 1 operation on the matrix:; A += alpha * v * v^T. TMatrixTSym<Element> &TMatrixTSym<Element> Similarity(const TMatrixT<Element> &b); Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb); This is a similarity transform when B is orthogonal . It is more; efficient than applying the actual multiplication because this; routine realizes that the final matrix is symmetric . TMatrixTSym<Element> &TMatrixTSym<Element> Similarity(const TMatrixTSym<Element> &b); Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb); This is a similarity transform when B is orthogonal . It is more; efficient",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMatrixTSym_double_.html:18395,access,access,18395,root/html602/TMatrixTSym_double_.html,https://root.cern,https://root.cern/root/html602/TMatrixTSym_double_.html,2,['access'],['access']
Security,"MatrixTSym<Element> ResizeTo(Int_t nrows, Int_t ncols, Int_t = -1); Set size of the matrix to nrows x ncols; New dynamic elements are created, the overlapping part of the old ones are; copied to the new structures, then the old elements are deleted. TMatrixTBase<Element> &TMatrixTSym<Element> ResizeTo(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Int_t = -1); Set size of the matrix to [row_lwb:row_upb] x [col_lwb:col_upb]; New dynamic elemenst are created, the overlapping part of the old ones are; copied to the new structures, then the old elements are deleted. Double_t TMatrixTSym<Element> Determinant() const. void TMatrixTSym<Element> Determinant(Double_t& d1, Double_t& d2) const. TMatrixTSym<Element> &TMatrixTSym<Element> Invert(Double_t* det = 0); Invert the matrix and calculate its determinant; Notice that the LU decomposition is used instead of Bunch-Kaufman; Bunch-Kaufman guarantees a symmetric inverted matrix but is slower than LU .; The user can access Bunch-Kaufman through the TDecompBK class . TMatrixTSym<Element> &TMatrixTSym<Element> InvertFast(Double_t* det = 0); Invert the matrix and calculate its determinant. TMatrixTSym<Element> &TMatrixTSym<Element> Transpose(const TMatrixTSym<double>& source); Transpose a matrix. TMatrixTSym<Element> &TMatrixTSym<Element> Rank1Update(const TVectorT<double>& v, double alpha = 1.0); Perform a rank 1 operation on the matrix:; A += alpha * v * v^T. TMatrixTSym<Element> &TMatrixTSym<Element> Similarity(const TMatrixT<Element> &b); Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb); This is a similarity transform when B is orthogonal . It is more; efficient than applying the actual multiplication because this; routine realizes that the final matrix is symmetric . TMatrixTSym<Element> &TMatrixTSym<Element> Similarity(const TMatrixTSym<Element> &b); Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb); This is a similarity transform when B is orthogonal . It is more; efficien",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixTSym_double_.html:17403,access,access,17403,root/html528/TMatrixTSym_double_.html,https://root.cern,https://root.cern/root/html528/TMatrixTSym_double_.html,4,['access'],['access']
Security,"MatrixTSym<Element> ResizeTo(Int_t nrows, Int_t ncols, Int_t = -1); Set size of the matrix to nrows x ncols; New dynamic elements are created, the overlapping part of the old ones are; copied to the new structures, then the old elements are deleted. TMatrixTBase<Element> &TMatrixTSym<Element> ResizeTo(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Int_t = -1); Set size of the matrix to [row_lwb:row_upb] x [col_lwb:col_upb]; New dynamic elemenst are created, the overlapping part of the old ones are; copied to the new structures, then the old elements are deleted. Double_t TMatrixTSym<Element> Determinant() const. void TMatrixTSym<Element> Determinant(Double_t& d1, Double_t& d2) const. TMatrixTSym<Element> &TMatrixTSym<Element> Invert(Double_t* det = 0); Invert the matrix and calculate its determinant; Notice that the LU decomposition is used instead of Bunch-Kaufman; Bunch-Kaufman guarantees a symmetric inverted matrix but is slower than LU .; The user can access Bunch-Kaufman through the TDecompBK class . TMatrixTSym<Element> &TMatrixTSym<Element> InvertFast(Double_t* det = 0); Invert the matrix and calculate its determinant. TMatrixTSym<Element> &TMatrixTSym<Element> Transpose(const TMatrixTSym<float>& source); Transpose a matrix. TMatrixTSym<Element> &TMatrixTSym<Element> Rank1Update(const TVectorT<float>& v, float alpha = 1.); Perform a rank 1 operation on the matrix:; A += alpha * v * v^T. TMatrixTSym<Element> &TMatrixTSym<Element> Similarity(const TMatrixT<Element> &b); Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb); This is a similarity transform when B is orthogonal . It is more; efficient than applying the actual multiplication because this; routine realizes that the final matrix is symmetric . TMatrixTSym<Element> &TMatrixTSym<Element> Similarity(const TMatrixTSym<Element> &b); Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb); This is a similarity transform when B is orthogonal . It is more; efficient th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMatrixTSym_float_.html:18039,access,access,18039,root/html602/TMatrixTSym_float_.html,https://root.cern,https://root.cern/root/html602/TMatrixTSym_float_.html,2,['access'],['access']
Security,"MatrixTSym<Element> ResizeTo(Int_t nrows, Int_t ncols, Int_t = -1); Set size of the matrix to nrows x ncols; New dynamic elements are created, the overlapping part of the old ones are; copied to the new structures, then the old elements are deleted. TMatrixTBase<Element> &TMatrixTSym<Element> ResizeTo(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Int_t = -1); Set size of the matrix to [row_lwb:row_upb] x [col_lwb:col_upb]; New dynamic elemenst are created, the overlapping part of the old ones are; copied to the new structures, then the old elements are deleted. Double_t TMatrixTSym<Element> Determinant() const. void TMatrixTSym<Element> Determinant(Double_t& d1, Double_t& d2) const. TMatrixTSym<Element> &TMatrixTSym<Element> Invert(Double_t* det = 0); Invert the matrix and calculate its determinant; Notice that the LU decomposition is used instead of Bunch-Kaufman; Bunch-Kaufman guarantees a symmetric inverted matrix but is slower than LU .; The user can access Bunch-Kaufman through the TDecompBK class . TMatrixTSym<Element> &TMatrixTSym<Element> InvertFast(Double_t* det = 0); Invert the matrix and calculate its determinant. TMatrixTSym<Element> &TMatrixTSym<Element> Transpose(const TMatrixTSym<float>& source); Transpose a matrix. TMatrixTSym<Element> &TMatrixTSym<Element> Rank1Update(const TVectorT<float>& v, float alpha = 1.0); Perform a rank 1 operation on the matrix:; A += alpha * v * v^T. TMatrixTSym<Element> &TMatrixTSym<Element> Similarity(const TMatrixT<Element> &b); Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb); This is a similarity transform when B is orthogonal . It is more; efficient than applying the actual multiplication because this; routine realizes that the final matrix is symmetric . TMatrixTSym<Element> &TMatrixTSym<Element> Similarity(const TMatrixTSym<Element> &b); Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb); This is a similarity transform when B is orthogonal . It is more; efficient t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixTSym_float_.html:17247,access,access,17247,root/html528/TMatrixTSym_float_.html,https://root.cern,https://root.cern/root/html528/TMatrixTSym_float_.html,4,['access'],['access']
Security,"Minimizer.h. ◆ Tolerance(). double ROOT::Math::Minimizer::Tolerance ; (; ); const. inline . absolute tolerance ; Definition at line 300 of file Minimizer.h. ◆ VariableIndex(). int ROOT::Math::Minimizer::VariableIndex ; (; const std::string & ; name); const. virtual . get index of variable given a variable given a name return -1 if variable is not found ; Reimplemented in ROOT::Math::BasicMinimizer, TMinuitMinimizer, and ROOT::Minuit2::Minuit2Minimizer.; Definition at line 232 of file Minimizer.cxx. ◆ VariableName(). std::string ROOT::Math::Minimizer::VariableName ; (; unsigned int ; ivar); const. virtual . get name of variables (override if minimizer support storing of variable names) return an empty string if variable is not found ; Reimplemented in ROOT::Math::BasicMinimizer, TMinuitMinimizer, and ROOT::Minuit2::Minuit2Minimizer.; Definition at line 224 of file Minimizer.cxx. ◆ X(). virtual const double * ROOT::Math::Minimizer::X ; (; ); const. pure virtual . return pointer to X values at the minimum ; Implemented in TFumiliMinimizer, ROOT::Math::GeneticMinimizer, ROOT::Math::BasicMinimizer, TLinearMinimizer, TMinuitMinimizer, and ROOT::Minuit2::Minuit2Minimizer. Member Data Documentation. ◆ fOptions. MinimizerOptions ROOT::Math::Minimizer::fOptions. protected . minimizer options ; Definition at line 370 of file Minimizer.h. ◆ fStatus. int ROOT::Math::Minimizer::fStatus = -1. protected . status of minimizer ; Definition at line 371 of file Minimizer.h. ◆ fValidError. bool ROOT::Math::Minimizer::fValidError = false. protected . flag to control if errors have been validated (Hesse has been run in case of Minuit) ; Definition at line 369 of file Minimizer.h. Libraries for ROOT::Math::Minimizer:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/Minimizer.h; math/mathcore/src/Minimizer.cxx. ROOTMathMinimizer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html:36932,validat,validated,36932,doc/master/classROOT_1_1Math_1_1Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html,1,['validat'],['validated']
Security,"Missing() Specialized Filter. If the value of the input column is missing, keep the entry, otherwise discard it. . Range() Filter rows based on entry number (single-thread only). . Redefine() Overwrite the value and/or type of an existing column. See Define() for more information. . RedefineSlot() Overwrite the value and/or type of an existing column. See DefineSlot() for more information. . RedefineSlotEntry() Overwrite the value and/or type of an existing column. See DefineSlotEntry() for more information. . Vary() Register systematic variations for an existing column. Varied results are then extracted via VariationsFor(). . Actions; Actions aggregate data into a result. Each one is described in more detail in the reference guide.; In the following, whenever we say an action ""returns"" something, we always mean it returns a smart pointer to it. Actions only act on events that pass all preceding filters.; Lazy actions only trigger the event loop when one of the results is accessed for the first time, making it easy to produce many different results in one event loop. Instant actions trigger the event loop instantly. Lazy action Description . Aggregate() Execute a user-defined accumulation operation on the processed column values. . Book() Book execution of a custom action using a user-defined helper object. . Cache() Cache column values in memory. Custom columns can be cached as well, filtered entries are not cached. Users can specify which columns to save (default is all). . Count() Return the number of events processed. Useful e.g. to get a quick count of the number of events passing a Filter. . Display() Provides a printable representation of the dataset contents. The method returns a ROOT::RDF::RDisplay() instance which can print a tabular representation of the data or return it as a string. . Fill() Fill a user-defined object with the values of the specified columns, as if by calling Obj.Fill(col1, col2, ...). . Graph() Fills a TGraph with the two columns provi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDataFrame.html:5211,access,accessed,5211,doc/master/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html,1,['access'],['accessed']
Security,"MnUserParameterState(const MnUserParameterState& state); {}. MnUserParameterState& operator=(const ROOT::Minuit2::MnUserParameterState& state). const MnGlobalCorrelationCoeff& GlobalCC() const; {return fGlobalCC;}. const std::vector<double>& IntParameters() const; Minuit internal representation. {return fIntParameters;}. const MnUserCovariance& IntCovariance() const; {return fIntCovariance;}. const MnUserTransformation& Trafo() const; transformation internal <-> external. {return fParameters.Trafo();}. bool IsValid() const; {return fValid;}. bool HasCovariance() const; {return fCovarianceValid;}. bool HasGlobalCC() const; {return fGCCValid;}. double Fval() const; {return fFVal;}. double Edm() const; {return fEDM;}. unsigned int NFcn() const; {return fNFcn;}. const std::vector<ROOT::Minuit2::MinuitParameter>& MinuitParameters() const; facade: forward interface of MnUserParameters and MnUserTransformation ; access to parameters (row-wise). std::vector<double> Params() const; access to parameters and errors in column-wise representation. std::vector<double> Errors() const. void Add(const string& name, double val, double err); add free Parameter. void Add(const string& name, double val, double err, double , double ); add limited Parameter. void Add(const string& , double ); add const Parameter. void Fix(unsigned int ); interaction via external number of Parameter. void Release(unsigned int ). void SetValue(unsigned int , double ). void SetError(unsigned int , double ). void SetLimits(unsigned int , double , double ). void SetUpperLimit(unsigned int , double ). void SetLowerLimit(unsigned int , double ). void RemoveLimits(unsigned int ). double Value(unsigned int ) const. double Error(unsigned int ) const. void Fix(const string& ); interaction via Name of Parameter. void Release(const string& ). void SetValue(const string& , double ). void SetError(const string& , double ). void SetLimits(const string& , double , double ). void SetUpperLimit(const string& , double ). void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Minuit2__MnUserParameterState.html:5664,access,access,5664,root/html528/ROOT__Minuit2__MnUserParameterState.html,https://root.cern,https://root.cern/root/html528/ROOT__Minuit2__MnUserParameterState.html,1,['access'],['access']
Security,"MnUserParameterState(const MnUserParameterState& state); {}. MnUserParameterState& operator=(const ROOT::Minuit2::MnUserParameterState& state). const MnGlobalCorrelationCoeff& GlobalCC() const; {return fGlobalCC;}. const std::vector<double>& IntParameters() const; Minuit internal representation. {return fIntParameters;}. const MnUserCovariance& IntCovariance() const; {return fIntCovariance;}. const MnUserTransformation& Trafo() const; transformation internal <-> external. {return fParameters.Trafo();}. bool IsValid() const; {return fValid;}. bool HasCovariance() const; {return fCovarianceValid;}. bool HasGlobalCC() const; {return fGCCValid;}. double Fval() const; {return fFVal;}. double Edm() const; {return fEDM;}. unsigned int NFcn() const; {return fNFcn;}. const std::vector<ROOT::Minuit2::MinuitParameter>& MinuitParameters() const; facade: forward interface of MnUserParameters and MnUserTransformation ; access to parameters (row-wise). std::vector<double> Params() const; access to parameters and errors in column-wise representation. std::vector<double> Errors() const. void Add(const string& name, double val, double err); add free Parameter. void Add(const string& name, double val, double err, double , double ); add limited Parameter. void Add(const string& , double ); add const Parameter. void Fix(unsigned int); interaction via external number of Parameter. void Release(unsigned int). void SetValue(unsigned int, double). void SetError(unsigned int, double). void SetLimits(unsigned int, double, double). void SetUpperLimit(unsigned int, double). void SetLowerLimit(unsigned int, double). void RemoveLimits(unsigned int). double Value(unsigned int). double Error(unsigned int). void Fix(const std::string &); interaction via Name of Parameter. void Release(const std::string &). void SetValue(const std::string &, double). void SetError(const std::string &, double). void SetLimits(const std::string &, double, double). void SetUpperLimit(const std::string &, double). void Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__MnUserParameterState.html:5610,access,access,5610,root/html526/ROOT__Minuit2__MnUserParameterState.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__MnUserParameterState.html,1,['access'],['access']
Security,"Move to the bottom-right corner of container. ;  ; virtual TGFrameElement * FindFrame (Int_t x, Int_t y, Bool_t exclude=kTRUE);  Find frame located int container at position x,y. ;  ; virtual TGFrame * FindFrameByName (const char *name);  Find frame by name. ;  ; virtual void * FindItem (const TString &name, Bool_t direction=kTRUE, Bool_t caseSensitive=kTRUE, Bool_t subString=kFALSE);  ; TGCanvas * GetCanvas () const;  ; virtual TGHScrollBar * GetHScrollbar () const;  returns pointer to hor. scroll bar ;  ; virtual TGFrame * GetLastActive () const;  ; const TGWindow * GetMessageWindow () const;  ; virtual const TGFrame * GetNextSelected (void **current);  Return the next selected item. ;  ; const TGPicture * GetObjPicture (TGFrame *f);  Retrieve icons associated with class ""name"". ;  ; virtual TGDimension GetPageDimension () const;  Returns page dimension. ;  ; virtual TGPosition GetPagePosition () const;  Returns page position. ;  ; Bool_t HandleDNDFinished () override;  ; Bool_t HandleExpose (Event_t *event) override;  Handle expose events. Do not use double buffer. ;  ; Bool_t HandleKey (Event_t *event) override;  The key press event handler converts a key press to some line editor action. ;  ; virtual void Home (Bool_t select=kFALSE);  Move to upper-left corner of container. ;  ; virtual void InvertSelection ();  Invert the selection, all selected items become unselected and vice versa. ;  ; virtual void KeyPressed (TGFrame *, UInt_t keysym, UInt_t mask);  Signal emitted when keyboard key pressed. ;  ; virtual void LineDown (Bool_t select=kFALSE);  Move one line down. ;  ; virtual void LineLeft (Bool_t select=kFALSE);  Move current position one column left. ;  ; virtual void LineRight (Bool_t select=kFALSE);  Move current position one column right. ;  ; virtual void LineUp (Bool_t select=kFALSE);  Make current position first line in window by scrolling up. ;  ; virtual Int_t NumItems () const;  ; virtual Int_t NumSelected () const;  ; virtual void OnMouseOver (T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLBContainer.html:5570,expose,expose,5570,doc/master/classTGLBContainer.html,https://root.cern,https://root.cern/doc/master/classTGLBContainer.html,1,['expose'],['expose']
Security,"MustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. RooLinkedList**_arr! Array of linked lists storing elements in each slot; Int_t_entriesNumber of entries stored; RooHashTable::HashMethod_hashMethodHashing method; Int_t_sizeTotal number of slots; Int_t_usedSlotsNumber of used slots. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooHashTable(Int_t initSize = 17, RooHashTable::HashMethod hashMethod = Name); Construct a hash table with given capacity and hash method. RooHashTable(const RooHashTable& other); Copy constructor. void add(TObject* arg, TObject* hashArg = 0); Add given object to table. If hashArg is given, hash will be calculation; on that rather than on 'arg'. Bool_t remove(TObject* arg, TObject* hashArg = 0); Remove given object from table. If hashArg is given, hash will be calculation; on that rather than on 'arg'. Double_t avgCollisions() const; Calculate the average number of collisions (table slots with >1 filled entry). Bool_t replace(const TObject* oldArg, const TObject* newArg, const TObject* oldHashArg = 0); Replace oldArg with newArg in the table. If oldHashArg is given, use that to calculate; the hash associated with oldArg. TObject* find(const char* name) const; Return the object with given name from the table. RooAbsArg* findArg(const RooAbsArg* arg) const. TObject* find(const TObject* arg) const; Return object with the given pointer from the table. RooLinkedListElem* findLinkTo(const TObject* arg) const; Return RooLinkedList element link to object 'hashArg'. RooSetPair* findSetPair(const RooArgSet* set1, const RooArgSet* set2) const; Return RooSetPair with given pointers in table. ~RooHash",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooHashTable.html:7189,hash,hashArg,7189,root/html602/RooHashTable.html,https://root.cern,https://root.cern/root/html602/RooHashTable.html,4,['hash'],"['hash', 'hashArg']"
Security,"MySQLResult;  CTMySQLRow;  CTMySQLServer;  ►CTMySQLStatement;  CTParamData;  CTNamedBase class for all named ROOT classes ;  CTNDArray;  CTNDArrayRef;  CTNDArrayT;  CTNetFile;  CTNetFileStager;  CTNetSystem;  CTNetXNGFile;  CTNetXNGFileStager;  CTNetXNGSystem;  CTNeuron;  CTNewChainDlg;  CTNewQueryDlg;  CTNodeTNode description ;  CTNodeDivDescription of parameters to divide a 3-D geometry object ;  CTNonCopyable;  CTNonSplitBrowsableAllows a TBrowser to browse non-split branches as if they were split ;  CTNtupleA simple TTree restricted to a list of float variables only ;  CTNtupleDA simple TTree restricted to a list of double variables only ;  CTObjArrayAn array of TObjects ;  CTObjArrayIterIterator of object array ;  CTObjectMother of all ROOT objects ;  CTObjectRefSpy;  CTObjectSet;  CTObjectSpyMonitors objects for deletion and reflects the deletion by reverting the internal pointer to zero ;  CTObjectTableThis class registers all instances of TObject and its derived classes in a hash table ;  CTObjLinkWrapper around a TObject so it can be stored in a TList ;  CTObjOptLink;  CTObjStringCollectable string class ;  CTOCCToStep;  CTODBCResult;  CTODBCRow;  CTODBCServer;  ►CTODBCStatement;  CODBCBufferRec_t;  CToolBarData_t;  CTOptionListItem;  CTOracleResult;  CTOracleRow;  CTOracleServer;  ►CTOracleStatement;  CTBufferRec;  CTOrdCollectionOrdered collection ;  CTOrdCollectionIterIterator of ordered collection ;  CTOutputListSelectorDataMap;  CTPackageDescription;  CTPacketizer;  CTPacketizerAdaptive;  CTPacketizerFile;  CTPacketizerMulti;  CTPacketizerUnit;  CTPadThe most important graphics class in the ROOT system ;  CTPadEditor;  CTPadPainterImplement TVirtualPadPainter which abstracts painting operations ;  CTPainter3dAlgorithmsThe Legos and Surfaces painter class ;  CTPairClass used by TMap to store (key,value) pairs ;  CTPaletteAxisThe palette painting class ;  CTPaletteEditorEdit the palette via a GUI ;  CTPARAA parallelepiped ;  CTParallelCoordParallel Coordi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:144785,hash,hash,144785,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,1,['hash'],['hash']
Security,"MySQLResult;  CTMySQLRow;  CTMySQLServer;  ►CTMySQLStatement;  CTParamData;  CTNamedBase class for all named ROOT classes ;  CTNDArray;  CTNDArrayRef;  CTNDArrayT;  CTNetFile;  CTNetFileStager;  CTNetSystem;  CTNetXNGFile;  CTNetXNGFileStager;  CTNetXNGSystem;  CTNeuron;  CTNewChainDlg;  CTNewQueryDlg;  CTNodeTNode description ;  CTNodeDivDescription of parameters to divide a 3-D geometry object ;  CTNonCopyable;  CTNonSplitBrowsableAllows a TBrowser to browse non-split branches as if they were split ;  CTNtupleA simple TTree restricted to a list of float variables only ;  CTNtupleDA simple TTree restricted to a list of double variables only ;  CTObjArrayAn array of TObjects ;  CTObjArrayIterIterator of object array ;  CTObjectMother of all ROOT objects ;  CTObjectRefSpy;  CTObjectSet;  CTObjectSpyMonitors objects for deletion and reflects the deletion by reverting the internal pointer to zero ;  CTObjectTableThis class registers all instances of TObject and its derived classes in a hash table ;  CTObjLinkWrapper around a TObject so it can be stored in a TList ;  CTObjOptLink;  CTObjStringCollectable string class ;  CTOCCToStep;  CTODBCResult;  CTODBCRow;  CTODBCServer;  ►CTODBCStatement;  CODBCBufferRec_t;  CToolBarData_t;  CTOptionListItem;  CTOracleResult;  CTOracleRow;  CTOracleServer;  ►CTOracleStatement;  CTBufferRec;  CTOrdCollectionOrdered collection ;  CTOrdCollectionIterIterator of ordered collection ;  CTOutputListSelectorDataMapSet the selector's data members to the corresponding elements of the output list ;  CTPackageDescription;  CTPacketizerThis class generates packets to be processed on PROOF worker servers ;  CTPacketizerAdaptiveThis packetizer is based on TPacketizer but uses different load-balancing algorithms and data structures ;  CTPacketizerFileThis packetizer generates packets which contain a single file path to be used in process ;  CTPacketizerMultiThis class allows to do multiple runs in the same query; each run can be a, for example, diff",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:172339,hash,hash,172339,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,2,['hash'],['hash']
Security,MySQLResult;  CTMySQLRow;  CTMySQLServer;  ►CTMySQLStatement;  CTParamData;  CTNamedBase class for all named ROOT classes ;  CTNDArray;  CTNDArrayRef;  CTNDArrayT;  CTNetFile;  CTNetFileStager;  CTNetSystem;  CTNetXNGFile;  CTNetXNGFileStager;  CTNetXNGSystem;  CTNeuron;  CTNewChainDlg;  CTNewQueryDlg;  CTNodeTNode description ;  CTNodeDivDescription of parameters to divide a 3-D geometry object ;  CTNonCopyable;  CTNonSplitBrowsableAllows a TBrowser to browse non-split branches as if they were split ;  CTNtupleA simple TTree restricted to a list of float variables only ;  CTNtupleDA simple TTree restricted to a list of double variables only ;  CTObjArrayAn array of TObjects ;  CTObjArrayIterIterator of object array ;  CTObjectMother of all ROOT objects ;  CTObjectRefSpy;  CTObjectSet;  CTObjectSpyMonitors objects for deletion and reflects the deletion by reverting the internal pointer to zero ;  CTObjectTableThis class registers all instances of TObject and its derived classes in a hash table ;  CTObjLinkWrapper around a TObject so it can be stored in a TList ;  CTObjOptLink;  CTObjStringCollectable string class ;  CTOCCToStepThis class contains implementation of writing OpenCascade's geometry shapes to the STEP file reproducing the original ROOT geometry tree ;  CTODBCResult;  CTODBCRow;  CTODBCServer;  ►CTODBCStatement;  CODBCBufferRec_t;  CToolBarData_t;  CTOptionListItem;  CTOracleResult;  CTOracleRow;  CTOracleServer;  ►CTOracleStatement;  CTBufferRec;  CTOrdCollectionOrdered collection ;  CTOrdCollectionIterIterator of ordered collection ;  CTOutputListSelectorDataMapSet the selector's data members to the corresponding elements of the output list ;  CTPackageDescription;  CTPacketizerThis class generates packets to be processed on PROOF worker servers ;  CTPacketizerAdaptiveThis packetizer is based on TPacketizer but uses different load-balancing algorithms and data structures ;  CTPacketizerFileThis packetizer generates packets which contain a single file pat,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:190156,hash,hash,190156,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,2,['hash'],['hash']
Security,NBase.h. ◆ fEstimator. EEstimator TMVA::MethodANNBase::fEstimator. protected . Definition at line 171 of file MethodANNBase.h. ◆ fEstimatorHistTest. TH1F* TMVA::MethodANNBase::fEstimatorHistTest. protected . Definition at line 176 of file MethodANNBase.h. ◆ fEstimatorHistTrain. TH1F* TMVA::MethodANNBase::fEstimatorHistTrain. protected . Definition at line 175 of file MethodANNBase.h. ◆ fEstimatorS. TString TMVA::MethodANNBase::fEstimatorS. protected . Definition at line 172 of file MethodANNBase.h. ◆ fgDEBUG. const Bool_t TMVA::MethodANNBase::fgDEBUG = kTRUE. staticprivate . debug flag ; Definition at line 224 of file MethodANNBase.h. ◆ fIdentity. TActivation* TMVA::MethodANNBase::fIdentity. protected . Definition at line 165 of file MethodANNBase.h. ◆ fInputCalculator. TNeuronInput* TMVA::MethodANNBase::fInputCalculator. protected . Definition at line 167 of file MethodANNBase.h. ◆ fInputLayer. TObjArray* TMVA::MethodANNBase::fInputLayer. private . cache this for fast access ; Definition at line 219 of file MethodANNBase.h. ◆ fInvHessian. TMatrixD TMVA::MethodANNBase::fInvHessian. protected . zjh ; Definition at line 186 of file MethodANNBase.h. ◆ fLayerSpec. TString TMVA::MethodANNBase::fLayerSpec. private . layout specification option ; Definition at line 221 of file MethodANNBase.h. ◆ fNcycles. Int_t TMVA::MethodANNBase::fNcycles. protected . number of epochs to train ; Definition at line 192 of file MethodANNBase.h. ◆ fNetwork. TObjArray* TMVA::MethodANNBase::fNetwork. Definition at line 139 of file MethodANNBase.h. ◆ fNeuronInputType. TString TMVA::MethodANNBase::fNeuronInputType. protected . name of neuron input calculator class ; Definition at line 195 of file MethodANNBase.h. ◆ fNeuronType. TString TMVA::MethodANNBase::fNeuronType. protected . name of neuron activation function class ; Definition at line 194 of file MethodANNBase.h. ◆ fOutput. TActivation* TMVA::MethodANNBase::fOutput. protected . Definition at line 164 of file MethodANNBase.h. ◆ fOutputNeur,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:44830,access,access,44830,doc/master/classTMVA_1_1MethodANNBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html,1,['access'],['access']
Security,"NOTE: do not confuse with image histogram! This function interprets; the array as a histogram. It does not compute the histogram of pixel; values of an image! Here ""pixels"" are interpreted as number of entries. TVectorD* GetArrayRow(UInt_t row); Get a row from the image HDU when it's a 2D array. TVectorD* GetArrayColumn(UInt_t col); Get a column from the image HDU when it's a 2D array. Int_t GetColumnNumber(const char* colname); Get column number given its name. TObjArray* GetTabStringColumn(Int_t colnum); Get a string-typed column from a table HDU given its column index (>=0). TObjArray* GetTabStringColumn(const char* colname); Get a string-typed column from a table HDU given its name. TVectorD* GetTabRealVectorColumn(Int_t colnum); Get a real number-typed column from a table HDU given its column index (>=0). TVectorD* GetTabRealVectorColumn(const char* colname); Get a real number-typed column from a table HDU given its name. Bool_t Change(const char* filter); Change to another HDU given by ""filter"".; The parameter ""filter"" will be appended to the; FITS file's base path. For example:; hduObject.Change(""[EVENTS][TIME > 5]"");; Please, see documentation of TFITSHDU(const char *filepath_with_filter) constructor; for further information. Bool_t Change(Int_t extension_number); Change to another HDU given by extension_number. TFITSHDU(const char* filepath_with_filter). Int_t GetRecordNumber() const; Metadata access methods. { return fNRecords; }. struct HDURecord * GetRecord(const char* keyword). Int_t GetTabNColumns() const; Table readers. { return fNColumns; }. Int_t GetTabNRows() const; { return fNRows; }. » Author: Claudi Martinez, July 19th 2010 » Copyright (C) 1995-2010, Rene Brun and Fons Rademakers. *; » Last changed: root/graf2d:$Id: TFITS.h 34692 2010-08-01 20:45:39Z brun $ » Last generated: 2010-10-12 09:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFITSHDU.html:12209,access,access,12209,root/html528/TFITSHDU.html,https://root.cern,https://root.cern/root/html528/TFITSHDU.html,1,['access'],['access']
Security,"NT dictionary with cling?"", bringing up very reasonable concerns and arguments against re-implementing CINT. I will try to answer his comments to clarify why we do it, and how it connects with the rest.; A fundamental misconception is that the status quo is acceptable. It is not, for several reasons.; CINT vs C++; 	CINT was designed (20 years ago!) to be a C interpreted; C++ support was added later. It still has many shortcomings with C++ 2003, let alone C++11.; CINT maintenance; 	The original author of CINT, Masaharu Goto, has moved on; CINT has been maintained mainly by the ROOT team. It has 300k lines of code; that's a considerable fraction of ROOT's 2.5MLOC. It has been designed to fit into an integrated processing unit of appliances (like medical ones) - not for 16GB RAM, 8 compute thread, 50000 class environments.; Reflex and GCCXML solve it; 	ATLAS, CMS and LHCb use GCCXML to parse their headers, a set of python scripts to parse the generated XML file and write a C++ source file, the Reflex dictionary, which then gets compiled, linked, loaded, its data injected into the Reflex reflection database, which then gets copied through Cintex into CINT. We have thus many duplications of strings (three in the worst case with Reflex) and conflicts between duplicate dictionaries in Reflex versus CINT (famous: ""std::map<std::string, TH1*>"" must not be described through Reflex). On top of that, GCCXML is a limited parser (e.g. it swallows typedefs in certain conditions, think Double32_t); as it uses the GCC parser this will not be fixed. I.e. the current setup is fragile, inefficient, and limiting.; CINT is not relevant, I use PyROOT; 	For calling into C++, PyROOT relies on CINT's reflection data from ROOT (which is why it's so fantastic compared to static SWIG-based approaches). And ROOT relies on CINT for I/O, both the dictionaries and the interpreter. I.e. you use CINT much, much more than you think: it's not just the prompt, it in the core of most of ROOT.;  ; So we ne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:3138,inject,injected,3138,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['inject'],['injected']
Security,"NT4Z"");; return c1;; }; The default number of contour levels is 20 equidistant levels and can be changed; with TH1::SetContour() or TStyle::SetNumberContours().; The LIST option; When option ""LIST"" is specified together with option; ""CONT"", the points used to draw the contours are saved in; TGraph objects:. h->Draw(""CONT LIST"");; gPad->Update();. The contour are saved in TGraph objects once the pad is painted.; Therefore to use this functionnality in a macro, gPad->Update(); should be performed after the histogram drawing. Once the list is; built, the contours are accessible in the following way:. TObjArray *contours = gROOT->GetListOfSpecials()->FindObject(""contours""); Int_t ncontours = contours->GetSize();; TList *list = (TList*)contours->At(i);. Where i is a contour number, and list contains a list of; TGraph objects.; For one given contour, more than one disjoint polyline may be generated.; The number of TGraphs per contour is given by:. list->GetSize();. To access the first graph in the list one should do:. TGraph *gr1 = (TGraph*)list->First();. The following example shows how to use this functionality. Picture; Source. // Getting Contours From TH2D; // Author: Josh de Bever; // CSI Medical Physics Group; // The University of Western Ontario; // London, Ontario, Canada; // Date: Oct. 22, 2004; // Modified by O.Couet (Nov. 26, 2004). Double_t SawTooth(Double_t x, Double_t WaveLen);. TCanvas *ContourList(){. const Double_t PI = TMath::Pi();. TCanvas* c = new TCanvas(""c"",""Contour List"",0,0,600,600);; c->SetRightMargin(0.15);; c->SetTopMargin(0.15);. Int_t i, j;. Int_t nZsamples = 80;; Int_t nPhiSamples = 80;. Double_t HofZwavelength = 4.0; // 4 meters; Double_t dZ = HofZwavelength/(Double_t)(nZsamples - 1);; Double_t dPhi = 2*PI/(Double_t)(nPhiSamples - 1);. TArrayD z(nZsamples);; TArrayD HofZ(nZsamples);; TArrayD phi(nPhiSamples);; TArrayD FofPhi(nPhiSamples);. // Discretized Z and Phi Values; for ( i = 0; i < nZsamples; i++) {; z[i] = (i)*dZ - HofZwavelength/2.0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THistPainter.html:40601,access,access,40601,root/html602/THistPainter.html,https://root.cern,https://root.cern/root/html602/THistPainter.html,2,['access'],['access']
Security,"NT4Z"");; return c1;; }; The default number of contour levels is 20 equidistant levels and can be changed; with TH1::SetContour() or TStyle::SetNumberContours().; The LIST option; When option ""LIST"" is specified together with option; ""CONT"", the points used to draw the contours are saved in; TGraph objects:. h->Draw(""CONT LIST"");; gPad->Update();. The contour are saved in TGraph objects once the pad is painted.; Therefore to use this functionnality in a macro, gPad->Update(); should be performed after the histogram drawing. Once the list is; built, the contours are accessible in the following way:. TObjArray *contours = gROOT->GetListOfSpecials()->FindObject(""contours""); Int_t ncontours = contours->GetSize();; TList *list = (TList*)contours->At(i);. Where i is a contour number, and list contains a list of; TGraph objects.; For one given contour, more than one disjoint polyline may be generated.; The number of TGraphs per contour is given by:. list->GetSize();. To access the first graph in the list one should do:. TGraph *gr1 = (TGraph*)list->First();. The following example shows how to use this functionality. Picture; Source. // Getting Contours From TH2D; // Author: Josh de Bever; // CSI Medical Physics Group; // The University of Western Ontario; // London, Ontario, Canada; // Date: Oct. 22, 2004; // Modified by O.Couet (Nov. 26, 2004). TCanvas *ContourList(){. const Double_t PI = TMath::Pi();. TCanvas* c = new TCanvas(""c"",""Contour List"",0,0,600,600);; c->SetRightMargin(0.15);; c->SetTopMargin(0.15);. Int_t i, j, TotalConts;. Int_t nZsamples = 80;; Int_t nPhiSamples = 80;. Double_t HofZwavelength = 4.0; // 4 meters; Double_t dZ = HofZwavelength/(Double_t)(nZsamples - 1);; Double_t dPhi = 2*PI/(Double_t)(nPhiSamples - 1);. TArrayD z(nZsamples);; TArrayD HofZ(nZsamples);; TArrayD phi(nPhiSamples);; TArrayD FofPhi(nPhiSamples);. // Discretized Z and Phi Values; for ( i = 0; i < nZsamples; i++) {; z[i] = (i)*dZ - HofZwavelength/2.0;; HofZ[i] = SawTooth(z[i], HofZwavele",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THistPainter.html:36029,access,access,36029,root/html528/THistPainter.html,https://root.cern,https://root.cern/root/html528/THistPainter.html,4,['access'],['access']
Security,"NVirtual_b);  ; void TransformPoints (Double_t *points, UInt_t NbPnts) const;  Transform points (LocalToMaster) ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBRIK.html:3359,hash,hash,3359,doc/master/classTBRIK.html,https://root.cern,https://root.cern/doc/master/classTBRIK.html,17,['hash'],['hash']
Security,"Name ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 56 of file TPave.h. ◆ GetOption(). Option_t * TPave::GetOption ; (; ); const. inlineoverridevirtual . Reimplemented from TObject.; Definition at line 57 of file TPave.h. ◆ GetShadowColor(). Int_t TPave::GetShadowColor ; (; ); const. inline . Definition at line 58 of file TPave.h. ◆ GetX1NDC(). Double_t TPave::GetX1NDC ; (; ); const. inline . Definition at line 59 of file TPave.h. ◆ GetX2NDC(). Double_t TPave::GetX2NDC ; (; ); const. inline . Definition at line 60 of file TPave.h. ◆ GetY1NDC(). Double_t TPave::GetY1NDC ; (; ); const. inline . Definition at line 61 of file TPave.h. ◆ GetY2NDC(). Double_t TPave::GetY2NDC ; (; ); const. inline . Definition at line 62 of file TPave.h. ◆ Hash(). ULong_t TPave::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPave.html:23799,hash,hash,23799,doc/master/classTPave.html,https://root.cern,https://root.cern/doc/master/classTPave.html,1,['hash'],['hash']
Security,"Name = TClassEdit::GetUnqualifiedName(scopeEnumeration);; 867 // The syntax is ""Class::EnumeratorEnumerator; 868 md5EnumClass.Append(enumOnlyName);; 869 }; 870 // The next part of the URL is hashed ""@ scopeName::EnumeratorEnumerator"".; 871 TString md5Enumerator(""@ "");; 872 md5Enumerator.Append(scopeName);; 873 md5Enumerator.Append(""::"");; 874 md5Enumerator.Append(dataMemberName);; 875 md5Enumerator.Append(dataMemberName);; 876 // We make the URL for the ""scopeName"".; 877 TString url = UrlGenerator(scopeName, scopeType);; 878 // Then we have to append the hashed text for the enumerator.; 879 url.Append(""#a"");; 880 url.Append(md5EnumClass.MD5());; 881 // We append ""a"" and then the next hashed text.; 882 url.Append(""a"");; 883 url.Append(md5Enumerator.MD5());; 884 return url;; 885}; 886} // namespace; 887 ; 888namespace {; 889////////////////////////////////////////////////////////////////////////////////; 890/// The function generates URL for enumeration. The hashed text consist of:; 891/// ""Class::EnumerationEnumeration"".; 892///; 893/// \param[in] scopeName the name of the class/namespace/struct; 894/// \param[in] enumeration the name of the enumeration; 895/// \param[in] scopeType enumerator for class/namespace/struct; 896 ; 897static TString GetUrlForEnumeration(TString scopeName, const TString &enumeration, EUrl scopeType); 898{; 899 // The URL consists of URL for the ""scopeName"", ""#a"" and hashed as MD5 text.; 900 // The text is ""Class::EnumerationEnumeration.; 901 TString md5Enumeration(scopeName);; 902 md5Enumeration.Append(""::"");; 903 md5Enumeration.Append(enumeration);; 904 md5Enumeration.Append(enumeration);; 905 // We make the URL for the scope ""scopeName"".; 906 TString url(UrlGenerator(scopeName, scopeType));; 907 // Then we have to append ""#a"" and the hashed text.; 908 url.Append(""#a"");; 909 url.Append(md5Enumeration.MD5());; 910 return url;; 911}; 912} // namespace; 913 ; 914namespace {; 915enum EMethodKind { kURLforMethod, kURLforStructor };; 916/////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:33346,hash,hashed,33346,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['hash'],['hashed']
Security,"NameMapNode . Definition at line 92 of file TClass.h. ◆ EStreamerType. enum TClass::EStreamerType. private . EnumeratorkDefault ; kEmulatedStreamer ; kTObject ; kInstrumented ; kForeign ; kExternal . Definition at line 334 of file TClass.h. Constructor & Destructor Documentation. ◆ TClass() [1/8]. TClass::TClass ; (; const TClass & ; tc). privatedelete . ◆ TClass() [2/8]. TClass::TClass ; (; ). Internal, default constructor. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1065 of file TClass.cxx. ◆ TClass() [3/8]. TClass::TClass ; (; const char * ; name, . Bool_t ; silent = kFALSE . ). Create a TClass object. ; This object contains the full dictionary of a class. It has list to baseclasses, datamembers and methods. Use this ctor to create a standalone TClass object. Only useful to get a temporary TClass interface to an interpreted class. Used by TTabCom.; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1103 of file TClass.cxx. ◆ TClass() [4/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . Bool_t ; silent = kFALSE . ). Internal constructor. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1151 of file TClass.cxx. ◆ TClass() [5/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . EState ; theState, . Bool_t ; silent = kFALSE . ). Internal constructor, mimicing the case of a class fwd declared in the interpreter. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1179 of file TClass.cxx. ◆ TClass() [6/8]. TClass::TClass ; (; ClassInfo_t * ; classInfo, . Version_t ; cversion, . const char * ; dfil, . const char * ; ifil = nullptr, . Int_t ; dl = 0, . Int_t ; il = 0, . Bool_t ; silent = kFALSE . ). Internal constructor. ; Create a TClass object. This object contains the full ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:49839,access,access,49839,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,1,['access'],['access']
Security,"NameMapNode . Definition at line 92 of file TClass.h. ◆ EStreamerType. enum TClass::EStreamerType. private . EnumeratorkDefault ; kEmulatedStreamer ; kTObject ; kInstrumented ; kForeign ; kExternal . Definition at line 334 of file TClass.h. Constructor & Destructor Documentation. ◆ TClass() [1/8]. TClass::TClass ; (; const TClass & ; tc). privatedelete . ◆ TClass() [2/8]. TClass::TClass ; (; ). Internal, default constructor. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1132 of file TClass.cxx. ◆ TClass() [3/8]. TClass::TClass ; (; const char * ; name, . Bool_t ; silent = kFALSE . ). Create a TClass object. ; This object contains the full dictionary of a class. It has list to baseclasses, datamembers and methods. Use this ctor to create a standalone TClass object. Only useful to get a temporary TClass interface to an interpreted class. Used by TTabCom.; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1170 of file TClass.cxx. ◆ TClass() [4/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . Bool_t ; silent = kFALSE . ). Internal constructor. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1218 of file TClass.cxx. ◆ TClass() [5/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . EState ; theState, . Bool_t ; silent = kFALSE . ). Internal constructor, mimicing the case of a class fwd declared in the interpreter. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1246 of file TClass.cxx. ◆ TClass() [6/8]. TClass::TClass ; (; ClassInfo_t * ; classInfo, . Version_t ; cversion, . const char * ; dfil, . const char * ; ifil = nullptr, . Int_t ; dl = 0, . Int_t ; il = 0, . Bool_t ; silent = kFALSE . ). Internal constructor. ; Create a TClass object. This object contains the full ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass.html:49840,access,access,49840,doc/master/classTClass.html,https://root.cern,https://root.cern/doc/master/classTClass.html,1,['access'],['access']
Security,"Named::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; static const char*str(const TNamed* ptr); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); RooNameReg(Int_t hashSize = 31); RooNameReg(const RooNameReg& other). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static RooNameReg::(anonymous)kRenamedArg; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. RooHashTable_htableRepository of registered names; static RooNameReg*_instance; RooLinkedList",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNameReg.html:5541,hash,hashSize,5541,root/html602/RooNameReg.html,https://root.cern,https://root.cern/root/html602/RooNameReg.html,2,['hash'],['hashSize']
Security,Native GUI method argument prompt dialog box; TRootEmbeddedCanvas A ROOT TCanvas that can be embedded in a TGFrame; TRootGuiBuilder ROOT GUI Builder; TRootGuiFactory Factory for ROOT GUI components; TRootHelpDialog Dialog to display help text; TRootIOCtor ; TRootSecContext Class providing host specific authentication information; TRotMatrix Rotation Matrix for 3-D geometry objects; TRotation Rotations of TVector3 objects; TRuby Ruby/ROOT interface; TSAXParser SAX Parser; TSPHE SPHE shape; TSPlot class to disentangle signal from background; TSQLColumnInfo Summury information about column from SQL table; TSQLMonitoringWriter Sending monitoring data to a SQL DB; TSQLResult SQL query result; TSQLRow One row of an SQL query result; TSQLServer Connection to SQL server; TSQLStatement SQL statement; TSQLTableInfo Summury information about SQL table; TSVDUnfold Data unfolding using Singular Value Decomposition (hep-ph/9509307) ; TSVG SVG driver; TSecContext Class providing host specific authentication information; TSecContextCleanup Update the remote authentication table; TSelector A utility class for tree and object processing; TSelectorCint A utility class for tree and object processing (interpreted version); TSelectorDraw A specialized TSelector for TTree::Draw; TSelectorEntries A specialized TSelector for TTree::GetEntries(selection); TSelectorList Special TList used in the TSelector; TSelectorScalar Mergable scalar; TSemaphore Counting semaphore class; TSeqCollection Sequenceable collection ABC; TServerSocket This class implements server sockets; TSessionDescription Session description; TSessionFrame Session frame; TSessionInputFrame Input frame; TSessionLogView PROOF progress dialog; TSessionOutputFrame Output frame; TSessionQueryFrame Query frame; TSessionServerFrame Server frame; TSessionViewer Session Viewer; TShape Basic shape; TSignalHandler Signal event handler; TSlave PROOF slave server; TSlaveInfo basic info on workers; TSlaveLite PROOF lite worker server; TSlid,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:120818,authenticat,authentication,120818,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,1,['authenticat'],['authentication']
Security,"No Matches. Namespaces ; pyroot002_pythonizationDecorator.py File ReferenceTutorials » PyRoot tutorials. Detailed Description; This tutorial shows how to use the @pythonization decorator to add extra behaviour to C++ user classes that are used from Python via PyROOT. ; ; import ROOT; from ROOT import pythonization; ; # Let's first define a new C++ class. In this tutorial, we will see how we can; # ""pythonize"" this class, i.e. how we can add some extra behaviour to it to; # make it more pythonic or easier to use from Python.; #; # Note: In this example, the class is defined dynamically for demonstration; # purposes, but it could also be a C++ class defined in some library or header.; # For more information about loading C++ user code to be used from Python with; # PyROOT, please see:; # https://root.cern.ch/manual/python/#loading-user-libraries-and-just-in-time-compilation-jitting; ROOT.gInterpreter.Declare('''; class MyClass {};; '''); ; # Next, we define a pythonizor function: the function that will be responsible; # for injecting new behaviour in our C++ class `MyClass`.; #; # To convert a given Python function into a pythonizor, we need to decorate it; # with the @pythonization decorator. Such decorator allows us to define which; # which class we want to pythonize by providing its class name and its; # namespace (if the latter is not specified, it defaults to the global; # namespace, i.e. '::').; #; # The decorated function - the pythonizor - must accept either one or two; # parameters:; # 1. The class to be pythonized (proxy object where new behaviour can be; # injected); # 2. The fully-qualified name of that class (optional).; #; # Let's see all this with a simple example. Suppose I would like to define how; # `MyClass` objects are represented as a string in Python (i.e. what would be; # shown when I print that object). For that purpose, I can define the following; # pythonizor function. There are two important things to be noted here:; # - The @pythonization de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/pyroot002__pythonizationDecorator_8py.html:1184,inject,injecting,1184,doc/master/pyroot002__pythonizationDecorator_8py.html,https://root.cern,https://root.cern/doc/master/pyroot002__pythonizationDecorator_8py.html,1,['inject'],['injecting']
Security,NoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfAccessIdUser id ; TStringfAccessKeySecret key; TArchiveFile*TFile::fArchive!Archive file from which we read this file; Long64_tTFile::fArchiveOffset!Offset at which file starts in archive; TFileOpenHandle*TFile::fAsyncHandle!For proper automatic cleanup; TFile::EAsyncOpenStatusTFile::fAsyncOpenStatus!Status of an asynchronous open request; TStringfAuthPrefixAuthentication prefix for Google Storage; Long64_tTFile::fBEGINFirst used byte in file; TStringTWebFile::fBasicUrlbasic url without authentication and options; TStringTWebFile::fBasicUrlOrgsave original url in case of temp redirection; TStringfBucketBucket name; Int_tTDirectoryFile::fBufferSizeDefault buffer size to create new TKeys; Long64_tTFile::fBytesReadNumber of bytes read from this file; Long64_tTFile::fBytesReadExtraNumber of extra bytes (overhead) read by the readahead buffer; Long64_tTFile::fBytesWriteNumber of bytes written to this file; TFileCacheRead*TFile::fCacheRead!Pointer to the read cache (if any); TFileCacheWrite*TFile::fCacheWrite!Pointer to the write cache (if any); TArrayC*TFile::fClassIndex!Index of TStreamerInfo classes written to this file; Int_tTFile::fCompressCompression level and algorithm; TDirectory::TContext*TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; Int_tTFile::fDFile descriptor; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; Long64_tTFile::fENDLast used byte in file; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TFile::fFreeFree segments linked list table; Bool_tTWebFile::fHTTP11true if server support HTTP/1.1; Bool_tTWebFile::fHasModRoottrue if server has mod_root installed; TList*TFile::fInfoCache!Cached list of the streamer infos in this file; Bool_tTFile::fIn,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGSFile.html:19288,authenticat,authentication,19288,root/html532/TGSFile.html,https://root.cern,https://root.cern/root/html532/TGSFile.html,1,['authenticat'],['authentication']
Security,"Node* node); fill the existing the decision tree structure by filling event; in from the top node and see where they happen to end up. void ClearTree(); clear the tree nodes (their S/N, Nevents etc), just keep the structure of the tree. UInt_t CleanTree(TMVA::DecisionTreeNode* node = __null); remove those last splits that result in two leaf nodes that; are both of the type (i.e. both signal or both background); this of course is only a reasonable thing to do when you use; ""YesOrNo"" leafs, while it might loose s.th. if you use the; purity information in the nodes.; --> hence I don't call it automatically in the tree building. Double_t PruneTree(const TMVA::DecisionTree::EventConstList* validationSample = __null); prune (get rid of internal nodes) the Decision tree to avoid overtraining; serveral different pruning methods can be applied as selected by the; variable ""fPruneMethod"". void ApplyValidationSample(const TMVA::DecisionTree::EventConstList* validationSample) const; run the validation sample through the (pruned) tree and fill in the nodes; the variables NSValidation and NBValidadtion (i.e. how many of the Signal; and Background events from the validation sample. This is then later used; when asking for the ""tree quality"" .. Double_t TestPrunedTreeQuality(const TMVA::DecisionTreeNode* dt = __null, Int_t mode = 0) const; return the misclassification rate of a pruned tree; a ""pruned tree"" may have set the variable ""IsTerminal"" to ""arbitrary"" at; any node, hence this tree quality testing will stop there, hence test; the pruned tree (while the full tree is still in place for normal/later use). void CheckEventWithPrunedTree(const TMVA::Event* ) const; pass a single validation event throught a pruned decision tree; on the way down the tree, fill in all the ""intermediate"" information; that would normally be there from training. Double_t GetSumWeights(const TMVA::DecisionTree::EventConstList* validationSample) const; calculate the normalization factor for a pruning vali",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__DecisionTree.html:11372,validat,validationSample,11372,root/html602/TMVA__DecisionTree.html,https://root.cern,https://root.cern/root/html602/TMVA__DecisionTree.html,4,['validat'],"['validation', 'validationSample']"
Security,"NumThreads; //! Number of registered threads; 122 static Bool_t fgLockNavigators; //! Lock existing navigators; 123 TGeoNavigator *fCurrentNavigator; //! current navigator; 124 TGeoVolume *fCurrentVolume; //! current volume; 125 TGeoVolume *fTopVolume; //! top level volume in geometry; 126 TGeoNode *fTopNode; //! top physical node; 127 TGeoVolume *fMasterVolume; // master volume; 128 TGeoHMatrix *fGLMatrix; // matrix to be used for view transformations; 129 TObjArray *fUniqueVolumes; //-> list of unique volumes; 130 TGeoShape *fClippingShape; //! clipping shape for raytracing; 131 TGeoElementTable *fElementTable; //! table of elements; 132 ; 133 Int_t fNLevel; // maximum accepted level in geometry; 134 TGeoVolume *fPaintVolume; //! volume currently painted; 135 TGeoVolume *fUserPaintVolume; //!; 136 THashList *fHashVolumes; //! hash list of volumes providing fast search; 137 THashList *fHashGVolumes; //! hash list of group volumes providing fast search; 138 THashList *fHashPNE; //-> hash list of physical node entries; 139 mutable TObjArray *fArrayPNE; //! array of physical node entries; 140 Int_t fSizePNEId; // size of the array of unique ID's for PN entries; 141 Int_t fNPNEId; // number of PN entries having a unique ID; 142 Int_t *fKeyPNEId; //[fSizePNEId] array of uid values for PN entries; 143 Int_t *fValuePNEId; //[fSizePNEId] array of pointers to PN entries with ID's; 144 Int_t fMaxThreads; //! Max number of threads; 145 Bool_t fMultiThread; //! Flag for multi-threading; 146 Int_t fRaytraceMode; //! Raytrace mode: 0=normal, 1=pass through, 2=transparent; 147 Bool_t fUsePWNav; // Activate usage of parallel world in navigation; 148 TGeoParallelWorld *fParallelWorld; // Parallel world; 149 ConstPropMap_t fProperties; // Map of user-defined constant properties; 150 //--- private methods; 151 Bool_t IsLoopingVolumes() const { return fLoopVolumes; }; 152 void Init();; 153 Bool_t InitArrayPNE() const;; 154 Bool_t InsertPNEId(Int_t uid, Int_t ientry);; 155 void SetLoopV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8h_source.html:6527,hash,hash,6527,doc/master/TGeoManager_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8h_source.html,1,['hash'],['hash']
Security,"Number . ). Definition at line 168 of file DataSet.cxx. ◆ GetNEvents(). Long64_t TMVA::DataSet::GetNEvents ; (; Types::ETreeType ; type = Types::kMaxTreeType); const. inline . Definition at line 206 of file DataSet.h. ◆ GetNEvtBkgdTest(). Long64_t TMVA::DataSet::GetNEvtBkgdTest ; (; ). return number of background test events in dataset ; Definition at line 435 of file DataSet.cxx. ◆ GetNEvtBkgdTrain(). Long64_t TMVA::DataSet::GetNEvtBkgdTrain ; (; ). return number of background training events in dataset ; Definition at line 451 of file DataSet.cxx. ◆ GetNEvtSigTest(). Long64_t TMVA::DataSet::GetNEvtSigTest ; (; ). return number of signal test events in dataset ; Definition at line 427 of file DataSet.cxx. ◆ GetNEvtSigTrain(). Long64_t TMVA::DataSet::GetNEvtSigTrain ; (; ). return number of signal training events in dataset ; Definition at line 443 of file DataSet.cxx. ◆ GetNSpectators(). UInt_t TMVA::DataSet::GetNSpectators ; (; ); const. access the number of targets through the datasetinfo ; Definition at line 232 of file DataSet.cxx. ◆ GetNTargets(). UInt_t TMVA::DataSet::GetNTargets ; (; ); const. access the number of targets through the datasetinfo ; Definition at line 224 of file DataSet.cxx. ◆ GetNTestEvents(). Long64_t TMVA::DataSet::GetNTestEvents ; (; ); const. inline . Definition at line 69 of file DataSet.h. ◆ GetNTrainingEvents(). Long64_t TMVA::DataSet::GetNTrainingEvents ; (; ); const. inline . Definition at line 68 of file DataSet.h. ◆ GetNVariables(). UInt_t TMVA::DataSet::GetNVariables ; (; ); const. access the number of variables through the datasetinfo ; Definition at line 216 of file DataSet.cxx. ◆ GetResults(). TMVA::Results * TMVA::DataSet::GetResults ; (; const TString & ; resultsName, . Types::ETreeType ; type, . Types::EAnalysisType ; analysistype . ). Definition at line 265 of file DataSet.cxx. ◆ GetTestEvent(). const Event * TMVA::DataSet::GetTestEvent ; (; Long64_t ; ievt); const. inline . Definition at line 75 of file DataSet.h. ◆ GetTra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSet.html:21432,access,access,21432,doc/master/classTMVA_1_1DataSet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSet.html,1,['access'],['access']
Security,"O));; 11930 } else {; 11931 fclose_on_exec(&file.access, conn);; 11932 if (match_prefix_strlen(conn->dom_ctx->config[SSI_EXTENSIONS], path); 11933 > 0) {; 11934 send_ssi_file(conn, path, &file, include_level + 1);; 11935 } else {; 11936 send_file_data(conn, &file, 0, INT64_MAX);; 11937 }; 11938 (void)mg_fclose(&file.access); /* Ignore errors for readonly files */; 11939 }; 11940}; 11941 ; 11942 ; 11943#if !defined(NO_POPEN); 11944static void; 11945do_ssi_exec(struct mg_connection *conn, char *tag); 11946{; 11947 char cmd[1024] = """";; 11948 struct mg_file file = STRUCT_FILE_INITIALIZER;; 11949 ; 11950 if (sscanf(tag, "" \""%1023[^\""]\"""", cmd) != 1) {; 11951 mg_cry_internal(conn, ""Bad SSI #exec: [%s]"", tag);; 11952 } else {; 11953 cmd[1023] = 0;; 11954 if ((file.access.fp = popen(cmd, ""r"")) == NULL) {; 11955 mg_cry_internal(conn,; 11956 ""Cannot SSI #exec: [%s]: %s"",; 11957 cmd,; 11958 strerror(ERRNO));; 11959 } else {; 11960 send_file_data(conn, &file, 0, INT64_MAX);; 11961 pclose(file.access.fp);; 11962 }; 11963 }; 11964}; 11965#endif /* !NO_POPEN */; 11966 ; 11967 ; 11968static int; 11969mg_fgetc(struct mg_file *filep); 11970{; 11971 if (filep == NULL) {; 11972 return EOF;; 11973 }; 11974 ; 11975 if (filep->access.fp != NULL) {; 11976 return fgetc(filep->access.fp);; 11977 } else {; 11978 return EOF;; 11979 }; 11980}; 11981 ; 11982 ; 11983static void; 11984send_ssi_file(struct mg_connection *conn,; 11985 const char *path,; 11986 struct mg_file *filep,; 11987 int include_level); 11988{; 11989 char buf[MG_BUF_LEN];; 11990 int ch, len, in_tag, in_ssi_tag;; 11991 ; 11992 if (include_level > 10) {; 11993 mg_cry_internal(conn, ""SSI #include level is too deep (%s)"", path);; 11994 return;; 11995 }; 11996 ; 11997 in_tag = in_ssi_tag = len = 0;; 11998 ; 11999 /* Read file, byte by byte, and look for SSI include tags */; 12000 while ((ch = mg_fgetc(filep)) != EOF) {; 12001 ; 12002 if (in_tag) {; 12003 /* We are in a tag, either SSI tag or html tag */; 12004 ; 12005 if (ch == '>')",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:346481,access,access,346481,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['access'],['access']
Security,"O));; 11931 } else {; 11932 fclose_on_exec(&file.access, conn);; 11933 if (match_prefix_strlen(conn->dom_ctx->config[SSI_EXTENSIONS], path); 11934 > 0) {; 11935 send_ssi_file(conn, path, &file, include_level + 1);; 11936 } else {; 11937 send_file_data(conn, &file, 0, INT64_MAX);; 11938 }; 11939 (void)mg_fclose(&file.access); /* Ignore errors for readonly files */; 11940 }; 11941}; 11942 ; 11943 ; 11944#if !defined(NO_POPEN); 11945static void; 11946do_ssi_exec(struct mg_connection *conn, char *tag); 11947{; 11948 char cmd[1024] = """";; 11949 struct mg_file file = STRUCT_FILE_INITIALIZER;; 11950 ; 11951 if (sscanf(tag, "" \""%1023[^\""]\"""", cmd) != 1) {; 11952 mg_cry_internal(conn, ""Bad SSI #exec: [%s]"", tag);; 11953 } else {; 11954 cmd[1023] = 0;; 11955 if ((file.access.fp = popen(cmd, ""r"")) == NULL) {; 11956 mg_cry_internal(conn,; 11957 ""Cannot SSI #exec: [%s]: %s"",; 11958 cmd,; 11959 strerror(ERRNO));; 11960 } else {; 11961 send_file_data(conn, &file, 0, INT64_MAX);; 11962 pclose(file.access.fp);; 11963 }; 11964 }; 11965}; 11966#endif /* !NO_POPEN */; 11967 ; 11968 ; 11969static int; 11970mg_fgetc(struct mg_file *filep); 11971{; 11972 if (filep == NULL) {; 11973 return EOF;; 11974 }; 11975 ; 11976 if (filep->access.fp != NULL) {; 11977 return fgetc(filep->access.fp);; 11978 } else {; 11979 return EOF;; 11980 }; 11981}; 11982 ; 11983 ; 11984static void; 11985send_ssi_file(struct mg_connection *conn,; 11986 const char *path,; 11987 struct mg_file *filep,; 11988 int include_level); 11989{; 11990 char buf[MG_BUF_LEN];; 11991 int ch, len, in_tag, in_ssi_tag;; 11992 ; 11993 if (include_level > 10) {; 11994 mg_cry_internal(conn, ""SSI #include level is too deep (%s)"", path);; 11995 return;; 11996 }; 11997 ; 11998 in_tag = in_ssi_tag = len = 0;; 11999 ; 12000 /* Read file, byte by byte, and look for SSI include tags */; 12001 while ((ch = mg_fgetc(filep)) != EOF) {; 12002 ; 12003 if (in_tag) {; 12004 /* We are in a tag, either SSI tag or html tag */; 12005 ; 12006 if (ch == '>')",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:346514,access,access,346514,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['access'],['access']
Security,"OF package manager. ;  ;  ~TPackMgr () override;  Destroy a TPackMgr instance. ;  ; Int_t Build (const char *pack, Int_t opt=TPackMgr::kCheckROOT);  Method to build a package. ;  ; Int_t Clean (const char *pack);  Clean dir for package 'pack' Return -1 in case of error, 0 otherwise. ;  ; const char * GetDir () const;  ; Int_t GetDownloadDir (TString &dldir);  Method to get the download dir; create if not existing Return -1 in case of error (not found; not created), 0 otherwise. ;  ; void GetEnabledPackages (TString &packlist);  Method to get a semi-colon separated list with the names of the enabled packages. ;  ; TList * GetList () const;  Get list of available packages Returns a pointer to a TList object, transferring ownership to the caller. ;  ; TList * GetListOfEnabled () const;  Get list of enabled packages Returns a pointer to a TList object, transferring ownership to the caller. ;  ; TLockPath * GetLock ();  ; TMD5 * GetMD5 (const char *pack);  Get MD5 checksum of the PAR file corresponding to given package Returns a pointer to a TMD5 object, transferring ownership to the caller. ;  ; const char * GetName () const override;  Returns name of object. ;  ; Int_t GetPackDir (const char *pack, TString &pdir);  Method to get the path of the dir for package 'pack'. ;  ; Int_t GetParPath (const char *pack, TString &path);  Method to get the path of the PAR file for package 'pack'. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; Bool_t Has (const char *pack);  Method to check if this package manager has package 'pack'. ;  ; Int_t Install (const char *par, Bool_t rmold=kFALSE);  Install package from par (unpack the file in the directory); par can be an URL for remote retrieval. ;  ; TClass * IsA () const override;  ; Bool_t IsInDir (const char *path);  Method to check if 'path' is in the managed directory Return kTRUE or kFALSE. ;  ; Bool_t IsPackageEnabled (const char *pack);  ; Int_t Load (const char *pack, const char *opts);  Method to lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPackMgr.html:2368,checksum,checksum,2368,doc/master/classTPackMgr.html,https://root.cern,https://root.cern/doc/master/classTPackMgr.html,1,['checksum'],['checksum']
Security,"OFFSET_LEN; kEND_COMMENTLEN_OFF; kEND_COMMENTLEN_LEN; kEND_HEADER_SIZE; kENTRY_MAGIC_OFF; kENTRY_VREQD_OFF; kENTRY_VREQD_LEN; kENTRY_FLAG_OFF; kENTRY_FLAG_LEN; kENTRY_METHOD_OFF; kENTRY_METHOD_LEN; kENTRY_DATE_OFF; kENTRY_DATE_LEN; kENTRY_CRC32_OFF; kENTRY_CRC32_LEN; kENTRY_CSIZE_OFF; kENTRY_CSIZE_LEN; kENTRY_USIZE_OFF; kENTRY_USIZE_LEN; kENTRY_NAMELEN_OFF; kENTRY_NAMELEN_LEN; kENTRY_EXTRALEN_OFF; kENTRY_EXTRALEN_LEN; kENTRY_HEADER_SIZE; kSTORED; kDEFLATED; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTArchiveFile::fArchiveNameArchive file name; TStringfCommentArchive comment; TArchiveMember*TArchiveFile::fCurMemberCurrent archive member; Long64_tfDirOffsetCentral directory offset (from the beginning of the archive); Long64_tfDirPosCentral directory position; Long64_tfDirSizeCentral directory size; TFile*TArchiveFile::fFileFile stream used to access the archive; Int_tTArchiveFile::fMemberIndexIndex of sub-file in archive; TStringTArchiveFile::fMemberNameSub-file name; TObjArray*TArchiveFile::fMembersMembers in this archive. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TZIPFile(); Default ctor. TZIPFile(const char* archive, const char* member, TFile* file); Specify the archive name and member name. The member can be a decimal; number which allows to access the n-th member. Int_t OpenArchive(); Open archive and read end-header and directory. Returns -1 in case; of error, 0 otherwise. Long64_t FindEndHeader(); Find the end header of the ZIP archive. Returns 0 in case of error. Int_t ReadEndHeader(Long64_t pos); Read the end header of the ZIP archive including the archive comment; at the current file position. Check that it really was a single-disk; archive with all the entries as expected. Most im",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TZIPFile.html:9698,access,access,9698,root/html528/TZIPFile.html,https://root.cern,https://root.cern/root/html528/TZIPFile.html,1,['access'],['access']
Security,"OL_TYPE_WEBSOCKET ; PROTOCOL_TYPE_HTTP2 . Definition at line 2428 of file civetweb.c. Function Documentation. ◆ abort_cgi_process(). static int abort_cgi_process ; (; void * ; data). static . Definition at line 11243 of file civetweb.c. ◆ accept_new_connection(). static void accept_new_connection ; (; const struct socket * ; listener, . struct mg_context * ; ctx . ). static . Definition at line 19105 of file civetweb.c. ◆ addenv(). static void addenv ; (; struct cgi_environment * ; env, . const char * ; fmt, .  ; ... . ). static . Definition at line 10975 of file civetweb.c. ◆ alloc_vprintf(). static int alloc_vprintf ; (; char ** ; out_buf, . char * ; prealloc_buf, . size_t ; prealloc_size, . const char * ; fmt, . va_list ; ap . ). static . Definition at line 6855 of file civetweb.c. ◆ alloc_vprintf2(). static int alloc_vprintf2 ; (; char ** ; buf, . const char * ; fmt, . va_list ; ap . ). static . Definition at line 6822 of file civetweb.c. ◆ authorize(). static int authorize ; (; struct mg_connection * ; conn, . struct mg_file * ; filep, . const char * ; realm . ). static . Definition at line 8615 of file civetweb.c. ◆ bin2str(). static void bin2str ; (; char * ; to, . const unsigned char * ; p, . size_t ; len . ). static . Definition at line 8192 of file civetweb.c. ◆ check_acl(). static int check_acl ; (; struct mg_context * ; phys_ctx, . const union usa * ; sa . ). static . Definition at line 15442 of file civetweb.c. ◆ check_authorization(). static int check_authorization ; (; struct mg_connection * ; conn, . const char * ; path . ). static . Definition at line 8668 of file civetweb.c. ◆ check_password(). static int check_password ; (; const char * ; method, . const char * ; ha1, . const char * ; uri, . const char * ; nonce, . const char * ; nc, . const char * ; cnonce, . const char * ; qop, . const char * ; response . ). static . Definition at line 8230 of file civetweb.c. ◆ close_all_listening_sockets(). static void close_all_listening_sockets ; (; struct mg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c.html:43765,authoriz,authorize,43765,doc/master/civetweb_8c.html,https://root.cern,https://root.cern/doc/master/civetweb_8c.html,1,['authoriz'],['authorize']
Security,"OMParser & operator= (const TDOMParser &)=delete;  ; Int_t ParseContext ();  Creates a XML document for the parser. ;  . Private Attributes; TXMLDocument * fTXMLDoc;  xmlDoc ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TXMLParser; virtual void InitializeContext ();  Initialize parser parameters, such as, disactivate non-standards libxml1 features, on/off validation, clear error and warning messages. ;  ; virtual void OnValidateError (const TString &message);  This function is called when an error from the parser has occurred. ;  ; virtual void OnValidateWarning (const TString &message);  This function is called when a warning from the parser has occurred. ;  ; virtual void SetParseCode (Int_t code);  Set the parse code: ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDOMParser.html:14817,validat,validation,14817,doc/master/classTDOMParser.html,https://root.cern,https://root.cern/doc/master/classTDOMParser.html,1,['validat'],['validation']
Security,"OOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 7. Using the TTreeReader. Accessing Value from a TTree; Up to now we have used TTree's ability to parse TTree::Draw() expressions and the TBrowser interface. Sometimes it's better to access the values in a script, one by one. There is a traditional way of doing this (TTree::SetBranchAddress() etc) and a new, recommended one: the TTreeReader. That's what we will use later and introduce here.; The TTreeReader Concept; The TTree loads entry by entry into memory. You and the TTree need to agree what data the TTree should make available (i.e. for which branches) and what data these branches contain. First, we set up a TTreeReader object that connects our data requests to the TTree:; // Access a TTree called ""MyTree"" in the file:; TTreeReader reader(""MyTree"", file);. The TTreeReader Values and Arrays; This reader object can now be used by the data accessors. There are two types: TTreeReaderArray can iterate through collections (std::vector, TClonesArray, TList, MyType[12] - whatever) and TTreeReaderValue that doesn't. You can choose how you access the values - for our tree, all of these might make sense in different contexts:; TTreeReaderValue<float> rvMissingET(reader, ""missingET"");; // The following needs the definition of the Muon class - which is why accessing; // data member branches is much simpler.; TTreeReaderValue<std::vector<Muon>> rvMuons(reader, ""muons"");. TTreeReaderArray<float> raMuonPt(reader, ""muons.fPt"");; // Here, too we would need the definition of the Muon class.; TTreeReaderArray<Muon> raMuons(reader, ""muons"");. Accessing Data; The TTreeReader checks whether the type you specify is the type that's stored in the branch, i.e. whether it can actually access the data through the reader object. The TTreeReaderValue gets its values like so:; // Loop through all the TTree's entri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/7-using-ttreereader.html:2740,access,accessors,2740,d/7-using-ttreereader.html,https://root.cern,https://root.cern/d/7-using-ttreereader.html,1,['access'],['accessors']
Security,"OOT = &GetROOT1;; 882 ; 883 // Mark the object as invalid, so that we can veto some actions; 884 // (like autoloading) while we are in the destructor.; 885 SetBit(TObject::kInvalidObject);; 886 ; 887 // Turn-off the global mutex to avoid recreating mutexes that have; 888 // already been deleted during the destruction phase; 889 if (gGlobalMutex) {; 890 TVirtualMutex *m = gGlobalMutex;; 891 gGlobalMutex = nullptr;; 892 delete m;; 893 }; 894 ; 895 // Return when error occurred in TCling, i.e. when setup file(s) are; 896 // out of date; 897 if (!fVersionInt) return;; 898 ; 899 // ATTENTION!!! Order is important!; 900 ; 901 SafeDelete(fBrowsables);; 902 ; 903 // FIXME: Causes rootcling to deadlock, debug and uncomment; 904 // SafeDelete(fRootFolder);; 905 ; 906#ifdef R__COMPLETE_MEM_TERMINATION; 907 fSpecials->Delete(); SafeDelete(fSpecials); // delete special objects : PostScript, Minuit, Html; 908#endif; 909 ; 910 fClosedObjects->Delete(""slow""); // and closed files; 911 fFiles->Delete(""slow""); // and files; 912 SafeDelete(fFiles);; 913 fSecContexts->Delete(""slow""); SafeDelete(fSecContexts); // and security contexts; 914 fSockets->Delete(); SafeDelete(fSockets); // and sockets; 915 fMappedFiles->Delete(""slow""); // and mapped files; 916 TSeqCollection *tl = fMappedFiles; fMappedFiles = nullptr; delete tl;; 917 ; 918 SafeDelete(fClosedObjects);; 919 ; 920 delete fUUIDs;; 921 TProcessID::Cleanup(); // and list of ProcessIDs; 922 ; 923 fFunctions->Delete(); SafeDelete(fFunctions); // etc..; 924 fGeometries->Delete(); SafeDelete(fGeometries);; 925 fBrowsers->Delete(); SafeDelete(fBrowsers);; 926 SafeDelete(fCanvases);; 927 fColors->Delete(); SafeDelete(fColors);; 928 fStyles->Delete(); SafeDelete(fStyles);; 929 ; 930#ifdef R__COMPLETE_MEM_TERMINATION; 931 if (gGuiFactory != gBatchGuiFactory) SafeDelete(gGuiFactory);; 932 SafeDelete(gBatchGuiFactory);; 933 if (gGXBatch != gVirtualX) SafeDelete(gGXBatch);; 934 SafeDelete(gVirtualX);; 935#endif; 936 ; 937 // Stop emitting signa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:36248,secur,security,36248,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,['secur'],['security']
Security,OOT.cxx. ◆ GetDefCanvasName(). const char * TROOT::GetDefCanvasName ; (; ); const. inline . Definition at line 217 of file TROOT.h. ◆ GetDirLevel(). Int_t TROOT::GetDirLevel ; (; ). static . return directory level ; Definition at line 2754 of file TROOT.cxx. ◆ GetDocDir(). const TString & TROOT::GetDocDir ; (; ). static . Get the documentation directory in the installation. Static utility function. ; Definition at line 3078 of file TROOT.cxx. ◆ GetEditHistograms(). Bool_t TROOT::GetEditHistograms ; (; ); const. inline . Definition at line 218 of file TROOT.h. ◆ GetEditorMode(). Int_t TROOT::GetEditorMode ; (; ); const. inline . Definition at line 219 of file TROOT.h. ◆ GetEtcDir(). const TString & TROOT::GetEtcDir ; (; ). static . Get the sysconfig directory in the installation. Static utility function. ; Definition at line 3052 of file TROOT.cxx. ◆ GetExtraInterpreterArgs(). const char **& TROOT::GetExtraInterpreterArgs ; (; ). static . INTERNAL function! Used by rootcling to inject interpreter arguments through a C-interface layer. ; Definition at line 2962 of file TROOT.cxx. ◆ GetFile() [1/2]. TFile * TROOT::GetFile ; (; ); const. inlineoverridevirtual . Reimplemented from TDirectory.; Definition at line 260 of file TROOT.h. ◆ GetFile() [2/2]. TFile * TROOT::GetFile ; (; const char * ; name); const. Return pointer to file with name. ; Definition at line 1570 of file TROOT.cxx. ◆ GetForceStyle(). Bool_t TROOT::GetForceStyle ; (; ); const. inline . Definition at line 220 of file TROOT.h. ◆ GetFunction(). TObject * TROOT::GetFunction ; (; const char * ; name); const. Return pointer to function with name. ; Definition at line 1587 of file TROOT.cxx. ◆ GetFunctionTemplate(). TFunctionTemplate * TROOT::GetFunctionTemplate ; (; const char * ; name). Definition at line 1618 of file TROOT.cxx. ◆ GetGeometry(). TObject * TROOT::GetGeometry ; (; const char * ; name); const. Return pointer to Geometry with name. ; Definition at line 1747 of file TROOT.cxx. ◆ GetGitBranch(). ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTROOT.html:50899,inject,inject,50899,doc/v632/classTROOT.html,https://root.cern,https://root.cern/doc/v632/classTROOT.html,1,['inject'],['inject']
Security,OOT.cxx. ◆ GetDefCanvasName(). const char * TROOT::GetDefCanvasName ; (; ); const. inline . Definition at line 217 of file TROOT.h. ◆ GetDirLevel(). Int_t TROOT::GetDirLevel ; (; ). static . return directory level ; Definition at line 2754 of file TROOT.cxx. ◆ GetDocDir(). const TString & TROOT::GetDocDir ; (; ). static . Get the documentation directory in the installation. Static utility function. ; Definition at line 3082 of file TROOT.cxx. ◆ GetEditHistograms(). Bool_t TROOT::GetEditHistograms ; (; ); const. inline . Definition at line 218 of file TROOT.h. ◆ GetEditorMode(). Int_t TROOT::GetEditorMode ; (; ); const. inline . Definition at line 219 of file TROOT.h. ◆ GetEtcDir(). const TString & TROOT::GetEtcDir ; (; ). static . Get the sysconfig directory in the installation. Static utility function. ; Definition at line 3056 of file TROOT.cxx. ◆ GetExtraInterpreterArgs(). const char **& TROOT::GetExtraInterpreterArgs ; (; ). static . INTERNAL function! Used by rootcling to inject interpreter arguments through a C-interface layer. ; Definition at line 2966 of file TROOT.cxx. ◆ GetFile() [1/2]. TFile * TROOT::GetFile ; (; ); const. inlineoverridevirtual . Reimplemented from TDirectory.; Definition at line 260 of file TROOT.h. ◆ GetFile() [2/2]. TFile * TROOT::GetFile ; (; const char * ; name); const. Return pointer to file with name. ; Definition at line 1570 of file TROOT.cxx. ◆ GetForceStyle(). Bool_t TROOT::GetForceStyle ; (; ); const. inline . Definition at line 220 of file TROOT.h. ◆ GetFunction(). TObject * TROOT::GetFunction ; (; const char * ; name); const. Return pointer to function with name. ; Definition at line 1587 of file TROOT.cxx. ◆ GetFunctionTemplate(). TFunctionTemplate * TROOT::GetFunctionTemplate ; (; const char * ; name). Definition at line 1618 of file TROOT.cxx. ◆ GetGeometry(). TObject * TROOT::GetGeometry ; (; const char * ; name); const. Return pointer to Geometry with name. ; Definition at line 1747 of file TROOT.cxx. ◆ GetGitBranch(). ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTROOT.html:50868,inject,inject,50868,doc/master/classTROOT.html,https://root.cern,https://root.cern/doc/master/classTROOT.html,1,['inject'],['inject']
Security,"OOT.h:164; TROOT::fConfigOptionsTString fConfigOptionsROOT ./configure set build options.Definition TROOT.h:111; TROOT::GetStyleTStyle * GetStyle(const char *name) constReturn pointer to style with name.Definition TROOT.cxx:1579; TROOT::GetListOfEnumsTCollection * GetListOfEnums(Bool_t load=kFALSE)Definition TROOT.cxx:1754; TROOT::ProcessLineSyncLongptr_t ProcessLineSync(const char *line, Int_t *error=nullptr)Process interpreter command via TApplication::ProcessLine().Definition TROOT.cxx:2390; TROOT::InitInterpretervoid InitInterpreter()Initialize interpreter (cling)Definition TROOT.cxx:2064; TROOT::GetListOfGlobalsTCollection * GetListOfGlobals(Bool_t load=kFALSE)Return list containing the TGlobals currently defined.Definition TROOT.cxx:1788; TROOT::GetSelectedPadTVirtualPad * GetSelectedPad() constDefinition TROOT.h:271; TROOT::SetDirLevelstatic void SetDirLevel(Int_t level=0)Return Indentation level for ls().Definition TROOT.cxx:2914; TROOT::fSecContextsTSeqCollection * fSecContextsList of security contexts (TSecContext)Definition TROOT.h:161; TROOT::fWebDisplayTString fWebDisplayIf not empty it defines where web graphics should be rendered (cef, qt5, browser.....Definition TROOT.h:127; TROOT::GetTutorialsDirstatic const char * GetTutorialsDir()Get the tutorials directory in the installation.Definition TROOT.cxx:3211; TROOT::GetListOfFunctionOverloadsTCollection * GetListOfFunctionOverloads(const char *name) constReturn the collection of functions named ""name"".Definition TROOT.cxx:1672; TROOT::fCleanupsTSeqCollection * fCleanupsList of recursiveRemove collections.Definition TROOT.h:157; TROOT::Initializedstatic Bool_t Initialized()Return kTRUE if the TROOT object has been initialized.Definition TROOT.cxx:2906; TROOT::GetApplicationTApplication * GetApplication() constDefinition TROOT.h:209; TROOT::SetBatchvoid SetBatch(Bool_t batch=kTRUE)Set batch mode for ROOT If the argument evaluates to true, the session does not use interactive graph...Definition TROOT.cxx:2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8h_source.html:37684,secur,security,37684,doc/v632/TROOT_8h_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8h_source.html,1,['secur'],['security']
Security,"OOT.h:164; TROOT::fConfigOptionsTString fConfigOptionsROOT ./configure set build options.Definition TROOT.h:111; TROOT::GetStyleTStyle * GetStyle(const char *name) constReturn pointer to style with name.Definition TROOT.cxx:1579; TROOT::GetListOfEnumsTCollection * GetListOfEnums(Bool_t load=kFALSE)Definition TROOT.cxx:1754; TROOT::ProcessLineSyncLongptr_t ProcessLineSync(const char *line, Int_t *error=nullptr)Process interpreter command via TApplication::ProcessLine().Definition TROOT.cxx:2390; TROOT::InitInterpretervoid InitInterpreter()Initialize interpreter (cling)Definition TROOT.cxx:2064; TROOT::GetListOfGlobalsTCollection * GetListOfGlobals(Bool_t load=kFALSE)Return list containing the TGlobals currently defined.Definition TROOT.cxx:1788; TROOT::GetSelectedPadTVirtualPad * GetSelectedPad() constDefinition TROOT.h:271; TROOT::SetDirLevelstatic void SetDirLevel(Int_t level=0)Return Indentation level for ls().Definition TROOT.cxx:2918; TROOT::fSecContextsTSeqCollection * fSecContextsList of security contexts (TSecContext)Definition TROOT.h:161; TROOT::fWebDisplayTString fWebDisplayIf not empty it defines where web graphics should be rendered (cef, qt5, browser.....Definition TROOT.h:127; TROOT::GetTutorialsDirstatic const char * GetTutorialsDir()Get the tutorials directory in the installation.Definition TROOT.cxx:3215; TROOT::GetListOfFunctionOverloadsTCollection * GetListOfFunctionOverloads(const char *name) constReturn the collection of functions named ""name"".Definition TROOT.cxx:1672; TROOT::fCleanupsTSeqCollection * fCleanupsList of recursiveRemove collections.Definition TROOT.h:157; TROOT::Initializedstatic Bool_t Initialized()Return kTRUE if the TROOT object has been initialized.Definition TROOT.cxx:2910; TROOT::GetApplicationTApplication * GetApplication() constDefinition TROOT.h:209; TROOT::SetBatchvoid SetBatch(Bool_t batch=kTRUE)Set batch mode for ROOT If the argument evaluates to true, the session does not use interactive graph...Definition TROOT.cxx:2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8h_source.html:37683,secur,security,37683,doc/master/TROOT_8h_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8h_source.html,1,['secur'],['security']
Security,"OOT::GetListOfSpecials ; (; ); const. inline . Definition at line 246 of file TROOT.h. ◆ GetListOfStreamerInfo(). TSeqCollection * TROOT::GetListOfStreamerInfo ; (; ); const. inline . Definition at line 249 of file TROOT.h. ◆ GetListOfStyles(). TSeqCollection * TROOT::GetListOfStyles ; (; ); const. inline . Definition at line 241 of file TROOT.h. ◆ GetListOfTasks(). TSeqCollection * TROOT::GetListOfTasks ; (; ); const. inline . Definition at line 247 of file TROOT.h. ◆ GetListOfTypes(). TCollection * TROOT::GetListOfTypes ; (; Bool_t ; load = kFALSE). Return a dynamic list giving access to all TDataTypes (typedefs) currently defined. ; The list is populated on demand. Calling gROOT->GetListOfTypes()->FindObject(nameoftype);; will return the TDataType corresponding to 'nameoftype'. If the TDataType is not already in the list itself and the type does exist, a new TDataType will be created and added to the list.; Calling gROOT->GetListOfTypes()->ls(); // or Print(); list only the typedefs that have been previously accessed through the list (plus the builtins types). ; Definition at line 1865 of file TROOT.cxx. ◆ GetMacroDir(). const TString & TROOT::GetMacroDir ; (; ). static . Get the macro directory in the installation. Static utility function. ; Definition at line 3094 of file TROOT.cxx. ◆ GetMacroPath(). const char * TROOT::GetMacroPath ; (; ). static . Get macro search path. Static utility function. ; Definition at line 2762 of file TROOT.cxx. ◆ GetNclasses(). Int_t TROOT::GetNclasses ; (; ); const. Get number of classes. ; Definition at line 1876 of file TROOT.cxx. ◆ GetNtypes(). Int_t TROOT::GetNtypes ; (; ); const. Get number of types. ; Definition at line 1884 of file TROOT.cxx. ◆ GetPluginManager(). TPluginManager * TROOT::GetPluginManager ; (; ); const. inline . Definition at line 208 of file TROOT.h. ◆ GetRootFolder(). TFolder * TROOT::GetRootFolder ; (; ); const. inline . Definition at line 274 of file TROOT.h. ◆ GetRootSys(). const TString & TROOT::GetRoot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTROOT.html:59325,access,accessed,59325,doc/v632/classTROOT.html,https://root.cern,https://root.cern/doc/v632/classTROOT.html,1,['access'],['accessed']
Security,"OOT::GetListOfSpecials ; (; ); const. inline . Definition at line 246 of file TROOT.h. ◆ GetListOfStreamerInfo(). TSeqCollection * TROOT::GetListOfStreamerInfo ; (; ); const. inline . Definition at line 249 of file TROOT.h. ◆ GetListOfStyles(). TSeqCollection * TROOT::GetListOfStyles ; (; ); const. inline . Definition at line 241 of file TROOT.h. ◆ GetListOfTasks(). TSeqCollection * TROOT::GetListOfTasks ; (; ); const. inline . Definition at line 247 of file TROOT.h. ◆ GetListOfTypes(). TCollection * TROOT::GetListOfTypes ; (; Bool_t ; load = kFALSE). Return a dynamic list giving access to all TDataTypes (typedefs) currently defined. ; The list is populated on demand. Calling gROOT->GetListOfTypes()->FindObject(nameoftype);; will return the TDataType corresponding to 'nameoftype'. If the TDataType is not already in the list itself and the type does exist, a new TDataType will be created and added to the list.; Calling gROOT->GetListOfTypes()->ls(); // or Print(); list only the typedefs that have been previously accessed through the list (plus the builtins types). ; Definition at line 1865 of file TROOT.cxx. ◆ GetMacroDir(). const TString & TROOT::GetMacroDir ; (; ). static . Get the macro directory in the installation. Static utility function. ; Definition at line 3098 of file TROOT.cxx. ◆ GetMacroPath(). const char * TROOT::GetMacroPath ; (; ). static . Get macro search path. Static utility function. ; Definition at line 2762 of file TROOT.cxx. ◆ GetNclasses(). Int_t TROOT::GetNclasses ; (; ); const. Get number of classes. ; Definition at line 1876 of file TROOT.cxx. ◆ GetNtypes(). Int_t TROOT::GetNtypes ; (; ); const. Get number of types. ; Definition at line 1884 of file TROOT.cxx. ◆ GetPluginManager(). TPluginManager * TROOT::GetPluginManager ; (; ); const. inline . Definition at line 208 of file TROOT.h. ◆ GetRootFolder(). TFolder * TROOT::GetRootFolder ; (; ); const. inline . Definition at line 274 of file TROOT.h. ◆ GetRootSys(). const TString & TROOT::GetRoot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTROOT.html:59294,access,accessed,59294,doc/master/classTROOT.html,https://root.cern,https://root.cern/doc/master/classTROOT.html,1,['access'],['accessed']
Security,"OOT::Internal::TTreeReaderValueBase::fHaveStaticClassOffsetsbool fHaveStaticClassOffsetsWhether !fStaticClassOffsets.empty()Definition TTreeReaderValue.h:125; ROOT::Internal::TTreeReaderValueBase::GetAddressvoid * GetAddress()Returns the memory address of the object being read.Definition TTreeReaderValue.cxx:255; ROOT::Internal::TTreeReaderValueBase::EReadStatusEReadStatusDefinition TTreeReaderValue.h:68; ROOT::Internal::TTreeReaderValueBase::kReadError@ kReadErrorProblem reading data.Definition TTreeReaderValue.h:71; ROOT::Internal::TTreeReaderValueBase::kReadSuccess@ kReadSuccessData read okay.Definition TTreeReaderValue.h:69; ROOT::Internal::TTreeReaderValueBase::kReadNothingYet@ kReadNothingYetData now yet accessed.Definition TTreeReaderValue.h:70; ROOT::Internal::TTreeReaderValueBase::GetElementTypeNamestatic std::string GetElementTypeName(const std::type_info &ti)Stringify the template argument.Definition TTreeReaderValue.cxx:217; ROOT::Internal::TTreeReaderValueBase::fSetupStatusESetupStatus fSetupStatusSetup status of this data access.Definition TTreeReaderValue.h:127; ROOT::Internal::TTreeReaderValueBase::IsValidbool IsValid() constReturn true if the branch was setup and read correctly.Definition TTreeReaderValue.h:84; ROOT::Internal::TTreeReaderValueBase::GetDerivedTypeNamevirtual const char * GetDerivedTypeName() const =0; ROOT::Internal::TTreeReaderValueBase::fBranchNameTString fBranchNameName of the branch to read data from.Definition TTreeReaderValue.h:128; ROOT::Internal::TTreeReaderValueBase::ProxyReadTemplateROOT::Internal::TTreeReaderValueBase::EReadStatus ProxyReadTemplate()Try to read the value from the TBranchProxy, returns the status of the read.Definition TTreeReaderValue.cxx:145; ROOT::Internal::TTreeReaderValueBase::fTreeReaderTTreeReader * fTreeReaderTree reader we belong to.Definition TTreeReaderValue.h:130; ROOT::Internal::TTreeReaderValueBase::fDictTDictionary * fDictType that the branch should contain.Definition TTreeReaderValue.h:131; R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeReaderValue_8h_source.html:15532,access,access,15532,doc/master/TTreeReaderValue_8h_source.html,https://root.cern,https://root.cern/doc/master/TTreeReaderValue_8h_source.html,1,['access'],['access']
Security,"OOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:12288,access,access,12288,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,8,['access'],"['access', 'accessors']"
Security,"OOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(Scalar[] dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:12288,access,access,12288,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,8,['access'],"['access', 'accessors']"
Security,"OT 6 Analysis Workshop from; // http://root.cern.ch/drupal/content/root-6-analysis-workshop; //; // For more information on the TSelector framework see; // $ROOTSYS/README/README.SELECTOR or the ROOT User Manual.; // The following methods are defined in this file:; // SlaveBegin(): called after Begin(), when on PROOF called only on the; // slave servers, a convenient place to create your histograms.; // Process(): called for each event, in this function you decide what; // to read and fill your histograms.; // Terminate(): called at the end of the loop on the tree,; // a convenient place to draw/fit your histograms.; //; // To use this file, try the following session on your Tree T:; //;  ; #include ""TEfficiency.h""; #include ""TRandom.h""; #include ""TSelector.h""; #include ""TTreeReader.h""; #include ""TTreeReaderArray.h"";  ; class TutorialSelector : public TSelector {; public :;  ; TEfficiency* fEff;;  ; // Variables used to access and store the data; TTreeReader fReader; // The tree reader; TTreeReaderArray<double> fRaPt; // muon pt; TTreeReaderArray<bool> fRaTriggered; // trigger decision;  ; TutorialSelector(TTree * = 0): fEff(nullptr), fRaPt(fReader, ""muons.fPt""),; 				 fRaTriggered(fReader, ""muons.fTriggered"") { }; virtual ~TutorialSelector() { }; virtual void Init(TTree *tree);; virtual void SlaveBegin(TTree *tree);; virtual Bool_t Process(Long64_t entry);; virtual void Terminate();; virtual Int_t Version() const { return 2; };  ; ClassDef(TutorialSelector,0);; };;  ; void TutorialSelector::Init(TTree *tree); {; // The Init() function is called when the selector needs to initialize; // a new tree or chain. Typically here the branch addresses and branch; // pointers of the tree will be set.; // It is normally not necessary to make changes to the generated; // code, but the routine can be extended by the user if needed.; // Init() will be called many times when running on PROOF; // (once per file to be processed).;  ; // Associate the reader and the tree; fReader.Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/tutorialselectorc.html:2936,access,access,2936,d/tutorialselectorc.html,https://root.cern,https://root.cern/d/tutorialselectorc.html,1,['access'],['access']
Security,"OT automatically be rehashed. Use Rehash() for manual rehashing. ; Definition at line 43 of file THashTable.cxx. ◆ ~THashTable(). THashTable::~THashTable ; (; ). virtual . Delete a hashtable. ; Objects are not deleted unless the THashTable is the owner (set via SetOwner()). ; Definition at line 65 of file THashTable.cxx. Member Function Documentation. ◆ Add(). void THashTable::Add ; (; TObject * ; obj). overridevirtual . Add object to the hash table. ; Its position in the table will be determined by the value returned by its Hash() function. ; Implements TCollection.; Definition at line 92 of file THashTable.cxx. ◆ AddAll(). void THashTable::AddAll ; (; const TCollection * ; col). overridevirtual . Add all objects from collection col to this collection. ; Implemented for more efficient rehashing. ; Reimplemented from TCollection.; Definition at line 138 of file THashTable.cxx. ◆ AddBefore(). void THashTable::AddBefore ; (; const TObject * ; before, . TObject * ; obj . ). Add object to the hash table. ; Its position in the table will be determined by the value returned by its Hash() function. If and only if 'before' is in the same bucket as obj, obj is added in front of 'before' within the bucket's list. ; Definition at line 112 of file THashTable.cxx. ◆ AddImpl(). void THashTable::AddImpl ; (; Int_t ; slot, . TObject * ; obj . ). inlineprivate . Helper function doing the actual add to the table give a slot and object. ; This does not take any lock. ; Definition at line 78 of file THashTable.cxx. ◆ AverageCollisions(). Float_t THashTable::AverageCollisions ; (; ); const. inline . Definition at line 85 of file THashTable.h. ◆ Class(). static TClass * THashTable::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * THashTable::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t THashTable::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHashTable.html:17889,hash,hash,17889,doc/master/classTHashTable.html,https://root.cern,https://root.cern/doc/master/classTHashTable.html,1,['hash'],['hash']
Security,"OT does not issue CORS requests, therefore server and browsers can be used with their default settings. A simplified variant of such solution - copy only the top index.htm file from JSROOT package and specify the full path to modules/gui.mjs script like:; <script type=""module"">; import { openFile, draw } from 'https://root.cern/js/latest/modules/gui.mjs';; // ...; </script>; In the main <div> element one can specify many custom parameters like one do it in URL string:; <div id=""simpleGUI"" path=""files/path"" files=""userfile1.root;subdir/usefile2.root"">; loading scripts ...; </div>; 1.8 Reading local ROOT files; JSROOT can read files from local file system using HTML5 FileReader functionality. Main limitation here - user should interactively select files for reading. There is button “…” on the main JSROOT page, which starts file selection dialog. If valid ROOT file is selected, JSROOT will be able to normally read content of such file.; 1.9 JSROOT with THttpServer; THttpServer provides http access to objects from running ROOT application. JSROOT is used to implement the user interface in the web browsers.; The layout of the main page coming from THttpServer is very similar to normal JSROOT page. One could browse existing items and display them. A snapshot of running server can be seen on the demo page.; One could also specify similar URL parameters to configure the displayed items and drawing options.; It is also possible to display one single item from the THttpServer server like:; https://root.cern/js/latest/httpserver.C/Files/job1.root/hpxpy/draw.htm?opt=colz; 1.10 Data monitoring with JSROOT; 1.10.1 Monitoring with http server; The best possibility to organize the monitoring of data from a running application is to use THttpServer. In such case the client can always access the latest changes and request only the items currently displayed in the browser. To enable monitoring, one should activate the appropriate checkbox or provide monitoring parameter in the URL stri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html:18703,access,access,18703,root/htmldoc/guides/JSROOT/JSROOT.html,https://root.cern,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html,1,['access'],['access']
Security,"OT namespace after an ‘import ROOT’.; As of 5.08, the behaviour of ROOT globals is the same as python globals, which is sometimes counterintuitive: since they are references, they can be changed only if done so directly through their containing module. The following session shows that in detail:; >>> from ROOT import *; >>> print(gDebug); 0; >>> gROOT.ProcessLine( 'gDebug = 7;' ); >>> print(gDebug); 0 # local gDebug is unchanged; >>> gDebug = 5 # changes _local_ reference only; >>> print(gDebug); 5 # locally correct, but ...; >>> gROOT.ProcessLine( 'cout << gDebug << endl;' ); 7 # ... ROOT global unchanged; >>> import ROOT; >>> print(ROOT.gDebug); 7 # still the old value (not '5'); >>> ROOT.gDebug = 3 # changes ROOT module reference; >>> gROOT.ProcessLine( 'cout << gDebug << endl;' ); 3 # ROOT global properly changed; >>>; The above is another good reason to prefer ‘import ROOT’ over ‘from ROOT import *’.; 19.1.5.4 Access to Python; The access to Python from Cling goes through the TPython class, or directly if a Python object or class has crossed the border. The TPython class, which looks approximately like this:; class TPython {. public:; // load a Python script as if it were a macro; static void LoadMacro(const char* name);. // execute a Python statement (e.g. ""import ROOT""); static void Exec(const char* cmd);. // evaluate a Python expression (e.g. ""1+1""); static const TPyReturn& Eval(const char* expr);. // bind a ROOT object with, at the Python side, the name ""label""; static bool Bind(TObject* obj,const char* label);. // enter an interactive Python session (exit with ^D); static void Prompt();; };; LoadMacro(const char* name) - the argument is a name of a Python file that is to be executed ('execfile'), after which any new classes are automatically made available to Cling. Since it is non-selective, use with care.; ExecScript(const char* name,int argc=0,const char** argv=0) - the argument is a name of a python file that is to be executed (‘execfile’) in a private ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1055722,access,access,1055722,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['access'],['access']
Security,"OT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. accessiblecolorschemes.C File ReferenceTutorials » Graphics tutorials. Detailed Description; Choosing an appropriate color scheme is essential for making results easy to understand and interpret. ; Factors like colorblindness and converting colors to grayscale for publications can impact accessibility. Furthermore, results should be aesthetically pleasing. The following three color schemes, recommended by M. Petroff in arXiv:2107.02270v2 and available on GitHub under the MIT License, meet these criteria. ; void box(double x1, double y1, double x2, double y2,int col) {; auto b1 = new TBox(x1, y1, x2, y2);; b1->SetFillColor(col);; b1->Draw();; ; TColor *c = gROOT->GetColor(col);; auto tc = new TLatex((x2+x1)/2., 0.01+(y2+y1)/2., Form(""#splitline{%s}{%s}"",c->GetName(),c->GetTitle()));; tc->SetTextFont(42);; tc->SetTextAlign(23);; tc->SetTextSize(0.020);; tc->Draw();; }; ; void accessiblecolorschemes() {; auto C = new TCanvas(""C"",""C"",600,800);; int c;; double x, y;; double w = 0.2;; double h = 0.08;; auto t = new TText();; t->SetTextSize(0.025);; t->SetTextFont(42);; ; // 6-colors scheme; x = 0.1;; y = 0.1;; t->DrawText(x, y-h/2., ""6-colors scheme"");; for (c=kP6Blue; c<kP6Blue+6; c++) {; box(x, y, x+w, y+h,c);; y = y+h;; }; ; // 8-color scheme; y = 0.1;; x = 0.4;; t->DrawText(x, y-h/2., ""8-colors scheme"");; for (c=kP8Blue; c<kP8Blue+8; c++) {; box(x, y, x+w, y+h,c);; y = y+h;; }; ; // 10-color scheme; y = 0.1;; x = 0.7;; t->DrawText(x, y-h/2., ""10-colors scheme"");; for (c=kP10Blue; c<kP10Blue+10; c++) {; box(x, y, x+w, y+h,c);; y = y+h;; }; }; c#define c(i)Definition RSha256.hxx:101; h#define h(i)Definition RSha256.hxx:106; kP8Blue@ kP8BlueDefinition Rtypes.h:70; kP10Blue@ kP10BlueDefinition Rtypes.h:71; kP6Blue@ kP6BlueDefinition Rtypes.h:69; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; x2Option_t Option_t TPoint TPoint const char x2Definition TGWin32VirtualXProxy.cxx:70; x1Option_t Option_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/accessiblecolorschemes_8C.html:1036,access,accessiblecolorschemes,1036,doc/master/accessiblecolorschemes_8C.html,https://root.cern,https://root.cern/doc/master/accessiblecolorschemes_8C.html,1,['access'],['accessiblecolorschemes']
Security,"OT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion Val && ""isa<> used on a null pointer"" failed.; [#6350] - When in-memory TTree are written, they are not compressed.; [#6453] - Potential null pointer dereference in TPad::Close; [#6449] - Floating point exception in TPad (part 3); [#6578] - Using declaration of TGMainFrame constructor not taken into account; [#6381] - TH3 missing labels; [#6379] - Floating point exception in TCanvas; [#6374] - Floating point exception in TPad; [#6642] - THStack behaviour is not aligned with behaviour of other objects when drawing - TopMargin is non-zero; [#6446] - Possible Null pointer dereference in TPad; [#6375] - Segmentation violation in TPaveLabel class; [#6552] - PyROOT (de)serialization using pickle (or dill) fails without pre-import of ROOT for new PyROOT; [#6468] - 6.22 PyROOT seg faults when accessing array members; [#6675] - Jitted RDataFrame.Histo1D broken for vector<bool> types; [#6465] - ROOT signed-char conversion issue on AARCH64; [#6666] - TClass::GetListOfDataMembers returns an empty list even-though the information is available.; [#6725] - rootpcm does not record TEnum’s underlying type; [#6726] - TStreamerInfo::GenerateInfoForPair generates the wrong offset if an enum type is first.; [#6670] - segfault in TClass::InheritsFrom() depending on linking order; [#6443] - Spurrious auto-parsing (as seen with CMS file and libraries); [#6509] - [ROOT I/O] Warning: writing 1 byte into a region of size 0; [#6597] - pytest shipped in roottest is not compatible with py3.9; [#6677] - [bug] Clang builds ROOT libraries that emit FPEs; [#6784] - external nlohmann/json.hpp is not forwarded as dependency or should be linked PRIVATE?; [#6523] - TBufferMerger cannot handle TTree spanning over multiple files; [#6743] - ROOT crashes with no helpful error messages if a TApplication is not present and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:40630,access,accessing,40630,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['access'],['accessing']
Security,"OT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& b, ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& c) const. get internal data into 3 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c); }. void GetCoordinates(ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar* dest) const. get internal data into a C-style array of 3 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. bool operator==(const ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::PositionVector3D<ROOT::Math::Cylindrical3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const. Scalar X() const; ------ Individual element access, in various coordinate systems ------. Cartesian X, converting if necessary from internal coordinate system. { return fCoordinates.X(); }. Scalar Y() const. Cartesian Y, converting if necessary from internal coordinate system. { return fCoordinates.Y(); }. Scalar Z() const. Cartesian Z, converting if necessary from internal coordinate system. { return fCoordinates.Z(); }. Scalar R() const. Polar R, converting if necessary from internal coordinate system. { return fCoordinates.R(); }. Scalar Theta() const. Polar theta, converting if necessary from internal coordinate system. { return fCoordinates.Theta(); }. Scalar Phi() const. Polar phi, converting if necessary from internal coordinate system. { return fCoordinates.Phi(); }. Scalar Eta() const. Polar eta, converting if necessary from internal coordinate system. { return fCoordinates.Eta(); }. Scalar Rho() const. Cylindrical transverse component rho. { return fCoordinates.Rho(); }. Scalar Mag2() const; ----- Other fundamental pro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__PositionVector3D_-p1Cylindrical3D_double__-p1DefaultCoordinateSystemTag_.html:12649,access,access,12649,root/html526/ROOT__Math__PositionVector3D_-p1Cylindrical3D_double__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__PositionVector3D_-p1Cylindrical3D_double__-p1DefaultCoordinateSystemTag_.html,5,['access'],['access']
Security,"OT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalarz() const. Data Members; private:. ROOT::Math::Cartesian3D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXYZ(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). DisplacementVector3D & operator=(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>& ). Assignment from a foreign 3D vector type, for example, Hep3Vector; Precondition: v must implement methods x(), y() and z(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(const ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar* src). Set internal data based on a C-style array of 3 Scalar numbers. { fCoordinates.SetCoordinates(src); return *this; }. DisplacementVector3D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b, ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar c). Set internal data based on 3 Scalar numbers. { fCoordinates.SetCoordinates(a, b, c); return *this; }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1DefaultCoordinateSystemTag_.html:11600,access,access,11600,root/html526/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_Double32_t__-p1DefaultCoordinateSystemTag_.html,5,['access'],['access']
Security,"OT::Math::KahanSum< T, N >::Accumulate ; (; Iterator ; begin, . Iterator ; end, . T ; initialValue = T{} . ). inlinestatic . Iterate over a range and return an instance of a KahanSum. ; See Add(Iterator,Iterator) for details. Parameters. [in]beginBeginning of a range. ; [in]endEnd of the range. ; [in]initialValueOptional initial value. . Definition at line 211 of file Util.h. ◆ Add() [1/3]. template<typename T = double, unsigned int N = 1> . template<class Container_t > . void ROOT::Math::KahanSum< T, N >::Add ; (; const Container_t & ; inputs). inline . Fill from a container that supports index access. ; Parameters. [in]inputsContainer with index access such as std::vector or array. . Definition at line 195 of file Util.h. ◆ Add() [2/3]. template<typename T = double, unsigned int N = 1> . template<class Iterator > . void ROOT::Math::KahanSum< T, N >::Add ; (; Iterator ; begin, . Iterator ; end . ). inline . Accumulate from a range denoted by iterators. ; This function will auto-vectorise with random-access iterators. Parameters. [in]beginBeginning of a range. Needs to be a random access iterator for automatic vectorisation, because a contiguous block of memory needs to be read. ; [in]endEnd of the range. . Definition at line 180 of file Util.h. ◆ Add() [3/3]. template<typename T = double, unsigned int N = 1> . void ROOT::Math::KahanSum< T, N >::Add ; (; T ; x). inline . Single-element accumulation. Will not vectorise. ; Definition at line 165 of file Util.h. ◆ AddIndexed(). template<typename T = double, unsigned int N = 1> . void ROOT::Math::KahanSum< T, N >::AddIndexed ; (; T ; input, . std::size_t ; index . ). inline . Add input to the sum. ; Particularly helpful when filling from a for loop. This function can be inlined and auto-vectorised if the index parameter is used to enumerate consecutive fills. Use Add() or Accumulate() when no index is available. Parameters. [in]inputValue to accumulate. ; [in]indexIndex of the value. Determines internal accumulator that",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html:8679,access,access,8679,doc/master/classROOT_1_1Math_1_1KahanSum.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html,1,['access'],['access']
Security,"OT::Math::SVector< T, D >::operator> ; (; const SVector< T, D > & ; rhs); const. element wise comparison ; Definition at line 289 of file SVector.icc. ◆ operator>() [2/3]. template<class T , unsigned int D> . bool ROOT::Math::SVector< T, D >::operator> ; (; const T & ; rhs); const. element wise comparison ; Definition at line 280 of file SVector.icc. ◆ operator>() [3/3]. template<class T , unsigned int D> . template<class A > . bool ROOT::Math::SVector< T, D >::operator> ; (; const VecExpr< A, T, D > & ; rhs); const. element wise comparison ; Definition at line 299 of file SVector.icc. ◆ operator[]() [1/2]. template<class T , unsigned int D> . T & ROOT::Math::SVector< T, D >::operator[] ; (; unsigned int ; i). inline . read/write access of vector elements. Index starts from 0. ; Definition at line 588 of file SVector.icc. ◆ operator[]() [2/2]. template<class T , unsigned int D> . const T & ROOT::Math::SVector< T, D >::operator[] ; (; unsigned int ; i); const. inline . read-only access of vector elements. Index starts from 0. ; Definition at line 582 of file SVector.icc. ◆ Place_at() [1/2]. template<class T , unsigned int D> . template<unsigned int D2> . SVector< T, D > & ROOT::Math::SVector< T, D >::Place_at ; (; const SVector< T, D2 > & ; rhs, . unsigned int ; row . ). place a sub-vector starting from the given position ; Definition at line 490 of file SVector.icc. ◆ Place_at() [2/2]. template<class T , unsigned int D> . template<class A , unsigned int D2> . SVector< T, D > & ROOT::Math::SVector< T, D >::Place_at ; (; const VecExpr< A, T, D2 > & ; rhs, . unsigned int ; row . ). place a sub-vector expression starting from the given position ; Definition at line 507 of file SVector.icc. ◆ Print(). template<class T , unsigned int D> . std::ostream & ROOT::Math::SVector< T, D >::Print ; (; std::ostream & ; os); const. used by operator<<() ; Definition at line 521 of file SVector.icc. ◆ SetElements() [1/2]. template<class T , unsigned int D> . template<class InputIterato",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1SVector.html:21253,access,access,21253,doc/master/classROOT_1_1Math_1_1SVector.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1SVector.html,1,['access'],['access']
Security,"OTSYS + ""/files/online.htm"").Data());; 998 ; 999 } else {; 1000 auto wsptr = FindWS(arg->GetPathName());; 1001 ; 1002 auto handler = wsptr.get();; 1003 ; 1004 if (!handler); 1005 handler = dynamic_cast<THttpWSHandler *>(fSniffer->FindTObjectInHierarchy(arg->fPathName.Data()));; 1006 ; 1007 if (handler) {; 1008 ; 1009 arg->fContent = handler->GetDefaultPageContent().Data();; 1010 ; 1011 if (arg->fContent.find(""file:"") == 0) {; 1012 const char *fname = arg->fContent.c_str() + 5;; 1013 TString resolve;; 1014 if (!IsFileRequested(fname, resolve)) resolve = fname;; 1015 arg->fContent = ReadFileContent(resolve.Data());; 1016 }; 1017 ; 1018 version = handler->GetCodeVersion();; 1019 ; 1020 handler->VerifyDefaultPageContent(arg);; 1021 }; 1022 }; 1023 ; 1024 if (arg->fContent.empty() && arg->fFileName.IsNull() && arg->fPathName.IsNull() && IsWSOnly()) {; 1025 // Creating page with list of available widgets is disabled now for security reasons; 1026 // Later one can provide functionality back only if explicitly desired by the user; 1027 // BuildWSEntryPage();; 1028 ; 1029 arg->SetContent(""refused"");; 1030 arg->Set404();; 1031 }; 1032 ; 1033 if (arg->fContent.empty() && !IsWSOnly()) {; 1034 ; 1035 if (fDefaultPageCont.empty()); 1036 fDefaultPageCont = ReadFileContent(fDefaultPage);; 1037 ; 1038 arg->fContent = fDefaultPageCont;; 1039 }; 1040 ; 1041 if (arg->fContent.empty()) {; 1042 ; 1043 arg->Set404();; 1044 } else if (!arg->Is404()) {; 1045 ; 1046 ReplaceJSROOTLinks(arg, version);; 1047 ; 1048 const char *hjsontag = ""\""$$$h.json$$$\"""";; 1049 ; 1050 // add h.json caching; 1051 if (arg->fContent.find(hjsontag) != std::string::npos) {; 1052 TString h_json;; 1053 TRootSnifferStoreJson store(h_json, kTRUE);; 1054 const char *topname = fTopName.Data();; 1055 if (arg->fTopName.Length() > 0); 1056 topname = arg->fTopName.Data();; 1057 fSniffer->ScanHierarchy(topname, arg->fPathName.Data(), &store);; 1058 ; 1059 arg->ReplaceAllinContent(hjsontag, h_json.Data());; 1060 ; 1061 arg->A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THttpServer_8cxx_source.html:32785,secur,security,32785,doc/master/THttpServer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THttpServer_8cxx_source.html,1,['secur'],['security']
Security,"OTSYS; /opt/root; In the ROOTSYS directory are examples, executables, tutorials, header tutorials files, and, if you opted to download it, the source is here. The directories of special interest to us are bin, tutorials, lib, test, andinclude. The next figure shows the contents of these directories. ROOT framework directories. 1.6.1 $ROOTSYS/bin; The bin directory contains several executables. root; shows the ROOT splash screen and calls root.exe. root.exe; the executable that root calls, if you use a debugger such as gdb, you will need to run root.exe directly. rootcling; is the utility ROOT uses to create a class dictionary for Cling. rmkdepend; a modified version of makedepend that is used by the ROOT build system. root-config; a script returning the needed compile flags and libraries for projects that compile and link with ROOT. proofd; a small daemon used to authenticate a user of ROOT parallel processing capability (PROOF). proofserv; the actual PROOF process, which is started by proofd after a user, has successfully been authenticated. rootd; is the daemon for remote ROOT file access (see the TNetFile). 1.6.2 $ROOTSYS/lib; There are several ways to use ROOT, one way is to run the executable by typing root at the system prompt another way is to link with the ROOT libraries and make the ROOT classes available in your own program.; Here is a short description of the most relevant libraries, the ones marked with a * are only installed when the options specified them. libAsImage is the image manipulation library; libCling is the C++ interpreter (Cling); libCore is the Base classes; libEG is the abstract event generator interface classes; *libEGPythia is the Pythia5 event generator interface; *libEGPythia6 is the Pythia6 event generator interface; libFitPanel contains the GUI used for fitting; libGed contains the GUI used for editing the properties of histograms, graphs, etc.; libGeom is the geometry package (with builder and painter); libGpad is the pad and canvas ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:17576,authenticat,authenticated,17576,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['authenticat'],['authenticated']
Security,"Obj, int siz). protected:. voidTGenCollectionProxy::CheckFunctions() const; virtual voidTGenCollectionProxy::DeleteItem(Bool_t force, void* ptr) const; voidExpand(UInt_t nCurr, UInt_t left); TGenCollectionProxy*TGenCollectionProxy::Initialize() const; virtual TGenCollectionProxy*InitializeEx(); voidReadItems(int nElements, TBuffer& b); voidShrink(UInt_t nCurr, UInt_t left, Bool_t force); voidWriteItems(int nElements, TBuffer& b). Data Members; public:. enum TGenCollectionProxy::[unnamed] { kBIT_ISSTRING; kBIT_ISTSTRING; kBOOL_t; };; enum TVirtualCollectionProxy::EProperty { kIsInitialized; kIsAssociative; kIsEmulated; };. public:. static const Int_tTVirtualCollectionProxy::fgIteratorArenaSizegreater than sizeof(void*) + sizeof(UInt_t). protected:. TClassRefTVirtualCollectionProxy::fClass; TGenCollectionProxy::MethodTGenCollectionProxy::fClearMethod cache for container accessors: clear container; TGenCollectionProxy::MethodTGenCollectionProxy::fCollectMethod to collect objects from container; void*TGenCollectionProxy::fConstructContainer accessors: block construct; map<std::string,TObjArray*>*TGenCollectionProxy::fConversionReadMemberWiseArray of bundle of TStreamerInfoActions to stream out (read) derived from another class.; TGenCollectionProxy::Method0TGenCollectionProxy::fCreateEnvMethod to allocate an Environment holder.; void*TGenCollectionProxy::fDestructContainer accessors: block destruct; ROOT::TCollectionProxyInfo::EnvironBase*TGenCollectionProxy::fEnvAddress of the currently proxied object; void*TGenCollectionProxy::fFeedContainer accessors: block feed; TGenCollectionProxy::MethodTGenCollectionProxy::fFirstContainer accessors: generic iteration: first; void*TGenCollectionProxy::fFunctionCreateIterators; void*TGenCollectionProxy::fFunctionDeleteTwoIterators; TGenCollectionProxy::Value*TGenCollectionProxy::fKeyDescriptor of the key_type; stringTGenCollectionProxy::fNameName of the class being proxied.; TGenCollectionProxy::MethodTGenCollectionProxy::fNextCont",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEmulatedCollectionProxy.html:4273,access,accessors,4273,root/html528/TEmulatedCollectionProxy.html,https://root.cern,https://root.cern/root/html528/TEmulatedCollectionProxy.html,4,['access'],['accessors']
Security,"ObjArrayIter titer( rule->GetTarget() );; 790 TObjString *str;; 791 TObject *obj;; 792 ; 793 while( (obj = titer.Next() ) ) {; 794 str = (TObjString*)obj;; 795 if( HasTarget( str->String() ) ); 796 haveCommonTargets = kTRUE;; 797 }; 798 ; 799 if( !haveCommonTargets ); 800 return kFALSE;; 801 ; 802 //---------------------------------------------------------------------------; 803 // Check if there are conflicting checksums; 804 /////////////////////////////////////////////////////////////////////////////; 805 ; 806 if( fChecksumVect ) {; 807 std::vector<UInt_t>::iterator it;; 808 for( it = fChecksumVect->begin(); it != fChecksumVect->end(); ++it ); 809 if( rule->TestChecksum( *it ) ); 810 return kTRUE;; 811 }; 812 ; 813 //---------------------------------------------------------------------------; 814 // Check if there are conflicting versions; 815 /////////////////////////////////////////////////////////////////////////////; 816 ; 817 if( fVersionVect && rule->fVersionVect ); 818 {; 819 std::vector<std::pair<Int_t, Int_t> >::iterator it1;; 820 std::vector<std::pair<Int_t, Int_t> >::iterator it2;; 821 for( it1 = fVersionVect->begin(); it1 != fVersionVect->end(); ++it1 ) {; 822 for( it2 = rule->fVersionVect->begin();; 823 it2 != rule->fVersionVect->end(); ++it2 ) {; 824 //------------------------------------------------------------------; 825 // the rules conflict it their version ranges intersect; 826 ////////////////////////////////////////////////////////////////////; 827 ; 828 if( it1->first >= it2->first && it1->first <= it2->second ); 829 return kTRUE;; 830 ; 831 if( it1->first < it2->first && it1->second >= it2->first ); 832 return kTRUE;; 833 }; 834 }; 835 }; 836 return kFALSE;; 837}; 838 ; 839////////////////////////////////////////////////////////////////////////////////; 840/// Check if specified version string is correct and build version vector.; 841 ; 842Bool_t TSchemaRule::ProcessVersion( const TString& version ) const; 843{; 844 //----------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRule_8cxx_source.html:25795,checksum,checksums,25795,doc/master/TSchemaRule_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRule_8cxx_source.html,1,['checksum'],['checksums']
Security,"Object ** THashTable::GetObjectRef ; (; const TObject * ; obj); const. overridevirtual . Return address of pointer to obj. ; Implements TCollection.; Definition at line 296 of file THashTable.cxx. ◆ GetRehashLevel(). Int_t THashTable::GetRehashLevel ; (; ); const. inline . Definition at line 72 of file THashTable.h. ◆ GetSize(). Int_t THashTable::GetSize ; (; ); const. inlineoverridevirtual . Return the capacity of the collection, i.e. ; the current total amount of space that has been allocated so far. Same as Capacity. Use GetEntries to get the number of elements currently in the collection. ; Reimplemented from TCollection.; Definition at line 73 of file THashTable.h. ◆ IsA(). TClass * THashTable::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TCollection.; Definition at line 82 of file THashTable.h. ◆ MakeIterator(). TIterator * THashTable::MakeIterator ; (; Bool_t ; dir = kIterForward); const. overridevirtual . Returns a hash table iterator. ; Implements TCollection.; Definition at line 311 of file THashTable.cxx. ◆ operator=(). THashTable & THashTable::operator= ; (; const THashTable & ; ). privatedelete . ◆ Print() [1/5]. void TCollection::Print ; (; Option_t * ; option, . const char * ; wildcard, . Int_t ; recurse = 1 . ); const. virtual . Print the collection header and its elements that match the wildcard. ; If recurse is non-zero, descend into printing of collection-entries with recurse - 1. This means, if recurse is negative, the recursion is infinite.; Option is passed recursively, but wildcard is only used on the first level. ; Reimplemented from TCollection.; Definition at line 199 of file TCollection.cxx. ◆ Print() [2/5]. void TCollection::Print ; (; Option_t * ; option, . Int_t ; recurse . ); const. virtual . Print the collection header and its elements. ; If recurse is non-zero, descend into printing of collection-entries with recurse - 1. This means, if recurse is negative, the recursion is in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHashTable.html:23112,hash,hash,23112,doc/master/classTHashTable.html,https://root.cern,https://root.cern/doc/master/classTHashTable.html,1,['hash'],['hash']
Security,"Object::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidExpand(Int_t newsize); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Long64_tGetValue(Long64_t key); Long64_tGetValue(ULong64_t hash, Long64_t key); Long64_tGetValue(ULong64_t hash, Long64_t key, UInt_t& slot); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TExMap.html:2631,hash,hash,2631,root/html528/TExMap.html,https://root.cern,https://root.cern/root/html528/TExMap.html,1,['hash'],['hash']
Security,"Object::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidExpand(Int_t newsize); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Long64_tGetValue(Long64_t key); Long64_tGetValue(ULong64_t hash, Long64_t key); Long64_tGetValue(ULong64_t hash, Long64_t key, UInt_t& slot); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::ope",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TExMap.html:2631,hash,hash,2631,root/html530/TExMap.html,https://root.cern,https://root.cern/root/html530/TExMap.html,3,['hash'],['hash']
Security,"Object::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidExpand(Int_t newsize); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Long64_tGetValue(Long64_t key); Long64_tGetValue(ULong64_t hash, Long64_t key); Long64_tGetValue(ULong64_t hash, Long64_t key, UInt_t& slot); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TExMap.html:2575,hash,hash,2575,root/html602/TExMap.html,https://root.cern,https://root.cern/root/html602/TExMap.html,2,['hash'],['hash']
Security,"Object::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Long64_t&operator()(Long64_t key); Long64_t&operator()(ULong64_t hash, Long64_t key); TExMap&operator=(const TExMap&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRemove(Long64_t key); voidRemove(ULong64_t hash, Long64_t key); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TExMap.html:3966,hash,hash,3966,root/html530/TExMap.html,https://root.cern,https://root.cern/root/html530/TExMap.html,2,['hash'],['hash']
Security,"Object::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Long64_t&operator()(Long64_t key); Long64_t&operator()(ULong64_t hash, Long64_t key); TExMap&operator=(const TExMap&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRemove(Long64_t key); voidRemove(ULong64_t hash, Long64_t key); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TExMap.html:3966,hash,hash,3966,root/html534/TExMap.html,https://root.cern,https://root.cern/root/html534/TExMap.html,1,['hash'],['hash']
Security,"Object::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; RooLinkedListElem*RooLinkedList::findLink(const TObject* arg) const; voidTObject::MakeZombie(); voidRooLinkedList::swapWithNext(RooLinkedListElem* elem). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooLinkedListElem*RooLinkedList::_first! Link to first element of list; Int_tRooLinkedList::_hashThreshSize threshold for hashing; RooHashTable*RooLinkedList::_htableLink! Hash table by link pointer; RooHashTable*RooLinkedList::_htableName! Hash table by name ; RooLinkedListElem*RooLinkedList::_last! Link to last element of list; TStringRooLinkedList::_name; Int_tRooLinkedList::_sizeCurrent size of list. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooRefCountList(); Default constructor construct lists with initial hash table size of 17. void Add(TObject* obj, Int_t count); Add object to list with given reference count increment; List takes ownership of object. Bool_t Remove(TObject* obj); Remove object from list and if reference count; reaches zero delete object itself as well. Bool_t RemoveAll(TObject* obj); Remove object from list and delete object itself; regardless of reference count. Int_t refCount(TObject* obj); Return reference count associated with 'obj'. RooRefCountList(). virtual ~RooRefCountList(); {}. void Add(TObject* arg); { Add(arg,1) ; }. » Last changed: Mon Dec 7 13:48:57 2009 » Last generated: 2009-12-07 13:48; This page",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRefCountList.html:6479,hash,hashing,6479,root/html526/RooRefCountList.html,https://root.cern,https://root.cern/root/html526/RooRefCountList.html,1,['hash'],['hashing']
Security,"Object::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; RooLinkedListElem*RooLinkedList::findLink(const TObject* arg) const; voidTObject::MakeZombie(); voidRooLinkedList::swapWithNext(RooLinkedListElem* elem). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooLinkedListElem*RooLinkedList::_first! Link to first element of list; Int_tRooLinkedList::_hashThreshSize threshold for hashing; RooHashTable*RooLinkedList::_htableLink! Hash table by link pointer; RooHashTable*RooLinkedList::_htableName! Hash table by name ; RooLinkedListElem*RooLinkedList::_last! Link to last element of list; TStringRooLinkedList::_name; Int_tRooLinkedList::_sizeCurrent size of list. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooRefCountList(); Default constructor construct lists with initial hash table size of 17. void Add(TObject* obj, Int_t count); Add object to list with given reference count increment; List takes ownership of object. Bool_t Remove(TObject* obj); Remove object from list and if reference count; reaches zero delete object itself as well. Bool_t RemoveAll(TObject* obj); Remove object from list and delete object itself; regardless of reference count. Int_t refCount(TObject* obj); Return reference count associated with 'obj'. RooRefCountList(). virtual ~RooRefCountList(); {}. void Add(TObject* arg); { Add(arg,1) ; }. » Last changed: Mon Jul 4 15:23:54 2011 » Last generated: 2011-07-04 15:23; This page",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooRefCountList.html:6534,hash,hashing,6534,root/html530/RooRefCountList.html,https://root.cern,https://root.cern/root/html530/RooRefCountList.html,1,['hash'],['hashing']
Security,"Object::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; RooLinkedListElem*RooLinkedList::findLink(const TObject* arg) const; voidTObject::MakeZombie(); voidRooLinkedList::swapWithNext(RooLinkedListElem* elem). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooLinkedListElem*RooLinkedList::_first! Link to first element of list; Int_tRooLinkedList::_hashThreshSize threshold for hashing; RooHashTable*RooLinkedList::_htableLink! Hash table by link pointer; RooHashTable*RooLinkedList::_htableName! Hash table by name ; RooLinkedListElem*RooLinkedList::_last! Link to last element of list; TStringRooLinkedList::_name; Int_tRooLinkedList::_sizeCurrent size of list. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooRefCountList(); Default constructor construct lists with initial hash table size of 17. void Add(TObject* obj, Int_t count); Add object to list with given reference count increment; List takes ownership of object. Bool_t Remove(TObject* obj); Remove object from list and if reference count; reaches zero delete object itself as well. Bool_t RemoveAll(TObject* obj); Remove object from list and delete object itself; regardless of reference count. Int_t refCount(TObject* obj); Return reference count associated with 'obj'. RooRefCountList(). virtual ~RooRefCountList(); {}. void Add(TObject* arg); { Add(arg,1) ; }. » Last changed: Sat Oct 9 06:58:43 2010 » Last generated: 2010-10-09 06:58; This page",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooRefCountList.html:6465,hash,hashing,6465,root/html528/RooRefCountList.html,https://root.cern,https://root.cern/root/html528/RooRefCountList.html,1,['hash'],['hashing']
Security,"Object::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; RooLinkedListElem*RooLinkedList::findLink(const TObject* arg) const; voidTObject::MakeZombie(); voidRooLinkedList::swapWithNext(RooLinkedListElem* elem). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooLinkedListElem*RooLinkedList::_first! Link to first element of list; Int_tRooLinkedList::_hashThreshSize threshold for hashing; RooHashTable*RooLinkedList::_htableLink! Hash table by link pointer; RooHashTable*RooLinkedList::_htableName! Hash table by name ; RooLinkedListElem*RooLinkedList::_last! Link to last element of list; TStringRooLinkedList::_name; Int_tRooLinkedList::_sizeCurrent size of list. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooRefCountList(); Default constructor construct lists with initial hash table size of 17. void Add(TObject* obj, Int_t count); Add object to list with given reference count increment; List takes ownership of object. Bool_t Remove(TObject* obj); Remove object from list and if reference count; reaches zero delete object itself as well. Bool_t RemoveAll(TObject* obj); Remove object from list and delete object itself; regardless of reference count. Int_t refCount(TObject* obj); Return reference count associated with 'obj'. RooRefCountList(). virtual ~RooRefCountList(); {}. void Add(TObject* arg); { Add(arg,1) ; }. » Last changed: Thu Nov 3 20:09:10 2011 » Last generated: 2011-11-03 20:09; This page",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooRefCountList.html:6578,hash,hashing,6578,root/html532/RooRefCountList.html,https://root.cern,https://root.cern/root/html532/RooRefCountList.html,1,['hash'],['hashing']
Security,"Object; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TSecContext (const TSecContext &);  copy constructor ;  ; TSecContext & operator= (const TSecContext &);  assignement operator ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; void Cleanup ();  Cleanup what is still active. ;  ; virtual Bool_t CleanupSecContext (Bool_t all);  Ask remote client to cleanup security context 'ctx' If 'all', all sec context with the same host as ctx are cleaned. ;  . Private Attributes; TList * fCleanup;  ; void * fContext;  ; TDatime fExpDate;  ; TString fHost;  ; TString fID;  ; Int_t fMethod;  ; TString fMethodName;  ; Int_t fOffSet;  ; TString fToken;  ; TString fUser;  . Friends; class TRootSecContext;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSecContext.html:11010,secur,security,11010,doc/master/classTSecContext.html,https://root.cern,https://root.cern/doc/master/classTSecContext.html,1,['secur'],['security']
Security,"OfEnumsWithLock.; Definition at line 95 of file TListOfEnums.h. ◆ IsLoaded(). Bool_t TListOfEnums::IsLoaded ; (; ); const. inline . Definition at line 80 of file TListOfEnums.h. ◆ Load(). void TListOfEnums::Load ; (; ). private . Load all the DataMembers known to the interpreter for the scope 'fClass' into this collection. ; Definition at line 337 of file TListOfEnums.cxx. ◆ MapObject(). void TListOfEnums::MapObject ; (; TObject * ; obj). private . Add pair<id, object> to the map of functions and their ids. ; Definition at line 56 of file TListOfEnums.cxx. ◆ operator=(). TListOfEnums & TListOfEnums::operator= ; (; const TListOfEnums & ; ). privatedelete . ◆ RecursiveRemove(). void TListOfEnums::RecursiveRemove ; (; TObject * ; obj). overridevirtual . Remove object from this collection and recursively remove the object from all other objects (and collections). ; This function overrides TCollection::RecursiveRemove that calls the Remove function. THashList::Remove cannot be called because it uses the hash value of the hash table. This hash value is not available anymore when RecursiveRemove is called from the TObject destructor. ; Reimplemented from THashList.; Reimplemented in TListOfEnumsWithLock.; Definition at line 293 of file TListOfEnums.cxx. ◆ Remove() [1/2]. TObject * TListOfEnums::Remove ; (; TObject * ; obj). overridevirtual . Remove object from the list. ; Reimplemented from THashList.; Reimplemented in TListOfEnumsWithLock.; Definition at line 305 of file TListOfEnums.cxx. ◆ Remove() [2/2]. TObject * TListOfEnums::Remove ; (; TObjLink * ; lnk). overridevirtual . Remove object via its objlink from the list. ; Reimplemented from THashList.; Reimplemented in TListOfEnumsWithLock.; Definition at line 321 of file TListOfEnums.cxx. ◆ SetClass(). void TListOfEnums::SetClass ; (; TClass * ; cl). inlineprivate . Definition at line 56 of file TListOfEnums.h. ◆ Streamer(). void TListOfEnums::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the col",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfEnums.html:30971,hash,hash,30971,doc/master/classTListOfEnums.html,https://root.cern,https://root.cern/doc/master/classTListOfEnums.html,2,['hash'],['hash']
Security,"OnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TX11GLManager::TX11GLImpl*fPimpl. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TX11GLManager(); Constructor. ~TX11GLManager(); Destructor. Int_t InitGLWindow(Window_t winID); Try to find correct visual. Int_t CreateGLContext(Int_t winInd); Context creation requires Display * and XVisualInfo; (was saved for such winInd). Bool_t MakeCurrent(Int_t devInd); Make GL context current. void Flush(Int_t ctxInd); Swaps buffers or copy pixmap. Bool_t CreateGLPixmap(TX11GLManager::TGLContext_t& ); Create GL pixmap. Bool_t AttachOffScreenDevice(Int_t ctxInd, Int_t x, Int_t y, UInt_t w, UInt_t h); Attach off screen device. Bool_t ResizeOffScreenDevice(Int_t devInd, Int_t x, Int_t y, UInt_t w, UInt_t h); Resize off screen devive. void SelectOffScreenDevice(Int_t devInd); Selects off-screen device to make it accessible by gVirtualX. void MarkForDirectCopy(Int_t devInd, Bool_t ); Selection-rotation support for TPad/TCanvas. void ReadGLBuffer(Int_t devInd); GL buffer is read info buffer, after that lines are reordered; into XImage, XImage copied into pixmap. void DeleteGLContext(Int_t devInd); Deletes GLX context and frees pixmap and image (if any). Int_t GetVirtualXInd(Int_t devInd); Returns an index suitable for gVirtualX. void ExtractViewport(Int_t devInd, Int_t* vp); Returns the current dimensions of a GL pixmap. void PaintSingleObject(TVirtualGLPainter* ); Paint a single object. void PrintViewer(TVirtualViewer3D* vv); Print viewer. Bool_t SelectManip(TVirtualGLManip* manip, const TGLCamera* camera, const TGLRect* rect, const TGLBoundingBox* sceneBox); Select manipulator. void PanObject(TVirtualGLPainter* o, Int_t x, Int_t y); Pan objects. Bool_t PlotSelected(TVirtualGLPainter* plot, Int_t px, Int_t py); Analog of TObject::DistancetoPrimitive. char * GetPlotIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TX11GLManager.html:7490,access,accessible,7490,root/html528/TX11GLManager.html,https://root.cern,https://root.cern/root/html528/TX11GLManager.html,4,['access'],['accessible']
Security,"Option_t * ; targetname = """"); const. overridevirtual . The ls function lists the contents of a class on stdout. ; Ls output is typically much less verbose then Dump(). ; Reimplemented from TObject.; Definition at line 177 of file TSchemaRule.cxx. ◆ operator=(). TSchemaRule & TSchemaRule::operator= ; (; const TSchemaRule & ; rhs). Copy operator. ; Definition at line 125 of file TSchemaRule.cxx. ◆ operator==(). Bool_t TSchemaRule::operator== ; (; const TSchemaRule & ; rhs); const. Return true if the rule have the same effects. ; Definition at line 147 of file TSchemaRule.cxx. ◆ ParseChecksum(). UInt_t TSchemaRule::ParseChecksum ; (; const char * ; checksum); const. private . Parse the checksum in the given string. ; Returns either the checksum or zero if the string is not a hex or decimal number. ; Definition at line 933 of file TSchemaRule.cxx. ◆ ProcessChecksum(). Bool_t TSchemaRule::ProcessChecksum ; (; const TString & ; checksum); const. private . Check if specified checksum string is correct and build checksum vector. ; Definition at line 887 of file TSchemaRule.cxx. ◆ ProcessDeclaration(). void TSchemaRule::ProcessDeclaration ; (; TObjArray * ; array, . const TString & ; list . ). staticprivate . Split the list as a declaration into as a TObjArray of TNamed(name,type). ; Definition at line 974 of file TSchemaRule.cxx. ◆ ProcessList(). void TSchemaRule::ProcessList ; (; TObjArray * ; array, . const TString & ; list . ). staticprivate . Split the list as a comma separated list into a TObjArray of TObjString. ; Definition at line 953 of file TSchemaRule.cxx. ◆ ProcessVersion(). Bool_t TSchemaRule::ProcessVersion ; (; const TString & ; version); const. private . Check if specified version string is correct and build version vector. ; Definition at line 842 of file TSchemaRule.cxx. ◆ SetAttributes(). void TSchemaRule::SetAttributes ; (; const TString & ; attributes). Set the attributes code of this rule. ; Definition at line 656 of file TSchemaRule.cxx. ◆ SetChecksum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:23052,checksum,checksum,23052,doc/v632/classROOT_1_1TSchemaRule.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html,4,['checksum'],['checksum']
Security,"Owner( kFALSE );; 334 ; 335 while( (obj = it.Next()) ) {; 336 TSchemaRule* rule = (TSchemaRule*)obj;; 337 if( rule->GetSourceClass() == source && rule->TestVersion( version ) ); 338 arr.push_back( rule );; 339 }; 340 ; 341 return arr;; 342}; 343 ; 344////////////////////////////////////////////////////////////////////////////////; 345/// Return all the rules that applies to the specified checksum of the given 'source' class.; 346/// User has to delete the returned array; 347 ; 348const TSchemaRuleSet::TMatches TSchemaRuleSet::FindRules( const TString &source, UInt_t checksum ) const; 349{; 350 TObject* obj;; 351 TObjArrayIter it( fAllRules );; 352 TMatches arr;; 353 // arr->SetOwner( kFALSE );; 354 ; 355 while( (obj = it.Next()) ) {; 356 TSchemaRule* rule = (TSchemaRule*)obj;; 357 if( rule->GetSourceClass() == source && rule->TestChecksum( checksum ) ); 358 arr.push_back( rule );; 359 }; 360 ; 361 return arr;; 362}; 363 ; 364////////////////////////////////////////////////////////////////////////////////; 365/// Return all the rules that applies to the specified version OR checksum of the given 'source' class.; 366/// User has to delete the returned array; 367 ; 368const TSchemaRuleSet::TMatches TSchemaRuleSet::FindRules( const TString &source, Int_t version, UInt_t checksum ) const; 369{; 370 TObject* obj;; 371 TObjArrayIter it( fAllRules );; 372 TMatches arr;; 373 // arr->SetOwner( kFALSE );; 374 ; 375 while( (obj = it.Next()) ) {; 376 TSchemaRule* rule = (TSchemaRule*)obj;; 377 if( rule->GetSourceClass() == source && ( rule->TestVersion( version ) || rule->TestChecksum( checksum ) ) ); 378 arr.push_back( rule );; 379 }; 380 ; 381 return arr;; 382}; 383 ; 384////////////////////////////////////////////////////////////////////////////////; 385 ; 386TClass* TSchemaRuleSet::GetClass(); 387{; 388 return fClass;; 389}; 390 ; 391////////////////////////////////////////////////////////////////////////////////; 392 ; 393UInt_t TSchemaRuleSet::GetClassCheckSum() const; 394{",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRuleSet_8cxx_source.html:13393,checksum,checksum,13393,doc/master/TSchemaRuleSet_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRuleSet_8cxx_source.html,1,['checksum'],['checksum']
Security,"P archive including the archive comment at the current file position. ;  ; Int_t ReadMemberHeader (TZIPMember *member);  Read the member header of the ZIP archive. ;  ; Long64_t ReadZip64EndLocator (Long64_t pos);  Read Zip64 end of central directory locator. ;  ; Int_t ReadZip64EndRecord (Long64_t pos);  Read Zip64 end of central directory record. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fComment;  Archive comment. ;  ; Long64_t fDirOffset;  Central directory offset (from the beginning of the archive) ;  ; Long64_t fDirPos;  Central directory position. ;  ; Long64_t fDirSize;  Central directory size. ;  ;  Protected Attributes inherited from TArchiveFile; TString fArchiveName;  Archive file name. ;  ; TArchiveMember * fCurMember;  Current archive member. ;  ; TFile * fFile;  File stream used to access the archive. ;  ; Int_t fMemberIndex;  Index of sub-file in archive. ;  ; TString fMemberName;  Sub-file name. ;  ; TObjArray * fMembers;  Members in this archive. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Protected Member Functions inherited from TArchiveFile; static Bool_t ParseUrl (const char *url, TString &archive, TString &member, TStri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTZIPFile.html:17869,access,access,17869,doc/master/classTZIPFile.html,https://root.cern,https://root.cern/doc/master/classTZIPFile.html,1,['access'],['access']
Security,"P6Blue+6; c++) {; box(x, y, x+w, y+h,c);; y = y+h;; }; ; // 8-color scheme; y = 0.1;; x = 0.4;; t->DrawText(x, y-h/2., ""8-colors scheme"");; for (c=kP8Blue; c<kP8Blue+8; c++) {; box(x, y, x+w, y+h,c);; y = y+h;; }; ; // 10-color scheme; y = 0.1;; x = 0.7;; t->DrawText(x, y-h/2., ""10-colors scheme"");; for (c=kP10Blue; c<kP10Blue+10; c++) {; box(x, y, x+w, y+h,c);; y = y+h;; }; }; c#define c(i)Definition RSha256.hxx:101; h#define h(i)Definition RSha256.hxx:106; kP8Blue@ kP8BlueDefinition Rtypes.h:70; kP10Blue@ kP10BlueDefinition Rtypes.h:71; kP6Blue@ kP6BlueDefinition Rtypes.h:69; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; x2Option_t Option_t TPoint TPoint const char x2Definition TGWin32VirtualXProxy.cxx:70; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70; y1Option_t Option_t TPoint TPoint const char y1Definition TGWin32VirtualXProxy.cxx:70; gROOT#define gROOTDefinition TROOT.h:406; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; TBoxCreate a Box.Definition TBox.h:22; TCanvasThe Canvas class.Definition TCanvas.h:23; TColorThe color creation and management class.Definition TColor.h:21; TColor::GetColorstatic Int_t GetColor(const char *hexcolor)Static method returning color number for color specified by hex color string of form: ""#rrggbb"",...Definition TColor.cxx:1920; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TTextBase class for several text objects.Definition TText.h:22; boxvoid box(Int_t pat, Double_t x1, Double_t y1, Double_t x2, Double_t y2)Definition fillpatterns.C:1; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; AuthorOlivier Couet ; Definition in file accessiblecolorschemes.C. tutorialsgraphicsaccessiblecolorschemes.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/accessiblecolorschemes_8C.html:3161,access,accessiblecolorschemes,3161,doc/master/accessiblecolorschemes_8C.html,https://root.cern,https://root.cern/doc/master/accessiblecolorschemes_8C.html,1,['access'],['accessiblecolorschemes']
Security,"P; DOUBLE PRECISION PHEP,VHEP. The generic member functions SetParameter and GetParameter can be; overloaded to set and get parameters of the event generator. Note, if the derived class interfaces a (set of) Fortran common; blocks (like TPythia, TVenus does), one better make the derived; class a singleton. That is, something like. class MyGenerator : public TGenerator; {; public:; static MyGenerator* Instance(); {; if (!fgInstance) fgInstance = new MyGenerator;; return fgInstance;; }; void GenerateEvent() { ... }; void ImportParticles(TClonesArray* a, Option_t opt="""") {...}; Int_t ImportParticles(Option_t opt="""") { ... }; Int_t SetParameter(const char* name, Double_t val) { ... }; Double_t GetParameter(const char* name) { ... }; virtual ~MyGenerator() { ... }; protected:; MyGenerator() { ... }; MyGenerator(const MyGenerator& o) { ... }; MyGenerator& operator=(const MyGenerator& o) { ... }; static MyGenerator* fgInstance;; ClassDef(MyGenerator,0);; };. Having multiple objects accessing the same common blocks is not; safe. concrete TGenerator classes can be loaded in scripts and subseqent-; ly used in compiled code:. MyRun.h; class MyRun : public TObject; {; public:; static MyRun* Instance() { ... }; void SetGenerator(TGenerator* g) { fGenerator = g; }; void Run(Int_t n, Option_t* option=""""); {; TFile* file = TFile::Open(""file.root"",""RECREATE"");; TTree* tree = new TTree(""T"",""T"");; TClonesArray* p = new TClonesArray(""TParticles"");; tree->Branch(""particles"", &p);; for (Int_t event = 0; event < n; event++) {; fGenerator->GenerateEvent();; fGenerator->ImportParticles(p,option);; tree->Fill();; }; file->Write();; file->Close();; }. protected:; TGenerator* fGenerator;; ClassDef(MyRun,0);; };. Config.C; void Config(); {; MyRun* run = MyRun::Instance();; run->SetGenerator(MyGenerator::Instance());; }. main.cxx; int; main(int argc, char** argv); {; TApplication app("""", 0, 0);; gSystem->ProcessLine("".x Config.C"");; MyRun::Instance()->Run(10);; return 0;; }. This is especially us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGenerator.html:2557,access,accessing,2557,root/html528/TGenerator.html,https://root.cern,https://root.cern/root/html528/TGenerator.html,6,['access'],['accessing']
Security,"PNumber of entries.; auto_ptr<TGLHistPainter>fPainter; const Double_t*fV1V1.; Rgl::Range_tfV1MinMaxV1 range.; Double_tfV1Rangemax - min.; const Double_t*fV2V2.; Rgl::Range_tfV2MinMaxV2 range.; Double_tfV2Rangemax - min.; const Double_t*fV3V3.; Rgl::Range_tfV3MinMaxV3 range.; Double_tfV3Rangemax - min.; const Double_t*fV4V4.; Bool_tfV4IsString; Rgl::Range_tfV4MinMaxV4 range.; const Double_t*fV5V5.; Rgl::Range_tfV5MinMaxV5 range.; TAxisfXAxis; TAxisfYAxis; TAxisfZAxis; static TGL5DDataSet::EdefaultskDefaultNB. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGL5DDataSet(TTree* inputData); Constructor. Reads data from TTree,; estimates ranges, creates a painter. Int_t DistancetoPrimitive(Int_t px, Int_t py); Check, if the object is under cursor. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Action. char * GetObjectInfo(Int_t px, Int_t py) const; Info for status bar. void Paint(Option_t* option); Paint. TGL5DPainter * GetRealPainter() const; Get access to painter (for GUI-editor). void SelectPoints(Double_t v4Level, Double_t range); ""Select"" sub-range from source data; - remember indices of ""good"" points. UInt_t SelectedSize() const; Size of selected sub-range. Double_t V1(UInt_t ind) const; V1 from sub-range, converted to unit cube. Double_t V2(UInt_t ind) const; V2 from sub-range, converted to unit cube. Double_t V3(UInt_t ind) const; V3 from sub-range, converted to unit cube. TAxis * GetXAxis() const; X axis for plot. TAxis * GetYAxis() const; Y axis for plot. TAxis * GetZAxis() const; Z axis for plot. const Rgl::Range_t & GetXRange() const; V1 range (X). const Rgl::Range_t & GetYRange() const; V2 range (Y). const Rgl::Range_t & GetZRange() const; V3 range (Z). const Rgl::Range_t & GetV4Range() const; V4 range. Double_t V1ToUnitCube(Double_t v1) const; V1 to unit cube. Double_t V2ToUnitCube(Double_t v2) const; V2 to unit cube. Double_t V3ToUnitCube(Double_t v3) const; V3 to unit cube. TGL5DDataSet(TTree* inputData). » A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGL5DDataSet.html:7495,access,access,7495,root/html602/TGL5DDataSet.html,https://root.cern,https://root.cern/root/html602/TGL5DDataSet.html,2,['access'],['access']
Security,"Paint (Option_t *option="""") override;  Paint all objects in this collection. ;  ; virtual void Print (Option_t *option, const char *wildcard, Int_t recurse=1) const;  Print the collection header and its elements that match the wildcard. ;  ; virtual void Print (Option_t *option, Int_t recurse) const;  Print the collection header and its elements. ;  ; virtual void Print (Option_t *option, TPRegexp &regexp, Int_t recurse=1) const;  Print the collection header and its elements that match the regexp. ;  ; void Print (Option_t *option="""") const override;  Default print for collections, calls Print(option, 1). ;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the object from all other objects (and collections). ;  ; virtual TObject * Remove (TObject *obj)=0;  ; void RemoveAll ();  ; virtual void RemoveAll (TCollection *col);  Remove all objects in collection col from this collection. ;  ; void SetCurrentCollection ();  Set this collection to be the globally accessible collection. ;  ; void SetName (const char *name);  ; virtual void SetOwner (Bool_t enable=kTRUE);  Set whether this collection is the owner (enable==true) of its content. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool UseRWLock (Bool_t enable=true);  Set this collection to use a RW lock upon access, making it thread safe. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write all objects in this collection. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write all objects in this collection. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *metho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCollection.html:5815,access,accessible,5815,doc/v632/classTCollection.html,https://root.cern,https://root.cern/doc/v632/classTCollection.html,2,['access'],['accessible']
Security,"Paint (Option_t *option="""") override;  Paint all objects in this collection. ;  ; virtual void Print (Option_t *option, const char *wildcard, Int_t recurse=1) const;  Print the collection header and its elements that match the wildcard. ;  ; virtual void Print (Option_t *option, Int_t recurse) const;  Print the collection header and its elements. ;  ; virtual void Print (Option_t *option, TPRegexp &regexp, Int_t recurse=1) const;  Print the collection header and its elements that match the regexp. ;  ; void Print (Option_t *option="""") const override;  Default print for collections, calls Print(option, 1). ;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the object from all other objects (and collections). ;  ; virtual TObject * Remove (TObject *obj)=0;  ; void RemoveAll ();  ; virtual void RemoveAll (TCollection *col);  Remove all objects in collection col from this collection. ;  ; void SetCurrentCollection ();  Set this collection to be the globally accessible collection. ;  ; void SetName (const char *name);  ; virtual void SetOwner (Bool_t enable=kTRUE);  Set whether this collection is the owner (enable==true) of its content. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool UseRWLock (Bool_t enable=true);  Set this collection to use a RW lock upon access, making it thread safe. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write all objects in this collection. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write all objects in this collection. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSeqCollection.html:5580,access,accessible,5580,doc/master/classTSeqCollection.html,https://root.cern,https://root.cern/doc/master/classTSeqCollection.html,1,['access'],['accessible']
Security,"PhiE4D<double>::Scalar* src). Set internal data based on an array of 4 Scalar numbers. { fPt=src[0]; fEta=src[1]; fPhi=src[2]; fE=src[3]; Restrict(); }. void GetCoordinates(ROOT::Math::PtEtaPhiE4D<double>::Scalar* dest) const. get internal data into an array of 4 Scalar numbers. { dest[0] = fPt; dest[1] = fEta; dest[2] = fPhi; dest[3] = fE; }. void SetCoordinates(ROOT::Math::PtEtaPhiE4D<double>::Scalar pt, ROOT::Math::PtEtaPhiE4D<double>::Scalar eta, ROOT::Math::PtEtaPhiE4D<double>::Scalar phi, ROOT::Math::PtEtaPhiE4D<double>::Scalar e). Set internal data based on 4 Scalar numbers. { fPt=pt; fEta = eta; fPhi = phi; fE = e; Restrict(); }. GetCoordinates(ROOT::Math::PtEtaPhiE4D<double>::Scalar& pt, ROOT::Math::PtEtaPhiE4D<double>::Scalar& eta, ROOT::Math::PtEtaPhiE4D<double>::Scalar& phi, ROOT::Math::PtEtaPhiE4D<double>::Scalar& e) const. get internal data into 4 Scalar numbers. { pt=fPt; eta=fEta; phi = fPhi; e = fE; }. Scalar Pt() const; --------- Coordinates and Coordinate-like Scalar properties -------------; 4-D Cylindrical eta coordinate accessors. { return fPt; }. Scalar Eta() const; { return fEta; }. Scalar Phi() const; { return fPhi; }. Scalar E() const; { return fE; }. Scalar Perp() const; { return Pt(); }. Scalar Rho() const; { return Pt(); }. Scalar T() const; { return E(); }. Scalar Px() const; other coordinate representation. { return fPt*cos(fPhi);}. Scalar X() const; { return Px(); }. Scalar Py() const; { return fPt*sin(fPhi);}. Scalar Y() const; { return Py(); }. Scalar Pz() const. Scalar Z() const; { return Pz(); }. Scalar P() const. magnitude of momentum. Scalar R() const; { return P(); }. Scalar P2() const. squared magnitude of spatial components (momentum squared). { Scalar p = P(); return p*p; }. Scalar M2() const. vector magnitude squared (or mass squared). { Scalar p = P(); return fE*fE - p*p; }. Scalar Mag2() const; { return M2(); }. Scalar M() const. invariant mass. Scalar Mag() const; { return M(); }. Scalar Pt2() const. transverse spatial c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__PtEtaPhiE4D_double_.html:5475,access,accessors,5475,root/html526/ROOT__Math__PtEtaPhiE4D_double_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__PtEtaPhiE4D_double_.html,5,['access'],['accessors']
Security,"Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGView(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, Int_t id = -1, UInt_t xMargin = 0, UInt_t yMargin = 0, UInt_t options = kSunkenFrame | kDoubleBorder, UInt_t sboptions = 0, Pixel_t back = GetWhitePixel()); Create an editor view, containing an TGEditorFrame and (optionally); a horizontal and vertical scrollbar. ~TGView(); Delete view. void Clear(Option_t* = """"); Clear view. void SetVisibleStart(Int_t newTop, Int_t direction); Scroll view in specified direction to make newTop the visible location. void DrawRegion(Int_t x, Int_t y, UInt_t width, UInt_t height); Draw region. void UpdateRegion(Int_t x, Int_t y, UInt_t w, UInt_t h); update a part of view. void UpdateBackgroundStart(); set some gc values. Bool_t HandleButton(Event_t* event); handle button. void DoRedraw(); redraw. Bool_t HandleExpose(Event_t* event); Handle expose events. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process scrollbar messages. void Layout(); layout view. void DrawBorder(); Draw the border of the text edit widget. void ScrollToPosition(TGLongPosition newPos); Scroll the canvas to pos. void ScrollCanvas(Int_t newTop, Int_t direction); Scroll the canvas to new_top in the kVertical or kHorizontal direction. void ChangeBackground(Pixel_t ); Change background color of the canvas frame. void SetBackgroundColor(Pixel_t ); Set background color of the canvas frame. void SetBackgroundPixmap(Pixmap_t p); Set backgound pixmap. Bool_t ItemLayout(); { return kFALSE; }. TGView(const TGView& ). TGView& operator=(const TGView& ). TGViewFrame * GetCanvas() const; { return fCanvas; }. void SetLayoutManager(TGLayoutManager* ); { }. void ScrollUp(Int_t pixels); { ScrollToPosition(TGLongPosition(fVisible.fX, fVisible.fY + pixels)); }. void ScrollDown(Int_t pixels); { ScrollToPosition(TGLongPosition(fVisible.fX, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGView.html:22951,expose,expose,22951,root/html602/TGView.html,https://root.cern,https://root.cern/root/html602/TGView.html,2,['expose'],['expose']
Security,"Plugin.; Definition at line 76 of file TASPluginGS.cxx. ◆ Hash(). ULong_t TASPluginGS::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TASPluginGS::HashULong_t Hash() const overrideReturn hash value for this object.Definition TASPluginGS.h:34; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TASImagePlugin.; Definition at line 34 of file TASPluginGS.h. ◆ IsA(). TClass * TASPluginGS::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TASImagePlugin.; Definition at line 38 of file TASPluginGS.h. ◆ Streamer(). void TASPluginGS::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TASImagePlugin. ◆ StreamerNVirtual(). void TASPluginGS::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 38 of file TASPluginGS.h. M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPluginGS.html:13642,hash,hash,13642,doc/master/classTASPluginGS.html,https://root.cern,https://root.cern/doc/master/classTASPluginGS.html,1,['hash'],['hash']
Security,"Poisson) const;  Return the symmetric error on the current weight. ;  ; virtual double weightSquared () const =0;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTreeData.html:13036,hash,hash,13036,doc/master/classRooTreeData.html,https://root.cern,https://root.cern/doc/master/classRooTreeData.html,2,['hash'],['hash']
Security,"Pool XML object keeper class ; TSQLObjectInfo Info (classname, version) about object in database ; TSQLResult SQL query result; TSQLRow One row of an SQL query result; TSQLServer Connection to SQL server; TSQLStatement SQL statement; TSQLStructure Table/structure description used internally by YBufferSQL.; TSQLTableData Collection of columns data for single SQL table; TSQLTableInfo Summury information about SQL table; TSSLSocket SSL wrapped socket; TSVDUnfold Data unfolding using Singular Value Decomposition (hep-ph/9509307) ; TSVG SVG driver; TSecContext Class providing host specific authentication information; TSecContextCleanup Update the remote authentication table; TSelVerifyDataSet PROOF selector for parallel dataset verification; TSelector A utility class for tree and object processing; TSelectorCint A utility class for tree and object processing (interpreted version); TSelectorDraw A specialized TSelector for TTree::Draw; TSelectorEntries A specialized TSelector for TTree::GetEntries(selection); TSelectorList Special TList used in the TSelector; TSelectorScalar Mergable scalar; TSemaphore Counting semaphore class; TSeqCollection Sequenceable collection ABC; TServerSocket This class implements server sockets; TSessionDescription Session description; TSessionFrame Session frame; TSessionInputFrame Input frame; TSessionLogView PROOF progress dialog; TSessionOutputFrame Output frame; TSessionQueryFrame Query frame; TSessionServerFrame Server frame; TSessionViewer Session Viewer; TShape Basic shape; TSignalHandler Signal event handler; TSlave PROOF slave server; TSlaveInfo basic info on workers; TSlaveLite PROOF lite worker server; TSlider A user interface slider.; TSliderBox The moving box of a TSlider; TSocket This class implements client sockets; TSortedList A sorted list; TSpectrum Peak Finder, background estimator, Deconvolution; TSpectrum2 Peak Finder, background estimator, Deconvolution for 2-D histograms; TSpectrum2Fit Spectrum2 Fitter using algorithm with",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:130730,authenticat,authentication,130730,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,2,['authenticat'],['authentication']
Security,"Print(). void THostAuth::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print object content. ; Reimplemented from TObject.; Definition at line 424 of file THostAuth.cxx. ◆ PrintEstablished(). void THostAuth::PrintEstablished ; (; ); const. Print info about established authentication vis-a-vis of this Host. ; Definition at line 448 of file THostAuth.cxx. ◆ RemoveMethod(). void THostAuth::RemoveMethod ; (; Int_t ; level). Remove method 'meth' from the list, if there ... ; Definition at line 310 of file THostAuth.cxx. ◆ ReOrder(). void THostAuth::ReOrder ; (; Int_t ; nmet, . Int_t * ; fmet . ). Reorder nmet methods according fmet[nmet]. ; Definition at line 473 of file THostAuth.cxx. ◆ Reset(). void THostAuth::Reset ; (; ). Remove all methods, leaving Active status and list of associted TSceContexts unchanged. ; Definition at line 344 of file THostAuth.cxx. ◆ SetDetails(). void THostAuth::SetDetails ; (; Int_t ; level, . const char * ; details . ). Set authentication details for specified level. ; Definition at line 403 of file THostAuth.cxx. ◆ SetEstablished(). void THostAuth::SetEstablished ; (; TList * ; nl). inline . Definition at line 101 of file THostAuth.h. ◆ SetFirst(). void THostAuth::SetFirst ; (; Int_t ; level). Set 'method' to be the first used (if in the list ...). ; Definition at line 583 of file THostAuth.cxx. ◆ SetHost(). void THostAuth::SetHost ; (; const char * ; host). inline . Definition at line 96 of file THostAuth.h. ◆ SetLast(). void THostAuth::SetLast ; (; Int_t ; level). Set 'method' to be the last used (if in the list ...). ; Definition at line 615 of file THostAuth.cxx. ◆ SetServer(). void THostAuth::SetServer ; (; Int_t ; server). inline . Definition at line 97 of file THostAuth.h. ◆ SetUser(). void THostAuth::SetUser ; (; const char * ; user). inline . Definition at line 98 of file THostAuth.h. ◆ Streamer(). void THostAuth::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHostAuth.html:21381,authenticat,authentication,21381,doc/master/classTHostAuth.html,https://root.cern,https://root.cern/doc/master/classTHostAuth.html,1,['authenticat'],['authentication']
Security,"Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetAttributes(const TString& attributes); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); Bool_tSetChecksum(const TString& checksum); voidSetCode(const TString& code); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEmbed(Bool_t embed); Bool_tSetFromRule(const char* rule); voidSetInclude(const TString& include); static voidTObject::SetObjectStat(Bool_t stat); voidSetReadFunctionPointer(ROOT::TSchemaRule::ReadFuncPtr_t ptr); voidSetReadRawFunctionPointer(ROOT::TSchemaRule::ReadRawFuncPtr_t ptr); voidSetRuleType(ROOT::TSchemaRule::RuleType_t type); voidSetSource(const TString& source); voidSetSourceClass(const TString& classname); voidSetTarget(const TString& target); voidSetTargetClass(const TString& classname); virtual voidTObject::SetUniqueID(UInt_t uid); Bool_tSetVersion(const TString& version); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTestChecksum(UInt_t checksum) const; Bool_tTestVersion(Int_t version) const; ROOT::TSchemaRuleTSchemaRule(); ROOT::TSchemaRuleTSchemaRule(const ROOT::TSchemaRule& rhs); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__TSchemaRule.html:5839,checksum,checksum,5839,root/html534/ROOT__TSchemaRule.html,https://root.cern,https://root.cern/root/html534/ROOT__TSchemaRule.html,1,['checksum'],['checksum']
Security,"Printable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Int_t_coefIdxIndex code of the coefficient; RooRealProxy_convPdfRooAbsAnaConv object implementing our coefficient; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_ope",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooConvCoefVar.html:30894,validat,validate,30894,root/html532/RooConvCoefVar.html,https://root.cern,https://root.cern/root/html532/RooConvCoefVar.html,2,"['access', 'validat']","['access', 'validate']"
Security,Printable::StyleOptionRooPrintable::kStandard; static RooPrintable::ContentsOptionRooPrintable::kTitle; static RooPrintable::StyleOptionRooPrintable::kTreeStructure; static RooPrintable::ContentsOptionRooPrintable::kValue; static RooPrintable::StyleOptionRooPrintable::kVerbose; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_tRooAbsArg::_isConstant! Cached isConstant status; Int_tRooAbsString::_lenLength of _value; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies; RooRefCountListRooAbsArg::_serverListlist of server ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStringVar.html:21058,access,access,21058,root/html602/RooStringVar.html,https://root.cern,https://root.cern/root/html602/RooStringVar.html,2,['access'],['access']
Security,"Projection() members. To only project parts of the; histogram, call; THnSparse::GetAxis(12)->SetRange(from_bin, to_bin);; See the important remark in THnSparse::IsInRange() when excluding under-; and overflow bins!. * Internal Representation; An entry for a filled bin consists of its n-dimensional coordinates and; its bin content. The coordinates are compacted to use as few bits as; possible; e.g. a histogram with 10 bins in x and 20 bins in y will only; use 4 bits for the x representation and 5 bits for the y representation.; This is handled by the internal class THnSparseCompactBinCoord.; Bin data (content and coordinates) are allocated in chunks of size; fChunkSize; this parameter can be set when constructing a THnSparse. Each; chunk is represented by an object of class THnSparseArrayChunk. Translation from an n-dimensional bin coordinate to the linear index within; the chunks is done by GetBin(). It creates a hash from the compacted bin; coordinates (the hash of a bin coordinate is the compacted coordinate itself; if it takes less than 8 bytes, the size of a Long64_t.; This hash is used to lookup the linear index in the TExMap member fBins;; the coordinates of the entry fBins points to is compared to the coordinates; passed to GetBin(). If they do not match, these two coordinates have the same; hash - which is extremely unlikely but (for the case where the compact bin; coordinates are larger than 4 bytes) possible. In this case, fBinsContinued; contains a chain of linear indexes with the same hash. Iterating through this; chain and comparing each bin coordinates with the one passed to GetBin() will; retrieve the matching bin. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~THnSparse(); voidTObject::AbstractMethod(const char* method) const; voidAdd(const THnSparse* h, Double_t c = 1.); voidAddBinContent(const Int_t* x, Double_t v = 1.); v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THnSparse.html:4102,hash,hash,4102,root/html528/THnSparse.html,https://root.cern,https://root.cern/root/html528/THnSparse.html,6,['hash'],['hash']
Security,"Property See TClass::Property() for details.Definition TClass.h:256; TClass::fContextMenuTitleTString fContextMenuTitleDefinition TClass.h:223; TClass::StreamerTObjectInitializedstatic void StreamerTObjectInitialized(const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class)Case of TObjects when fIsOffsetStreamerSet is known to have been set.Definition TClass.cxx:6814; TClass::ConvStreamerInstrumentedstatic void ConvStreamerInstrumented(const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class)Case of instrumented class with a library.Definition TClass.cxx:6845; TClass::fCanLoadClassInfostd::atomic< Bool_t > fCanLoadClassInfoWhether info was loaded from a root pcm.Definition TClass.h:260; TClass::SetConvStreamerFuncvoid SetConvStreamerFunc(ClassConvStreamerFunc_t strm)Set a wrapper/accessor function around this class custom conversion streamer.Definition TClass.cxx:6945; TClass::FindStreamerInfoTVirtualStreamerInfo * FindStreamerInfo(TObjArray *arr, UInt_t checksum) constFind the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum.Definition TClass.cxx:7066; TClass::GetMissingDictionariesvoid GetMissingDictionaries(THashTable &result, bool recurse=false)Get the classes that have a missing dictionary starting from this one.Definition TClass.cxx:4087; TClass::MakeCustomMenuListvoid MakeCustomMenuList()Makes a customizable version of the popup menu list, i.e.Definition TClass.cxx:4283; TClass::FindStreamerInfoAbstractEmulatedTVirtualStreamerInfo * FindStreamerInfoAbstractEmulated(UInt_t checksum) constFor the case where the requestor class is emulated and this class is abstract, returns a pointer to t...Definition TClass.cxx:4772; TClass::GetMethodAnyTMethod * GetMethodAny(const char *method)Return pointer to method without looking at parameters.Definition TClass.cxx:4374; TClass::GetIsAProxyTVirtualIsAProxy * GetIsAProxy() constReturn the proxy implementing the IsA functionality.Definition TClass.cxx:2955; TClass::GetClas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8h_source.html:75307,checksum,checksum,75307,doc/v632/TClass_8h_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8h_source.html,2,['checksum'],['checksum']
Security,"Property See TClass::Property() for details.Definition TClass.h:256; TClass::fContextMenuTitleTString fContextMenuTitleDefinition TClass.h:223; TClass::StreamerTObjectInitializedstatic void StreamerTObjectInitialized(const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class)Case of TObjects when fIsOffsetStreamerSet is known to have been set.Definition TClass.cxx:6814; TClass::ConvStreamerInstrumentedstatic void ConvStreamerInstrumented(const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class)Case of instrumented class with a library.Definition TClass.cxx:6845; TClass::fCanLoadClassInfostd::atomic< Bool_t > fCanLoadClassInfoWhether info was loaded from a root pcm.Definition TClass.h:260; TClass::SetConvStreamerFuncvoid SetConvStreamerFunc(ClassConvStreamerFunc_t strm)Set a wrapper/accessor function around this class custom conversion streamer.Definition TClass.cxx:6945; TClass::FindStreamerInfoTVirtualStreamerInfo * FindStreamerInfo(TObjArray *arr, UInt_t checksum) constFind the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum.Definition TClass.cxx:7066; TClass::GetMissingDictionariesvoid GetMissingDictionaries(THashTable &result, bool recurse=false)Get the classes that have a missing dictionary starting from this one.Definition TClass.cxx:4087; TClass::MakeCustomMenuListvoid MakeCustomMenuList()Makes a customizable version of the popup menu list, i.e.Definition TClass.cxx:4283; TClass::FindStreamerInfoAbstractEmulatedTVirtualStreamerInfo * FindStreamerInfoAbstractEmulated(UInt_t checksum) constFor the case where the requestor class is emulated and this class is abstract, returns a pointer to t...Definition TClass.cxx:4772; TClass::GetMethodAnyTMethod * GetMethodAny(const char *method)Return pointer to method without looking at parameters.Definition TClass.cxx:4374; TClass::GetIsAProxyTVirtualIsAProxy * GetIsAProxy() constReturn the proxy implementing the IsA functionality.Definition TClass.cxx:2955; TClass::GetMerg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:339747,checksum,checksum,339747,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,2,['checksum'],['checksum']
Security,"Property See TClass::Property() for details.Definition TClass.h:256; TClass::fContextMenuTitleTString fContextMenuTitleDefinition TClass.h:223; TClass::StreamerTObjectInitializedstatic void StreamerTObjectInitialized(const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class)Case of TObjects when fIsOffsetStreamerSet is known to have been set.Definition TClass.cxx:6881; TClass::ConvStreamerInstrumentedstatic void ConvStreamerInstrumented(const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class)Case of instrumented class with a library.Definition TClass.cxx:6912; TClass::fCanLoadClassInfostd::atomic< Bool_t > fCanLoadClassInfoWhether info was loaded from a root pcm.Definition TClass.h:260; TClass::SetConvStreamerFuncvoid SetConvStreamerFunc(ClassConvStreamerFunc_t strm)Set a wrapper/accessor function around this class custom conversion streamer.Definition TClass.cxx:7012; TClass::FindStreamerInfoTVirtualStreamerInfo * FindStreamerInfo(TObjArray *arr, UInt_t checksum) constFind the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum.Definition TClass.cxx:7133; TClass::GetMissingDictionariesvoid GetMissingDictionaries(THashTable &result, bool recurse=false)Get the classes that have a missing dictionary starting from this one.Definition TClass.cxx:4154; TClass::MakeCustomMenuListvoid MakeCustomMenuList()Makes a customizable version of the popup menu list, i.e.Definition TClass.cxx:4350; TClass::FindStreamerInfoAbstractEmulatedTVirtualStreamerInfo * FindStreamerInfoAbstractEmulated(UInt_t checksum) constFor the case where the requestor class is emulated and this class is abstract, returns a pointer to t...Definition TClass.cxx:4839; TClass::GetMethodAnyTMethod * GetMethodAny(const char *method)Return pointer to method without looking at parameters.Definition TClass.cxx:4441; TClass::GetIsAProxyTVirtualIsAProxy * GetIsAProxy() constReturn the proxy implementing the IsA functionality.Definition TClass.cxx:3022; TClass::GetClas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8h_source.html:75135,checksum,checksum,75135,doc/master/TClass_8h_source.html,https://root.cern,https://root.cern/doc/master/TClass_8h_source.html,2,['checksum'],['checksum']
Security,"Property See TClass::Property() for details.Definition TClass.h:256; TClass::fContextMenuTitleTString fContextMenuTitleDefinition TClass.h:223; TClass::StreamerTObjectInitializedstatic void StreamerTObjectInitialized(const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class)Case of TObjects when fIsOffsetStreamerSet is known to have been set.Definition TClass.cxx:6881; TClass::ConvStreamerInstrumentedstatic void ConvStreamerInstrumented(const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class)Case of instrumented class with a library.Definition TClass.cxx:6912; TClass::fCanLoadClassInfostd::atomic< Bool_t > fCanLoadClassInfoWhether info was loaded from a root pcm.Definition TClass.h:260; TClass::SetConvStreamerFuncvoid SetConvStreamerFunc(ClassConvStreamerFunc_t strm)Set a wrapper/accessor function around this class custom conversion streamer.Definition TClass.cxx:7012; TClass::FindStreamerInfoTVirtualStreamerInfo * FindStreamerInfo(TObjArray *arr, UInt_t checksum) constFind the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum.Definition TClass.cxx:7133; TClass::GetMissingDictionariesvoid GetMissingDictionaries(THashTable &result, bool recurse=false)Get the classes that have a missing dictionary starting from this one.Definition TClass.cxx:4154; TClass::MakeCustomMenuListvoid MakeCustomMenuList()Makes a customizable version of the popup menu list, i.e.Definition TClass.cxx:4350; TClass::FindStreamerInfoAbstractEmulatedTVirtualStreamerInfo * FindStreamerInfoAbstractEmulated(UInt_t checksum) constFor the case where the requestor class is emulated and this class is abstract, returns a pointer to t...Definition TClass.cxx:4839; TClass::GetMethodAnyTMethod * GetMethodAny(const char *method)Return pointer to method without looking at parameters.Definition TClass.cxx:4441; TClass::GetIsAProxyTVirtualIsAProxy * GetIsAProxy() constReturn the proxy implementing the IsA functionality.Definition TClass.cxx:3022; TClass::GetMerg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:342385,checksum,checksum,342385,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,2,['checksum'],['checksum']
Security,Proxy.h. ◆ fFunctionCreateIterators. CreateIterators_t TGenCollectionProxy::fFunctionCreateIterators. protected . Definition at line 324 of file TGenCollectionProxy.h. ◆ fFunctionDeleteIterator. DeleteIterator_t TGenCollectionProxy::fFunctionDeleteIterator. protected . Definition at line 327 of file TGenCollectionProxy.h. ◆ fFunctionDeleteTwoIterators. DeleteTwoIterators_t TGenCollectionProxy::fFunctionDeleteTwoIterators. protected . Definition at line 328 of file TGenCollectionProxy.h. ◆ fFunctionNextIterator. Next_t TGenCollectionProxy::fFunctionNextIterator. protected . Definition at line 326 of file TGenCollectionProxy.h. ◆ fKey. Value* TGenCollectionProxy::fKey. protected . Descriptor of the key_type. ; Definition at line 313 of file TGenCollectionProxy.h. ◆ fName. std::string TGenCollectionProxy::fName. protected . Name of the class being proxied. ; Definition at line 299 of file TGenCollectionProxy.h. ◆ fNext. Method TGenCollectionProxy::fNext. protected . Container accessors: generic iteration: next. ; Definition at line 305 of file TGenCollectionProxy.h. ◆ fOnFileClass. TClass* TGenCollectionProxy::fOnFileClass. protected . On file class. ; Definition at line 322 of file TGenCollectionProxy.h. ◆ fPointers. Bool_t TGenCollectionProxy::fPointers. protected . Flag to indicate if containee has pointers (key or value) ; Definition at line 300 of file TGenCollectionProxy.h. ◆ fProxyKept. Proxies_t TGenCollectionProxy::fProxyKept. protected . Optimization: Keep proxies once they were created. ; Definition at line 318 of file TGenCollectionProxy.h. ◆ fProxyList. Proxies_t TGenCollectionProxy::fProxyList. protected . Stack of recursive proxies. ; Definition at line 317 of file TGenCollectionProxy.h. ◆ fReadMemberWise. TObjArray* TGenCollectionProxy::fReadMemberWise. mutableprotected . Array of bundle of TStreamerInfoActions to stream out (read) ; Definition at line 291 of file TGenCollectionProxy.h. ◆ fResize. Sizing_t TGenCollectionProxy::fResize. protected . Conta,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenCollectionProxy.html:29765,access,accessors,29765,doc/master/classTGenCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTGenCollectionProxy.html,1,['access'],['accessors']
Security,"PruneStrength(Float_t alpha = -1.). Data Members; private:. Float_tfAlpha! regularization parameter in CC pruning; Bool_tfDebug! debug flag; Int_tfOptimalK! index of the optimal tree in the pruned tree sequence; Bool_tfOwnQIndex! flag indicates if fQualityIndex is owned by this; vector<TMVA::DecisionTreeNode*>fPruneSequence! map of weakest links (i.e., branches to prune) -> pruning index; vector<Float_t>fPruneStrengthList! map of alpha -> pruning index; TMVA::SeparationBase*fQualityIndex! the quality index used to calculate R(t), R(T) = sum[t in ~T]{ R(t) }; vector<Float_t>fQualityIndexList! map of R(T) -> pruning index; TMVA::DecisionTree*fTree! (pruned) decision tree; const TMVA::DataSet*fValidationDataSet! the event sample to select the optimally-pruned tree; const TMVA::CCPruner::EventList*fValidationSample! the event sample to select the optimally-pruned tree. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CCPruner( DecisionTree* t_max, const EventList* validationSample, SeparationBase* qualityIndex ); constructor. CCPruner( DecisionTree* t_max, const DataSet* validationSample, SeparationBase* qualityIndex ); constructor. ~CCPruner(). void Optimize(); determine the pruning sequence. std::vector<DecisionTreeNode*> GetOptimalPruneSequence() const; return the prune strength (=alpha) corresponding to the prune sequence. void SetPruneStrength(Float_t alpha = -1.). CCPruner( DecisionTree* t_max, const EventList* validationSample, SeparationBase* qualityIndex = NULL ). Float_t GetOptimalQualityIndex() const; return the quality index from the validation sample for the optimal subtree T'. Float_t GetOptimalPruneStrength() const; return the prune strength (=alpha) corresponding to the prune sequence. » Last changed: Tue Sep 8 17:45:49 2015 » Last generated: 2015-09-08 17:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__CCPruner.html:1898,validat,validationSample,1898,root/html604/TMVA__CCPruner.html,https://root.cern,https://root.cern/root/html604/TMVA__CCPruner.html,4,['validat'],"['validation', 'validationSample']"
Security,"Public Member Functions inherited from TStreamerElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void InitStreaming (Bool_t isTransient);  Error message in case of checksum/version mismatch. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; UInt_t & fBaseCheckSum;  ; TClass * fBaseClass;  checksum of the base class (used during memberwise streaming) ;  ; Int_t fBaseVersion;  ; ClassConvStreamerFunc_t fConvStreamerFunc;  Pointer to a wrapper around a custom streamer member function. ;  ; TString fErrorMsg;  Pointer to the current StreamerInfo for the baset class. ;  ; TClass * fNewBaseClass;  pointer to base class ;  ; ClassStreamerFunc_t fStreamerFunc;  pointer to new base class if renamed ;  ; TVirtualStreamerInfo * fStreamerInfo;  Pointer to a wrapper around a custom convertion streamer member function. ;  ;  Protected Attributes inherited from TStreamerElement; Int_t fArrayDim;  ; Int_t fArrayLength;  ; TClass * fClassObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerBase.html:14489,checksum,checksum,14489,doc/master/classTStreamerBase.html,https://root.cern,https://root.cern/doc/master/classTStreamerBase.html,1,['checksum'],['checksum']
Security,"Q3 (top of the box).; The maximum value of the distribution D (top dashed line). The mean value of the distribution D is also represented as a circle. In this implementation a TH2 is considered as a collection of TH1 along; X (option CANDLE or CANDLEX) or Y (option CANDLEY).; Each TH1 is represented as a candle plot. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",600,400);; TH2F *hcandle = new TH2F(""hcandle"",""Option CANDLE example "",40,-4,4,40,-20,20);; Float_t px, py;; for (Int_t i = 0; i < 25000; i++) {; gRandom->Rannor(px,py);; hcandle->Fill(px,5*py);; }; hcandle->SetMarkerSize(0.5);; hcandle->Draw(""CANDLE"");; return c1;; }; The VIOLIN option; A violin plot is a box plot; that also encodes the pdf information at each point. Quartiles and mean are also represented at each point, with a marker; and two lines. In this implementation a TH2 is considered as a collection of TH1 along; X (option VIOLIN or VIOLINX) or Y (option VIOLINY). A solid fill style is recommended for this plot (as opposed to a hollow or; hashed style). Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",600,400);; Int_t nx(6), ny(40);; Double_t xmin(0.0), xmax(+6.0), ymin(0.0), ymax(+4.0);; TH2F* hviolin = new TH2F(""hviolin"", ""Option VIOLIN example"", nx, xmin, xmax, ny, ymin, ymax);; TF1 f1(""f1"", ""gaus"", +0,0 +4.0);; Double_t x,y;; for (Int_t iBin=1; iBin<hviolin->GetNbinsX(); ++iBin) {; Double_t xc = hviolin->GetXaxis()->GetBinCenter(iBin);; f1.SetParameters(1, 2.0+TMath::Sin(1.0+xc), 0.2+0.1*(xc-xmin)/xmax);; for(Int_t i=0; i<10000; ++i){; x = xc;; y = f1.GetRandom();; hviolin->Fill(x, y);; }; }; hviolin->SetFillColor(kGray);; hviolin->SetMarkerStyle(20);; hviolin->SetMarkerSize(0.5);; hviolin->Draw(""VIOLIN"");; c1->Update();; return c1;; }; The TEXT and TEXTnn Option; For each bin the content is printed. The text attributes are:. text font = current TStyle font (gStyle->SetTextFont()).; text size = 0.02*padheight*markersize (if h is the histogram drawn; with the option ""TEXT"" the ma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THistPainter.html:31374,hash,hashed,31374,root/html534/THistPainter.html,https://root.cern,https://root.cern/root/html534/THistPainter.html,3,['hash'],['hashed']
Security,"RConcurrentHashColl Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; ROOT::Internal::RConcurrentHashColl Class Reference. ; This class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection of uid (integer) This is used in the handling of the StreamerInfo record in TFile. ; Definition at line 30 of file RConcurrentHashColl.hxx. Classes; class  HashValue;  . Public Member Functions;  RConcurrentHashColl ();  ;  ~RConcurrentHashColl ();  ; const RUidColl * Find (const HashValue &hash) const;  Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ;  ; bool Insert (const HashValue &hash, RUidColl &&coll) const;  If the hash is there, return false. ;  . Static Public Member Functions; static HashValue Hash (char *buf, int len);  Return the hash object corresponding to the buffer. ;  . Private Attributes; std::unique_ptr< RHashMap > fHashMap;  ; std::unique_ptr< ROOT::TRWSpinLock > fRWLock;  . #include <ROOT/RConcurrentHashColl.hxx>; Constructor & Destructor Documentation. ◆ RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::RConcurrentHashColl ; (; ). Definition at line 41 of file RConcurrentHashColl.cxx. ◆ ~RConcurrentHashColl(). ROOT::Internal::RConcurrentHashColl::~RConcurrentHashColl ; (; ). default . Member Function Documentation. ◆ Find(). const RUidColl * ROOT::Internal::RConcurrentHashColl::Find ; (; const HashValue & ; hash); const. Return the collection of UID corresponding to the hash if the hash has already been seen or nullptr otherwise. ; Definition at line 46 of file RConcurrentHashColl.cxx. ◆ Hash(). RConcurrentHashColl::HashValue ROOT::Internal::RConcurrentHashColl::Hash ; (; char * ; buf, . int ; len . ). static . Return the hash object corresponding to the buffer. ; Def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html:1049,hash,hash,1049,doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1RConcurrentHashColl.html,1,['hash'],['hash']
Security,"RDF::RResultPtr;; 81// Fwd decl for RResultPtr; 82template <typename T>; 83RResultPtr<T> MakeResultPtr(const std::shared_ptr<T> &r, RLoopManager &df,; 84 std::shared_ptr<ROOT::Internal::RDF::RActionBase> actionPtr);; 85 ; 86// Fwd decl for GetMergeableValue; 87template <typename T>; 88class RMergeableValue;; 89 ; 90template <typename T>; 91std::unique_ptr<RMergeableValue<T>> GetMergeableValue(RResultPtr<T> &rptr);; 92} // namespace RDF; 93} // namespace Detail; 94namespace RDF {; 95namespace RDFInternal = ROOT::Internal::RDF;; 96namespace RDFDetail = ROOT::Detail::RDF;; 97namespace TTraits = ROOT::TypeTraits;; 98 ; 99/// Smart pointer for the return type of actions; 100/**; 101\class ROOT::RDF::RResultPtr; 102\ingroup dataframe; 103\brief A wrapper around the result of RDataFrame actions able to trigger calculations lazily.; 104\tparam T Type of the action result; 105 ; 106A smart pointer which allows to access the result of a RDataFrame action. The; 107methods of the encapsulated object can be accessed via the arrow operator.; 108Upon invocation of the arrow operator or dereferencing (`operator*`), the; 109loop on the events and calculations of all scheduled actions are executed; 110if needed.; 111It is possible to iterate on the result proxy if the proxied object is a collection.; 112~~~{.cpp}; 113for (auto& myItem : myResultProxy) { ... };; 114~~~; 115If iteration is not supported by the type of the proxied object, a compilation error is thrown.; 116 ; 117*/; 118template <typename T>; 119class RResultPtr {; 120 // private using declarations; 121 using SPT_t = std::shared_ptr<T>;; 122 ; 123 // friend declarations; 124 template <typename T1>; 125 friend class RResultPtr;; 126 ; 127 template <typename T1>; 128 friend RResultPtr<T1> RDFDetail::MakeResultPtr(const std::shared_ptr<T1> &, ::ROOT::Detail::RDF::RLoopManager &,; 129 std::shared_ptr<RDFInternal::RActionBase>);; 130 ; 131 template <typename T1>; 132 friend ROOT::RDF::Experimental::RResultMap<T1> ROOT::RDF::Ex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RResultPtr_8hxx_source.html:3962,access,accessed,3962,doc/master/RResultPtr_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RResultPtr_8hxx_source.html,1,['access'],['accessed']
Security,"RDataFrame application distributedly. Nonetheless, not all; 661parts of the RDataFrame API currently work with this package. The subset that is currently available is:; 662- AsNumpy; 663- Count; 664- Define; 665- DefinePerSample; 666- Filter; 667- Graph; 668- Histo[1,2,3]D; 669- HistoND; 670- Max; 671- Mean; 672- Min; 673- Profile[1,2,3]D; 674- Redefine; 675- Snapshot; 676- Stats; 677- StdDev; 678- Sum; 679- Systematic variations: Vary and [VariationsFor](\ref ROOT::RDF::Experimental::VariationsFor).; 680- Parallel submission of distributed graphs: [RunGraphs](\ref ROOT::RDF::RunGraphs).; 681- Information about the dataframe: GetColumnNames.; 682 ; 683with support for more operations coming in the future. Data sources other than TTree and TChain (e.g. CSV, RNTuple) are; 684currently not supported.; 685 ; 686\note The distributed RDataFrame module requires at least Python version 3.8.; 687 ; 688### Connecting to a Spark cluster; 689 ; 690In order to distribute the RDataFrame workload, you can connect to a Spark cluster you have access to through the; 691official [Spark API](https://spark.apache.org/docs/latest/rdd-programming-guide.html#initializing-spark), then hook the; 692connection instance to the distributed `RDataFrame` object like so:; 693 ; 694~~~{.py}; 695import pyspark; 696import ROOT; 697 ; 698# Create a SparkContext object with the right configuration for your Spark cluster; 699conf = SparkConf().setAppName(appName).setMaster(master); 700sc = SparkContext(conf=conf); 701 ; 702# Point RDataFrame calls to the Spark specific RDataFrame; 703RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; 704 ; 705# The Spark RDataFrame constructor accepts an optional ""sparkcontext"" parameter; 706# and it will distribute the application to the connected cluster; 707df = RDataFrame(""mytree"", ""myfile.root"", sparkcontext = sc); 708~~~; 709 ; 710If an instance of [SparkContext](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.SparkContext.html",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:40322,access,access,40322,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['access'],['access']
Security,"RDataFrame application distributedly. Nonetheless, not all; 701parts of the RDataFrame API currently work with this package. The subset that is currently available is:; 702- AsNumpy; 703- Count; 704- Define; 705- DefinePerSample; 706- Filter; 707- Graph; 708- Histo[1,2,3]D; 709- HistoND; 710- Max; 711- Mean; 712- Min; 713- Profile[1,2,3]D; 714- Redefine; 715- Snapshot; 716- Stats; 717- StdDev; 718- Sum; 719- Systematic variations: Vary and [VariationsFor](\ref ROOT::RDF::Experimental::VariationsFor).; 720- Parallel submission of distributed graphs: [RunGraphs](\ref ROOT::RDF::RunGraphs).; 721- Information about the dataframe: GetColumnNames.; 722 ; 723with support for more operations coming in the future. Data sources other than TTree and TChain (e.g. CSV, RNTuple) are; 724currently not supported.; 725 ; 726\note The distributed RDataFrame module requires at least Python version 3.8.; 727 ; 728### Connecting to a Spark cluster; 729 ; 730In order to distribute the RDataFrame workload, you can connect to a Spark cluster you have access to through the; 731official [Spark API](https://spark.apache.org/docs/latest/rdd-programming-guide.html#initializing-spark), then hook the; 732connection instance to the distributed `RDataFrame` object like so:; 733 ; 734~~~{.py}; 735import pyspark; 736import ROOT; 737 ; 738# Create a SparkContext object with the right configuration for your Spark cluster; 739conf = SparkConf().setAppName(appName).setMaster(master); 740sc = SparkContext(conf=conf); 741 ; 742# Point RDataFrame calls to the Spark specific RDataFrame; 743RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; 744 ; 745# The Spark RDataFrame constructor accepts an optional ""sparkcontext"" parameter; 746# and it will distribute the application to the connected cluster; 747df = RDataFrame(""mytree"", ""myfile.root"", sparkcontext = sc); 748~~~; 749 ; 750If an instance of [SparkContext](https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.SparkContext.html",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:41962,access,access,41962,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['access'],['access']
Security,"RFieldBase > > Create (const std::string &fieldName, const std::string &typeName);  Factory method to resurrect a field from the stored on-disk type information. ;  ; static RResult< void > EnsureValidFieldName (std::string_view fieldName);  Check whether a given string is a valid field name. ;  . Static Public Attributes; static constexpr std::uint32_t kInvalidTypeVersion = -1U;  ; static constexpr int kTraitMappable = 0x04;  A field of a fundamental type that can be directly mapped via RField<T>::Map(), i.e. ;  ; static constexpr int kTraitTriviallyConstructible = 0x01;  No constructor needs to be called, i.e. ;  ; static constexpr int kTraitTriviallyDestructible = 0x02;  The type is cleaned up just by freeing its memory. I.e. the destructor performs a no-op. ;  ; static constexpr int kTraitTrivialType = kTraitTriviallyConstructible | kTraitTriviallyDestructible;  Shorthand for types that are both trivially constructible and destructible. ;  ; static constexpr int kTraitTypeChecksum = 0x08;  The TClass checksum is set and valid. ;  . Protected Member Functions; size_t AddReadCallback (ReadCallback_t func);  Set a user-defined function to be called after reading a value, giving a chance to inspect and/or modify the value object. ;  ; std::size_t Append (const void *from);  Write the given value into columns. ;  ; virtual std::size_t AppendImpl (const void *from);  Operations on values of complex types, e.g. ;  ; void Attach (std::unique_ptr< RFieldBase > child);  Add a new subfield to the list of nested fields. ;  ; void AutoAdjustColumnTypes (const RNTupleWriteOptions &options);  When connecting a field to a page sink, the field's default column representation is subject to adjustment according to the write options. ;  ; virtual std::unique_ptr< RFieldBase > CloneImpl (std::string_view newName) const =0;  Called by Clone(), which additionally copies the on-disk ID. ;  ; virtual void CommitClusterImpl ();  ; virtual void ConstructValue (void *where) const =0;  Cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:7948,checksum,checksum,7948,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,1,['checksum'],['checksum']
Security,"ROOT directory; and list of canvases and files; Also all registered objects are included.; One could reimplement this method to provide alternative; scan methods or to extend some collection kinds. Bool_t IsDrawableClass(TClass* cl); return true if object can be drawn. void ScanHierarchy(const char* topname, const char* path, TRootSnifferStore* store); scan ROOT hierarchy with provided store object. void * FindInHierarchy(const char* path, TClass** cl = 0, TDataMember** member = 0, Int_t* chld = 0); Search element with specified path; Returns pointer on element; Optionally one could obtain element class, member description; and number of childs. When chld!=0, not only element is searched,; but also number of childs are counted. When member!=0, any object; will be scanned for its data members (disregard of extra options). TObject * FindTObjectInHierarchy(const char* path); Search element in hierarchy, derived from TObject. ULong_t GetStreamerInfoHash(); Returns hash value for streamer infos; At the moment - just number of items in streamer infos list. ULong_t GetItemHash(const char* itemname); Get hash function for specified item; used to detect any changes in the specified object. Bool_t CanDrawItem(const char* path); Method verifies if object can be drawn. Bool_t CanExploreItem(const char* path); Method returns true when object has childs or; one could try to expand item. void CreateMemFile(); Creates TMemFile instance, which used for objects streaming; One could not use TBufferFile directly,; while one also require streamer infos list. Bool_t ProduceJson(const char* path, const char* options, TString& res); produce JSON data for specified item; For object conversion TBufferJSON is used. Bool_t ProduceXml(const char* path, const char* options, TString& res); produce XML data for specified item; For object conversion TBufferXML is used. TString DecodeUrlOptionValue(const char* value, Bool_t remove_quotes = kTRUE); method replaces all kind of special symbols, which co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRootSniffer.html:10299,hash,hash,10299,root/html602/TRootSniffer.html,https://root.cern,https://root.cern/root/html602/TRootSniffer.html,1,['hash'],['hash']
Security,"ROOT drawing in the OpenUI5, source code can be found in repository.; 1.11.10 Migration v6 -> v7. Core functionality should be imported from main.mjs module like:. import { create, parse, createHistogram, redraw } from 'https://root.cern/js/7.0.0/modules/main.mjs';. It is still possible to use JSRoot.core.js script, which provides very similar (but not identical!) functionality as with v6 via global JSROOT object; JSROOT.define() and JSROOT.require() functions only available after JSRoot.core.js loading; Support of require.js and openui5 loaders was removed; Global hierarchy painter JSROOT.hpainter no longer existing, one can use getHPainter function:. import { getHPainter } from 'https://root.cern/js/7.0.0/modules/main.mjs';; let hpainter = getHPainter();. All math functions previously available via JSROOT.Math should be imported from base/math.mjs module:. import * as math from 'https://root.cern/js/7.0.0/modules/base/math.mjs';. Indication of batch mode JSROOT.batch_mode should be accessed via functions:. import { isBatchMode, setBatchMode } from 'https://root.cern/js/7.0.0/modules/main.mjs';; let was_batch = isBatchMode();; if (!was_batch) setBatchMode(true);. JSROOT.extend() function was removed, use Object.assign() instead. 1.11.11 Migration v5 -> v6. Main script was renamed to JSRoot.core.js. Old JSRootCore.js was deprecated and removed in v6.2. All URL parameters for main script ignored now, to load JSROOT functionality one should use JSROOT.require function. To create standard GUI, JSROOT.buildGUI function has to be used.; Instead of JSROOT.JSONR_unref() one can use JSROOT.parse(). If object is provided to JSROOT.parse() it just replaces all references which were introduced by TBufferJSON::ToJSON() method.; Instead of JSROOT.console() one should use console.log(). Instead of JSROOT.alert() one should use console.error().; Many settings were moved from JSROOT.gStyle to JSROOT.settings object. It was done to keep only TStyle-related members in JSROOT.gStyle.; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html:35381,access,accessed,35381,root/htmldoc/guides/JSROOT/JSROOT.html,https://root.cern,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html,1,['access'],['accessed']
Security,"ROOT::Internal namespace as they are not intended to be used outside of ROOT, including: gROOTLocal and related functions, TSchemaHelper, TSchemaMatch, TSchemaType, RStl, ROOT::TROOTAllocator, TSchemaRuleProcessor, TStdBitsetHelper, TInitBehavior, TDefaultInitBehavior, DefineBehavior, THnBaseBrowsable, THnBaseBinIter, GenericShowMembers, TOperatorNewHelper and BranchProxy implementations classes.; Several definition where moved from the global or ROOT namespace to the ROOT::Details namespace as they are intended to be used in ‘expert’ level code and have a lower level of backward compatibility requirement. This includes TCollectionProxyInfo, TSchemaRuleSet.; Interpreter; ROOT can now dump the context of STL collections, for instance map<string,int>. A few ROOT types print their content, too.; Fixed the handling of the current directory in #include of system headers, avoid problem with local files named new or vector.; Fixed the issue with the ROOT special variable where the objects were read from the file at each and every access by caching those object. See ROOT-7830 for example.; This release contains several bug fixes and improvements, notably in unloading and performance. NOTE: The GCC 5 ABI is not supported yet, due to a lack of support in clang. I/O Libraries; hadd; We extended the hadd options to allow more control on the compression settings use for the output file. In particular the new option -fk allows for a copy of the input files with no decompressions/recompression of the TTree baskets even if they do not match the requested compression setting.; New options:. -ff allows to force the compression setting to match the one from the first input; -fk[0-209] allows to keep all the basket compressed as is and to compress the meta data with the given compression setting or the compression setting of the first input file.; -a option append to existing file; The verbosity level is now optional after -v. Command line utilities; We added command line utilities to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v606/release-notes.html:7234,access,access,7234,doc/v606/release-notes.html,https://root.cern,https://root.cern/doc/v606/release-notes.html,1,['access'],['access']
Security,ROOT::IsBatchBool_t IsBatch() constDefinition TROOT.h:279; TROOT::IsRootFileBool_t IsRootFile(const char *filename) constReturn true if the file is local and is (likely) to be a ROOT file.Definition TROOT.cxx:2230; TROOT::IsWebDisplayBool_t IsWebDisplay() constDefinition TROOT.h:287; TROOT::IndentLevelstatic void IndentLevel()Functions used by ls() to indent an object hierarchy.Definition TROOT.cxx:2891; TROOT::GetVersionTimeInt_t GetVersionTime() constDefinition TROOT.h:227; TROOT::GetDocDirstatic const TString & GetDocDir()Get the documentation directory in the installation. Static utility function.Definition TROOT.cxx:3078; TROOT::GetEtcDirstatic const TString & GetEtcDir()Get the sysconfig directory in the installation. Static utility function.Definition TROOT.cxx:3052; TROOT::TROOTTROOT(const TROOT &)=delete; TROOT::GetNclassesInt_t GetNclasses() constGet number of classes.Definition TROOT.cxx:1876; TROOT::GetExtraInterpreterArgsstatic const char **& GetExtraInterpreterArgs()INTERNAL function! Used by rootcling to inject interpreter arguments through a C-interface layer.Definition TROOT.cxx:2962; TROOT::SetMacroPathstatic void SetMacroPath(const char *newpath)Set or extend the macro search path.Definition TROOT.cxx:2788; TROOT::SetSelectedPadvoid SetSelectedPad(TVirtualPad *pad)Definition TROOT.h:333; TROOT::InitThreadsvoid InitThreads()Initialize threads library.Definition TROOT.cxx:2053; TROOT::fUUIDsTProcessUUID * fUUIDsPointer to TProcessID managing TUUIDs.Definition TROOT.h:166; TROOT::fConfigFeaturesTString fConfigFeaturesROOT ./configure detected build features.Definition TROOT.h:112; TROOT::GetFunctionTemplateTFunctionTemplate * GetFunctionTemplate(const char *name)Definition TROOT.cxx:1618; TROOT::fPluginManagerTPluginManager * fPluginManagerKeeps track of plugin library handlers.Definition TROOT.h:169; TROOT::GetGeometryTObject * GetGeometry(const char *name) constReturn pointer to Geometry with name.Definition TROOT.cxx:1747; TROOT::RecursiveRemovevo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8h_source.html:46133,inject,inject,46133,doc/v632/TROOT_8h_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8h_source.html,1,['inject'],['inject']
Security,ROOT::IsBatchBool_t IsBatch() constDefinition TROOT.h:279; TROOT::IsRootFileBool_t IsRootFile(const char *filename) constReturn true if the file is local and is (likely) to be a ROOT file.Definition TROOT.cxx:2230; TROOT::IsWebDisplayBool_t IsWebDisplay() constDefinition TROOT.h:287; TROOT::IndentLevelstatic void IndentLevel()Functions used by ls() to indent an object hierarchy.Definition TROOT.cxx:2895; TROOT::GetVersionTimeInt_t GetVersionTime() constDefinition TROOT.h:227; TROOT::GetDocDirstatic const TString & GetDocDir()Get the documentation directory in the installation. Static utility function.Definition TROOT.cxx:3082; TROOT::GetEtcDirstatic const TString & GetEtcDir()Get the sysconfig directory in the installation. Static utility function.Definition TROOT.cxx:3056; TROOT::TROOTTROOT(const TROOT &)=delete; TROOT::GetNclassesInt_t GetNclasses() constGet number of classes.Definition TROOT.cxx:1876; TROOT::GetExtraInterpreterArgsstatic const char **& GetExtraInterpreterArgs()INTERNAL function! Used by rootcling to inject interpreter arguments through a C-interface layer.Definition TROOT.cxx:2966; TROOT::SetMacroPathstatic void SetMacroPath(const char *newpath)Set or extend the macro search path.Definition TROOT.cxx:2788; TROOT::SetSelectedPadvoid SetSelectedPad(TVirtualPad *pad)Definition TROOT.h:333; TROOT::InitThreadsvoid InitThreads()Initialize threads library.Definition TROOT.cxx:2053; TROOT::fUUIDsTProcessUUID * fUUIDsPointer to TProcessID managing TUUIDs.Definition TROOT.h:166; TROOT::fConfigFeaturesTString fConfigFeaturesROOT ./configure detected build features.Definition TROOT.h:112; TROOT::GetFunctionTemplateTFunctionTemplate * GetFunctionTemplate(const char *name)Definition TROOT.cxx:1618; TROOT::fPluginManagerTPluginManager * fPluginManagerKeeps track of plugin library handlers.Definition TROOT.h:169; TROOT::GetGeometryTObject * GetGeometry(const char *name) constReturn pointer to Geometry with name.Definition TROOT.cxx:1747; TROOT::RecursiveRemovevo,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8h_source.html:46132,inject,inject,46132,doc/master/TROOT_8h_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8h_source.html,1,['inject'],['inject']
Security,"ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar& b, ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar& c) const. get internal data into 3 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c); }. void GetCoordinates(ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::GlobalCoordinateSystemTag>::Scalar* dest) const. get internal data into a C-style array of 3 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. bool operator==(const ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::GlobalCoordinateSystemTag>& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::DisplacementVector3D<ROOT::Math::CylindricalEta3D<Double32_t>,ROOT::Math::GlobalCoordinateSystemTag>& rhs) const. Scalar X() const; ------ Individual element access, in various coordinate systems ------. Cartesian X, converting if necessary from internal coordinate system. { return fCoordinates.X(); }. Scalar Y() const. Cartesian Y, converting if necessary from internal coordinate system. { return fCoordinates.Y(); }. Scalar Z() const. Cartesian Z, converting if necessary from internal coordinate system. { return fCoordinates.Z(); }. Scalar R() const. Polar R, converting if necessary from internal coordinate system. { return fCoordinates.R(); }. Scalar Theta() const. Polar theta, converting if necessary from internal coordinate system. { return fCoordinates.Theta(); }. Scalar Phi() const. Polar phi, converting if necessary from internal coordinate system. { return fCoordinates.Phi(); }. Scalar Eta() const. Polar eta, converting if necessary from internal coordinate system. { return fCoordinates.Eta(); }. Scalar Rho() const. Cylindrical transverse component rho. { return fCoordinates.Rho(); }. Scalar Mag2() const; ----- Other fundamental pro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1GlobalCoordinateSystemTag_.html:13877,access,access,13877,root/html526/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1GlobalCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1CylindricalEta3D_Double32_t__-p1GlobalCoordinateSystemTag_.html,5,['access'],['access']
Security,"ROOT::Math::LocalCoordinateSystemTag>::Scalar& a, ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::LocalCoordinateSystemTag>::Scalar& b, ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::LocalCoordinateSystemTag>::Scalar& c) const. get internal data into 3 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c); }. void GetCoordinates(ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::LocalCoordinateSystemTag>::Scalar* dest) const. get internal data into a C-style array of 3 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. bool operator==(const ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::LocalCoordinateSystemTag>& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::PositionVector3D<ROOT::Math::Cartesian3D<Double32_t>,ROOT::Math::LocalCoordinateSystemTag>& rhs) const. Scalar X() const; ------ Individual element access, in various coordinate systems ------. Cartesian X, converting if necessary from internal coordinate system. { return fCoordinates.X(); }. Scalar Y() const. Cartesian Y, converting if necessary from internal coordinate system. { return fCoordinates.Y(); }. Scalar Z() const. Cartesian Z, converting if necessary from internal coordinate system. { return fCoordinates.Z(); }. Scalar R() const. Polar R, converting if necessary from internal coordinate system. { return fCoordinates.R(); }. Scalar Theta() const. Polar theta, converting if necessary from internal coordinate system. { return fCoordinates.Theta(); }. Scalar Phi() const. Polar phi, converting if necessary from internal coordinate system. { return fCoordinates.Phi(); }. Scalar Eta() const. Polar eta, converting if necessary from internal coordinate system. { return fCoordinates.Eta(); }. Scalar Rho() const. Cylindrical transverse component rho. { return fCoordinates.Rho(); }. Scalar Mag2() const; ----- Other fundamental pro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1LocalCoordinateSystemTag_.html:12402,access,access,12402,root/html526/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1LocalCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__PositionVector3D_-p1Cartesian3D_Double32_t__-p1LocalCoordinateSystemTag_.html,5,['access'],['access']
Security,"ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar* dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. LorentzVector<CoordSystem>& SetCoordinates(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar* src). Set internal data based on an array of 4 Scalar numbers. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html:14903,access,access,14903,root/html534/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,2,['access'],"['access', 'accessors']"
Security,"ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar* dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. LorentzVector<CoordSystem>& SetCoordinates(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar* src). Set internal data based on an array of 4 Scalar numbers. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html:14165,access,access,14165,root/html534/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html,2,['access'],"['access', 'accessors']"
Security,"ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::TransformFunction() const; virtual intROOT::Math::BasicMinimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::BasicMinimizer::VariableName(unsigned int ivar) const; virtual const double*ROOT::Math::BasicMinimizer::X() const. protected:. boolROOT::Math::BasicMinimizer::CheckDimension() const; boolROOT::Math::BasicMinimizer::CheckObjFunction() const; ROOT::Math::MinimTransformFunction*ROOT::Math::BasicMinimizer::CreateTransformation(vector<double>& startValues, const ROOT::Math::IMultiGradFunction* func = 0); voidROOT::Math::BasicMinimizer::SetFinalValues(const double* x); voidROOT::Math::BasicMinimizer::SetMinValue(double val). private:. ROOT::Math::GSLSimAnMinimizerGSLSimAnMinimizer(const ROOT::Math::GSLSimAnMinimizer&); ROOT::Math::GSLSimAnMinimizer&operator=(const ROOT::Math::GSLSimAnMinimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; intROOT::Math::Minimizer::fStatusstatus of minimizer ; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. ROOT::Math::GSLSimAnnealingfSolver. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLSimAnMinimizer(int type = 0). Default constructor. virtual ~GSLSimAnMinimizer(). Destructor (no operations). GSLSimAnMinimizer(const ROOT::Math::GSLSimAnMinimizer& ); usually copying is non trivial, so we make this unaccessible. Copy constructor. {}. bool Minimize(); method to perform the minimization. unsigned int NCalls() const; number of calls. » Author: L. Moneta Wed Dec 20 17:16:32 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 16:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GSLSimAnMinimizer.html:6841,validat,validated,6841,root/html534/ROOT__Math__GSLSimAnMinimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GSLSimAnMinimizer.html,1,['validat'],['validated']
Security,"ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& b, ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& c) const. get internal data into 3 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c); }. void GetCoordinates(ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar* dest) const. get internal data into a C-style array of 3 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. bool operator==(const ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::PositionVector3D<ROOT::Math::Polar3D<double>,ROOT::Math::DefaultCoordinateSystemTag>& rhs) const. Scalar X() const; ------ Individual element access, in various coordinate systems ------. Cartesian X, converting if necessary from internal coordinate system. { return fCoordinates.X(); }. Scalar Y() const. Cartesian Y, converting if necessary from internal coordinate system. { return fCoordinates.Y(); }. Scalar Z() const. Cartesian Z, converting if necessary from internal coordinate system. { return fCoordinates.Z(); }. Scalar R() const. Polar R, converting if necessary from internal coordinate system. { return fCoordinates.R(); }. Scalar Theta() const. Polar theta, converting if necessary from internal coordinate system. { return fCoordinates.Theta(); }. Scalar Phi() const. Polar phi, converting if necessary from internal coordinate system. { return fCoordinates.Phi(); }. Scalar Eta() const. Polar eta, converting if necessary from internal coordinate system. { return fCoordinates.Eta(); }. Scalar Rho() const. Cylindrical transverse component rho. { return fCoordinates.Rho(); }. Scalar Mag2() const; ----- Other fundamental pro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__PositionVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html:15643,access,access,15643,root/html526/ROOT__Math__PositionVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__PositionVector3D_-p1Polar3D_double__-p1DefaultCoordinateSystemTag_.html,5,['access'],['access']
Security,"ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >(const float& rhs); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >(const ROOT::Math::SVector<float,2*(2+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,2*(2+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<float,2,2>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:5233,access,access,5233,root/html526/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,2,['access'],"['access', 'accessing']"
Security,"ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >(const float& rhs); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >(const ROOT::Math::SVector<float,3*(3+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,3*(3+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<float,3,3>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:5233,access,access,5233,root/html526/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,2,['access'],"['access', 'accessing']"
Security,"ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >(const float& rhs); ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >(const ROOT::Math::SVector<float,3*(4+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,3*(4+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<float,3,4>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:5126,access,access,5126,root/html526/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,2,['access'],"['access', 'accessing']"
Security,"ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >(const float& rhs); ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >(const ROOT::Math::SVector<float,4*(3+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,4*(3+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<float,4,3>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:5126,access,access,5126,root/html526/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,2,['access'],"['access', 'accessing']"
Security,"ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >(const float& rhs); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >(const ROOT::Math::SVector<float,4*(4+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,4*(4+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<float,4,4>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:5233,access,access,5233,root/html526/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,2,['access'],"['access', 'accessing']"
Security,"ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >(const float& rhs); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >(const ROOT::Math::SVector<float,5*(5+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,5*(5+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<float,5,5>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:5233,access,access,5233,root/html526/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,2,['access'],"['access', 'accessing']"
Security,"ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >(const float& rhs); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >(const ROOT::Math::SVector<float,6*(6+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,6*(6+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<float,6,6>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:5233,access,access,5233,root/html526/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,2,['access'],"['access', 'accessing']"
Security,"ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >(const float& rhs); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >(const ROOT::Math::SVector<float,7*(7+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,7*(7+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<float,7,7>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:5233,access,access,5233,root/html526/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,2,['access'],"['access', 'accessing']"
Security,"ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >(const float& rhs); ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >(const ROOT::Math::SVector<float,9*(7+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,9*(7+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<float,9,7>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ; element wise com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:5156,access,access,5156,root/html526/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,2,['access'],"['access', 'accessing']"
Security,"ROOT::Math::SVector<Double32_t,3*(3+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<Double32_t,3,3>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const Double32_t& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const Double32_t& rhs) const; element wise comparison. bool operator<(const Double32_t& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:6000,access,access,6000,root/html526/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,1,['access'],['access']
Security,"ROOT::Math::SVector<Double32_t,4*(4+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<Double32_t,4,4>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const Double32_t& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const Double32_t& rhs) const; element wise comparison. bool operator<(const Double32_t& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:6000,access,access,6000,root/html526/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,1,['access'],['access']
Security,"ROOT::Math::SVector<Double32_t,5*(5+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<Double32_t,5,5>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const Double32_t& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const Double32_t& rhs) const; element wise comparison. bool operator<(const Double32_t& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:6000,access,access,6000,root/html526/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,1,['access'],['access']
Security,"ROOT::Math::SVector<Double32_t,6*(6+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<Double32_t,6,6>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const Double32_t& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const Double32_t& rhs) const; element wise comparison. bool operator<(const Double32_t& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:6000,access,access,6000,root/html526/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,1,['access'],['access']
Security,"ROPFIND results MAY be cached, with care,; 10527 * as there is no cache validation mechanism for; 10528 * most properties. This method is both safe and; 10529 * idempotent (see Section 9.1 of [RFC2616]). */; 10530 {""MKCOL"", 0, 0, 0, 1, 0},; 10531 /* http://www.webdav.org/specs/rfc4918.html, 9.1:; 10532 * When MKCOL is invoked without a request body,; 10533 * the newly created collection SHOULD have no; 10534 * members. A MKCOL request message may contain; 10535 * a message body. The precise behavior of a MKCOL; 10536 * request when the body is present is undefined,; 10537 * ... ==> We do not support MKCOL with body data.; 10538 * This method is idempotent, but not safe (see; 10539 * Section 9.1 of [RFC2616]). Responses to this; 10540 * method MUST NOT be cached. */; 10541 ; 10542 /* Methods for write access to files on WEBDAV (RFC 2518) */; 10543 {""LOCK"", 1, 1, 0, 0, 0},; 10544 {""UNLOCK"", 1, 0, 0, 0, 0},; 10545 {""PROPPATCH"", 1, 1, 0, 0, 0},; 10546 ; 10547 /* Unsupported WEBDAV Methods: */; 10548 /* COPY, MOVE (RFC 2518) */; 10549 /* + 11 methods from RFC 3253 */; 10550 /* ORDERPATCH (RFC 3648) */; 10551 /* ACL (RFC 3744) */; 10552 /* SEARCH (RFC 5323) */; 10553 /* + MicroSoft extensions; 10554 * https://msdn.microsoft.com/en-us/library/aa142917.aspx */; 10555 ; 10556 /* REPORT method (RFC 3253) */; 10557 {""REPORT"", 1, 1, 1, 1, 1},; 10558 /* REPORT method only allowed for CGI/Lua/LSP and callbacks. */; 10559 /* It was defined for WEBDAV in RFC 3253, Sec. 3.6; 10560 * (https://tools.ietf.org/html/rfc3253#section-3.6), but seems; 10561 * to be useful for REST in case a ""GET request with body"" is; 10562 * required. */; 10563 ; 10564 {NULL, 0, 0, 0, 0, 0}; 10565 /* end of list */; 10566};; 10567 ; 10568 ; 10569static const struct mg_http_method_info *; 10570get_http_method_info(const char *method); 10571{; 10572 /* Check if the method is known to the server. The list of all known; 10573 * HTTP methods can be found here at; 10574 * http://www.iana.org/assignments/http-met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:303027,access,access,303027,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['access'],['access']
Security,"ROPFIND results MAY be cached, with care,; 10528 * as there is no cache validation mechanism for; 10529 * most properties. This method is both safe and; 10530 * idempotent (see Section 9.1 of [RFC2616]). */; 10531 {""MKCOL"", 0, 0, 0, 1, 0},; 10532 /* http://www.webdav.org/specs/rfc4918.html, 9.1:; 10533 * When MKCOL is invoked without a request body,; 10534 * the newly created collection SHOULD have no; 10535 * members. A MKCOL request message may contain; 10536 * a message body. The precise behavior of a MKCOL; 10537 * request when the body is present is undefined,; 10538 * ... ==> We do not support MKCOL with body data.; 10539 * This method is idempotent, but not safe (see; 10540 * Section 9.1 of [RFC2616]). Responses to this; 10541 * method MUST NOT be cached. */; 10542 ; 10543 /* Methods for write access to files on WEBDAV (RFC 2518) */; 10544 {""LOCK"", 1, 1, 0, 0, 0},; 10545 {""UNLOCK"", 1, 0, 0, 0, 0},; 10546 {""PROPPATCH"", 1, 1, 0, 0, 0},; 10547 ; 10548 /* Unsupported WEBDAV Methods: */; 10549 /* COPY, MOVE (RFC 2518) */; 10550 /* + 11 methods from RFC 3253 */; 10551 /* ORDERPATCH (RFC 3648) */; 10552 /* ACL (RFC 3744) */; 10553 /* SEARCH (RFC 5323) */; 10554 /* + MicroSoft extensions; 10555 * https://msdn.microsoft.com/en-us/library/aa142917.aspx */; 10556 ; 10557 /* REPORT method (RFC 3253) */; 10558 {""REPORT"", 1, 1, 1, 1, 1},; 10559 /* REPORT method only allowed for CGI/Lua/LSP and callbacks. */; 10560 /* It was defined for WEBDAV in RFC 3253, Sec. 3.6; 10561 * (https://tools.ietf.org/html/rfc3253#section-3.6), but seems; 10562 * to be useful for REST in case a ""GET request with body"" is; 10563 * required. */; 10564 ; 10565 {NULL, 0, 0, 0, 0, 0}; 10566 /* end of list */; 10567};; 10568 ; 10569 ; 10570static const struct mg_http_method_info *; 10571get_http_method_info(const char *method); 10572{; 10573 /* Check if the method is known to the server. The list of all known; 10574 * HTTP methods can be found here at; 10575 * http://www.iana.org/assignments/http-met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:303060,access,access,303060,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['access'],['access']
Security,"RP, Krb5, Globus, SSH or UidGid authentication; [port] = is the remote port number; [service] = service name used to determine the port; (for backward compatibility, specification of; port as priority); options = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by; TSlave). An already opened connection can be used by passing its socket; in opensock. Example:. TSocket::CreateAuthSocket(""rootds://qwerty@machine.fq.dn:5051""). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel"" sockets; are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. TSocket * CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0); Creates a socket or a parallel socket and authenticates to the; remote server specified in 'url' on remote 'port' as 'user'. url: [[proto][p][auth]://]host[/?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [options] = ""m"" or ""s"", when proto=proofd indicates whether; we are mast",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSocket.html:21008,authenticat,authentication,21008,root/html528/TSocket.html,https://root.cern,https://root.cern/root/html528/TSocket.html,1,['authenticat'],['authentication']
Security,"RPageSink::RegisterOnCommitDatasetCallback ; (; Callback_t ; callback). inline . The registered callback is executed at the beginning of CommitDataset();. ; Definition at line 390 of file RPageStorage.hxx. ◆ ReservePage(). ROOT::Experimental::Internal::RPage ROOT::Experimental::Internal::RPageSink::ReservePage ; (; ColumnHandle_t ; columnHandle, . std::size_t ; nElements . ). virtual . Get a new, empty page for the given column that can be filled with up to nElements; nElements must be larger than zero. ; Reimplemented in ROOT::Experimental::Internal::RPageSinkBuf.; Definition at line 681 of file RPageStorage.cxx. ◆ SealPage() [1/2]. ROOT::Experimental::Internal::RPageStorage::RSealedPage ROOT::Experimental::Internal::RPageSink::SealPage ; (; const RPage & ; page, . const RColumnElementBase & ; element . ). protected . Helper for streaming a page. ; This is commonly used in derived, concrete page sinks. Note that if compressionSetting is 0 (uncompressed) and the page is mappable and not checksummed, the returned sealed page will point directly to the input page buffer. Otherwise, the sealed page references an internal buffer of fCompressor. Thus, the buffer pointed to by the RSealedPage should never be freed. Usage of this method requires construction of fCompressor. ; Definition at line 656 of file RPageStorage.cxx. ◆ SealPage() [2/2]. ROOT::Experimental::Internal::RPageStorage::RSealedPage ROOT::Experimental::Internal::RPageSink::SealPage ; (; const RSealPageConfig & ; config). static . Seal a page using the provided info. ; Definition at line 619 of file RPageStorage.cxx. ◆ StageCluster(). virtual RStagedCluster ROOT::Experimental::Internal::RPageSink::StageCluster ; (; NTupleSize_t ; nNewEntries). pure virtual . Stage the current cluster and create a new one for the following data. ; Returns the object that must be passed to CommitStagedClusters to logically append the staged cluster to the ntuple descriptor. ; Implemented in ROOT::Experimental::Internal::RPageSi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html:15244,checksum,checksummed,15244,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSink.html,1,['checksum'],['checksummed']
Security,"RResultHandle conversion is automatic; 182/// ROOT::RDF::RunGraphs({r1, r2});; 183/// ~~~; 184// clang-format on; 185unsigned int RunGraphs(std::vector<RResultHandle> handles);; 186 ; 187namespace Experimental {; 188 ; 189/// \brief Produce all required systematic variations for the given result.; 190/// \param[in] resPtr The result for which variations should be produced.; 191/// \return A \ref ROOT::RDF::Experimental::RResultMap ""RResultMap"" object with full variation names as strings; 192/// (e.g. ""pt:down"") and the corresponding varied results as values.; 193///; 194/// A given input RResultPtr<T> produces a corresponding RResultMap<T> with a ""nominal""; 195/// key that will return a value identical to the one contained in the original RResultPtr.; 196/// Other keys correspond to the varied values of this result, one for each variation; 197/// that the result depends on.; 198/// VariationsFor does not trigger the event loop. The event loop is only triggered; 199/// upon first access to a valid key, similarly to what happens with RResultPtr.; 200///; 201/// If the result does not depend, directly or indirectly, from any registered systematic variation, the; 202/// returned RResultMap will contain only the ""nominal"" key.; 203///; 204/// See RDataFrame's \ref ROOT::RDF::RInterface::Vary() ""Vary"" method for more information and example usages.; 205///; 206/// \note Currently, producing variations for the results of \ref ROOT::RDF::RInterface::Display() ""Display"",; 207/// \ref ROOT::RDF::RInterface::Report() ""Report"" and \ref ROOT::RDF::RInterface::Snapshot() ""Snapshot""; 208/// actions is not supported.; 209//; 210// An overview of how systematic variations work internally. Given N variations (including the nominal):; 211//; 212// RResultMap owns RVariedAction; 213// N results N action helpers; 214// N previous filters; 215// N*#input_cols column readers; 216//; 217// ...and each RFilter and RDefine knows for what universe it needs to construct column readers (""nomina",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDFHelpers_8hxx_source.html:9060,access,access,9060,doc/master/RDFHelpers_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RDFHelpers_8hxx_source.html,1,['access'],['access']
Security,"RUE in case object contains browsable objects (like containers or lists of other objects). ;  ; Bool_t IsOwner () const;  ; Bool_t IsSortable () const override;  ; R__ALWAYS_INLINE Bool_t IsUsingRWLock () const;  ; virtual TIterator * MakeReverseIterator () const;  ; Bool_t Notify () override;  'Notify' all objects in this collection. ;  ; TObject * operator() (const char *name) const;  Find an object in this collection by name. ;  ; void Paint (Option_t *option="""") override;  Paint all objects in this collection. ;  ; void RemoveAll ();  ; virtual void RemoveAll (TCollection *col);  Remove all objects in collection col from this collection. ;  ; void SetCurrentCollection ();  Set this collection to be the globally accessible collection. ;  ; void SetName (const char *name);  ; virtual void SetOwner (Bool_t enable=kTRUE);  Set whether this collection is the owner (enable==true) of its content. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool UseRWLock (Bool_t enable=true);  Set this collection to use a RW lock upon access, making it thread safe. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write all objects in this collection. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write all objects in this collection. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofOutputList.html:8129,access,access,8129,doc/master/classTProofOutputList.html,https://root.cern,https://root.cern/doc/master/classTProofOutputList.html,1,['access'],['access']
Security,"RUE); Specify usage of DTD for this file.; Currently this option not available (always false).; Can be changed only for newly created file. void SetUseNamespaces(Bool_t iUseNamespaces = kTRUE); Specifiy usage of namespaces in xml file; In current implementation every instrumented class in file gets its unique namespace,; which is equal to name of class and refer to root documentation page like; <TAttPad xmlns:TAttPad=""http://root.cern.ch/root/htmldoc/TAttPad.html"" version=""3"">; And xml node for class member gets its name as combination of class name and member name; <TAttPad:fLeftMargin v=""0.100000""/>; <TAttPad:fRightMargin v=""0.100000""/>; <TAttPad:fBottomMargin v=""0.100000""/>; and so on; Usage of namespace increase size of xml file, but makes file more readable; and allows to produce DTD in the case, when in several classes data member has same name; Can be changed only for newly created file. Bool_t AddXmlComment(const char* comment); Add comment line on the top of the xml document; This line can only be seen in xml editor and cannot be accessed later; with TXMLFile methods. Bool_t AddXmlStyleSheet(const char* href, const char* type = ""text/css"", const char* title = 0, int alternate = -1, const char* media = 0, const char* charset = 0); Adds style sheet definition on the top of xml document; Creates <?xml-stylesheet alternate=""yes"" title=""compact"" href=""small-base.css"" type=""text/css""?>; Attributes href and type must be supplied,; other attributes: title, alternate, media, charset are optional; if alternate==0, attribyte alternate=""no"" will be created,; if alternate>0, attribute alternate=""yes""; if alternate<0, attribute will not be created; This style sheet definition cannot be later access with TXMLFile methods. Bool_t AddXmlLine(const char* line); Add just one line on the top of xml document; For instance, line can contain special xml processing instructions; Line should has correct xml syntax that later it can be decoded by xml parser; To be parsed later by TX",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXMLFile.html:32082,access,accessed,32082,root/html534/TXMLFile.html,https://root.cern,https://root.cern/root/html534/TXMLFile.html,3,['access'],['accessed']
Security,"RUE); Specify usage of DTD for this file.; Currently this option not avaliable (always false).; Can be changed only for newly created file. void SetUseNamespaces(Bool_t iUseNamespaces = kTRUE); Specifiy usage of namespaces in xml file; In current implementation every instrumented class in file gets its unique namespace,; which is equal to name of class and refer to root documentation page like; <TAttPad xmlns:TAttPad=""http://root.cern.ch/root/htmldoc/TAttPad.html"" version=""3"">; And xml node for class member gets its name as combination of class name and member name; <TAttPad:fLeftMargin v=""0.100000""/>; <TAttPad:fRightMargin v=""0.100000""/>; <TAttPad:fBottomMargin v=""0.100000""/>; and so on; Usage of namespace increase size of xml file, but makes file more readable; and allows to produce DTD in the case, when in several classes data member has same name; Can be changed only for newly created file. Bool_t AddXmlComment(const char* comment); Add comment line on the top of the xml document; This line can only be seen in xml editor and cannot be accessed later; with TXMLFile methods. Bool_t AddXmlStyleSheet(const char* href, const char* type = ""text/css"", const char* title = 0, int alternate = -1, const char* media = 0, const char* charset = 0); Adds style sheet definition on the top of xml document; Creates <?xml-stylesheet alternate=""yes"" title=""compact"" href=""small-base.css"" type=""text/css""?>; Attributes href and type must be supplied,; other attributes: title, alternate, media, charset are optional; if alternate==0, attribyte alternate=""no"" will be created,; if alternate>0, attribute alternate=""yes""; if alternate<0, attribute will not be created; This style sheet definition cannot be later access with TXMLFile methods. Bool_t AddXmlLine(const char* line); Add just one line on the top of xml document; For instance, line can contain special xml processing instructions; Line should has correct xml syntax that later it can be decoded by xml parser; To be parsed later by TX",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLFile.html:31089,access,accessed,31089,root/html528/TXMLFile.html,https://root.cern,https://root.cern/root/html528/TXMLFile.html,3,['access'],['accessed']
Security,"RUE . ). Cast obj of this class type up to baseclass cl if up is true. ; Cast obj of this class type down from baseclass cl if up is false. If this class is not a baseclass of cl return 0, else the pointer to the cl part of this (up) or to this (down). ; Definition at line 4915 of file TClass.cxx. ◆ EscapeChars(). char * TClass::EscapeChars ; (; const char * ; text); const. Introduce an escape character (@) in front of a special chars. ; You need to use the result immediately before it is being overwritten. ; Definition at line 2568 of file TClass.cxx. ◆ FindClassOrBaseMethodWithId(). TMethod * TClass::FindClassOrBaseMethodWithId ; (; DeclId_t ; faddr). private . Find a method with decl id in this class or its bases. ; Definition at line 4440 of file TClass.cxx. ◆ FindConversionStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindConversionStreamerInfo ; (; const char * ; onfile_classname, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. ; Definition at line 7193 of file TClass.cxx. ◆ FindConversionStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindConversionStreamerInfo ; (; const TClass * ; onfile_cl, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class represented by cl for the layout represented by 'checksum' to this class, if any. ; Definition at line 7204 of file TClass.cxx. ◆ FindStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; TObjArray * ; arr, . UInt_t ; checksum . ); const. protected . Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7066 of file TClass.cxx. ◆ FindStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; UInt_t ; checksum, . Bool_t ; isTransient = kFALSE . ); const. Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7036 of file TClass.cxx. ◆ FindStreamerInfo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:67138,checksum,checksum,67138,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,1,['checksum'],['checksum']
Security,"RUE . ). Cast obj of this class type up to baseclass cl if up is true. ; Cast obj of this class type down from baseclass cl if up is false. If this class is not a baseclass of cl return 0, else the pointer to the cl part of this (up) or to this (down). ; Definition at line 4982 of file TClass.cxx. ◆ EscapeChars(). char * TClass::EscapeChars ; (; const char * ; text); const. Introduce an escape character (@) in front of a special chars. ; You need to use the result immediately before it is being overwritten. ; Definition at line 2635 of file TClass.cxx. ◆ FindClassOrBaseMethodWithId(). TMethod * TClass::FindClassOrBaseMethodWithId ; (; DeclId_t ; faddr). private . Find a method with decl id in this class or its bases. ; Definition at line 4507 of file TClass.cxx. ◆ FindConversionStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindConversionStreamerInfo ; (; const char * ; onfile_classname, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class 'classname' for the layout represented by 'checksum' to this class, if any. ; Definition at line 7260 of file TClass.cxx. ◆ FindConversionStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindConversionStreamerInfo ; (; const TClass * ; onfile_cl, . UInt_t ; checksum . ); const. Return a Conversion StreamerInfo from the class represented by cl for the layout represented by 'checksum' to this class, if any. ; Definition at line 7271 of file TClass.cxx. ◆ FindStreamerInfo() [1/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; TObjArray * ; arr, . UInt_t ; checksum . ); const. protected . Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7133 of file TClass.cxx. ◆ FindStreamerInfo() [2/2]. TVirtualStreamerInfo * TClass::FindStreamerInfo ; (; UInt_t ; checksum, . Bool_t ; isTransient = kFALSE . ); const. Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ; Definition at line 7103 of file TClass.cxx. ◆ FindStreamerInfo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass.html:67139,checksum,checksum,67139,doc/master/classTClass.html,https://root.cern,https://root.cern/doc/master/classTClass.html,1,['checksum'],['checksum']
Security,"R__EXTERN TSystem * gSystemDefinition TSystem.h:561; kS_IXOTH@ kS_IXOTHDefinition TSystem.h:110; kS_IXUSR@ kS_IXUSRDefinition TSystem.h:102; kS_IXGRP@ kS_IXGRPDefinition TSystem.h:106; TUrl.h; TVersionCheck.h; TVirtualMutex.h; R__LOCKGUARD2#define R__LOCKGUARD2(mutex)Definition TVirtualMutex.h:96; R__WRITE_LOCKGUARD#define R__WRITE_LOCKGUARD(mutex)Definition TVirtualRWMutex.h:157; R__READ_LOCKGUARD#define R__READ_LOCKGUARD(mutex)Definition TVirtualRWMutex.h:154; ThreadLocalStorage.h; Windows4Root.h; protoconst char * protoDefinition civetweb.c:17535; extensionconst char * extensionDefinition civetweb.c:8025; snprintf#define snprintfDefinition civetweb.c:1540; TApplication::StopIdleingvirtual void StopIdleing()Called when system stops idleing.Definition TApplication.cxx:1907; TApplication::StartIdleingvirtual void StartIdleing()Called when system starts idleing.Definition TApplication.cxx:1896; TCollection::Removevirtual TObject * Remove(TObject *obj)=0; TCollection::UseRWLockvirtual bool UseRWLock(Bool_t enable=true)Set this collection to use a RW lock upon access, making it thread safe.Definition TCollection.cxx:761; TCollection::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this collection using its name.Definition TCollection.cxx:312; TCollection::Deletevoid Delete(Option_t *option="""") override=0Delete this object.; TEnvRecDefinition TEnv.h:86; TEnvThe TEnv class reads config files, by default named .rootrc.Definition TEnv.h:124; TEnv::GetValuevirtual Int_t GetValue(const char *name, Int_t dflt) constReturns the integer value for a resource.Definition TEnv.cxx:491; TEnv::GetTableTHashList * GetTable() constDefinition TEnv.h:140; TFileHandlerDefinition TSysEvtHandler.h:65; TInetAddressThis class represents an Internet Protocol (IP) address.Definition TInetAddress.h:36; TIterDefinition TCollection.h:235; TListIterIterator of linked list.Definition TList.h:193; TListIter::NextTObject * Next() overrideReturn next object in the list. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:159446,access,access,159446,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['access'],['access']
Security,"Read; kWrite; };; enum TSocket::EServiceType { kSOCKD; kROOTD; kPROOFD; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompresscompression level from 0 (not compressed); TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. Int_t*fReadBytesLeftbytes left to read for specified socket; TMonitor*fReadMonitormonitor read from parallel sockets; char**fReadPtrpointer to read buffer for specified socket; Int_tfSizenumber of parallel sockets; TSocket**fSocketsarray of parallel sockets; Int_t*fWriteBytesLeftbytes left to write for specified socket; TMonito",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPSocket.html:9870,authenticat,authentication,9870,root/html528/TPSocket.html,https://root.cern,https://root.cern/root/html528/TPSocket.html,1,['authenticat'],['authentication']
Security,"Read; kWrite; };; enum TSocket::EServiceType { kSOCKD; kROOTD; kPROOFD; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompresscompression level from 0 (not compressed); TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. Int_tfTcpWindowSizesize of tcp window (for window scaling). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a parallel server socket object on a specified port. Set reus",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPServerSocket.html:9994,authenticat,authentication,9994,root/html528/TPServerSocket.html,https://root.cern,https://root.cern/root/html528/TPServerSocket.html,1,['authenticat'],['authentication']
Security,"Read; kWrite; };; enum TSocket::EServiceType { kSOCKD; kROOTD; kPROOFD; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompresscompression level from 0 (not compressed); TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TMutex*fAMtxTo protect async msg queue; list<TXSockBuf*>fAQuelist of asynchronous messages; TSemaphorefASemControl access to conn async msg queue; TSemaphorefAsynProcControl actions while processing async messages; TXSockBuf*fBufCurcurrent read buffer; TStringfBufferContainer for exchanging information; Int_tfByteCurcurrent pos",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXSocket.html:10398,authenticat,authentication,10398,root/html528/TXSocket.html,https://root.cern,https://root.cern/root/html528/TXSocket.html,1,['authenticat'],['authentication']
Security,"Read; kWrite; };; enum TSocket::EServiceType { kSOCKD; kROOTD; kPROOFD; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompresscompression level from 0 (not compressed); TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TSeqCollection*fSecContextsList of TSecContext with cleanup info; static UChar_tfgAcceptOptDefault accept options; static void*fgSrvAuthClupHook; static void*fgSrvAuthHook. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TServerSocket(const char* service, Bool_t reuse = kFALSE, Int_t b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TServerSocket.html:9677,authenticat,authentication,9677,root/html528/TServerSocket.html,https://root.cern,https://root.cern/root/html528/TServerSocket.html,1,['authenticat'],['authentication']
Security,"Read; kWrite; };; enum TSocket::EServiceType { kSOCKD; kROOTD; kPROOFD; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompresscompression level from 0 (not compressed); TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. list<Int_t>fClientIDs. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXUnixSocket(const char* u, Int_t psid = -1, Char_t ver = -1, TXHandler* handler = 0); Constructor. Int_t Reconnect(); Try reconnection after failure. virtual ~TXUnixSocket(); { fSessionID = -1; }. Int_t GetClientID",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXUnixSocket.html:10549,authenticat,authentication,10549,root/html528/TXUnixSocket.html,https://root.cern,https://root.cern/root/html528/TXUnixSocket.html,1,['authenticat'],['authentication']
Security,"ReadBufferArtificial (TBuffer &b, const T &arrptr, TStreamerElement *aElement, Int_t narr, Int_t eoffset);  Handle Artificial StreamerElement. ;  ; Int_t ReadBufferClones (TBuffer &b, TClonesArray *clones, Int_t nc, Int_t first, Int_t eoffset);  Read for TClonesArray. ;  ; template<class T > ; Int_t ReadBufferConv (TBuffer &b, const T &arrptr, const TCompInfo *compinfo, Int_t kase, TStreamerElement *aElement, Int_t narr, Int_t eoffset);  Convert elements of a TClonesArray. ;  ; template<class T > ; Int_t ReadBufferSkip (TBuffer &b, const T &arrptr, const TCompInfo *compinfo, Int_t kase, TStreamerElement *aElement, Int_t narr, Int_t eoffset);  Skip an element. ;  ; Int_t ReadBufferSTL (TBuffer &b, TVirtualCollectionProxy *cont, Int_t nc, Int_t eoffset, Bool_t v7=kTRUE);  The STL vector/list is deserialized from the buffer b. ;  ; void SetCheckSum (UInt_t checksum) override;  ; void SetClass (TClass *cl) override;  Replace the TClass this streamerInfo is pointing to (belongs to) ;  ; void SetClassVersion (Int_t vers) override;  ; void SetOnFileClassVersion (Int_t vers);  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerInfo. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TagFile (TFile *fFile) override;  Mark the classindex of the current file as using this TStreamerInfo. ;  ; void Update (const TClass *oldClass, TClass *newClass) override;  function called by the TClass constructor when replacing an emulated class by the real class ;  ; template<class T > ; Int_t WriteBufferAux (TBuffer &b, const T &arr, TCompInfo *const *const compinfo, Int_t first, Int_t last, Int_t narr, Int_t eoffset, Int_t mode);  The object at pointer is serialized to the buffer b if (arrayMode & 1) ptr is a pointer to array of pointers to the objects otherwise it is a pointer to a pointer to a single object. ;  ;  Public Member Functions inherited from TVirtualStreamerInfo;  TVirtualStreamerInfo ();  Default constructor. ;  ;  TVirtualStream",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerInfo.html:13198,checksum,checksum,13198,doc/master/classTStreamerInfo.html,https://root.cern,https://root.cern/doc/master/classTStreamerInfo.html,1,['checksum'],['checksum']
Security,"Reader.C and tutorials/trees/h1analysisTreeReader.h and; tutorials/trees/h1analysisTreeReader.C for a TSelector.; Roottest contains an; example; showing the full power.; A simpler analysis example - the one from the tutorials - can be found below:; it histograms a function of the px and py branches.;  ; // A simple TTreeReader use: read data from hsimple.root (written by hsimple.C);  ; #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h"";  ; void hsimpleReader() {; // Create a histogram for the values we read.; TH1F *myHist = new TH1F(""h1"", ""ntuple"", 100, -4, 4);;  ; // Open the file containing the tree.; TFile *myFile = TFile::Open(""$ROOTSYS/tutorials/hsimple.root"");;  ; // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);;  ; // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");;  ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; };  ; myHist->Draw();; }. A more complete example including error handling and a few combinations of; TTreeReaderValue and TTreeReaderArray would look like this:. #include <TFile.h>; #include <TH1.h>; #include <TTreeReader.h>; #include <TTreeReaderValue.h>; #include <TTreeReaderArray.h>;  ; #include ""TriggerInfo.h""; #include ""Muon.h""; #include ""Tau.h"";  ; #include <vector>; #include <iostream>;  ; bool CheckValue(ROOT::TTreeReaderValueBase* value) {; if (value->GetSetupStatus() < 0) {; std::cerr << ""Error "" << value->GetSetupStatus(); << ""setting up reader for "" << value->GetBranchName() << '\n';; return false;; }; return true;; };  ;  ; // Analyze the tree ""MyTree"" in the file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeReader.html:1585,access,access,1585,root/html602/TTreeReader.html,https://root.cern,https://root.cern/root/html602/TTreeReader.html,2,['access'],['access']
Security,"Real::ScaleType { Raw; Relative; NumEvent; RelativeExpected; };; enum RooAbsReal::ErrorLoggingMode { PrintErrors; CollectErrors; CountErrors; Ignore; };; enum RooAbsArg::ConstOpCode { Activate; DeActivate; ConfigChange; ValueChange; };; enum RooAbsArg::OperMode { Auto; AClean; ADirty; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; Bool_t_cdfBoundariesUse boundary conditions for CDFs.; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistry_codeReg! Auxiliary class keeping tracking of analytical integration code; RooDataHist*_dataHistUnowned pointer to underlying histogram; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooHistPdf.html:38119,validat,validate,38119,root/html532/RooHistPdf.html,https://root.cern,https://root.cern/root/html532/RooHistPdf.html,1,['validat'],['validate']
Security,"Real::ScaleType { Raw; Relative; NumEvent; RelativeExpected; };; enum RooAbsReal::ErrorLoggingMode { PrintErrors; CollectErrors; CountErrors; Ignore; };; enum RooAbsArg::ConstOpCode { Activate; DeActivate; ConfigChange; ValueChange; };; enum RooAbsArg::OperMode { Auto; AClean; ADirty; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; Bool_t_cdfBoundariesUse boundary conditions for CDFs.; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAICRegistry_codeReg! Auxiliary class keeping tracking of analytical integration code; RooDataHist*_dataHistUnowned pointer to underlying histogram; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooSetProxy_depListList of dependents defining dimensions of histogram; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooHistFunc.html:31062,validat,validate,31062,root/html532/RooHistFunc.html,https://root.cern,https://root.cern/root/html532/RooHistFunc.html,1,['validat'],['validate']
Security,"Result &rhs)Definition FitConfig.cxx:80; ROOT::Fit::FitConfig::CreateParamsSettingsvoid CreateParamsSettings(const ROOT::Math::IParamMultiFunctionTempl< T > &func)set the parameter settings from a model function.Definition FitConfig.h:109; ROOT::Fit::FitConfig::MinimizerTypeconst std::string & MinimizerType() constreturn type of minimizer packageDefinition FitConfig.h:187; ROOT::Fit::FitConfig::fWeightCorrbool fWeightCorrapply correction to errors for weights fitsDefinition FitConfig.h:263; ROOT::Fit::FitConfig::ParSettingsconst ParameterSettings & ParSettings(unsigned int i) constget the parameter settings for the i-th parameter (const method)Definition FitConfig.h:76; ROOT::Fit::FitConfig::fUpdateAfterFitbool fUpdateAfterFitupdate the configuration after a fit using the resultDefinition FitConfig.h:262; ROOT::Fit::FitConfig::operator=FitConfig & operator=(const FitConfig &rhs)Definition FitConfig.cxx:62; ROOT::Fit::FitConfig::MinimizerOptionsROOT::Math::MinimizerOptions & MinimizerOptions()access to the minimizer control parameter (non const method)Definition FitConfig.h:167; ROOT::Fit::FitConfig::MinosErrorsbool MinosErrors() constdo minos errors analysis on the parametersDefinition FitConfig.h:208; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::ParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/re...Definition ParameterSettings.h:33; ROOT::Math::IBaseParam::Parametersvirtual const double * Parameters() const =0Access the parameter values.; ROOT::Math::IBaseParam::ParameterNamevirtual std::string ParameterName(unsigned int i) constReturn the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default nam...Definition IParamFunction.h:86; ROOT::Math::IBaseParam::NParvirtual unsigned int NPar() const =0Return the number of Parameters.; ROOT::Math::IParametricFunction",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FitConfig_8h_source.html:15707,access,access,15707,doc/master/FitConfig_8h_source.html,https://root.cern,https://root.cern/doc/master/FitConfig_8h_source.html,1,['access'],['access']
Security,"ResultPtr<::TGraphAsymmErrors>; 2278 GraphAsymmErrors(std::string_view x = """", std::string_view y = """", std::string_view exl = """",; 2279 std::string_view exh = """", std::string_view eyl = """", std::string_view eyh = """"); 2280 {; 2281 auto graph = std::make_shared<::TGraphAsymmErrors>();; 2282 const std::vector<std::string_view> columnViews = {x, y, exl, exh, eyl, eyh};; 2283 const auto userColumns = RDFInternal::AtLeastOneEmptyString(columnViews); 2284 ? ColumnNames_t(); 2285 : ColumnNames_t(columnViews.begin(), columnViews.end());; 2286 ; 2287 const auto validatedColumns = GetValidatedColumnNames(6, userColumns);; 2288 ; 2289 // We build a default name and title based on the input columns; 2290 const auto g_name = validatedColumns[1] + ""_vs_"" + validatedColumns[0];; 2291 const auto g_title = validatedColumns[1] + "" vs "" + validatedColumns[0];; 2292 graph->SetNameTitle(g_name.c_str(), g_title.c_str());; 2293 graph->GetXaxis()->SetTitle(validatedColumns[0].c_str());; 2294 graph->GetYaxis()->SetTitle(validatedColumns[1].c_str());; 2295 ; 2296 return CreateAction<RDFInternal::ActionTags::GraphAsymmErrors, X, Y, EXL, EXH, EYL, EYH>(validatedColumns, graph,; 2297 graph, fProxiedPtr);; 2298 }; 2299 ; 2300 ////////////////////////////////////////////////////////////////////////////; 2301 /// \brief Fill and return a one-dimensional profile (*lazy action*).; 2302 /// \tparam V1 The type of the column the values of which are used to fill the profile. Inferred if not present.; 2303 /// \tparam V2 The type of the column the values of which are used to fill the profile. Inferred if not present.; 2304 /// \param[in] model The model to be considered to build the new return value.; 2305 /// \param[in] v1Name The name of the column that will fill the x axis.; 2306 /// \param[in] v2Name The name of the column that will fill the y axis.; 2307 /// \return the monodimensional profile wrapped in a RResultPtr.; 2308 ///; 2309 /// This action is *lazy*: upon invocation of this method the ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:128754,validat,validatedColumns,128754,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['validat'],['validatedColumns']
Security,"Return (after creating it if necessary) the TDataMember; describing the data member corresponding to the Decl 'id'. TDictionary * Get(DataMemberInfo_t* info, bool skipChecks = false); Return (after creating it if necessary) the TDataMember; describing the data member corresponding to the Decl 'id'.; The skipChecks flag controls the consistency checks performed inspecting; the AST. In some cases, we explicitely alter the datamembers in the; typesystem with respect to the AST and therefore we must not enforce; consistency. void UnmapObject(TObject* obj); Remove a pair<id, object> from the map of data members and their ids. void RecursiveRemove(TObject* obj); Remove object from this collection and recursively remove the object; from all other objects (and collections).; This function overrides TCollection::RecursiveRemove that calls; the Remove function. THashList::Remove cannot be called because; it uses the hash value of the hash table. This hash value; is not available anymore when RecursiveRemove is called from; the TObject destructor. TObject* Remove(TObject* obj); Remove object from the list. TObject* Remove(TObjLink* lnk); Remove object via its objlink from the list. void Load(); Load all the DataMembers known to the intepreter for the scope 'fClass'; into this collection. void Streamer(TBuffer& ); Stream an object of class TListOfDataMembers. void Update(TDictionary* member); Move the member or data member to the expect set of list. void Unload(); Mark 'all func' as being unloaded.; After the unload, the data member can no longer be found directly,; until the decl can be found again in the interpreter (in which; the func object will be reused. void Unload(TDictionary* member); Mark 'func' as being unloaded.; After the unload, the data member can no longer be found directly,; until the decl can be found again in the interpreter (in which; the func object will be reused. TListOfDataMembers(const TListOfDataMembers& ). TListOfDataMembers& operator=(const TListOfDat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TListOfDataMembers.html:14495,hash,hash,14495,root/html602/TListOfDataMembers.html,https://root.cern,https://root.cern/root/html602/TListOfDataMembers.html,1,['hash'],['hash']
Security,"Return the set of overloads for this name, collecting all available ones.; Can construct and insert new TFunction-s. TList* GetListForObject(const char* name) const; Return the set of overloads for this name, collecting all available ones.; Can construct and insert new TFunction-s. TList* GetListForObject(const TObject* obj) const; Return the set of overloads for function obj, collecting all available ones.; Can construct and insert new TFunction-s. TFunction * Get(TListOfFunctions::DeclId_t id); Return (after creating it if necessary) the TMethod or TFunction; describing the function corresponding to the Decl 'id'. void UnmapObject(TObject* obj); Remove a pair<id, object> from the map of functions and their ids. void RecursiveRemove(TObject* obj); Remove object from this collection and recursively remove the object; from all other objects (and collections).; This function overrides TCollection::RecursiveRemove that calls; the Remove function. THashList::Remove cannot be called because; it uses the hash value of the hash table. This hash value; is not available anymore when RecursiveRemove is called from; the TObject destructor. TObject* Remove(TObject* obj); Remove object from the list. TObject* Remove(TObjLink* lnk); Remove object via its objlink from the list. void Load(); Load all the functions known to the intepreter for the scope 'fClass'; into this collection. void Unload(); Mark 'all func' as being unloaded.; After the unload, the function can no longer be found directly,; until the decl can be found again in the interpreter (in which; the func object will be reused. void Unload(TFunction* func); Mark 'func' as being unloaded.; After the unload, the function can no longer be found directly,; until the decl can be found again in the interpreter (in which; the func object will be reused. TObject* FindObject(const TObject* obj) const. TIterator* MakeIterator(Bool_t dir = kIterForward) const. TObject* At(Int_t idx) const. TObject* After(const TObject* obj) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TListOfFunctions.html:14315,hash,hash,14315,root/html602/TListOfFunctions.html,https://root.cern,https://root.cern/root/html602/TListOfFunctions.html,2,['hash'],['hash']
Security,"RmMen k : kurtosis printed; K : kurtosis and kurtosis error printed; s : skewness printed; S : skewness and skewness error printed; i : integral of bins printed; o : number of overflows printed; u : number of underflows printed; r : rms printed; R : rms and rms error printed; m : mean value printed; M : mean value mean error values printed; e : number of entries printed; n : name of histogram is printed; R#define R(a, b, c, d, e, f, g, h, i)Definition RSha256.hxx:110; For example, to print only name of histogram and number of entries do: gStyle->SetOptStat(""ne"");; To print only the name of the histogram do: gStyle->SetOptStat(""n"");; The default value is: gStyle->SetOptStat(""nemr"");; When a histogram is painted, a TPaveStats object is created and added to the list of functions of the histogram. If a TPaveStats object already exists in the histogram list of functions, the existing object is just updated with the current histogram parameters.; Once a histogram is painted, the statistics box can be accessed using h->FindObject(""stats""). In the command line it is enough to do: Root > h->Draw(); Root > TPaveStats *st = (TPaveStats*)h->FindObject(""stats""); h#define h(i)Definition RSha256.hxx:106; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TPaveStatsThe histogram statistics painter class.Definition TPaveStats.h:18; because after h->Draw() the histogram is automatically painted. But in a script file the painting should be forced using gPad->Update() in order to make sure the statistics box is created: h->Draw();; gPad->Update();; TPaveStats *st = (TPaveStats*)h->FindObject(""stats"");; gPad#define gPadDefinition TVirtualPad.h:308; Without gPad->Update() the line h->FindObject(""stats"") returns a null pointer.; When a histogram is drawn with the option ""`SAME`"", the statistics box is not drawn. To force the statistics box drawing with the option ""`SAME`"", the option ""`SAMES`"" must be used",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaveStats.html:3904,access,accessed,3904,doc/master/classTPaveStats.html,https://root.cern,https://root.cern/doc/master/classTPaveStats.html,1,['access'],['accessed']
Security,"RnrCtx& rnrCtx); virtual voidRenderSelTransp(TGLRnrCtx& rnrCtx); virtual voidRenderTransp(TGLRnrCtx& rnrCtx); virtual Bool_tResolveSelectRecord(TGLSelectRecord& rec, Int_t curIdx); voidSetAutoDestruct(Bool_t a); voidSetClip(TGLClip* p); voidSetLOD(Short_t lod); virtual voidSetName(const char* name); virtual voidSetNameTitle(const char* name, const char* title); voidSetSelectable(Bool_t a); voidSetStyle(Short_t st); virtual voidSetTitle(const char* title); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); Short_tStyle() const; voidTagViewersChanged(); Bool_tTGLLockable::TakeLock(TGLLockable::ELock lock) const; virtual voidUpdateSceneInfo(TGLRnrCtx& ctx). private:. TGLSceneBase&operator=(const TGLSceneBase&). Data Members; public:. enum TGLLockable::ELock { kUnlocked; kDrawLock; kSelectLock; kModifyLock; };. protected:. Bool_tfAutoDestruct; TGLBoundingBoxfBoundingBoxbounding box for scene (axis aligned) - lazy update - use BoundingBox() to access; Bool_tfBoundingBoxValidbounding box valid?; TGLClip*fClipScene clipping-plane.; Bool_tfDoClipCheckPerform global clip-plane-check in UpdateSceneInfo(); Bool_tfDoFrustumCheckPerform global frustum-check in UpdateSceneInfo(); Short_tfLODScene-lod.; TGLLockable::ELockTGLLockable::fLockLock state.; UInt_tfMinorStampCounter increased on minimal update.; TStringfNameObject identifier.; Float_tfOLLineWScene outline line-width.; UInt_tfSceneIDUnique scene id.; Bool_tfSelectableObjects in the scene are selectable.; Short_tfStyleScene-style.; UInt_tfTimeStampCounter increased on every update.; TStringfTitleObject title.; list<TGLViewerBase*>fViewers; Float_tfWFLineWScene wire-frame line-width. private:. static UInt_tfgSceneIDSrc. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TGLSceneBase(); Destructor. void AddViewer(TGLViewerBase* viewer); Add viewer to the list. void RemoveViewer(TGLViewerBase* viewer); Remove viewer from ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLSceneBase.html:3478,access,access,3478,root/html528/TGLSceneBase.html,https://root.cern,https://root.cern/root/html528/TGLSceneBase.html,3,['access'],['access']
Security,"RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooRealProxy_ctheta; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; int_l1; int_l2; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; int_m1; int_m2; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooLegendre.html:33084,access,access,33084,root/html534/RooLegendre.html,https://root.cern,https://root.cern/root/html534/RooLegendre.html,1,['access'],['access']
Security,"RooAbsArg::findServer(const char* name) const; RooAbsArg*RooAbsArg::findServer(const RooAbsArg& arg) const; RooAbsArg*RooAbsArg::findServer(Int_t index) const; virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); voidfixShape(Bool_t fix); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); virtual Bool_tRooAbsReal::forceAnalyticalInt(const RooAbsArg&) const; virtual voidRooAbsReal::forceNumInt(Bool_t flag = kTRUE); RooFunctor*RooAbsReal::functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; RooDataSet*RooAbsPdf::generate(RooAbsPdf::GenSpec&) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, const RooDataSet& prototype, Int_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t randProtoOrder = kFALSE, Bool_t resampleProto = kFALSE) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, Int_t nEvents, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none()); RooDataSet*RooAbsPdf::generate(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNDKeysPdf.html:14100,hash,hash,14100,root/html534/RooNDKeysPdf.html,https://root.cern,https://root.cern/root/html534/RooNDKeysPdf.html,3,['hash'],['hash']
Security,RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooAICRegistry_codeReg! Registry of component analytical integration codes; Double_t*_coefCache! Transiet cache with transformed values of coefficients; Int_t_coefErrCount! Coefficient error counter; TIterator*_coefIter! Iterator over coefficient list; RooListProxy_coefListList of coefficients; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveLastCoefFlag indicating if last PDFs coefficient was supplied in the ctor; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAddPdf.html:43557,access,access,43557,root/html602/RooAddPdf.html,https://root.cern,https://root.cern/root/html602/RooAddPdf.html,2,['access'],['access']
Security,"RooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; vector<Int_t>_catRefReference valyes for categories; RooListProxy_catSetList of categories to check; TIterator*_catSetIter! do not persist; Bool_t_checkValCheck contents as well if true; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_t_init!; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooChangeTracker.html:33890,access,access,33890,root/html534/RooChangeTracker.html,https://root.cern,https://root.cern/root/html534/RooChangeTracker.html,1,['access'],['access']
Security,"RooBinSamplingPdf; Print a Warning message when the RooAddPdf is evaluated without passing a normalization set and the class has not a normalization set defined. Without a normalization set the RooAddPdf is not properly defined and its shape will be different depending on which normalization range is used. Massive speed up of RooFit’s BatchMode on CPUs with vector extensions; RooFit’s BatchMode has been around since ROOT 6.20, but to fully use vector extensions of modern CPUs, a manual compilation of ROOT was necessary, setting the required compiler flags.; Now, RooFit comes with dedicated computation libraries, each compiled for a specific CPU architecture. When RooFit is loaded for the first time, ROOT inspects the CPU capabilities, and loads the fastest supported version of this computation library. This means that RooFit can now use vector extensions such as AVX2 without being recompiled, which enables a speed up of up to 4x for certain computations. Combined with better data access patterns (~3x speed up, ROOT 6.20), computations with optimised PDFs speed up between 4x and 16x.; The fast BatchMode now also works in combination with multi processing (NumCPU) and with binned data (RooDataHist).; See Demo notebook in SWAN, EPJ Web Conf. 245 (2020) 06007, arxiv:2012.02746.; RooBatchCompute Library; The library that contains the optimised computation functions is called RooBatchCompute. The PDFs contained in this library are highly optimized, and there is currently work in progress for further optimization using CUDA and multi-threaded computations. If you use PDFs that are not part of the official RooFit, you are very well invited to add them to RooFit by submitting a ticket or a pull request.; Benefiting from batch computations by overriding evaluateSpan(); For PDFs that are not part of RooFit, it is possible to benefit from batch computations without vector extensions. To do so, consult the RooBatchCompute readme.; Migrating PDFs that override the deprecated evalu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:18149,access,access,18149,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['access'],['access']
Security,"RooLinkedList& cmdList); virtual RooFitResult*RooAbsPdf::fitTo(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual voidRooAbsReal::fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); virtual voidRooAbsReal::fixAddCoefRange(const char* rangeName = 0, Bool_t force = kTRUE); voidfixCoefNormalization(const RooArgSet& refCoefNorm); voidfixCoefRange(const char* rangeName); static UInt_tRooAbsArg::fnv1a32(const char* data); static UInt_tRooAbsArg::fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); static ULong64_tRooAbsArg::fnv1a64(const char* data); static ULong64_tRooAbsArg::fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); virtual Bool_tforceAnalyticalInt(const RooAbsArg&) const; virtual voidRooAbsReal::forceNumInt(Bool_t flag = kTRUE); RooFunctor*RooAbsReal::functor(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; RooDataSet*RooAbsPdf::generate(RooAbsPdf::GenSpec&) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, const RooDataSet& prototype, Int_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t randProtoOrder = kFALSE, Bool_t resampleProto = kFALSE) const; RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, Int_t nEvents, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none()); RooDataSet*RooAbsPdf::generate(const RooArgSet& whatVars, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddModel.html:14030,hash,hash,14030,root/html534/RooAddModel.html,https://root.cern,https://root.cern/root/html534/RooAddModel.html,6,['hash'],['hash']
Security,"RooLinkedList_altBinning!; RooLinTransBinning_binning; set<string>RooAbsArg::_boolAttribBoolean attributes; set<string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooLinearVar.html:39585,access,access,39585,root/html602/RooLinearVar.html,https://root.cern,https://root.cern/root/html602/RooLinearVar.html,2,['access'],['access']
Security,"Rule enum valueROOT::TSchemaRule; kReadRule enum valueROOT::TSchemaRule; kSingleKey enum valueTObject; kWriteDelete enum valueTObject; kZombie enum valueTObject; ls(Option_t *option="""") const overrideROOT::TSchemaRulevirtual; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TSchemaRule &rhs)ROOT::TSchemaRule; TObject::operator=(const TObject &rhs)TObjectinline; operator==(const TSchemaRule &rhs) constROOT::TSchemaRule; Paint(Option_t *option="""")TObjectvirtual; ParseChecksum(const char *checksum) constROOT::TSchemaRuleprivate; Pop()TObjectvirtual; Print(Option_t *option="""") constTObjectvirtual; ProcessChecksum(const TString &checksum) constROOT::TSchemaRuleprivate; ProcessDeclaration(TObjArray *array, const TString &list)ROOT::TSchemaRuleprivatestatic; ProcessList(TObjArray *array, const TString &list)ROOT::TSchemaRuleprivatestatic; ProcessVersion(const TString &version) constROOT::TSchemaRuleprivate; Read(const char *name)TObjectvirtual; ReadFuncPtr_t typedefROOT::TSchemaRule; ReadRawFuncPtr_t typedefROOT::TSchemaRule; RecursiveRemove(TObject *obj)TObjectvirtual; ResetBit(UInt_t f)TObjectinline; RuleType_t enum nameROOT::TSchemaRule; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; SetAttributes(const TString &attributes)ROOT::TSchemaRule; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetChecksum(const TString &checksum)ROOT::TSchemaRule; SetCode(const TStri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TSchemaRule-members.html:5820,checksum,checksum,5820,doc/master/classROOT_1_1TSchemaRule-members.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TSchemaRule-members.html,1,['checksum'],['checksum']
Security,"Rule::Clearvoid Clear(Option_t *="""") overrideZero out this rule object.Definition TSchemaRule.cxx:297; ROOT::TSchemaRule::TestVersionBool_t TestVersion(Int_t version) constCheck if given version number is defined in this rule.Definition TSchemaRule.cxx:402; ROOT::TSchemaRule::fSourceTString fSourceTarget data member vector (for searching purposes)Definition TSchemaRule.h:109; ROOT::TSchemaRule::HasSourceBool_t HasSource(const TString &source) constReturn true if one of the rule's data member source is 'source'.Definition TSchemaRule.cxx:690; ROOT::TSchemaRule::GetReadRawFunctionPointerReadRawFuncPtr_t GetReadRawFunctionPointer() constGet the pointer to the function to be run for the rule (if it is a raw read rule).Definition TSchemaRule.cxx:732; ROOT::TSchemaRule::GetTargetconst TObjArray * GetTarget() constGet the target data members of this rule (i.e. the in memory data member).Definition TSchemaRule.cxx:520; ROOT::TSchemaRule::ProcessChecksumBool_t ProcessChecksum(const TString &checksum) constCheck if specified checksum string is correct and build checksum vector.Definition TSchemaRule.cxx:887; ROOT::TSchemaRule::ReadFuncPtr_tvoid(* ReadFuncPtr_t)(char *, TVirtualObject *)Definition TSchemaRule.h:40; ROOT::TSchemaRule::SetEmbedvoid SetEmbed(Bool_t embed)Set whether this rule should be save in the ROOT file (if true)Definition TSchemaRule.cxx:616; ROOT::TSchemaRule::GetRuleTypeRuleType_t GetRuleType() constReturn the type of the rule.Definition TSchemaRule.cxx:764; ROOT::TSchemaRule::ConflictsBool_t Conflicts(const TSchemaRule *rule) constCheck if this rule conflicts with the given one.Definition TSchemaRule.cxx:772; ROOT::TSchemaRule::operator=TSchemaRule & operator=(const TSchemaRule &rhs)Copy operator.Definition TSchemaRule.cxx:125; ROOT::TSchemaRule::SetTargetClassvoid SetTargetClass(const TString &classname)Set the target class of this rule (i.e. the in memory class).Definition TSchemaRule.cxx:474; ROOT::TSchemaRule::ReadRawFuncPtr_tvoid(* ReadRawFuncPtr_t)(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRule_8cxx_source.html:40823,checksum,checksum,40823,doc/master/TSchemaRule_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRule_8cxx_source.html,6,['checksum'],['checksum']
Security,"S . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation » Courses » Introductory Tutorials Fit Panel. As you can see, the fit (solid line) doesn't really describe the data: a polynomial is nowhere close to most data points. So from the Canvas, start the fit panel and use a gaussian (""gaus"") instead of a ""pol2"" to perform the fit. (You don't know what a Gaussian is? see http://en.wikipedia.org/wiki/Gaussian_function). Figure 7: How to open the fit panel from the Canvas ""Tools"" menu; Here is what the fit panel looks like:. Figure 8: Fit Panel. Using this fit panel allows you to change the fit function and see the result after pressing ""Fit"". Now you should see the difference:. Figure 9: Distribution of ""fPosX"" leaf values, fitted with a Gaussian; The solid line is now passing through every data point. It fits (almost) perfectly the data!; . ‹ Histogramming; up; Compiling Your Code (also known as ACLiC) ›. Navigate through this book; Meet a TTree; Accessing a TTree With a TBrowser; Using TTree::Draw() to access a TTree; TTree and Its Data; Using a Macro to Read a TTree; Histogramming; Fit Panel; Compiling Your Code (also known as ACLiC); Accessing a TTree With a TSelector; Histogramming in a Selector; Using a TSelector with PROOF; The End. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/fit-panel.html:2821,access,access,2821,d/fit-panel.html,https://root.cern,https://root.cern/d/fit-panel.html,1,['access'],['access']
Security,"S to the local node coordinates. This can be done by using the global transformation or directly the TGeoManager corresponding interfaces:. Double_t *glob_pt = gGeoManager->GetCurrentPoint();; Double_t *glob_dir = gGeoManager->GetCurrentDirection();; Double_t loc_pt[3], loc_dir[3];; // Go from MARS to local coordinates:; gGeoManager->MasterToLocal(glob_pt,loc_pt); // or:; global->MasterToLocal(glob_pt,loc_pt); // will be omitted from now; 18.5.6 Saving and Restoring the Current State; As we already described, saving and restoring modeller states can be quite useful during tracking and is a feature extensively used by external tracking engines. We will call this navigation history management, which in most of the cases can be performed by handling the state identifiers. For quite big geometries, state indexing is not possible anymore and will be automatically disabled by the modeller. Fortunately there is a backup solution working in any condition: the modeller maintains a stack of states that is internally used by its own navigation algorithms, but user code is also allowed to access it. This works on any stack principle by using PUSH and POP calls and user code is responsible for popping the pushed states in order to keep the stack clean.; // push the current state in the stack; Int_t index = gGeoManager->PushPath();; // push state and current point; Int_t index = gGeoManager->PushPoint();; // retrieves the last pushed state (decrements stack index); gGeoManager->PopPath();; // the same but retrieves also the point location; gGeoManager->PopPoint();; // just decrement stack index without changing state; gGeoManager->PopDummy();; // retrieves a state at given index without changing stack index; gGeoManager->PopPath(Int_t index);; 18.5.7 Navigation Queries; After initializing the current state related to a given point and direction defined in MARS (‘Where am I?'), one can query for several geometrical quantities. All the related algorithms work in the assumption that",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:981917,access,access,981917,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['access'],['access']
Security,"S.; Definition at line 36 of file TASImagePlugin.h. ◆ Hash(). ULong_t TASImagePlugin::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TASImagePlugin::HashULong_t Hash() const overrideReturn hash value for this object.Definition TASImagePlugin.h:32; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Reimplemented in TASPluginGS.; Definition at line 32 of file TASImagePlugin.h. ◆ IsA(). TClass * TASImagePlugin::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TASPluginGS.; Definition at line 39 of file TASImagePlugin.h. ◆ ReadFile(). unsigned char * TASImagePlugin::ReadFile ; (; const char * ; , . UInt_t & ; , . UInt_t & ;  . ). inlineoverridevirtual . Implements TImagePlugin.; Definition at line 34 of file TASImagePlugin.h. ◆ Streamer(). void TASImagePlugin::Streamer ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASImagePlugin.html:13117,hash,hash,13117,doc/master/classTASImagePlugin.html,https://root.cern,https://root.cern/doc/master/classTASImagePlugin.html,1,['hash'],['hash']
Security,"S3 server this file is hosted on and to determine if it is known to support multi-range HTTP GET requests. Some S3 servers (for instance Amazon's) do not support that feature and when they receive a multi-range request they sent back the whole file contents. For this class, if the server do not support multirange requests we issue multiple single-range requests instead. ; Reimplemented from TWebFile.; Definition at line 346 of file TS3WebFile.cxx. ◆ ReadBuffers(). Bool_t TS3WebFile::ReadBuffers ; (; char * ; buf, . Long64_t * ; pos, . Int_t * ; len, . Int_t ; nbuf . ). overridevirtual . Read the nbuf blocks described in arrays pos and len. ; The value pos[i] is the seek position of block i of length len[i]. Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer. This function is overloaded by TNetFile, TWebFile, etc. Returns kTRUE in case of failure. ; Reimplemented from TFile.; Definition at line 311 of file TS3WebFile.cxx. ◆ SetAccessKey(). void TS3WebFile::SetAccessKey ; (; const TString & ; accessKey). inlineprotected . Definition at line 83 of file TS3WebFile.h. ◆ SetMsgReadBuffer10(). void TS3WebFile::SetMsgReadBuffer10 ; (; const char * ; redirectLocation = nullptr, . Bool_t ; tempRedirect = kFALSE . ). overrideprotectedvirtual . Overwrites TWebFile::SetMsgReadBuffer10() for setting the HTTP GET request compliant to the authentication mechanism used by the S3 protocol. ; The GET request must contain an ""Authorization"" header with the signature of the request, generated using the user's secret access key. ; Reimplemented from TWebFile.; Definition at line 301 of file TS3WebFile.cxx. ◆ SetSecretKey(). void TS3WebFile::SetSecretKey ; (; const TString & ; secretKey). inlineprotected . Definition at line 84 of file TS3WebFile.h. ◆ Streamer(). void TS3WebFile::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a TFile object. ; Reimplemented from TFile. ◆ StreamerNVirtual(). void TS3WebFile::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTS3WebFile.html:55823,access,accessKey,55823,doc/master/classTS3WebFile.html,https://root.cern,https://root.cern/doc/master/classTS3WebFile.html,1,['access'],['accessKey']
Security,"S3WebFile;  A TS3WebFile is a TWebFile which retrieves the file contents from a web server implementing the REST API of the Amazon S3 protocol. More...;  ; class  TSAXParser;  TSAXParser is a subclass of TXMLParser, it is a wraper class to libxml library. More...;  ; class  TSQLClassInfo;  Contains information about tables specific to one class and version. More...;  ; class  TSQLColumnData;  ; class  TSQLFile;  Access an SQL db via the TFile interface. More...;  ; class  TSQLObjectData;  TSQLObjectData is used in TBufferSQL2 class in reading procedure. More...;  ; class  TSQLObjectDataPool;  XML object keeper class. More...;  ; class  TSQLObjectInfo;  Info (classname, version) about object in database. More...;  ; class  TSQLStructure;  This is hierarchical structure, which is created when data is written by TBufferSQL2. More...;  ; class  TStreamerInfo;  Describes a persistent version of a class. More...;  ; class  TVirtualArray;  Wrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary. More...;  ; class  TVirtualCollectionIterators;  Small helper class to generically acquire and release iterators. More...;  ; class  TVirtualCollectionPtrIterators;  ; class  TVirtualObject;  Wrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary. More...;  ; class  TXMLAttr;  TXMLAttribute is the attribute of an Element. More...;  ; class  TXMLDocument;  TXMLDocument contains a pointer to an xmlDoc structure, after the parser returns a tree built during the document analysis. More...;  ; class  TXMLNode;  TXMLNode contains a pointer to xmlNode, which is a node under the DOM tree. More...;  ; class  TXMLParser;  TXMLParser is an abstract class which interfaces with Libxml2. More...;  ; class  TZIPFile;  Describes a ZIP archive file containing multiple sub-files. More...;  ; class  TZIPMember;  A ZIP archive consists of files co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__IO.html:6525,access,access,6525,doc/master/group__IO.html,https://root.cern,https://root.cern/doc/master/group__IO.html,1,['access'],['access']
Security,"SI_EXTENSIONS], path); 11933 > 0) {; 11934 send_ssi_file(conn, path, &file, include_level + 1);; 11935 } else {; 11936 send_file_data(conn, &file, 0, INT64_MAX);; 11937 }; 11938 (void)mg_fclose(&file.access); /* Ignore errors for readonly files */; 11939 }; 11940}; 11941 ; 11942 ; 11943#if !defined(NO_POPEN); 11944static void; 11945do_ssi_exec(struct mg_connection *conn, char *tag); 11946{; 11947 char cmd[1024] = """";; 11948 struct mg_file file = STRUCT_FILE_INITIALIZER;; 11949 ; 11950 if (sscanf(tag, "" \""%1023[^\""]\"""", cmd) != 1) {; 11951 mg_cry_internal(conn, ""Bad SSI #exec: [%s]"", tag);; 11952 } else {; 11953 cmd[1023] = 0;; 11954 if ((file.access.fp = popen(cmd, ""r"")) == NULL) {; 11955 mg_cry_internal(conn,; 11956 ""Cannot SSI #exec: [%s]: %s"",; 11957 cmd,; 11958 strerror(ERRNO));; 11959 } else {; 11960 send_file_data(conn, &file, 0, INT64_MAX);; 11961 pclose(file.access.fp);; 11962 }; 11963 }; 11964}; 11965#endif /* !NO_POPEN */; 11966 ; 11967 ; 11968static int; 11969mg_fgetc(struct mg_file *filep); 11970{; 11971 if (filep == NULL) {; 11972 return EOF;; 11973 }; 11974 ; 11975 if (filep->access.fp != NULL) {; 11976 return fgetc(filep->access.fp);; 11977 } else {; 11978 return EOF;; 11979 }; 11980}; 11981 ; 11982 ; 11983static void; 11984send_ssi_file(struct mg_connection *conn,; 11985 const char *path,; 11986 struct mg_file *filep,; 11987 int include_level); 11988{; 11989 char buf[MG_BUF_LEN];; 11990 int ch, len, in_tag, in_ssi_tag;; 11991 ; 11992 if (include_level > 10) {; 11993 mg_cry_internal(conn, ""SSI #include level is too deep (%s)"", path);; 11994 return;; 11995 }; 11996 ; 11997 in_tag = in_ssi_tag = len = 0;; 11998 ; 11999 /* Read file, byte by byte, and look for SSI include tags */; 12000 while ((ch = mg_fgetc(filep)) != EOF) {; 12001 ; 12002 if (in_tag) {; 12003 /* We are in a tag, either SSI tag or html tag */; 12004 ; 12005 if (ch == '>') {; 12006 /* Tag is closing */; 12007 buf[len++] = '>';; 12008 ; 12009 if (in_ssi_tag) {; 12010 /* Handle SSI tag */;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:346709,access,access,346709,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['access'],['access']
Security,"SI_EXTENSIONS], path); 11934 > 0) {; 11935 send_ssi_file(conn, path, &file, include_level + 1);; 11936 } else {; 11937 send_file_data(conn, &file, 0, INT64_MAX);; 11938 }; 11939 (void)mg_fclose(&file.access); /* Ignore errors for readonly files */; 11940 }; 11941}; 11942 ; 11943 ; 11944#if !defined(NO_POPEN); 11945static void; 11946do_ssi_exec(struct mg_connection *conn, char *tag); 11947{; 11948 char cmd[1024] = """";; 11949 struct mg_file file = STRUCT_FILE_INITIALIZER;; 11950 ; 11951 if (sscanf(tag, "" \""%1023[^\""]\"""", cmd) != 1) {; 11952 mg_cry_internal(conn, ""Bad SSI #exec: [%s]"", tag);; 11953 } else {; 11954 cmd[1023] = 0;; 11955 if ((file.access.fp = popen(cmd, ""r"")) == NULL) {; 11956 mg_cry_internal(conn,; 11957 ""Cannot SSI #exec: [%s]: %s"",; 11958 cmd,; 11959 strerror(ERRNO));; 11960 } else {; 11961 send_file_data(conn, &file, 0, INT64_MAX);; 11962 pclose(file.access.fp);; 11963 }; 11964 }; 11965}; 11966#endif /* !NO_POPEN */; 11967 ; 11968 ; 11969static int; 11970mg_fgetc(struct mg_file *filep); 11971{; 11972 if (filep == NULL) {; 11973 return EOF;; 11974 }; 11975 ; 11976 if (filep->access.fp != NULL) {; 11977 return fgetc(filep->access.fp);; 11978 } else {; 11979 return EOF;; 11980 }; 11981}; 11982 ; 11983 ; 11984static void; 11985send_ssi_file(struct mg_connection *conn,; 11986 const char *path,; 11987 struct mg_file *filep,; 11988 int include_level); 11989{; 11990 char buf[MG_BUF_LEN];; 11991 int ch, len, in_tag, in_ssi_tag;; 11992 ; 11993 if (include_level > 10) {; 11994 mg_cry_internal(conn, ""SSI #include level is too deep (%s)"", path);; 11995 return;; 11996 }; 11997 ; 11998 in_tag = in_ssi_tag = len = 0;; 11999 ; 12000 /* Read file, byte by byte, and look for SSI include tags */; 12001 while ((ch = mg_fgetc(filep)) != EOF) {; 12002 ; 12003 if (in_tag) {; 12004 /* We are in a tag, either SSI tag or html tag */; 12005 ; 12006 if (ch == '>') {; 12007 /* Tag is closing */; 12008 buf[len++] = '>';; 12009 ; 12010 if (in_ssi_tag) {; 12011 /* Handle SSI tag */;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:346742,access,access,346742,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['access'],['access']
Security,"SMatrix.icc:258; ROOT::Math::SMatrix::operator<bool operator<(const T &rhs) constelement wise comparisonDefinition SMatrix.icc:379; ROOT::Math::SMatrix::beginiterator begin()STL iterator interface.Definition SMatrix.icc:670; ROOT::Math::SMatrix::SetElementsvoid SetElements(InputIterator begin, InputIterator end, bool triang=false, bool lower=true)Set matrix elements with STL iterator interface.Definition SMatrix.icc:692; ROOT::Math::SMatrix::fRepR fRepMatrix Storage Object containing matrix data.Definition SMatrix.h:683; ROOT::Math::SMatrix::SMatrixSMatrix(SMatrixNoInit)construct from without initializationDefinition SMatrix.h:129; ROOT::Math::SMatrix::InverseFastSMatrix< T, D1, D2, R > InverseFast(int &ifail) constInvert a square Matrix and returns a new matrix.Definition SMatrix.icc:436; ROOT::Math::SMatrix::operator==bool operator==(const T &rhs) constelement wise comparisonDefinition SMatrix.icc:299; ROOT::Math::SMatrix::operator[]SMatrixRow_const operator[](unsigned int i) constread only access to matrix element, with indices starting from 0 : m[i][j]Definition SMatrix.h:398; ROOT::Math::SMatrix::Place_in_rowSMatrix< T, D1, D2, R > & Place_in_row(const SVector< T, D > &rhs, unsigned int row, unsigned int col)place a vector in a Matrix rowDefinition SMatrix.icc:484; ROOT::Math::SMatrix::DiagonalSVector< T, D1 > Diagonal() constreturn diagonal elements of a matrix as a Vector.Definition SMatrix.icc:755; ROOT::Math::SMatrix::InverseCholSMatrix< T, D1, D2, R > InverseChol(int &ifail) constInvert of a symmetric positive defined Matrix using Choleski decomposition.Definition SMatrix.icc:452; ROOT::Math::SMatrix::SetDiagonalvoid SetDiagonal(const Vector &v)Set the diagonal elements from a Vector Require that vector implements SVector::kSize since a check (...Definition SMatrix.icc:770; ROOT::Math::SMatrix::operator!=bool operator!=(const T &rhs) constelement wise comparisonDefinition SMatrix.icc:327; ROOT::Math::SMatrix::iteratorT * iteratorSTL iterator interface.Defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SMatrix_8h_source.html:29289,access,access,29289,doc/master/SMatrix_8h_source.html,https://root.cern,https://root.cern/doc/master/SMatrix_8h_source.html,1,['access'],['access']
Security,"SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >(const float& rhs); ROOT::Math::SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >SMatrix<float,2,2,ROOT::Math::MatRepStd<float,2,2> >(const ROOT::Math::SVector<float,2*(2+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,2*(2+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<float,2,2>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html:5245,access,access,5245,root/html528/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__SMatrix_float_2_2_-p1MatRepStd_float_2_2___.html,8,['access'],"['access', 'accessing']"
Security,"SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >(const float& rhs); ROOT::Math::SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >SMatrix<float,3,3,ROOT::Math::MatRepStd<float,3,3> >(const ROOT::Math::SVector<float,3*(3+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,3*(3+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<float,3,3>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html:5245,access,access,5245,root/html528/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__SMatrix_float_3_3_-p1MatRepStd_float_3_3___.html,8,['access'],"['access', 'accessing']"
Security,"SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >(const float& rhs); ROOT::Math::SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >SMatrix<float,3,4,ROOT::Math::MatRepStd<float,3,4> >(const ROOT::Math::SVector<float,3*(4+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,3*(4+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<float,3,4>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html:5138,access,access,5138,root/html528/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__SMatrix_float_3_4_-p1MatRepStd_float_3_4___.html,8,['access'],"['access', 'accessing']"
Security,"SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >(const float& rhs); ROOT::Math::SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >SMatrix<float,4,3,ROOT::Math::MatRepStd<float,4,3> >(const ROOT::Math::SVector<float,4*(3+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,4*(3+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<float,4,3>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html:5138,access,access,5138,root/html528/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__SMatrix_float_4_3_-p1MatRepStd_float_4_3___.html,8,['access'],"['access', 'accessing']"
Security,"SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >(const float& rhs); ROOT::Math::SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >SMatrix<float,4,4,ROOT::Math::MatRepStd<float,4,4> >(const ROOT::Math::SVector<float,4*(4+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,4*(4+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<float,4,4>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html:5245,access,access,5245,root/html528/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__SMatrix_float_4_4_-p1MatRepStd_float_4_4___.html,8,['access'],"['access', 'accessing']"
Security,"SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >(const float& rhs); ROOT::Math::SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >SMatrix<float,5,5,ROOT::Math::MatRepStd<float,5,5> >(const ROOT::Math::SVector<float,5*(5+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,5*(5+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<float,5,5>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html:5245,access,access,5245,root/html528/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__SMatrix_float_5_5_-p1MatRepStd_float_5_5___.html,8,['access'],"['access', 'accessing']"
Security,"SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >(const float& rhs); ROOT::Math::SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >SMatrix<float,6,6,ROOT::Math::MatRepStd<float,6,6> >(const ROOT::Math::SVector<float,6*(6+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,6*(6+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<float,6,6>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html:5245,access,access,5245,root/html528/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__SMatrix_float_6_6_-p1MatRepStd_float_6_6___.html,8,['access'],"['access', 'accessing']"
Security,"SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >(const float& rhs); ROOT::Math::SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >SMatrix<float,7,7,ROOT::Math::MatRepStd<float,7,7> >(const ROOT::Math::SVector<float,7*(7+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,7*(7+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<float,7,7>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html:5245,access,access,5245,root/html528/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__SMatrix_float_7_7_-p1MatRepStd_float_7_7___.html,8,['access'],"['access', 'accessing']"
Security,"SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >(const float& rhs); ROOT::Math::SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >SMatrix<float,9,7,ROOT::Math::MatRepStd<float,9,7> >(const ROOT::Math::SVector<float,9*(7+1)/2>& v, bool lower = true); floatTrace() const; ROOT::Math::SVector<float,9*(7+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepStd<float,9,7>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const float& rhs) const; @name --- Operators --- ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html:5168,access,access,5168,root/html528/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__SMatrix_float_9_7_-p1MatRepStd_float_9_7___.html,8,['access'],"['access', 'accessing']"
Security,"STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators --- ; element wise comparison. bool operator!=(const T& rhs); element wise comparison. bool operator!=(const SMatrix<T,D1,D2,R>& rhs); element wise comparison. bool operator>(const double& rhs) const; element wise comparison. bool operator<(const double& rhs) const; element wise comparison. const T& operator()(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0. T& operator()(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0. const T& At(unsigned int i, unsigned int j) const. read only access to matrix element, with indices starting from 0.; Function will check index values and it will assert if they are wrong. T& At(unsigned int i, unsigned int j). read/write access to matrix element with indices starting from 0.; Function will check index values and it will assert if they are wrong. T & operator[](unsigned int i); { return (*fMat)(fRow,j); }. const T & operator[](unsigned int i) const; { return (*fMat)(fRow, j); }. SMatrix<T,D1,D2,R>& operator+=(const double& rhs). addition with a scalar. SMatrix<T,D1,D2,R>& operator-=(const double& rhs). subtraction with a scalar. SMatrix<T,D1,D2,R>& operator*=(const double& rhs). multiplication with a scalar. SMatrix<T,D1,D2,R>& operator/=(const double& rhs). division with a scalar. bool Invert(); @name --- Linear Algebra Functions --- . Invert a square Matrix ( this method changes the current matrix).; Return true if inversion is successfull.; The method used for general square matrices is the LU factorization taken from Dinv routine; from the CERNLIB (written in C++ from CLHEP authors); In case of symmetric matrices Bunch-Kaufman diagonal pivoting method is used; (The implementation is the one written by the CLHEP authors)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:7145,access,access,7145,root/html528/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,106,['access'],['access']
Security,"SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EOnErrorAction. enum TDCacheFile::EOnErrorAction. Note: This must be kept in sync with values #defined in dcap.h. . EnumeratorkOnErrorRetry ; kOnErrorFail ; kOnErrorDefault . Definition at line 61 of file TDCacheFile.h. Constructor & Destructor Documentation. ◆ TDCacheFile() [1/2]. TDCacheFile::TDCacheFile ; (; ). inlineprivate . Definition at line 31 of file TDCacheFile.h. ◆ TDCacheFile() [2/2]. TDCacheFile::TDCacheFile ; (; const char * ; path, . Option_t * ; option = """", . const char * ; ftitle = """", . Int_t ; compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault . ). Create a dCache file object. ; A dCache file is the same as a TFile except that it is being accessed via a dCache server. The url argument must be of the form: dcache:/pnfs/<path>/<file>.root or dcap://<nodename.org>/<path>/<file>.root. If the file specified in the URL does not exist, is not accessable or can not be created the kZombie bit will be set in the TDCacheFile object. Use IsZombie() to see if the file is accessable. For a description of the option and other arguments see the TFile ctor. The preferred interface to this constructor is via TFile::Open(). ; Definition at line 71 of file TDCacheFile.cxx. ◆ ~TDCacheFile(). TDCacheFile::~TDCacheFile ; (; ). override . Close and cleanup dCache file. ; Definition at line 202 of file TDCacheFile.cxx. Member Function Documentation. ◆ CheckFile(). Bool_t TDCacheFile::CheckFile ; (; const char * ; path, . const char * ; location = 0 . ). static . CheckFile() returns kTRUE on success and kFALSE on failure. ; In case the file exists but is not cached, CheckFile() returns kFALSE and errno is set to EAGAIN. ; Definition at line 361 of file TDCacheFile.cxx. ◆ Class(). static TClass * TDCacheFile::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TDCacheFile::Class_Name ; (; ). static . ReturnsName o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDCacheFile.html:43437,access,accessable,43437,doc/master/classTDCacheFile.html,https://root.cern,https://root.cern/doc/master/classTDCacheFile.html,1,['access'],['accessable']
Security,"Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar* dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html:15744,access,access,15744,root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,8,['access'],"['access', 'accessors']"
Security,"Scalar& c, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar& d) const. get internal data into 4 Scalar numbers. { fCoordinates.GetCoordinates(a, b, c, d); }. void GetCoordinates(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar* dest) const. get internal data into an array of 4 Scalar numbers. { fCoordinates.GetCoordinates(dest); }. fCoordinates. SetPxPyPzE(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar xx, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar yy, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar zz, ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar ee). bool operator==(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >& rhs) const; ------------------- Equality -----------------. Exact equality. bool operator!=(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >& rhs) const. Scalar Px() const; ------ Individual element access, in various coordinate systems ------; individual coordinate accessors in various coordinate systems. spatial X component. { return fCoordinates.Px(); }. Scalar X() const. spatial Y component. { return fCoordinates.Px(); }. Scalar Py() const; { return fCoordinates.Py(); }. Scalar Y() const. spatial Z component. { return fCoordinates.Py(); }. Scalar Pz() const; { return fCoordinates.Pz(); }. Scalar Z() const. return 4-th component (time, or energy for a 4-momentum vector). { return fCoordinates.Pz(); }. Scalar E() const; { return fCoordinates.E(); }. Scalar T() const. return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2; (we use -,-,-,+ metric). { return fCoordinates.E(); }. Scalar M2() const. return magnitude (mass) using the (-,-,-,+) metric.; If M2 is negative (space-like vector) a GenVector_exception; is suggested and if continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html:14138,access,access,14138,root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,8,['access'],"['access', 'accessors']"
Security,"SearchTree::Insert ; (; const Event * ; event). insert a new ""event"" in the binary tree ; Definition at line 114 of file BinarySearchTree.cxx. ◆ Insert() [2/2]. void TMVA::BinarySearchTree::Insert ; (; const Event * ; event, . Node * ; node . ). private . private internal function to insert a event (node) at the proper position ; Definition at line 147 of file BinarySearchTree.cxx. ◆ InVolume(). Bool_t TMVA::BinarySearchTree::InVolume ; (; const std::vector< Float_t > & ; event, . Volume * ; volume . ); const. private . test if the data points are in the given volume ; Definition at line 415 of file BinarySearchTree.cxx. ◆ IsA(). virtual TClass * TMVA::BinarySearchTree::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::BinaryTree.; Definition at line 173 of file BinarySearchTree.h. ◆ Max(). Float_t TMVA::BinarySearchTree::Max ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to Maximum for signal and background for each variable ; Definition at line 128 of file BinarySearchTree.h. ◆ Mean(). Float_t TMVA::BinarySearchTree::Mean ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to mean for signal and background for each variable ; Definition at line 119 of file BinarySearchTree.h. ◆ Min(). Float_t TMVA::BinarySearchTree::Min ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to Minimum for signal and background for each variable ; Definition at line 125 of file BinarySearchTree.h. ◆ NormalizeTree() [1/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; ). Normalisation of tree. ; Definition at line 343 of file BinarySearchTree.cxx. ◆ NormalizeTree() [2/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; leftBound, . std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; rightBound, . UInt_t ; actDim . ). private . normalises the binary-search tree to reduce the branch length and hence speed up the se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:12408,access,access,12408,doc/master/classTMVA_1_1BinarySearchTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html,1,['access'],['access']
Security,"Sequential)binned likelihood fitDefinition Fitter.cxx:360; ROOT::Fit::Fitter::fFitTypeint fFitTypetype of fit (0 undefined, 1 least square, 2 likelihood, 3 binned likelihood)Definition Fitter.h:558; ROOT::Fit::Fitter::GetFCNROOT::Math::IMultiGenFunction * GetFCN() constreturn pointer to last used objective function (is NULL in case fit is not yet done) This pointer wil...Definition Fitter.h:455; ROOT::Fit::Fitter::IGradModel1DFunctionROOT::Math::IParamGradFunction IGradModel1DFunctionDefinition Fitter.h:93; ROOT::Fit::Fitter::fDatastd::shared_ptr< ROOT::Fit::FitData > fData! pointer to the fit data (binned or unbinned data)Definition Fitter.h:572; ROOT::Fit::Fitter::GetMinimizerROOT::Math::Minimizer * GetMinimizer() constreturn pointer to last used minimizer (is NULL in case fit is not yet done) This pointer is guarantee...Definition Fitter.h:444; ROOT::Fit::Fitter::BaseFuncROOT::Math::IMultiGenFunction BaseFuncDefinition Fitter.h:95; ROOT::Fit::Fitter::ConfigFitConfig & Config()access to the configuration (non const method)Definition Fitter.h:427; ROOT::Fit::Fitter::fUseGradientbool fUseGradientflag to indicate if using gradient or notDefinition Fitter.h:552; ROOT::Fit::Fitter::SetNumberOfFitPointsvoid SetNumberOfFitPoints(unsigned int npoints)Set number of fit points when using an external FCN function This function can be called after Fit to...Definition Fitter.h:472; ROOT::Fit::Fitter::fBinFitbool fBinFitflag to indicate if fit is binned in case of false the fit is unbinned or undefined) flag it is used ...Definition Fitter.h:554; ROOT::Fit::Fitter::MinuitFCN_tvoid(* MinuitFCN_t)(int &npar, double *gin, double &f, double *u, int flag)fit using user provided FCN with Minuit-like interface If npar = 0 it is assumed that the parameters ...Definition Fitter.h:339; ROOT::Fit::Fitter::IsBinFitbool IsBinFit() constquery if fit is binned.Definition Fitter.h:433; ROOT::Fit::Fitter::LinearFitbool LinearFit(const std::shared_ptr< BinData > &data)Do a linear fit using a shar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8h_source.html:33592,access,access,33592,doc/master/Fitter_8h_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8h_source.html,1,['access'],['access']
Security,Set global AuthReUse flag. ; Definition at line 1377 of file TAuthenticate.cxx. ◆ SetDefaultRSAKeyType(). void TAuthenticate::SetDefaultRSAKeyType ; (; Int_t ; key). static . Static method setting the default type of RSA key. ; Definition at line 1219 of file TAuthenticate.cxx. ◆ SetDefaultUser(). void TAuthenticate::SetDefaultUser ; (; const char * ; defaultuser). static . Set default user name. ; Definition at line 1357 of file TAuthenticate.cxx. ◆ SetEnvironment(). void TAuthenticate::SetEnvironment ; (; ). private . Set default authentication environment. ; The values are inferred from fSecurity and fDetails. ; Definition at line 681 of file TAuthenticate.cxx. ◆ SetGlobalExpDate(). void TAuthenticate::SetGlobalExpDate ; (; TDatime ; expdate). static . Set default expiring date for new validity contexts. ; Definition at line 1349 of file TAuthenticate.cxx. ◆ SetGlobalPasswd(). void TAuthenticate::SetGlobalPasswd ; (; const char * ; passwd). static . Set global passwd to be used for authentication to rootd or proofd. ; Definition at line 1309 of file TAuthenticate.cxx. ◆ SetGlobalPwHash(). void TAuthenticate::SetGlobalPwHash ; (; Bool_t ; pwhash). static . Set global passwd hash flag to be used for authentication to rootd or proofd. ; Definition at line 1323 of file TAuthenticate.cxx. ◆ SetGlobalSRPPwd(). void TAuthenticate::SetGlobalSRPPwd ; (; Bool_t ; srppwd). static . Set global SRP passwd flag to be used for authentication to rootd or proofd. ; Definition at line 1331 of file TAuthenticate.cxx. ◆ SetGlobalUser(). void TAuthenticate::SetGlobalUser ; (; const char * ; user). static . Set global user name to be used for authentication to rootd or proofd. ; Definition at line 1295 of file TAuthenticate.cxx. ◆ SetGlobusAuthHook(). void TAuthenticate::SetGlobusAuthHook ; (; GlobusAuth_t ; func). static . Set Globus authorization function. ; Automatically called when libGlobusAuth is loaded. ; Definition at line 1411 of file TAuthenticate.cxx. ◆ SetKrb5AuthHook(). v,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAuthenticate.html:38443,authenticat,authentication,38443,doc/master/classTAuthenticate.html,https://root.cern,https://root.cern/doc/master/classTAuthenticate.html,1,['authenticat'],['authentication']
Security,"Set the version string - returns kFALSE if the format is incorrect.Definition TSchemaRule.cxx:381; ROOT::TSchemaRule::fIncludeTString fIncludeSource data member vector (for searching purposes)Definition TSchemaRule.h:111; ROOT::TSchemaRule::fTargetVectTObjArray * fTargetVectDefinition TSchemaRule.h:108; ROOT::TSchemaRule::fChecksumTString fChecksumSource version vector (for searching purposes)Definition TSchemaRule.h:103; ROOT::TSchemaRule::fTargetClassTString fTargetClassDefinition TSchemaRule.h:106; ROOT::TSchemaRule::SetSourcevoid SetSource(const TString &source)Set the list of source members.Definition TSchemaRule.cxx:538; ROOT::TSchemaRule::IsRenameRuleBool_t IsRenameRule() constReturn kTRUE if the rule is a strict renaming of the class to a new name.Definition TSchemaRule.cxx:756; ROOT::TSchemaRule::SetAttributesvoid SetAttributes(const TString &attributes)Set the attributes code of this rule.Definition TSchemaRule.cxx:656; ROOT::TSchemaRule::fSourceClassTString fSourceClassSource checksum vector (for searching purposes)Definition TSchemaRule.h:105; ROOT::TSchemaRule::HasTargetBool_t HasTarget(const TString &target) constReturn true if one of the rule's data member target is 'target'.Definition TSchemaRule.cxx:672; ROOT::TSchemaRule::GetTargetStringconst char * GetTargetString() constGet the target data members of this rule as a simple string (i.e. the in memory data member).Definition TSchemaRule.cxx:512; ROOT::TSchemaRule::fVersionVectstd::vector< std::pair< Int_t, Int_t > > * fVersionVectDefinition TSchemaRule.h:102; ROOT::TSchemaRule::fReadRawFuncPtrReadRawFuncPtr_t fReadRawFuncPtrConversion function pointer for read rule.Definition TSchemaRule.h:116; ROOT::TSchemaRule::fRuleTypeRuleType_t fRuleTypeConversion function pointer for readraw rule.Definition TSchemaRule.h:117; ROOT::TSchemaRule::IsValidBool_t IsValid() constReturn kTRUE if this rule is valid.Definition TSchemaRule.cxx:632; ROOT::TSchemaRule::GetReadFunctionPointerReadFuncPtr_t GetReadFunctionPo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRule_8cxx_source.html:43423,checksum,checksum,43423,doc/master/TSchemaRule_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRule_8cxx_source.html,2,['checksum'],['checksum']
Security,"SetCompressionLevel(Int_t level = 1); *-*-*-*-*-*-*-*Set the branch/subbranches compression level; *-* ============================================. void SetEntryOffsetLen(Int_t len, Bool_t updateSubBranches = kFALSE); Update the default value for the branch's fEntryOffsetLen if and only if; it was already non zero (and the new value is not zero); If updateExisting is true, also update all the existing branches. void SetEntries(Long64_t entries); Set the number of entries in this branch. void SetFile(TFile* file); Set file where this branch writes/reads its buffers.; By default the branch buffers reside in the file where the; Tree was created.; If the file name where the tree was created is an absolute; path name or an URL (e.g. /castor/... or root://host/...); and if the fname is not an absolute path name or an URL then; the path of the tree file is prepended to fname to make the; branch file relative to the tree file. In this case one can; move the tree + all branch files to a different location in; the file system and still access the branch files.; The ROOT file will be connected only when necessary.; If called by TBranch::Fill (via TBasket::WriteFile), the file; will be created with the option ""recreate"".; If called by TBranch::GetEntry (via TBranch::GetBasket), the file; will be opened in read mode.; To open a file in ""update"" mode or with a certain compression; level, use TBranch::SetFile(TFile *file). void SetFile(const char* fname); Set file where this branch writes/reads its buffers.; By default the branch buffers reside in the file where the; Tree was created.; If the file name where the tree was created is an absolute; path name or an URL (e.g. /castor/... or root://host/...); and if the fname is not an absolute path name or an URL then; the path of the tree file is prepended to fname to make the; branch file relative to the tree file. In this case one can; move the tree + all branch files to a different location in; the file system and still access the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBranch.html:23714,access,access,23714,root/html526/TBranch.html,https://root.cern,https://root.cern/root/html526/TBranch.html,1,['access'],['access']
Security,"SetError(double err); voidSetLimits(double low, double up); voidSetLowerLimit(double low); voidSetUpperLimit(double up); voidSetValue(double val); doubleUpperLimit() const; doubleValue() const. Data Members; private:. boolfConst; doublefError; boolfFix; boolfLoLimValid; doublefLoLimit; stringfName; unsigned intfNum; boolfUpLimValid; doublefUpLimit; doublefValue. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinuitParameter(unsigned int num, const string& name, double val); constructor for constant Parameter. {}. MinuitParameter(unsigned int num, const string& name, double val, double err); constructor for standard Parameter. {}. MinuitParameter(unsigned int num, const string& name, double val, double err, double min, double max); constructor for limited Parameter. ~MinuitParameter(); {}. MinuitParameter(const ROOT::Minuit2::MinuitParameter& par); {}. MinuitParameter& operator=(const ROOT::Minuit2::MinuitParameter& par). unsigned int Number() const; access methods. {return fNum;}. const std::string & GetName() const; new API returning a string. { return fName; }. const char * Name() const; return const char * for mantaining backward compatibility. {return fName.c_str();}. double Value() const; {return fValue;}. double Error() const; {return fError;}. void SetValue(double val); interaction. {fValue = val;}. void SetError(double err); {fError = err;}. void SetLimits(double low, double up). void SetUpperLimit(double up). void SetLowerLimit(double low). void RemoveLimits(). void Fix(); {fFix = true;}. void Release(); {fFix = false;}. bool IsConst() const; state of Parameter (fixed/const/limited). {return fConst;}. bool IsFixed() const; {return fFix;}. bool HasLimits() const; {return fLoLimValid || fUpLimValid; }. bool HasLowerLimit() const; {return fLoLimValid; }. bool HasUpperLimit() const; {return fUpLimValid; }. double LowerLimit() const; {return fLoLimit;}. double UpperLimit() const; {return fUpLimit;}. » Last changed: root",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__MinuitParameter.html:2520,access,access,2520,root/html526/ROOT__Minuit2__MinuitParameter.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__MinuitParameter.html,2,['access'],['access']
Security,"SetEventList(pyplus);; tree->Draw(""fTracks.fPy"");; will draw the fPy of ALL tracks in event with at least one track with a positive fPy.; To select only the elements that did match the original selection use TEventList::SetReapplyCut or TEntryList::SetReapplyCut.; Example: tree.Draw("">>pyplus"",""fTracks.fPy>0"");; pyplus->SetReapplyCut(true);; tree->SetEventList(pyplus);; tree->Draw(""fTracks.fPy"");; will draw the fPy of only the tracks that have a positive fPy.; To draw only the elements that match a selection in case of arrays, you can also use TEntryListArray (faster in case of a more general selection).; Example: tree.Draw("">>pyplus"",""fTracks.fPy>0"", ""entrylistarray"");; tree->SetEntryList(pyplus);; tree->Draw(""fTracks.fPy"");; will draw the fPy of only the tracks that have a positive fPy, but without redoing the selection.; Note: Use tree->SetEventList(0) if you do not want use the list as input. How to obtain more info from TTree::Draw; Once TTree::Draw has been called, it is possible to access useful information still stored in the TTree object via the following functions:. GetSelectedRows() // return the number of values accepted by the selection expression. In case where no selection was specified, returns the number of values processed.; GetV1() // returns a pointer to the double array of V1; GetV2() // returns a pointer to the double array of V2; GetV3() // returns a pointer to the double array of V3; GetV4() // returns a pointer to the double array of V4; GetW() // returns a pointer to the double array of Weights where weight equal the result of the selection expression. where V1,V2,V3 correspond to the expressions in TTree::Draw(""V1:V2:V3:V4"",selection);; If the expression has more than 4 component use GetVal(index); Example: Root > ntuple->Draw(""py:px"",""pz>4"");; Root > TGraph *gr = new TGraph(ntuple->GetSelectedRows(),; ntuple->GetV2(), ntuple->GetV1());; Root > gr->Draw(""ap""); //draw graph in current pad; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:133698,access,access,133698,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,2,['access'],['access']
Security,"SetFile to specify a different file. IMPORTANT NOTE about branch names; In case two or more master branches contain subbranches with; identical names, one must add a ""."" (dot) character at the end; of the master branch name. This will force the name of the subbranch; to be master.subbranch instead of simply subbranch.; This situation happens when the top level object (say event); has two or more members referencing the same class.; For example, if a Tree has two branches B1 and B2 corresponding; to objects of the same class MyClass, one can do:; tree.Branch(""B1."",""MyClass"",&b1,8000,1);; tree.Branch(""B2."",""MyClass"",&b2,8000,1);; if MyClass has 3 members a,b,c, the two instructions above will generate; subbranches called B1.a, B1.b ,B1.c, B2.a, B2.b, B2.c. bufsize is the buffer size in bytes for this branch; The default value is 32000 bytes and should be ok for most cases.; You can specify a larger value (eg 256000) if your Tree is not split; and each entry is large (Megabytes); A small value for bufsize is optimum if you intend to access; the entries in the Tree randomly and your Tree is in split mode. TBranch* BranchRef(); Build the optional branch supporting the TRefTable.; This branch will keep all the information to find the branches; containing referenced objects. At each Tree::Fill, the branch numbers containing the; referenced objects are saved to the TBranchRef basket.; When the Tree header is saved (via TTree::Write), the branch; is saved keeping the information with the pointers to the branches; having referenced objects. TBranch* Bronch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); Create a new TTree BranchElement. WARNING about this new function. This function is designed to replace the function TTree::Branch above.; This function is far more powerful than the Branch function.; It supports the full C++, including STL and has the same behaviour; in split or non-split mode. classname does not have to de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:49090,access,access,49090,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,2,['access'],['access']
Security,"SetFile to specify a different file. IMPORTANT NOTE about branch names; In case two or more master branches contain subbranches with; identical names, one must add a ""."" (dot) character at the end; of the master branch name. This will force the name of the subbranch; to be master.subbranch instead of simply subbranch.; This situation happens when the top level object (say event); has two or more members referencing the same class.; For example, if a Tree has two branches B1 and B2 corresponding; to objects of the same class MyClass, one can do:; tree.Branch(""B1."",""MyClass"",&b1,8000,1);; tree.Branch(""B2."",""MyClass"",&b2,8000,1);; if MyClass has 3 members a,b,c, the two instructions above will generate; subbranches called B1.a, B1.b ,B1.c, B2.a, B2.b, B2.c. bufsize is the buffer size in bytes for this branch; The default value is 32000 bytes and should be ok for most cases.; You can specify a larger value (eg 256000) if your Tree is not split; and each entry is large (Megabytes); A small value for bufsize is optimum if you intend to access; the entries in the Tree randomly and your Tree is in split mode. Use splitlevel < 0 instead of splitlevel=0 when the class; has a custom Streamer. Note: if the split level is set to the default (99), TTree::Branch will; not issue a warning if the class can not be split. TBranch* BronchExec(const char* name, const char* classname, void* addobj, Bool_t isptrptr, Int_t bufsize, Int_t splitlevel); Helper function implementing TTree::Bronch and TTree::Branch(const char *name, T &obj);. void Browse(TBrowser* ); Browse content of the TTree. Int_t BuildIndex(const char* majorname, const char* minorname = ""0""); Build a Tree Index (default is TTreeIndex).; See a description of the parameters and functionality in; TTreeIndex::TTreeIndex(). The return value is the number of entries in the Index (< 0 indicates failure). A TTreeIndex object pointed by fTreeIndex is created.; This object will be automatically deleted by the TTree destructor.; See a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:51727,access,access,51727,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,2,['access'],['access']
Security,"SetUpperLimit(unsigned int, double); voidSetUpperLimit(const string&, double); voidSetValue(unsigned int, double); voidSetValue(const string&, double); const ROOT::Minuit2::MnUserTransformation&Trafo() const; doubleValue(unsigned int) const; doubleValue(const string&) const; unsigned intVariableParameters() const. Data Members; private:. ROOT::Minuit2::MnUserTransformationfTransformation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MnUserParameters(); {}. MnUserParameters(const vector<double>& , const vector<double>& ). ~MnUserParameters(); {}. MnUserParameters(const ROOT::Minuit2::MnUserParameters& par); {}. MnUserParameters& operator=(const ROOT::Minuit2::MnUserParameters& par). const MnUserTransformation& Trafo() const; {return fTransformation;}. unsigned int VariableParameters() const. const std::vector<ROOT::Minuit2::MinuitParameter>& Parameters() const; access to parameters (row-wise). std::vector<double> Params() const; access to parameters and errors in column-wise representation. std::vector<double> Errors() const. bool Add(const string& , double , double ); Add free Parameter Name, Value, Error. bool Add(const string& , double , double , double , double ); Add limited Parameter Name, Value, Lower bound, Upper bound. bool Add(const string& , double ); Add const Parameter Name, vale. void Fix(unsigned int ); interaction via external number of Parameter. void Release(unsigned int ). void RemoveLimits(unsigned int ). void SetValue(unsigned int , double ). void SetError(unsigned int , double ). void SetLimits(unsigned int , double , double ). void SetUpperLimit(unsigned int , double ). void SetLowerLimit(unsigned int , double ). void SetName(unsigned int , const string& ). double Value(unsigned int ) const. double Error(unsigned int ) const. void Fix(const string& ); interaction via Name of Parameter. void Release(const string& ). void SetValue(const string& , double ). void SetError(const string& , double ). void S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__MnUserParameters.html:2745,access,access,2745,root/html534/ROOT__Minuit2__MnUserParameters.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__MnUserParameters.html,3,['access'],['access']
Security,"SetUpperLimit(unsigned int, double); voidSetUpperLimit(const string&, double); voidSetValue(unsigned int, double); voidSetValue(const string&, double); const ROOT::Minuit2::MnUserTransformation&Trafo() const; doubleValue(unsigned int) const; doubleValue(const string&) const; unsigned intVariableParameters() const. Data Members; private:. ROOT::Minuit2::MnUserTransformationfTransformation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MnUserParameters(); {}. MnUserParameters(const vector<double>& , const vector<double>& ). ~MnUserParameters(); {}. MnUserParameters(const ROOT::Minuit2::MnUserParameters& par); {}. MnUserParameters& operator=(const ROOT::Minuit2::MnUserParameters& par). const MnUserTransformation& Trafo() const; {return fTransformation;}. unsigned int VariableParameters() const. const std::vector<ROOT::Minuit2::MinuitParameter>& Parameters() const; access to parameters (row-wise). std::vector<double> Params() const; access to parameters and errors in column-wise representation. std::vector<double> Errors() const. bool Add(const string& , double , double ); Add free Parameter Name, Value, Error. bool Add(const string& , double , double , double , double ); Add limited Parameter Name, Value, Lower bound, Upper bound. bool Add(const string& , double ); Add const Parameter Name, vale. void Fix(unsigned int ); interaction via external number of Parameter. void Release(unsigned int ). void SetValue(unsigned int , double ). void SetError(unsigned int , double ). void SetLimits(unsigned int , double , double ). void SetUpperLimit(unsigned int , double ). void SetLowerLimit(unsigned int , double ). void RemoveLimits(unsigned int ). double Value(unsigned int ) const. double Error(unsigned int ) const. void Fix(const string& ); interaction via Name of Parameter. void Release(const string& ). void SetValue(const string& , double ). void SetError(const string& , double ). void SetLimits(const string& , double , double ). v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Minuit2__MnUserParameters.html:2701,access,access,2701,root/html528/ROOT__Minuit2__MnUserParameters.html,https://root.cern,https://root.cern/root/html528/ROOT__Minuit2__MnUserParameters.html,3,['access'],['access']
Security,"SetUpperLimit(unsigned int, double); voidSetUpperLimit(const string&, double); voidSetValue(unsigned int, double); voidSetValue(const string&, double); const ROOT::Minuit2::MnUserTransformation&Trafo() const; doubleValue(unsigned int) const; doubleValue(const string&) const; unsigned intVariableParameters() const. Data Members; private:. ROOT::Minuit2::MnUserTransformationfTransformation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MnUserParameters(); {}. MnUserParameters(const vector<double>& , const vector<double>& ). ~MnUserParameters(); {}. MnUserParameters(const ROOT::Minuit2::MnUserParameters& par); {}. MnUserParameters& operator=(const ROOT::Minuit2::MnUserParameters& par). const MnUserTransformation& Trafo() const; {return fTransformation;}. unsigned int VariableParameters() const. const std::vector<ROOT::Minuit2::MinuitParameter>& Parameters() const; access to parameters (row-wise). std::vector<double> Params() const; access to parameters and errors in column-wise representation. std::vector<double> Errors() const. bool Add(const string& , double , double ); Add free Parameter Name, Value, Error. bool Add(const string& , double , double , double , double ); Add limited Parameter Name, Value, Lower bound, Upper bound. bool Add(const string& , double ); Add const Parameter Name, vale. void Fix(unsigned int); interaction via external number of Parameter. void Release(unsigned int). void SetValue(unsigned int, double). void SetError(unsigned int, double). void SetLimits(unsigned int, double, double). void SetUpperLimit(unsigned int, double). void SetLowerLimit(unsigned int, double). void RemoveLimits(unsigned int). double Value(unsigned int). double Error(unsigned int). void Fix(const std::string &); interaction via Name of Parameter. void Release(const std::string &). void SetValue(const std::string &, double). void SetError(const std::string &, double). void SetLimits(const std::string &, double, double). void Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__MnUserParameters.html:2701,access,access,2701,root/html526/ROOT__Minuit2__MnUserParameters.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__MnUserParameters.html,1,['access'],['access']
Security,"SetupTString GetSetup()It gets the ROOT installation setup as TString.Definition TApplication.cxx:967; TApplication::HandleIdleTimervirtual void HandleIdleTimer()Handle idle timeout.Definition TApplication.cxx:577; TApplication::ProcessRemotevirtual Longptr_t ProcessRemote(const char *line, Int_t *error=nullptr)Process the content of a line starting with "".R"" (already stripped-off) The format is.Definition TApplication.cxx:1485; TApplication::fAppRemoteTApplication * fAppRemoteDefinition TApplication.h:80; TApplication::fArgvchar ** fArgvDefinition TApplication.h:59; TBrowserUsing a TBrowser one can browse all ROOT objects.Definition TBrowser.h:37; TBrowser::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove obj from browser.Definition TBrowser.cxx:408; TBrowser::Addvoid Add(TObject *obj, const char *name=nullptr, Int_t check=-1)Add object with name to browser.Definition TBrowser.cxx:303; TClassTable::GetDictstatic DictFuncPtr_t GetDict(const char *cname)Given the class name returns the Dictionary() function of a class (uses hash of name).Definition TClassTable.cxx:674; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TClass::GetListOfAllPublicDataMembersTList * GetListOfAllPublicDataMembers(Bool_t load=kTRUE)Returns a list of all public data members of this class and its base classes.Definition TClass.cxx:3929; TClass::GetListOfEnumsTList * GetListOfEnums(Bool_t load=kTRUE)Return a list containing the TEnums of a class.Definition TClass.cxx:3753; TClass::PropertyLong_t Property() const overrideReturns the properties of the TClass as a bit field stored as a Long_t value.Definition TClass.cxx:6153; TClass::GetMethodAllAnyTMethod * GetMethodAllAny(const char *method)Return pointer to method without looking at parameters.Definition TClass.cxx:4451; TClass::GetClassstatic TClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE)Static method returning pointer to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:95076,hash,hash,95076,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['hash'],['hash']
Security,"Shape ; (; ); const. inline . Definition at line 78 of file TGeoBoolNode.h. ◆ GetNpoints(). virtual Int_t TGeoBoolNode::GetNpoints ; (; ). pure virtual . Implemented in TGeoUnion, TGeoIntersection, and TGeoSubtraction. ◆ GetRightMatrix(). TGeoMatrix * TGeoBoolNode::GetRightMatrix ; (; ); const. inline . Definition at line 77 of file TGeoBoolNode.h. ◆ GetRightShape(). TGeoShape * TGeoBoolNode::GetRightShape ; (; ); const. inline . Definition at line 79 of file TGeoBoolNode.h. ◆ GetThreadData(). TGeoBoolNode::ThreadData_t & TGeoBoolNode::GetThreadData ; (; ); const. Definition at line 60 of file TGeoBoolNode.cxx. ◆ IsA(). TClass * TGeoBoolNode::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TGeoUnion, TGeoIntersection, and TGeoSubtraction.; Definition at line 91 of file TGeoBoolNode.h. ◆ MakeBranch(). Bool_t TGeoBoolNode::MakeBranch ; (; const char * ; expr, . Bool_t ; left . ). protected . Mutex for thread data access. ; Expands the boolean expression either on left or right branch, creating component elements (composite shapes and boolean nodes).; Returns true on success. ; Definition at line 224 of file TGeoBoolNode.cxx. ◆ MakeClone(). virtual TGeoBoolNode * TGeoBoolNode::MakeClone ; (; ); const. pure virtual . Implemented in TGeoUnion, TGeoIntersection, and TGeoSubtraction. ◆ operator=(). TGeoBoolNode & TGeoBoolNode::operator= ; (; const TGeoBoolNode & ; ). privatedelete . ◆ Paint(). void TGeoBoolNode::Paint ; (; Option_t * ; option). overridevirtual . Special schema for feeding the 3D buffers to the painter client. ; Reimplemented from TObject.; Reimplemented in TGeoUnion, TGeoIntersection, and TGeoSubtraction.; Definition at line 295 of file TGeoBoolNode.cxx. ◆ RegisterMatrices(). void TGeoBoolNode::RegisterMatrices ; (; ). Register all matrices of the boolean node and descendents. ; Definition at line 341 of file TGeoBoolNode.cxx. ◆ ReplaceMatrix(). Bool_t TGeoBoolNode::ReplaceM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoBoolNode.html:18906,access,access,18906,doc/master/classTGeoBoolNode.html,https://root.cern,https://root.cern/doc/master/classTGeoBoolNode.html,1,['access'],['access']
Security,ShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TIterator*_coefIter! Iterator over coefficient list; RooListProxy_coefListList of coefficients; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_t_extendedAllow use as extended p.d.f.; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TIterator*_funcIter! Iterator over FUNC list; RooListProxy_funcListList of component FUNCs; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; Bool_t_haveLastCoef; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normalization integral (owned by _normMgr); RooObjCacheManager_normIntMgrThe integration cache manager; RooObjCacheManagerRooAbsPdf::_normMgrThe cache manager; TStringRooAbsPdf::_normRangeNormalization range; static TStringRooAbsPdf::_normRangeOverride; RooArgSet*RooAbsPdf::_normSet! Normalization set with for above integral; RooAbsArg::OperModeRooAbsArg::_oper,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooRealSumPdf.html:39153,access,access,39153,root/html532/RooRealSumPdf.html,https://root.cern,https://root.cern/root/html532/RooRealSumPdf.html,1,['access'],['access']
Security,"ShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTestChecksum(UInt_t checksum) const; Bool_tTestVersion(Int_t version) const; ROOT::TSchemaRuleTSchemaRule(); ROOT::TSchemaRuleTSchemaRule(const ROOT::TSchemaRule& rhs); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. Bool_tProcessChecksum(const TString& checksum) const; static voidProcessDeclaration(TObjArray* array, const TString& list); static voidProcessList(TObjArray* array, const TString& list); Bool_tProcessVersion(const TString& version) const. Data Members; public:. enum RuleType_t { kReadRule; kReadRawRule; kNone; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TStringfAttributesAttributes to be applied to the member (like Owner/NotOwner); TStringfChecksumSource checksum string; vector<UInt_t>*fChecksumVect! Source checksum vector (for searching purposes); TStringfCodeUser specified code snippet; Bool_tfEmbedValue determining if the rule should be embedded; TStringfIncludeIncludes string; TObjArray*fIncludeVect! Includes vector; ROOT::TSchemaRule::ReadFuncPtr_tfReadFuncPtr! Conversion function pointer for read rule; ROOT::TSchemaRule::ReadRawFuncPtr_tfReadRawFuncPtr! Conversion function poin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__TSchemaRule.html:6382,checksum,checksum,6382,root/html528/ROOT__TSchemaRule.html,https://root.cern,https://root.cern/root/html528/ROOT__TSchemaRule.html,3,['checksum'],['checksum']
Security,"Size() );; 1302 ; 1303 ; 1304 // create pointer to output matrix used for the predictions; 1305 fYHat = std::unique_ptr<MatrixImpl_t>(new MatrixImpl_t(fNet->GetBatchSize(), fNet->GetOutputWidth() ) );; 1306 ; 1307 // print the created network; 1308 Log() << ""***** Deep Learning Network *****"" << Endl;; 1309 if (Log().GetMinType() <= kINFO); 1310 deepNet.Print();; 1311 }; 1312 Log() << ""Using "" << nTrainingSamples << "" events for training and "" << nValidationSamples << "" for testing"" << Endl;; 1313 ; 1314 // Loading the training and validation datasets; 1315 TMVAInput_t trainingTuple = std::tie(eventCollectionTraining, DataInfo());; 1316 TensorDataLoader_t trainingData(trainingTuple, nTrainingSamples, batchSize,; 1317 {inputDepth, inputHeight, inputWidth},; 1318 {deepNet.GetBatchDepth(), deepNet.GetBatchHeight(), deepNet.GetBatchWidth()} ,; 1319 deepNet.GetOutputWidth(), nThreads);; 1320 ; 1321 TMVAInput_t validationTuple = std::tie(eventCollectionValidation, DataInfo());; 1322 TensorDataLoader_t validationData(validationTuple, nValidationSamples, batchSize,; 1323 {inputDepth, inputHeight, inputWidth},; 1324 { deepNet.GetBatchDepth(),deepNet.GetBatchHeight(), deepNet.GetBatchWidth()} ,; 1325 deepNet.GetOutputWidth(), nThreads);; 1326 ; 1327 ; 1328 ; 1329 // do an evaluation of the network to compute initial minimum test error; 1330 ; 1331 Bool_t includeRegularization = (R != DNN::ERegularization::kNone);; 1332 ; 1333 Double_t minValError = 0.0;; 1334 Log() << ""Compute initial loss on the validation data "" << Endl;; 1335 for (auto batch : validationData) {; 1336 auto inputTensor = batch.GetInput();; 1337 auto outputMatrix = batch.GetOutput();; 1338 auto weights = batch.GetWeights();; 1339 ; 1340 //std::cout << "" input use count "" << inputTensor.GetBufferUseCount() << std::endl;; 1341 // should we apply droput to the loss ??; 1342 minValError += deepNet.Loss(inputTensor, outputMatrix, weights, false, includeRegularization);; 1343 }; 1344 // add Regularization term; 134",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:52031,validat,validationTuple,52031,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,3,['validat'],"['validationData', 'validationTuple']"
Security,"Sizenumber of elements in collection. private:. TList**fContHash table (table of lists); Int_tfEntriesNumber of objects in table; Int_tfRehashLevelAverage collision rate which triggers rehash; Int_tfUsedSlotsNumber of used slots. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THashTable(Int_t capacity = TCollection::kInitHashTableCapacity, Int_t rehash = 0); Create a THashTable object. Capacity is the initial hashtable capacity; (i.e. number of slots), by default kInitHashTableCapacity = 17, and; rehashlevel is the value at which a rehash will be triggered. I.e. when; the average size of the linked lists at a slot becomes longer than; rehashlevel then the hashtable will be resized and refilled to reduce; the collision rate to about 1. The higher the collision rate, i.e. the; longer the linked lists, the longer lookup will take. If rehashlevel=0; the table will NOT automatically be rehashed. Use Rehash() for manual; rehashing. ~THashTable(); Delete a hashtable. Objects are not deleted unless the THashTable is the; owner (set via SetOwner()). void Add(TObject* obj); Add object to the hash table. Its position in the table will be; determined by the value returned by its Hash() function. void AddAll(const TCollection* col); Add all objects from collection col to this collection.; Implemented for more efficient rehashing. void Clear(Option_t* option = """"); Remove all objects from the table. Does not delete the objects; unless the THashTable is the owner (set via SetOwner()). Int_t Collisions(const char* name) const; Returns the number of collisions for an object with a certain name; (i.e. number of objects in same slot in the hash table, i.e. length; of linked list). Int_t Collisions(TObject* obj) const; Returns the number of collisions for an object (i.e. number of objects; in same slot in the hash table, i.e. length of linked list). void Delete(Option_t* option = """"); Remove all objects from the table AND delete all heap based",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THashTable.html:8967,hash,hashtable,8967,root/html528/THashTable.html,https://root.cern,https://root.cern/root/html528/THashTable.html,3,['hash'],['hashtable']
Security,"Sizenumber of elements in collection. private:. TList**fContHash table (table of lists); Int_tfEntriesNumber of objects in table; Int_tfRehashLevelAverage collision rate which triggers rehash; Int_tfUsedSlotsNumber of used slots. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THashTable(Int_t capacity = TCollection::kInitHashTableCapacity, Int_t rehash = 0); Create a THashTable object. Capacity is the initial hashtable capacity; (i.e. number of slots), by default kInitHashTableCapacity = 17, and; rehashlevel is the value at which a rehash will be triggered. I.e. when; the average size of the linked lists at a slot becomes longer than; rehashlevel then the hashtable will be resized and refilled to reduce; the collision rate to about 1. The higher the collision rate, i.e. the; longer the linked lists, the longer lookup will take. If rehashlevel=0; the table will NOT automatically be rehashed. Use Rehash() for manual; rehashing. ~THashTable(); Delete a hashtable. Objects are not deleted unless the THashTable is the; owner (set via SetOwner()). void Add(TObject* obj); Add object to the hash table. Its position in the table will be; determined by the value returned by its Hash() function. void AddBefore(const TObject* before, TObject* obj); Add object to the hash table. Its position in the table will be; determined by the value returned by its Hash() function.; If and only if 'before' is in the same bucket as obj, obj is added; in front of 'before' within the bucket's list. void AddAll(const TCollection* col); Add all objects from collection col to this collection.; Implemented for more efficient rehashing. void Clear(Option_t* option = """"); Remove all objects from the table. Does not delete the objects; unless the THashTable is the owner (set via SetOwner()). Int_t Collisions(const char* name) const; Returns the number of collisions for an object with a certain name; (i.e. number of objects in same slot in the hash table, i.e. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THashTable.html:9175,hash,hashtable,9175,root/html534/THashTable.html,https://root.cern,https://root.cern/root/html534/THashTable.html,1,['hash'],['hashtable']
Security,"Slice goes out of scope. aSlices will; contain the histogram for the i-th parameter of the fit function at aSlices[i];; aSlices[n] (n being the number of parameters) contains the chi2 distribution of; the fits. If arr is NULL, the generated histograms are added to the list of objects; in the current directory. It is the user's responsability to delete; these histograms. Example: Assume a 2-d histogram h2; Root > h2->FitSlicesX(); produces 4 TH1D histograms; with h2_0 containing parameter 0(Constant) for a Gaus fit; of each bin in Y projected along X; with h2_1 containing parameter 1(Mean) for a gaus fit; with h2_2 containing parameter 2(StdDev) for a gaus fit; with h2_chi2 containing the chisquare/number of degrees of freedom for a gaus fit. Root > h2->FitSlicesX(0,15,22,10);; same as above, but only for bins 15 to 22 along Y; and only for bins in Y for which the corresponding projection; along X has more than cut bins filled. NOTE: To access the generated histograms in the current directory, do eg:; TH1D *h2_1 = (TH1D*)gDirectory->Get(""h2_1"");. void FitSlicesY(TF1* f1 = 0, Int_t firstxbin = 0, Int_t lastxbin = -1, Int_t cut = 0, Option_t* option = ""QNR"", TObjArray* arr = 0); Project slices along Y in case of a 2-D histogram, then fit each slice; with function f1 and make a histogram for each fit parameter; Only bins along X between firstxbin and lastxbin are considered.; By default (firstxbin == 0, lastxbin == -1), all bins in x including; over- and underflows are taken into account.; If f1=0, a gaussian is assumed; Before invoking this function, one can set a subrange to be fitted along Y; via f1->SetRange(ymin,ymax); The argument option (default=""QNR"") can be used to change the fit options.; ""Q"" means Quiet mode; ""N"" means do not show the result of the fit; ""R"" means fit the function in the specified function range; ""G2"" merge 2 consecutive bins along Y; ""G3"" merge 3 consecutive bins along Y; ""G4"" merge 4 consecutive bins along Y; ""G5"" merge 5 consecutive bins alo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TH2.html:36944,access,access,36944,root/html604/TH2.html,https://root.cern,https://root.cern/root/html604/TH2.html,1,['access'],['access']
Security,"Slice goes out of scope. aSlices will; contain the histogram for the i-th parameter of the fit function at aSlices[i];; aSlices[n] (n being the number of parameters) contains the chi2 distribution of; the fits. If arr is NULL, the generated histograms are added to the list of objects; in the current directory. It is the user's responsability to delete; these histograms. Example: Assume a 2-d histogram h2; Root > h2->FitSlicesY(); produces 4 TH1D histograms; with h2_0 containing parameter 0(Constant) for a Gaus fit; of each bin in X projected along Y; with h2_1 containing parameter 1(Mean) for a gaus fit; with h2_2 containing parameter 2(StdDev) for a gaus fit; with h2_chi2 containing the chisquare/number of degrees of freedom for a gaus fit. Root > h2->FitSlicesY(0,15,22,10);; same as above, but only for bins 15 to 22 along X; and only for bins in X for which the corresponding projection; along Y has more than cut bins filled. NOTE: To access the generated histograms in the current directory, do eg:; TH1D *h2_1 = (TH1D*)gDirectory->Get(""h2_1"");. A complete example of this function is given in tutorial:fitslicesy.C. with the following output:. /*; ; */. Int_t GetBin(Int_t binx, Int_t biny, Int_t binz = 0) const; See comments in TH1::GetBin. Double_t GetBinWithContent2(Double_t c, Int_t& binx, Int_t& biny, Int_t firstxbin = 1, Int_t lastxbin = -1, Int_t firstybin = 1, Int_t lastybin = -1, Double_t maxdiff = 0) const; compute first cell (binx,biny) in the range [firstxbin,lastxbin][firstybin,lastybin] for which; diff = abs(cell_content-c) <= maxdiff; In case several cells in the specified range with diff=0 are found; the first cell found is returned in binx,biny.; In case several cells in the specified range satisfy diff <=maxdiff; the cell with the smallest difference is returned in binx,biny.; In all cases the function returns the smallest difference. NOTE1: if firstxbin < 0, firstxbin is set to 1; if (lastxbin < firstxbin then lastxbin is set to the number of bins in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TH2.html:39419,access,access,39419,root/html604/TH2.html,https://root.cern,https://root.cern/root/html604/TH2.html,1,['access'],['access']
Security,"Sniffer::ProduceIamge, converting kind into TImage::EImageFileTypes type. ; Reimplemented in TRootSnifferFull.; Definition at line 1489 of file TRootSniffer.cxx. ◆ CanDrawClass(). virtual Bool_t TRootSniffer::CanDrawClass ; (; TClass * ; ). inlineprotectedvirtual . Reimplemented in TRootSnifferFull.; Definition at line 160 of file TRootSniffer.h. ◆ CanDrawItem(). Bool_t TRootSniffer::CanDrawItem ; (; const char * ; path). Method verifies if object can be drawn. ; Definition at line 1109 of file TRootSniffer.cxx. ◆ CanExploreItem(). Bool_t TRootSniffer::CanExploreItem ; (; const char * ; path). Method returns true when object has childs or one could try to expand item. ; Definition at line 1120 of file TRootSniffer.cxx. ◆ CheckRestriction(). Int_t TRootSniffer::CheckRestriction ; (; const char * ; full_item_name). Checked if restriction is applied to the item full_item_name should have full path to the item. ; Returns:. -1 - object invisible, cannot be accessed or listed; 0 - no explicit restrictions, use default; 1 - read-only access; 2 - full access . Definition at line 546 of file TRootSniffer.cxx. ◆ Class(). static TClass * TRootSniffer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TRootSniffer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TRootSniffer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 249 of file TRootSniffer.h. ◆ CreateItem(). Bool_t TRootSniffer::CreateItem ; (; const char * ; fullname, . const char * ; title . ). Create item element. ; Definition at line 1691 of file TRootSniffer.cxx. ◆ CreateOwnTopFolder(). void TRootSniffer::CreateOwnTopFolder ; (; ). Create own TFolder structures independent from gROOT This allows to have many independent TRootSniffer instances At the same time such sniffer lost access to all global lists and folders. ; Definition at line 913 of file TRootSniffer.cxx. ◆ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootSniffer.html:22233,access,accessed,22233,doc/master/classTRootSniffer.html,https://root.cern,https://root.cern/doc/master/classTRootSniffer.html,3,['access'],"['access', 'accessed']"
Security,"Standard; kVerbose; kTreeStructure; };. public:. static map<RooAbsArg*,TRefArray*>RooAbsArg::_ioEvoListtemporary holding list for proxies needed in schema evolution ; static stack<RooAbsArg*>RooAbsArg::_ioReadStackreading stack ; static const UInt_tRooAbsArg::fnv1a32start; static const ULong64_tRooAbsArg::fnv1a64start. protected:. set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsCategory::_byteValue! Transient cache for byte values from tree branches; deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; Int_t*_map! Super-index to generic-index map; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooRefArrayRooAbsArg::_proxyListlist of proxies;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooGenCategory.html:21686,access,access,21686,root/html534/RooGenCategory.html,https://root.cern,https://root.cern/root/html534/RooGenCategory.html,1,['access'],['access']
Security,"Static method returning the RSA initialization flag. ;  ; static const char * GetRSAPubExport (Int_t key=0);  Static method returning the RSA public keys. ;  ; static THostAuth * HasHostAuth (const char *host, const char *user, Option_t *opt=""R"");  Checks if a THostAuth with exact match for {host,user} exists in the fgAuthInfo list If opt = ""P"" use ProofAuthInfo list instead Returns pointer to it or 0. ;  ; static void InitRandom ();  Initialize random machine using seed from /dev/urandom (or current time if /dev/urandom not available). ;  ; static void MergeHostAuthList (TList *Std, TList *New, Option_t *Opt="""");  Tool for updating fgAuthInfo or fgProofAuthInfo 'nin' contains list of last input information through (re)reading of a rootauthrc-alike file. ;  ; static char * PromptPasswd (const char *prompt=""Password: "");  Static method to prompt for the user's passwd to be used for authentication to rootd or proofd. ;  ; static char * PromptUser (const char *remote);  Static method to prompt for the user name to be used for authentication to rootd or proofd. ;  ; static Int_t ReadRootAuthrc ();  Read authentication directives from $ROOTAUTHRC, $HOME/.rootauthrc or <Root_etc_dir>/system.rootauthrc and create related THostAuth objects. ;  ; static void RemoveHostAuth (THostAuth *ha, Option_t *opt="""");  Remove THostAuth instance from the list. ;  ; static Int_t SecureRecv (TSocket *Socket, Int_t dec, Int_t KeyType, char **Out);  Receive str from sock and decode it using key indicated by key type Return number of received bytes or -1 in case of error. ;  ; static Int_t SecureSend (TSocket *Socket, Int_t enc, Int_t KeyType, const char *In);  Encode null terminated str using the session private key indicated by enc and sends it over the network Returns number of bytes sent, or -1 in case of error. ;  ; static Int_t SendRSAPublicKey (TSocket *Socket, Int_t key=0);  Receives server RSA Public key Sends local RSA public key encoded. ;  ; static void SetAuthReUse (Bool_t authre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAuthenticate.html:13709,authenticat,authentication,13709,doc/master/classTAuthenticate.html,https://root.cern,https://root.cern/doc/master/classTAuthenticate.html,1,['authenticat'],['authentication']
Security,"StrengthList;  ! map of alpha -> pruning index ;  ; SeparationBase * fQualityIndex;  ! the quality index used to calculate R(t), R(T) = sum[t in ~T]{ R(t) } ;  ; std::vector< Float_t > fQualityIndexList;  ! map of R(T) -> pruning index ;  ; DecisionTree * fTree;  ! (pruned) decision tree ;  ; const DataSet * fValidationDataSet;  ! the event sample to select the optimally-pruned tree ;  ; const EventList * fValidationSample;  ! the event sample to select the optimally-pruned tree ;  . #include <TMVA/CCPruner.h>; Member Typedef Documentation. ◆ EventList. typedef std::vector<Event*> TMVA::CCPruner::EventList. Definition at line 64 of file CCPruner.h. Constructor & Destructor Documentation. ◆ CCPruner() [1/2]. CCPruner::CCPruner ; (; DecisionTree * ; t_max, . const EventList * ; validationSample, . SeparationBase * ; qualityIndex = nullptr . ). constructor ; Definition at line 69 of file CCPruner.cxx. ◆ CCPruner() [2/2]. CCPruner::CCPruner ; (; DecisionTree * ; t_max, . const DataSet * ; validationSample, . SeparationBase * ; qualityIndex = nullptr . ). constructor ; Definition at line 92 of file CCPruner.cxx. ◆ ~CCPruner(). CCPruner::~CCPruner ; (; ). Definition at line 115 of file CCPruner.cxx. Member Function Documentation. ◆ GetOptimalPruneSequence(). std::vector< DecisionTreeNode * > CCPruner::GetOptimalPruneSequence ; (; ); const. return the prune strength (=alpha) corresponding to the prune sequence ; Definition at line 240 of file CCPruner.cxx. ◆ GetOptimalPruneStrength(). Float_t TMVA::CCPruner::GetOptimalPruneStrength ; (; ); const. inline . Definition at line 89 of file CCPruner.h. ◆ GetOptimalQualityIndex(). Float_t TMVA::CCPruner::GetOptimalQualityIndex ; (; ); const. inline . Definition at line 85 of file CCPruner.h. ◆ Optimize(). void CCPruner::Optimize ; (; ). determine the pruning sequence ; Definition at line 124 of file CCPruner.cxx. ◆ SetPruneStrength(). void TMVA::CCPruner::SetPruneStrength ; (; Float_t ; alpha = -1.0). inline . Definition at line ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CCPruner.html:3518,validat,validationSample,3518,doc/master/classTMVA_1_1CCPruner.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CCPruner.html,1,['validat'],['validationSample']
Security,"String &out, const char *options="""") constAdd to the string 'out' the string representation of the rule.Definition TSchemaRule.cxx:218; ROOT::TSchemaRule::TestVersionBool_t TestVersion(Int_t version) constCheck if given version number is defined in this rule.Definition TSchemaRule.cxx:402; ROOT::TSchemaRule::GetTargetconst TObjArray * GetTarget() constGet the target data members of this rule (i.e. the in memory data member).Definition TSchemaRule.cxx:520; ROOT::TSchemaRule::ConflictsBool_t Conflicts(const TSchemaRule *rule) constCheck if this rule conflicts with the given one.Definition TSchemaRule.cxx:772; ROOT::TSchemaRule::SetTargetClassvoid SetTargetClass(const TString &classname)Set the target class of this rule (i.e. the in memory class).Definition TSchemaRule.cxx:474; ROOT::TSchemaRule::GetSourceClassconst char * GetSourceClass() constGet the source class of this rule (i.e. the onfile class).Definition TSchemaRule.cxx:466; ROOT::TSchemaRule::TestChecksumBool_t TestChecksum(UInt_t checksum) constCheck if given checksum is defined in this rule.Definition TSchemaRule.cxx:437; ROOT::TSchemaRule::SetVersionBool_t SetVersion(const TString &version)Set the version string - returns kFALSE if the format is incorrect.Definition TSchemaRule.cxx:381; ROOT::TSchemaRule::IsValidBool_t IsValid() constReturn kTRUE if this rule is valid.Definition TSchemaRule.cxx:632; ROOT::TSchemaRule::GetEmbedBool_t GetEmbed() constReturn true if this rule should be saved in the ROOT File.Definition TSchemaRule.cxx:624; ROOT::TSchemaRule::SetSourceClassvoid SetSourceClass(const TString &classname)Set the source class of this rule (i.e. the onfile class).Definition TSchemaRule.cxx:456; TBufferBuffer base class used for serializing objects.Definition TBuffer.h:43; TBuffer::ReadClassBuffervirtual Int_t ReadClassBuffer(const TClass *cl, void *pointer, const TClass *onfile_class=nullptr)=0; TBuffer::IsReadingBool_t IsReading() constDefinition TBuffer.h:86; TBuffer::WriteClassBuffervirtual Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRuleSet_8cxx_source.html:26984,checksum,checksum,26984,doc/master/TSchemaRuleSet_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRuleSet_8cxx_source.html,2,['checksum'],['checksum']
Security,"String &s2)Definition TString.h:704; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TString::RemoveTString & Remove(Ssiz_t pos)Definition TString.h:685; TString::AppendTString & Append(const char *cs)Definition TString.h:572; TString::MaybeWildcardBool_t MaybeWildcard() constReturns true if string contains one of the wildcard characters ""[]*?"".Definition TString.cxx:964; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TSystem::BaseNamevirtual const char * BaseName(const char *pathname)Base name of a file name. Base name of /user/root is root.Definition TSystem.cxx:934; TTreeCacheA cache to speed-up the reading of ROOT datasets.Definition TTreeCache.h:32; TTreeCache::UpdateBranchesvirtual void UpdateBranches(TTree *tree)Update pointer to current Tree and recompute pointers to the branches in the cache.Definition TTreeCache.cxx:2211; TTreeCache::ResetCachevirtual void ResetCache()This will simply clear the cache.Definition TTreeCache.cxx:2040; TTree::TClusterIteratorHelper class to iterate over cluster of baskets.Definition TTree.h:270; TTree::TFriendLockHelper class to prevent infinite recursion in the usage of TTree Friends.Definition TTree.h:188; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::AddFriendvirtual TFriendElement * AddFriend(const char *treename,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:143088,access,access,143088,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,2,['access'],['access']
Security,"String& s); Assign a TSubString substr to TString. TString& Append(char c, Ssiz_t rep = 1); Append character c rep times to string. Ssiz_t Capacity(Ssiz_t n); Return string capacity. If nc != current capacity Clone() the string; in a string with the desired capacity. int CompareTo(const char* cs, TString::ECaseCompare cmp = kExact) const; Compare a string to char *cs2. int CompareTo(const TString& st, TString::ECaseCompare cmp = kExact) const; Compare a string to another string. Int_t CountChar(Int_t c) const; Return number of times character c occurs in the string. TString Copy() const; Copy a string. UInt_t Hash(TString::ECaseCompare cmp = kExact) const; Return hash value. UInt_t Hash(const void* txt, Int_t ntxt); Calculates hash index from any char string. (static function); Based on precalculated table of 256 specially selected numbers.; These numbers are selected in such a way, that for string; length == 4 (integer number) the hash is unambigous, i.e.; from hash value we can recalculate input (no degeneration). The quality of hash method is good enough, that; ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); tested by <R>, <R*R>, <Ri*Ri+1> gives the same result; as for libc rand(). For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. V.Perev. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Search for a string in the TString. Plen is the length of pattern,; startIndex is the index from which to start and cmp selects the type; of case-comparison. Bool_t MaybeRegexp() const; Returns true if string contains one of the regexp characters ""^$.[]*+?"". Bool_t MaybeWildcard() const; Returns true if string contains one of the wildcard characters ""[]*?"". TString& Prepend(char c, Ssiz_t rep = 1); Prepend characters to self. TString & Replace(Ssiz_t pos, Ssiz_t n, const char* s, Ssiz_t ns); Remove at most n1 characters from s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TString.html:9940,hash,hash,9940,root/html528/TString.html,https://root.cern,https://root.cern/root/html528/TString.html,1,['hash'],['hash']
Security,"String& type). private:. TArchiveFile&operator=(const TArchiveFile&); TArchiveFile(const TArchiveFile&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringfArchiveNameArchive file name; TArchiveMember*fCurMemberCurrent archive member; TFile*fFileFile stream used to access the archive; Int_tfMemberIndexIndex of sub-file in archive; TStringfMemberNameSub-file name; TObjArray*fMembersMembers in this archive. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TArchiveFile(const char* archive, const char* member, TFile* file); Specify the archive name and member name. The member can be a decimal; number which allows to access the n-th sub-file. This method is; normally only called via TFile. ~TArchiveFile(); Dtor. Long64_t GetMemberFilePosition() const; Return position in archive of current member. Int_t GetNumberOfMembers() const; Returns number of members in archive. Int_t SetMember(const char* member); Explicitely make the specified member the current member.; Returns -1 in case of error, 0 otherwise. Int_t SetMember(Int_t idx); Explicitely make the member with the specified index the current member.; Returns -1 in case of error, 0 otherwise. TArchiveFile * Open(const char* url, TFile* file); Return proper archive file h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TArchiveFile.html:6536,access,access,6536,root/html602/TArchiveFile.html,https://root.cern,https://root.cern/root/html602/TArchiveFile.html,2,['access'],['access']
Security,"String(fValidationSize.Strip(TString::kTrailing, '%'));; 622 ; 623 if (intValStr.IsFloat()) {; 624 Double_t valSizeAsDouble = fValidationSize.Atof() / 100.0;; 625 nValidationSamples = GetEventCollection(Types::kTraining).size() * valSizeAsDouble;; 626 } else {; 627 Log() << kFATAL << ""Cannot parse number \"""" << fValidationSize; 628 << ""\"". Expected string like \""20%\"" or \""20.0%\""."" << Endl;; 629 }; 630 } else if (fValidationSize.IsFloat()) {; 631 Double_t valSizeAsDouble = fValidationSize.Atof();; 632 ; 633 if (valSizeAsDouble < 1.0) {; 634 // Relative spec. format 0.2; 635 nValidationSamples = GetEventCollection(Types::kTraining).size() * valSizeAsDouble;; 636 } else {; 637 // Absolute spec format 100 or 100.0; 638 nValidationSamples = valSizeAsDouble;; 639 }; 640 } else {; 641 Log() << kFATAL << ""Cannot parse number \"""" << fValidationSize << ""\"". Expected string like \""0.2\"" or \""100\"".""; 642 << Endl;; 643 }; 644 ; 645 // Value validation; 646 // ----------------; 647 if (nValidationSamples < 0) {; 648 Log() << kFATAL << ""Validation size \"""" << fValidationSize << ""\"" is negative."" << Endl;; 649 }; 650 ; 651 if (nValidationSamples == 0) {; 652 Log() << kFATAL << ""Validation size \"""" << fValidationSize << ""\"" is zero."" << Endl;; 653 }; 654 ; 655 if (nValidationSamples >= (Int_t)trainingSetSize) {; 656 Log() << kFATAL << ""Validation size \"""" << fValidationSize; 657 << ""\"" is larger than or equal in size to training set (size=\"""" << trainingSetSize << ""\"")."" << Endl;; 658 }; 659 ; 660 return nValidationSamples;; 661}; 662 ; 663////////////////////////////////////////////////////////////////////////////////; 664 ; 665void TMVA::MethodDNN::Train(); 666{; 667 if (fInteractive && fInteractive->NotInitialized()){; 668 std::vector<TString> titles = {""Error on training set"", ""Error on test set""};; 669 fInteractive->Init(titles);; 670 // JsMVA progress bar maximum (100%); 671 fIPyMaxIter = 100;; 672 }; 673 ; 674 for (TTrainingSettings & settings : fTrainingSettings) {; 675 si",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:22390,validat,validation,22390,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['validat'],['validation']
Security,"Sumw2() has been called). The bin error for a weighted histogram is the square root of the sum of the weight square. Fit Result; The function returns a TFitResultPtr which can hold a pointer to a TFitResult object. By default the TFitResultPtr contains only the status of the fit which is return by an automatic conversion of the TFitResultPtr to an integer. One can write in this case directly:; Int_t fitStatus = h->Fit(myFunc);; myFuncDouble_t myFunc(Double_t x)Definition ROOTR.C:4; If the option ""S"" is instead used, TFitResultPtr behaves as a smart pointer to the TFitResult object. This is useful for retrieving the full result information from the fit, such as the covariance matrix, as shown in this example code:; TFitResultPtr r = h->Fit(myFunc,""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t chi2 = r->Chi2(); // to retrieve the fit chi2; Double_t par0 = r->Parameter(0); // retrieve the value for the parameter 0; Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; TMatrixTSym< Double_t >; The fit parameters, error and chi-square (but not covariance matrix) can be retrieved also directly from the fitted function that is passed to this call. Given a pointer to an associated fitted function myfunc, one can retrieve the function/fit parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:134754,access,access,134754,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['access'],['access']
Security,"Sym<Double32_t,3> >& rhs); ROOT::Math::SMatrix<Double32_t,3,3,ROOT::Math::MatRepSym<Double32_t,3> >SMatrix<Double32_t,3,3,ROOT::Math::MatRepSym<Double32_t,3> >(const Double32_t& rhs); ROOT::Math::SMatrix<Double32_t,3,3,ROOT::Math::MatRepSym<Double32_t,3> >SMatrix<Double32_t,3,3,ROOT::Math::MatRepSym<Double32_t,3> >(const ROOT::Math::SVector<Double32_t,3*(3+1)/2>& v, bool lower = true); Double32_tTrace() const; ROOT::Math::SVector<Double32_t,3*(3+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepSym<Double32_t,3>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const Double32_t& rhs) const; @name --- Operators",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:5197,access,access,5197,root/html528/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,8,['access'],"['access', 'accessing']"
Security,"Sym<Double32_t,3> >& rhs); ROOT::Math::SMatrix<Double32_t,3,3,ROOT::Math::MatRepSym<Double32_t,3> >SMatrix<Double32_t,3,3,ROOT::Math::MatRepSym<Double32_t,3> >(const Double32_t& rhs); ROOT::Math::SMatrix<Double32_t,3,3,ROOT::Math::MatRepSym<Double32_t,3> >SMatrix<Double32_t,3,3,ROOT::Math::MatRepSym<Double32_t,3> >(const ROOT::Math::SVector<Double32_t,3*(3+1)/2>& v, bool lower = true); Double32_tTrace() const; ROOT::Math::SVector<Double32_t,3*(3+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepSym<Double32_t,3>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const Double32_t& rhs) const; @name --- Operators --- ; element wis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html:5197,access,access,5197,root/html526/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepSym_Double32_t_3___.html,2,['access'],"['access', 'accessing']"
Security,"Sym<Double32_t,4> >& rhs); ROOT::Math::SMatrix<Double32_t,4,4,ROOT::Math::MatRepSym<Double32_t,4> >SMatrix<Double32_t,4,4,ROOT::Math::MatRepSym<Double32_t,4> >(const Double32_t& rhs); ROOT::Math::SMatrix<Double32_t,4,4,ROOT::Math::MatRepSym<Double32_t,4> >SMatrix<Double32_t,4,4,ROOT::Math::MatRepSym<Double32_t,4> >(const ROOT::Math::SVector<Double32_t,4*(4+1)/2>& v, bool lower = true); Double32_tTrace() const; ROOT::Math::SVector<Double32_t,4*(4+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepSym<Double32_t,4>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const Double32_t& rhs) const; @name --- Operators",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:5197,access,access,5197,root/html528/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,8,['access'],"['access', 'accessing']"
Security,"Sym<Double32_t,4> >& rhs); ROOT::Math::SMatrix<Double32_t,4,4,ROOT::Math::MatRepSym<Double32_t,4> >SMatrix<Double32_t,4,4,ROOT::Math::MatRepSym<Double32_t,4> >(const Double32_t& rhs); ROOT::Math::SMatrix<Double32_t,4,4,ROOT::Math::MatRepSym<Double32_t,4> >SMatrix<Double32_t,4,4,ROOT::Math::MatRepSym<Double32_t,4> >(const ROOT::Math::SVector<Double32_t,4*(4+1)/2>& v, bool lower = true); Double32_tTrace() const; ROOT::Math::SVector<Double32_t,4*(4+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepSym<Double32_t,4>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const Double32_t& rhs) const; @name --- Operators --- ; element wis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html:5197,access,access,5197,root/html526/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepSym_Double32_t_4___.html,2,['access'],"['access', 'accessing']"
Security,"Sym<Double32_t,5> >& rhs); ROOT::Math::SMatrix<Double32_t,5,5,ROOT::Math::MatRepSym<Double32_t,5> >SMatrix<Double32_t,5,5,ROOT::Math::MatRepSym<Double32_t,5> >(const Double32_t& rhs); ROOT::Math::SMatrix<Double32_t,5,5,ROOT::Math::MatRepSym<Double32_t,5> >SMatrix<Double32_t,5,5,ROOT::Math::MatRepSym<Double32_t,5> >(const ROOT::Math::SVector<Double32_t,5*(5+1)/2>& v, bool lower = true); Double32_tTrace() const; ROOT::Math::SVector<Double32_t,5*(5+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepSym<Double32_t,5>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const Double32_t& rhs) const; @name --- Operators",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:5197,access,access,5197,root/html528/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,8,['access'],"['access', 'accessing']"
Security,"Sym<Double32_t,5> >& rhs); ROOT::Math::SMatrix<Double32_t,5,5,ROOT::Math::MatRepSym<Double32_t,5> >SMatrix<Double32_t,5,5,ROOT::Math::MatRepSym<Double32_t,5> >(const Double32_t& rhs); ROOT::Math::SMatrix<Double32_t,5,5,ROOT::Math::MatRepSym<Double32_t,5> >SMatrix<Double32_t,5,5,ROOT::Math::MatRepSym<Double32_t,5> >(const ROOT::Math::SVector<Double32_t,5*(5+1)/2>& v, bool lower = true); Double32_tTrace() const; ROOT::Math::SVector<Double32_t,5*(5+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepSym<Double32_t,5>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const Double32_t& rhs) const; @name --- Operators --- ; element wis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html:5197,access,access,5197,root/html526/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepSym_Double32_t_5___.html,2,['access'],"['access', 'accessing']"
Security,"Sym<Double32_t,6> >& rhs); ROOT::Math::SMatrix<Double32_t,6,6,ROOT::Math::MatRepSym<Double32_t,6> >SMatrix<Double32_t,6,6,ROOT::Math::MatRepSym<Double32_t,6> >(const Double32_t& rhs); ROOT::Math::SMatrix<Double32_t,6,6,ROOT::Math::MatRepSym<Double32_t,6> >SMatrix<Double32_t,6,6,ROOT::Math::MatRepSym<Double32_t,6> >(const ROOT::Math::SVector<Double32_t,6*(6+1)/2>& v, bool lower = true); Double32_tTrace() const; ROOT::Math::SVector<Double32_t,6*(6+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepSym<Double32_t,6>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const Double32_t& rhs) const; @name --- Operators",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:5197,access,access,5197,root/html528/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,8,['access'],"['access', 'accessing']"
Security,"Sym<Double32_t,6> >& rhs); ROOT::Math::SMatrix<Double32_t,6,6,ROOT::Math::MatRepSym<Double32_t,6> >SMatrix<Double32_t,6,6,ROOT::Math::MatRepSym<Double32_t,6> >(const Double32_t& rhs); ROOT::Math::SMatrix<Double32_t,6,6,ROOT::Math::MatRepSym<Double32_t,6> >SMatrix<Double32_t,6,6,ROOT::Math::MatRepSym<Double32_t,6> >(const ROOT::Math::SVector<Double32_t,6*(6+1)/2>& v, bool lower = true); Double32_tTrace() const; ROOT::Math::SVector<Double32_t,6*(6+1)/2>UpperBlock() const. Data Members; public:. enum { kRows; kCols; kSize; };. public:. ROOT::Math::MatRepSym<Double32_t,6>fRep. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array(); return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin(); STL const_iterator interface. . const_iterator end(); STL const_iterator interface. . bool operator==(const Double32_t& rhs) const; @name --- Operators --- ; element wis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html:5197,access,access,5197,root/html526/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepSym_Double32_t_6___.html,2,['access'],"['access', 'accessing']"
Security,"T > . void TReentrantRWLock::WriteUnLock ; (; TVirtualRWMutex::Hint_t * ; ). Release the lock in write mode. ; Definition at line 217 of file TReentrantRWLock.cxx. Member Data Documentation. ◆ fCond. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::condition_variable_any ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fCond. private . ! RWlock internal condition variable ; Definition at line 287 of file TReentrantRWLock.hxx. ◆ fMutex. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . MutexT ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fMutex. private . ! RWlock internal mutex ; Definition at line 286 of file TReentrantRWLock.hxx. ◆ fReaderReservation. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::atomic<int> ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fReaderReservation. private . ! A reader wants access ; Definition at line 283 of file TReentrantRWLock.hxx. ◆ fReaders. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::atomic<int> ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fReaders. private . ! Number of readers ; Definition at line 282 of file TReentrantRWLock.hxx. ◆ fRecurseCounts. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . RecurseCountsT ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fRecurseCounts. private . ! Trackers for re-entry in the lock by the same thread. ; Definition at line 289 of file TReentrantRWLock.hxx. ◆ fWriter. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Internal::RecurseCounts> . std::atomic<bool> ROOT::TReentrantRWLock< MutexT, RecurseCountsT >::fWriter. private . ! Is there a writer? ; Definition at line 285 of file TReentrantRWLock.hxx. ◆ fWriterReservation. template<typename MutexT = ROOT::TSpinMutex, typename RecurseCountsT = Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html:5954,access,access,5954,doc/v632/classROOT_1_1TReentrantRWLock.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TReentrantRWLock.html,2,['access'],['access']
Security,"T Browser by typing:; root[1] new TBrowser(). Something like this should appear:. Figure 2: Example of TBrowser at start-up time; On the left, in the ""ROOT Files"" folder, you can find the ROOT file you have opened and our EventTree. If you see EventTree;1 and EventTree: they are identical. The first one is the tree on disk, the second the one in memory. Click your way through the tree.; Draw the ""fPosZ"" values from the browser. You should obtain a result looking like this:. Figure 3: Distribution of ""fPosZ"" values; This graph is called a histogram: it counts occurrences, combining neighboring values into ""bins"". In this case we have 100 equally sized bins (the ""steps""), ranging from x=-74 to x=102. You can tell that there were about 500 particles with a fPosZ value around -11. Histograms are a very common way to visualize data, e.g. in high energy physics.; Now close the browser, quit and restart ROOT (to make sure everybody starts from the same point).; . ‹ Meet a TTree; up; Using TTree::Draw() to access a TTree ›. Navigate through this book; Meet a TTree; Accessing a TTree With a TBrowser; Using TTree::Draw() to access a TTree; TTree and Its Data; Using a Macro to Read a TTree; Histogramming; Fit Panel; Compiling Your Code (also known as ACLiC); Accessing a TTree With a TSelector; Histogramming in a Selector; Using a TSelector with PROOF; The End. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/accessing-ttree-tbrowser.html:3045,access,access,3045,d/accessing-ttree-tbrowser.html,https://root.cern,https://root.cern/d/accessing-ttree-tbrowser.html,1,['access'],['access']
Security,"T file; class ABC : public TObject {. public:; Float_t a, b, c, p;; ABC() : a(0), b(0), c(0), p(0){};. // Define the class for the dictionary; ClassDef (ABC,1); };. // Call the ClassImp macro to give the ABC class RTTI and; // full I/O capabilities. #if !defined(__CLING__); ClassImp(ABC);; #endif; Step 2: Load the ABC class in the script.; // Check if ABC is already loaded; if (!TClass::GetDict(""ABC"")) {; gROOT->ProcessLine("".L ABCClass.C++"");; }. // Use the Class; ABC *v = new ABC;; v->p = (sqrt((v->a * v->a)+ (v->b * v->b)+(v->c * v->c)));; 16 Collection Classes; Collections are a key feature of the ROOT system. Many, if not most, of the applications you write will use collections. If you have used parameterized C++ collections or polymorphic collections before, some of this material will be review. However, much of this chapter covers aspects of collections specific to the ROOT system. When you have read this chapter, you will know. How to create instances of collections; The difference between lists, arrays, hash tables, maps, etc.; How to add and remove elements of a collection; How to search a collection for a specific element; How to access and modify collection elements; How to iterate over a collection to access collection elements; How to manage memory for collections and collection elements; How collection elements are tested for equality (IsEqual()); How collection elements are compared (Compare()) in case of sorted collections; How collection elements are hashed (Hash()) in hash tables. 16.1 Understanding Collections; A collection is a group of related objects. You will find it easier to manage a large number of items as a collection. For example, a diagram editor might manage a collection of points and lines. A set of widgets for a graphical user interface can be placed in a collection. A geometrical model can be described by collections of shapes, materials and rotation matrices. Collections can themselves be placed in collections. Collections act as ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:839412,hash,hash,839412,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['hash'],['hash']
Security,"T"" (or ""CONT0""), the option ""Z""; allows to display the color palette defined by gStyle->SetPalette(). Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",600,400);; TH2F *hcont4 = new TH2F(""hcont4"",""Option CONT4Z example "",40,-4,4,40,-20,20);; Float_t px, py;; for (Int_t i = 0; i < 25000; i++) {; gRandom->Rannor(px,py);; hcont4->Fill(px-1,5*py);; hcont4->Fill(2+0.5*px,2*py-10.,0.1);; }; gStyle->SetPalette(1);; hcont4->Draw(""CONT4Z"");; return c1;; }; The default number of contour levels is 20 equidistant levels and can be changed; with TH1::SetContour() or TStyle::SetNumberContours().; The LIST option; When option ""LIST"" is specified together with option; ""CONT"", the points used to draw the contours are saved in; TGraph objects:. h->Draw(""CONT LIST"");; gPad->Update();. The contour are saved in TGraph objects once the pad is painted.; Therefore to use this functionnality in a macro, gPad->Update(); should be performed after the histogram drawing. Once the list is; built, the contours are accessible in the following way:. TObjArray *contours = gROOT->GetListOfSpecials()->FindObject(""contours""); Int_t ncontours = contours->GetSize();; TList *list = (TList*)contours->At(i);. Where i is a contour number, and list contains a list of; TGraph objects.; For one given contour, more than one disjoint polyline may be generated.; The number of TGraphs per contour is given by:. list->GetSize();. To access the first graph in the list one should do:. TGraph *gr1 = (TGraph*)list->First();. The following example shows how to use this functionality. Picture; Source. // Getting Contours From TH2D; // Author: Josh de Bever; // CSI Medical Physics Group; // The University of Western Ontario; // London, Ontario, Canada; // Date: Oct. 22, 2004; // Modified by O.Couet (Nov. 26, 2004). Double_t SawTooth(Double_t x, Double_t WaveLen);. TCanvas *ContourList(){. const Double_t PI = TMath::Pi();. TCanvas* c = new TCanvas(""c"",""Contour List"",0,0,600,600);; c->SetRightMargin(0.15);; c->SetTopMar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THistPainter.html:40195,access,accessible,40195,root/html602/THistPainter.html,https://root.cern,https://root.cern/root/html602/THistPainter.html,1,['access'],['accessible']
Security,"T"" (or ""CONT0""), the option ""Z""; allows to display the color palette defined by gStyle->SetPalette(). Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",600,400);; TH2F *hcont4 = new TH2F(""hcont4"",""Option CONT4Z example "",40,-4,4,40,-20,20);; Float_t px, py;; for (Int_t i = 0; i < 25000; i++) {; gRandom->Rannor(px,py);; hcont4->Fill(px-1,5*py);; hcont4->Fill(2+0.5*px,2*py-10.,0.1);; }; gStyle->SetPalette(1);; hcont4->Draw(""CONT4Z"");; return c1;; }; The default number of contour levels is 20 equidistant levels and can be changed; with TH1::SetContour() or TStyle::SetNumberContours().; The LIST option; When option ""LIST"" is specified together with option; ""CONT"", the points used to draw the contours are saved in; TGraph objects:. h->Draw(""CONT LIST"");; gPad->Update();. The contour are saved in TGraph objects once the pad is painted.; Therefore to use this functionnality in a macro, gPad->Update(); should be performed after the histogram drawing. Once the list is; built, the contours are accessible in the following way:. TObjArray *contours = gROOT->GetListOfSpecials()->FindObject(""contours""); Int_t ncontours = contours->GetSize();; TList *list = (TList*)contours->At(i);. Where i is a contour number, and list contains a list of; TGraph objects.; For one given contour, more than one disjoint polyline may be generated.; The number of TGraphs per contour is given by:. list->GetSize();. To access the first graph in the list one should do:. TGraph *gr1 = (TGraph*)list->First();. The following example shows how to use this functionality. Picture; Source. // Getting Contours From TH2D; // Author: Josh de Bever; // CSI Medical Physics Group; // The University of Western Ontario; // London, Ontario, Canada; // Date: Oct. 22, 2004; // Modified by O.Couet (Nov. 26, 2004). TCanvas *ContourList(){. const Double_t PI = TMath::Pi();. TCanvas* c = new TCanvas(""c"",""Contour List"",0,0,600,600);; c->SetRightMargin(0.15);; c->SetTopMargin(0.15);. Int_t i, j, TotalConts;. Int_t nZsampl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THistPainter.html:35623,access,accessible,35623,root/html528/THistPainter.html,https://root.cern,https://root.cern/root/html528/THistPainter.html,4,['access'],['accessible']
Security,"T-latest/x86_64-slc6-gcc49-opt/setup.sh ; # on CVMFS; source /cvmfs/sft.cern.ch/lcg/views/ROOT-latest/x86_64-slc6-gcc49-opt/setup.csh. For all the other compilers (icc, clang,...) and systems; In this case we can use the script that is used by jenkins. The script expects 4 arguments:. LABEL is system OS and version. E.g. 'slc6', 'centos7', 'fedora14', 'mac1012', etc.; COMPILER is the compiler and version. E.g. 'icc16', 'clang37', 'native' (for the native compiler), etc.; BUILDTYPE is the type of the build. E.g. Release, Debug; EXTERNALS is the label for the set of versions of the externals. Typically 'ROOT-date', but 'ROOT-latest' is a safe bet. . git clone http://root.cern.ch/git/rootspi.git ; source rootspi/jenkins/jk-setup.sh slc6 icc14 Release ROOT-latest. Debugging an existing nightly build; Often when a build has failed in the nightlies we are required to debug it. The following are the instructions to get the correct environment for starting the debug session. As input you need to know the node name and the working directory in the build node (and the password of the sftnight account). You can get this information from the logs in Jenkins or CDash.; $ ssh sftnight@<node-name>; $ cd <work-directory>; $ source setup.sh; $ cd build; $ ctest -V -R <failing test>; or; $ make <failing target>. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/how-setup-root-externals-afscvmfs.html:3548,password,password,3548,d/how-setup-root-externals-afscvmfs.html,https://root.cern,https://root.cern/d/how-setup-root-externals-afscvmfs.html,1,['password'],['password']
Security,"T::Experimental::Internal::RPageStorage; Detail::RNTupleMetrics fMetrics;  ; std::string fNTupleName;  ; std::unique_ptr< RPageAllocator > fPageAllocator;  For the time being, we will use the heap allocator for all sources and sinks. This may change in the future. ;  ; RTaskScheduler * fTaskScheduler = nullptr;  . Private Attributes; RNTupleDescriptor fDescriptor;  ; std::shared_mutex fDescriptorLock;  ; REntryRange fEntryRange;  Used by the cluster pool to prevent reading beyond the given range. ;  ; bool fHasStructure = false;  Set to true once LoadStructure() is called. ;  ; bool fIsAttached = false;  Set to true once Attach() is called. ;  . Additional Inherited Members;  Public Types inherited from ROOT::Experimental::Internal::RPageStorage; using ColumnHandle_t = RColumnHandle;  The column handle identifies a column with the current open page storage. ;  ; using SealedPageSequence_t = std::deque< RSealedPage >;  ;  Static Public Attributes inherited from ROOT::Experimental::Internal::RPageStorage; static constexpr std::size_t kNBytesPageChecksum = sizeof(std::uint64_t);  The page checksum is a 64bit xxhash3. ;  . #include <ROOT/RPageStorage.hxx>. Inheritance diagram for ROOT::Experimental::Internal::RPageSource:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RPageSource() [1/3]. ROOT::Experimental::Internal::RPageSource::RPageSource ; (; std::string_view ; ntupleName, . const RNTupleReadOptions & ; fOptions . ). Definition at line 137 of file RPageStorage.cxx. ◆ RPageSource() [2/3]. ROOT::Experimental::Internal::RPageSource::RPageSource ; (; const RPageSource & ; ). delete . ◆ RPageSource() [3/3]. ROOT::Experimental::Internal::RPageSource::RPageSource ; (; RPageSource && ; ). delete . ◆ ~RPageSource(). ROOT::Experimental::Internal::RPageSource::~RPageSource ; (; ). override . Definition at line 142 of file RPageStorage.cxx. Member Function Documentation. ◆ AddColumn(). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:7582,checksum,checksum,7582,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,1,['checksum'],['checksum']
Security,"T::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::ScalarY() const; ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalary() const. Data Members; private:. ROOT::Math::Cartesian2D<Double32_t>fCoordinatesinternal coordinate system. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetXY(ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). DisplacementVector2D & operator=(const ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>& ). Assignment from a foreign 2D vector type, for example, Hep2Vector; Precondition: v must implement methods x() and y(). CoordSystem Coordinates() const; ------ Set, Get, and access coordinate data ------. Retrieve a copy of the coordinates object. DisplacementVector2D<CoordSystem, Tag>& SetCoordinates(ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar a, ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar b). Set internal data based on 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector. void GetCoordinates(ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& a, ROOT::Math::DisplacementVector2D<ROOT::Math::Cartesian2D<Double32_t>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar& b) const. get internal data into 2 Scalar numbers.; These are for example (x,y) for a cartesian vector or (r,phi) for a polar vector. { fCoordinates.GetCoordinates(a, b); }. bool operator==(const ROOT::Math::DisplacementVector2D<RO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_Double32_t__-p1DefaultCoordinateSystemTag_.html:8459,access,access,8459,root/html526/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_Double32_t__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__DisplacementVector2D_-p1Cartesian2D_Double32_t__-p1DefaultCoordinateSystemTag_.html,5,['access'],['access']
Security,"T::Math::SVector<double,3U*(3U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,3U*(3U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<Double32_t,3,3>fRep; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,3,3,ROOT::Math::MatRepStd<double,3,3> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:5596,access,access,5596,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,4,['access'],"['access', 'accessing']"
Security,"T::Math::SVector<double,4U*(4U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,4U*(4U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<Double32_t,4,4>fRep; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,4,4,ROOT::Math::MatRepStd<double,4,4> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html:5596,access,access,5596,root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_4_4_-p1MatRepStd_Double32_t_4_4___.html,4,['access'],"['access', 'accessing']"
Security,"T::Math::SVector<double,5U*(5U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,5U*(5U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<Double32_t,5,5>fRep; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,5,5,ROOT::Math::MatRepStd<double,5,5> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html:5596,access,access,5596,root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_5_5_-p1MatRepStd_Double32_t_5_5___.html,4,['access'],"['access', 'accessing']"
Security,"T::Math::SVector<double,6U*(6U+1)/2>& v, bool lower = true); doubleTrace() const; ROOT::Math::SVector<double,6U*(6U+1)/2>UpperBlock() const. Data Members; public:. ROOT::Math::MatRepStd<Double32_t,6,6>fRep; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kCols; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kRows; static ROOT::Math::SMatrix<double,6,6,ROOT::Math::MatRepStd<double,6,6> >::(anonymous)kSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SMatrix<T,D1,D2,R>& operator=(const M& rhs). Assign from another compatible matrix.; Possible Symmetirc to general but NOT vice-versa. SMatrix<T,D1,D2,R>& operator=(const Expr<A,T,D1,D2,R2>& rhs). Assign from a matrix expression. SMatrix<T,D1,D2,R> & operator=(ROOT::Math::SMatrixIdentity ). Assign from an identity matrix. T apply(unsigned int i) const; @name --- Access functions --- ; access the parse tree with the index starting from zero and; following the C convention for the order in accessing; the matrix elements.; Same convention for general and symmetric matrices. const T* Array() const; return read-only pointer to internal array. T* Array(); return pointer to internal array. iterator begin(); @name --- STL-like interface ---; The iterators access the matrix element in the order how they are; stored in memory. The C (row-major) convention is used, and in the; case of symmetric matrices the iterator spans only the lower diagonal; block. For example for a symmetric 3x3 matrices the order of the 6; elements \f${a_0,...a_5}\f$ is:; \f[; M = \left( \begin{array}{ccc}; a_0 & a_1 & a_3 \\; a_1 & a_2 & a_4 \\; a_3 & a_4 & a_5 \end{array} \right); \f]. STL iterator interface. . iterator end(); STL iterator interface. . const_iterator begin() const; STL const_iterator interface. . const_iterator end() const; STL const_iterator interface. . bool operator==(const double& rhs) const; @name --- Operators ---",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html:5596,access,access,5596,root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_6_6_-p1MatRepStd_Double32_t_6_6___.html,4,['access'],"['access', 'accessing']"
Security,"T::RegisterClassTemplate ; (; const char * ; name, . const char * ; file, . Int_t ; line . ). Global function to register the implementation file and line of a class template (i.e. ; NOT a concrete class). ; Definition at line 862 of file TClassTable.cxx. ◆ RemoveClass(). void ROOT::RemoveClass ; (; const char * ; cname). Global function called by the dtor of a class's init class (see the ClassImp macro). ; Definition at line 837 of file TClassTable.cxx. ◆ ResetClassVersion(). void ROOT::ResetClassVersion ; (; TClass * ; cl, . const char * ; cname, . Short_t ; newid . ). Global function to update the version number. ; This is called via the RootClassVersion macro.; if cl!=0 and cname==-1, set the new class version if and only is greater than the existing one and greater or equal to 2; and also ignore the request if fVersionUsed is true.; Note on class version number:; If no class has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specify via ClassDef indicates that the I/O should use the TClass checksum to distinguish the layout of the class . Definition at line 805 of file TClassTable.cxx. ◆ SetClassVersion(). template<class RootClass > . Short_t ROOT::SetClassVersion ; (; RootClass * ; ). ◆ StrReplace(). static void ROOT::StrReplace ; (; std::string & ; proc, . const std::string & ; pat, . const std::string & ; tr . ). static . Replace all accurances of given string with other string. ; Definition at line 731 of file RConversionRuleParser.cxx. ◆ ToHumanReadableSize(). template<typename value_type > . void ROOT::ToHumanReadableSize ; (; value_type ; bytes, . Bool_t ; si, . Double_t * ; coeff, . const char ** ; units . ). Return the size expressed in 'human readable' format. ; Parameters. bytesthe size in bytes to be converted ; siwhether to use the SI units or not. ; coeffreturn the size expressed in the new unit. ; unitsreturn a pointer to the string representation of the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v618/namespaceROOT.html:26996,checksum,checksum,26996,doc/v618/namespaceROOT.html,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html,1,['checksum'],['checksum']
Security,"T::RegisterClassTemplate ; (; const char * ; name, . const char * ; file, . Int_t ; line . ). Global function to register the implementation file and line of a class template (i.e. ; NOT a concrete class). ; Definition at line 862 of file TClassTable.cxx. ◆ RemoveClass(). void ROOT::RemoveClass ; (; const char * ; cname). Global function called by the dtor of a class's init class (see the ClassImp macro). ; Definition at line 837 of file TClassTable.cxx. ◆ ResetClassVersion(). void ROOT::ResetClassVersion ; (; TClass * ; cl, . const char * ; cname, . Short_t ; newid . ). Global function to update the version number. ; This is called via the RootClassVersion macro.; if cl!=0 and cname==-1, set the new class version if and only is greater than the existing one and greater or equal to 2; and also ignore the request if fVersionUsed is true.; Note on class version number:; If no class has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specify via ClassDef indicates that the I/O should use the TClass checksum to distinguish the layout of the class . Definition at line 805 of file TClassTable.cxx. ◆ SetClassVersion(). template<class RootClass > . Short_t ROOT::SetClassVersion ; (; RootClass * ; ). ◆ StrReplace(). static void ROOT::StrReplace ; (; std::string & ; proc, . const std::string & ; pat, . const std::string & ; tr . ). static . Replace all accurances of given string with other string. ; Definition at line 743 of file RConversionRuleParser.cxx. ◆ ToHumanReadableSize(). template<typename value_type > . void ROOT::ToHumanReadableSize ; (; value_type ; bytes, . Bool_t ; si, . Double_t * ; coeff, . const char ** ; units . ). Return the size expressed in 'human readable' format. ; Parameters. bytesthe size in bytes to be converted ; siwhether to use the SI units or not. ; coeffreturn the size expressed in the new unit. ; unitsreturn a pointer to the string representation of the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v620/namespaceROOT.html:27089,checksum,checksum,27089,doc/v620/namespaceROOT.html,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html,1,['checksum'],['checksum']
Security,"T::RegisterClassTemplate ; (; const char * ; name, . const char * ; file, . Int_t ; line . ). Global function to register the implementation file and line of a class template (i.e. ; NOT a concrete class). ; Definition at line 865 of file TClassTable.cxx. ◆ RemoveClass(). void ROOT::RemoveClass ; (; const char * ; cname). Global function called by the dtor of a class's init class (see the ClassImp macro). ; Definition at line 840 of file TClassTable.cxx. ◆ ResetClassVersion(). void ROOT::ResetClassVersion ; (; TClass * ; cl, . const char * ; cname, . Short_t ; newid . ). Global function to update the version number. ; This is called via the RootClassVersion macro.; if cl!=0 and cname==-1, set the new class version if and only is greater than the existing one and greater or equal to 2; and also ignore the request if fVersionUsed is true.; Note on class version number:; If no class has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specify via ClassDef indicates that the I/O should use the TClass checksum to distinguish the layout of the class . Definition at line 808 of file TClassTable.cxx. ◆ SetClassVersion(). template<class RootClass > . Short_t ROOT::SetClassVersion ; (; RootClass * ; ). ◆ StrReplace(). static void ROOT::StrReplace ; (; std::string & ; proc, . const std::string & ; pat, . const std::string & ; tr . ). static . Replace all accurances of given string with other string. ; Definition at line 743 of file RConversionRuleParser.cxx. ◆ ToHumanReadableSize(). template<typename value_type > . void ROOT::ToHumanReadableSize ; (; value_type ; bytes, . Bool_t ; si, . Double_t * ; coeff, . const char ** ; units . ). Return the size expressed in 'human readable' format. ; Parameters. bytesthe size in bytes to be converted ; siwhether to use the SI units or not. ; coeffreturn the size expressed in the new unit. ; unitsreturn a pointer to the string representation of the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v622/namespaceROOT.html:27833,checksum,checksum,27833,doc/v622/namespaceROOT.html,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html,2,['checksum'],['checksum']
Security,"T::RegisterClassTemplate ; (; const char * ; name, . const char * ; file, . Int_t ; line . ). Global function to register the implementation file and line of a class template (i.e. ; NOT a concrete class). ; Definition at line 947 of file TClassTable.cxx. ◆ RemoveClass(). void ROOT::RemoveClass ; (; const char * ; cname). Global function called by the dtor of a class's init class (see the ClassImp macro). ; Definition at line 921 of file TClassTable.cxx. ◆ ResetClassVersion(). void ROOT::ResetClassVersion ; (; TClass * ; cl, . const char * ; cname, . Short_t ; newid . ). Global function to update the version number. ; This is called via the RootClassVersion macro.; if cl!=0 and cname==-1, set the new class version if and only is greater than the existing one and greater or equal to 2; and also ignore the request if fVersionUsed is true.; Note on class version number:; If no class has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole object to be transient; The Class Version 1, unless specify via ClassDef indicates that the I/O should use the TClass checksum to distinguish the layout of the class . Definition at line 887 of file TClassTable.cxx. ◆ SetClassVersion(). template<class RootClass > . Short_t ROOT::SetClassVersion ; (; RootClass * ; ). ◆ Split(). std::vector< std::string > ROOT::Split ; (; std::string_view ; str, . std::string_view ; delims, . bool ; skipEmpty . ). Splits a string at each character in delims. ; The behavior mimics str.split from Python, Parameters. [in]strString to tokenise. ; [in]delimsOne or more delimiters used to split the string. ; [in]skipEmptyStrip empty strings from the output. . Definition at line 23 of file StringUtils.cxx. ◆ StrReplace(). static void ROOT::StrReplace ; (; std::string & ; proc, . const std::string & ; pat, . const std::string & ; tr . ). static . Replace all accurances of given string with other string. ; Definition at line 743 of file RConversionRuleParser.cxx. ◆ ToHumanReada",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v626/namespaceROOT.html:33725,checksum,checksum,33725,doc/v626/namespaceROOT.html,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html,1,['checksum'],['checksum']
Security,"TAbsolute Deviation BDT Loss Function ;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTreeA simple Binary search tree including a volume search method ;  CBinarySearchTreeNodeNode for the BinarySearch or Decision Trees ;  CBinaryTreeBase class for BinarySearch and Decision Trees ;  CCCPrunerA helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) ;  ►CCCTreeWrapper;  CCCTreeNode;  CClassificationClass to perform two class classification ;  CClassificationResultClass to save the results of the classifier ;  CClassifierFactoryThis is the MVA factory ;  CClassInfoClass that contains all the information of a class ;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfigSingleton class for global configuration settings used by TMVA ;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTestCheck for convergence ;  CCostComplexityPruneToolA class to prune a decision tree using the Cost Complexity method ;  CCrossEntropyImplementation of the CrossEntropy as separation criterion ;  CCrossValidationClass to perform cross validation, splitting the dataloader into folds ;  CCrossValidationResultClass to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation ;  CDataInputHandlerClass that contains all the data information ;  CDataLoader;  CDataSetClass that contains all the data information ;  ►CDataSetFactoryClass that contains all the data information ;  CEventStats;  CDataSetInfoClass that contains all the data information ;  CDataSetManagerClass that contains all the data information ;  CDecisionTreeImplementation of a Decision Tree ;  CDecisionTreeNode;  CDeleteFunctor_t;  CDTNodeTrainingInfo;  CEnvelopeAbstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP ;  CEvent;  CExpectedErrorPruneToolA helper class to prune a decision tree using the expected error (C4.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:77239,validat,validation,77239,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,2,['validat'],['validation']
Security,TAuthenticate.cxx. ◆ SetEnvironment(). void TAuthenticate::SetEnvironment ; (; ). private . Set default authentication environment. ; The values are inferred from fSecurity and fDetails. ; Definition at line 681 of file TAuthenticate.cxx. ◆ SetGlobalExpDate(). void TAuthenticate::SetGlobalExpDate ; (; TDatime ; expdate). static . Set default expiring date for new validity contexts. ; Definition at line 1349 of file TAuthenticate.cxx. ◆ SetGlobalPasswd(). void TAuthenticate::SetGlobalPasswd ; (; const char * ; passwd). static . Set global passwd to be used for authentication to rootd or proofd. ; Definition at line 1309 of file TAuthenticate.cxx. ◆ SetGlobalPwHash(). void TAuthenticate::SetGlobalPwHash ; (; Bool_t ; pwhash). static . Set global passwd hash flag to be used for authentication to rootd or proofd. ; Definition at line 1323 of file TAuthenticate.cxx. ◆ SetGlobalSRPPwd(). void TAuthenticate::SetGlobalSRPPwd ; (; Bool_t ; srppwd). static . Set global SRP passwd flag to be used for authentication to rootd or proofd. ; Definition at line 1331 of file TAuthenticate.cxx. ◆ SetGlobalUser(). void TAuthenticate::SetGlobalUser ; (; const char * ; user). static . Set global user name to be used for authentication to rootd or proofd. ; Definition at line 1295 of file TAuthenticate.cxx. ◆ SetGlobusAuthHook(). void TAuthenticate::SetGlobusAuthHook ; (; GlobusAuth_t ; func). static . Set Globus authorization function. ; Automatically called when libGlobusAuth is loaded. ; Definition at line 1411 of file TAuthenticate.cxx. ◆ SetKrb5AuthHook(). void TAuthenticate::SetKrb5AuthHook ; (; Krb5Auth_t ; func). static . Set kerberos5 authorization function. ; Automatically called when libKrb5Auth is loaded. ; Definition at line 1402 of file TAuthenticate.cxx. ◆ SetPromptUser(). void TAuthenticate::SetPromptUser ; (; Bool_t ; promptuser). static . Set global PromptUser flag. ; Definition at line 1385 of file TAuthenticate.cxx. ◆ SetReadHomeAuthrc(). void TAuthenticate::SetReadHome,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAuthenticate.html:38882,authenticat,authentication,38882,doc/master/classTAuthenticate.html,https://root.cern,https://root.cern/doc/master/classTAuthenticate.html,1,['authenticat'],['authentication']
Security,"TAuthenticate.cxx. ◆ SetGlobalPasswd(). void TAuthenticate::SetGlobalPasswd ; (; const char * ; passwd). static . Set global passwd to be used for authentication to rootd or proofd. ; Definition at line 1309 of file TAuthenticate.cxx. ◆ SetGlobalPwHash(). void TAuthenticate::SetGlobalPwHash ; (; Bool_t ; pwhash). static . Set global passwd hash flag to be used for authentication to rootd or proofd. ; Definition at line 1323 of file TAuthenticate.cxx. ◆ SetGlobalSRPPwd(). void TAuthenticate::SetGlobalSRPPwd ; (; Bool_t ; srppwd). static . Set global SRP passwd flag to be used for authentication to rootd or proofd. ; Definition at line 1331 of file TAuthenticate.cxx. ◆ SetGlobalUser(). void TAuthenticate::SetGlobalUser ; (; const char * ; user). static . Set global user name to be used for authentication to rootd or proofd. ; Definition at line 1295 of file TAuthenticate.cxx. ◆ SetGlobusAuthHook(). void TAuthenticate::SetGlobusAuthHook ; (; GlobusAuth_t ; func). static . Set Globus authorization function. ; Automatically called when libGlobusAuth is loaded. ; Definition at line 1411 of file TAuthenticate.cxx. ◆ SetKrb5AuthHook(). void TAuthenticate::SetKrb5AuthHook ; (; Krb5Auth_t ; func). static . Set kerberos5 authorization function. ; Automatically called when libKrb5Auth is loaded. ; Definition at line 1402 of file TAuthenticate.cxx. ◆ SetPromptUser(). void TAuthenticate::SetPromptUser ; (; Bool_t ; promptuser). static . Set global PromptUser flag. ; Definition at line 1385 of file TAuthenticate.cxx. ◆ SetReadHomeAuthrc(). void TAuthenticate::SetReadHomeAuthrc ; (; Bool_t ; readhomeauthrc). static . Set flag controlling the reading of $HOME/.rootauthrc. ; In PROOF the administrator may want to switch off private settings. Always true, may only be set false via option to proofd. ; Definition at line 1341 of file TAuthenticate.cxx. ◆ SetRSAInit(). void TAuthenticate::SetRSAInit ; (; Int_t ; init = 1). static . Static method setting RSA initialization flag. ; Definiti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAuthenticate.html:39291,authoriz,authorization,39291,doc/master/classTAuthenticate.html,https://root.cern,https://root.cern/doc/master/classTAuthenticate.html,1,['authoriz'],['authorization']
Security,"TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Unload ();  Mark 'all func' as being unloaded. ;  ; void Unload (TFunctionTemplate *func);  Mark 'func' as being unloaded. ;  ;  Public Member Functions inherited from THashList;  THashList (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashList object. ;  ;  THashList (TObject *parent, Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  For backward compatibility only. Use other ctor. ;  ; virtual ~THashList ();  Delete a hashlist. ;  ; Float_t AverageCollisions () const;  Return the average collision rate. ;  ; const TList * GetListForObject (const char *name) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; const TList * GetListForObject (const TObject *obj) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; void Rehash (Int_t newCapacity);  Rehash the hashlist. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; bool UseRWLock (Bool_t enable=true) override;  Set this collection to use a RW lock upon access, making it thread safe. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; TObject * After (const TObject *obj) const override;  Returns the object after object obj. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * Before (const TObject *obj) const override;  Returns the object before object obj. ;  ; TObject * First () const override;  Return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfFunctionTemplates.html:4208,hash,hash,4208,doc/master/classTListOfFunctionTemplates.html,https://root.cern,https://root.cern/doc/master/classTListOfFunctionTemplates.html,1,['hash'],['hash']
Security,"TBuffer &ClassDef_StreamerNVirtual_b);  ; void Unload ();  Mark 'all func' as being unloaded. ;  ; void Unload (TFunction *func);  Mark 'func' as being unloaded. ;  ;  Public Member Functions inherited from THashList;  THashList (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashList object. ;  ;  THashList (TObject *parent, Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  For backward compatibility only. Use other ctor. ;  ; virtual ~THashList ();  Delete a hashlist. ;  ; Float_t AverageCollisions () const;  Return the average collision rate. ;  ; const TList * GetListForObject (const char *name) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; const TList * GetListForObject (const TObject *obj) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; void Rehash (Int_t newCapacity);  Rehash the hashlist. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; bool UseRWLock (Bool_t enable=true) override;  Set this collection to use a RW lock upon access, making it thread safe. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; Bool_t IsAscending ();  ; TObject * Remove (const TObjLinkPtr_t &lnk);  ; void RemoveLast () override;  Remove the last object of the list. ;  ; virtual void Sort (Bool_t order=kSortAscending);  Sort linked list. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSeqCollection; virtual ~TSeqCollection ();  ; void Add (TObject *obj) override;  ; TClass * IsA () const override;  ; virtual Bool_t IsSorted () const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfFunctions.html:6225,hash,hashlist,6225,doc/master/classTListOfFunctions.html,https://root.cern,https://root.cern/doc/master/classTListOfFunctions.html,1,['hash'],['hashlist']
Security,"TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THashList;  THashList (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashList object. ;  ;  THashList (TObject *parent, Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  For backward compatibility only. Use other ctor. ;  ; virtual ~THashList ();  Delete a hashlist. ;  ; Float_t AverageCollisions () const;  Return the average collision rate. ;  ; const TList * GetListForObject (const char *name) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; const TList * GetListForObject (const TObject *obj) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; void Rehash (Int_t newCapacity);  Rehash the hashlist. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; bool UseRWLock (Bool_t enable=true) override;  Set this collection to use a RW lock upon access, making it thread safe. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; Bool_t IsAscending ();  ; TObject * Remove (const TObjLinkPtr_t &lnk);  ; void RemoveLast () override;  Remove the last object of the list. ;  ; virtual void Sort (Bool_t order=kSortAscending);  Sort linked list. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSeqCollection; virtual ~TSeqCollection ();  ; void Add (TObject *obj) override;  ; TClass * IsA () const override;  ; virtual Bool_t IsSorted () const;  ; Int_t LastIndex () const;  ; Long64_t Merge (TCollection *list);  Merge this collection with all collections coming in th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfEnumsWithLock.html:5201,access,access,5201,doc/master/classTListOfEnumsWithLock.html,https://root.cern,https://root.cern/doc/master/classTListOfEnumsWithLock.html,1,['access'],['access']
Security,"TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THashList;  THashList (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashList object. ;  ;  THashList (TObject *parent, Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  For backward compatibility only. Use other ctor. ;  ; virtual ~THashList ();  Delete a hashlist. ;  ; Float_t AverageCollisions () const;  Return the average collision rate. ;  ; const TList * GetListForObject (const char *name) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; const TList * GetListForObject (const TObject *obj) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; void Rehash (Int_t newCapacity);  Rehash the hashlist. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; bool UseRWLock (Bool_t enable=true) override;  Set this collection to use a RW lock upon access, making it thread safe. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; TObject * After (const TObject *obj) const override;  Returns the object after object obj. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * Before (const TObject *obj) const override;  Returns the object before object obj. ;  ; TObject * First () const override;  Return the first object in the list. Returns 0 when list is empty. ;  ; virtual TObjLink * FirstLink () const;  ; TObject ** GetObjectRef (const TObject *obj) const override;  Return address of pointer to obj. ;  ; Bool_t IsAscending ();  ; TObject * La",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfEnums.html:4906,access,access,4906,doc/master/classTListOfEnums.html,https://root.cern,https://root.cern/doc/master/classTListOfEnums.html,1,['access'],['access']
Security,"TClass * IsA () const;  ; virtual Bool_t IsPathLocal (const char *path);  Returns TRUE if the url in 'path' points to the local file system. ;  ; virtual Int_t Locate (const char *path, TString &endurl);  ; virtual Int_t MakeDirectory (const char *dir);  Make a directory. ;  ; virtual void * OpenDirectory (const char *dir);  Open a directory. Returns 0 if directory does not exist. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual int Unlink (const char *path);  Unlink, i.e. ;  ;  Public Member Functions inherited from TSystem;  TSystem (const char *name=""Generic"", const char *title=""Generic System"");  Create a new OS interface. ;  ; virtual ~TSystem ();  Delete the OS interface. ;  ; virtual void Abort (int code=0);  Abort the application. ;  ; virtual int AcceptConnection (int sock);  Accept a connection. ;  ; virtual Bool_t AccessPathName (const char *path, EAccessMode mode=kFileExists);  Returns FALSE if one can access a file using the specified access mode. ;  ; virtual void AddDynamicPath (const char *pathname);  Add a new directory to the dynamic path. ;  ; virtual void AddFileHandler (TFileHandler *fh);  Add a file handler to the list of system file handlers. ;  ; virtual void AddIncludePath (const char *includePath);  Add a directory to the already set include path. ;  ; virtual void AddLinkedLibs (const char *linkedLib);  Add linkedLib to already set linked libs. ;  ; virtual void AddSignalHandler (TSignalHandler *sh);  Add a signal handler to list of system signal handlers. ;  ; virtual void AddStdExceptionHandler (TStdExceptionHandler *eh);  Add an exception handler to list of system exception handlers. ;  ; virtual void AddTimer (TTimer *t);  Add timer to list of system timers. ;  ; virtual int AnnounceTcpService (int port, Bool_t reuse, int backlog, int tcpwindowsize=-1);  Announce TCP/IP service. ;  ; virtual int AnnounceUdpService (int port, int bac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDavixSystem.html:1888,access,access,1888,doc/master/classTDavixSystem.html,https://root.cern,https://root.cern/doc/master/classTDavixSystem.html,2,['access'],['access']
Security,"TClass.cxx. ◆ TClass() [5/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . EState ; theState, . Bool_t ; silent = kFALSE . ). Internal constructor, mimicing the case of a class fwd declared in the interpreter. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1179 of file TClass.cxx. ◆ TClass() [6/8]. TClass::TClass ; (; ClassInfo_t * ; classInfo, . Version_t ; cversion, . const char * ; dfil, . const char * ; ifil = nullptr, . Int_t ; dl = 0, . Int_t ; il = 0, . Bool_t ; silent = kFALSE . ). Internal constructor. ; Create a TClass object. This object contains the full dictionary of a class. It has list to baseclasses, datamembers and methods. Use this ctor to create a standalone TClass object. Most useful to get a TClass interface to an interpreted class. Used by TTabCom.; This copies the ClassInfo (i.e. does not take ownership of it).; NoteUse TClass::GetClass(""class"") to get access to a TClass object for a certain class! ; Definition at line 1224 of file TClass.cxx. ◆ TClass() [7/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . const char * ; dfil, . const char * ; ifil = nullptr, . Int_t ; dl = 0, . Int_t ; il = 0, . Bool_t ; silent = kFALSE . ). Internal constructor. ; NoteUse TClass::GetClass(""class"") to get access to a TClass object for a certain class! ; Definition at line 1275 of file TClass.cxx. ◆ TClass() [8/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il, . Bool_t ; silent = kFALSE . ). Internal constructor. ; NoteUse TClass::GetClass(""class"") to get access to a TClass object for a certain class! ; Definition at line 1304 of file TClass.cxx. ◆ ~TClass(). TClass::~TClass ; (; ). virtual . TClass dtor. Deletes all list that might have been created. ; Definition at line 1660 of file TClass.cxx. Memb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:51175,access,access,51175,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,1,['access'],['access']
Security,"TClass.cxx. ◆ TClass() [5/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . EState ; theState, . Bool_t ; silent = kFALSE . ). Internal constructor, mimicing the case of a class fwd declared in the interpreter. ; NoteUse TClass::GetClass(""ClassName"") to get access to a TClass object for a certain class! ; Definition at line 1246 of file TClass.cxx. ◆ TClass() [6/8]. TClass::TClass ; (; ClassInfo_t * ; classInfo, . Version_t ; cversion, . const char * ; dfil, . const char * ; ifil = nullptr, . Int_t ; dl = 0, . Int_t ; il = 0, . Bool_t ; silent = kFALSE . ). Internal constructor. ; Create a TClass object. This object contains the full dictionary of a class. It has list to baseclasses, datamembers and methods. Use this ctor to create a standalone TClass object. Most useful to get a TClass interface to an interpreted class. Used by TTabCom.; This copies the ClassInfo (i.e. does not take ownership of it).; NoteUse TClass::GetClass(""class"") to get access to a TClass object for a certain class! ; Definition at line 1291 of file TClass.cxx. ◆ TClass() [7/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . const char * ; dfil, . const char * ; ifil = nullptr, . Int_t ; dl = 0, . Int_t ; il = 0, . Bool_t ; silent = kFALSE . ). Internal constructor. ; NoteUse TClass::GetClass(""class"") to get access to a TClass object for a certain class! ; Definition at line 1342 of file TClass.cxx. ◆ TClass() [8/8]. TClass::TClass ; (; const char * ; name, . Version_t ; cversion, . const std::type_info & ; info, . TVirtualIsAProxy * ; isa, . const char * ; dfil, . const char * ; ifil, . Int_t ; dl, . Int_t ; il, . Bool_t ; silent = kFALSE . ). Internal constructor. ; NoteUse TClass::GetClass(""class"") to get access to a TClass object for a certain class! ; Definition at line 1371 of file TClass.cxx. ◆ ~TClass(). TClass::~TClass ; (; ). virtual . TClass dtor. Deletes all list that might have been created. ; Definition at line 1727 of file TClass.cxx. Memb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass.html:51176,access,access,51176,doc/master/classTClass.html,https://root.cern,https://root.cern/doc/master/classTClass.html,1,['access'],['access']
Security,"TClass::DetermineCurrentStreamerInfoTVirtualStreamerInfo * DetermineCurrentStreamerInfo()Determine and set pointer to current TVirtualStreamerInfo.Definition TClass.cxx:5684; TClass::Browsevoid Browse(TBrowser *b) overrideThis method is called by a browser to get the class information.Definition TClass.cxx:2010; TClass::GetStateEState GetState() constDefinition TClass.h:488; TClass::GetCollectionTypeROOT::ESTLType GetCollectionType() constReturn the 'type' of the STL the TClass is representing.Definition TClass.cxx:2886; TClass::Drawvoid Draw(Option_t *option="""") overrideDraw detailed class inheritance structure.Definition TClass.cxx:2487; TClass::AdoptMemberStreamervoid AdoptMemberStreamer(const char *name, TMemberStreamer *strm)Adopt the TMemberStreamer pointer to by p and use it to Stream non basic member name.Definition TClass.cxx:6703; TClass::ResetInstanceCountvoid ResetInstanceCount()Definition TClass.h:547; TClass::GetStreamerFuncClassStreamerFunc_t GetStreamerFunc() constGet a wrapper/accessor function around this class custom streamer (member function).Definition TClass.cxx:2939; TClass::RemoveStreamerInfovoid RemoveStreamerInfo(Int_t slot)Remove and delete the StreamerInfo in the given slot.Definition TClass.cxx:7320; TClass::SetCanSplitvoid SetCanSplit(Int_t splitmode)Set the splitability of this class:Definition TClass.cxx:5658; TClass::CreateListOfDataMembersTList * CreateListOfDataMembers(std::atomic< TListOfDataMembers * > &data, TDictionary::EMemberSelection selection, bool load)Create the list containing the TDataMembers (of actual data members or members pulled in through usin...Definition TClass.cxx:3741; TClass::GetStreamerInfoAbstractEmulatedTVirtualStreamerInfo * GetStreamerInfoAbstractEmulated(Int_t version=0) constFor the case where the requestor class is emulated and this class is abstract, returns a pointer to t...Definition TClass.cxx:4709; TClass::Newvoid * New(ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) constReturn a pointer ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:310916,access,accessor,310916,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['access'],['accessor']
Security,"TClass::DetermineCurrentStreamerInfoTVirtualStreamerInfo * DetermineCurrentStreamerInfo()Determine and set pointer to current TVirtualStreamerInfo.Definition TClass.cxx:5751; TClass::Browsevoid Browse(TBrowser *b) overrideThis method is called by a browser to get the class information.Definition TClass.cxx:2077; TClass::GetStateEState GetState() constDefinition TClass.h:488; TClass::GetCollectionTypeROOT::ESTLType GetCollectionType() constReturn the 'type' of the STL the TClass is representing.Definition TClass.cxx:2953; TClass::Drawvoid Draw(Option_t *option="""") overrideDraw detailed class inheritance structure.Definition TClass.cxx:2554; TClass::AdoptMemberStreamervoid AdoptMemberStreamer(const char *name, TMemberStreamer *strm)Adopt the TMemberStreamer pointer to by p and use it to Stream non basic member name.Definition TClass.cxx:6770; TClass::ResetInstanceCountvoid ResetInstanceCount()Definition TClass.h:547; TClass::GetStreamerFuncClassStreamerFunc_t GetStreamerFunc() constGet a wrapper/accessor function around this class custom streamer (member function).Definition TClass.cxx:3006; TClass::RemoveStreamerInfovoid RemoveStreamerInfo(Int_t slot)Remove and delete the StreamerInfo in the given slot.Definition TClass.cxx:7387; TClass::SetCanSplitvoid SetCanSplit(Int_t splitmode)Set the splitability of this class:Definition TClass.cxx:5725; TClass::CreateListOfDataMembersTList * CreateListOfDataMembers(std::atomic< TListOfDataMembers * > &data, TDictionary::EMemberSelection selection, bool load)Create the list containing the TDataMembers (of actual data members or members pulled in through usin...Definition TClass.cxx:3808; TClass::GetStreamerInfoAbstractEmulatedTVirtualStreamerInfo * GetStreamerInfoAbstractEmulated(Int_t version=0) constFor the case where the requestor class is emulated and this class is abstract, returns a pointer to t...Definition TClass.cxx:4776; TClass::Newvoid * New(ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) constReturn a pointer ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:313554,access,accessor,313554,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['access'],['accessor']
Security,"TClassRec * FindElement(const char* cname, Bool_t insert = kFALSE); Find a class by name in the class table (using hash of name). Returns; 0 if the class is not in the table. Unless arguments insert is true in; which case a new entry is created and returned.; cname can be any spelling of the class name. See FindElementImpl if the; name is already normalized. Version_t GetID(const char* cname); Returns the ID of a class. Int_t GetPragmaBits(const char* name); Returns the pragma bits as specified in the LinkDef.h file. DictFuncPtr_t GetDict(const char* cname); Given the class name returns the Dictionary() function of a class; (uses hash of name). DictFuncPtr_t GetDict(const type_info& info); Given the type_info returns the Dictionary() function of a class; (uses hash of type_info::name()). DictFuncPtr_t GetDictNorm(const char* cname); Given the normalized class name returns the Dictionary() function of a class; (uses hash of name). TProtoClass * GetProto(const char* cname); Given the class name returns the TClassProto object for the class.; (uses hash of name). TProtoClass * GetProtoNorm(const char* cname); Given the class normalized name returns the TClassProto object for the class.; (uses hash of name). char * Next(); Returns next class from sorted class table. Don't use this iterator; while modifying the class table. The class table can be modified; when making calls like TClass::GetClass(), etc. void PrintTable(); Print the class table. Before printing the table is sorted; alphabetically. void SortTable(); Sort the class table by ascending class ID's. void Terminate(); Deletes the class table (this static class function calls the dtor). TClassTable(). » Author: Fons Rademakers 11/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-06-02 15:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TClassTable.html:9999,hash,hash,9999,root/html604/TClassTable.html,https://root.cern,https://root.cern/root/html604/TClassTable.html,2,['hash'],['hash']
Security,"TClassRec * FindElement(const char* cname, Bool_t insert = kFALSE); Find a class by name in the class table (using hash of name). Returns; 0 if the class is not in the table. Unless arguments insert is true in; which case a new entry is created and returned.; cname can be any spelling of the class name. See FindElementImpl if the; name is already normalized. Version_t GetID(const char* cname); Returns the ID of a class. Int_t GetPragmaBits(const char* name); Returns the pragma bits as specified in the LinkDef.h file. DictFuncPtr_t GetDict(const char* cname); Given the class name returns the Dictionary() function of a class; (uses hash of name). DictFuncPtr_t GetDict(const type_info& info); Given the type_info returns the Dictionary() function of a class; (uses hash of type_info::name()). DictFuncPtr_t GetDictNorm(const char* cname); Given the normalized class name returns the Dictionary() function of a class; (uses hash of name). TProtoClass * GetProto(const char* cname); Given the class name returns the TClassProto object for the class.; (uses hash of name). TProtoClass * GetProtoNorm(const char* cname); Given the class normalized name returns the TClassProto object for the class.; (uses hash of name). char * Next(); Returns next class from sorted class table. Don't use this iterator; while modifying the class table. The class table can be modified; when making calls like TClass::GetClass(), etc. void PrintTable(); Print the class table. Before printing the table is sorted; alphabetically. void SortTable(); Sort the class table by ascending class ID's. void Terminate(); Deletes the class table (this static class function calls the dtor). TClassTable(). » Author: Fons Rademakers 11/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-06-30 14:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClassTable.html:9999,hash,hash,9999,root/html602/TClassTable.html,https://root.cern,https://root.cern/root/html602/TClassTable.html,2,['hash'],['hash']
Security,"TDataSetManagerFile::GetStageOpts ; (; ); const. inline . Definition at line 95 of file TDataSetManagerFile.h. ◆ Init(). void TDataSetManagerFile::Init ; (; ). protected . Do the real inititialization. ; Definition at line 93 of file TDataSetManagerFile.cxx. ◆ InitLocalCache(). void TDataSetManagerFile::InitLocalCache ; (; ). private . Init the local cache if required. ; Definition at line 234 of file TDataSetManagerFile.cxx. ◆ IsA(). TClass * TDataSetManagerFile::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TDataSetManager.; Definition at line 100 of file TDataSetManagerFile.h. ◆ NotifyUpdate(). Int_t TDataSetManagerFile::NotifyUpdate ; (; const char * ; group, . const char * ; user, . const char * ; dsName, . Long_t ; mtime, . const char * ; checksum = 0 . ). overridevirtual . Save into the <datasetdir>/kDataSet_DataSetList file the name of the updated or created or modified dataset. ; For still existing datasets, fill the modification date in seconds anf the checksum. Returns 0 on success, -1 on error ; Reimplemented from TDataSetManager.; Definition at line 382 of file TDataSetManagerFile.cxx. ◆ ParseInitOpts(). void TDataSetManagerFile::ParseInitOpts ; (; const char * ; ins). overridevirtual . Parse the input string and set the init bits accordingly Format is dir:<datasetdir> [mss:<mss-url>] [opt:<base-options>] The <datasetdir> is mandatory. ; See TDataSetManager::ParseInitOpts for the available base options. The base options are already initialized by the base constructor ; Reimplemented from TDataSetManager.; Definition at line 317 of file TDataSetManagerFile.cxx. ◆ RegisterDataSet(). Int_t TDataSetManagerFile::RegisterDataSet ; (; const char * ; uri, . TFileCollection * ; newDataSet, . const char * ; opts . ). overridevirtual . Register a dataset, perfoming quota checkings and verification, if required. ; If a dataset with the same name already exists the action fails unless 'opts' contains 'O', in w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataSetManagerFile.html:30628,checksum,checksum,30628,doc/master/classTDataSetManagerFile.html,https://root.cern,https://root.cern/doc/master/classTDataSetManagerFile.html,1,['checksum'],['checksum']
Security,"TDictionary * GetDictionary (const std::type_info &typeinfo);  ; static bool WantsRegularMembers (EMemberSelection sel);  ; static bool WantsUsingDecls (EMemberSelection sel);  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; TVirtualStreamerInfo * FindStreamerInfo (TObjArray *arr, UInt_t checksum) const;  Find the TVirtualStreamerInfo in the StreamerInfos corresponding to checksum. ;  ; void GetMissingDictionariesForBaseClasses (TCollection &result, TCollection &visited, bool recurse);  Verify the base classes always. ;  ; void GetMissingDictionariesForMembers (TCollection &result, TCollection &visited, bool recurse);  Verify the Data Members. ;  ; void GetMissingDictionariesForPairElements (TCollection &result, TCollection &visited, bool recurse);  ; void GetMissingDictionariesWithRecursionCheck (TCollection &result, TCollection &visited, bool recurse);  From the second level of recursion onwards it is different state check. ;  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:37409,checksum,checksum,37409,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,4,['checksum'],['checksum']
Security,"TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TDirectoryFile::fKeysPointer to keys list in memory; TList*TDirectory::fListList of objects in memory; Bool_tTDirectoryFile::fModifiedtrue if directory has been modified; TObject*TDirectory::fMotherpointer to mother of the directory; TStringTNamed::fNameobject identifier; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Bool_tTDirectoryFile::fWritabletrue if directory is writable; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void InternalAppend(TObject* obj); Internal access to TDirectory append method. void Add(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. void Append(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. WSDir(const char* name, const char* title, RooWorkspace* wspace). virtual ~WSDir(); { Clear(""nodelete"") ; }. » Last changed: Mon Dec 7 13:49:52 2009 » Last generated: 2009-12-07 13:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooWorkspace__WSDir.html:12631,access,access,12631,root/html526/RooWorkspace__WSDir.html,https://root.cern,https://root.cern/root/html526/RooWorkspace__WSDir.html,1,['access'],['access']
Security,"TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TDirectoryFile::fKeysPointer to keys list in memory; TList*TDirectory::fListList of objects in memory; Bool_tTDirectoryFile::fModifiedtrue if directory has been modified; TObject*TDirectory::fMotherpointer to mother of the directory; TStringTNamed::fNameobject identifier; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Bool_tTDirectoryFile::fWritabletrue if directory is writable; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void InternalAppend(TObject* obj); Internal access to TDirectory append method. void Add(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. void Append(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. WSDir(const char* name, const char* title, RooWorkspace* wspace). virtual ~WSDir(); { Clear(""nodelete"") ; }. » Last changed: Mon Jul 4 15:24:51 2011 » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooWorkspace__WSDir.html:12682,access,access,12682,root/html530/RooWorkspace__WSDir.html,https://root.cern,https://root.cern/root/html530/RooWorkspace__WSDir.html,1,['access'],['access']
Security,"TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TDirectoryFile::fKeysPointer to keys list in memory; TList*TDirectory::fListList of objects in memory; Bool_tTDirectoryFile::fModifiedtrue if directory has been modified; TObject*TDirectory::fMotherpointer to mother of the directory; TStringTNamed::fNameobject identifier; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Bool_tTDirectoryFile::fWritabletrue if directory is writable; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void InternalAppend(TObject* obj); Internal access to TDirectory append method. void Add(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. void Append(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. WSDir(const char* name, const char* title, RooWorkspace* wspace). virtual ~WSDir(); { Clear(""nodelete"") ; }. » Last changed: Thu Nov 3 20:10:09 2011 » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooWorkspace__WSDir.html:12837,access,access,12837,root/html532/RooWorkspace__WSDir.html,https://root.cern,https://root.cern/root/html532/RooWorkspace__WSDir.html,1,['access'],['access']
Security,"TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TDirectoryFile::fKeysPointer to keys list in memory; TList*TDirectory::fListList of objects in memory; Bool_tTDirectoryFile::fModifiedtrue if directory has been modified; TObject*TDirectory::fMotherpointer to mother of the directory; TStringTNamed::fNameobject identifier; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Bool_tTDirectoryFile::fWritabletrue if directory is writable; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void InternalAppend(TObject* obj); Internal access to TDirectory append method. void Add(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. void Append(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. WSDir(const char* name, const char* title, RooWorkspace* wspace). virtual ~WSDir(); { Clear(""nodelete"") ; }. » Last changed: Wed Dec 8 11:39:40 2010 » Last generated: 2010-12-08 11:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooWorkspace__WSDir.html:12613,access,access,12613,root/html528/RooWorkspace__WSDir.html,https://root.cern,https://root.cern/root/html528/RooWorkspace__WSDir.html,1,['access'],['access']
Security,"TDocParser::ExpandCPPLine ; (; TString & ; line, . Ssiz_t & ; pos . ). protectedvirtual . Expand preprocessor statements. ; Input: line - line containing the CPP statement, pos - position of '#'; NOTE: Looks for the #include statements and creates link to the corresponding file if such file exists ; Definition at line 911 of file TDocParser.cxx. ◆ GetCurrentClass(). TClass * TDocParser::GetCurrentClass ; (; ); const. inline . Definition at line 171 of file TDocParser.h. ◆ GetCurrentModule(). void TDocParser::GetCurrentModule ; (; TString & ; out_module); const. Return the name of module for which sources are currently parsed. ; Definition at line 967 of file TDocParser.cxx. ◆ GetDataMembers(). const TList * TDocParser::GetDataMembers ; (; EAccess ; access); const. inline . Definition at line 175 of file TDocParser.h. ◆ GetDocOutput(). TDocOutput * TDocParser::GetDocOutput ; (; ); const. inline . Definition at line 173 of file TDocParser.h. ◆ GetEnums(). const TList * TDocParser::GetEnums ; (; EAccess ; access); const. inline . Definition at line 176 of file TDocParser.h. ◆ GetLineNumber(). Long_t TDocParser::GetLineNumber ; (; ); const. inline . Definition at line 174 of file TDocParser.h. ◆ GetMethods(). const TList * TDocParser::GetMethods ; (; EAccess ; access); const. inline . Definition at line 170 of file TDocParser.h. ◆ GetSourceInfo(). const char * TDocParser::GetSourceInfo ; (; ESourceInfo ; type); const. inline . Definition at line 177 of file TDocParser.h. ◆ HandleDirective(). Bool_t TDocParser::HandleDirective ; (; TString & ; keyword, . Ssiz_t & ; pos, . TString & ; word, . Ssiz_t & ; copiedToCommentUpTo . ). protectedvirtual . Process directives to the documentation engine, like ""Begin_Html"" / ""End_Html"", ""Begin_Macro"" / ""End_Macro"", and ""Begin_Latex"" / ""End_Latex"". ; Definition at line 977 of file TDocParser.cxx. ◆ InContext(). UInt_t TDocParser::InContext ; (; Int_t ; context); const. checks whether we are in a parse context, return the entry closest",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocParser.html:22790,access,access,22790,doc/master/classTDocParser.html,https://root.cern,https://root.cern/doc/master/classTDocParser.html,1,['access'],['access']
Security,"TFile::Open() function:; TFile *TFile::Open(const Text_t *name,Option_t *option="""",; const Text_t *title="""",Int_t compress,Int_t netopt); Depending on the name argument, the function returns a TFile or one of its derivations, for example a TNetXNGFile or a TDavixFile object. In case a URL specifies a local file, a TFile object will be returned (and of course no login information is needed). The arguments of the Open() function are the same as the ones for the TFile constructor.; Using ReOpen() method it is possible to reopen a file with a different access mode, like from READ to UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the mode argument can be either “READ” or “UPDATE”. The method returns:. 0 in case the mode was successfully modified;; 1 in case the mode did not change (it was already as requested or there were wrong input arguments);; -1 in case of failure. In the last case the file cannot be used anymore. 11.7 Remotely Access to ROOT Files; ROOT files can be accessed remotely in many ways, on the base of the protocol URL. Among the most popular are XRootD (protocols ‘root://’ and ‘xrd://’) and a Web server (protocl ‘http://’ or ‘https://’).; The rootd daemon is deprecated and has been removed in version 6.16/00.; Please refer to the XRootD documentation for starting and ensuring that such a daemon is running.; Reading and writing ROOT files over the net can be done by creating a TFile object using the static method TFile::Open() object. This will instantiate the appropriate derivation of TFile to handle the request. Inheriting from the TFile class, the returned instance will have exactly the same interface and behavior of TFile. The only difference is that it reads and writes from a remote service. In the example below the file is read via a web server through the TDavixFile plug-in.; 11.7.1 A Simple Session; root[] TFile *f1 = TFile::Open(""local/file.root"",""update""); root[] TFile *f2 = TFile::Open(""root://my.server.org/data/file.root"",""new""); ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:515971,access,accessed,515971,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['access'],['accessed']
Security,"TFile::fgCacheFileForceIndicates, to force all READ to CACHEREAD; static Long64_tTFile::fgFileCounterCounter for all opened files; static Bool_tTFile::fgOnlyStagedBefore the file is opened, it is checked, that the file is staged, if not, the open fails; static UInt_tTFile::fgOpenTimeoutTimeout for open operations in ms - 0 corresponds to blocking i/o; static Int_tTFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size. private:. TDCacheFile::stat64fStatBuffer! (transient) Cached file status buffer (for performance); Bool_tfStatCached! (transient) is file status cached?. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDCacheFile(const char* path, Option_t* option = """", const char* ftitle = """", Int_t compress = 1); Create a dCache file object. A dCache file is the same as a TFile; except that it is being accessed via a dCache server. The url; argument must be of the form: dcache:/pnfs/<path>/<file>.root or; dcap://<nodename.org>/<path>/<file>.root. If the file specified in the; URL does not exist, is not accessable or can not be created the kZombie; bit will be set in the TDCacheFile object. Use IsZombie() to see if the; file is accessable. For a description of the option and other arguments; see the TFile ctor. The preferred interface to this constructor is; via TFile::Open(). ~TDCacheFile(); Close and cleanup dCache file. Bool_t ReadBuffer(char* buf, Int_t len); Read specified byte range from remote file via dCache daemon.; Returns kTRUE in case of error. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read specified byte range from remote file via dCache daemon.; Returns kTRUE in case of error. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDCacheFile.html:22480,access,accessed,22480,root/html528/TDCacheFile.html,https://root.cern,https://root.cern/root/html528/TDCacheFile.html,3,['access'],['accessed']
Security,"TFile::fgCacheFileForceIndicates, to force all READ to CACHEREAD; static Long64_tTFile::fgFileCounterCounter for all opened files; static Bool_tTFile::fgOnlyStagedBefore the file is opened, it is checked, that the file is staged, if not, the open fails; static UInt_tTFile::fgOpenTimeoutTimeout for open operations in ms - 0 corresponds to blocking i/o; static Int_tTFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size. private:. TDCacheFile::stat64fStatBuffer! (transient) Cached file status buffer (for performance); Bool_tfStatCached! (transient) is file status cached?. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDCacheFile(const char* path, Option_t* option = """", const char* ftitle = """", Int_t compress = 1); Create a dCache file object. A dCache file is the same as a TFile; except that it is being accessed via a dCache server. The url; argument must be of the form: dcache:/pnfs/<path>/<file>.root or; dcap://<nodename.org>/<path>/<file>.root. If the file specified in the; URL does not exist, is not accessable or can not be created the kZombie; bit will be set in the TDCacheFile object. Use IsZombie() to see if the; file is accessable. For a description of the option and other arguments; see the TFile ctor. The preferred interface to this constructor is; via TFile::Open(). ~TDCacheFile(); Close and cleanup dCache file. Bool_t ReadBuffer(char* buf, Int_t len); Read specified byte range from remote file via dCache daemon.; Returns kTRUE in case of error. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer.; This function is overloaded by TNetFile, TWebFile, etc.; Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TDCacheFile.html:22380,access,accessed,22380,root/html526/TDCacheFile.html,https://root.cern,https://root.cern/root/html526/TDCacheFile.html,1,['access'],['accessed']
Security,"TFolder<div class=""legacybox""><h2>Legacy Code</h2> TFolder is a legacy interface: there will be no bug fixes...Definition TFolder.h:30; TFunctionTemplateDictionary for function template This class describes one single function template.Definition TFunctionTemplate.h:26; TFunctionGlobal functions class (global functions are obtained from CINT).Definition TFunction.h:30; TGlobalMappedFunctionDefinition TGlobal.h:53; TGlobalGlobal variables class (global variables are obtained from CINT).Definition TGlobal.h:28; TInterpreterThis class defines an abstract interface to a generic command line interpreter.Definition TInterpreter.h:60; TListOfDataMembersA collection of TDataMember objects designed for fast access given a DeclId_t and for keep track of T...Definition TListOfDataMembers.h:33; TListOfEnumsA collection of TEnum objects designed for fast access given a DeclId_t and for keep track of TEnum t...Definition TListOfEnums.h:33; TListOfFunctionTemplatesA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFu...Definition TListOfFunctionTemplates.h:35; TListOfFunctionsA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFu...Definition TListOfFunctions.h:35; TListA doubly linked list.Definition TList.h:38; TNamed::fNameTString fNameDefinition TNamed.h:32; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::GetUniqueIDvirtual UInt_t GetUniqueID() constReturn the unique object id.Definition TObject.cxx:457; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:780; TObject::SetUniqueIDvirtual void SetUniqueID(UInt_t uid)Set the unique object id.Definition TObject.cxx:791; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TPluginManagerThis class implements a plugin library manager.Definition TPlu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8h_source.html:23858,access,access,23858,doc/v632/TROOT_8h_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8h_source.html,1,['access'],['access']
Security,"TFolder<div class=""legacybox""><h2>Legacy Code</h2> TFolder is a legacy interface: there will be no bug fixes...Definition TFolder.h:30; TFunctionTemplateDictionary for function template This class describes one single function template.Definition TFunctionTemplate.h:26; TFunctionGlobal functions class (global functions are obtained from CINT).Definition TFunction.h:30; TGlobalMappedFunctionDefinition TGlobal.h:53; TGlobalGlobal variables class (global variables are obtained from CINT).Definition TGlobal.h:28; TInterpreterThis class defines an abstract interface to a generic command line interpreter.Definition TInterpreter.h:60; TListOfDataMembersA collection of TDataMember objects designed for fast access given a DeclId_t and for keep track of T...Definition TListOfDataMembers.h:33; TListOfEnumsA collection of TEnum objects designed for fast access given a DeclId_t and for keep track of TEnum t...Definition TListOfEnums.h:33; TListOfFunctionTemplatesA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFu...Definition TListOfFunctionTemplates.h:35; TListOfFunctionsA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFu...Definition TListOfFunctions.h:35; TListA doubly linked list.Definition TList.h:38; TNamed::fNameTString fNameDefinition TNamed.h:32; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::GetUniqueIDvirtual UInt_t GetUniqueID() constReturn the unique object id.Definition TObject.cxx:462; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::SetUniqueIDvirtual void SetUniqueID(UInt_t uid)Set the unique object id.Definition TObject.cxx:797; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TPluginManagerThis class implements a plugin library manager.Definition TPlu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8h_source.html:23857,access,access,23857,doc/master/TROOT_8h_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8h_source.html,1,['access'],['access']
Security,"TGClient;  CTGCocoaThis class implements TVirtualX interface for MacOS X, using Cocoa and Quartz 2D ;  CTGColorDialog;  CTGColorFrame;  CTGColorPalette;  CTGColorPick;  CTGColorPopup;  CTGColorSelect;  CTGColumnLayout;  CTGComboBox;  CTGComboBoxPopup;  CTGCommandPlugin;  CTGCompositeFrame;  CTGContainer;  CTGDimension;  CTGDMAssignmentHelper;  CTGDMLBaseTGDMMapHelper;  CTGDMLParse;  CTGDMLRefl;  ►CTGDMLWrite;  CNameLst;  CStructLst;  CXyz;  CTGDMMapHelper;  CTGDNDManager;  CTGDockableFrame;  CTGDockButton;  CTGDockHideButton;  CTGDoubleHSlider;  CTGDoubleSlider;  CTGDoubleVSlider;  CTGDragWindow;  CTGedEditor;  ►CTGedFrame;  CTGedSubFrame;  CTGedMarkerPopup;  CTGedMarkerSelect;  CTGedNameFrame;  CTGedPatternFrame;  CTGedPatternPopup;  CTGedPatternSelect;  CTGedPatternSelector;  CTGedPopup;  CTGedSelect;  ►CTGenCollectionProxyProxy around an arbitrary container, which implements basic functionality and iteration ;  CMethodSmall helper to execute (compiler) generated function for the access to STL or other containers ;  CMethod0;  CStreamHelperHelper class to facilitate I/O ;  CTStagingSmall helper to stage the content of an associative container when reading and before inserting it in the actual collection ;  CValueSmall helper to describe the Value_type or the key_type of an STL container ;  CTGenCollectionStreamer;  CTGenerator;  ►CTGenericCollectionIterator;  CRegularIterator;  CVectorIterator;  ►CTGenericTable;  Citerator;  CTGenPhaseSpace;  CTGeoArb8;  CTGeoAtt;  ►CTGeoBatemanSol;  CBtCoef_t;  CTGeoBBox;  CTGeoBBoxEditor;  ►CTGeoBoolNode;  CThreadData_t;  CTGeoBranchArray;  CTGeoBuilder;  CTGeoCacheState;  CTGeoChecker;  CTGeoCombiTrans;  CTGeoCombiTransEditor;  CTGeoCompositeShape;  CTGeoCone;  CTGeoConeEditor;  CTGeoConeSeg;  CTGeoConeSegEditor;  CTGeoCtub;  CTGeoCtubEditor;  CTGeoDecayChannel;  CTGeoElement;  CTGeoElementRN;  CTGeoElementTable;  CTGeoElemIter;  CTGeoEltu;  CTGeoEltuEditor;  CTGeoExtension;  CTGeoGedFrame;  CTGeoGenTrans;  CTGeoGlobalMagField; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:117861,access,access,117861,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,1,['access'],['access']
Security,"TGClient;  CTGCocoaThis class implements TVirtualX interface for MacOS X, using Cocoa and Quartz 2D ;  CTGColorDialog;  CTGColorFrame;  CTGColorPalette;  CTGColorPick;  CTGColorPopup;  CTGColorSelect;  CTGColumnLayout;  CTGComboBox;  CTGComboBoxPopup;  CTGCommandPlugin;  CTGCompositeFrame;  CTGContainer;  CTGDimension;  CTGDMAssignmentHelper;  CTGDMLBaseTGDMMapHelper;  CTGDMLParse;  CTGDMLRefl;  ►CTGDMLWrite;  CNameLst;  CStructLst;  CXyz;  CTGDMMapHelper;  CTGDNDManager;  CTGDockableFrame;  CTGDockButton;  CTGDockHideButton;  CTGDoubleHSlider;  CTGDoubleSlider;  CTGDoubleVSlider;  CTGDragWindow;  CTGedEditor;  ►CTGedFrame;  CTGedSubFrame;  CTGedMarkerPopup;  CTGedMarkerSelect;  CTGedNameFrame;  CTGedPatternFrame;  CTGedPatternPopup;  CTGedPatternSelect;  CTGedPatternSelector;  CTGedPopup;  CTGedSelect;  ►CTGenCollectionProxyProxy around an arbitrary container, which implements basic functionality and iteration ;  CMethodSmall helper to execute (compiler) generated function for the access to STL or other containers ;  CMethod0;  CStreamHelperHelper class to facilitate I/O ;  CTStagingSmall helper to stage the content of an associative container when reading and before inserting it in the actual collection ;  CValueSmall helper to describe the Value_type or the key_type of an STL container ;  CTGenCollectionStreamer;  CTGeneratorThe interface to various event generators ;  ►CTGenericCollectionIterator;  CRegularIterator;  CVectorIterator;  ►CTGenericTable;  Citerator;  CTGenPhaseSpaceUtility class to generate n-body event, with constant cross-section (default) or with Fermi energy dependence (opt=""Fermi"") ;  CTGeoArb8An arbitrary trapezoid with less than 8 vertices standing on ;  CTGeoAttVisualization and tracking attributes for volumes and nodes ;  ►CTGeoBatemanSol;  CBtCoef_t;  CTGeoBBoxBox class ;  CTGeoBBoxEditor;  ►CTGeoBoolNodeBase class for Boolean operations between two shapes ;  CThreadData_t;  CTGeoBranchArrayAn array of daughter indices making a geometry pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:140804,access,access,140804,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,2,['access'],['access']
Security,"TGHtmlTable *pTable, int flags);  Return text and images from a table as lists. ;  ; void UnderlineLinks (int onoff);  Set/reset html links underline. ;  ;  Public Member Functions inherited from TGView;  TGView (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, Int_t id=-1, UInt_t xMargin=0, UInt_t yMargin=0, UInt_t options=kSunkenFrame|kDoubleBorder, UInt_t sboptions=0, Pixel_t back=GetWhitePixel());  Create an editor view, containing an TGEditorFrame and (optionally) a horizontal and vertical scrollbar. ;  ;  ~TGView () override;  Delete view. ;  ; void ChangeBackground (Pixel_t) override;  Change background color of the canvas frame. ;  ; void Clear (Option_t *="""") override;  Clear view. ;  ; void DrawBorder () override;  Draw the border of the text edit widget. ;  ; TGViewFrame * GetCanvas () const;  ; TGDimension GetDefaultSize () const override;  std::cout << fWidth << ""x"" << fHeight << std::endl; ;  ; TGLongPosition GetScrollPosition () const;  ; TGLongPosition GetScrollValue () const;  ; const TGGC & GetViewWhiteGC ();  ; TGDimension GetVirtualSize () const;  ; Bool_t HandleButton (Event_t *event) override;  handle button ;  ; Bool_t HandleExpose (Event_t *event) override;  Handle expose events. ;  ; TClass * IsA () const override;  ; void Layout () override;  layout view ;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process scrollbar messages. ;  ; virtual void ScrollCanvas (Int_t newTop, Int_t direction);  Scroll the canvas to new_top in the kVertical or kHorizontal direction. ;  ; void ScrollDown (Int_t pixels);  ; void ScrollLeft (Int_t pixels);  ; void ScrollRight (Int_t pixels);  ; virtual void ScrollToPosition (TGLongPosition newPos);  Scroll the canvas to pos. ;  ; void ScrollUp (Int_t pixels);  ; void SetBackgroundColor (Pixel_t) override;  Set background color of the canvas frame. ;  ; void SetBackgroundPixmap (Pixmap_t p) override;  Set backgound pixmap. ;  ; void SetLayoutManager (TGLayoutManager *) over",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtml.html:7031,expose,expose,7031,doc/master/classTGHtml.html,https://root.cern,https://root.cern/doc/master/classTGHtml.html,1,['expose'],['expose']
Security,"TGIdleHandler *);  ; Bool_t HandleTimer (TTimer *) override;  Execute action in response of a timer timing out. ;  ; virtual void IconifyWindow ();  iconify window ;  ; TClass * IsA () const override;  ; virtual Bool_t IsMapped ();  Returns kTRUE if window is mapped on screen, kFALSE otherwise. ;  ; virtual void LowerWindow ();  lower window ;  ; void Print (Option_t *option="""") const override;  Print window id. ;  ; virtual void RaiseWindow ();  raise window ;  ; virtual void RequestFocus ();  request focus ;  ; virtual void SetBackgroundPixmap (Pixmap_t pixmap);  set background pixmap ;  ; virtual void SetName (const char *name);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGObject;  TGObject ();  ;  TGObject (const TGObject &tgo);  ;  ~TGObject () override;  TGObject destructor. ;  ; TGClient * GetClient () const;  ; Handle_t GetId () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison (TGObjects are equal if they have the same window identifier). ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Write this TGObject to a file using TImage, if filename's extension signals a valid TImage::EImageFileType, as defined by TImage::GetImageFileTypeFromFilename(). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAdvancedGraphicsDialog.html:16195,hash,hash,16195,doc/master/classTAdvancedGraphicsDialog.html,https://root.cern,https://root.cern/doc/master/classTAdvancedGraphicsDialog.html,27,['hash'],['hash']
Security,"TGWindow *w);  ; virtual void ClearViewPort ();  Clear view port and redraw full content. ;  ; virtual TGFrameElement * FindFrame (Int_t x, Int_t y, Bool_t exclude=kTRUE);  Find frame located int container at position x,y. ;  ; virtual TGFrame * FindFrameByName (const char *name);  Find frame by name. ;  ; TGCanvas * GetCanvas () const;  ; virtual TGHScrollBar * GetHScrollbar () const;  returns pointer to hor. scroll bar ;  ; virtual TGFrame * GetLastActive () const;  ; const TGWindow * GetMessageWindow () const;  ; virtual const TGFrame * GetNextSelected (void **current);  Return the next selected item. ;  ; const TGPicture * GetObjPicture (TGFrame *f);  Retrieve icons associated with class ""name"". ;  ; virtual TGDimension GetPageDimension () const;  Returns page dimension. ;  ; virtual TGPosition GetPagePosition () const;  Returns page position. ;  ; virtual TGVScrollBar * GetVScrollbar () const;  returns pointer to vert. scroll bar ;  ; Bool_t HandleDNDFinished () override;  ; Bool_t HandleExpose (Event_t *event) override;  Handle expose events. Do not use double buffer. ;  ; virtual void InvertSelection ();  Invert the selection, all selected items become unselected and vice versa. ;  ; virtual void LineLeft (Bool_t select=kFALSE);  Move current position one column left. ;  ; virtual void LineRight (Bool_t select=kFALSE);  Move current position one column right. ;  ; virtual Int_t NumItems () const;  ; virtual Int_t NumSelected () const;  ; void RemoveAll () override;  Remove all items from the container. ;  ; virtual void RemoveItem (TGFrame *item);  Remove item from container. ;  ; virtual void SelectAll ();  Select all items in the container. ;  ; virtual void SetDragPixmap (const TGPicture *pic);  Set drag window pixmaps and hotpoint. ;  ; virtual void SetHsbPosition (Int_t newPos);  set new hor. position ;  ; virtual void SetPageDimension (const TGDimension &dim);  Set page dimension. ;  ; virtual void SetPageDimension (UInt_t w, UInt_t h);  Set page dimensi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListTree.html:12363,expose,expose,12363,doc/master/classTGListTree.html,https://root.cern,https://root.cern/doc/master/classTGListTree.html,1,['expose'],['expose']
Security,TH2GLRendering of TH2 and derived classes ;  CTH2I2-D histogram with an int per channel (see TH1 documentation)} ;  CTH2Poly2D Histogram with Polygonal Bins ;  CTH2PolyBinHelper class to represent a bin in the TH2Poly histogram ;  CTH2S2-D histogram with a short per channel (see TH1 documentation) ;  CTH3The 3-D histogram classes derived from the 1-D histogram classes ;  CTH3C3-D histogram with a byte per channel (see TH1 documentation) ;  CTH3D3-D histogram with a double per channel (see TH1 documentation)} ;  CTH3F3-D histogram with a float per channel (see TH1 documentation)} ;  CTH3GLOpenGL renderer class for TH3 ;  CTH3I3-D histogram with an int per channel (see TH1 documentation)} ;  CTH3S3-D histogram with a short per channel (see TH1 documentation) ;  CTHaarMatrixT;  CTHashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject's ;  CTHashTableTHashTable implements a hash table to store TObject's ;  CTHashTableIterIterator of hash table ;  CTHbookBranchHBOOK Branch ;  CTHbookFileThis class is an interface to the Hbook objects in Hbook files ;  CTHbookKeyHBOOK Key ;  CTHbookTreeA wrapper class supporting Hbook ntuples (CWN and RWN) ;  CTHDFSFileReads and writes its data via the HDFS protocols ;  CTHDFSSystemDirectory handler for HDFS (THDFSFile) ;  CTHelixTHelix has two different constructors ;  CTHilbertMatrixT;  CTHilbertMatrixTSym;  CTHistPainterThe histogram painter class ;  CTHistRenderingRegion;  CTHLimitsFinderClass to compute nice axis limits ;  CTHnMultidimensional histogram ;  CTHnBaseMultidimensional histogram base ;  CTHnChainA class to chain together multiple histograms ;  CTHnIterIterator over THnBase bins ;  CTHnSparseEfficient multidimensional histogram ;  CTHnSparseArrayChunkTHnSparseArrayChunk is used internally by THnSparse ;  CTHnSparseTTemplated implementation of the abstract base THnSparse ;  CTHnTTemplated implementation of the abstract base THn ;  CTHostAuth;  CTHStackThe Histogram stack,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:179614,hash,hash,179614,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,3,['hash'],['hash']
Security,"TH2Poly), fill it and draw it using GL ;  th2polyUSA.CThis tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using GL ;  transpad.C Example of a canvas showing two histograms with different scales ;  twoscales.C Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad ;  xyplot.C Example showing how to produce a plot with an orthogonal axis system centered at (0,0) ;  ► histfactory;  example.C;  example.py;  makeExample.C;  makeQuickModel.py;  ModifyInterpolation.C;  ► html;  MakeTutorials.C;  ► http;  httpaccess.CThis program demonstrates access control to the THttpServer with digest methods ;  httpcontrol.CThis program demonstrates simple application control via THttpServer Two histogram are filled within endless loop ;  httpserver.CThis program creates : ;  httptextlog.CThis macro demonstrates custom access and custom drawing for TMsgList class Main motivation for this example - demonstrate how traffic between server and client can be minimized and how one could build custom UI in the browser ;  httptextlog.js;  ► image;  galaxy_image.C Importing an image and manipulating it ;  hist2image.C Create an image from a 2-D histogram and manipulate it ;  hsumanim.C This script is a slightly modified version of hsum.C ;  image2hist.C Create a 2-D histogram from an image ;  img2pad.C Display image in canvas and pad ;  imgconv.C Open rose512.jpg and save it in the following formats: .png, .gif, .xpm and tiff ;  pad2png.C Create a canvas and save as png ;  rose_image.C Display image in a new canvas and pad ;  trans_graph.C Demonstrates how to access and manipulate ARGB pixel values of an image +.. ;  ► io;  copyFiles.C Example of script showing how to copy all objects (including directories) from a source file ;  dirs.C This macro illustrates how to create a hierarchy of directories in a Root file ;  double32.C Tutorial illustrating use and precision of the Double32_t data type Yo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:125124,access,access,125124,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['access'],['access']
Security,"THnSparse::GetAxis(12)->SetRange(from_bin, to_bin);; ; Internal Representation; An entry for a filled bin consists of its n-dimensional coordinates and its bin content. The coordinates are compacted to use as few bits as possible; e.g. a histogram with 10 bins in x and 20 bins in y will only use 4 bits for the x representation and 5 bits for the y representation. This is handled by the internal class THnSparseCompactBinCoord. Bin data (content and coordinates) are allocated in chunks of size fChunkSize; this parameter can be set when constructing a THnSparse. Each chunk is represented by an object of class THnSparseArrayChunk.; Translation from an n-dimensional bin coordinate to the linear index within the chunks is done by GetBin(). It creates a hash from the compacted bin coordinates (the hash of a bin coordinate is the compacted coordinate itself if it takes less than 8 bytes, the size of a Long64_t. This hash is used to lookup the linear index in the TExMap member fBins; the coordinates of the entry fBins points to is compared to the coordinates passed to GetBin(). If they do not match, these two coordinates have the same hash - which is extremely unlikely but (for the case where the compact bin coordinates are larger than 4 bytes) possible. In this case, fBinsContinued contains a chain of linear indexes with the same hash. Iterating through this chain and comparing each bin coordinates with the one passed to GetBin() will retrieve the matching bin. ; Definition at line 37 of file THnSparse.h. Public Member Functions;  ~THnSparse () override;  Destruct a THnSparse. ;  ; void AddBinContent (const Int_t *idx, Double_t v=1.);  Forwards to THnBase::AddBinContent(). ;  ; void AddBinContent (Long64_t bin, Double_t v=1.) override;  Add ""v"" to the content of bin with index ""bin"". ;  ; void AddBinError2 (Long64_t bin, Double_t e2) override;  Add ""e"" to error of bin with index ""bin"", enable errors if needed. ;  ; ROOT::Internal::THnBaseBinIter * CreateIter (Bool_t respectA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparse.html:4256,hash,hash,4256,doc/master/classTHnSparse.html,https://root.cern,https://root.cern/doc/master/classTHnSparse.html,1,['hash'],['hash']
Security,"THttpTimer : public TTimer {; 43 Long_t fNormalTmout{0};; 44 Bool_t fSlow{kFALSE};; 45 Int_t fSlowCnt{0};; 46 ; 47public:; 48 THttpServer &fServer; ///!< server processing requests; 49 ; 50 /// constructor; 51 THttpTimer(Long_t milliSec, Bool_t mode, THttpServer &serv) : TTimer(milliSec, mode), fNormalTmout(milliSec), fServer(serv) {}; 52 ; 53 void SetSlow(Bool_t flag); 54 {; 55 fSlow = flag;; 56 fSlowCnt = 0;; 57 Long_t ms = fNormalTmout;; 58 if (fSlow) {; 59 if (ms < 100); 60 ms = 500;; 61 else if (ms < 500); 62 ms = 3000;; 63 else; 64 ms = 10000;; 65 }; 66 ; 67 SetTime(ms);; 68 }; 69 Bool_t IsSlow() const { return fSlow; }; 70 ; 71 /// timeout handler; 72 /// used to process http requests in main ROOT thread; 73 void Timeout() override; 74 {; 75 Int_t nprocess = fServer.ProcessRequests();; 76 ; 77 if (nprocess > 0) {; 78 fSlowCnt = 0;; 79 if (IsSlow()); 80 SetSlow(kFALSE);; 81 } else if (!IsSlow() && (fSlowCnt++ > 10)) {; 82 SetSlow(kTRUE);; 83 }; 84 }; 85};; 86 ; 87 ; 88/** \class THttpServer; 89\ingroup http; 90 ; 91Online http server for arbitrary ROOT application; 92 ; 93Idea of THttpServer - provide remote http access to running; 94ROOT application and enable HTML/JavaScript user interface.; 95Any registered object can be requested and displayed in the browser.; 96There are many benefits of such approach:; 97 ; 981. standard http interface to ROOT application; 992. no any temporary ROOT files when access data; 1003. user interface running in all browsers; 101 ; 102To start http server simply create instance; 103of the THttpServer class like:; 104 ; 105 serv = new THttpServer(""http:8080"");; 106 ; 107This will starts civetweb-based http server with http port 8080.; 108Than one should be able to open address ""http://localhost:8080""; 109in any modern web browser (Firefox, Chrome, Opera, ...) and browse objects,; 110created in ROOT application. By default, server can access files,; 111canvases and histograms via `gROOT` pointer. All such objects; 112can be display",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THttpServer_8cxx_source.html:2424,access,access,2424,doc/master/THttpServer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THttpServer_8cxx_source.html,1,['access'],['access']
Security,"TLineA simple line ;  CTLinearFitterThe Linear Fitter - For fitting functions that are LINEAR IN PARAMETERS ;  CTLinearGradientDefine a linear color gradient ;  CTLinearMinimizerTLinearMinimizer class: minimizer implementation based on TMinuit ;  CTLineEditor;  CTLinkSpecial TText object used to show hyperlinks ;  CTListA doubly linked list ;  CTListIterIterator of linked list ;  CTListOfDataMembersA collection of TDataMember objects designed for fast access given a DeclId_t and for keep track of TDataMember that were described unloaded data member ;  CTListOfEnumsA collection of TEnum objects designed for fast access given a DeclId_t and for keep track of TEnum that were described unloaded enum ;  CTListOfEnumsWithLockA collection of TEnum objects designed for fast access given a DeclId_t and for keep track of TEnum that were described unloaded enum ;  CTListOfEnumsWithLockIterIterator for TListOfEnumsWithLock ;  CTListOfFunctionsA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFunction that were described unloaded function ;  CTListOfFunctionsIterIterator for TListOfFunctions ;  CTListOfFunctionTemplatesA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFunction that were described unloaded function ;  CTListOfTypesA collection of TDataType designed to hold the typedef information and numerical type information ;  CTLockFileA scoped lock based on files ;  CTLockGuard;  CTLockPathPath locking class allowing shared and exclusive locks ;  CTLockPathGuard;  ►CTLorentzRotationDescribes Lorentz transformations including Lorentz boosts and rotations (see TRotation) ;  CTLorentzRotationRow;  CTLorentzVectorTLorentzVector is a general four-vector class, which can be used either for the description of position and time (x,y,z,t) or momentum and energy (px,py,pz,E) ;  CTMacOSXSystem;  CTMacroClass supporting a collection of lines with C++ code ;  CTMakeProject;  CTMapTMap impleme",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:167575,access,access,167575,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,5,['access'],['access']
Security,"TLineA simple line ;  CTLinearFitterThe Linear Fitter - For fitting functions that are LINEAR IN PARAMETERS ;  CTLinearGradientDefine a linear color gradient ;  CTLinearMinimizerTLinearMinimizer class: minimizer implementation based on TMinuit ;  CTLineEditor;  CTLinkSpecial TText object used to show hyperlinks ;  CTListA doubly linked list ;  CTListIterIterator of linked list ;  CTListOfDataMembersA collection of TDataMember objects designed for fast access given a DeclId_t and for keep track of TDataMember that were described unloaded data member ;  CTListOfEnumsA collection of TEnum objects designed for fast access given a DeclId_t and for keep track of TEnum that were described unloaded enum ;  CTListOfEnumsWithLockA collection of TEnum objects designed for fast access given a DeclId_t and for keep track of TEnum that were described unloaded enum ;  CTListOfEnumsWithLockIterIterator for TListOfEnumsWithLock ;  CTListOfFunctionsA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFunction that were described unloaded function ;  CTListOfFunctionsIterIterator for TListOfFunctions ;  CTListOfFunctionTemplatesA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFunction that were described unloaded function ;  CTListOfTypesA collection of TDataType designed to hold the typedef information and numerical type information ;  CTLockFileA scoped lock based on files ;  CTLockGuard;  ►CTLorentzRotation;  CTLorentzRotationRow;  CTLorentzVector;  CTMacOSXSystem;  CTMacroClass supporting a collection of lines with C++ code ;  CTMakeProject;  CTMapTMap implements an associative array of (key,value) pairs using a THashTable for efficient retrieval (therefore TMap does not conserve the order of the entries) ;  CTMapFileThis class implements a shared memory region mapped to a file ;  CTMapIterIterator of map ;  CTMapRecKeep track of an object in the mapped file ;  CTMarkerManages Markers ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:140638,access,access,140638,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,1,['access'],['access']
Security,"TLtypeTStreamerElement::kSTLset; static TStreamerElement::ESTLtypeTStreamerElement::kSTLstring; static TStreamerElement::ESTLtypeTStreamerElement::kSTLvector; static TObject::(anonymous)TObject::kSingleKey; static TStreamerElement::(anonymous)TStreamerElement::kWholeObject; static TStreamerElement::(anonymous)TStreamerElement::kWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tTStreamerElement::fArrayDimnumber of array dimensions; Int_tTStreamerElement::fArrayLengthcumulative size of all array dims; UInt_t&fBaseCheckSum!checksum of the base class (used during memberwise streaming); TClass*fBaseClass!pointer to base class; Int_tfBaseVersionversion number of the base class (used during memberwise streaming); TClass*TStreamerElement::fClassObject!pointer to class of object; ClassConvStreamerFunc_tfConvStreamerFunc!Pointer to a wrapper around a custom convertion streamer member function.; TStringfErrorMsg!Error message in case of checksum/version mismatch.; Double_tTStreamerElement::fFactor!Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin); Int_tTStreamerElement::fMaxIndex[5]Maximum array index for array dimension ""dim""; TStringTNamed::fNameobject identifier; TClass*fNewBaseClass!pointer to new base class if renamed; TClass*TStreamerElement::fNewClass!new element class when reading; Int_tTStreamerElement::fNewType!new element type when reading; Int_tTStreamerElement::fOffset!element offset in class; Int_tTStreamerElement::fSizesizeof element; TMemberStreamer*TStreamerElement::fStreamer!pointer to element Streamer; ClassStreamerFunc_tfStreamerFunc!Pointer to a wrapper around a custom streamer member function.; TVirtualStreamerInfo*fStreamerInfo!Pointer to the current StreamerInfo for the baset class.; Int_tTStreamerElement::fTObjectOffset!base offset for TObject if the element inherits from it; TStringTNamed::fTitleobject title; Int_tTStreamerElement::fTypeelement type; TStringTS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TStreamerBase.html:10026,checksum,checksum,10026,root/html602/TStreamerBase.html,https://root.cern,https://root.cern/root/html602/TStreamerBase.html,1,['checksum'],['checksum']
Security,"TMVA::DecisionTree::EventList* validationSample) const; run the validation sample through the (pruned) tree and fill in the nodes; the variables NSValidation and NBValidadtion (i.e. how many of the Signal; and Background events from the validation sample. This is then later used; when asking for the ""tree quality"" .. Double_t TestPrunedTreeQuality(const TMVA::DecisionTreeNode* dt = NULL, Int_t mode = 0) const; return the misclassification rate of a pruned tree; a ""pruned tree"" may have set the variable ""IsTerminal"" to ""arbitrary"" at; any node, hence this tree quality testing will stop there, hence test; the pruned tree (while the full tree is still in place for normal/later use). void CheckEventWithPrunedTree(const TMVA::Event& ) const; pass a single validation event throught a pruned decision tree; on the way down the tree, fill in all the ""intermediate"" information; that would normally be there from training. Double_t GetSumWeights(const TMVA::DecisionTree::EventList* validationSample) const; calculate the normalization factor for a pruning validation sample. UInt_t CountLeafNodes(TMVA::Node* n = NULL); return the number of terminal nodes in the sub-tree below Node n. void DescendTree(TMVA::Node* n = NULL); descend a tree to find all its leaf nodes. void PruneNode(TMVA::DecisionTreeNode* node); prune away the subtree below the node. void PruneNodeInPlace(TMVA::DecisionTreeNode* node); prune a node temporaily (without actually deleting its decendants; which allows testing the pruned tree quality for many different; pruning stages without ""touching"" the tree. TMVA::Node* GetNode(ULong_t sequence, UInt_t depth); retrieve node from the tree. Its position (up to a maximal tree depth of 64); is coded as a sequence of left-right moves starting from the root, coded as; 0-1 bit patterns stored in the ""long-integer"" (i.e. 0:left ; 1:right. void GetRandomisedVariables(Bool_t* useVariable, UInt_t* variableMap, UInt_t& nVars). Double_t TrainNodeFast(const TMVA::DecisionTree::Ev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__DecisionTree.html:11878,validat,validationSample,11878,root/html528/TMVA__DecisionTree.html,https://root.cern,https://root.cern/root/html528/TMVA__DecisionTree.html,6,['validat'],"['validation', 'validationSample']"
Security,"TMVA::DecisionTreeNode* node); fill the existing the decision tree structure by filling event; in from the top node and see where they happen to end up. void ClearTree(); clear the tree nodes (their S/N, Nevents etc), just keep the structure of the tree. UInt_t CleanTree(TMVA::DecisionTreeNode* node = NULL); remove those last splits that result in two leaf nodes that; are both of the type (i.e. both signal or both background); this of course is only a reasonable thing to do when you use; ""YesOrNo"" leafs, while it might loose s.th. if you use the; purity information in the nodes.; --> hence I don't call it automatically in the tree building. Double_t PruneTree(TMVA::DecisionTree::EventList* validationSample = NULL); prune (get rid of internal nodes) the Decision tree to avoid overtraining; serveral different pruning methods can be applied as selected by the; variable ""fPruneMethod"". void ApplyValidationSample(const TMVA::DecisionTree::EventList* validationSample) const; run the validation sample through the (pruned) tree and fill in the nodes; the variables NSValidation and NBValidadtion (i.e. how many of the Signal; and Background events from the validation sample. This is then later used; when asking for the ""tree quality"" .. Double_t TestPrunedTreeQuality(const TMVA::DecisionTreeNode* dt = NULL, Int_t mode = 0) const; return the misclassification rate of a pruned tree; a ""pruned tree"" may have set the variable ""IsTerminal"" to ""arbitrary"" at; any node, hence this tree quality testing will stop there, hence test; the pruned tree (while the full tree is still in place for normal/later use). void CheckEventWithPrunedTree(const TMVA::Event& ) const; pass a single validation event throught a pruned decision tree; on the way down the tree, fill in all the ""intermediate"" information; that would normally be there from training. Double_t GetSumWeights(const TMVA::DecisionTree::EventList* validationSample) const; calculate the normalization factor for a pruning validation sam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__DecisionTree.html:10924,validat,validationSample,10924,root/html528/TMVA__DecisionTree.html,https://root.cern,https://root.cern/root/html528/TMVA__DecisionTree.html,6,['validat'],"['validation', 'validationSample']"
Security,"TMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in representative histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TStringfHiddenLayerstring containig the hidden layer structure; TStringfLayerSpecLayer specification option; TStringfLearningMethodthe learning method (given via option string); TTree*fLocalTrainingTreelocal copy of training tree; TMultiLayerPerceptron*fMLPthe TMLP; TStringfMLPBuildOptionsoption string to build the mlp; Int_tfNcyclesnumber of training cylcles; Double_tfValidationFractionfraction of events in training tree used for cross validation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodTMlpANN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""3000:N-1:N-2"", TDirectory* theTargetDir = 0); standard constructor. MethodTMlpANN(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = NULL); constructor from weight file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); TMlpANN can handle classification with 2 classes. void Init( void ); default initialisations. ~MethodTMlpANN( void ); destructor. void CreateMLPOptions(TString ); translates options from option string into TMlpANN language. void DeclareOptions(); define t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodTMlpANN.html:16157,validat,validation,16157,root/html528/TMVA__MethodTMlpANN.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodTMlpANN.html,1,['validat'],['validation']
Security,"TMVA::Reader::AddVariablevoid AddVariable(const TString &expression, Float_t *)Add a float variable or expression to the reader.Definition Reader.cxx:303; TMVA::Tools::Instancestatic Tools & Instance()Definition Tools.cxx:71; TMVA::Tools::SplitStringstd::vector< TString > SplitString(const TString &theOpt, const char separator) constsplits the option string at 'separator' and fills the list 'splitV' with the primitive stringsDefinition Tools.cxx:1199; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TStopwatchStopwatch class.Definition TStopwatch.h:28; TStopwatch::Startvoid Start(Bool_t reset=kTRUE)Start the stopwatch.Definition TStopwatch.cxx:58; TStopwatch::Stopvoid Stop()Stop the stopwatch.Definition TStopwatch.cxx:77; TStopwatch::Printvoid Print(Option_t *option="""") const overridePrint the real and cpu time passed between the start and stop events.Definition TStopwatch.cxx:219; TStringBasic string class.Definition TString.h:139; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::GetEntryvirtual Int_t GetEntry(Long64_t entry, Int_t getall=0)Read all branches of entry and return total number of bytes read.Definition TTree.cxx:5638; TTree::SetBranchAddressvirtual Int_t SetBranchAddress(const char *bname, void *add, TBranch **ptr=nullptr)Change branch address, dealing with clone trees properly.Definition TTree.cxx:8385; TTree::GetEntriesvirtual Long64_t GetEntries() constDefinition TTree.h:463; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; TMVA::gToolsTools & gTools(). tutorialstmvaTMVARegressionApplication.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegressionApplication_8C_source.html:11606,access,access,11606,doc/master/TMVARegressionApplication_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVARegressionApplication_8C_source.html,2,['access'],['access']
Security,"TMVA::Volume* ) const; test if the data points are in the given volume. void CalcStatistics(TMVA::Node* n = 0); calculate basic statistics (mean, rms for each variable). Int_t SearchVolumeWithMaxLimit(TMVA::Volume* , vector<const TMVA::BinarySearchTreeNode*>* events = 0, Int_t = -1); recursively walk through the daughter nodes and add up all weigths of events that; lie within the given volume a maximum number of events can be given. Node * CreateNode(UInt_t ) const; { return new BinarySearchTreeNode(); }. BinaryTree* CreateTree() const; { return new BinarySearchTree(); }. const char* ClassName() const; { return ""BinarySearchTree""; }. void SetPeriode(Int_t p); set the periode (number of variables). { fPeriod = p; }. UInt_t GetPeriode( void ); return periode (number of variables). { return fPeriod; }. Float_t Mean(TMVA::Types::ESBType sb, UInt_t var); access to mean for signal and background for each variable. { return fMeans[sb==Types::kSignal?0:1][var]; }. Float_t RMS(TMVA::Types::ESBType sb, UInt_t var); access to RMS for signal and background for each variable. { return fRMS[sb==Types::kSignal?0:1][var]; }. Float_t Min(TMVA::Types::ESBType sb, UInt_t var); access to Minimum for signal and background for each variable. { return fMin[sb==Types::kSignal?0:1][var]; }. Float_t Max(TMVA::Types::ESBType sb, UInt_t var); access to Maximum for signal and background for each variable. { return fMax[sb==Types::kSignal?0:1][var]; }. Float_t RMS(UInt_t var); access to RMS for each variable. { return fRMS[0][var]; }. void SetNormalize(Bool_t norm); { fCanNormalize = norm; }. void DestroyNode(TMVA::BinarySearchTreeNode* ). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: BinarySearchTree.h 37399 2010-12-08 15:22:07Z evt $ » Last generated: 2010-12-08 16:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__BinarySearchTree.html:7998,access,access,7998,root/html528/TMVA__BinarySearchTree.html,https://root.cern,https://root.cern/root/html528/TMVA__BinarySearchTree.html,4,['access'],['access']
Security,"TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::~TNamedvirtual ~TNamed()TNamed destructor.Definition TNamed.cxx:42; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TNamed::TNamedTNamed(const TString &name, const TString &title)Definition TNamed.h:38; TNamed::fTitleTString fTitleDefinition TNamed.h:33; TNamed::TNamedTNamed()Definition TNamed.h:36; TNamed::Printvoid Print(Option_t *option="""") const overridePrint TNamed name and title.Definition TNamed.cxx:128; TNamed::fNameTString fNameDefinition TNamed.h:32; TNamed::Clearvoid Clear(Option_t *option="""") overrideSet name and title to empty strings ("""").Definition TNamed.cxx:64; TNamed::SetNamevirtual void SetName(const char *name)Set the name of the TNamed.Definition TNamed.cxx:140; TNamed::HashULong_t Hash() const overrideReturn hash value for this object.Definition TNamed.h:49; TNamed::CompareInt_t Compare(const TObject *obj) const overrideCompare two TNamed objects.Definition TNamed.cxx:85; TNamed::Sizeofvirtual Int_t Sizeof() constReturn size of the TNamed part of the TObject.Definition TNamed.cxx:173; TNamed::operator=TNamed & operator=(const TNamed &rhs)TNamed assignment operator.Definition TNamed.cxx:51; TNamed::lsvoid ls(Option_t *option="""") const overrideList TNamed name and title.Definition TNamed.cxx:113; TNamed::SetNameTitlevirtual void SetNameTitle(const char *name, const char *title)Set all the TNamed parameters (name and title).Definition TNamed.cxx:154; TObjectMother of all ROOT objects.Definition TObject.h:41; TStringBasic string class.Definition TString.h:139; TString::HashUInt_t Hash(ECaseCompare cmp=kExact) constReturn hash value.Definition TString.cxx:677; bool. corebaseincTNamed.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:03 (GVA Time) using Doxygen 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TNamed_8h_source.html:4376,hash,hash,4376,doc/master/TNamed_8h_source.html,https://root.cern,https://root.cern/doc/master/TNamed_8h_source.html,1,['hash'],['hash']
Security,"TNormalizedCtxt &normCtxt, std::ostream &dictStream, bool isAutoStreamer);  ; typedef std::list< RConstructorType > RConstructorTypes;  . Enumerations; enum  DataMemberInfo__ValidArrayIndex_error_code { ;   VALID; , NOT_INT; , NOT_DEF; , IS_PRIVATE; , ;   UNKNOWN. };  ; enum class  EIOCtorCategory : short { kAbsent; , kDefault; , kIOPtrType; , kIORefType; };  . Functions; clang::QualType AddDefaultParameters (clang::QualType instanceType, const cling::Interpreter &interpret, const TNormalizedCtxt &normCtxt);  Add any unspecified template parameters to the class template instance, mentioned anywhere in the type. ;  ; bool BeginsWith (const std::string &theString, const std::string &theSubstring);  ; EIOCtorCategory CheckConstructor (const clang::CXXRecordDecl *, const RConstructorType &, const cling::Interpreter &interp);  Check if class has constructor of provided type - either default or with single argument. ;  ; bool CheckDefaultConstructor (const clang::CXXRecordDecl *, const cling::Interpreter &interp);  Checks if default constructor exists and accessible. ;  ; EIOCtorCategory CheckIOConstructor (const clang::CXXRecordDecl *, const char *, const clang::CXXRecordDecl *, const cling::Interpreter &interp);  Checks IO constructor - must be public and with specified argument. ;  ; bool CheckPublicFuncWithProto (clang::CXXRecordDecl const *, char const *, char const *, const cling::Interpreter &, bool diagnose);  Return true, if the function (defined by the name and prototype) exists and is public. ;  ; const clang::FunctionDecl * ClassInfo__HasMethod (const clang::DeclContext *cl, char const *, const cling::Interpreter &interp);  ; llvm::StringRef DataMemberInfo__ValidArrayIndex (const cling::Interpreter &interp, const clang::DeclaratorDecl &m, int *errnum=nullptr, llvm::StringRef *errstr=nullptr);  ValidArrayIndex return a static string (so use it or copy it immediatly, do not call GrabIndex twice in the same expression) containing the size of the array data member",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:1651,access,accessible,1651,doc/master/namespaceROOT_1_1TMetaUtils.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html,2,['access'],['accessible']
Security,"TObject *obj, Bool_t replace /* = kFALSE */); 211{; 212 if (!obj || !fList) return;; 213 ; 214 TDirectory::Append(obj,replace);; 215 ; 216 if (!fMother) return;; 217 if (fMother->IsA() == TMapFile::Class()) {; 218 TMapFile *mfile = (TMapFile*)fMother;; 219 mfile->Add(obj);; 220 }; 221}; 222 ; 223////////////////////////////////////////////////////////////////////////////////; 224/// Insert key in the linked list of keys of this directory.; 225 ; 226Int_t TDirectoryFile::AppendKey(TKey *key); 227{; 228 if (!fKeys) {; 229 Error(""AppendKey"",""TDirectoryFile not initialized yet."");; 230 return 0;; 231 }; 232 ; 233 fModified = kTRUE;; 234 ; 235 key->SetMotherDir(this);; 236 ; 237 // This is a fast hash lookup in case the key does not already exist; 238 TKey *oldkey = (TKey*)fKeys->FindObject(key->GetName());; 239 if (!oldkey) {; 240 fKeys->Add(key);; 241 return 1;; 242 }; 243 ; 244 // If the key name already exists we have to make a scan for it; 245 // and insert the new key ahead of the current one; 246 TObjLink *lnk = fKeys->FirstLink();; 247 while (lnk) {; 248 oldkey = (TKey*)lnk->GetObject();; 249 if (!strcmp(oldkey->GetName(), key->GetName())); 250 break;; 251 lnk = lnk->Next();; 252 }; 253 ; 254 fKeys->AddBefore(lnk, key);; 255 return oldkey->GetCycle() + 1;; 256}; 257 ; 258////////////////////////////////////////////////////////////////////////////////; 259/// Browse the content of the directory.; 260 ; 261void TDirectoryFile::Browse(TBrowser *b); 262{; 263 TString name;; 264 ; 265 if (b) {; 266 TObject *obj = nullptr;; 267 TIter nextin(fList);; 268 TKey *key = nullptr, *keyo = nullptr;; 269 TIter next(fKeys);; 270 ; 271 cd();; 272 ; 273 //Add objects that are only in memory; 274 while ((obj = nextin())) {; 275 if (fKeys->FindObject(obj->GetName())) continue;; 276 b->Add(obj, obj->GetName());; 277 }; 278 ; 279 //Add keys; 280 while ((key = (TKey *) next())) {; 281 int skip = 0;; 282 if (!keyo || (keyo && strcmp(keyo->GetName(), key->GetName()))) {; 283 skip = 0;; 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html:7875,hash,hash,7875,doc/master/TDirectoryFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html,1,['hash'],['hash']
Security,"TObject.; Definition at line 395 of file TClassTree.cxx. ◆ Mark(). TObjString * TClassTree::Mark ; (; const char * ; classname, . TList * ; los, . Int_t ; abit . ). protected . set bit abit in class classname in list los ; Definition at line 409 of file TClassTree.cxx. ◆ Paint(). void TClassTree::Paint ; (; Option_t * ; option = """"). overridevirtual . Draw the current class setting in fClasses and fStatus. ; Reimplemented from TObject.; Definition at line 424 of file TClassTree.cxx. ◆ PaintClass(). void TClassTree::PaintClass ; (; Int_t ; iclass, . Float_t ; xleft, . Float_t ; y . ). protectedvirtual . Paint one class level. ; Definition at line 605 of file TClassTree.cxx. ◆ SaveAs(). void TClassTree::SaveAs ; (; const char * ; filename = """", . Option_t * ; option = """" . ); const. overridevirtual . save current configuration in a Root file if filename is blank, the name of the file will be the current objectname.root all the current settings are preserved the Root file produced can be looked at by a another Root session with no access to the original classes. ; By default a message is printed. Specify option ""Q"" to remove the message ; Reimplemented from TObject.; Definition at line 653 of file TClassTree.cxx. ◆ ScanClasses(). void TClassTree::ScanClasses ; (; Int_t ; iclass). protectedvirtual . Select all classes used by/referenced/referencing the class number iclass and build the list of these classes. ; Definition at line 662 of file TClassTree.cxx. ◆ SetClasses(). void TClassTree::SetClasses ; (; const char * ; classes, . Option_t * ; option = ""ID"" . ). virtual . Set the list of classes for which the hierarchy is to be drawn See Paint for the syntax. ; Definition at line 829 of file TClassTree.cxx. ◆ SetLabelDx(). void TClassTree::SetLabelDx ; (; Float_t ; labeldx = 0.15). virtual . Set the size along x of the TPaveLabel showing the class name. ; Definition at line 843 of file TClassTree.cxx. ◆ SetSourceDir(). virtual void TClassTree::SetSourceDir ; (; const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassTree.html:24358,access,access,24358,doc/master/classTClassTree.html,https://root.cern,https://root.cern/doc/master/classTClassTree.html,1,['access'],['access']
Security,"TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TUDPSocket::EServiceTypekPROOFD; static TUDPSocket::EServiceTypekROOTD; static TUDPSocket::EInterestkRead; static TUDPSocket::EServiceTypekSOCKD; static TObject::(anonymous)TObject::kSingleKey; static TUDPSocket::EInterestkWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TInetAddressfAddressremote internet address and port #; TBitsfBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tfBytesRecvtotal bytes received over this socket; UInt_tfBytesSenttotal bytes sent using this socket; Int_tfCompressCompression level and algorithm; TTimeStampfLastUsageTime stamp of last usage; TVirtualMutex*fLastUsageMtxProtect last usage setting / reading; TInetAddressfLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tfRemoteProtocolprotocol of remote daemon; TSecContext*fSecContextafter a successful Authenticate call; TUDPSocket::EServiceTypefServTyperemote service type; TStringfServicename of service (matches remote port #); Int_tfSocketsocket descriptor; TStringTNamed::fTitleobject title; TList*fUUIDslist of TProcessIDs already sent through the socket; TStringfUrlneeds this for special authentication options; static ULong64_tfgBytesRecvtotal bytes received by all socket objects; static ULong64_tfgBytesSenttotal bytes sent by all socket objects. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TUDPSocket. Function documentation; TUDPSocket(TInetAddress address, const char* service); Create a socket. Connect to the named service at address addr.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Returns when connection has been accepted by remote side. Use ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUDPSocket.html:9544,authenticat,authentication,9544,root/html602/TUDPSocket.html,https://root.cern,https://root.cern/root/html602/TUDPSocket.html,2,['authenticat'],['authentication']
Security,"TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Int_tfSize; TExMap::Assoc_t*fTable; Int_tfTally. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TExMap(Int_t mapSize = 100); Create a TExMap. TExMap(const TExMap& map); Copy constructor. TExMap& operator=(const TExMap& ); Assignement operator. ~TExMap(); Delete TExMap. void Add(ULong64_t hash, Long64_t key, Long64_t value); Add an (key,value) pair to the table. The key should be unique. void AddAt(UInt_t slot, ULong64_t hash, Long64_t key, Long64_t value); Add an (key,value) pair to the table. The key should be unique.; If the 'slot' is open, use it to store the value,; otherwise revert to Add(hash,key,value); This is usually used in conjuction with GetValue wiht 3 parameters:; if ((idx = (ULong64_t)fMap->GetValue(hash, key, slot)) != 0) {. } else {; fMap->AddAt(slot,hash,key,value);; }. Long64_t & operator()(ULong64_t hash, Long64_t key); Return a reference to the value belonging to the key with the; specified hash value. If the key does not exist it will be added.; NOTE: the reference will be invalidated an Expand() triggered by; an Add() or another operator() call. void Delete(Option_t* opt = """"); Delete all entries stored in the TExMap. Long64_t GetValue(ULong64_t hash, Long64_t key); Return the value belonging to specified key and hash value. If key not; found return 0. Long64_t GetValue(UL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TExMap.html:6715,hash,hash,6715,root/html602/TExMap.html,https://root.cern,https://root.cern/root/html602/TExMap.html,2,['hash'],['hash']
Security,"TObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Double_t*fCoords[fDim] Coordinates; Int_tfDimDimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamVect(); Default constructor for streamer. PDEFoamVect(Int_t ); User constructor creating n-dimensional vector; and allocating dynamically array of components. PDEFoamVect(const TMVA::PDEFoamVect& ); Copy constructor. ~PDEFoamVect(); Destructor. Double_t & operator[](Int_t ); [] is for access to elements as in ordinary matrix like a[j]=b[j]; (Perhaps against some strict rules but rather practical.); Range protection is built in, consequently for substitution; one should use rather use a=b than explicit loop!. TMVA::PDEFoamVect& operator*=(const Double_t& ); unary multiplication operator *=. TMVA::PDEFoamVect& operator+=(const TMVA::PDEFoamVect& ); unary addition operator +=; adding vector c*=x,. TMVA::PDEFoamVect& operator-=(const TMVA::PDEFoamVect& ); unary subtraction operator -=. TMVA::PDEFoamVect operator+(const TMVA::PDEFoamVect& ); addition operator +; sum of 2 vectors: c=a+b, a=a+b,; NEVER USE IT, VERY SLOW!!!. TMVA::PDEFoamVect operator-(const TMVA::PDEFoamVect& ); subtraction operator -; difference of 2 vectors; c=a-b, a=a-b,; NEVER USE IT, VERY SLOW!!!. void Print(Option_t* option) const; Printout of all vector components. Int_t GetDim() const; { return fDim; }. Double_t GetCoord(Int_t i) const; { return fCoords[i]; }. » Author: S. Jadach, Tancredi Carli, Dominik Dannheim, Alexander Voigt » C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__PDEFoamVect.html:6506,access,access,6506,root/html602/TMVA__PDEFoamVect.html,https://root.cern,https://root.cern/root/html602/TMVA__PDEFoamVect.html,2,['access'],['access']
Security,"TP request is executed. Method can be called from any thread Actual execution will be done in main ROOT thread, where analysis code is running. When called from main thread and can_run_immediately==kTRUE, will be executed immediately.; Returns kTRUE when was executed. ; Definition at line 681 of file THttpServer.cxx. ◆ Unregister(). Bool_t THttpServer::Unregister ; (; TObject * ; obj). Unregister object. ; Unregister object in folders hierarchy.; See TRootSniffer::UnregisterObject() for more details ; Definition at line 1253 of file THttpServer.cxx. ◆ UnregisterWS(). void THttpServer::UnregisterWS ; (; std::shared_ptr< THttpWSHandler > ; ws). Unregister WS handler. ; Unregister WS handler to the THttpServer. ; Definition at line 1272 of file THttpServer.cxx. ◆ VerifyFilePath(). Bool_t THttpServer::VerifyFilePath ; (; const char * ; fname). staticprotected . Checked that filename does not contains relative path below current directory. ; Used to prevent access to files below current directory ; Definition at line 562 of file THttpServer.cxx. Member Data Documentation. ◆ fArgs. std::queue<std::shared_ptr<THttpCallArg> > THttpServer::fArgs. protected . ! submitted arguments ; Definition at line 58 of file THttpServer.h. ◆ fCors. std::string THttpServer::fCors. protected . ! CORS: sets Access-Control-Allow-Origin header for ProcessRequest responses ; Definition at line 54 of file THttpServer.h. ◆ fCorsCredentials. std::string THttpServer::fCorsCredentials. protected . ! CORS: add Access-Control-Allow-Credentials: true response header ; Definition at line 55 of file THttpServer.h. ◆ fDefaultPage. std::string THttpServer::fDefaultPage. protected . ! file name for default page name ; Definition at line 50 of file THttpServer.h. ◆ fDefaultPageCont. std::string THttpServer::fDefaultPageCont. protected . ! content of default html page ; Definition at line 51 of file THttpServer.h. ◆ fDrawPage. std::string THttpServer::fDrawPage. protected . ! file name for drawing of single e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHttpServer.html:39183,access,access,39183,doc/master/classTHttpServer.html,https://root.cern,https://root.cern/doc/master/classTHttpServer.html,1,['access'],['access']
Security,"TQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; char*TClass::EscapeChars(const char* text) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TVirtualStreamerInfo*TClass::FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; TVirtualStreamerInfo*TClass::FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TVirtualStreamerInfo*TClass::FindStreamerInfo(UInt_t checksum) const; TVirtualStreamerInfo*TClass::FindStreamerInfoAbstractEmulated(UInt_t checksum) const; TClass*TClass::GetActualClass(const void* object) const; TDictAttributeMap*TDictionary::GetAttributeMap() const; TClass*TClass::GetBaseClass(const char* classname); TClass*TClass::GetBaseClass(const TClass* base); Int_tTClass::GetBaseClassOffset(const TClass* toBase, void* address = 0, bool isDerivedObject = true); TClass*TClass::GetBaseDataMember(const char* datamember); UInt_tTClass::GetCheckSum(TClass::ECheckSum code = kCurrentCheckSum) const; UInt_tTClass::GetCheckSum(Bool_t& isvalid) const; UInt_tTClass::GetCheckSum(TClass::ECheckSum code, Bool_t& isvalid) const; static Bool_tTClass::GetClass(TDictionary::DeclId_t id, vector<TClass*>& classes); static TClass*TClass::GetClass(const char* name, Bool_t load = kTRUE, Bool_t silent = kFALSE); static TClass*TClass::GetClass(const type_info& typeinfo, Bool_t load = kTRUE, Bool_t silent = kFALSE); static TClass*TClass::GetClass(ClassInfo_t* i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQClass.html:6688,checksum,checksum,6688,root/html602/TQClass.html,https://root.cern,https://root.cern/root/html602/TQClass.html,2,['checksum'],['checksum']
Security,"TRUE)Sets the flag controlling the automatic add of histograms in memory.Definition TH1.cxx:1294; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::GetYaxisTAxis * GetYaxis()Definition TH1.h:325; TH1::SetBinContentvirtual void SetBinContent(Int_t bin, Double_t content)Set bin content see convention for numbering bins in TH1::GetBin In case the bin number is greater th...Definition TH1.cxx:9222; TH1::SetBarWidthvirtual void SetBarWidth(Float_t width=0.5)Set the width of bars as fraction of the bin width for drawing mode ""B"".Definition TH1.h:365; TH2Service class for 2-D histogram classes.Definition TH2.h:30; TMVA::ClassifierFactory::CreateIMethod * Create(const std::string &name, const TString &job, const TString &title, DataSetInfo &dsi, const TString &option)creates the method if needed based on the method name using the creator function the factory has stor...Definition ClassifierFactory.cxx:89; TMVA::ClassifierFactory::Instancestatic ClassifierFactory & Instance()access to the ClassifierFactory singleton creates the instance if neededDefinition ClassifierFactory.cxx:48; TMVA::Config::IONames::fWeightFileDirTString fWeightFileDirDefinition Config.h:124; TMVA::Config::IONames::fWeightFileDirPrefixTString fWeightFileDirPrefixDefinition Config.h:123; TMVA::Config::VariablePlotting::fNbinsXOfROCCurveInt_t fNbinsXOfROCCurveDefinition Config.h:111; TMVA::Config::SetDrawProgressBarvoid SetDrawProgressBar(Bool_t d)Definition Config.h:69; TMVA::Config::SetUseColorvoid SetUseColor(Bool_t uc)Definition Config.h:60; TMVA::Config::fVariablePlottingclass TMVA::Config::VariablePlotting fVariablePlotting; TMVA::Config::SetSilentvoid SetSilent(Bool_t s)Definition Config.h:63; TMVA::Config::GetIONamesIONames & GetIONames()Definition Config.h:98; TMVA::ConfigurableDefinition Configurable.h:45; TMVA::Configurable::SetConfigDescriptionvoid SetConfigDescription(const char *d)Definition Configurable.h:64; TMVA::Configurable::DeclareOptionRefOptionBase * DeclareOptionRef(T &ref, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:114165,access,access,114165,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['access'],['access']
Security,"TRef assignment operator. Int_t AddExec(const char* name); If Exec with name does not exist in the list of Execs, it is created.; returns the index of the Exec in the list. TObjArray * GetListOfExecs(); Return a pointer to the static TObjArray holding the list of Execs. TObject * GetObject() const; Return a pointer to the referenced object. void SetAction(const char* name); Store the exec number (in the ROOT list of Execs); into the fBits of this TRef. void SetAction(TObject* parent); Find the action to be executed in the dictionary of the parent class; and store the corresponding exec number into fBits.; This function searches a data member in the class of parent with an; offset corresponding to this.; If a comment ""TEXEC:"" is found in the comment field of the data member,; the function stores the exec identifier of the exec statement; following this keyword. TObject * GetStaticObject(); Returns the static object. void SetObject(TObject* obj); static Obsolete function kept for back compatibility.; In the near future will print a Warning, then will be deleted. void SetStaticObject(TObject* obj); Static function to set the object found on the Action on Demand function.; This function may be called by the user in the function called; when a ""EXEC:"" keyword is specified in the data member field of the TRef.; The function can get access to the dereferencing TRef (i.e. this)using; the static function GetStaticObject(). void Streamer(TBuffer& b); Stream an object of class TRef. TRef(); { }. virtual ~TRef(); { }. TProcessID * GetPID() const; {return fPID;}. Bool_t IsValid() const; {return GetUniqueID()!=0 ? kTRUE : kFALSE;}. » Author: Rene Brun 28/09/2001 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id: TRef.h 20877 2007-11-19 11:17:07Z rdm $ » Last generated: 2010-12-10 21:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRef.html:16468,access,access,16468,root/html528/TRef.html,https://root.cern,https://root.cern/root/html528/TRef.html,1,['access'],['access']
Security,"TRef assignment operator. Int_t AddExec(const char* name); If Exec with name does not exist in the list of Execs, it is created.; returns the index of the Exec in the list. TObjArray * GetListOfExecs(); Return a pointer to the static TObjArray holding the list of Execs. TObject * GetObject() const; Return a pointer to the referenced object. void SetAction(const char* name); Store the exec number (in the ROOT list of Execs); into the fBits of this TRef. void SetAction(TObject* parent); Find the action to be executed in the dictionary of the parent class; and store the corresponding exec number into fBits.; This function searches a data member in the class of parent with an; offset corresponding to this.; If a comment ""TEXEC:"" is found in the comment field of the data member,; the function stores the exec identifier of the exec statement; following this keyword. TObject * GetStaticObject(); Returns the static object. void SetObject(TObject* obj); static Obsolete function kept for back compatibility.; In the near future will print a Warning, then will be deleted. void SetStaticObject(TObject* obj); Static function to set the object found on the Action on Demand function.; This function may be called by the user in the function called; when a ""EXEC:"" keyword is specified in the data member field of the TRef.; The function can get access to the dereferencing TRef (i.e. this)using; the static function GetStaticObject(). void Streamer(TBuffer& b); Stream an object of class TRef. TRef(); { }. virtual ~TRef(); { }. TProcessID * GetPID() const; {return fPID;}. Bool_t IsValid() const; {return GetUniqueID()!=0 ? kTRUE : kFALSE;}. » Author: Rene Brun 28/09/2001 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id: TRef.h 20877 2007-11-19 11:17:07Z rdm $ » Last generated: 2011-07-04 15:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TRef.html:16537,access,access,16537,root/html530/TRef.html,https://root.cern,https://root.cern/root/html530/TRef.html,1,['access'],['access']
Security,"TRef assignment operator. Int_t AddExec(const char* name); If Exec with name does not exist in the list of Execs, it is created.; returns the index of the Exec in the list. TObjArray * GetListOfExecs(); Return a pointer to the static TObjArray holding the list of Execs. TObject * GetObject() const; Return a pointer to the referenced object. void SetAction(const char* name); Store the exec number (in the ROOT list of Execs); into the fBits of this TRef. void SetAction(TObject* parent); Find the action to be executed in the dictionary of the parent class; and store the corresponding exec number into fBits.; This function searches a data member in the class of parent with an; offset corresponding to this.; If a comment ""TEXEC:"" is found in the comment field of the data member,; the function stores the exec identifier of the exec statement; following this keyword. TObject * GetStaticObject(); Returns the static object. void SetObject(TObject* obj); static Obsolete function kept for back compatibility.; In the near future will print a Warning, then will be deleted. void SetStaticObject(TObject* obj); Static function to set the object found on the Action on Demand function.; This function may be called by the user in the function called; when a ""EXEC:"" keyword is specified in the data member field of the TRef.; The function can get access to the dereferencing TRef (i.e. this)using; the static function GetStaticObject(). void Streamer(TBuffer& b); Stream an object of class TRef. TRef(); { }. virtual ~TRef(); { }. TProcessID * GetPID() const; {return fPID;}. Bool_t IsValid() const; {return GetUniqueID()!=0 ? kTRUE : kFALSE;}. » Author: Rene Brun 28/09/2001 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id: TRef.h 20877 2007-11-19 11:17:07Z rdm $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TRef.html:16537,access,access,16537,root/html532/TRef.html,https://root.cern,https://root.cern/root/html532/TRef.html,1,['access'],['access']
Security,"TS3HTTPRequest.cxx. ◆ GetSecretKey(). const TString & TS3HTTPRequest::GetSecretKey ; (; ); const. inline . Definition at line 91 of file TS3HTTPRequest.h. ◆ GetTimeStamp(). const TString & TS3HTTPRequest::GetTimeStamp ; (; ); const. inline . Definition at line 89 of file TS3HTTPRequest.h. ◆ HTTPVerbToTString(). TString TS3HTTPRequest::HTTPVerbToTString ; (; TS3HTTPRequest::EHTTPVerb ; httpVerb); const. protected . Definition at line 141 of file TS3HTTPRequest.cxx. ◆ IsA(). TClass * TS3HTTPRequest::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 104 of file TS3HTTPRequest.h. ◆ MakeAuthHeader(). TString TS3HTTPRequest::MakeAuthHeader ; (; TS3HTTPRequest::EHTTPVerb ; httpVerb); const. protected . Returns the authentication header for this HTTP request. ; Definition at line 233 of file TS3HTTPRequest.cxx. ◆ MakeAuthPrefix(). TString TS3HTTPRequest::MakeAuthPrefix ; (; ); const. protected . Returns the authentication prefix. ; Definition at line 220 of file TS3HTTPRequest.cxx. ◆ MakeDateHeader(). TString TS3HTTPRequest::MakeDateHeader ; (; ); const. protected . Returns the date header for this HTTP request. ; Definition at line 197 of file TS3HTTPRequest.cxx. ◆ MakeHostHeader(). TString TS3HTTPRequest::MakeHostHeader ; (; ); const. protected . Returns the 'Host' header to include in the HTTP request. ; Definition at line 189 of file TS3HTTPRequest.cxx. ◆ MakeRequestLine(). TString TS3HTTPRequest::MakeRequestLine ; (; TS3HTTPRequest::EHTTPVerb ; httpVerb); const. protected . Returns the first line of a HTTP request for this object. ; Note that since we don't use the virtual host syntax which is supported by Amazon, we must include the bucket name in thr resource. For example, we don't use http://mybucket.s3.amazonaws.com/path/to/my/file but instead http://s3.amazonaws.com/mybucket/path/to/my/file so the HTTP request will be of the form ""GET /mybucket/path/to/my/file HTTP/1.1"" Also note tha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTS3HTTPRequest.html:16536,authenticat,authentication,16536,doc/master/classTS3HTTPRequest.html,https://root.cern,https://root.cern/doc/master/classTS3HTTPRequest.html,1,['authenticat'],['authentication']
Security,"TSQLFile for the same data base; will be connected. TString MakeSelectQuery(TClass* cl); Produce SELECT statement which can be used to get all data; of class cl in one SELECT statement; This statement also can be used to create VIEW by command like; mysql> CREATE VIEW TH1I_view AS $CLASSSELECT$; Where $CLASSSELECT$ argument should be produced by call; f->MakeSelectQuery(TH1I::Class());; VIEWs supported by latest MySQL 5 and Oracle. Bool_t ProduceClassSelectQuery(TVirtualStreamerInfo* info, TSQLClassInfo* sqlinfo, TString& columns, TString& tables, Int_t& tablecnt); used by MakeClassSelectQuery method to add columns from table of; class, specified by TVirtualStreamerInfo structure. Bool_t IsTablesExists(); Checks if main keys table is existing. Bool_t IsWriteAccess(); Checkis, if lock is free in configuration tables. void SetLocking(Int_t mode); Set locking mode for current database. Int_t GetLocking(); Return current locking mode for that file. Bool_t IsReadAccess(); dummy, in future should check about read access to database. TSQLResult* SQLQuery(const char* cmd, Int_t flag = 0, Bool_t* res = 0); submits query to SQL server; if flag==0, result is not interesting and will be deleted; if flag==1, return result of submitted query; if flag==2, results is may be necessary for long time; Oracle plugin do not support working with several TSQLResult; objects, therefore explicit deep copy will be produced; If ok!=0, it will contains kTRUE is Query was successfull, otherwise kFALSE. Bool_t SQLCanStatement(); Test if DB support statement and number of open statements is not exceeded. TSQLStatement* SQLStatement(const char* cmd, Int_t bufsize = 1000); Produces SQL statement for currently conected DB server. void SQLDeleteStatement(TSQLStatement* stmt); delete statement and decrease counter. Bool_t SQLApplyCommands(TObjArray* cmds); supplies set of commands to server; Commands is stored as array of TObjString. Bool_t SQLTestTable(const char* tablename); Test, if table of specif",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSQLFile.html:40911,access,access,40911,root/html530/TSQLFile.html,https://root.cern,https://root.cern/root/html530/TSQLFile.html,5,['access'],['access']
Security,"TSQLObjectData Keeps the data requested from the SQL server for an object.; TSQLObjectDataPool XML object keeper class ; TSQLObjectInfo Info (classname, version) about object in database ; TSQLResult SQL query result; TSQLRow One row of an SQL query result; TSQLServer Connection to SQL server; TSQLStatement SQL statement; TSQLStructure Table/structure description used internally by YBufferSQL.; TSQLTableData Collection of columns data for single SQL table; TSQLTableInfo Summury information about SQL table; TSVG SVG driver; TSecContext Class providing host specific authentication information; TSecContextCleanup Update the remote authentication table; TSelector A utility class for tree and object processing; TSelectorCint A utility class for tree and object processing (interpreted version); TSelectorDraw A specialized TSelector for TTree::Draw; TSelectorEntries A specialized TSelector for TTree::GetEntries(selection); TSelectorList Special TList used in the TSelector; TSelectorScalar Mergable scalar; TSemaphore Counting semaphore class; TSeqCollection Sequenceable collection ABC; TServerSocket This class implements server sockets; TSessionDescription Session description; TSessionFrame Session frame; TSessionInputFrame Input frame; TSessionLogView PROOF progress dialog; TSessionOutputFrame Output frame; TSessionQueryFrame Query frame; TSessionServerFrame Server frame; TSessionViewer Session Viewer; TShape Basic shape; TSignalHandler Signal event handler; TSlave PROOF slave server; TSlaveInfo basic info on slave; TSlaveLite PROOF lite worker server; TSlider A user interface slider.; TSliderBox The moving box of a TSlider; TSocket This class implements client sockets; TSortedList A sorted list; TSpectrum Peak Finder, background estimator, Deconvolution; TSpectrum2 Peak Finder, background estimator, Deconvolution for 2-D histograms; TSpectrum2Fit Spectrum2 Fitter using algorithm without matrix inversion and conjugate gradient method for symmetrical matrices (Stiefel-Heste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:116433,authenticat,authentication,116433,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,2,['authenticat'],['authentication']
Security,"TSocket::kPROOFD; static TSocket::EServiceTypeTSocket::kROOTD; static TSocket::EInterestTSocket::kRead; static TSocket::EServiceTypeTSocket::kSOCKD; static TObject::(anonymous)TObject::kSingleKey; static TSocket::EInterestTSocket::kWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompressCompression level and algorithm; TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. Int_t*fReadBytesLeftbytes left to read for specified socket; TMonitor*fReadMonitormonitor read from parallel sockets; char**fReadPtrpointer to read buffer for specified socket; Int_tfSizenumber of parallel sockets; TSocket**fSocketsarray of parallel sockets; Int_t*fWriteBytesLeftbytes left to write for specified socket; TMonitor*fWr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPSocket.html:10820,authenticat,authentication,10820,root/html602/TPSocket.html,https://root.cern,https://root.cern/root/html602/TPSocket.html,2,['authenticat'],['authentication']
Security,"TSocket::kPROOFD; static TSocket::EServiceTypeTSocket::kROOTD; static TSocket::EInterestTSocket::kRead; static TSocket::EServiceTypeTSocket::kSOCKD; static TObject::(anonymous)TObject::kSingleKey; static TSocket::EInterestTSocket::kWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompressCompression level and algorithm; TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. Int_tfTcpWindowSizesize of tcp window (for window scaling). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a parallel server socket object on a specified port. Set reuse; to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPServerSocket.html:10955,authenticat,authentication,10955,root/html602/TPServerSocket.html,https://root.cern,https://root.cern/root/html602/TPServerSocket.html,2,['authenticat'],['authentication']
Security,"TSocket::kPROOFD; static TSocket::EServiceTypeTSocket::kROOTD; static TSocket::EInterestTSocket::kRead; static TSocket::EServiceTypeTSocket::kSOCKD; static TObject::(anonymous)TObject::kSingleKey; static TSocket::EInterestTSocket::kWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompressCompression level and algorithm; TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. SSL*fSSL; SSL_CTX*fSSLCtx; static charfgSSLCAFile[2147483647]; static charfgSSLCAPath[2147483647]; static charfgSSLUCert[2147483647]; static charfgSSLUKey[2147483647]. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSocket. ←; TSSLSocket. Function documentation; void WrapWithSSL(void); Wraps the socket with OpenSSL. TSSLSo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSSLSocket.html:10620,authenticat,authentication,10620,root/html602/TSSLSocket.html,https://root.cern,https://root.cern/root/html602/TSSLSocket.html,2,['authenticat'],['authentication']
Security,"TSocket::kPROOFD; static TSocket::EServiceTypeTSocket::kROOTD; static TSocket::EInterestTSocket::kRead; static TSocket::EServiceTypeTSocket::kSOCKD; static TObject::(anonymous)TObject::kSingleKey; static TSocket::EInterestTSocket::kWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompressCompression level and algorithm; TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TSeqCollection*fSecContextsList of TSecContext with cleanup info; static UChar_tfgAcceptOptDefault accept options; static SrvClup_tfgSrvAuthClupHook; static SrvAuth_tfgSrvAuthHook. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSocket. ←; TServerSocket. ←. TPServerSocket. Function documentation; TServerSocket(const char* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TServerSocket.html:10672,authenticat,authentication,10672,root/html602/TServerSocket.html,https://root.cern,https://root.cern/root/html602/TServerSocket.html,2,['authenticat'],['authentication']
Security,"TStreamerElement.cxx. ◆ GetMethod(). ULongptr_t TStreamerBase::GetMethod ; (; ); const. inlineoverridevirtual . Reimplemented from TStreamerElement.; Definition at line 179 of file TStreamerElement.h. ◆ GetNewBaseClass(). TClass * TStreamerBase::GetNewBaseClass ; (; ). inline . Definition at line 178 of file TStreamerElement.h. ◆ GetSize(). Int_t TStreamerBase::GetSize ; (; ); const. overridevirtual . Returns size of baseclass in bytes. ; Reimplemented from TStreamerElement.; Definition at line 674 of file TStreamerElement.cxx. ◆ Init() [1/2]. void TStreamerBase::Init ; (; Bool_t ; isTransient = kFALSE). Definition at line 689 of file TStreamerElement.cxx. ◆ Init() [2/2]. void TStreamerBase::Init ; (; TVirtualStreamerInfo * ; obj = nullptr). overridevirtual . Setup the element. ; Reimplemented from TStreamerElement.; Definition at line 684 of file TStreamerElement.cxx. ◆ InitStreaming(). void TStreamerBase::InitStreaming ; (; Bool_t ; isTransient). protected . Error message in case of checksum/version mismatch. ; Setup the fStreamerFunc and fStreamerinfo. ; Definition at line 700 of file TStreamerElement.cxx. ◆ IsA(). TClass * TStreamerBase::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 194 of file TStreamerElement.h. ◆ IsBase(). Bool_t TStreamerBase::IsBase ; (; ); const. overridevirtual . Return kTRUE if the element represent a base class. ; Reimplemented from TStreamerElement.; Definition at line 728 of file TStreamerElement.cxx. ◆ ls(). void TStreamerBase::ls ; (; Option_t * ; option = """"); const. overridevirtual . Print the content of the element. ; Reimplemented from TNamed.; Definition at line 750 of file TStreamerElement.cxx. ◆ operator=(). TStreamerBase & TStreamerBase::operator= ; (; const TStreamerBase & ; ). privatedelete . ◆ ReadBuffer(). Int_t TStreamerBase::ReadBuffer ; (; TBuffer & ; b, . char * ; pointer . ). Read the content of the buffer. ; Definition at line 764",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerBase.html:21571,checksum,checksum,21571,doc/master/classTStreamerBase.html,https://root.cern,https://root.cern/doc/master/classTStreamerBase.html,1,['checksum'],['checksum']
Security,"TString* dsTree = 0, Bool_t onlyCurrent = kFALSE, Bool_t wildcards = kFALSE); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tRegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); virtual Bool_tRemoveDataSet(const char* uri); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tScanDataSet(const char* uri, UInt_t option = kReopen|kDebug); static Int_tTDataSetManager::ScanFile(TFileInfo* fileinfo, Bool_t notify); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidTDataSetManager::SetScanCounters(Int_t t = -1, Int_t o = -1, Int_t d = -1); virtual voidTObject::SetUniqueID(UInt_t uid); virtual Int_tShowCache(const char* uri = 0); virtual voidTDataSetManager::ShowDataSets(const char* uri = ""*"", const char* opt = """"); virtual voidShowMembers(TMemberInspector& insp); virtual voidTDataSetManager::ShowQuota(const char* opt); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Int_tWriteDataSet(const char* group, const char* user, const char* dsName, TFileCollection* dataset, UInt_t option = 0, TMD5* checksum = 0).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TDataSetManagerFile.html:7363,checksum,checksum,7363,root/html530/TDataSetManagerFile.html,https://root.cern,https://root.cern/root/html530/TDataSetManagerFile.html,2,['checksum'],['checksum']
Security,"TString::Format(""sourceClass=%s targetClass=%s"",GetName(),newname.Data()));; 4751 } else {; 4752 Error(""GetStreamerInfoAbstractEmulated"", ""could not create TVirtualStreamerInfo"");; 4753 }; 4754 }; 4755 }; 4756 return sinfo;; 4757}; 4758 ; 4759////////////////////////////////////////////////////////////////////////////////; 4760/// For the case where the requestor class is emulated and this class is abstract,; 4761/// returns a pointer to the TVirtualStreamerInfo object for version with an emulated; 4762/// representation whether or not the class is loaded.; 4763///; 4764/// If the object does not exist, it is created; 4765///; 4766/// Warning: If we create a new streamer info, whether or not the build; 4767/// optimizes is controlled externally to us by a global variable!; 4768/// Don't call us unless you have set that variable properly; 4769/// with TStreamer::Optimize()!; 4770///; 4771 ; 4772TVirtualStreamerInfo* TClass::FindStreamerInfoAbstractEmulated(UInt_t checksum) const; 4773{; 4774 TVirtualStreamerInfo *sinfo = nullptr;; 4775 ; 4776 TString newname(GetName());; 4777 newname += ""@@emulated"";; 4778 ; 4779 R__LOCKGUARD(gInterpreterMutex);; 4780 ; 4781 TClass *emulated = TClass::GetClass(newname);; 4782 ; 4783 if (emulated); 4784 sinfo = emulated->FindStreamerInfo(checksum);; 4785 ; 4786 if (!sinfo) {; 4787 // The emulated version of the streamerInfo is explicitly requested and has; 4788 // not been built yet.; 4789 ; 4790 sinfo = (TVirtualStreamerInfo*) FindStreamerInfo(checksum);; 4791 ; 4792 if (!sinfo && (checksum != fCheckSum)) {; 4793 // When the requested version does not exist we return; 4794 // the TVirtualStreamerInfo for the currently loaded class version.; 4795 // FIXME: This arguably makes no sense, we should warn and return nothing instead.; 4796 sinfo = (TVirtualStreamerInfo*) fStreamerInfo->At(fClassVersion);; 4797 }; 4798 ; 4799 if (!sinfo) {; 4800 // Let's take the first available StreamerInfo as a start; 4801 Int_t ninfos = fStreamerInfo->Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:181368,checksum,checksum,181368,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,2,['checksum'],['checksum']
Security,"TString::Format(""sourceClass=%s targetClass=%s"",GetName(),newname.Data()));; 4818 } else {; 4819 Error(""GetStreamerInfoAbstractEmulated"", ""could not create TVirtualStreamerInfo"");; 4820 }; 4821 }; 4822 }; 4823 return sinfo;; 4824}; 4825 ; 4826////////////////////////////////////////////////////////////////////////////////; 4827/// For the case where the requestor class is emulated and this class is abstract,; 4828/// returns a pointer to the TVirtualStreamerInfo object for version with an emulated; 4829/// representation whether or not the class is loaded.; 4830///; 4831/// If the object does not exist, it is created; 4832///; 4833/// Warning: If we create a new streamer info, whether or not the build; 4834/// optimizes is controlled externally to us by a global variable!; 4835/// Don't call us unless you have set that variable properly; 4836/// with TStreamer::Optimize()!; 4837///; 4838 ; 4839TVirtualStreamerInfo* TClass::FindStreamerInfoAbstractEmulated(UInt_t checksum) const; 4840{; 4841 TVirtualStreamerInfo *sinfo = nullptr;; 4842 ; 4843 TString newname(GetName());; 4844 newname += ""@@emulated"";; 4845 ; 4846 R__LOCKGUARD(gInterpreterMutex);; 4847 ; 4848 TClass *emulated = TClass::GetClass(newname);; 4849 ; 4850 if (emulated); 4851 sinfo = emulated->FindStreamerInfo(checksum);; 4852 ; 4853 if (!sinfo) {; 4854 // The emulated version of the streamerInfo is explicitly requested and has; 4855 // not been built yet.; 4856 ; 4857 sinfo = (TVirtualStreamerInfo*) FindStreamerInfo(checksum);; 4858 ; 4859 if (!sinfo && (checksum != fCheckSum)) {; 4860 // When the requested version does not exist we return; 4861 // the TVirtualStreamerInfo for the currently loaded class version.; 4862 // FIXME: This arguably makes no sense, we should warn and return nothing instead.; 4863 sinfo = (TVirtualStreamerInfo*) fStreamerInfo->At(fClassVersion);; 4864 }; 4865 ; 4866 if (!sinfo) {; 4867 // Let's take the first available StreamerInfo as a start; 4868 Int_t ninfos = fStreamerInfo->Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:184119,checksum,checksum,184119,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,2,['checksum'],['checksum']
Security,"TTree called ""MyTree"" in the file:; TTreeReader reader(""MyTree"", file);. The TTreeReader Values and Arrays; This reader object can now be used by the data accessors. There are two types: TTreeReaderArray can iterate through collections (std::vector, TClonesArray, TList, MyType[12] - whatever) and TTreeReaderValue that doesn't. You can choose how you access the values - for our tree, all of these might make sense in different contexts:; TTreeReaderValue<float> rvMissingET(reader, ""missingET"");; // The following needs the definition of the Muon class - which is why accessing; // data member branches is much simpler.; TTreeReaderValue<std::vector<Muon>> rvMuons(reader, ""muons"");. TTreeReaderArray<float> raMuonPt(reader, ""muons.fPt"");; // Here, too we would need the definition of the Muon class.; TTreeReaderArray<Muon> raMuons(reader, ""muons"");. Accessing Data; The TTreeReader checks whether the type you specify is the type that's stored in the branch, i.e. whether it can actually access the data through the reader object. The TTreeReaderValue gets its values like so:; // Loop through all the TTree's entries; while (reader.Next()) {; // behaves like an iterator; float missingET = *rvMissingET;; ...; }. A TTreeReaderArray allows you to get the size and access the n-th element:; while (reader.Next()) {; for (int iMuon = 0, nMuons = raMuonPt.GetSize(); iMuon < nMuons; ++iMuon) {; hist->Fill(raMuonPt[iMuon]);; }; }. Of course in C++11 you could also just do; while (reader.Next()) {; for (float pT: raMuonPt) {; hist->Fill(pT);; }; }. We will try all of this out later; you are welcome to write a little script to test this on our TTree.; . ‹ 6. Multivariate Analysis; up; 8. Efficiency Calculation ›. Navigate through this book; 0. Setting up ROOT; 1. Extracting an object from a TFile; 2. Running code in ROOT; 4. Histogramming; 3. Examining a TTree's data; 5. Fitting; 6. Multivariate Analysis; 7. Using the TTreeReader; 8. Efficiency Calculation; 9. Fitting By Coding; 10. Go Paral",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/7-using-ttreereader.html:3577,access,access,3577,d/7-using-ttreereader.html,https://root.cern,https://root.cern/d/7-using-ttreereader.html,1,['access'],['access']
Security,"TTreeFormula * UseBranch (TTree *, const char *);  Sets a formula that can be used to make the neuron an input. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNeuron.html:4770,hash,hash,4770,doc/master/classTNeuron.html,https://root.cern,https://root.cern/doc/master/classTNeuron.html,1,['hash'],['hash']
Security,"TTreeReader::Notify().Definition TTreeReader.h:323; TTreeReader::fProxiesSetbool fProxiesSetTrue if the proxies have been set, false otherwise.Definition TTreeReader.h:337; TTreeReader::IsChainbool IsChain() constDefinition TTreeReader.h:203; TTreeReader::AddProxyvoid AddProxy(std::unique_ptr< ROOT::Internal::TNamedBranchProxy > p)Definition TTreeReader.h:281; TTreeReader::EEntryStatusEEntryStatusDefinition TTreeReader.h:152; TTreeReader::kEntryNotFound@ kEntryNotFoundthe tree entry number does not existDefinition TTreeReader.h:156; TTreeReader::kIndexedFriendNoMatch@ kIndexedFriendNoMatchA friend with TTreeIndex doesn't have an entry for this index.Definition TTreeReader.h:162; TTreeReader::kEntryUnknownError@ kEntryUnknownErrorLoadTree return less than -6, likely a 'newer' error code.Definition TTreeReader.h:164; TTreeReader::kEntryDictionaryError@ kEntryDictionaryErrorproblem reading dictionary info from treeDefinition TTreeReader.h:159; TTreeReader::kEntryChainSetupError@ kEntryChainSetupErrorproblem in accessing a chain element, e.g. file without the treeDefinition TTreeReader.h:157; TTreeReader::kMissingBranchWhenSwitchingTree@ kMissingBranchWhenSwitchingTreeA branch was not found when switching to the next TTree in the chain.Definition TTreeReader.h:163; TTreeReader::kEntryNotLoaded@ kEntryNotLoadedno entry has been loaded yetDefinition TTreeReader.h:154; TTreeReader::kEntryBeyondEnd@ kEntryBeyondEndlast entry loop has reached its endDefinition TTreeReader.h:160; TTreeReader::kEntryChainFileError@ kEntryChainFileErrorproblem in opening a chain's fileDefinition TTreeReader.h:158; TTreeReader::kEntryNoTree@ kEntryNoTreethe tree does not existDefinition TTreeReader.h:155; TTreeReader::kEntryBadReader@ kEntryBadReaderOne of the readers was not successfully initialized.Definition TTreeReader.h:161; TTreeReader::kEntryValid@ kEntryValiddata read okayDefinition TTreeReader.h:153; TTreeReader::fSetEntryBaseCallingLoadTreebool fSetEntryBaseCallingLoadTreeTrue if durin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeReader_8h_source.html:21544,access,accessing,21544,doc/master/TTreeReader_8h_source.html,https://root.cern,https://root.cern/doc/master/TTreeReader_8h_source.html,1,['access'],['accessing']
Security,"TVirtualGeoTrack * GetTrackOfId(Int_t id) constGet track with a given ID.Definition TGeoManager.cxx:2200; TGeoManager::GetParentTrackOfIdTVirtualGeoTrack * GetParentTrackOfId(Int_t id) constGet parent track with a given ID.Definition TGeoManager.cxx:2215; Supposing a particle represented by a primary track decays or interacts, one should not create new primaries as described before, but rather add them as secondary:; TVirtualGeoTrack *secondary =; ptrTrack->AddTrack(secondId,pdg,secondParticle);; At any step made by the current track, one is able to add control points to either primary or secondary:; track->AddPoint(x,y,z,t);; TVirtualGeoTrack::AddPointvirtual void AddPoint(Double_t x, Double_t y, Double_t z, Double_t t)=0; After tracks were defined and filled during tracking, one will be able to browse directly the list of tracks held by the manager class. Any track can be drawn using its Draw() and Animate() methods, but there are also global methods for drawing or animation that can be accessed from TGeoManager context menu:; TGeoManager::DrawTracks(Option_t *option);; TGeoManager::AnimateTracks(Double_t tmin=0.,Double_t tmax=1E-8,; Int_t nframes=200,Option_t *option="""");; Option_tconst char Option_tDefinition RtypesCore.h:66; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; TGeoManager::AnimateTracksvoid AnimateTracks(Double_t tmin=0, Double_t tmax=5E-8, Int_t nframes=200, Option_t *option=""/*"")Draw animation of tracks.Definition TGeoManager.cxx:1836; TGeoManager::DrawTracksvoid DrawTracks(Option_t *option="""")Draw tracks over the geometry, according to option.Definition TGeoManager.cxx:1905; The drawing/animation time range is a global variable that can be directly set:; gGeoManager->SetTminTmax(tmin, tmax);; // without arguments resets the time range to the maximum value; TGeoManager::SetTminTmaxvoid SetTminTmax(Double_t tmin=0, Double_t tmax=999)Set time cut interval for drawing tracks.Definition TGeoManager.cxx:4242; Once set, the time ran",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:96510,access,accessed,96510,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['access'],['accessed']
Security,"TWebFile.; Definition at line 287 of file TS3WebFile.cxx. ◆ GetObjectKey(). const TString & TS3WebFile::GetObjectKey ; (; ); const. inline . Definition at line 99 of file TS3WebFile.h. ◆ GetSecretKey(). const TString & TS3WebFile::GetSecretKey ; (; ); const. inline . Definition at line 97 of file TS3WebFile.h. ◆ GetUrl(). const TUrl & TS3WebFile::GetUrl ; (; ); const. inline . Definition at line 100 of file TS3WebFile.h. ◆ IsA(). TClass * TS3WebFile::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TFile.; Definition at line 105 of file TS3WebFile.h. ◆ ParseOptions(). Bool_t TS3WebFile::ParseOptions ; (; Option_t * ; options, . TString & ; accessKey, . TString & ; secretKey, . TString & ; token . ). private . Extracts the S3 authentication key pair (access key and secret key) from the options. ; The authentication credentials can be specified in the options provided to the constructor of this class as a string containing: ""AUTH=<access key>:<secret key>"" and can include other options, for instance ""NOPROXY"" for not using the HTTP proxy for accessing this file's contents. For instance: ""NOPROXY AUTH=F38XYZABCDeFgHiJkLm:V+frt4re7J1euSNFnmaf8wwmI401234E7kzxZ/TTM+"" A security token may be given by the TOKEN option, in order to allow the use of a temporary key pair. ; Definition at line 255 of file TS3WebFile.cxx. ◆ ProcessHttpHeader(). void TS3WebFile::ProcessHttpHeader ; (; const TString & ; headerLine). overrideprotectedvirtual . This method is called by the super-class TWebFile when a HTTP header for this file is retrieved. ; We scan the 'Server' header to detect the type of S3 server this file is hosted on and to determine if it is known to support multi-range HTTP GET requests. Some S3 servers (for instance Amazon's) do not support that feature and when they receive a multi-range request they sent back the whole file contents. For this class, if the server do not support multirange requests we issue multiple sin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTS3WebFile.html:54011,authenticat,authentication,54011,doc/master/classTS3WebFile.html,https://root.cern,https://root.cern/doc/master/classTS3WebFile.html,3,"['access', 'authenticat']","['access', 'accessing', 'authentication']"
Security,"Temperature Map palette is used.; if ncolors = 105 and colors=0, a Thermometer palette is used.; if ncolors = 106 and colors=0, a Valentine palette is used.; if ncolors = 107 and colors=0, a Visible Spectrum palette is used.; if ncolors = 108 and colors=0, a Water Melon palette is used.; if ncolors = 109 and colors=0, a Cool palette is used.; if ncolors = 110 and colors=0, a Copper palette is used.; if ncolors = 111 and colors=0, a Gist Earth palette is used.; ; These palettes can also be accessed by names:; ; kDeepSea=51, kGreyScale=52, kDarkBodyRadiator=53,; kBlueYellow= 54, kRainBow=55, kInvertedDarkBodyRadiator=56,; kBird=57, kCubehelix=58, kGreenRedViolet=59,; kBlueRedYellow=60, kOcean=61, kColorPrintableOnGrey=62,; kAlpine=63, kAquamarine=64, kArmy=65,; kAtlantic=66, kAurora=67, kAvocado=68,; kBeach=69, kBlackBody=70, kBlueGreenYellow=71,; kBrownCyan=72, kCMYK=73, kCandy=74,; kCherry=75, kCoffee=76, kDarkRainBow=77,; kDarkTerrain=78, kFall=79, kFruitPunch=80,; kFuchsia=81, kGreyYellow=82, kGreenBrownTerrain=83,; kGreenPink=84, kIsland=85, kLake=86,; kLightTemperature=87, kLightTerrain=88, kMint=89,; kNeon=90, kPastel=91, kPearl=92,; kPigeon=93, kPlum=94, kRedBlue=95,; kRose=96, kRust=97, kSandyTerrain=98,; kSienna=99, kSolar=100, kSouthWest=101,; kStarryNight=102, kSunset=103, kTemperatureMap=104,; kThermometer=105, kValentine=106, kVisibleSpectrum=107,; kWaterMelon=108, kCool=109, kCopper=110,; kGistEarth=111; ; For example:; ; gStyle->SetPalette->(kBird);; ; Set the current palette as ""Bird"" (number 57).; ; The color numbers specified in the palette can be viewed by selecting; the item ""colors"" in the ""VIEW"" menu of the canvas toolbar.; The color parameters can be changed via TColor::SetRGB.; ; Note that when drawing a 2D histogram h2 with the option ""COL"" or; ""COLZ"" or with any ""CONT"" options using the color map, the number of colors; used is defined by the number of contours n specified with:; h2->SetContour(n); . void GetRGB(Float_t& r, Float_t& g, Float_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TColor.html:32233,access,accessed,32233,root/html604/TColor.html,https://root.cern,https://root.cern/root/html604/TColor.html,1,['access'],['accessed']
Security,"TextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; ROOT::Math::KahanSum::Accumulatestatic KahanSum< T, N > Accumulate(Iterator begin, Iterator end, T initialValue=T{})Iterate over a range and return an instance of a KahanSum.Definition Util.h:211. Definition at line 122 of file Util.h. Public Member Functions; template<class Iterator > ;  KahanSum (Iterator sumBegin, Iterator sumEnd, Iterator carryBegin, Iterator carryEnd);  Initialise the sum with a pre-existing state. ;  ; template<unsigned int M> ;  KahanSum (KahanSum< T, M > const &other);  Constructor to create a KahanSum from another KahanSum with a different number of accumulators. ;  ;  KahanSum (T initialSumValue, T initialCarryValue);  Initialise with a sum value and a carry value. ;  ;  KahanSum (T initialValue=T{});  Initialise the sum. ;  ; template<class Container_t > ; void Add (const Container_t &inputs);  Fill from a container that supports index access. ;  ; template<class Iterator > ; void Add (Iterator begin, Iterator end);  Accumulate from a range denoted by iterators. ;  ; void Add (T x);  Single-element accumulation. Will not vectorise. ;  ; void AddIndexed (T input, std::size_t index);  Add input to the sum. ;  ; T Carry () const;  ; template<typename U , unsigned int M> ; bool operator!= (KahanSum< U, M > const &other) const;  ; template<typename U , unsigned int M> ; KahanSum< T, N > & operator+= (const KahanSum< U, M > &other);  Add other KahanSum into accumulator. ;  ; KahanSum< T, N > & operator+= (T arg);  Add arg into accumulator. Does not vectorise. ;  ; KahanSum< T, N > operator- ();  ; template<typename U , unsigned int M> ; KahanSum< T, N > & operator-= (KahanSum< U, M > const &other);  Subtract other KahanSum. ;  ; template<typename U , unsigned int M> ; bool operator== (KahanSum< U, M > const &other) const;  ; T Result () const;  ; T Sum () const;  . Sta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html:4573,access,access,4573,doc/master/classROOT_1_1Math_1_1KahanSum.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html,1,['access'],['access']
Security,"The client argument is used in recursive calls to properly display the value or shape nature; of the client-server links. It should be zero in calls initiated by users. void printComponentTree(const char* indent = """", const char* namePat = 0, Int_t nLevel = 999); Print tree structure of expression tree on given ostream, only branch nodes are printed.; Lead nodes (variables) will not be shown. If namePat is not ""*"", only nodes with names matching the pattern will be printed. TString cleanBranchName() const; Construct a mangled name from the actual name that; is free of any math symbols that might be interpreted by TTree. UInt_t crc32(const char* data); Calculate crc32 checksum on given string. UInt_t crc32(const char* data, ULong_t sz, UInt_t crc = 0); update CRC32 with new data. UInt_t fnv1a32(const char* data); calculate 32 bit FNV1A hash of string. UInt_t fnv1a32(const char* data, ULong_t sz, UInt_t hash = fnv1a32start); update 32 bit FNV1A hash. ULong64_t fnv1a64(const char* data); calculate 64 bit FNV1A hash of string. ULong64_t fnv1a64(const char* data, ULong_t sz, ULong64_t hash = fnv1a64start); update 64 bit FNV1A hash. void printCompactTreeHook(ostream& os, const char* ind = """"); Hook function interface for object to insert additional information; when printed in the context of a tree structure. This default; implementation prints nothing. void registerCache(RooAbsCache& cache); Register RooAbsCache with this object. This function is called; by RooAbsCache constructors for objects that are a datamember; of this RooAbsArg. By registering itself the RooAbsArg is aware; of all its cache data members and will forward server change; and cache mode change calls to the cache objects, which in turn; can forward them their contents. void unRegisterCache(RooAbsCache& cache); Unregister a RooAbsCache. Called from the RooAbsCache destructor. Int_t numCaches() const; Return number of registered caches. RooAbsCache* getCache(Int_t index) const; Return registered cache obj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsArg.html:34461,hash,hash,34461,root/html534/RooAbsArg.html,https://root.cern,https://root.cern/root/html534/RooAbsArg.html,3,['hash'],['hash']
Security,"The number of bins along each direction can be change using; 118`SetNpx()` and `SetNpy()`. Each bin is filled with the Z; 119value found via a linear interpolation on the plane defined by the triangle above; 120the (X,Y) coordinates of the bin center.; 121 ; 122The existing (X,Y,Z) points can be randomly scattered.; 123The Delaunay triangles are build in the (X,Y) plane. These 2D triangles are then; 124used to define flat planes in (X,Y,Z) over which the interpolation is done to fill; 125the 2D histogram. The 3D triangles int takes build a 3D surface in; 126the form of tessellating triangles at various angles. The triangles found can be; 127drawn in 3D with one of the TGraph2D specific drawing options.; 128 ; 129The histogram generated by the Delaunay interpolation can be accessed using the; 130`GetHistogram()` method.; 131 ; 132The axis settings (title, ranges etc ...) can be changed accessing the axis via; 133the GetXaxis GetYaxis and GetZaxis methods. They access the histogram axis created; 134at drawing time only. Therefore they should called after the TGraph2D is drawn:; 135 ; 136~~~ {.cpp}; 137 auto g = new TGraph2D();; 138 ; 139 [...]; 140 ; 141 g->Draw(""tri1"");; 142 gPad->Update();; 143 g->GetXaxis()->SetTitle(""X axis title"");; 144~~~; 145 ; 146\anchor G2D02; 147## Examples; 148 ; 149\anchor G2D021; 150### SURF1 Example; 151 ; 152Begin_Macro(source); 153{; 154 auto c = new TCanvas(""c"",""Graph2D example"",0,0,600,400);; 155 Double_t x, y, z, P = 6.;; 156 Int_t np = 200;; 157 auto dt = new TGraph2D();; 158 dt->SetTitle(""Graph title; X axis title; Y axis title; Z axis title"");; 159 auto r = new TRandom();; 160 for (Int_t N=0; N<np; N++) {; 161 x = 2*P*(r->Rndm(N))-P;; 162 y = 2*P*(r->Rndm(N))-P;; 163 z = (sin(x)/x)*(sin(y)/y)+0.2;; 164 dt->SetPoint(N,x,y,z);; 165 }; 166 gStyle->SetPalette(1);; 167 dt->Draw(""surf1"");; 168}; 169End_Macro; 170 ; 171\anchor G2D022; 172### Fitting Example; 173 ; 1742D graphs can be fitted as shown by the following example:; 175 ; 176Be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph2D_8cxx_source.html:5609,access,access,5609,doc/master/TGraph2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph2D_8cxx_source.html,1,['access'],['access']
Security,"Therefore changing the pad to log scale along Z as no effect; 3943/// on the colors.; 3944/// - if expression has more than four fields the option ""PARA""or ""CANDLE""; 3945/// can be used.; 3946/// - If option contains the string ""goff"", no graphics is generated.; 3947/// \endparblock; 3948/// \param [in] nentries The number of entries to process (default is all); 3949/// \param [in] firstentry The first entry to process (default is 0); 3950///; 3951/// ### Drawing expressions using arrays and array elements; 3952///; 3953/// Let assumes, a leaf fMatrix, on the branch fEvent, which is a 3 by 3 array,; 3954/// or a TClonesArray.; 3955/// In a TTree::Draw expression you can now access fMatrix using the following; 3956/// syntaxes:; 3957///; 3958/// | String passed | What is used for each entry of the tree; 3959/// |-----------------|--------------------------------------------------------|; 3960/// | `fMatrix` | the 9 elements of fMatrix |; 3961/// | `fMatrix[][]` | the 9 elements of fMatrix |; 3962/// | `fMatrix[2][2]` | only the elements fMatrix[2][2] |; 3963/// | `fMatrix[1]` | the 3 elements fMatrix[1][0], fMatrix[1][1] and fMatrix[1][2] |; 3964/// | `fMatrix[1][]` | the 3 elements fMatrix[1][0], fMatrix[1][1] and fMatrix[1][2] |; 3965/// | `fMatrix[][0]` | the 3 elements fMatrix[0][0], fMatrix[1][0] and fMatrix[2][0] |; 3966///; 3967/// ""fEvent.fMatrix...."" same as ""fMatrix..."" (unless there is more than one leaf named fMatrix!).; 3968///; 3969/// In summary, if a specific index is not specified for a dimension, TTree::Draw; 3970/// will loop through all the indices along this dimension. Leaving off the; 3971/// last (right most) dimension of specifying then with the two characters '[]'; 3972/// is equivalent. For variable size arrays (and TClonesArray) the range; 3973/// of the first dimension is recalculated for each entry of the tree.; 3974/// You can also specify the index as an expression of any other variables from the; 3975/// tree.; 3976///; 3977/// TTree::D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:156969,access,access,156969,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['access'],['access']
Security,"This can be usesfull, when big number of objects should be stored in; data base and commitment required only if all operations were succesfull.; In that case in the end of all operations method Commit() should be; called. If operation on user-level is looks like not successfull,; method Rollback() will return database data and TSQLFile instance to; previous state.; In MySQL not all tables types support transaction mode of operation.; See SetTablesType() method for details . Bool_t Commit(); Commit transaction, started by StartTransaction() call.; Only after that call data will be written and visible on database side. Bool_t Rollback(); Rollback all operations, done after StartTransaction() call.; Database should return to initial state. void SetUseIndexes(Int_t use_type = kIndexesBasic); Specify usage of indexes for data tables; kIndexesNone = 0 - no indexes are used; kIndexesBasic = 1 - indexes used only for keys list and; objects list tables (default); kIndexesClass = 2 - index also created for every normal class table; kIndexesAll = 3 - index created for every table, including _streamer_ tables; Indexes in general should increase speed of access to objects data,; but they required more operations and more disk space on server side. const char* GetDataBaseName() const; Return name of data base on the host; For Oracle always return 0. void Close(Option_t* option = """"); Close a SQL file; For more comments see TFile::Close() function. ~TSQLFile(); destructor of TSQLFile object. void operator=(const TSQLFile& ); make private to exclude copy operator. Bool_t IsOpen() const; return kTRUE if file is opened and can be accessed. Int_t ReOpen(Option_t* mode); Reopen a file with a different access mode, like from READ to; See TFile::Open() for details. TKey* CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); create SQL key, which will store object in data base. TKey* CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSQLFile.html:37254,access,access,37254,root/html530/TSQLFile.html,https://root.cern,https://root.cern/root/html530/TSQLFile.html,2,['access'],['access']
Security,"This can be usesfull, when big number of objects should be stored in; data base and commitment required only if all operations were successful.; In that case in the end of all operations method Commit() should be; called. If operation on user-level is looks like not successfull,; method Rollback() will return database data and TSQLFile instance to; previous state.; In MySQL not all tables types support transaction mode of operation.; See SetTablesType() method for details . Bool_t Commit(); Commit transaction, started by StartTransaction() call.; Only after that call data will be written and visible on database side. Bool_t Rollback(); Rollback all operations, done after StartTransaction() call.; Database should return to initial state. void SetUseIndexes(Int_t use_type = kIndexesBasic); Specify usage of indexes for data tables; kIndexesNone = 0 - no indexes are used; kIndexesBasic = 1 - indexes used only for keys list and; objects list tables (default); kIndexesClass = 2 - index also created for every normal class table; kIndexesAll = 3 - index created for every table, including _streamer_ tables; Indexes in general should increase speed of access to objects data,; but they required more operations and more disk space on server side. const char* GetDataBaseName() const; Return name of data base on the host; For Oracle always return 0. void Close(Option_t* option = """"); Close a SQL file; For more comments see TFile::Close() function. ~TSQLFile(); destructor of TSQLFile object. void operator=(const TSQLFile& ); make private to exclude copy operator. Bool_t IsOpen() const; return kTRUE if file is opened and can be accessed. Int_t ReOpen(Option_t* mode); Reopen a file with a different access mode, like from READ to; See TFile::Open() for details. TKey* CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); create SQL key, which will store object in data base. TKey* CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSQLFile.html:37993,access,access,37993,root/html534/TSQLFile.html,https://root.cern,https://root.cern/root/html534/TSQLFile.html,3,['access'],['access']
Security,"TimeStamp;  ; EHTTPVerb fVerb;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TS3HTTPRequest.h>. Inheritance diagram for TS3HTTPRequest:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EAuthType. enum TS3HTTPRequest::EAuthType. EnumeratorkNoAuth ; kAmazon ; kGoogle . Definition at line 50 of file TS3HTTPRequest.h. ◆ EHTTPVerb. enum TS3HTTPRequest::EHTTPVerb. EnumeratorkGET ; kPOST ; kPUT ; kDELETE ; kHEAD ; kCOPY . Definition at line 49 of file TS3HTTPRequest.h. Constructor & Destructor Documentation. ◆ TS3HTTPRequest() [1/3]. TS3HTTPRequest::TS3HTTPRequest ; (; ). Definition at line 57 of file TS3HTTPRequest.cxx. ◆ TS3HTTPRequest() [2/3]. TS3HTTPRequest::TS3HTTPRequest ; (; EHTTPVerb ; httpVerb, . const TString & ; host, . const TString & ; bucket, . const TString & ; objectKey, . EAuthType ; authType, . const TString & ; accessKey, . const TString & ; secretKey . ). Default constructor. ; Definition at line 65 of file TS3HTTPRequest.cxx. ◆ TS3HTTPRequest() [3/3]. TS3HTTPRequest::TS3HTTPRequest ; (; const TS3HTTPRequest & ; m). Copy constructor. ; Definition at line 81 of file TS3HTTPRequest.cxx. ◆ ~TS3HTTPRequest(). virtual TS3HTTPRequest::~TS3HTTPRequest ; (; ). inlinevirtual . Definition at line 83 of file TS3HTTPRequest.h. Member Function Documentation. ◆ Class(). static TClass * TS3HTTPRequest::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TS3HTTPRequest::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TS3HTTPRequest::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 104 of file TS3HTTPRequest.h. ◆ ComputeSignature(). TString TS3HTTPRequest::ComputeSignature ; (; TS3HTTPRequest::EHTTPVerb ; httpVerb); const. protected . Returns this request's sign",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTS3HTTPRequest.html:13291,access,accessKey,13291,doc/master/classTS3HTTPRequest.html,https://root.cern,https://root.cern/doc/master/classTS3HTTPRequest.html,1,['access'],['accessKey']
Security,"Timer>(milliSec, mode, *this);; 501 fTimer->TurnOn();; 502 }; 503 }; 504}; 505 ; 506////////////////////////////////////////////////////////////////////////////////; 507/// Creates special thread to process all requests, directed to http server; 508///; 509/// Should be used with care - only dedicated instance of TRootSniffer is allowed; 510/// By default THttpServer allows to access global lists pointers gROOT or gFile.; 511/// To be on the safe side, all kind of such access performed from the main thread.; 512/// Therefore usage of specialized thread means that no any global pointers will; 513/// be accessible by THttpServer; 514 ; 515void THttpServer::CreateServerThread(); 516{; 517 if (fOwnThread); 518 return;; 519 ; 520 SetTimer(0);; 521 fMainThrdId = 0;; 522 fOwnThread = true;; 523 ; 524 std::thread thrd([this] {; 525 int nempty = 0;; 526 while (fOwnThread && !fTerminated) {; 527 int nprocess = ProcessRequests();; 528 if (nprocess > 0); 529 nempty = 0;; 530 else; 531 nempty++;; 532 if (nempty > 1000) {; 533 nempty = 0;; 534 std::this_thread::sleep_for(std::chrono::milliseconds(1));; 535 }; 536 }; 537 });; 538 ; 539 fThrd = std::move(thrd);; 540}; 541 ; 542////////////////////////////////////////////////////////////////////////////////; 543/// Stop server thread; 544///; 545/// Normally called shortly before http server destructor; 546 ; 547void THttpServer::StopServerThread(); 548{; 549 if (!fOwnThread); 550 return;; 551 ; 552 fOwnThread = false;; 553 fThrd.join();; 554 fMainThrdId = 0;; 555}; 556 ; 557////////////////////////////////////////////////////////////////////////////////; 558/// Checked that filename does not contains relative path below current directory; 559///; 560/// Used to prevent access to files below current directory; 561 ; 562Bool_t THttpServer::VerifyFilePath(const char *fname); 563{; 564 if (!fname || (*fname == 0)); 565 return kFALSE;; 566 ; 567 Int_t level = 0;; 568 ; 569 while (*fname) {; 570 ; 571 // find next slash or backslash; 572",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THttpServer_8cxx_source.html:17166,access,accessible,17166,doc/master/THttpServer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THttpServer_8cxx_source.html,1,['access'],['accessible']
Security,"Transient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; RooCategoryProxy_indexCatIndex category; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooSimultaneous.html:42678,access,access,42678,root/html602/RooSimultaneous.html,https://root.cern,https://root.cern/root/html602/RooSimultaneous.html,2,['access'],['access']
Security,"Transient! Transient boolean attributes (not copied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealProxy_nNumber of expected events; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooExtendedTerm.html:41689,access,access,41689,root/html602/RooExtendedTerm.html,https://root.cern,https://root.cern/root/html602/RooExtendedTerm.html,4,['access'],['access']
Security,"Tree () const;  ; Bool_t IsValid () const;  ; void Lookup (Bool_t removeMissing=kFALSE, TList **missingFiles=0);  Resolve the end-point URL for the current elements of this data set If the removeMissing option is set to kTRUE, remove the TDSetElements that can not be located. ;  ; virtual TDSetElement * Next (Long64_t totalEntries=-1);  Returns next TDSetElement. ;  ; void Print (Option_t *option="""") const override;  Print TDSet basic or full data. When option=""a"" print full data. ;  ; virtual Long64_t Process (const char *selector, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0, TObject *enl=0);  Process TDSet on currently active PROOF session. ;  ; virtual Long64_t Process (TSelector *selector, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0, TObject *enl=0);  Process TDSet on currently active PROOF session. ;  ; Int_t Remove (TDSetElement *elem, Bool_t deleteElem=kTRUE);  Remove TDSetElement 'elem' from the list. ;  ; virtual void Reset ();  Reset or initialize access to the elements. ;  ; void SetDirectory (const char *dir);  Set/change directory. ;  ; virtual void SetEntryList (TObject *aList);  Set entry (or event) list for this data set. ;  ; void SetLookedUp ();  Flag all the elements as looked-up, so to avoid opening the files if the functionality is not supported. ;  ; void SetObjName (const char *objname);  Set/change object name. ;  ; void SetSrvMaps (TList *srvmaps=0);  Set (or unset) the list for mapping servers coordinate for files. ;  ; void SetWriteV3 (Bool_t on=kTRUE);  Set/Reset the 'OldStreamer' bit in this instance and its elements. ;  ; virtual void StartViewer ();  Start the TTreeViewer on this TTree. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TDSet. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Validate ();  Validate the TDSet by opening files. ;  ; void Validate (TDSet *dset);  Validate the TDSet against another TDSet. ;  ;  Public Member Functions inheri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDSet.html:5678,access,access,5678,doc/master/classTDSet.html,https://root.cern,https://root.cern/doc/master/classTDSet.html,1,['access'],['access']
